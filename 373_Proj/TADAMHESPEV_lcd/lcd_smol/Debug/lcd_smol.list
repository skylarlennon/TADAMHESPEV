
lcd_smol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006258  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d8  080063e4  080063e4  000163e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069bc  080069bc  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  080069bc  080069bc  000169bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069c4  080069c4  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069c4  080069c4  000169c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069c8  080069c8  000169c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  080069cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  200000a0  08006a6c  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e0  08006a6c  000202e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015507  00000000  00000000  00020113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029d0  00000000  00000000  0003561a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012e8  00000000  00000000  00037ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ece  00000000  00000000  000392d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022164  00000000  00000000  0003a1a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015ca5  00000000  00000000  0005c30a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d180e  00000000  00000000  00071faf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000051b4  00000000  00000000  001437c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  00148974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	200000a0 	.word	0x200000a0
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080063cc 	.word	0x080063cc

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	200000a4 	.word	0x200000a4
 80001c8:	080063cc 	.word	0x080063cc

080001cc <__aeabi_drsub>:
 80001cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d0:	e002      	b.n	80001d8 <__adddf3>
 80001d2:	bf00      	nop

080001d4 <__aeabi_dsub>:
 80001d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d8 <__adddf3>:
 80001d8:	b530      	push	{r4, r5, lr}
 80001da:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001de:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e2:	ea94 0f05 	teq	r4, r5
 80001e6:	bf08      	it	eq
 80001e8:	ea90 0f02 	teqeq	r0, r2
 80001ec:	bf1f      	itttt	ne
 80001ee:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fe:	f000 80e2 	beq.w	80003c6 <__adddf3+0x1ee>
 8000202:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000206:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020a:	bfb8      	it	lt
 800020c:	426d      	neglt	r5, r5
 800020e:	dd0c      	ble.n	800022a <__adddf3+0x52>
 8000210:	442c      	add	r4, r5
 8000212:	ea80 0202 	eor.w	r2, r0, r2
 8000216:	ea81 0303 	eor.w	r3, r1, r3
 800021a:	ea82 0000 	eor.w	r0, r2, r0
 800021e:	ea83 0101 	eor.w	r1, r3, r1
 8000222:	ea80 0202 	eor.w	r2, r0, r2
 8000226:	ea81 0303 	eor.w	r3, r1, r3
 800022a:	2d36      	cmp	r5, #54	; 0x36
 800022c:	bf88      	it	hi
 800022e:	bd30      	pophi	{r4, r5, pc}
 8000230:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000234:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000238:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800023c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000240:	d002      	beq.n	8000248 <__adddf3+0x70>
 8000242:	4240      	negs	r0, r0
 8000244:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000248:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800024c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000250:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x84>
 8000256:	4252      	negs	r2, r2
 8000258:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800025c:	ea94 0f05 	teq	r4, r5
 8000260:	f000 80a7 	beq.w	80003b2 <__adddf3+0x1da>
 8000264:	f1a4 0401 	sub.w	r4, r4, #1
 8000268:	f1d5 0e20 	rsbs	lr, r5, #32
 800026c:	db0d      	blt.n	800028a <__adddf3+0xb2>
 800026e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000272:	fa22 f205 	lsr.w	r2, r2, r5
 8000276:	1880      	adds	r0, r0, r2
 8000278:	f141 0100 	adc.w	r1, r1, #0
 800027c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000280:	1880      	adds	r0, r0, r2
 8000282:	fa43 f305 	asr.w	r3, r3, r5
 8000286:	4159      	adcs	r1, r3
 8000288:	e00e      	b.n	80002a8 <__adddf3+0xd0>
 800028a:	f1a5 0520 	sub.w	r5, r5, #32
 800028e:	f10e 0e20 	add.w	lr, lr, #32
 8000292:	2a01      	cmp	r2, #1
 8000294:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000298:	bf28      	it	cs
 800029a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	18c0      	adds	r0, r0, r3
 80002a4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002ac:	d507      	bpl.n	80002be <__adddf3+0xe6>
 80002ae:	f04f 0e00 	mov.w	lr, #0
 80002b2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ba:	eb6e 0101 	sbc.w	r1, lr, r1
 80002be:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c2:	d31b      	bcc.n	80002fc <__adddf3+0x124>
 80002c4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c8:	d30c      	bcc.n	80002e4 <__adddf3+0x10c>
 80002ca:	0849      	lsrs	r1, r1, #1
 80002cc:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d4:	f104 0401 	add.w	r4, r4, #1
 80002d8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002dc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e0:	f080 809a 	bcs.w	8000418 <__adddf3+0x240>
 80002e4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e8:	bf08      	it	eq
 80002ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ee:	f150 0000 	adcs.w	r0, r0, #0
 80002f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f6:	ea41 0105 	orr.w	r1, r1, r5
 80002fa:	bd30      	pop	{r4, r5, pc}
 80002fc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000300:	4140      	adcs	r0, r0
 8000302:	eb41 0101 	adc.w	r1, r1, r1
 8000306:	3c01      	subs	r4, #1
 8000308:	bf28      	it	cs
 800030a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030e:	d2e9      	bcs.n	80002e4 <__adddf3+0x10c>
 8000310:	f091 0f00 	teq	r1, #0
 8000314:	bf04      	itt	eq
 8000316:	4601      	moveq	r1, r0
 8000318:	2000      	moveq	r0, #0
 800031a:	fab1 f381 	clz	r3, r1
 800031e:	bf08      	it	eq
 8000320:	3320      	addeq	r3, #32
 8000322:	f1a3 030b 	sub.w	r3, r3, #11
 8000326:	f1b3 0220 	subs.w	r2, r3, #32
 800032a:	da0c      	bge.n	8000346 <__adddf3+0x16e>
 800032c:	320c      	adds	r2, #12
 800032e:	dd08      	ble.n	8000342 <__adddf3+0x16a>
 8000330:	f102 0c14 	add.w	ip, r2, #20
 8000334:	f1c2 020c 	rsb	r2, r2, #12
 8000338:	fa01 f00c 	lsl.w	r0, r1, ip
 800033c:	fa21 f102 	lsr.w	r1, r1, r2
 8000340:	e00c      	b.n	800035c <__adddf3+0x184>
 8000342:	f102 0214 	add.w	r2, r2, #20
 8000346:	bfd8      	it	le
 8000348:	f1c2 0c20 	rsble	ip, r2, #32
 800034c:	fa01 f102 	lsl.w	r1, r1, r2
 8000350:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000354:	bfdc      	itt	le
 8000356:	ea41 010c 	orrle.w	r1, r1, ip
 800035a:	4090      	lslle	r0, r2
 800035c:	1ae4      	subs	r4, r4, r3
 800035e:	bfa2      	ittt	ge
 8000360:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000364:	4329      	orrge	r1, r5
 8000366:	bd30      	popge	{r4, r5, pc}
 8000368:	ea6f 0404 	mvn.w	r4, r4
 800036c:	3c1f      	subs	r4, #31
 800036e:	da1c      	bge.n	80003aa <__adddf3+0x1d2>
 8000370:	340c      	adds	r4, #12
 8000372:	dc0e      	bgt.n	8000392 <__adddf3+0x1ba>
 8000374:	f104 0414 	add.w	r4, r4, #20
 8000378:	f1c4 0220 	rsb	r2, r4, #32
 800037c:	fa20 f004 	lsr.w	r0, r0, r4
 8000380:	fa01 f302 	lsl.w	r3, r1, r2
 8000384:	ea40 0003 	orr.w	r0, r0, r3
 8000388:	fa21 f304 	lsr.w	r3, r1, r4
 800038c:	ea45 0103 	orr.w	r1, r5, r3
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	f1c4 040c 	rsb	r4, r4, #12
 8000396:	f1c4 0220 	rsb	r2, r4, #32
 800039a:	fa20 f002 	lsr.w	r0, r0, r2
 800039e:	fa01 f304 	lsl.w	r3, r1, r4
 80003a2:	ea40 0003 	orr.w	r0, r0, r3
 80003a6:	4629      	mov	r1, r5
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	fa21 f004 	lsr.w	r0, r1, r4
 80003ae:	4629      	mov	r1, r5
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f094 0f00 	teq	r4, #0
 80003b6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ba:	bf06      	itte	eq
 80003bc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c0:	3401      	addeq	r4, #1
 80003c2:	3d01      	subne	r5, #1
 80003c4:	e74e      	b.n	8000264 <__adddf3+0x8c>
 80003c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ca:	bf18      	it	ne
 80003cc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d0:	d029      	beq.n	8000426 <__adddf3+0x24e>
 80003d2:	ea94 0f05 	teq	r4, r5
 80003d6:	bf08      	it	eq
 80003d8:	ea90 0f02 	teqeq	r0, r2
 80003dc:	d005      	beq.n	80003ea <__adddf3+0x212>
 80003de:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e2:	bf04      	itt	eq
 80003e4:	4619      	moveq	r1, r3
 80003e6:	4610      	moveq	r0, r2
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea91 0f03 	teq	r1, r3
 80003ee:	bf1e      	ittt	ne
 80003f0:	2100      	movne	r1, #0
 80003f2:	2000      	movne	r0, #0
 80003f4:	bd30      	popne	{r4, r5, pc}
 80003f6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fa:	d105      	bne.n	8000408 <__adddf3+0x230>
 80003fc:	0040      	lsls	r0, r0, #1
 80003fe:	4149      	adcs	r1, r1
 8000400:	bf28      	it	cs
 8000402:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000406:	bd30      	pop	{r4, r5, pc}
 8000408:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800040c:	bf3c      	itt	cc
 800040e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000412:	bd30      	popcc	{r4, r5, pc}
 8000414:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000418:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800041c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000420:	f04f 0000 	mov.w	r0, #0
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042a:	bf1a      	itte	ne
 800042c:	4619      	movne	r1, r3
 800042e:	4610      	movne	r0, r2
 8000430:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000434:	bf1c      	itt	ne
 8000436:	460b      	movne	r3, r1
 8000438:	4602      	movne	r2, r0
 800043a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043e:	bf06      	itte	eq
 8000440:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000444:	ea91 0f03 	teqeq	r1, r3
 8000448:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	bf00      	nop

08000450 <__aeabi_ui2d>:
 8000450:	f090 0f00 	teq	r0, #0
 8000454:	bf04      	itt	eq
 8000456:	2100      	moveq	r1, #0
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000460:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000464:	f04f 0500 	mov.w	r5, #0
 8000468:	f04f 0100 	mov.w	r1, #0
 800046c:	e750      	b.n	8000310 <__adddf3+0x138>
 800046e:	bf00      	nop

08000470 <__aeabi_i2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000484:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000488:	bf48      	it	mi
 800048a:	4240      	negmi	r0, r0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e73e      	b.n	8000310 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_f2d>:
 8000494:	0042      	lsls	r2, r0, #1
 8000496:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049a:	ea4f 0131 	mov.w	r1, r1, rrx
 800049e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a2:	bf1f      	itttt	ne
 80004a4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004ac:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b0:	4770      	bxne	lr
 80004b2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b6:	bf08      	it	eq
 80004b8:	4770      	bxeq	lr
 80004ba:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004be:	bf04      	itt	eq
 80004c0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d4:	e71c      	b.n	8000310 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_ul2d>:
 80004d8:	ea50 0201 	orrs.w	r2, r0, r1
 80004dc:	bf08      	it	eq
 80004de:	4770      	bxeq	lr
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	f04f 0500 	mov.w	r5, #0
 80004e6:	e00a      	b.n	80004fe <__aeabi_l2d+0x16>

080004e8 <__aeabi_l2d>:
 80004e8:	ea50 0201 	orrs.w	r2, r0, r1
 80004ec:	bf08      	it	eq
 80004ee:	4770      	bxeq	lr
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f6:	d502      	bpl.n	80004fe <__aeabi_l2d+0x16>
 80004f8:	4240      	negs	r0, r0
 80004fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fe:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000502:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000506:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050a:	f43f aed8 	beq.w	80002be <__adddf3+0xe6>
 800050e:	f04f 0203 	mov.w	r2, #3
 8000512:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000516:	bf18      	it	ne
 8000518:	3203      	addne	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000526:	f1c2 0320 	rsb	r3, r2, #32
 800052a:	fa00 fc03 	lsl.w	ip, r0, r3
 800052e:	fa20 f002 	lsr.w	r0, r0, r2
 8000532:	fa01 fe03 	lsl.w	lr, r1, r3
 8000536:	ea40 000e 	orr.w	r0, r0, lr
 800053a:	fa21 f102 	lsr.w	r1, r1, r2
 800053e:	4414      	add	r4, r2
 8000540:	e6bd      	b.n	80002be <__adddf3+0xe6>
 8000542:	bf00      	nop

08000544 <__aeabi_dmul>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000552:	bf1d      	ittte	ne
 8000554:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000558:	ea94 0f0c 	teqne	r4, ip
 800055c:	ea95 0f0c 	teqne	r5, ip
 8000560:	f000 f8de 	bleq	8000720 <__aeabi_dmul+0x1dc>
 8000564:	442c      	add	r4, r5
 8000566:	ea81 0603 	eor.w	r6, r1, r3
 800056a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000572:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000576:	bf18      	it	ne
 8000578:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800057c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000580:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000584:	d038      	beq.n	80005f8 <__aeabi_dmul+0xb4>
 8000586:	fba0 ce02 	umull	ip, lr, r0, r2
 800058a:	f04f 0500 	mov.w	r5, #0
 800058e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000592:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000596:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059a:	f04f 0600 	mov.w	r6, #0
 800059e:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a2:	f09c 0f00 	teq	ip, #0
 80005a6:	bf18      	it	ne
 80005a8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005ac:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b8:	d204      	bcs.n	80005c4 <__aeabi_dmul+0x80>
 80005ba:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005be:	416d      	adcs	r5, r5
 80005c0:	eb46 0606 	adc.w	r6, r6, r6
 80005c4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005cc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005dc:	bf88      	it	hi
 80005de:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e2:	d81e      	bhi.n	8000622 <__aeabi_dmul+0xde>
 80005e4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e8:	bf08      	it	eq
 80005ea:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ee:	f150 0000 	adcs.w	r0, r0, #0
 80005f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005fc:	ea46 0101 	orr.w	r1, r6, r1
 8000600:	ea40 0002 	orr.w	r0, r0, r2
 8000604:	ea81 0103 	eor.w	r1, r1, r3
 8000608:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800060c:	bfc2      	ittt	gt
 800060e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000612:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000616:	bd70      	popgt	{r4, r5, r6, pc}
 8000618:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800061c:	f04f 0e00 	mov.w	lr, #0
 8000620:	3c01      	subs	r4, #1
 8000622:	f300 80ab 	bgt.w	800077c <__aeabi_dmul+0x238>
 8000626:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062a:	bfde      	ittt	le
 800062c:	2000      	movle	r0, #0
 800062e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000632:	bd70      	pople	{r4, r5, r6, pc}
 8000634:	f1c4 0400 	rsb	r4, r4, #0
 8000638:	3c20      	subs	r4, #32
 800063a:	da35      	bge.n	80006a8 <__aeabi_dmul+0x164>
 800063c:	340c      	adds	r4, #12
 800063e:	dc1b      	bgt.n	8000678 <__aeabi_dmul+0x134>
 8000640:	f104 0414 	add.w	r4, r4, #20
 8000644:	f1c4 0520 	rsb	r5, r4, #32
 8000648:	fa00 f305 	lsl.w	r3, r0, r5
 800064c:	fa20 f004 	lsr.w	r0, r0, r4
 8000650:	fa01 f205 	lsl.w	r2, r1, r5
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800065c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000660:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000664:	fa21 f604 	lsr.w	r6, r1, r4
 8000668:	eb42 0106 	adc.w	r1, r2, r6
 800066c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000670:	bf08      	it	eq
 8000672:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f1c4 040c 	rsb	r4, r4, #12
 800067c:	f1c4 0520 	rsb	r5, r4, #32
 8000680:	fa00 f304 	lsl.w	r3, r0, r4
 8000684:	fa20 f005 	lsr.w	r0, r0, r5
 8000688:	fa01 f204 	lsl.w	r2, r1, r4
 800068c:	ea40 0002 	orr.w	r0, r0, r2
 8000690:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	f141 0100 	adc.w	r1, r1, #0
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f205 	lsl.w	r2, r0, r5
 80006b0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b4:	fa20 f304 	lsr.w	r3, r0, r4
 80006b8:	fa01 f205 	lsl.w	r2, r1, r5
 80006bc:	ea43 0302 	orr.w	r3, r3, r2
 80006c0:	fa21 f004 	lsr.w	r0, r1, r4
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	fa21 f204 	lsr.w	r2, r1, r4
 80006cc:	ea20 0002 	bic.w	r0, r0, r2
 80006d0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f094 0f00 	teq	r4, #0
 80006e4:	d10f      	bne.n	8000706 <__aeabi_dmul+0x1c2>
 80006e6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ea:	0040      	lsls	r0, r0, #1
 80006ec:	eb41 0101 	adc.w	r1, r1, r1
 80006f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f4:	bf08      	it	eq
 80006f6:	3c01      	subeq	r4, #1
 80006f8:	d0f7      	beq.n	80006ea <__aeabi_dmul+0x1a6>
 80006fa:	ea41 0106 	orr.w	r1, r1, r6
 80006fe:	f095 0f00 	teq	r5, #0
 8000702:	bf18      	it	ne
 8000704:	4770      	bxne	lr
 8000706:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070a:	0052      	lsls	r2, r2, #1
 800070c:	eb43 0303 	adc.w	r3, r3, r3
 8000710:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000714:	bf08      	it	eq
 8000716:	3d01      	subeq	r5, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1c6>
 800071a:	ea43 0306 	orr.w	r3, r3, r6
 800071e:	4770      	bx	lr
 8000720:	ea94 0f0c 	teq	r4, ip
 8000724:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000728:	bf18      	it	ne
 800072a:	ea95 0f0c 	teqne	r5, ip
 800072e:	d00c      	beq.n	800074a <__aeabi_dmul+0x206>
 8000730:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000734:	bf18      	it	ne
 8000736:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073a:	d1d1      	bne.n	80006e0 <__aeabi_dmul+0x19c>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074e:	bf06      	itte	eq
 8000750:	4610      	moveq	r0, r2
 8000752:	4619      	moveq	r1, r3
 8000754:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000758:	d019      	beq.n	800078e <__aeabi_dmul+0x24a>
 800075a:	ea94 0f0c 	teq	r4, ip
 800075e:	d102      	bne.n	8000766 <__aeabi_dmul+0x222>
 8000760:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000764:	d113      	bne.n	800078e <__aeabi_dmul+0x24a>
 8000766:	ea95 0f0c 	teq	r5, ip
 800076a:	d105      	bne.n	8000778 <__aeabi_dmul+0x234>
 800076c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000770:	bf1c      	itt	ne
 8000772:	4610      	movne	r0, r2
 8000774:	4619      	movne	r1, r3
 8000776:	d10a      	bne.n	800078e <__aeabi_dmul+0x24a>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000784:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000792:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000796:	bd70      	pop	{r4, r5, r6, pc}

08000798 <__aeabi_ddiv>:
 8000798:	b570      	push	{r4, r5, r6, lr}
 800079a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a6:	bf1d      	ittte	ne
 80007a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007ac:	ea94 0f0c 	teqne	r4, ip
 80007b0:	ea95 0f0c 	teqne	r5, ip
 80007b4:	f000 f8a7 	bleq	8000906 <__aeabi_ddiv+0x16e>
 80007b8:	eba4 0405 	sub.w	r4, r4, r5
 80007bc:	ea81 0e03 	eor.w	lr, r1, r3
 80007c0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c8:	f000 8088 	beq.w	80008dc <__aeabi_ddiv+0x144>
 80007cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007dc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007ec:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f0:	429d      	cmp	r5, r3
 80007f2:	bf08      	it	eq
 80007f4:	4296      	cmpeq	r6, r2
 80007f6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fa:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fe:	d202      	bcs.n	8000806 <__aeabi_ddiv+0x6e>
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	1ab6      	subs	r6, r6, r2
 8000808:	eb65 0503 	sbc.w	r5, r5, r3
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000816:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081a:	ebb6 0e02 	subs.w	lr, r6, r2
 800081e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000822:	bf22      	ittt	cs
 8000824:	1ab6      	subcs	r6, r6, r2
 8000826:	4675      	movcs	r5, lr
 8000828:	ea40 000c 	orrcs.w	r0, r0, ip
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	ebb6 0e02 	subs.w	lr, r6, r2
 8000836:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083a:	bf22      	ittt	cs
 800083c:	1ab6      	subcs	r6, r6, r2
 800083e:	4675      	movcs	r5, lr
 8000840:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000874:	ea55 0e06 	orrs.w	lr, r5, r6
 8000878:	d018      	beq.n	80008ac <__aeabi_ddiv+0x114>
 800087a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000882:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000886:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000892:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000896:	d1c0      	bne.n	800081a <__aeabi_ddiv+0x82>
 8000898:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800089c:	d10b      	bne.n	80008b6 <__aeabi_ddiv+0x11e>
 800089e:	ea41 0100 	orr.w	r1, r1, r0
 80008a2:	f04f 0000 	mov.w	r0, #0
 80008a6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008aa:	e7b6      	b.n	800081a <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	bf04      	itt	eq
 80008b2:	4301      	orreq	r1, r0
 80008b4:	2000      	moveq	r0, #0
 80008b6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ba:	bf88      	it	hi
 80008bc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c0:	f63f aeaf 	bhi.w	8000622 <__aeabi_dmul+0xde>
 80008c4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c8:	bf04      	itt	eq
 80008ca:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d2:	f150 0000 	adcs.w	r0, r0, #0
 80008d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008da:	bd70      	pop	{r4, r5, r6, pc}
 80008dc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e8:	bfc2      	ittt	gt
 80008ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f2:	bd70      	popgt	{r4, r5, r6, pc}
 80008f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f8:	f04f 0e00 	mov.w	lr, #0
 80008fc:	3c01      	subs	r4, #1
 80008fe:	e690      	b.n	8000622 <__aeabi_dmul+0xde>
 8000900:	ea45 0e06 	orr.w	lr, r5, r6
 8000904:	e68d      	b.n	8000622 <__aeabi_dmul+0xde>
 8000906:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090a:	ea94 0f0c 	teq	r4, ip
 800090e:	bf08      	it	eq
 8000910:	ea95 0f0c 	teqeq	r5, ip
 8000914:	f43f af3b 	beq.w	800078e <__aeabi_dmul+0x24a>
 8000918:	ea94 0f0c 	teq	r4, ip
 800091c:	d10a      	bne.n	8000934 <__aeabi_ddiv+0x19c>
 800091e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000922:	f47f af34 	bne.w	800078e <__aeabi_dmul+0x24a>
 8000926:	ea95 0f0c 	teq	r5, ip
 800092a:	f47f af25 	bne.w	8000778 <__aeabi_dmul+0x234>
 800092e:	4610      	mov	r0, r2
 8000930:	4619      	mov	r1, r3
 8000932:	e72c      	b.n	800078e <__aeabi_dmul+0x24a>
 8000934:	ea95 0f0c 	teq	r5, ip
 8000938:	d106      	bne.n	8000948 <__aeabi_ddiv+0x1b0>
 800093a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093e:	f43f aefd 	beq.w	800073c <__aeabi_dmul+0x1f8>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e722      	b.n	800078e <__aeabi_dmul+0x24a>
 8000948:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800094c:	bf18      	it	ne
 800094e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000952:	f47f aec5 	bne.w	80006e0 <__aeabi_dmul+0x19c>
 8000956:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095a:	f47f af0d 	bne.w	8000778 <__aeabi_dmul+0x234>
 800095e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000962:	f47f aeeb 	bne.w	800073c <__aeabi_dmul+0x1f8>
 8000966:	e712      	b.n	800078e <__aeabi_dmul+0x24a>

08000968 <__aeabi_d2iz>:
 8000968:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800096c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000970:	d215      	bcs.n	800099e <__aeabi_d2iz+0x36>
 8000972:	d511      	bpl.n	8000998 <__aeabi_d2iz+0x30>
 8000974:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000978:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800097c:	d912      	bls.n	80009a4 <__aeabi_d2iz+0x3c>
 800097e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000982:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000986:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800098e:	fa23 f002 	lsr.w	r0, r3, r2
 8000992:	bf18      	it	ne
 8000994:	4240      	negne	r0, r0
 8000996:	4770      	bx	lr
 8000998:	f04f 0000 	mov.w	r0, #0
 800099c:	4770      	bx	lr
 800099e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a2:	d105      	bne.n	80009b0 <__aeabi_d2iz+0x48>
 80009a4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009a8:	bf08      	it	eq
 80009aa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009ae:	4770      	bx	lr
 80009b0:	f04f 0000 	mov.w	r0, #0
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_uldivmod>:
 80009b8:	b953      	cbnz	r3, 80009d0 <__aeabi_uldivmod+0x18>
 80009ba:	b94a      	cbnz	r2, 80009d0 <__aeabi_uldivmod+0x18>
 80009bc:	2900      	cmp	r1, #0
 80009be:	bf08      	it	eq
 80009c0:	2800      	cmpeq	r0, #0
 80009c2:	bf1c      	itt	ne
 80009c4:	f04f 31ff 	movne.w	r1, #4294967295
 80009c8:	f04f 30ff 	movne.w	r0, #4294967295
 80009cc:	f000 b970 	b.w	8000cb0 <__aeabi_idiv0>
 80009d0:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d8:	f000 f806 	bl	80009e8 <__udivmoddi4>
 80009dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e4:	b004      	add	sp, #16
 80009e6:	4770      	bx	lr

080009e8 <__udivmoddi4>:
 80009e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009ec:	9e08      	ldr	r6, [sp, #32]
 80009ee:	460d      	mov	r5, r1
 80009f0:	4604      	mov	r4, r0
 80009f2:	460f      	mov	r7, r1
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d14a      	bne.n	8000a8e <__udivmoddi4+0xa6>
 80009f8:	428a      	cmp	r2, r1
 80009fa:	4694      	mov	ip, r2
 80009fc:	d965      	bls.n	8000aca <__udivmoddi4+0xe2>
 80009fe:	fab2 f382 	clz	r3, r2
 8000a02:	b143      	cbz	r3, 8000a16 <__udivmoddi4+0x2e>
 8000a04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a08:	f1c3 0220 	rsb	r2, r3, #32
 8000a0c:	409f      	lsls	r7, r3
 8000a0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000a12:	4317      	orrs	r7, r2
 8000a14:	409c      	lsls	r4, r3
 8000a16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a1a:	fa1f f58c 	uxth.w	r5, ip
 8000a1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a22:	0c22      	lsrs	r2, r4, #16
 8000a24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a2c:	fb01 f005 	mul.w	r0, r1, r5
 8000a30:	4290      	cmp	r0, r2
 8000a32:	d90a      	bls.n	8000a4a <__udivmoddi4+0x62>
 8000a34:	eb1c 0202 	adds.w	r2, ip, r2
 8000a38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a3c:	f080 811c 	bcs.w	8000c78 <__udivmoddi4+0x290>
 8000a40:	4290      	cmp	r0, r2
 8000a42:	f240 8119 	bls.w	8000c78 <__udivmoddi4+0x290>
 8000a46:	3902      	subs	r1, #2
 8000a48:	4462      	add	r2, ip
 8000a4a:	1a12      	subs	r2, r2, r0
 8000a4c:	b2a4      	uxth	r4, r4
 8000a4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a5a:	fb00 f505 	mul.w	r5, r0, r5
 8000a5e:	42a5      	cmp	r5, r4
 8000a60:	d90a      	bls.n	8000a78 <__udivmoddi4+0x90>
 8000a62:	eb1c 0404 	adds.w	r4, ip, r4
 8000a66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a6a:	f080 8107 	bcs.w	8000c7c <__udivmoddi4+0x294>
 8000a6e:	42a5      	cmp	r5, r4
 8000a70:	f240 8104 	bls.w	8000c7c <__udivmoddi4+0x294>
 8000a74:	4464      	add	r4, ip
 8000a76:	3802      	subs	r0, #2
 8000a78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a7c:	1b64      	subs	r4, r4, r5
 8000a7e:	2100      	movs	r1, #0
 8000a80:	b11e      	cbz	r6, 8000a8a <__udivmoddi4+0xa2>
 8000a82:	40dc      	lsrs	r4, r3
 8000a84:	2300      	movs	r3, #0
 8000a86:	e9c6 4300 	strd	r4, r3, [r6]
 8000a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8e:	428b      	cmp	r3, r1
 8000a90:	d908      	bls.n	8000aa4 <__udivmoddi4+0xbc>
 8000a92:	2e00      	cmp	r6, #0
 8000a94:	f000 80ed 	beq.w	8000c72 <__udivmoddi4+0x28a>
 8000a98:	2100      	movs	r1, #0
 8000a9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000a9e:	4608      	mov	r0, r1
 8000aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa4:	fab3 f183 	clz	r1, r3
 8000aa8:	2900      	cmp	r1, #0
 8000aaa:	d149      	bne.n	8000b40 <__udivmoddi4+0x158>
 8000aac:	42ab      	cmp	r3, r5
 8000aae:	d302      	bcc.n	8000ab6 <__udivmoddi4+0xce>
 8000ab0:	4282      	cmp	r2, r0
 8000ab2:	f200 80f8 	bhi.w	8000ca6 <__udivmoddi4+0x2be>
 8000ab6:	1a84      	subs	r4, r0, r2
 8000ab8:	eb65 0203 	sbc.w	r2, r5, r3
 8000abc:	2001      	movs	r0, #1
 8000abe:	4617      	mov	r7, r2
 8000ac0:	2e00      	cmp	r6, #0
 8000ac2:	d0e2      	beq.n	8000a8a <__udivmoddi4+0xa2>
 8000ac4:	e9c6 4700 	strd	r4, r7, [r6]
 8000ac8:	e7df      	b.n	8000a8a <__udivmoddi4+0xa2>
 8000aca:	b902      	cbnz	r2, 8000ace <__udivmoddi4+0xe6>
 8000acc:	deff      	udf	#255	; 0xff
 8000ace:	fab2 f382 	clz	r3, r2
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	f040 8090 	bne.w	8000bf8 <__udivmoddi4+0x210>
 8000ad8:	1a8a      	subs	r2, r1, r2
 8000ada:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ade:	fa1f fe8c 	uxth.w	lr, ip
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ae8:	fb07 2015 	mls	r0, r7, r5, r2
 8000aec:	0c22      	lsrs	r2, r4, #16
 8000aee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000af2:	fb0e f005 	mul.w	r0, lr, r5
 8000af6:	4290      	cmp	r0, r2
 8000af8:	d908      	bls.n	8000b0c <__udivmoddi4+0x124>
 8000afa:	eb1c 0202 	adds.w	r2, ip, r2
 8000afe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b02:	d202      	bcs.n	8000b0a <__udivmoddi4+0x122>
 8000b04:	4290      	cmp	r0, r2
 8000b06:	f200 80cb 	bhi.w	8000ca0 <__udivmoddi4+0x2b8>
 8000b0a:	4645      	mov	r5, r8
 8000b0c:	1a12      	subs	r2, r2, r0
 8000b0e:	b2a4      	uxth	r4, r4
 8000b10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b14:	fb07 2210 	mls	r2, r7, r0, r2
 8000b18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000b20:	45a6      	cmp	lr, r4
 8000b22:	d908      	bls.n	8000b36 <__udivmoddi4+0x14e>
 8000b24:	eb1c 0404 	adds.w	r4, ip, r4
 8000b28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b2c:	d202      	bcs.n	8000b34 <__udivmoddi4+0x14c>
 8000b2e:	45a6      	cmp	lr, r4
 8000b30:	f200 80bb 	bhi.w	8000caa <__udivmoddi4+0x2c2>
 8000b34:	4610      	mov	r0, r2
 8000b36:	eba4 040e 	sub.w	r4, r4, lr
 8000b3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b3e:	e79f      	b.n	8000a80 <__udivmoddi4+0x98>
 8000b40:	f1c1 0720 	rsb	r7, r1, #32
 8000b44:	408b      	lsls	r3, r1
 8000b46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000b52:	fa20 f307 	lsr.w	r3, r0, r7
 8000b56:	40fd      	lsrs	r5, r7
 8000b58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b5c:	4323      	orrs	r3, r4
 8000b5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b62:	fa1f fe8c 	uxth.w	lr, ip
 8000b66:	fb09 5518 	mls	r5, r9, r8, r5
 8000b6a:	0c1c      	lsrs	r4, r3, #16
 8000b6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b70:	fb08 f50e 	mul.w	r5, r8, lr
 8000b74:	42a5      	cmp	r5, r4
 8000b76:	fa02 f201 	lsl.w	r2, r2, r1
 8000b7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000b7e:	d90b      	bls.n	8000b98 <__udivmoddi4+0x1b0>
 8000b80:	eb1c 0404 	adds.w	r4, ip, r4
 8000b84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b88:	f080 8088 	bcs.w	8000c9c <__udivmoddi4+0x2b4>
 8000b8c:	42a5      	cmp	r5, r4
 8000b8e:	f240 8085 	bls.w	8000c9c <__udivmoddi4+0x2b4>
 8000b92:	f1a8 0802 	sub.w	r8, r8, #2
 8000b96:	4464      	add	r4, ip
 8000b98:	1b64      	subs	r4, r4, r5
 8000b9a:	b29d      	uxth	r5, r3
 8000b9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ba0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ba4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ba8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000bac:	45a6      	cmp	lr, r4
 8000bae:	d908      	bls.n	8000bc2 <__udivmoddi4+0x1da>
 8000bb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bb4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000bb8:	d26c      	bcs.n	8000c94 <__udivmoddi4+0x2ac>
 8000bba:	45a6      	cmp	lr, r4
 8000bbc:	d96a      	bls.n	8000c94 <__udivmoddi4+0x2ac>
 8000bbe:	3b02      	subs	r3, #2
 8000bc0:	4464      	add	r4, ip
 8000bc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000bca:	eba4 040e 	sub.w	r4, r4, lr
 8000bce:	42ac      	cmp	r4, r5
 8000bd0:	46c8      	mov	r8, r9
 8000bd2:	46ae      	mov	lr, r5
 8000bd4:	d356      	bcc.n	8000c84 <__udivmoddi4+0x29c>
 8000bd6:	d053      	beq.n	8000c80 <__udivmoddi4+0x298>
 8000bd8:	b156      	cbz	r6, 8000bf0 <__udivmoddi4+0x208>
 8000bda:	ebb0 0208 	subs.w	r2, r0, r8
 8000bde:	eb64 040e 	sbc.w	r4, r4, lr
 8000be2:	fa04 f707 	lsl.w	r7, r4, r7
 8000be6:	40ca      	lsrs	r2, r1
 8000be8:	40cc      	lsrs	r4, r1
 8000bea:	4317      	orrs	r7, r2
 8000bec:	e9c6 7400 	strd	r7, r4, [r6]
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf8:	f1c3 0120 	rsb	r1, r3, #32
 8000bfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c00:	fa20 f201 	lsr.w	r2, r0, r1
 8000c04:	fa25 f101 	lsr.w	r1, r5, r1
 8000c08:	409d      	lsls	r5, r3
 8000c0a:	432a      	orrs	r2, r5
 8000c0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c10:	fa1f fe8c 	uxth.w	lr, ip
 8000c14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c18:	fb07 1510 	mls	r5, r7, r0, r1
 8000c1c:	0c11      	lsrs	r1, r2, #16
 8000c1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c22:	fb00 f50e 	mul.w	r5, r0, lr
 8000c26:	428d      	cmp	r5, r1
 8000c28:	fa04 f403 	lsl.w	r4, r4, r3
 8000c2c:	d908      	bls.n	8000c40 <__udivmoddi4+0x258>
 8000c2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000c32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c36:	d22f      	bcs.n	8000c98 <__udivmoddi4+0x2b0>
 8000c38:	428d      	cmp	r5, r1
 8000c3a:	d92d      	bls.n	8000c98 <__udivmoddi4+0x2b0>
 8000c3c:	3802      	subs	r0, #2
 8000c3e:	4461      	add	r1, ip
 8000c40:	1b49      	subs	r1, r1, r5
 8000c42:	b292      	uxth	r2, r2
 8000c44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c48:	fb07 1115 	mls	r1, r7, r5, r1
 8000c4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c50:	fb05 f10e 	mul.w	r1, r5, lr
 8000c54:	4291      	cmp	r1, r2
 8000c56:	d908      	bls.n	8000c6a <__udivmoddi4+0x282>
 8000c58:	eb1c 0202 	adds.w	r2, ip, r2
 8000c5c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c60:	d216      	bcs.n	8000c90 <__udivmoddi4+0x2a8>
 8000c62:	4291      	cmp	r1, r2
 8000c64:	d914      	bls.n	8000c90 <__udivmoddi4+0x2a8>
 8000c66:	3d02      	subs	r5, #2
 8000c68:	4462      	add	r2, ip
 8000c6a:	1a52      	subs	r2, r2, r1
 8000c6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000c70:	e738      	b.n	8000ae4 <__udivmoddi4+0xfc>
 8000c72:	4631      	mov	r1, r6
 8000c74:	4630      	mov	r0, r6
 8000c76:	e708      	b.n	8000a8a <__udivmoddi4+0xa2>
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e6e6      	b.n	8000a4a <__udivmoddi4+0x62>
 8000c7c:	4610      	mov	r0, r2
 8000c7e:	e6fb      	b.n	8000a78 <__udivmoddi4+0x90>
 8000c80:	4548      	cmp	r0, r9
 8000c82:	d2a9      	bcs.n	8000bd8 <__udivmoddi4+0x1f0>
 8000c84:	ebb9 0802 	subs.w	r8, r9, r2
 8000c88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000c8c:	3b01      	subs	r3, #1
 8000c8e:	e7a3      	b.n	8000bd8 <__udivmoddi4+0x1f0>
 8000c90:	4645      	mov	r5, r8
 8000c92:	e7ea      	b.n	8000c6a <__udivmoddi4+0x282>
 8000c94:	462b      	mov	r3, r5
 8000c96:	e794      	b.n	8000bc2 <__udivmoddi4+0x1da>
 8000c98:	4640      	mov	r0, r8
 8000c9a:	e7d1      	b.n	8000c40 <__udivmoddi4+0x258>
 8000c9c:	46d0      	mov	r8, sl
 8000c9e:	e77b      	b.n	8000b98 <__udivmoddi4+0x1b0>
 8000ca0:	3d02      	subs	r5, #2
 8000ca2:	4462      	add	r2, ip
 8000ca4:	e732      	b.n	8000b0c <__udivmoddi4+0x124>
 8000ca6:	4608      	mov	r0, r1
 8000ca8:	e70a      	b.n	8000ac0 <__udivmoddi4+0xd8>
 8000caa:	4464      	add	r4, ip
 8000cac:	3802      	subs	r0, #2
 8000cae:	e742      	b.n	8000b36 <__udivmoddi4+0x14e>

08000cb0 <__aeabi_idiv0>:
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop

08000cb4 <uint16_to_bytes>:
  }
#endif

// Probably going to move these to a different file, but for now
void uint16_to_bytes(uint16_t in, uint8_t *out)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	6039      	str	r1, [r7, #0]
 8000cbe:	80fb      	strh	r3, [r7, #6]
	out[0] = (in >> 8) & 0xFF;
 8000cc0:	88fb      	ldrh	r3, [r7, #6]
 8000cc2:	0a1b      	lsrs	r3, r3, #8
 8000cc4:	b29b      	uxth	r3, r3
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	701a      	strb	r2, [r3, #0]
	out[1] = in & 0xFF;
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	88fa      	ldrh	r2, [r7, #6]
 8000cd2:	b2d2      	uxtb	r2, r2
 8000cd4:	701a      	strb	r2, [r3, #0]
}
 8000cd6:	bf00      	nop
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
	...

08000ce4 <LCD_reset>:
	HX8357_DISPON, 0x80 +  50/5, // Main screen turn on, delay 50 ms
	0,                           // END OF COMMAND LIST
  };

void LCD_reset()
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8000ce8:	2201      	movs	r2, #1
 8000cea:	2110      	movs	r1, #16
 8000cec:	480b      	ldr	r0, [pc, #44]	; (8000d1c <LCD_reset+0x38>)
 8000cee:	f002 f96f 	bl	8002fd0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000cf2:	2064      	movs	r0, #100	; 0x64
 8000cf4:	f001 fefc 	bl	8002af0 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2110      	movs	r1, #16
 8000cfc:	4807      	ldr	r0, [pc, #28]	; (8000d1c <LCD_reset+0x38>)
 8000cfe:	f002 f967 	bl	8002fd0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000d02:	2064      	movs	r0, #100	; 0x64
 8000d04:	f001 fef4 	bl	8002af0 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8000d08:	2201      	movs	r2, #1
 8000d0a:	2110      	movs	r1, #16
 8000d0c:	4803      	ldr	r0, [pc, #12]	; (8000d1c <LCD_reset+0x38>)
 8000d0e:	f002 f95f 	bl	8002fd0 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000d12:	20c8      	movs	r0, #200	; 0xc8
 8000d14:	f001 feec 	bl	8002af0 <HAL_Delay>
}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	48000400 	.word	0x48000400

08000d20 <LCD_writeCommand>:

HAL_StatusTypeDef LCD_writeCommand(SPI_HandleTypeDef* spi, uint8_t cmd)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af02      	add	r7, sp, #8
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	460b      	mov	r3, r1
 8000d2a:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef result;
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2120      	movs	r1, #32
 8000d30:	480b      	ldr	r0, [pc, #44]	; (8000d60 <LCD_writeCommand+0x40>)
 8000d32:	f002 f94d 	bl	8002fd0 <HAL_GPIO_WritePin>
	uint8_t buf[1];
	result = HAL_SPI_TransmitReceive(spi, &cmd, &buf[0], 1, 100);
 8000d36:	f107 020c 	add.w	r2, r7, #12
 8000d3a:	1cf9      	adds	r1, r7, #3
 8000d3c:	2364      	movs	r3, #100	; 0x64
 8000d3e:	9300      	str	r3, [sp, #0]
 8000d40:	2301      	movs	r3, #1
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f003 fe82 	bl	8004a4c <HAL_SPI_TransmitReceive>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	2120      	movs	r1, #32
 8000d50:	4803      	ldr	r0, [pc, #12]	; (8000d60 <LCD_writeCommand+0x40>)
 8000d52:	f002 f93d 	bl	8002fd0 <HAL_GPIO_WritePin>
	return result;
 8000d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3710      	adds	r7, #16
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	48000400 	.word	0x48000400

08000d64 <LCD_startWrite>:

void LCD_startWrite()
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2140      	movs	r1, #64	; 0x40
 8000d6c:	4802      	ldr	r0, [pc, #8]	; (8000d78 <LCD_startWrite+0x14>)
 8000d6e:	f002 f92f 	bl	8002fd0 <HAL_GPIO_WritePin>
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	48000400 	.word	0x48000400

08000d7c <LCD_endWrite>:

void LCD_endWrite()
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000d80:	2201      	movs	r2, #1
 8000d82:	2140      	movs	r1, #64	; 0x40
 8000d84:	4802      	ldr	r0, [pc, #8]	; (8000d90 <LCD_endWrite+0x14>)
 8000d86:	f002 f923 	bl	8002fd0 <HAL_GPIO_WritePin>
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	48000400 	.word	0x48000400

08000d94 <LCD_begin>:

int LCD_begin(SPI_HandleTypeDef* spi)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
	LCD_reset();
 8000d9c:	f7ff ffa2 	bl	8000ce4 <LCD_reset>
	LCD_startWrite();
 8000da0:	f7ff ffe0 	bl	8000d64 <LCD_startWrite>
	uint8_t *addr = init;
 8000da4:	4b26      	ldr	r3, [pc, #152]	; (8000e40 <LCD_begin+0xac>)
 8000da6:	60fb      	str	r3, [r7, #12]
	uint8_t cmd, x, numArgs;
	HAL_StatusTypeDef result;
	while((cmd = *(addr++)) > 0) // '0' command ends list
 8000da8:	e03b      	b.n	8000e22 <LCD_begin+0x8e>
	{
		if (cmd != 0xFF) // '255' is ignored
 8000daa:	7abb      	ldrb	r3, [r7, #10]
 8000dac:	2bff      	cmp	r3, #255	; 0xff
 8000dae:	d00d      	beq.n	8000dcc <LCD_begin+0x38>
		{
			result = LCD_writeCommand(spi, cmd);
 8000db0:	7abb      	ldrb	r3, [r7, #10]
 8000db2:	4619      	mov	r1, r3
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	f7ff ffb3 	bl	8000d20 <LCD_writeCommand>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	727b      	strb	r3, [r7, #9]
			if (result != HAL_OK)
 8000dbe:	7a7b      	ldrb	r3, [r7, #9]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d003      	beq.n	8000dcc <LCD_begin+0x38>
			{
				LCD_endWrite();
 8000dc4:	f7ff ffda 	bl	8000d7c <LCD_endWrite>
				return 0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	e035      	b.n	8000e38 <LCD_begin+0xa4>
			}
		}
		x = *(addr++);
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	1c5a      	adds	r2, r3, #1
 8000dd0:	60fa      	str	r2, [r7, #12]
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	723b      	strb	r3, [r7, #8]
		numArgs = x & 0x7F;
 8000dd6:	7a3b      	ldrb	r3, [r7, #8]
 8000dd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ddc:	72fb      	strb	r3, [r7, #11]
		if (x & 0x80) // If high bit set...
 8000dde:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	da18      	bge.n	8000e18 <LCD_begin+0x84>
		{
			HAL_Delay(numArgs * 5); // numArgs is actually a delay time (5ms units)
 8000de6:	7afa      	ldrb	r2, [r7, #11]
 8000de8:	4613      	mov	r3, r2
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	4413      	add	r3, r2
 8000dee:	4618      	mov	r0, r3
 8000df0:	f001 fe7e 	bl	8002af0 <HAL_Delay>
 8000df4:	e015      	b.n	8000e22 <LCD_begin+0x8e>
		}
		else // Otherwise, issue args to command...
		{
			while (numArgs--)
			{
				result = HAL_SPI_Transmit(spi, addr++, 1, 100);
 8000df6:	68f9      	ldr	r1, [r7, #12]
 8000df8:	1c4b      	adds	r3, r1, #1
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	2364      	movs	r3, #100	; 0x64
 8000dfe:	2201      	movs	r2, #1
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f003 fcae 	bl	8004762 <HAL_SPI_Transmit>
 8000e06:	4603      	mov	r3, r0
 8000e08:	727b      	strb	r3, [r7, #9]
				if (result != HAL_OK)
 8000e0a:	7a7b      	ldrb	r3, [r7, #9]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d003      	beq.n	8000e18 <LCD_begin+0x84>
				{
					LCD_endWrite();
 8000e10:	f7ff ffb4 	bl	8000d7c <LCD_endWrite>
					return 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	e00f      	b.n	8000e38 <LCD_begin+0xa4>
			while (numArgs--)
 8000e18:	7afb      	ldrb	r3, [r7, #11]
 8000e1a:	1e5a      	subs	r2, r3, #1
 8000e1c:	72fa      	strb	r2, [r7, #11]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d1e9      	bne.n	8000df6 <LCD_begin+0x62>
	while((cmd = *(addr++)) > 0) // '0' command ends list
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	1c5a      	adds	r2, r3, #1
 8000e26:	60fa      	str	r2, [r7, #12]
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	72bb      	strb	r3, [r7, #10]
 8000e2c:	7abb      	ldrb	r3, [r7, #10]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d1bb      	bne.n	8000daa <LCD_begin+0x16>
				}
			}
		}
	}
	LCD_endWrite();
 8000e32:	f7ff ffa3 	bl	8000d7c <LCD_endWrite>
	return 1;
 8000e36:	2301      	movs	r3, #1
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3710      	adds	r7, #16
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000000 	.word	0x20000000

08000e44 <LCD_setAddrWindow>:
	LCD_endWrite();
	return result == HAL_OK;
}

int LCD_setAddrWindow(SPI_HandleTypeDef* spi, uint16_t x1, uint16_t y1, uint16_t w, uint16_t h)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	4611      	mov	r1, r2
 8000e50:	461a      	mov	r2, r3
 8000e52:	4603      	mov	r3, r0
 8000e54:	817b      	strh	r3, [r7, #10]
 8000e56:	460b      	mov	r3, r1
 8000e58:	813b      	strh	r3, [r7, #8]
 8000e5a:	4613      	mov	r3, r2
 8000e5c:	80fb      	strh	r3, [r7, #6]
	uint16_t x2 = x1 + w - 1;
 8000e5e:	897a      	ldrh	r2, [r7, #10]
 8000e60:	88fb      	ldrh	r3, [r7, #6]
 8000e62:	4413      	add	r3, r2
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	3b01      	subs	r3, #1
 8000e68:	82fb      	strh	r3, [r7, #22]
	uint16_t y2 = y1 + h - 1;
 8000e6a:	893a      	ldrh	r2, [r7, #8]
 8000e6c:	8c3b      	ldrh	r3, [r7, #32]
 8000e6e:	4413      	add	r3, r2
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	3b01      	subs	r3, #1
 8000e74:	82bb      	strh	r3, [r7, #20]
	uint8_t buf[2];

	LCD_startWrite();
 8000e76:	f7ff ff75 	bl	8000d64 <LCD_startWrite>
	LCD_writeCommand(spi, HX8357_CASET); // Column address set
 8000e7a:	212a      	movs	r1, #42	; 0x2a
 8000e7c:	68f8      	ldr	r0, [r7, #12]
 8000e7e:	f7ff ff4f 	bl	8000d20 <LCD_writeCommand>

	uint16_to_bytes(x1, buf);
 8000e82:	f107 0210 	add.w	r2, r7, #16
 8000e86:	897b      	ldrh	r3, [r7, #10]
 8000e88:	4611      	mov	r1, r2
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff ff12 	bl	8000cb4 <uint16_to_bytes>
	HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 8000e90:	f107 0110 	add.w	r1, r7, #16
 8000e94:	2364      	movs	r3, #100	; 0x64
 8000e96:	2202      	movs	r2, #2
 8000e98:	68f8      	ldr	r0, [r7, #12]
 8000e9a:	f003 fc62 	bl	8004762 <HAL_SPI_Transmit>

	uint16_to_bytes(x2, buf);
 8000e9e:	f107 0210 	add.w	r2, r7, #16
 8000ea2:	8afb      	ldrh	r3, [r7, #22]
 8000ea4:	4611      	mov	r1, r2
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff ff04 	bl	8000cb4 <uint16_to_bytes>
	HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 8000eac:	f107 0110 	add.w	r1, r7, #16
 8000eb0:	2364      	movs	r3, #100	; 0x64
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	68f8      	ldr	r0, [r7, #12]
 8000eb6:	f003 fc54 	bl	8004762 <HAL_SPI_Transmit>

	LCD_writeCommand(spi, HX8357_PASET); // Row address set
 8000eba:	212b      	movs	r1, #43	; 0x2b
 8000ebc:	68f8      	ldr	r0, [r7, #12]
 8000ebe:	f7ff ff2f 	bl	8000d20 <LCD_writeCommand>

	uint16_to_bytes(y1, buf);
 8000ec2:	f107 0210 	add.w	r2, r7, #16
 8000ec6:	893b      	ldrh	r3, [r7, #8]
 8000ec8:	4611      	mov	r1, r2
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fef2 	bl	8000cb4 <uint16_to_bytes>
	HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 8000ed0:	f107 0110 	add.w	r1, r7, #16
 8000ed4:	2364      	movs	r3, #100	; 0x64
 8000ed6:	2202      	movs	r2, #2
 8000ed8:	68f8      	ldr	r0, [r7, #12]
 8000eda:	f003 fc42 	bl	8004762 <HAL_SPI_Transmit>

	uint16_to_bytes(y2, buf);
 8000ede:	f107 0210 	add.w	r2, r7, #16
 8000ee2:	8abb      	ldrh	r3, [r7, #20]
 8000ee4:	4611      	mov	r1, r2
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff fee4 	bl	8000cb4 <uint16_to_bytes>
	HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 8000eec:	f107 0110 	add.w	r1, r7, #16
 8000ef0:	2364      	movs	r3, #100	; 0x64
 8000ef2:	2202      	movs	r2, #2
 8000ef4:	68f8      	ldr	r0, [r7, #12]
 8000ef6:	f003 fc34 	bl	8004762 <HAL_SPI_Transmit>

	LCD_endWrite();
 8000efa:	f7ff ff3f 	bl	8000d7c <LCD_endWrite>
	return 1;
 8000efe:	2301      	movs	r3, #1
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3718      	adds	r7, #24
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <LCD_color565>:

uint16_t LCD_color565(uint8_t red, uint8_t green, uint8_t blue) {
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
 8000f12:	460b      	mov	r3, r1
 8000f14:	71bb      	strb	r3, [r7, #6]
 8000f16:	4613      	mov	r3, r2
 8000f18:	717b      	strb	r3, [r7, #5]
    return ((red & 0xF8) << 8) | ((green & 0xFC) << 3) | ((blue & 0xF8) >> 3);
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	021b      	lsls	r3, r3, #8
 8000f1e:	b21b      	sxth	r3, r3
 8000f20:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000f24:	f023 0307 	bic.w	r3, r3, #7
 8000f28:	b21a      	sxth	r2, r3
 8000f2a:	79bb      	ldrb	r3, [r7, #6]
 8000f2c:	00db      	lsls	r3, r3, #3
 8000f2e:	b21b      	sxth	r3, r3
 8000f30:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8000f34:	b21b      	sxth	r3, r3
 8000f36:	4313      	orrs	r3, r2
 8000f38:	b21a      	sxth	r2, r3
 8000f3a:	797b      	ldrb	r3, [r7, #5]
 8000f3c:	08db      	lsrs	r3, r3, #3
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	b21b      	sxth	r3, r3
 8000f42:	4313      	orrs	r3, r2
 8000f44:	b21b      	sxth	r3, r3
 8000f46:	b29b      	uxth	r3, r3
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <LCD_pushColor>:

int LCD_pushColor(SPI_HandleTypeDef* spi, uint16_t color) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	807b      	strh	r3, [r7, #2]
	LCD_startWrite();
 8000f60:	f7ff ff00 	bl	8000d64 <LCD_startWrite>
	LCD_writeCommand(spi, HX8357_RAMWR); // Write to RAM
 8000f64:	212c      	movs	r1, #44	; 0x2c
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f7ff feda 	bl	8000d20 <LCD_writeCommand>
	HAL_SPI_Transmit(spi, (uint8_t*)&color, 2, 100);
 8000f6c:	1cb9      	adds	r1, r7, #2
 8000f6e:	2364      	movs	r3, #100	; 0x64
 8000f70:	2202      	movs	r2, #2
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f003 fbf5 	bl	8004762 <HAL_SPI_Transmit>
	LCD_writeCommand(spi, HX8357_NOP); // Write command to stop RAMWR
 8000f78:	2100      	movs	r1, #0
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff fed0 	bl	8000d20 <LCD_writeCommand>
	LCD_endWrite();
 8000f80:	f7ff fefc 	bl	8000d7c <LCD_endWrite>
	return 1;
 8000f84:	2301      	movs	r3, #1
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <LCD_pushColorCopy>:

int LCD_pushColorCopy(SPI_HandleTypeDef* spi, uint16_t color, uint32_t count) {
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b086      	sub	sp, #24
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	60f8      	str	r0, [r7, #12]
 8000f96:	460b      	mov	r3, r1
 8000f98:	607a      	str	r2, [r7, #4]
 8000f9a:	817b      	strh	r3, [r7, #10]
	LCD_startWrite();
 8000f9c:	f7ff fee2 	bl	8000d64 <LCD_startWrite>

	LCD_writeCommand(spi, HX8357_RAMWR); // Write to RAM
 8000fa0:	212c      	movs	r1, #44	; 0x2c
 8000fa2:	68f8      	ldr	r0, [r7, #12]
 8000fa4:	f7ff febc 	bl	8000d20 <LCD_writeCommand>

	uint8_t buf[2];
	uint16_to_bytes(color, &buf[0]);
 8000fa8:	f107 0210 	add.w	r2, r7, #16
 8000fac:	897b      	ldrh	r3, [r7, #10]
 8000fae:	4611      	mov	r1, r2
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff fe7f 	bl	8000cb4 <uint16_to_bytes>
	for (int i = 0; i < count; ++i)
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
 8000fba:	e009      	b.n	8000fd0 <LCD_pushColorCopy+0x42>
	{
		HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 8000fbc:	f107 0110 	add.w	r1, r7, #16
 8000fc0:	2364      	movs	r3, #100	; 0x64
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	68f8      	ldr	r0, [r7, #12]
 8000fc6:	f003 fbcc 	bl	8004762 <HAL_SPI_Transmit>
	for (int i = 0; i < count; ++i)
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	617b      	str	r3, [r7, #20]
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d8f1      	bhi.n	8000fbc <LCD_pushColorCopy+0x2e>
	}

	LCD_writeCommand(spi, HX8357_NOP); // Write command to stop RAMWR
 8000fd8:	2100      	movs	r1, #0
 8000fda:	68f8      	ldr	r0, [r7, #12]
 8000fdc:	f7ff fea0 	bl	8000d20 <LCD_writeCommand>

	LCD_endWrite();
 8000fe0:	f7ff fecc 	bl	8000d7c <LCD_endWrite>
	return 1;
 8000fe4:	2301      	movs	r3, #1
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3718      	adds	r7, #24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <LCD_writePixel>:

	LCD_endWrite();
	return 1;
}

int LCD_writePixel(SPI_HandleTypeDef* spi, int16_t x, int16_t y, uint16_t color) {
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b086      	sub	sp, #24
 8000ff2:	af02      	add	r7, sp, #8
 8000ff4:	60f8      	str	r0, [r7, #12]
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4611      	mov	r1, r2
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	817b      	strh	r3, [r7, #10]
 8001000:	460b      	mov	r3, r1
 8001002:	813b      	strh	r3, [r7, #8]
 8001004:	4613      	mov	r3, r2
 8001006:	80fb      	strh	r3, [r7, #6]
    if ((x < 0) ||(x >= HX8357_TFTWIDTH) || (y < 0) || (y >= HX8357_TFTHEIGHT)) return 0;
 8001008:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800100c:	2b00      	cmp	r3, #0
 800100e:	db0d      	blt.n	800102c <LCD_writePixel+0x3e>
 8001010:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001014:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001018:	da08      	bge.n	800102c <LCD_writePixel+0x3e>
 800101a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800101e:	2b00      	cmp	r3, #0
 8001020:	db04      	blt.n	800102c <LCD_writePixel+0x3e>
 8001022:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001026:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800102a:	db01      	blt.n	8001030 <LCD_writePixel+0x42>
 800102c:	2300      	movs	r3, #0
 800102e:	e017      	b.n	8001060 <LCD_writePixel+0x72>
    if(!LCD_setAddrWindow(spi, x, y, 1, 1)) return 0;
 8001030:	8979      	ldrh	r1, [r7, #10]
 8001032:	893a      	ldrh	r2, [r7, #8]
 8001034:	2301      	movs	r3, #1
 8001036:	9300      	str	r3, [sp, #0]
 8001038:	2301      	movs	r3, #1
 800103a:	68f8      	ldr	r0, [r7, #12]
 800103c:	f7ff ff02 	bl	8000e44 <LCD_setAddrWindow>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d101      	bne.n	800104a <LCD_writePixel+0x5c>
 8001046:	2300      	movs	r3, #0
 8001048:	e00a      	b.n	8001060 <LCD_writePixel+0x72>
    if (!LCD_pushColor(spi, color)) return 0;
 800104a:	88fb      	ldrh	r3, [r7, #6]
 800104c:	4619      	mov	r1, r3
 800104e:	68f8      	ldr	r0, [r7, #12]
 8001050:	f7ff ff80 	bl	8000f54 <LCD_pushColor>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d101      	bne.n	800105e <LCD_writePixel+0x70>
 800105a:	2300      	movs	r3, #0
 800105c:	e000      	b.n	8001060 <LCD_writePixel+0x72>
    return 1;
 800105e:	2301      	movs	r3, #1
}
 8001060:	4618      	mov	r0, r3
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <LCD_writePixels>:

// Length of colors array must be w * h
int LCD_writePixels(SPI_HandleTypeDef* spi, uint16_t color,
					int16_t x, int16_t y, int16_t w, int16_t h)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af02      	add	r7, sp, #8
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	4608      	mov	r0, r1
 8001072:	4611      	mov	r1, r2
 8001074:	461a      	mov	r2, r3
 8001076:	4603      	mov	r3, r0
 8001078:	817b      	strh	r3, [r7, #10]
 800107a:	460b      	mov	r3, r1
 800107c:	813b      	strh	r3, [r7, #8]
 800107e:	4613      	mov	r3, r2
 8001080:	80fb      	strh	r3, [r7, #6]
	if ((x < 0) ||(x >= HX8357_TFTWIDTH) || (y < 0) || (y >= HX8357_TFTHEIGHT)) return 0;
 8001082:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001086:	2b00      	cmp	r3, #0
 8001088:	db0d      	blt.n	80010a6 <LCD_writePixels+0x3e>
 800108a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800108e:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001092:	da08      	bge.n	80010a6 <LCD_writePixels+0x3e>
 8001094:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001098:	2b00      	cmp	r3, #0
 800109a:	db04      	blt.n	80010a6 <LCD_writePixels+0x3e>
 800109c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010a0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80010a4:	db01      	blt.n	80010aa <LCD_writePixels+0x42>
 80010a6:	2300      	movs	r3, #0
 80010a8:	e01f      	b.n	80010ea <LCD_writePixels+0x82>
	if(!LCD_setAddrWindow(spi, x, y, w, h)) return 0;
 80010aa:	8939      	ldrh	r1, [r7, #8]
 80010ac:	88fa      	ldrh	r2, [r7, #6]
 80010ae:	8b38      	ldrh	r0, [r7, #24]
 80010b0:	8bbb      	ldrh	r3, [r7, #28]
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	4603      	mov	r3, r0
 80010b6:	68f8      	ldr	r0, [r7, #12]
 80010b8:	f7ff fec4 	bl	8000e44 <LCD_setAddrWindow>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d101      	bne.n	80010c6 <LCD_writePixels+0x5e>
 80010c2:	2300      	movs	r3, #0
 80010c4:	e011      	b.n	80010ea <LCD_writePixels+0x82>
	if (!LCD_pushColorCopy(spi, color, w*h)) return 0;
 80010c6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80010ca:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80010ce:	fb02 f303 	mul.w	r3, r2, r3
 80010d2:	461a      	mov	r2, r3
 80010d4:	897b      	ldrh	r3, [r7, #10]
 80010d6:	4619      	mov	r1, r3
 80010d8:	68f8      	ldr	r0, [r7, #12]
 80010da:	f7ff ff58 	bl	8000f8e <LCD_pushColorCopy>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d101      	bne.n	80010e8 <LCD_writePixels+0x80>
 80010e4:	2300      	movs	r3, #0
 80010e6:	e000      	b.n	80010ea <LCD_writePixels+0x82>
	return 1;
 80010e8:	2301      	movs	r3, #1
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <LCD_drawChar>:
		0x70, 0x1C, 0x07, 0x1C, 0x70,
		0x0E, 0x38, 0xE0, 0x38, 0x0E
};

void LCD_drawChar(SPI_HandleTypeDef* spi, int16_t x, int16_t y, unsigned char c, uint16_t color, uint32_t size)
{
 80010f4:	b590      	push	{r4, r7, lr}
 80010f6:	b089      	sub	sp, #36	; 0x24
 80010f8:	af02      	add	r7, sp, #8
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	4608      	mov	r0, r1
 80010fe:	4611      	mov	r1, r2
 8001100:	461a      	mov	r2, r3
 8001102:	4603      	mov	r3, r0
 8001104:	817b      	strh	r3, [r7, #10]
 8001106:	460b      	mov	r3, r1
 8001108:	813b      	strh	r3, [r7, #8]
 800110a:	4613      	mov	r3, r2
 800110c:	71fb      	strb	r3, [r7, #7]
	if((x >= HX8357_TFTWIDTH)   || // Clip right
 800110e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001112:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001116:	f280 80b5 	bge.w	8001284 <LCD_drawChar+0x190>
	   (y >= HX8357_TFTHEIGHT)  || // Clip bottom
	   ((x + 6 * size - 1) < 0) || // Clip left
 800111a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800111e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001122:	f280 80af 	bge.w	8001284 <LCD_drawChar+0x190>
	   ((y + 8 * size - 1) < 0))   // Clip top
		return;

	uint16_t bg = LCD_color565(255, 255, 255);
 8001126:	22ff      	movs	r2, #255	; 0xff
 8001128:	21ff      	movs	r1, #255	; 0xff
 800112a:	20ff      	movs	r0, #255	; 0xff
 800112c:	f7ff feec 	bl	8000f08 <LCD_color565>
 8001130:	4603      	mov	r3, r0
 8001132:	827b      	strh	r3, [r7, #18]
	LCD_startWrite();
 8001134:	f7ff fe16 	bl	8000d64 <LCD_startWrite>
	for(int8_t i = 0; i < 5; i++) // Char bitmap = 5 columns
 8001138:	2300      	movs	r3, #0
 800113a:	75fb      	strb	r3, [r7, #23]
 800113c:	e09a      	b.n	8001274 <LCD_drawChar+0x180>
	{
		uint8_t line = font[c * 5 + i];
 800113e:	79fa      	ldrb	r2, [r7, #7]
 8001140:	4613      	mov	r3, r2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	441a      	add	r2, r3
 8001146:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800114a:	4413      	add	r3, r2
 800114c:	4a4f      	ldr	r2, [pc, #316]	; (800128c <LCD_drawChar+0x198>)
 800114e:	5cd3      	ldrb	r3, [r2, r3]
 8001150:	75bb      	strb	r3, [r7, #22]
		for(int8_t j = 0; j < 8; j++, line >>= 1)
 8001152:	2300      	movs	r3, #0
 8001154:	757b      	strb	r3, [r7, #21]
 8001156:	e082      	b.n	800125e <LCD_drawChar+0x16a>
		{
			if (line & 1)
 8001158:	7dbb      	ldrb	r3, [r7, #22]
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	2b00      	cmp	r3, #0
 8001160:	d03a      	beq.n	80011d8 <LCD_drawChar+0xe4>
			{
				if (size == 1) LCD_writePixel(spi, x+i, y+j, color);
 8001162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001164:	2b01      	cmp	r3, #1
 8001166:	d112      	bne.n	800118e <LCD_drawChar+0x9a>
 8001168:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800116c:	b29a      	uxth	r2, r3
 800116e:	897b      	ldrh	r3, [r7, #10]
 8001170:	4413      	add	r3, r2
 8001172:	b29b      	uxth	r3, r3
 8001174:	b219      	sxth	r1, r3
 8001176:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800117a:	b29a      	uxth	r2, r3
 800117c:	893b      	ldrh	r3, [r7, #8]
 800117e:	4413      	add	r3, r2
 8001180:	b29b      	uxth	r3, r3
 8001182:	b21a      	sxth	r2, r3
 8001184:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001186:	68f8      	ldr	r0, [r7, #12]
 8001188:	f7ff ff31 	bl	8000fee <LCD_writePixel>
 800118c:	e05e      	b.n	800124c <LCD_drawChar+0x158>
				else LCD_writePixels(spi, color, x+i*size, y+j*size, size, size);
 800118e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001192:	b29a      	uxth	r2, r3
 8001194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001196:	b29b      	uxth	r3, r3
 8001198:	fb12 f303 	smulbb	r3, r2, r3
 800119c:	b29a      	uxth	r2, r3
 800119e:	897b      	ldrh	r3, [r7, #10]
 80011a0:	4413      	add	r3, r2
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	b218      	sxth	r0, r3
 80011a6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80011aa:	b29a      	uxth	r2, r3
 80011ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	fb12 f303 	smulbb	r3, r2, r3
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	893b      	ldrh	r3, [r7, #8]
 80011b8:	4413      	add	r3, r2
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	b21c      	sxth	r4, r3
 80011be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011c0:	b21b      	sxth	r3, r3
 80011c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011c4:	b212      	sxth	r2, r2
 80011c6:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80011c8:	9201      	str	r2, [sp, #4]
 80011ca:	9300      	str	r3, [sp, #0]
 80011cc:	4623      	mov	r3, r4
 80011ce:	4602      	mov	r2, r0
 80011d0:	68f8      	ldr	r0, [r7, #12]
 80011d2:	f7ff ff49 	bl	8001068 <LCD_writePixels>
 80011d6:	e039      	b.n	800124c <LCD_drawChar+0x158>
			}
			else
			{
				if (size == 1) LCD_writePixel(spi, x+i, y+j, bg);
 80011d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d112      	bne.n	8001204 <LCD_drawChar+0x110>
 80011de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	897b      	ldrh	r3, [r7, #10]
 80011e6:	4413      	add	r3, r2
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	b219      	sxth	r1, r3
 80011ec:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80011f0:	b29a      	uxth	r2, r3
 80011f2:	893b      	ldrh	r3, [r7, #8]
 80011f4:	4413      	add	r3, r2
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	b21a      	sxth	r2, r3
 80011fa:	8a7b      	ldrh	r3, [r7, #18]
 80011fc:	68f8      	ldr	r0, [r7, #12]
 80011fe:	f7ff fef6 	bl	8000fee <LCD_writePixel>
 8001202:	e023      	b.n	800124c <LCD_drawChar+0x158>
				else LCD_writePixels(spi, bg, x+i*size, y+j*size, size, size);
 8001204:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001208:	b29a      	uxth	r2, r3
 800120a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800120c:	b29b      	uxth	r3, r3
 800120e:	fb12 f303 	smulbb	r3, r2, r3
 8001212:	b29a      	uxth	r2, r3
 8001214:	897b      	ldrh	r3, [r7, #10]
 8001216:	4413      	add	r3, r2
 8001218:	b29b      	uxth	r3, r3
 800121a:	b218      	sxth	r0, r3
 800121c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001220:	b29a      	uxth	r2, r3
 8001222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001224:	b29b      	uxth	r3, r3
 8001226:	fb12 f303 	smulbb	r3, r2, r3
 800122a:	b29a      	uxth	r2, r3
 800122c:	893b      	ldrh	r3, [r7, #8]
 800122e:	4413      	add	r3, r2
 8001230:	b29b      	uxth	r3, r3
 8001232:	b21c      	sxth	r4, r3
 8001234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001236:	b21b      	sxth	r3, r3
 8001238:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800123a:	b212      	sxth	r2, r2
 800123c:	8a79      	ldrh	r1, [r7, #18]
 800123e:	9201      	str	r2, [sp, #4]
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	4623      	mov	r3, r4
 8001244:	4602      	mov	r2, r0
 8001246:	68f8      	ldr	r0, [r7, #12]
 8001248:	f7ff ff0e 	bl	8001068 <LCD_writePixels>
		for(int8_t j = 0; j < 8; j++, line >>= 1)
 800124c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001250:	b2db      	uxtb	r3, r3
 8001252:	3301      	adds	r3, #1
 8001254:	b2db      	uxtb	r3, r3
 8001256:	757b      	strb	r3, [r7, #21]
 8001258:	7dbb      	ldrb	r3, [r7, #22]
 800125a:	085b      	lsrs	r3, r3, #1
 800125c:	75bb      	strb	r3, [r7, #22]
 800125e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001262:	2b07      	cmp	r3, #7
 8001264:	f77f af78 	ble.w	8001158 <LCD_drawChar+0x64>
	for(int8_t i = 0; i < 5; i++) // Char bitmap = 5 columns
 8001268:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800126c:	b2db      	uxtb	r3, r3
 800126e:	3301      	adds	r3, #1
 8001270:	b2db      	uxtb	r3, r3
 8001272:	75fb      	strb	r3, [r7, #23]
 8001274:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001278:	2b04      	cmp	r3, #4
 800127a:	f77f af60 	ble.w	800113e <LCD_drawChar+0x4a>
			}
		}
	}
	LCD_endWrite();
 800127e:	f7ff fd7d 	bl	8000d7c <LCD_endWrite>
 8001282:	e000      	b.n	8001286 <LCD_drawChar+0x192>
		return;
 8001284:	bf00      	nop
}
 8001286:	371c      	adds	r7, #28
 8001288:	46bd      	mov	sp, r7
 800128a:	bd90      	pop	{r4, r7, pc}
 800128c:	0800644c 	.word	0x0800644c

08001290 <LCD_drawString>:
	}
	LCD_endWrite();
}

void LCD_drawString(SPI_HandleTypeDef* spi, int16_t x, int16_t y, unsigned char* c, uint32_t length, uint16_t color, uint32_t size)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b088      	sub	sp, #32
 8001294:	af02      	add	r7, sp, #8
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	460b      	mov	r3, r1
 800129c:	817b      	strh	r3, [r7, #10]
 800129e:	4613      	mov	r3, r2
 80012a0:	813b      	strh	r3, [r7, #8]
	for (int i = 0; i < length; ++i) LCD_drawChar(spi, x + i*6*size, y, c[i], color, size);
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
 80012a6:	e020      	b.n	80012ea <LCD_drawString+0x5a>
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	fb12 f303 	smulbb	r3, r2, r3
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	461a      	mov	r2, r3
 80012b8:	0052      	lsls	r2, r2, #1
 80012ba:	4413      	add	r3, r2
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	b29a      	uxth	r2, r3
 80012c0:	897b      	ldrh	r3, [r7, #10]
 80012c2:	4413      	add	r3, r2
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	b219      	sxth	r1, r3
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	4413      	add	r3, r2
 80012ce:	7818      	ldrb	r0, [r3, #0]
 80012d0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80012d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012d6:	9301      	str	r3, [sp, #4]
 80012d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	4603      	mov	r3, r0
 80012de:	68f8      	ldr	r0, [r7, #12]
 80012e0:	f7ff ff08 	bl	80010f4 <LCD_drawChar>
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	3301      	adds	r3, #1
 80012e8:	617b      	str	r3, [r7, #20]
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	6a3a      	ldr	r2, [r7, #32]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d8da      	bhi.n	80012a8 <LCD_drawString+0x18>
}
 80012f2:	bf00      	nop
 80012f4:	bf00      	nop
 80012f6:	3718      	adds	r7, #24
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <LCD_writeLine>:
		}
	}
	LCD_endWrite();
}

void LCD_writeLine(SPI_HandleTypeDef *spi, int x0, int y0, int x1, int y1, int color) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08a      	sub	sp, #40	; 0x28
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
 8001308:	603b      	str	r3, [r7, #0]
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 800130a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001314:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001318:	6839      	ldr	r1, [r7, #0]
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	1acb      	subs	r3, r1, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	bfb8      	it	lt
 8001322:	425b      	neglt	r3, r3
 8001324:	429a      	cmp	r2, r3
 8001326:	bfcc      	ite	gt
 8001328:	2301      	movgt	r3, #1
 800132a:	2300      	movle	r3, #0
 800132c:	b2db      	uxtb	r3, r3
 800132e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (steep) {
 8001330:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001334:	2b00      	cmp	r3, #0
 8001336:	d00d      	beq.n	8001354 <LCD_writeLine+0x58>
    _swap_int16_t(x0, y0);
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	843b      	strh	r3, [r7, #32]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001344:	607b      	str	r3, [r7, #4]
    _swap_int16_t(x1, y1);
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	83fb      	strh	r3, [r7, #30]
 800134a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800134c:	603b      	str	r3, [r7, #0]
 800134e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001352:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (x0 > x1) {
 8001354:	68ba      	ldr	r2, [r7, #8]
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	429a      	cmp	r2, r3
 800135a:	dd0d      	ble.n	8001378 <LCD_writeLine+0x7c>
    _swap_int16_t(x0, x1);
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	83bb      	strh	r3, [r7, #28]
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001368:	603b      	str	r3, [r7, #0]
    _swap_int16_t(y0, y1);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	837b      	strh	r3, [r7, #26]
 800136e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001370:	607b      	str	r3, [r7, #4]
 8001372:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001376:	633b      	str	r3, [r7, #48]	; 0x30
  }

  int16_t dx, dy;
  dx = x1 - x0;
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	b29a      	uxth	r2, r3
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	b29b      	uxth	r3, r3
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	b29b      	uxth	r3, r3
 8001384:	833b      	strh	r3, [r7, #24]
  dy = abs(y1 - y0);
 8001386:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b00      	cmp	r3, #0
 800138e:	bfb8      	it	lt
 8001390:	425b      	neglt	r3, r3
 8001392:	82fb      	strh	r3, [r7, #22]

  int16_t err = dx / 2;
 8001394:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001398:	0fda      	lsrs	r2, r3, #31
 800139a:	4413      	add	r3, r2
 800139c:	105b      	asrs	r3, r3, #1
 800139e:	84fb      	strh	r3, [r7, #38]	; 0x26
  int16_t ystep;

  if (y0 < y1) {
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013a4:	429a      	cmp	r2, r3
 80013a6:	da02      	bge.n	80013ae <LCD_writeLine+0xb2>
    ystep = 1;
 80013a8:	2301      	movs	r3, #1
 80013aa:	84bb      	strh	r3, [r7, #36]	; 0x24
 80013ac:	e030      	b.n	8001410 <LCD_writeLine+0x114>
  } else {
    ystep = -1;
 80013ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013b2:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  for (; x0 <= x1; x0++) {
 80013b4:	e02c      	b.n	8001410 <LCD_writeLine+0x114>
    if (steep) {
 80013b6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d009      	beq.n	80013d2 <LCD_writeLine+0xd6>
      LCD_writePixel(spi, y0, x0, color);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	b219      	sxth	r1, r3
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	b21a      	sxth	r2, r3
 80013c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	68f8      	ldr	r0, [r7, #12]
 80013cc:	f7ff fe0f 	bl	8000fee <LCD_writePixel>
 80013d0:	e008      	b.n	80013e4 <LCD_writeLine+0xe8>
    } else {
      LCD_writePixel(spi, x0, y0, color);
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	b219      	sxth	r1, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	b21a      	sxth	r2, r3
 80013da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013dc:	b29b      	uxth	r3, r3
 80013de:	68f8      	ldr	r0, [r7, #12]
 80013e0:	f7ff fe05 	bl	8000fee <LCD_writePixel>
    }
    err -= dy;
 80013e4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80013e6:	8afb      	ldrh	r3, [r7, #22]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	84fb      	strh	r3, [r7, #38]	; 0x26
    if (err < 0) {
 80013ee:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	da09      	bge.n	800140a <LCD_writeLine+0x10e>
      y0 += ystep;
 80013f6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	4413      	add	r3, r2
 80013fe:	607b      	str	r3, [r7, #4]
      err += dx;
 8001400:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001402:	8b3b      	ldrh	r3, [r7, #24]
 8001404:	4413      	add	r3, r2
 8001406:	b29b      	uxth	r3, r3
 8001408:	84fb      	strh	r3, [r7, #38]	; 0x26
  for (; x0 <= x1; x0++) {
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	3301      	adds	r3, #1
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	68ba      	ldr	r2, [r7, #8]
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	429a      	cmp	r2, r3
 8001416:	ddce      	ble.n	80013b6 <LCD_writeLine+0xba>
    }
  }
}
 8001418:	bf00      	nop
 800141a:	bf00      	nop
 800141c:	3728      	adds	r7, #40	; 0x28
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <LCD_writeFastHLine>:

void LCD_writeFastVLine(SPI_HandleTypeDef *spi, int16_t x, int16_t y, int16_t h, uint16_t color) {
	LCD_writeLine(spi, x, y, x, y + h - 1, color);
}

void LCD_writeFastHLine(SPI_HandleTypeDef *spi, int16_t x, int16_t y, int16_t w, uint16_t color) {
 8001422:	b590      	push	{r4, r7, lr}
 8001424:	b087      	sub	sp, #28
 8001426:	af02      	add	r7, sp, #8
 8001428:	60f8      	str	r0, [r7, #12]
 800142a:	4608      	mov	r0, r1
 800142c:	4611      	mov	r1, r2
 800142e:	461a      	mov	r2, r3
 8001430:	4603      	mov	r3, r0
 8001432:	817b      	strh	r3, [r7, #10]
 8001434:	460b      	mov	r3, r1
 8001436:	813b      	strh	r3, [r7, #8]
 8001438:	4613      	mov	r3, r2
 800143a:	80fb      	strh	r3, [r7, #6]
	LCD_writeLine(spi, x, y, x + w - 1, y, color);
 800143c:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001440:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 8001444:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001448:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800144c:	4413      	add	r3, r2
 800144e:	1e5c      	subs	r4, r3, #1
 8001450:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001454:	8c3a      	ldrh	r2, [r7, #32]
 8001456:	9201      	str	r2, [sp, #4]
 8001458:	9300      	str	r3, [sp, #0]
 800145a:	4623      	mov	r3, r4
 800145c:	4602      	mov	r2, r0
 800145e:	68f8      	ldr	r0, [r7, #12]
 8001460:	f7ff ff4c 	bl	80012fc <LCD_writeLine>
}
 8001464:	bf00      	nop
 8001466:	3714      	adds	r7, #20
 8001468:	46bd      	mov	sp, r7
 800146a:	bd90      	pop	{r4, r7, pc}

0800146c <LCD_fillTriangle>:
	for (int16_t i = y; i < y + h; i++) {
		LCD_writeFastHLine(spi, x, i, w, color);
	}
}

void LCD_fillTriangle(SPI_HandleTypeDef *spi, int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
 800146c:	b580      	push	{r7, lr}
 800146e:	b092      	sub	sp, #72	; 0x48
 8001470:	af02      	add	r7, sp, #8
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	4608      	mov	r0, r1
 8001476:	4611      	mov	r1, r2
 8001478:	461a      	mov	r2, r3
 800147a:	4603      	mov	r3, r0
 800147c:	817b      	strh	r3, [r7, #10]
 800147e:	460b      	mov	r3, r1
 8001480:	813b      	strh	r3, [r7, #8]
 8001482:	4613      	mov	r3, r2
 8001484:	80fb      	strh	r3, [r7, #6]
	int16_t a, b, y, last;

	  // Sort coordinates by Y order (y2 >= y1 >= y0)
	  if (y0 > y1) {
 8001486:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800148a:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 800148e:	429a      	cmp	r2, r3
 8001490:	dd0d      	ble.n	80014ae <LCD_fillTriangle+0x42>
	    _swap_int16_t(y0, y1);
 8001492:	893b      	ldrh	r3, [r7, #8]
 8001494:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001496:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800149a:	813b      	strh	r3, [r7, #8]
 800149c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800149e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	    _swap_int16_t(x0, x1);
 80014a2:	897b      	ldrh	r3, [r7, #10]
 80014a4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80014a6:	88fb      	ldrh	r3, [r7, #6]
 80014a8:	817b      	strh	r3, [r7, #10]
 80014aa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014ac:	80fb      	strh	r3, [r7, #6]
	  }
	  if (y1 > y2) {
 80014ae:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 80014b2:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80014b6:	429a      	cmp	r2, r3
 80014b8:	dd11      	ble.n	80014de <LCD_fillTriangle+0x72>
	    _swap_int16_t(y2, y1);
 80014ba:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80014be:	857b      	strh	r3, [r7, #42]	; 0x2a
 80014c0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80014c4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80014c8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80014ca:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	    _swap_int16_t(x2, x1);
 80014ce:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80014d2:	853b      	strh	r3, [r7, #40]	; 0x28
 80014d4:	88fb      	ldrh	r3, [r7, #6]
 80014d6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80014da:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80014dc:	80fb      	strh	r3, [r7, #6]
	  }
	  if (y0 > y1) {
 80014de:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80014e2:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 80014e6:	429a      	cmp	r2, r3
 80014e8:	dd0d      	ble.n	8001506 <LCD_fillTriangle+0x9a>
	    _swap_int16_t(y0, y1);
 80014ea:	893b      	ldrh	r3, [r7, #8]
 80014ec:	84fb      	strh	r3, [r7, #38]	; 0x26
 80014ee:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80014f2:	813b      	strh	r3, [r7, #8]
 80014f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014f6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	    _swap_int16_t(x0, x1);
 80014fa:	897b      	ldrh	r3, [r7, #10]
 80014fc:	84bb      	strh	r3, [r7, #36]	; 0x24
 80014fe:	88fb      	ldrh	r3, [r7, #6]
 8001500:	817b      	strh	r3, [r7, #10]
 8001502:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001504:	80fb      	strh	r3, [r7, #6]
	  }

	  if (y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 8001506:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800150a:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800150e:	429a      	cmp	r2, r3
 8001510:	d13a      	bne.n	8001588 <LCD_fillTriangle+0x11c>
	    a = b = x0;
 8001512:	897b      	ldrh	r3, [r7, #10]
 8001514:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001516:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001518:	87fb      	strh	r3, [r7, #62]	; 0x3e
	    if (x1 < a)
 800151a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800151e:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8001522:	429a      	cmp	r2, r3
 8001524:	da02      	bge.n	800152c <LCD_fillTriangle+0xc0>
	      a = x1;
 8001526:	88fb      	ldrh	r3, [r7, #6]
 8001528:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800152a:	e007      	b.n	800153c <LCD_fillTriangle+0xd0>
	    else if (x1 > b)
 800152c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001530:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8001534:	429a      	cmp	r2, r3
 8001536:	dd01      	ble.n	800153c <LCD_fillTriangle+0xd0>
	      b = x1;
 8001538:	88fb      	ldrh	r3, [r7, #6]
 800153a:	87bb      	strh	r3, [r7, #60]	; 0x3c
	    if (x2 < a)
 800153c:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	; 0x4c
 8001540:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8001544:	429a      	cmp	r2, r3
 8001546:	da03      	bge.n	8001550 <LCD_fillTriangle+0xe4>
	      a = x2;
 8001548:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800154c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800154e:	e008      	b.n	8001562 <LCD_fillTriangle+0xf6>
	    else if (x2 > b)
 8001550:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	; 0x4c
 8001554:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8001558:	429a      	cmp	r2, r3
 800155a:	dd02      	ble.n	8001562 <LCD_fillTriangle+0xf6>
	      b = x2;
 800155c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001560:	87bb      	strh	r3, [r7, #60]	; 0x3c
	    LCD_writeFastHLine(spi, a, y0, b - a + 1, color);
 8001562:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8001564:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	b29b      	uxth	r3, r3
 800156a:	3301      	adds	r3, #1
 800156c:	b29b      	uxth	r3, r3
 800156e:	b218      	sxth	r0, r3
 8001570:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001574:	f9b7 103e 	ldrsh.w	r1, [r7, #62]	; 0x3e
 8001578:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	4603      	mov	r3, r0
 8001580:	68f8      	ldr	r0, [r7, #12]
 8001582:	f7ff ff4e 	bl	8001422 <LCD_writeFastHLine>
	    return;
 8001586:	e0de      	b.n	8001746 <LCD_fillTriangle+0x2da>
	  }

	  int16_t dx01 = x1 - x0, dy01 = y1 - y0, dx02 = x2 - x0, dy02 = y2 - y0,
 8001588:	88fa      	ldrh	r2, [r7, #6]
 800158a:	897b      	ldrh	r3, [r7, #10]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	b29b      	uxth	r3, r3
 8001590:	847b      	strh	r3, [r7, #34]	; 0x22
 8001592:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001596:	893b      	ldrh	r3, [r7, #8]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	b29b      	uxth	r3, r3
 800159c:	843b      	strh	r3, [r7, #32]
 800159e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80015a2:	897b      	ldrh	r3, [r7, #10]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	83fb      	strh	r3, [r7, #30]
 80015aa:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80015ae:	893b      	ldrh	r3, [r7, #8]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	83bb      	strh	r3, [r7, #28]
	          dx12 = x2 - x1, dy12 = y2 - y1;
 80015b6:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80015ba:	88fb      	ldrh	r3, [r7, #6]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	b29b      	uxth	r3, r3
 80015c0:	837b      	strh	r3, [r7, #26]
 80015c2:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80015c6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	833b      	strh	r3, [r7, #24]
	  int32_t sa = 0, sb = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	637b      	str	r3, [r7, #52]	; 0x34
 80015d4:	2300      	movs	r3, #0
 80015d6:	633b      	str	r3, [r7, #48]	; 0x30
	  // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
	  // is included here (and second loop will be skipped, avoiding a /0
	  // error there), otherwise scanline y1 is skipped here and handled
	  // in the second loop...which also avoids a /0 error here if y0=y1
	  // (flat-topped triangle).
	  if (y1 == y2)
 80015d8:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 80015dc:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d103      	bne.n	80015ec <LCD_fillTriangle+0x180>
	    last = y1; // Include y1 scanline
 80015e4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80015e8:	873b      	strh	r3, [r7, #56]	; 0x38
 80015ea:	e004      	b.n	80015f6 <LCD_fillTriangle+0x18a>
	  else
	    last = y1 - 1; // Skip it
 80015ec:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80015f0:	3b01      	subs	r3, #1
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	873b      	strh	r3, [r7, #56]	; 0x38

	  for (y = y0; y <= last; y++) {
 80015f6:	893b      	ldrh	r3, [r7, #8]
 80015f8:	877b      	strh	r3, [r7, #58]	; 0x3a
 80015fa:	e041      	b.n	8001680 <LCD_fillTriangle+0x214>
	    a = x0 + sa / dy01;
 80015fc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001600:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001602:	fb92 f3f3 	sdiv	r3, r2, r3
 8001606:	b29a      	uxth	r2, r3
 8001608:	897b      	ldrh	r3, [r7, #10]
 800160a:	4413      	add	r3, r2
 800160c:	b29b      	uxth	r3, r3
 800160e:	87fb      	strh	r3, [r7, #62]	; 0x3e
	    b = x0 + sb / dy02;
 8001610:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001614:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001616:	fb92 f3f3 	sdiv	r3, r2, r3
 800161a:	b29a      	uxth	r2, r3
 800161c:	897b      	ldrh	r3, [r7, #10]
 800161e:	4413      	add	r3, r2
 8001620:	b29b      	uxth	r3, r3
 8001622:	87bb      	strh	r3, [r7, #60]	; 0x3c
	    sa += dx01;
 8001624:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001628:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800162a:	4413      	add	r3, r2
 800162c:	637b      	str	r3, [r7, #52]	; 0x34
	    sb += dx02;
 800162e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001632:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001634:	4413      	add	r3, r2
 8001636:	633b      	str	r3, [r7, #48]	; 0x30
	    /* longhand:
	    a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
	    b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
	    */
	    if (a > b)
 8001638:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	; 0x3e
 800163c:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8001640:	429a      	cmp	r2, r3
 8001642:	dd05      	ble.n	8001650 <LCD_fillTriangle+0x1e4>
	      _swap_int16_t(a, b);
 8001644:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001646:	82bb      	strh	r3, [r7, #20]
 8001648:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800164a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800164c:	8abb      	ldrh	r3, [r7, #20]
 800164e:	87bb      	strh	r3, [r7, #60]	; 0x3c
	    LCD_writeFastHLine(spi, a, y, b - a + 1, color);
 8001650:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8001652:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	b29b      	uxth	r3, r3
 8001658:	3301      	adds	r3, #1
 800165a:	b29b      	uxth	r3, r3
 800165c:	b218      	sxth	r0, r3
 800165e:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 8001662:	f9b7 103e 	ldrsh.w	r1, [r7, #62]	; 0x3e
 8001666:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	4603      	mov	r3, r0
 800166e:	68f8      	ldr	r0, [r7, #12]
 8001670:	f7ff fed7 	bl	8001422 <LCD_writeFastHLine>
	  for (y = y0; y <= last; y++) {
 8001674:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8001678:	b29b      	uxth	r3, r3
 800167a:	3301      	adds	r3, #1
 800167c:	b29b      	uxth	r3, r3
 800167e:	877b      	strh	r3, [r7, #58]	; 0x3a
 8001680:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 8001684:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8001688:	429a      	cmp	r2, r3
 800168a:	ddb7      	ble.n	80015fc <LCD_fillTriangle+0x190>
	  }

	  // For lower part of triangle, find scanline crossings for segments
	  // 0-2 and 1-2.  This loop is skipped if y1=y2.
	  sa = (int32_t)dx12 * (y - y1);
 800168c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001690:	f9b7 103a 	ldrsh.w	r1, [r7, #58]	; 0x3a
 8001694:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8001698:	1a8a      	subs	r2, r1, r2
 800169a:	fb02 f303 	mul.w	r3, r2, r3
 800169e:	637b      	str	r3, [r7, #52]	; 0x34
	  sb = (int32_t)dx02 * (y - y0);
 80016a0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80016a4:	f9b7 103a 	ldrsh.w	r1, [r7, #58]	; 0x3a
 80016a8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80016ac:	1a8a      	subs	r2, r1, r2
 80016ae:	fb02 f303 	mul.w	r3, r2, r3
 80016b2:	633b      	str	r3, [r7, #48]	; 0x30
	  for (; y <= y2; y++) {
 80016b4:	e041      	b.n	800173a <LCD_fillTriangle+0x2ce>
	    a = x1 + sa / dy12;
 80016b6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80016ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80016bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	88fb      	ldrh	r3, [r7, #6]
 80016c4:	4413      	add	r3, r2
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	87fb      	strh	r3, [r7, #62]	; 0x3e
	    b = x0 + sb / dy02;
 80016ca:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80016ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	897b      	ldrh	r3, [r7, #10]
 80016d8:	4413      	add	r3, r2
 80016da:	b29b      	uxth	r3, r3
 80016dc:	87bb      	strh	r3, [r7, #60]	; 0x3c
	    sa += dx12;
 80016de:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80016e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80016e4:	4413      	add	r3, r2
 80016e6:	637b      	str	r3, [r7, #52]	; 0x34
	    sb += dx02;
 80016e8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80016ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016ee:	4413      	add	r3, r2
 80016f0:	633b      	str	r3, [r7, #48]	; 0x30
	    /* longhand:
	    a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
	    b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
	    */
	    if (a > b)
 80016f2:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	; 0x3e
 80016f6:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 80016fa:	429a      	cmp	r2, r3
 80016fc:	dd05      	ble.n	800170a <LCD_fillTriangle+0x29e>
	      _swap_int16_t(a, b);
 80016fe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001700:	82fb      	strh	r3, [r7, #22]
 8001702:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001704:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8001706:	8afb      	ldrh	r3, [r7, #22]
 8001708:	87bb      	strh	r3, [r7, #60]	; 0x3c
	    LCD_writeFastHLine(spi, a, y, b - a + 1, color);
 800170a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800170c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	b29b      	uxth	r3, r3
 8001712:	3301      	adds	r3, #1
 8001714:	b29b      	uxth	r3, r3
 8001716:	b218      	sxth	r0, r3
 8001718:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 800171c:	f9b7 103e 	ldrsh.w	r1, [r7, #62]	; 0x3e
 8001720:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001724:	9300      	str	r3, [sp, #0]
 8001726:	4603      	mov	r3, r0
 8001728:	68f8      	ldr	r0, [r7, #12]
 800172a:	f7ff fe7a 	bl	8001422 <LCD_writeFastHLine>
	  for (; y <= y2; y++) {
 800172e:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8001732:	b29b      	uxth	r3, r3
 8001734:	3301      	adds	r3, #1
 8001736:	b29b      	uxth	r3, r3
 8001738:	877b      	strh	r3, [r7, #58]	; 0x3a
 800173a:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 800173e:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8001742:	429a      	cmp	r2, r3
 8001744:	ddb7      	ble.n	80016b6 <LCD_fillTriangle+0x24a>
	  }
}
 8001746:	3740      	adds	r7, #64	; 0x40
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <LCD_drawBattery>:

//homemade functions for TADAMHASPEV, move to different file
void LCD_drawBattery(SPI_HandleTypeDef* spi, int16_t x, int16_t y, uint32_t size) {
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af02      	add	r7, sp, #8
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	607b      	str	r3, [r7, #4]
 8001756:	460b      	mov	r3, r1
 8001758:	817b      	strh	r3, [r7, #10]
 800175a:	4613      	mov	r3, r2
 800175c:	813b      	strh	r3, [r7, #8]
	//make battery thicker?
	//left
	if(!LCD_setAddrWindow(spi, x, y + size, 1, 22*size)) return;
 800175e:	8979      	ldrh	r1, [r7, #10]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	b29a      	uxth	r2, r3
 8001764:	893b      	ldrh	r3, [r7, #8]
 8001766:	4413      	add	r3, r2
 8001768:	b29a      	uxth	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	b29b      	uxth	r3, r3
 800176e:	4618      	mov	r0, r3
 8001770:	0080      	lsls	r0, r0, #2
 8001772:	4418      	add	r0, r3
 8001774:	0040      	lsls	r0, r0, #1
 8001776:	4403      	add	r3, r0
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	b29b      	uxth	r3, r3
 800177c:	9300      	str	r3, [sp, #0]
 800177e:	2301      	movs	r3, #1
 8001780:	68f8      	ldr	r0, [r7, #12]
 8001782:	f7ff fb5f 	bl	8000e44 <LCD_setAddrWindow>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	f000 80df 	beq.w	800194c <LCD_drawBattery+0x200>
	if (!LCD_pushColorCopy(spi, HX8357_BLACK, 22*size)) return;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2216      	movs	r2, #22
 8001792:	fb02 f303 	mul.w	r3, r2, r3
 8001796:	461a      	mov	r2, r3
 8001798:	2100      	movs	r1, #0
 800179a:	68f8      	ldr	r0, [r7, #12]
 800179c:	f7ff fbf7 	bl	8000f8e <LCD_pushColorCopy>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f000 80d4 	beq.w	8001950 <LCD_drawBattery+0x204>

	//right
	if(!LCD_setAddrWindow(spi, x + 10*size, y + size, 1, 22*size)) return;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	461a      	mov	r2, r3
 80017ae:	0092      	lsls	r2, r2, #2
 80017b0:	4413      	add	r3, r2
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	b29a      	uxth	r2, r3
 80017b6:	897b      	ldrh	r3, [r7, #10]
 80017b8:	4413      	add	r3, r2
 80017ba:	b299      	uxth	r1, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	b29a      	uxth	r2, r3
 80017c0:	893b      	ldrh	r3, [r7, #8]
 80017c2:	4413      	add	r3, r2
 80017c4:	b29a      	uxth	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	4618      	mov	r0, r3
 80017cc:	0080      	lsls	r0, r0, #2
 80017ce:	4418      	add	r0, r3
 80017d0:	0040      	lsls	r0, r0, #1
 80017d2:	4403      	add	r3, r0
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	2301      	movs	r3, #1
 80017dc:	68f8      	ldr	r0, [r7, #12]
 80017de:	f7ff fb31 	bl	8000e44 <LCD_setAddrWindow>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	f000 80b5 	beq.w	8001954 <LCD_drawBattery+0x208>
	if (!LCD_pushColorCopy(spi, HX8357_BLACK, 22*size)) return;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2216      	movs	r2, #22
 80017ee:	fb02 f303 	mul.w	r3, r2, r3
 80017f2:	461a      	mov	r2, r3
 80017f4:	2100      	movs	r1, #0
 80017f6:	68f8      	ldr	r0, [r7, #12]
 80017f8:	f7ff fbc9 	bl	8000f8e <LCD_pushColorCopy>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f000 80aa 	beq.w	8001958 <LCD_drawBattery+0x20c>

	//top
	if(!LCD_setAddrWindow(spi, x, y + size, 10*size, 1)) return;
 8001804:	8979      	ldrh	r1, [r7, #10]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	b29a      	uxth	r2, r3
 800180a:	893b      	ldrh	r3, [r7, #8]
 800180c:	4413      	add	r3, r2
 800180e:	b29a      	uxth	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	b29b      	uxth	r3, r3
 8001814:	4618      	mov	r0, r3
 8001816:	0080      	lsls	r0, r0, #2
 8001818:	4403      	add	r3, r0
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	b29b      	uxth	r3, r3
 800181e:	2001      	movs	r0, #1
 8001820:	9000      	str	r0, [sp, #0]
 8001822:	68f8      	ldr	r0, [r7, #12]
 8001824:	f7ff fb0e 	bl	8000e44 <LCD_setAddrWindow>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	f000 8096 	beq.w	800195c <LCD_drawBattery+0x210>
	if (!LCD_pushColorCopy(spi, HX8357_BLACK, 10*size)) return;
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	4613      	mov	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4413      	add	r3, r2
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	461a      	mov	r2, r3
 800183c:	2100      	movs	r1, #0
 800183e:	68f8      	ldr	r0, [r7, #12]
 8001840:	f7ff fba5 	bl	8000f8e <LCD_pushColorCopy>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	f000 808a 	beq.w	8001960 <LCD_drawBattery+0x214>

	//bottom
	if(!LCD_setAddrWindow(spi, x, y + 23*size, 10*size, 1)) return;
 800184c:	8979      	ldrh	r1, [r7, #10]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	b29b      	uxth	r3, r3
 8001852:	461a      	mov	r2, r3
 8001854:	0052      	lsls	r2, r2, #1
 8001856:	441a      	add	r2, r3
 8001858:	00d2      	lsls	r2, r2, #3
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	b29a      	uxth	r2, r3
 800185e:	893b      	ldrh	r3, [r7, #8]
 8001860:	4413      	add	r3, r2
 8001862:	b29a      	uxth	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	b29b      	uxth	r3, r3
 8001868:	4618      	mov	r0, r3
 800186a:	0080      	lsls	r0, r0, #2
 800186c:	4403      	add	r3, r0
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	b29b      	uxth	r3, r3
 8001872:	2001      	movs	r0, #1
 8001874:	9000      	str	r0, [sp, #0]
 8001876:	68f8      	ldr	r0, [r7, #12]
 8001878:	f7ff fae4 	bl	8000e44 <LCD_setAddrWindow>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d070      	beq.n	8001964 <LCD_drawBattery+0x218>
	if (!LCD_pushColorCopy(spi, HX8357_BLACK, 10*size)) return;
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	4613      	mov	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4413      	add	r3, r2
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	461a      	mov	r2, r3
 800188e:	2100      	movs	r1, #0
 8001890:	68f8      	ldr	r0, [r7, #12]
 8001892:	f7ff fb7c 	bl	8000f8e <LCD_pushColorCopy>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d065      	beq.n	8001968 <LCD_drawBattery+0x21c>

	//lil cap
	if(!LCD_setAddrWindow(spi, x + 3*size, y, 4*size, 1)) return;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	b29b      	uxth	r3, r3
 80018a0:	461a      	mov	r2, r3
 80018a2:	0052      	lsls	r2, r2, #1
 80018a4:	4413      	add	r3, r2
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	897b      	ldrh	r3, [r7, #10]
 80018aa:	4413      	add	r3, r2
 80018ac:	b299      	uxth	r1, r3
 80018ae:	893a      	ldrh	r2, [r7, #8]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	2001      	movs	r0, #1
 80018ba:	9000      	str	r0, [sp, #0]
 80018bc:	68f8      	ldr	r0, [r7, #12]
 80018be:	f7ff fac1 	bl	8000e44 <LCD_setAddrWindow>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d051      	beq.n	800196c <LCD_drawBattery+0x220>
	if (!LCD_pushColorCopy(spi, HX8357_BLACK, 4*size)) return;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	461a      	mov	r2, r3
 80018ce:	2100      	movs	r1, #0
 80018d0:	68f8      	ldr	r0, [r7, #12]
 80018d2:	f7ff fb5c 	bl	8000f8e <LCD_pushColorCopy>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d049      	beq.n	8001970 <LCD_drawBattery+0x224>

	if(!LCD_setAddrWindow(spi, x + 3*size, y, 1, size)) return;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	b29b      	uxth	r3, r3
 80018e0:	461a      	mov	r2, r3
 80018e2:	0052      	lsls	r2, r2, #1
 80018e4:	4413      	add	r3, r2
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	897b      	ldrh	r3, [r7, #10]
 80018ea:	4413      	add	r3, r2
 80018ec:	b299      	uxth	r1, r3
 80018ee:	893a      	ldrh	r2, [r7, #8]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	2301      	movs	r3, #1
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	f7ff faa3 	bl	8000e44 <LCD_setAddrWindow>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d037      	beq.n	8001974 <LCD_drawBattery+0x228>
	if (!LCD_pushColorCopy(spi, HX8357_BLACK, size)) return;
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	2100      	movs	r1, #0
 8001908:	68f8      	ldr	r0, [r7, #12]
 800190a:	f7ff fb40 	bl	8000f8e <LCD_pushColorCopy>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d031      	beq.n	8001978 <LCD_drawBattery+0x22c>

	if(!LCD_setAddrWindow(spi, x + 3*size + 4*size, y, 1, size)) return;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	b29b      	uxth	r3, r3
 8001918:	461a      	mov	r2, r3
 800191a:	00d2      	lsls	r2, r2, #3
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	b29a      	uxth	r2, r3
 8001920:	897b      	ldrh	r3, [r7, #10]
 8001922:	4413      	add	r3, r2
 8001924:	b299      	uxth	r1, r3
 8001926:	893a      	ldrh	r2, [r7, #8]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	b29b      	uxth	r3, r3
 800192c:	9300      	str	r3, [sp, #0]
 800192e:	2301      	movs	r3, #1
 8001930:	68f8      	ldr	r0, [r7, #12]
 8001932:	f7ff fa87 	bl	8000e44 <LCD_setAddrWindow>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d01f      	beq.n	800197c <LCD_drawBattery+0x230>
	if (!LCD_pushColorCopy(spi, HX8357_BLACK, size)) return;
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	2100      	movs	r1, #0
 8001940:	68f8      	ldr	r0, [r7, #12]
 8001942:	f7ff fb24 	bl	8000f8e <LCD_pushColorCopy>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
	return;
 800194a:	e018      	b.n	800197e <LCD_drawBattery+0x232>
	if(!LCD_setAddrWindow(spi, x, y + size, 1, 22*size)) return;
 800194c:	bf00      	nop
 800194e:	e016      	b.n	800197e <LCD_drawBattery+0x232>
	if (!LCD_pushColorCopy(spi, HX8357_BLACK, 22*size)) return;
 8001950:	bf00      	nop
 8001952:	e014      	b.n	800197e <LCD_drawBattery+0x232>
	if(!LCD_setAddrWindow(spi, x + 10*size, y + size, 1, 22*size)) return;
 8001954:	bf00      	nop
 8001956:	e012      	b.n	800197e <LCD_drawBattery+0x232>
	if (!LCD_pushColorCopy(spi, HX8357_BLACK, 22*size)) return;
 8001958:	bf00      	nop
 800195a:	e010      	b.n	800197e <LCD_drawBattery+0x232>
	if(!LCD_setAddrWindow(spi, x, y + size, 10*size, 1)) return;
 800195c:	bf00      	nop
 800195e:	e00e      	b.n	800197e <LCD_drawBattery+0x232>
	if (!LCD_pushColorCopy(spi, HX8357_BLACK, 10*size)) return;
 8001960:	bf00      	nop
 8001962:	e00c      	b.n	800197e <LCD_drawBattery+0x232>
	if(!LCD_setAddrWindow(spi, x, y + 23*size, 10*size, 1)) return;
 8001964:	bf00      	nop
 8001966:	e00a      	b.n	800197e <LCD_drawBattery+0x232>
	if (!LCD_pushColorCopy(spi, HX8357_BLACK, 10*size)) return;
 8001968:	bf00      	nop
 800196a:	e008      	b.n	800197e <LCD_drawBattery+0x232>
	if(!LCD_setAddrWindow(spi, x + 3*size, y, 4*size, 1)) return;
 800196c:	bf00      	nop
 800196e:	e006      	b.n	800197e <LCD_drawBattery+0x232>
	if (!LCD_pushColorCopy(spi, HX8357_BLACK, 4*size)) return;
 8001970:	bf00      	nop
 8001972:	e004      	b.n	800197e <LCD_drawBattery+0x232>
	if(!LCD_setAddrWindow(spi, x + 3*size, y, 1, size)) return;
 8001974:	bf00      	nop
 8001976:	e002      	b.n	800197e <LCD_drawBattery+0x232>
	if (!LCD_pushColorCopy(spi, HX8357_BLACK, size)) return;
 8001978:	bf00      	nop
 800197a:	e000      	b.n	800197e <LCD_drawBattery+0x232>
	if(!LCD_setAddrWindow(spi, x + 3*size + 4*size, y, 1, size)) return;
 800197c:	bf00      	nop
}
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <LCD_drawFrame>:

void LCD_drawFrame(SPI_HandleTypeDef* spi) {
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af02      	add	r7, sp, #8
 800198a:	6078      	str	r0, [r7, #4]
	//rows
	LCD_writeLine(spi,0,80,360,80,HX8357_BLACK);
 800198c:	2300      	movs	r3, #0
 800198e:	9301      	str	r3, [sp, #4]
 8001990:	2350      	movs	r3, #80	; 0x50
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001998:	2250      	movs	r2, #80	; 0x50
 800199a:	2100      	movs	r1, #0
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f7ff fcad 	bl	80012fc <LCD_writeLine>
	LCD_writeLine(spi,0,160,360,160,HX8357_BLACK);
 80019a2:	2300      	movs	r3, #0
 80019a4:	9301      	str	r3, [sp, #4]
 80019a6:	23a0      	movs	r3, #160	; 0xa0
 80019a8:	9300      	str	r3, [sp, #0]
 80019aa:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80019ae:	22a0      	movs	r2, #160	; 0xa0
 80019b0:	2100      	movs	r1, #0
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f7ff fca2 	bl	80012fc <LCD_writeLine>
	LCD_writeLine(spi,0,240,360,240,HX8357_BLACK);
 80019b8:	2300      	movs	r3, #0
 80019ba:	9301      	str	r3, [sp, #4]
 80019bc:	23f0      	movs	r3, #240	; 0xf0
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80019c4:	22f0      	movs	r2, #240	; 0xf0
 80019c6:	2100      	movs	r1, #0
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7ff fc97 	bl	80012fc <LCD_writeLine>

	//column
	LCD_writeLine(spi,360,0,360,320,HX8357_BLACK);
 80019ce:	2300      	movs	r3, #0
 80019d0:	9301      	str	r3, [sp, #4]
 80019d2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80019dc:	2200      	movs	r2, #0
 80019de:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f7ff fc8a 	bl	80012fc <LCD_writeLine>
	return;
 80019e8:	bf00      	nop
}
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <LCD_fillBattery>:

int offset = 0;

void LCD_fillBattery(SPI_HandleTypeDef* spi, int16_t x, int16_t y, uint32_t size, int level) {
 80019f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80019f4:	b086      	sub	sp, #24
 80019f6:	af02      	add	r7, sp, #8
 80019f8:	60f8      	str	r0, [r7, #12]
 80019fa:	607b      	str	r3, [r7, #4]
 80019fc:	460b      	mov	r3, r1
 80019fe:	817b      	strh	r3, [r7, #10]
 8001a00:	4613      	mov	r3, r2
 8001a02:	813b      	strh	r3, [r7, #8]
	LCD_writePixels(spi, HX8357_WHITE, x + 3, ((y + size) + 3), 10*size - 6, (22*size - 6));
 8001a04:	897b      	ldrh	r3, [r7, #10]
 8001a06:	3303      	adds	r3, #3
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	b219      	sxth	r1, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	893b      	ldrh	r3, [r7, #8]
 8001a12:	4413      	add	r3, r2
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	3303      	adds	r3, #3
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	b218      	sxth	r0, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	461a      	mov	r2, r3
 8001a22:	0092      	lsls	r2, r2, #2
 8001a24:	4413      	add	r3, r2
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	3b06      	subs	r3, #6
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	b21a      	sxth	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	461c      	mov	r4, r3
 8001a36:	00a4      	lsls	r4, r4, #2
 8001a38:	441c      	add	r4, r3
 8001a3a:	0064      	lsls	r4, r4, #1
 8001a3c:	4423      	add	r3, r4
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	3b06      	subs	r3, #6
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	b21b      	sxth	r3, r3
 8001a48:	9301      	str	r3, [sp, #4]
 8001a4a:	9200      	str	r2, [sp, #0]
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	460a      	mov	r2, r1
 8001a50:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001a54:	68f8      	ldr	r0, [r7, #12]
 8001a56:	f7ff fb07 	bl	8001068 <LCD_writePixels>
	offset = 22*size - (22*size)*(level/100.0);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2216      	movs	r2, #22
 8001a5e:	fb02 f303 	mul.w	r3, r2, r3
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7fe fcf4 	bl	8000450 <__aeabi_ui2d>
 8001a68:	4604      	mov	r4, r0
 8001a6a:	460d      	mov	r5, r1
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2216      	movs	r2, #22
 8001a70:	fb02 f303 	mul.w	r3, r2, r3
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7fe fceb 	bl	8000450 <__aeabi_ui2d>
 8001a7a:	4680      	mov	r8, r0
 8001a7c:	4689      	mov	r9, r1
 8001a7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001a80:	f7fe fcf6 	bl	8000470 <__aeabi_i2d>
 8001a84:	f04f 0200 	mov.w	r2, #0
 8001a88:	4b63      	ldr	r3, [pc, #396]	; (8001c18 <LCD_fillBattery+0x228>)
 8001a8a:	f7fe fe85 	bl	8000798 <__aeabi_ddiv>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	4640      	mov	r0, r8
 8001a94:	4649      	mov	r1, r9
 8001a96:	f7fe fd55 	bl	8000544 <__aeabi_dmul>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4620      	mov	r0, r4
 8001aa0:	4629      	mov	r1, r5
 8001aa2:	f7fe fb97 	bl	80001d4 <__aeabi_dsub>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4610      	mov	r0, r2
 8001aac:	4619      	mov	r1, r3
 8001aae:	f7fe ff5b 	bl	8000968 <__aeabi_d2iz>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	4a59      	ldr	r2, [pc, #356]	; (8001c1c <LCD_fillBattery+0x22c>)
 8001ab6:	6013      	str	r3, [r2, #0]
	if (level > 0) {
 8001ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f340 80a7 	ble.w	8001c0e <LCD_fillBattery+0x21e>
		if (level < 20) {
 8001ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac2:	2b13      	cmp	r3, #19
 8001ac4:	dc35      	bgt.n	8001b32 <LCD_fillBattery+0x142>
			LCD_writePixels(spi, HX8357_RED, x + 3, ((y + size) + 3) + offset, 10*size - 6, (22*size - 6) - offset);
 8001ac6:	897b      	ldrh	r3, [r7, #10]
 8001ac8:	3303      	adds	r3, #3
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	b218      	sxth	r0, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	893b      	ldrh	r3, [r7, #8]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	4b50      	ldr	r3, [pc, #320]	; (8001c1c <LCD_fillBattery+0x22c>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	4413      	add	r3, r2
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	3303      	adds	r3, #3
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	b21c      	sxth	r4, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	461a      	mov	r2, r3
 8001aee:	0092      	lsls	r2, r2, #2
 8001af0:	4413      	add	r3, r2
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	3b06      	subs	r3, #6
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	b21a      	sxth	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	4619      	mov	r1, r3
 8001b02:	0089      	lsls	r1, r1, #2
 8001b04:	4419      	add	r1, r3
 8001b06:	0049      	lsls	r1, r1, #1
 8001b08:	440b      	add	r3, r1
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	b299      	uxth	r1, r3
 8001b0e:	4b43      	ldr	r3, [pc, #268]	; (8001c1c <LCD_fillBattery+0x22c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	1acb      	subs	r3, r1, r3
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	3b06      	subs	r3, #6
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	b21b      	sxth	r3, r3
 8001b1e:	9301      	str	r3, [sp, #4]
 8001b20:	9200      	str	r2, [sp, #0]
 8001b22:	4623      	mov	r3, r4
 8001b24:	4602      	mov	r2, r0
 8001b26:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8001b2a:	68f8      	ldr	r0, [r7, #12]
 8001b2c:	f7ff fa9c 	bl	8001068 <LCD_writePixels>
			LCD_writePixels(spi, HX8357_GREEN, x + 3, ((y + size) + 3) + offset, 10*size - 6, (22*size - 6) - offset);
		}
	}
	//level = 100 --> y offset 0
	//level = 0 --> y offset 22*size
}
 8001b30:	e06d      	b.n	8001c0e <LCD_fillBattery+0x21e>
		} else if (level < 50) {
 8001b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b34:	2b31      	cmp	r3, #49	; 0x31
 8001b36:	dc35      	bgt.n	8001ba4 <LCD_fillBattery+0x1b4>
			LCD_writePixels(spi, HX8357_YELLOW, x + 3, ((y + size) + 3) + offset, 10*size - 6, (22*size - 6) - offset);
 8001b38:	897b      	ldrh	r3, [r7, #10]
 8001b3a:	3303      	adds	r3, #3
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	b218      	sxth	r0, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	893b      	ldrh	r3, [r7, #8]
 8001b46:	4413      	add	r3, r2
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	4b34      	ldr	r3, [pc, #208]	; (8001c1c <LCD_fillBattery+0x22c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	4413      	add	r3, r2
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	3303      	adds	r3, #3
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	b21c      	sxth	r4, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	461a      	mov	r2, r3
 8001b60:	0092      	lsls	r2, r2, #2
 8001b62:	4413      	add	r3, r2
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	3b06      	subs	r3, #6
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	b21a      	sxth	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	4619      	mov	r1, r3
 8001b74:	0089      	lsls	r1, r1, #2
 8001b76:	4419      	add	r1, r3
 8001b78:	0049      	lsls	r1, r1, #1
 8001b7a:	440b      	add	r3, r1
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	b299      	uxth	r1, r3
 8001b80:	4b26      	ldr	r3, [pc, #152]	; (8001c1c <LCD_fillBattery+0x22c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	1acb      	subs	r3, r1, r3
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	3b06      	subs	r3, #6
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	b21b      	sxth	r3, r3
 8001b90:	9301      	str	r3, [sp, #4]
 8001b92:	9200      	str	r2, [sp, #0]
 8001b94:	4623      	mov	r3, r4
 8001b96:	4602      	mov	r2, r0
 8001b98:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 8001b9c:	68f8      	ldr	r0, [r7, #12]
 8001b9e:	f7ff fa63 	bl	8001068 <LCD_writePixels>
}
 8001ba2:	e034      	b.n	8001c0e <LCD_fillBattery+0x21e>
			LCD_writePixels(spi, HX8357_GREEN, x + 3, ((y + size) + 3) + offset, 10*size - 6, (22*size - 6) - offset);
 8001ba4:	897b      	ldrh	r3, [r7, #10]
 8001ba6:	3303      	adds	r3, #3
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	b218      	sxth	r0, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	893b      	ldrh	r3, [r7, #8]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	4b19      	ldr	r3, [pc, #100]	; (8001c1c <LCD_fillBattery+0x22c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	4413      	add	r3, r2
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	3303      	adds	r3, #3
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	b21c      	sxth	r4, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	461a      	mov	r2, r3
 8001bcc:	0092      	lsls	r2, r2, #2
 8001bce:	4413      	add	r3, r2
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	3b06      	subs	r3, #6
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	b21a      	sxth	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	4619      	mov	r1, r3
 8001be0:	0089      	lsls	r1, r1, #2
 8001be2:	4419      	add	r1, r3
 8001be4:	0049      	lsls	r1, r1, #1
 8001be6:	440b      	add	r3, r1
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	b299      	uxth	r1, r3
 8001bec:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <LCD_fillBattery+0x22c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	1acb      	subs	r3, r1, r3
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	3b06      	subs	r3, #6
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	b21b      	sxth	r3, r3
 8001bfc:	9301      	str	r3, [sp, #4]
 8001bfe:	9200      	str	r2, [sp, #0]
 8001c00:	4623      	mov	r3, r4
 8001c02:	4602      	mov	r2, r0
 8001c04:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8001c08:	68f8      	ldr	r0, [r7, #12]
 8001c0a:	f7ff fa2d 	bl	8001068 <LCD_writePixels>
}
 8001c0e:	bf00      	nop
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c18:	40590000 	.word	0x40590000
 8001c1c:	200000bc 	.word	0x200000bc

08001c20 <LCD_updateVals>:
int power;
char accelString[3];
char tempString[3];
char powerString[3];

void LCD_updateVals(SPI_HandleTypeDef* spi, int buf[]) {
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af04      	add	r7, sp, #16
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
	//buf[0:1] accel, buf[2:3] temp, buf[4:5] power
	accel = (buf[0] << 4) | buf[1];
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	011a      	lsls	r2, r3, #4
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	3304      	adds	r3, #4
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	4a29      	ldr	r2, [pc, #164]	; (8001ce0 <LCD_updateVals+0xc0>)
 8001c3a:	6013      	str	r3, [r2, #0]
	temp = (buf[2] << 4) | buf[3];
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	3308      	adds	r3, #8
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	011a      	lsls	r2, r3, #4
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	330c      	adds	r3, #12
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	4a25      	ldr	r2, [pc, #148]	; (8001ce4 <LCD_updateVals+0xc4>)
 8001c4e:	6013      	str	r3, [r2, #0]
	power = (buf[4] << 4) | buf[5];
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	3310      	adds	r3, #16
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	011a      	lsls	r2, r3, #4
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	3314      	adds	r3, #20
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	4a21      	ldr	r2, [pc, #132]	; (8001ce8 <LCD_updateVals+0xc8>)
 8001c62:	6013      	str	r3, [r2, #0]
	itoa(accel,accelString,10);
 8001c64:	4b1e      	ldr	r3, [pc, #120]	; (8001ce0 <LCD_updateVals+0xc0>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	220a      	movs	r2, #10
 8001c6a:	4920      	ldr	r1, [pc, #128]	; (8001cec <LCD_updateVals+0xcc>)
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f004 fb3c 	bl	80062ea <itoa>
	itoa(temp,tempString,10);
 8001c72:	4b1c      	ldr	r3, [pc, #112]	; (8001ce4 <LCD_updateVals+0xc4>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	220a      	movs	r2, #10
 8001c78:	491d      	ldr	r1, [pc, #116]	; (8001cf0 <LCD_updateVals+0xd0>)
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f004 fb35 	bl	80062ea <itoa>
	itoa(power,powerString,10);
 8001c80:	4b19      	ldr	r3, [pc, #100]	; (8001ce8 <LCD_updateVals+0xc8>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	220a      	movs	r2, #10
 8001c86:	491b      	ldr	r1, [pc, #108]	; (8001cf4 <LCD_updateVals+0xd4>)
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f004 fb2e 	bl	80062ea <itoa>
	LCD_drawString(spi,146,30 + 80*1,accelString,3,HX8357_BLACK,4);
 8001c8e:	2304      	movs	r3, #4
 8001c90:	9302      	str	r3, [sp, #8]
 8001c92:	2300      	movs	r3, #0
 8001c94:	9301      	str	r3, [sp, #4]
 8001c96:	2303      	movs	r3, #3
 8001c98:	9300      	str	r3, [sp, #0]
 8001c9a:	4b14      	ldr	r3, [pc, #80]	; (8001cec <LCD_updateVals+0xcc>)
 8001c9c:	226e      	movs	r2, #110	; 0x6e
 8001c9e:	2192      	movs	r1, #146	; 0x92
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff faf5 	bl	8001290 <LCD_drawString>
	LCD_drawString(spi,146,30 + 80*2,tempString,3,HX8357_BLACK,4);
 8001ca6:	2304      	movs	r3, #4
 8001ca8:	9302      	str	r3, [sp, #8]
 8001caa:	2300      	movs	r3, #0
 8001cac:	9301      	str	r3, [sp, #4]
 8001cae:	2303      	movs	r3, #3
 8001cb0:	9300      	str	r3, [sp, #0]
 8001cb2:	4b0f      	ldr	r3, [pc, #60]	; (8001cf0 <LCD_updateVals+0xd0>)
 8001cb4:	22be      	movs	r2, #190	; 0xbe
 8001cb6:	2192      	movs	r1, #146	; 0x92
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7ff fae9 	bl	8001290 <LCD_drawString>
	LCD_drawString(spi,146,30 + 80*3,powerString,3,HX8357_BLACK,4);
 8001cbe:	2304      	movs	r3, #4
 8001cc0:	9302      	str	r3, [sp, #8]
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	9301      	str	r3, [sp, #4]
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	4b0a      	ldr	r3, [pc, #40]	; (8001cf4 <LCD_updateVals+0xd4>)
 8001ccc:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8001cd0:	2192      	movs	r1, #146	; 0x92
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f7ff fadc 	bl	8001290 <LCD_drawString>
}
 8001cd8:	bf00      	nop
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	200000c0 	.word	0x200000c0
 8001ce4:	200000c4 	.word	0x200000c4
 8001ce8:	200000c8 	.word	0x200000c8
 8001cec:	200000cc 	.word	0x200000cc
 8001cf0:	200000d0 	.word	0x200000d0
 8001cf4:	200000d4 	.word	0x200000d4

08001cf8 <LCD_warnings>:
//}

int tempWarn = 0;
int voltWarn = 0;

void LCD_warnings(SPI_HandleTypeDef* spi, int temp, int level, int *warning) {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b088      	sub	sp, #32
 8001cfc:	af04      	add	r7, sp, #16
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
 8001d04:	603b      	str	r3, [r7, #0]
	if ((temp >= 50 | level <= 30) & *warning == 0) {
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	2b31      	cmp	r3, #49	; 0x31
 8001d0a:	bfcc      	ite	gt
 8001d0c:	2301      	movgt	r3, #1
 8001d0e:	2300      	movle	r3, #0
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2b1e      	cmp	r3, #30
 8001d16:	bfd4      	ite	le
 8001d18:	2301      	movle	r3, #1
 8001d1a:	2300      	movgt	r3, #0
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	461a      	mov	r2, r3
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	bf0c      	ite	eq
 8001d2c:	2301      	moveq	r3, #1
 8001d2e:	2300      	movne	r3, #0
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	4013      	ands	r3, r2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d00e      	beq.n	8001d56 <LCD_warnings+0x5e>
		LCD_writePixels(spi,HX8357_WHITE,0,0,359,79);
 8001d38:	234f      	movs	r3, #79	; 0x4f
 8001d3a:	9301      	str	r3, [sp, #4]
 8001d3c:	f240 1367 	movw	r3, #359	; 0x167
 8001d40:	9300      	str	r3, [sp, #0]
 8001d42:	2300      	movs	r3, #0
 8001d44:	2200      	movs	r2, #0
 8001d46:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001d4a:	68f8      	ldr	r0, [r7, #12]
 8001d4c:	f7ff f98c 	bl	8001068 <LCD_writePixels>
		*warning = 1;
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	2201      	movs	r2, #1
 8001d54:	601a      	str	r2, [r3, #0]
	}
	if (temp >= 50 & tempWarn == 0) {
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	2b31      	cmp	r3, #49	; 0x31
 8001d5a:	bfcc      	ite	gt
 8001d5c:	2301      	movgt	r3, #1
 8001d5e:	2300      	movle	r3, #0
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	4b69      	ldr	r3, [pc, #420]	; (8001f08 <LCD_warnings+0x210>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	bf0c      	ite	eq
 8001d6a:	2301      	moveq	r3, #1
 8001d6c:	2300      	movne	r3, #0
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	4013      	ands	r3, r2
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d01e      	beq.n	8001db6 <LCD_warnings+0xbe>
		LCD_fillTriangle(spi,15,55,45,55,30,25,HX8357_GREEN);
 8001d78:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001d7c:	9303      	str	r3, [sp, #12]
 8001d7e:	2319      	movs	r3, #25
 8001d80:	9302      	str	r3, [sp, #8]
 8001d82:	231e      	movs	r3, #30
 8001d84:	9301      	str	r3, [sp, #4]
 8001d86:	2337      	movs	r3, #55	; 0x37
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	232d      	movs	r3, #45	; 0x2d
 8001d8c:	2237      	movs	r2, #55	; 0x37
 8001d8e:	210f      	movs	r1, #15
 8001d90:	68f8      	ldr	r0, [r7, #12]
 8001d92:	f7ff fb6b 	bl	800146c <LCD_fillTriangle>
		LCD_drawString(spi,55,30 + 80*0,"HIGH TEMP",9,HX8357_RED,2);
 8001d96:	2302      	movs	r3, #2
 8001d98:	9302      	str	r3, [sp, #8]
 8001d9a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001d9e:	9301      	str	r3, [sp, #4]
 8001da0:	2309      	movs	r3, #9
 8001da2:	9300      	str	r3, [sp, #0]
 8001da4:	4b59      	ldr	r3, [pc, #356]	; (8001f0c <LCD_warnings+0x214>)
 8001da6:	221e      	movs	r2, #30
 8001da8:	2137      	movs	r1, #55	; 0x37
 8001daa:	68f8      	ldr	r0, [r7, #12]
 8001dac:	f7ff fa70 	bl	8001290 <LCD_drawString>
		tempWarn = 1;
 8001db0:	4b55      	ldr	r3, [pc, #340]	; (8001f08 <LCD_warnings+0x210>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	601a      	str	r2, [r3, #0]
	}
	if (level <= 30 & voltWarn == 0) {
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2b1e      	cmp	r3, #30
 8001dba:	bfd4      	ite	le
 8001dbc:	2301      	movle	r3, #1
 8001dbe:	2300      	movgt	r3, #0
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	4b53      	ldr	r3, [pc, #332]	; (8001f10 <LCD_warnings+0x218>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	bf0c      	ite	eq
 8001dca:	2301      	moveq	r3, #1
 8001dcc:	2300      	movne	r3, #0
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d01e      	beq.n	8001e16 <LCD_warnings+0x11e>
		LCD_fillTriangle(spi,180,55,210,55,195,25,HX8357_GREEN);
 8001dd8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001ddc:	9303      	str	r3, [sp, #12]
 8001dde:	2319      	movs	r3, #25
 8001de0:	9302      	str	r3, [sp, #8]
 8001de2:	23c3      	movs	r3, #195	; 0xc3
 8001de4:	9301      	str	r3, [sp, #4]
 8001de6:	2337      	movs	r3, #55	; 0x37
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	23d2      	movs	r3, #210	; 0xd2
 8001dec:	2237      	movs	r2, #55	; 0x37
 8001dee:	21b4      	movs	r1, #180	; 0xb4
 8001df0:	68f8      	ldr	r0, [r7, #12]
 8001df2:	f7ff fb3b 	bl	800146c <LCD_fillTriangle>
		LCD_drawString(spi,220,30 + 80*0,"LOW VOLT",8,HX8357_RED,2);
 8001df6:	2302      	movs	r3, #2
 8001df8:	9302      	str	r3, [sp, #8]
 8001dfa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001dfe:	9301      	str	r3, [sp, #4]
 8001e00:	2308      	movs	r3, #8
 8001e02:	9300      	str	r3, [sp, #0]
 8001e04:	4b43      	ldr	r3, [pc, #268]	; (8001f14 <LCD_warnings+0x21c>)
 8001e06:	221e      	movs	r2, #30
 8001e08:	21dc      	movs	r1, #220	; 0xdc
 8001e0a:	68f8      	ldr	r0, [r7, #12]
 8001e0c:	f7ff fa40 	bl	8001290 <LCD_drawString>
		voltWarn = 1;
 8001e10:	4b3f      	ldr	r3, [pc, #252]	; (8001f10 <LCD_warnings+0x218>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	601a      	str	r2, [r3, #0]
	}
	if (temp < 50 & tempWarn == 1) {
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	2b31      	cmp	r3, #49	; 0x31
 8001e1a:	bfd4      	ite	le
 8001e1c:	2301      	movle	r3, #1
 8001e1e:	2300      	movgt	r3, #0
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	4b39      	ldr	r3, [pc, #228]	; (8001f08 <LCD_warnings+0x210>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	bf0c      	ite	eq
 8001e2a:	2301      	moveq	r3, #1
 8001e2c:	2300      	movne	r3, #0
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	4013      	ands	r3, r2
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d00d      	beq.n	8001e54 <LCD_warnings+0x15c>
		LCD_writePixels(spi,HX8357_WHITE,0,0,179,79);
 8001e38:	234f      	movs	r3, #79	; 0x4f
 8001e3a:	9301      	str	r3, [sp, #4]
 8001e3c:	23b3      	movs	r3, #179	; 0xb3
 8001e3e:	9300      	str	r3, [sp, #0]
 8001e40:	2300      	movs	r3, #0
 8001e42:	2200      	movs	r2, #0
 8001e44:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001e48:	68f8      	ldr	r0, [r7, #12]
 8001e4a:	f7ff f90d 	bl	8001068 <LCD_writePixels>
		tempWarn = 0;
 8001e4e:	4b2e      	ldr	r3, [pc, #184]	; (8001f08 <LCD_warnings+0x210>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
	}
	if (level > 30 & voltWarn == 1) {
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b1e      	cmp	r3, #30
 8001e58:	bfcc      	ite	gt
 8001e5a:	2301      	movgt	r3, #1
 8001e5c:	2300      	movle	r3, #0
 8001e5e:	b2da      	uxtb	r2, r3
 8001e60:	4b2b      	ldr	r3, [pc, #172]	; (8001f10 <LCD_warnings+0x218>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	bf0c      	ite	eq
 8001e68:	2301      	moveq	r3, #1
 8001e6a:	2300      	movne	r3, #0
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	4013      	ands	r3, r2
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d00d      	beq.n	8001e92 <LCD_warnings+0x19a>
		LCD_writePixels(spi,HX8357_WHITE,180,0,179,79);
 8001e76:	234f      	movs	r3, #79	; 0x4f
 8001e78:	9301      	str	r3, [sp, #4]
 8001e7a:	23b3      	movs	r3, #179	; 0xb3
 8001e7c:	9300      	str	r3, [sp, #0]
 8001e7e:	2300      	movs	r3, #0
 8001e80:	22b4      	movs	r2, #180	; 0xb4
 8001e82:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001e86:	68f8      	ldr	r0, [r7, #12]
 8001e88:	f7ff f8ee 	bl	8001068 <LCD_writePixels>
		voltWarn = 0;
 8001e8c:	4b20      	ldr	r3, [pc, #128]	; (8001f10 <LCD_warnings+0x218>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]
	}
	if (*warning == 1 & voltWarn == 0 & tempWarn == 0) {
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	bf0c      	ite	eq
 8001e9a:	2301      	moveq	r3, #1
 8001e9c:	2300      	movne	r3, #0
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	4b1b      	ldr	r3, [pc, #108]	; (8001f10 <LCD_warnings+0x218>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	bf0c      	ite	eq
 8001ea8:	2301      	moveq	r3, #1
 8001eaa:	2300      	movne	r3, #0
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	4013      	ands	r3, r2
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	4b14      	ldr	r3, [pc, #80]	; (8001f08 <LCD_warnings+0x210>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	bf0c      	ite	eq
 8001ebc:	2301      	moveq	r3, #1
 8001ebe:	2300      	movne	r3, #0
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d01a      	beq.n	8001efe <LCD_warnings+0x206>
		LCD_writePixels(spi,HX8357_WHITE,0,0,359,79);
 8001ec8:	234f      	movs	r3, #79	; 0x4f
 8001eca:	9301      	str	r3, [sp, #4]
 8001ecc:	f240 1367 	movw	r3, #359	; 0x167
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001eda:	68f8      	ldr	r0, [r7, #12]
 8001edc:	f7ff f8c4 	bl	8001068 <LCD_writePixels>
		LCD_drawString(spi,20,30 + 80*0,"TADAMHESPEV | UMSM",18,HX8357_BLACK,3);
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	9302      	str	r3, [sp, #8]
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	9301      	str	r3, [sp, #4]
 8001ee8:	2312      	movs	r3, #18
 8001eea:	9300      	str	r3, [sp, #0]
 8001eec:	4b0a      	ldr	r3, [pc, #40]	; (8001f18 <LCD_warnings+0x220>)
 8001eee:	221e      	movs	r2, #30
 8001ef0:	2114      	movs	r1, #20
 8001ef2:	68f8      	ldr	r0, [r7, #12]
 8001ef4:	f7ff f9cc 	bl	8001290 <LCD_drawString>
		*warning = 0;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]
	}
}
 8001efe:	bf00      	nop
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	200000d8 	.word	0x200000d8
 8001f0c:	080063e4 	.word	0x080063e4
 8001f10:	200000dc 	.word	0x200000dc
 8001f14:	080063f0 	.word	0x080063f0
 8001f18:	080063fc 	.word	0x080063fc

08001f1c <LCD_updateBattery>:

void LCD_updateBattery(SPI_HandleTypeDef* spi, int level) {
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b088      	sub	sp, #32
 8001f20:	af04      	add	r7, sp, #16
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
	if (level < 0) level = 0;
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	da01      	bge.n	8001f30 <LCD_updateBattery+0x14>
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	603b      	str	r3, [r7, #0]
	if (level > 100) level = 100;
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	2b64      	cmp	r3, #100	; 0x64
 8001f34:	dd01      	ble.n	8001f3a <LCD_updateBattery+0x1e>
 8001f36:	2364      	movs	r3, #100	; 0x64
 8001f38:	603b      	str	r3, [r7, #0]
	char lev[3];
	itoa(level,lev,10);
 8001f3a:	f107 030c 	add.w	r3, r7, #12
 8001f3e:	220a      	movs	r2, #10
 8001f40:	4619      	mov	r1, r3
 8001f42:	6838      	ldr	r0, [r7, #0]
 8001f44:	f004 f9d1 	bl	80062ea <itoa>

	LCD_fillBattery(spi,380,120,8,level);
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	9300      	str	r3, [sp, #0]
 8001f4c:	2308      	movs	r3, #8
 8001f4e:	2278      	movs	r2, #120	; 0x78
 8001f50:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7ff fd4b 	bl	80019f0 <LCD_fillBattery>
	LCD_drawString(spi,370,50,lev,3,HX8357_BLACK,4);
 8001f5a:	f107 030c 	add.w	r3, r7, #12
 8001f5e:	2204      	movs	r2, #4
 8001f60:	9202      	str	r2, [sp, #8]
 8001f62:	2200      	movs	r2, #0
 8001f64:	9201      	str	r2, [sp, #4]
 8001f66:	2203      	movs	r2, #3
 8001f68:	9200      	str	r2, [sp, #0]
 8001f6a:	2232      	movs	r2, #50	; 0x32
 8001f6c:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f7ff f98d 	bl	8001290 <LCD_drawString>
}
 8001f76:	bf00      	nop
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
	...

08001f80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08c      	sub	sp, #48	; 0x30
 8001f84:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f86:	f000 fd7a 	bl	8002a7e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f8a:	f000 f8df 	bl	800214c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f8e:	f000 fa4f 	bl	8002430 <MX_GPIO_Init>
  MX_RTC_Init();
 8001f92:	f000 f93d 	bl	8002210 <MX_RTC_Init>
  MX_SPI1_Init();
 8001f96:	f000 f963 	bl	8002260 <MX_SPI1_Init>
  MX_TIM15_Init();
 8001f9a:	f000 f99f 	bl	80022dc <MX_TIM15_Init>
  MX_TIM16_Init();
 8001f9e:	f000 f9ef 	bl	8002380 <MX_TIM16_Init>
  MX_USART1_UART_Init();
 8001fa2:	f000 fa15 	bl	80023d0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  	LCD_begin(&hspi1);
 8001fa6:	485b      	ldr	r0, [pc, #364]	; (8002114 <main+0x194>)
 8001fa8:	f7fe fef4 	bl	8000d94 <LCD_begin>
  	//LCD_fillRect(&hspi1, 0, 0, 480, 320, HX8357_WHITE);
  	LCD_writePixels(&hspi1,HX8357_WHITE,0,0,480,320);
 8001fac:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001fb0:	9301      	str	r3, [sp, #4]
 8001fb2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001fb6:	9300      	str	r3, [sp, #0]
 8001fb8:	2300      	movs	r3, #0
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001fc0:	4854      	ldr	r0, [pc, #336]	; (8002114 <main+0x194>)
 8001fc2:	f7ff f851 	bl	8001068 <LCD_writePixels>
    LCD_drawBattery(&hspi1,380,120,8);
 8001fc6:	2308      	movs	r3, #8
 8001fc8:	2278      	movs	r2, #120	; 0x78
 8001fca:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001fce:	4851      	ldr	r0, [pc, #324]	; (8002114 <main+0x194>)
 8001fd0:	f7ff fbbc 	bl	800174c <LCD_drawBattery>
    LCD_drawFrame(&hspi1);
 8001fd4:	484f      	ldr	r0, [pc, #316]	; (8002114 <main+0x194>)
 8001fd6:	f7ff fcd5 	bl	8001984 <LCD_drawFrame>


    char * name = "TADAMHESPEV | UMSM";
 8001fda:	4b4f      	ldr	r3, [pc, #316]	; (8002118 <main+0x198>)
 8001fdc:	61fb      	str	r3, [r7, #28]
    char * speed = "SPEED:";
 8001fde:	4b4f      	ldr	r3, [pc, #316]	; (800211c <main+0x19c>)
 8001fe0:	61bb      	str	r3, [r7, #24]
    char * temp = "TEMP:";
 8001fe2:	4b4f      	ldr	r3, [pc, #316]	; (8002120 <main+0x1a0>)
 8001fe4:	617b      	str	r3, [r7, #20]
    char * power = "POWER:";
 8001fe6:	4b4f      	ldr	r3, [pc, #316]	; (8002124 <main+0x1a4>)
 8001fe8:	613b      	str	r3, [r7, #16]

    char * mph = "mph";
 8001fea:	4b4f      	ldr	r3, [pc, #316]	; (8002128 <main+0x1a8>)
 8001fec:	60fb      	str	r3, [r7, #12]
    char * deg = "C";
 8001fee:	4b4f      	ldr	r3, [pc, #316]	; (800212c <main+0x1ac>)
 8001ff0:	60bb      	str	r3, [r7, #8]
    char * watt = "W";
 8001ff2:	4b4f      	ldr	r3, [pc, #316]	; (8002130 <main+0x1b0>)
 8001ff4:	607b      	str	r3, [r7, #4]
    LCD_drawString(&hspi1,20,30 + 80*0,name,18,HX8357_BLACK,3);
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	9302      	str	r3, [sp, #8]
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	9301      	str	r3, [sp, #4]
 8001ffe:	2312      	movs	r3, #18
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	221e      	movs	r2, #30
 8002006:	2114      	movs	r1, #20
 8002008:	4842      	ldr	r0, [pc, #264]	; (8002114 <main+0x194>)
 800200a:	f7ff f941 	bl	8001290 <LCD_drawString>
    LCD_drawString(&hspi1,5,30 + 80*1,speed,6,HX8357_BLACK,3);
 800200e:	2303      	movs	r3, #3
 8002010:	9302      	str	r3, [sp, #8]
 8002012:	2300      	movs	r3, #0
 8002014:	9301      	str	r3, [sp, #4]
 8002016:	2306      	movs	r3, #6
 8002018:	9300      	str	r3, [sp, #0]
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	226e      	movs	r2, #110	; 0x6e
 800201e:	2105      	movs	r1, #5
 8002020:	483c      	ldr	r0, [pc, #240]	; (8002114 <main+0x194>)
 8002022:	f7ff f935 	bl	8001290 <LCD_drawString>
    LCD_drawString(&hspi1,5,30 + 80*2,temp,5,HX8357_BLACK,3);
 8002026:	2303      	movs	r3, #3
 8002028:	9302      	str	r3, [sp, #8]
 800202a:	2300      	movs	r3, #0
 800202c:	9301      	str	r3, [sp, #4]
 800202e:	2305      	movs	r3, #5
 8002030:	9300      	str	r3, [sp, #0]
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	22be      	movs	r2, #190	; 0xbe
 8002036:	2105      	movs	r1, #5
 8002038:	4836      	ldr	r0, [pc, #216]	; (8002114 <main+0x194>)
 800203a:	f7ff f929 	bl	8001290 <LCD_drawString>
    LCD_drawString(&hspi1,5,30 + 80*3,power,6,HX8357_BLACK,3);
 800203e:	2303      	movs	r3, #3
 8002040:	9302      	str	r3, [sp, #8]
 8002042:	2300      	movs	r3, #0
 8002044:	9301      	str	r3, [sp, #4]
 8002046:	2306      	movs	r3, #6
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8002050:	2105      	movs	r1, #5
 8002052:	4830      	ldr	r0, [pc, #192]	; (8002114 <main+0x194>)
 8002054:	f7ff f91c 	bl	8001290 <LCD_drawString>

    LCD_drawString(&hspi1,280,30 + 80*1,mph,3,HX8357_BLACK,3);
 8002058:	2303      	movs	r3, #3
 800205a:	9302      	str	r3, [sp, #8]
 800205c:	2300      	movs	r3, #0
 800205e:	9301      	str	r3, [sp, #4]
 8002060:	2303      	movs	r3, #3
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	226e      	movs	r2, #110	; 0x6e
 8002068:	f44f 718c 	mov.w	r1, #280	; 0x118
 800206c:	4829      	ldr	r0, [pc, #164]	; (8002114 <main+0x194>)
 800206e:	f7ff f90f 	bl	8001290 <LCD_drawString>
    LCD_drawString(&hspi1,306,30 + 80*2,deg,1,HX8357_BLACK,3);
 8002072:	2303      	movs	r3, #3
 8002074:	9302      	str	r3, [sp, #8]
 8002076:	2300      	movs	r3, #0
 8002078:	9301      	str	r3, [sp, #4]
 800207a:	2301      	movs	r3, #1
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	22be      	movs	r2, #190	; 0xbe
 8002082:	f44f 7199 	mov.w	r1, #306	; 0x132
 8002086:	4823      	ldr	r0, [pc, #140]	; (8002114 <main+0x194>)
 8002088:	f7ff f902 	bl	8001290 <LCD_drawString>
    LCD_drawString(&hspi1,306,30 + 80*3,watt,1,HX8357_BLACK,3);
 800208c:	2303      	movs	r3, #3
 800208e:	9302      	str	r3, [sp, #8]
 8002090:	2300      	movs	r3, #0
 8002092:	9301      	str	r3, [sp, #4]
 8002094:	2301      	movs	r3, #1
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800209e:	f44f 7199 	mov.w	r1, #306	; 0x132
 80020a2:	481c      	ldr	r0, [pc, #112]	; (8002114 <main+0x194>)
 80020a4:	f7ff f8f4 	bl	8001290 <LCD_drawString>
    volt_percent = (voltage*10) - 440;
 80020a8:	4b22      	ldr	r3, [pc, #136]	; (8002134 <main+0x1b4>)
 80020aa:	edd3 7a00 	vldr	s15, [r3]
 80020ae:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80020b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020b6:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002138 <main+0x1b8>
 80020ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80020be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020c2:	ee17 2a90 	vmov	r2, s15
 80020c6:	4b1d      	ldr	r3, [pc, #116]	; (800213c <main+0x1bc>)
 80020c8:	601a      	str	r2, [r3, #0]
    LCD_updateBattery(&hspi1,volt_percent);
 80020ca:	4b1c      	ldr	r3, [pc, #112]	; (800213c <main+0x1bc>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4619      	mov	r1, r3
 80020d0:	4810      	ldr	r0, [pc, #64]	; (8002114 <main+0x194>)
 80020d2:	f7ff ff23 	bl	8001f1c <LCD_updateBattery>
    LCD_drawString(&hspi1,442,50,"%",1,HX8357_BLACK,4);
 80020d6:	2304      	movs	r3, #4
 80020d8:	9302      	str	r3, [sp, #8]
 80020da:	2300      	movs	r3, #0
 80020dc:	9301      	str	r3, [sp, #4]
 80020de:	2301      	movs	r3, #1
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	4b17      	ldr	r3, [pc, #92]	; (8002140 <main+0x1c0>)
 80020e4:	2232      	movs	r2, #50	; 0x32
 80020e6:	f44f 71dd 	mov.w	r1, #442	; 0x1ba
 80020ea:	480a      	ldr	r0, [pc, #40]	; (8002114 <main+0x194>)
 80020ec:	f7ff f8d0 	bl	8001290 <LCD_drawString>

    if (HAL_TIM_Base_Start_IT(&htim15) != HAL_OK) Error_Handler();
 80020f0:	4814      	ldr	r0, [pc, #80]	; (8002144 <main+0x1c4>)
 80020f2:	f003 f889 	bl	8005208 <HAL_TIM_Base_Start_IT>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <main+0x180>
 80020fc:	f000 fa29 	bl	8002552 <Error_Handler>
    if (HAL_TIM_Base_Start_IT(&htim16) != HAL_OK) Error_Handler();
 8002100:	4811      	ldr	r0, [pc, #68]	; (8002148 <main+0x1c8>)
 8002102:	f003 f881 	bl	8005208 <HAL_TIM_Base_Start_IT>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <main+0x190>
 800210c:	f000 fa21 	bl	8002552 <Error_Handler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002110:	e7fe      	b.n	8002110 <main+0x190>
 8002112:	bf00      	nop
 8002114:	20000278 	.word	0x20000278
 8002118:	08006410 	.word	0x08006410
 800211c:	08006424 	.word	0x08006424
 8002120:	0800642c 	.word	0x0800642c
 8002124:	08006434 	.word	0x08006434
 8002128:	0800643c 	.word	0x0800643c
 800212c:	08006440 	.word	0x08006440
 8002130:	08006444 	.word	0x08006444
 8002134:	20000090 	.word	0x20000090
 8002138:	43dc0000 	.word	0x43dc0000
 800213c:	20000274 	.word	0x20000274
 8002140:	08006448 	.word	0x08006448
 8002144:	20000104 	.word	0x20000104
 8002148:	20000150 	.word	0x20000150

0800214c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b096      	sub	sp, #88	; 0x58
 8002150:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002152:	f107 0314 	add.w	r3, r7, #20
 8002156:	2244      	movs	r2, #68	; 0x44
 8002158:	2100      	movs	r1, #0
 800215a:	4618      	mov	r0, r3
 800215c:	f004 f90a 	bl	8006374 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002160:	463b      	mov	r3, r7
 8002162:	2200      	movs	r2, #0
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	605a      	str	r2, [r3, #4]
 8002168:	609a      	str	r2, [r3, #8]
 800216a:	60da      	str	r2, [r3, #12]
 800216c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800216e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002172:	f000 ff7d 	bl	8003070 <HAL_PWREx_ControlVoltageScaling>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800217c:	f000 f9e9 	bl	8002552 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002180:	f000 ff58 	bl	8003034 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002184:	4b21      	ldr	r3, [pc, #132]	; (800220c <SystemClock_Config+0xc0>)
 8002186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800218a:	4a20      	ldr	r2, [pc, #128]	; (800220c <SystemClock_Config+0xc0>)
 800218c:	f023 0318 	bic.w	r3, r3, #24
 8002190:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002194:	2314      	movs	r3, #20
 8002196:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002198:	2301      	movs	r3, #1
 800219a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800219c:	2301      	movs	r3, #1
 800219e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80021a0:	2300      	movs	r3, #0
 80021a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80021a4:	2360      	movs	r3, #96	; 0x60
 80021a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021a8:	2302      	movs	r3, #2
 80021aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80021ac:	2301      	movs	r3, #1
 80021ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80021b0:	2301      	movs	r3, #1
 80021b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80021b4:	2328      	movs	r3, #40	; 0x28
 80021b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80021b8:	2307      	movs	r3, #7
 80021ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80021bc:	2302      	movs	r3, #2
 80021be:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80021c0:	2302      	movs	r3, #2
 80021c2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021c4:	f107 0314 	add.w	r3, r7, #20
 80021c8:	4618      	mov	r0, r3
 80021ca:	f000 ffa7 	bl	800311c <HAL_RCC_OscConfig>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80021d4:	f000 f9bd 	bl	8002552 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021d8:	230f      	movs	r3, #15
 80021da:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021dc:	2303      	movs	r3, #3
 80021de:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021e0:	2300      	movs	r3, #0
 80021e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80021e4:	2300      	movs	r3, #0
 80021e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021e8:	2300      	movs	r3, #0
 80021ea:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80021ec:	463b      	mov	r3, r7
 80021ee:	2104      	movs	r1, #4
 80021f0:	4618      	mov	r0, r3
 80021f2:	f001 fba7 	bl	8003944 <HAL_RCC_ClockConfig>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80021fc:	f000 f9a9 	bl	8002552 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002200:	f001 ffec 	bl	80041dc <HAL_RCCEx_EnableMSIPLLMode>
}
 8002204:	bf00      	nop
 8002206:	3758      	adds	r7, #88	; 0x58
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40021000 	.word	0x40021000

08002210 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002214:	4b10      	ldr	r3, [pc, #64]	; (8002258 <MX_RTC_Init+0x48>)
 8002216:	4a11      	ldr	r2, [pc, #68]	; (800225c <MX_RTC_Init+0x4c>)
 8002218:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800221a:	4b0f      	ldr	r3, [pc, #60]	; (8002258 <MX_RTC_Init+0x48>)
 800221c:	2200      	movs	r2, #0
 800221e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002220:	4b0d      	ldr	r3, [pc, #52]	; (8002258 <MX_RTC_Init+0x48>)
 8002222:	227f      	movs	r2, #127	; 0x7f
 8002224:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002226:	4b0c      	ldr	r3, [pc, #48]	; (8002258 <MX_RTC_Init+0x48>)
 8002228:	22ff      	movs	r2, #255	; 0xff
 800222a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800222c:	4b0a      	ldr	r3, [pc, #40]	; (8002258 <MX_RTC_Init+0x48>)
 800222e:	2200      	movs	r2, #0
 8002230:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002232:	4b09      	ldr	r3, [pc, #36]	; (8002258 <MX_RTC_Init+0x48>)
 8002234:	2200      	movs	r2, #0
 8002236:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002238:	4b07      	ldr	r3, [pc, #28]	; (8002258 <MX_RTC_Init+0x48>)
 800223a:	2200      	movs	r2, #0
 800223c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800223e:	4b06      	ldr	r3, [pc, #24]	; (8002258 <MX_RTC_Init+0x48>)
 8002240:	2200      	movs	r2, #0
 8002242:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002244:	4804      	ldr	r0, [pc, #16]	; (8002258 <MX_RTC_Init+0x48>)
 8002246:	f002 f8cb 	bl	80043e0 <HAL_RTC_Init>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8002250:	f000 f97f 	bl	8002552 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002254:	bf00      	nop
 8002256:	bd80      	pop	{r7, pc}
 8002258:	200000e0 	.word	0x200000e0
 800225c:	40002800 	.word	0x40002800

08002260 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002264:	4b1b      	ldr	r3, [pc, #108]	; (80022d4 <MX_SPI1_Init+0x74>)
 8002266:	4a1c      	ldr	r2, [pc, #112]	; (80022d8 <MX_SPI1_Init+0x78>)
 8002268:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800226a:	4b1a      	ldr	r3, [pc, #104]	; (80022d4 <MX_SPI1_Init+0x74>)
 800226c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002270:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002272:	4b18      	ldr	r3, [pc, #96]	; (80022d4 <MX_SPI1_Init+0x74>)
 8002274:	2200      	movs	r2, #0
 8002276:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002278:	4b16      	ldr	r3, [pc, #88]	; (80022d4 <MX_SPI1_Init+0x74>)
 800227a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800227e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002280:	4b14      	ldr	r3, [pc, #80]	; (80022d4 <MX_SPI1_Init+0x74>)
 8002282:	2200      	movs	r2, #0
 8002284:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002286:	4b13      	ldr	r3, [pc, #76]	; (80022d4 <MX_SPI1_Init+0x74>)
 8002288:	2200      	movs	r2, #0
 800228a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800228c:	4b11      	ldr	r3, [pc, #68]	; (80022d4 <MX_SPI1_Init+0x74>)
 800228e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002292:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002294:	4b0f      	ldr	r3, [pc, #60]	; (80022d4 <MX_SPI1_Init+0x74>)
 8002296:	2208      	movs	r2, #8
 8002298:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800229a:	4b0e      	ldr	r3, [pc, #56]	; (80022d4 <MX_SPI1_Init+0x74>)
 800229c:	2200      	movs	r2, #0
 800229e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80022a0:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <MX_SPI1_Init+0x74>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022a6:	4b0b      	ldr	r3, [pc, #44]	; (80022d4 <MX_SPI1_Init+0x74>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80022ac:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <MX_SPI1_Init+0x74>)
 80022ae:	2207      	movs	r2, #7
 80022b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80022b2:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <MX_SPI1_Init+0x74>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80022b8:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <MX_SPI1_Init+0x74>)
 80022ba:	2208      	movs	r2, #8
 80022bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80022be:	4805      	ldr	r0, [pc, #20]	; (80022d4 <MX_SPI1_Init+0x74>)
 80022c0:	f002 f9ac 	bl	800461c <HAL_SPI_Init>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80022ca:	f000 f942 	bl	8002552 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20000278 	.word	0x20000278
 80022d8:	40013000 	.word	0x40013000

080022dc <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b088      	sub	sp, #32
 80022e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022e2:	f107 0310 	add.w	r3, r7, #16
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	605a      	str	r2, [r3, #4]
 80022ec:	609a      	str	r2, [r3, #8]
 80022ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022f0:	1d3b      	adds	r3, r7, #4
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	605a      	str	r2, [r3, #4]
 80022f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80022fa:	4b1f      	ldr	r3, [pc, #124]	; (8002378 <MX_TIM15_Init+0x9c>)
 80022fc:	4a1f      	ldr	r2, [pc, #124]	; (800237c <MX_TIM15_Init+0xa0>)
 80022fe:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 7999;
 8002300:	4b1d      	ldr	r3, [pc, #116]	; (8002378 <MX_TIM15_Init+0x9c>)
 8002302:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8002306:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002308:	4b1b      	ldr	r3, [pc, #108]	; (8002378 <MX_TIM15_Init+0x9c>)
 800230a:	2200      	movs	r2, #0
 800230c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 4999;
 800230e:	4b1a      	ldr	r3, [pc, #104]	; (8002378 <MX_TIM15_Init+0x9c>)
 8002310:	f241 3287 	movw	r2, #4999	; 0x1387
 8002314:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002316:	4b18      	ldr	r3, [pc, #96]	; (8002378 <MX_TIM15_Init+0x9c>)
 8002318:	2200      	movs	r2, #0
 800231a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800231c:	4b16      	ldr	r3, [pc, #88]	; (8002378 <MX_TIM15_Init+0x9c>)
 800231e:	2200      	movs	r2, #0
 8002320:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002322:	4b15      	ldr	r3, [pc, #84]	; (8002378 <MX_TIM15_Init+0x9c>)
 8002324:	2200      	movs	r2, #0
 8002326:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002328:	4813      	ldr	r0, [pc, #76]	; (8002378 <MX_TIM15_Init+0x9c>)
 800232a:	f002 ff15 	bl	8005158 <HAL_TIM_Base_Init>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8002334:	f000 f90d 	bl	8002552 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002338:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800233c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800233e:	f107 0310 	add.w	r3, r7, #16
 8002342:	4619      	mov	r1, r3
 8002344:	480c      	ldr	r0, [pc, #48]	; (8002378 <MX_TIM15_Init+0x9c>)
 8002346:	f003 f8b5 	bl	80054b4 <HAL_TIM_ConfigClockSource>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8002350:	f000 f8ff 	bl	8002552 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002354:	2300      	movs	r3, #0
 8002356:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002358:	2300      	movs	r3, #0
 800235a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800235c:	1d3b      	adds	r3, r7, #4
 800235e:	4619      	mov	r1, r3
 8002360:	4805      	ldr	r0, [pc, #20]	; (8002378 <MX_TIM15_Init+0x9c>)
 8002362:	f003 fa97 	bl	8005894 <HAL_TIMEx_MasterConfigSynchronization>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 800236c:	f000 f8f1 	bl	8002552 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8002370:	bf00      	nop
 8002372:	3720      	adds	r7, #32
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	20000104 	.word	0x20000104
 800237c:	40014000 	.word	0x40014000

08002380 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002384:	4b10      	ldr	r3, [pc, #64]	; (80023c8 <MX_TIM16_Init+0x48>)
 8002386:	4a11      	ldr	r2, [pc, #68]	; (80023cc <MX_TIM16_Init+0x4c>)
 8002388:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 39999;
 800238a:	4b0f      	ldr	r3, [pc, #60]	; (80023c8 <MX_TIM16_Init+0x48>)
 800238c:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8002390:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002392:	4b0d      	ldr	r3, [pc, #52]	; (80023c8 <MX_TIM16_Init+0x48>)
 8002394:	2200      	movs	r2, #0
 8002396:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 29999;
 8002398:	4b0b      	ldr	r3, [pc, #44]	; (80023c8 <MX_TIM16_Init+0x48>)
 800239a:	f247 522f 	movw	r2, #29999	; 0x752f
 800239e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023a0:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <MX_TIM16_Init+0x48>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80023a6:	4b08      	ldr	r3, [pc, #32]	; (80023c8 <MX_TIM16_Init+0x48>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ac:	4b06      	ldr	r3, [pc, #24]	; (80023c8 <MX_TIM16_Init+0x48>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80023b2:	4805      	ldr	r0, [pc, #20]	; (80023c8 <MX_TIM16_Init+0x48>)
 80023b4:	f002 fed0 	bl	8005158 <HAL_TIM_Base_Init>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80023be:	f000 f8c8 	bl	8002552 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	20000150 	.word	0x20000150
 80023cc:	40014400 	.word	0x40014400

080023d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023d4:	4b14      	ldr	r3, [pc, #80]	; (8002428 <MX_USART1_UART_Init+0x58>)
 80023d6:	4a15      	ldr	r2, [pc, #84]	; (800242c <MX_USART1_UART_Init+0x5c>)
 80023d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80023da:	4b13      	ldr	r3, [pc, #76]	; (8002428 <MX_USART1_UART_Init+0x58>)
 80023dc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80023e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023e2:	4b11      	ldr	r3, [pc, #68]	; (8002428 <MX_USART1_UART_Init+0x58>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023e8:	4b0f      	ldr	r3, [pc, #60]	; (8002428 <MX_USART1_UART_Init+0x58>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023ee:	4b0e      	ldr	r3, [pc, #56]	; (8002428 <MX_USART1_UART_Init+0x58>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023f4:	4b0c      	ldr	r3, [pc, #48]	; (8002428 <MX_USART1_UART_Init+0x58>)
 80023f6:	220c      	movs	r2, #12
 80023f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023fa:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <MX_USART1_UART_Init+0x58>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002400:	4b09      	ldr	r3, [pc, #36]	; (8002428 <MX_USART1_UART_Init+0x58>)
 8002402:	2200      	movs	r2, #0
 8002404:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002406:	4b08      	ldr	r3, [pc, #32]	; (8002428 <MX_USART1_UART_Init+0x58>)
 8002408:	2200      	movs	r2, #0
 800240a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800240c:	4b06      	ldr	r3, [pc, #24]	; (8002428 <MX_USART1_UART_Init+0x58>)
 800240e:	2200      	movs	r2, #0
 8002410:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002412:	4805      	ldr	r0, [pc, #20]	; (8002428 <MX_USART1_UART_Init+0x58>)
 8002414:	f003 fac2 	bl	800599c <HAL_UART_Init>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800241e:	f000 f898 	bl	8002552 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002422:	bf00      	nop
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	2000019c 	.word	0x2000019c
 800242c:	40013800 	.word	0x40013800

08002430 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b088      	sub	sp, #32
 8002434:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002436:	f107 030c 	add.w	r3, r7, #12
 800243a:	2200      	movs	r2, #0
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	605a      	str	r2, [r3, #4]
 8002440:	609a      	str	r2, [r3, #8]
 8002442:	60da      	str	r2, [r3, #12]
 8002444:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002446:	4b39      	ldr	r3, [pc, #228]	; (800252c <MX_GPIO_Init+0xfc>)
 8002448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800244a:	4a38      	ldr	r2, [pc, #224]	; (800252c <MX_GPIO_Init+0xfc>)
 800244c:	f043 0304 	orr.w	r3, r3, #4
 8002450:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002452:	4b36      	ldr	r3, [pc, #216]	; (800252c <MX_GPIO_Init+0xfc>)
 8002454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002456:	f003 0304 	and.w	r3, r3, #4
 800245a:	60bb      	str	r3, [r7, #8]
 800245c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800245e:	4b33      	ldr	r3, [pc, #204]	; (800252c <MX_GPIO_Init+0xfc>)
 8002460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002462:	4a32      	ldr	r2, [pc, #200]	; (800252c <MX_GPIO_Init+0xfc>)
 8002464:	f043 0301 	orr.w	r3, r3, #1
 8002468:	64d3      	str	r3, [r2, #76]	; 0x4c
 800246a:	4b30      	ldr	r3, [pc, #192]	; (800252c <MX_GPIO_Init+0xfc>)
 800246c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	607b      	str	r3, [r7, #4]
 8002474:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002476:	4b2d      	ldr	r3, [pc, #180]	; (800252c <MX_GPIO_Init+0xfc>)
 8002478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800247a:	4a2c      	ldr	r2, [pc, #176]	; (800252c <MX_GPIO_Init+0xfc>)
 800247c:	f043 0302 	orr.w	r3, r3, #2
 8002480:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002482:	4b2a      	ldr	r3, [pc, #168]	; (800252c <MX_GPIO_Init+0xfc>)
 8002484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	603b      	str	r3, [r7, #0]
 800248c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_RESET);
 800248e:	2200      	movs	r2, #0
 8002490:	210a      	movs	r1, #10
 8002492:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002496:	f000 fd9b 	bl	8002fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 800249a:	2200      	movs	r2, #0
 800249c:	2170      	movs	r1, #112	; 0x70
 800249e:	4824      	ldr	r0, [pc, #144]	; (8002530 <MX_GPIO_Init+0x100>)
 80024a0:	f000 fd96 	bl	8002fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80024a4:	230a      	movs	r3, #10
 80024a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024a8:	2301      	movs	r3, #1
 80024aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ac:	2300      	movs	r3, #0
 80024ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024b0:	2303      	movs	r3, #3
 80024b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024b4:	f107 030c 	add.w	r3, r7, #12
 80024b8:	4619      	mov	r1, r3
 80024ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024be:	f000 fc1d 	bl	8002cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 80024c2:	2304      	movs	r3, #4
 80024c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c6:	2302      	movs	r3, #2
 80024c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ca:	2300      	movs	r3, #0
 80024cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ce:	2303      	movs	r3, #3
 80024d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024d2:	2307      	movs	r3, #7
 80024d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80024d6:	f107 030c 	add.w	r3, r7, #12
 80024da:	4619      	mov	r1, r3
 80024dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024e0:	f000 fc0c 	bl	8002cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 80024e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ea:	2302      	movs	r3, #2
 80024ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ee:	2300      	movs	r3, #0
 80024f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f2:	2303      	movs	r3, #3
 80024f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80024f6:	2303      	movs	r3, #3
 80024f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80024fa:	f107 030c 	add.w	r3, r7, #12
 80024fe:	4619      	mov	r1, r3
 8002500:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002504:	f000 fbfa 	bl	8002cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002508:	2370      	movs	r3, #112	; 0x70
 800250a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800250c:	2301      	movs	r3, #1
 800250e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002510:	2300      	movs	r3, #0
 8002512:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002514:	2303      	movs	r3, #3
 8002516:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002518:	f107 030c 	add.w	r3, r7, #12
 800251c:	4619      	mov	r1, r3
 800251e:	4804      	ldr	r0, [pc, #16]	; (8002530 <MX_GPIO_Init+0x100>)
 8002520:	f000 fbec 	bl	8002cfc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002524:	bf00      	nop
 8002526:	3720      	adds	r7, #32
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40021000 	.word	0x40021000
 8002530:	48000400 	.word	0x48000400

08002534 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002544:	d101      	bne.n	800254a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002546:	f000 fab3 	bl	8002ab0 <HAL_IncTick>
////	  LCD_warnings(&hspi1, (buf[2] << 4) | buf[3],volt_percent,&Twarning,&Vwarning);
//	  LCD_warnings(&hspi1, (buf[2] << 4) | buf[3],volt_percent,&warning);
//	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_3);
//  }
  /* USER CODE END Callback 1 */
}
 800254a:	bf00      	nop
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002552:	b480      	push	{r7}
 8002554:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002556:	b672      	cpsid	i
}
 8002558:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800255a:	e7fe      	b.n	800255a <Error_Handler+0x8>

0800255c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002562:	4b0f      	ldr	r3, [pc, #60]	; (80025a0 <HAL_MspInit+0x44>)
 8002564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002566:	4a0e      	ldr	r2, [pc, #56]	; (80025a0 <HAL_MspInit+0x44>)
 8002568:	f043 0301 	orr.w	r3, r3, #1
 800256c:	6613      	str	r3, [r2, #96]	; 0x60
 800256e:	4b0c      	ldr	r3, [pc, #48]	; (80025a0 <HAL_MspInit+0x44>)
 8002570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	607b      	str	r3, [r7, #4]
 8002578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800257a:	4b09      	ldr	r3, [pc, #36]	; (80025a0 <HAL_MspInit+0x44>)
 800257c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800257e:	4a08      	ldr	r2, [pc, #32]	; (80025a0 <HAL_MspInit+0x44>)
 8002580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002584:	6593      	str	r3, [r2, #88]	; 0x58
 8002586:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <HAL_MspInit+0x44>)
 8002588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258e:	603b      	str	r3, [r7, #0]
 8002590:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8002592:	2004      	movs	r0, #4
 8002594:	f000 fb7d 	bl	8002c92 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002598:	bf00      	nop
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40021000 	.word	0x40021000

080025a4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b098      	sub	sp, #96	; 0x60
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025ac:	f107 030c 	add.w	r3, r7, #12
 80025b0:	2254      	movs	r2, #84	; 0x54
 80025b2:	2100      	movs	r1, #0
 80025b4:	4618      	mov	r0, r3
 80025b6:	f003 fedd 	bl	8006374 <memset>
  if(hrtc->Instance==RTC)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a0f      	ldr	r2, [pc, #60]	; (80025fc <HAL_RTC_MspInit+0x58>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d117      	bne.n	80025f4 <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80025c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025c8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80025ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025ce:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025d0:	f107 030c 	add.w	r3, r7, #12
 80025d4:	4618      	mov	r0, r3
 80025d6:	f001 fc0b 	bl	8003df0 <HAL_RCCEx_PeriphCLKConfig>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80025e0:	f7ff ffb7 	bl	8002552 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80025e4:	4b06      	ldr	r3, [pc, #24]	; (8002600 <HAL_RTC_MspInit+0x5c>)
 80025e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ea:	4a05      	ldr	r2, [pc, #20]	; (8002600 <HAL_RTC_MspInit+0x5c>)
 80025ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80025f4:	bf00      	nop
 80025f6:	3760      	adds	r7, #96	; 0x60
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40002800 	.word	0x40002800
 8002600:	40021000 	.word	0x40021000

08002604 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b08a      	sub	sp, #40	; 0x28
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800260c:	f107 0314 	add.w	r3, r7, #20
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	605a      	str	r2, [r3, #4]
 8002616:	609a      	str	r2, [r3, #8]
 8002618:	60da      	str	r2, [r3, #12]
 800261a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a17      	ldr	r2, [pc, #92]	; (8002680 <HAL_SPI_MspInit+0x7c>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d128      	bne.n	8002678 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002626:	4b17      	ldr	r3, [pc, #92]	; (8002684 <HAL_SPI_MspInit+0x80>)
 8002628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800262a:	4a16      	ldr	r2, [pc, #88]	; (8002684 <HAL_SPI_MspInit+0x80>)
 800262c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002630:	6613      	str	r3, [r2, #96]	; 0x60
 8002632:	4b14      	ldr	r3, [pc, #80]	; (8002684 <HAL_SPI_MspInit+0x80>)
 8002634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002636:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800263a:	613b      	str	r3, [r7, #16]
 800263c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800263e:	4b11      	ldr	r3, [pc, #68]	; (8002684 <HAL_SPI_MspInit+0x80>)
 8002640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002642:	4a10      	ldr	r2, [pc, #64]	; (8002684 <HAL_SPI_MspInit+0x80>)
 8002644:	f043 0301 	orr.w	r3, r3, #1
 8002648:	64d3      	str	r3, [r2, #76]	; 0x4c
 800264a:	4b0e      	ldr	r3, [pc, #56]	; (8002684 <HAL_SPI_MspInit+0x80>)
 800264c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002656:	23e0      	movs	r3, #224	; 0xe0
 8002658:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265a:	2302      	movs	r3, #2
 800265c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265e:	2300      	movs	r3, #0
 8002660:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002662:	2303      	movs	r3, #3
 8002664:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002666:	2305      	movs	r3, #5
 8002668:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266a:	f107 0314 	add.w	r3, r7, #20
 800266e:	4619      	mov	r1, r3
 8002670:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002674:	f000 fb42 	bl	8002cfc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002678:	bf00      	nop
 800267a:	3728      	adds	r7, #40	; 0x28
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40013000 	.word	0x40013000
 8002684:	40021000 	.word	0x40021000

08002688 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a1a      	ldr	r2, [pc, #104]	; (8002700 <HAL_TIM_Base_MspInit+0x78>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d114      	bne.n	80026c4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 800269a:	4b1a      	ldr	r3, [pc, #104]	; (8002704 <HAL_TIM_Base_MspInit+0x7c>)
 800269c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800269e:	4a19      	ldr	r2, [pc, #100]	; (8002704 <HAL_TIM_Base_MspInit+0x7c>)
 80026a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026a4:	6613      	str	r3, [r2, #96]	; 0x60
 80026a6:	4b17      	ldr	r3, [pc, #92]	; (8002704 <HAL_TIM_Base_MspInit+0x7c>)
 80026a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80026b2:	2200      	movs	r2, #0
 80026b4:	2100      	movs	r1, #0
 80026b6:	2018      	movs	r0, #24
 80026b8:	f000 faf6 	bl	8002ca8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80026bc:	2018      	movs	r0, #24
 80026be:	f000 fb0f 	bl	8002ce0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80026c2:	e018      	b.n	80026f6 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM16)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a0f      	ldr	r2, [pc, #60]	; (8002708 <HAL_TIM_Base_MspInit+0x80>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d113      	bne.n	80026f6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80026ce:	4b0d      	ldr	r3, [pc, #52]	; (8002704 <HAL_TIM_Base_MspInit+0x7c>)
 80026d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026d2:	4a0c      	ldr	r2, [pc, #48]	; (8002704 <HAL_TIM_Base_MspInit+0x7c>)
 80026d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026d8:	6613      	str	r3, [r2, #96]	; 0x60
 80026da:	4b0a      	ldr	r3, [pc, #40]	; (8002704 <HAL_TIM_Base_MspInit+0x7c>)
 80026dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e2:	60bb      	str	r3, [r7, #8]
 80026e4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80026e6:	2200      	movs	r2, #0
 80026e8:	2100      	movs	r1, #0
 80026ea:	2019      	movs	r0, #25
 80026ec:	f000 fadc 	bl	8002ca8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80026f0:	2019      	movs	r0, #25
 80026f2:	f000 faf5 	bl	8002ce0 <HAL_NVIC_EnableIRQ>
}
 80026f6:	bf00      	nop
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40014000 	.word	0x40014000
 8002704:	40021000 	.word	0x40021000
 8002708:	40014400 	.word	0x40014400

0800270c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b09e      	sub	sp, #120	; 0x78
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002714:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	605a      	str	r2, [r3, #4]
 800271e:	609a      	str	r2, [r3, #8]
 8002720:	60da      	str	r2, [r3, #12]
 8002722:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002724:	f107 0310 	add.w	r3, r7, #16
 8002728:	2254      	movs	r2, #84	; 0x54
 800272a:	2100      	movs	r1, #0
 800272c:	4618      	mov	r0, r3
 800272e:	f003 fe21 	bl	8006374 <memset>
  if(huart->Instance==USART1)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a1f      	ldr	r2, [pc, #124]	; (80027b4 <HAL_UART_MspInit+0xa8>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d137      	bne.n	80027ac <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800273c:	2301      	movs	r3, #1
 800273e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002740:	2300      	movs	r3, #0
 8002742:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002744:	f107 0310 	add.w	r3, r7, #16
 8002748:	4618      	mov	r0, r3
 800274a:	f001 fb51 	bl	8003df0 <HAL_RCCEx_PeriphCLKConfig>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002754:	f7ff fefd 	bl	8002552 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002758:	4b17      	ldr	r3, [pc, #92]	; (80027b8 <HAL_UART_MspInit+0xac>)
 800275a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800275c:	4a16      	ldr	r2, [pc, #88]	; (80027b8 <HAL_UART_MspInit+0xac>)
 800275e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002762:	6613      	str	r3, [r2, #96]	; 0x60
 8002764:	4b14      	ldr	r3, [pc, #80]	; (80027b8 <HAL_UART_MspInit+0xac>)
 8002766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002768:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002770:	4b11      	ldr	r3, [pc, #68]	; (80027b8 <HAL_UART_MspInit+0xac>)
 8002772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002774:	4a10      	ldr	r2, [pc, #64]	; (80027b8 <HAL_UART_MspInit+0xac>)
 8002776:	f043 0301 	orr.w	r3, r3, #1
 800277a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800277c:	4b0e      	ldr	r3, [pc, #56]	; (80027b8 <HAL_UART_MspInit+0xac>)
 800277e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002780:	f003 0301 	and.w	r3, r3, #1
 8002784:	60bb      	str	r3, [r7, #8]
 8002786:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002788:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800278c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800278e:	2302      	movs	r3, #2
 8002790:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002792:	2300      	movs	r3, #0
 8002794:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002796:	2303      	movs	r3, #3
 8002798:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800279a:	2307      	movs	r3, #7
 800279c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800279e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80027a2:	4619      	mov	r1, r3
 80027a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027a8:	f000 faa8 	bl	8002cfc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80027ac:	bf00      	nop
 80027ae:	3778      	adds	r7, #120	; 0x78
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40013800 	.word	0x40013800
 80027b8:	40021000 	.word	0x40021000

080027bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b08e      	sub	sp, #56	; 0x38
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80027c4:	2300      	movs	r3, #0
 80027c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80027ca:	4b34      	ldr	r3, [pc, #208]	; (800289c <HAL_InitTick+0xe0>)
 80027cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ce:	4a33      	ldr	r2, [pc, #204]	; (800289c <HAL_InitTick+0xe0>)
 80027d0:	f043 0301 	orr.w	r3, r3, #1
 80027d4:	6593      	str	r3, [r2, #88]	; 0x58
 80027d6:	4b31      	ldr	r3, [pc, #196]	; (800289c <HAL_InitTick+0xe0>)
 80027d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80027e2:	f107 0210 	add.w	r2, r7, #16
 80027e6:	f107 0314 	add.w	r3, r7, #20
 80027ea:	4611      	mov	r1, r2
 80027ec:	4618      	mov	r0, r3
 80027ee:	f001 fa6d 	bl	8003ccc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80027f2:	6a3b      	ldr	r3, [r7, #32]
 80027f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80027f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d103      	bne.n	8002804 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80027fc:	f001 fa3a 	bl	8003c74 <HAL_RCC_GetPCLK1Freq>
 8002800:	6378      	str	r0, [r7, #52]	; 0x34
 8002802:	e004      	b.n	800280e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002804:	f001 fa36 	bl	8003c74 <HAL_RCC_GetPCLK1Freq>
 8002808:	4603      	mov	r3, r0
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800280e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002810:	4a23      	ldr	r2, [pc, #140]	; (80028a0 <HAL_InitTick+0xe4>)
 8002812:	fba2 2303 	umull	r2, r3, r2, r3
 8002816:	0c9b      	lsrs	r3, r3, #18
 8002818:	3b01      	subs	r3, #1
 800281a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800281c:	4b21      	ldr	r3, [pc, #132]	; (80028a4 <HAL_InitTick+0xe8>)
 800281e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002822:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8002824:	4b1f      	ldr	r3, [pc, #124]	; (80028a4 <HAL_InitTick+0xe8>)
 8002826:	f240 32e7 	movw	r2, #999	; 0x3e7
 800282a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800282c:	4a1d      	ldr	r2, [pc, #116]	; (80028a4 <HAL_InitTick+0xe8>)
 800282e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002830:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8002832:	4b1c      	ldr	r3, [pc, #112]	; (80028a4 <HAL_InitTick+0xe8>)
 8002834:	2200      	movs	r2, #0
 8002836:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002838:	4b1a      	ldr	r3, [pc, #104]	; (80028a4 <HAL_InitTick+0xe8>)
 800283a:	2200      	movs	r2, #0
 800283c:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800283e:	4b19      	ldr	r3, [pc, #100]	; (80028a4 <HAL_InitTick+0xe8>)
 8002840:	2200      	movs	r2, #0
 8002842:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8002844:	4817      	ldr	r0, [pc, #92]	; (80028a4 <HAL_InitTick+0xe8>)
 8002846:	f002 fc87 	bl	8005158 <HAL_TIM_Base_Init>
 800284a:	4603      	mov	r3, r0
 800284c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002850:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002854:	2b00      	cmp	r3, #0
 8002856:	d11b      	bne.n	8002890 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8002858:	4812      	ldr	r0, [pc, #72]	; (80028a4 <HAL_InitTick+0xe8>)
 800285a:	f002 fcd5 	bl	8005208 <HAL_TIM_Base_Start_IT>
 800285e:	4603      	mov	r3, r0
 8002860:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002864:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002868:	2b00      	cmp	r3, #0
 800286a:	d111      	bne.n	8002890 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800286c:	201c      	movs	r0, #28
 800286e:	f000 fa37 	bl	8002ce0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b0f      	cmp	r3, #15
 8002876:	d808      	bhi.n	800288a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8002878:	2200      	movs	r2, #0
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	201c      	movs	r0, #28
 800287e:	f000 fa13 	bl	8002ca8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002882:	4a09      	ldr	r2, [pc, #36]	; (80028a8 <HAL_InitTick+0xec>)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6013      	str	r3, [r2, #0]
 8002888:	e002      	b.n	8002890 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002890:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002894:	4618      	mov	r0, r3
 8002896:	3738      	adds	r7, #56	; 0x38
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40021000 	.word	0x40021000
 80028a0:	431bde83 	.word	0x431bde83
 80028a4:	20000224 	.word	0x20000224
 80028a8:	20000098 	.word	0x20000098

080028ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028b0:	e7fe      	b.n	80028b0 <NMI_Handler+0x4>

080028b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028b2:	b480      	push	{r7}
 80028b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028b6:	e7fe      	b.n	80028b6 <HardFault_Handler+0x4>

080028b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028bc:	e7fe      	b.n	80028bc <MemManage_Handler+0x4>

080028be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028be:	b480      	push	{r7}
 80028c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028c2:	e7fe      	b.n	80028c2 <BusFault_Handler+0x4>

080028c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028c8:	e7fe      	b.n	80028c8 <UsageFault_Handler+0x4>

080028ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028ca:	b480      	push	{r7}
 80028cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028ce:	bf00      	nop
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028dc:	bf00      	nop
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028e6:	b480      	push	{r7}
 80028e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028ea:	bf00      	nop
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028f8:	bf00      	nop
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
	...

08002904 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8002908:	480b      	ldr	r0, [pc, #44]	; (8002938 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 800290a:	f002 fcd1 	bl	80052b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */
  buf[3]+=1;
 800290e:	4b0b      	ldr	r3, [pc, #44]	; (800293c <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	3301      	adds	r3, #1
 8002914:	4a09      	ldr	r2, [pc, #36]	; (800293c <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8002916:	60d3      	str	r3, [r2, #12]
  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_1);
 8002918:	2102      	movs	r1, #2
 800291a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800291e:	f000 fb6f 	bl	8003000 <HAL_GPIO_TogglePin>
  LCD_updateVals(&hspi1,buf);
 8002922:	4906      	ldr	r1, [pc, #24]	; (800293c <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8002924:	4806      	ldr	r0, [pc, #24]	; (8002940 <TIM1_BRK_TIM15_IRQHandler+0x3c>)
 8002926:	f7ff f97b 	bl	8001c20 <LCD_updateVals>
  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_1);
 800292a:	2102      	movs	r1, #2
 800292c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002930:	f000 fb66 	bl	8003000 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002934:	bf00      	nop
 8002936:	bd80      	pop	{r7, pc}
 8002938:	20000104 	.word	0x20000104
 800293c:	20000068 	.word	0x20000068
 8002940:	20000278 	.word	0x20000278

08002944 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002948:	4823      	ldr	r0, [pc, #140]	; (80029d8 <TIM1_UP_TIM16_IRQHandler+0x94>)
 800294a:	f002 fcb1 	bl	80052b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
  voltage += 0.5;
 800294e:	4b23      	ldr	r3, [pc, #140]	; (80029dc <TIM1_UP_TIM16_IRQHandler+0x98>)
 8002950:	edd3 7a00 	vldr	s15, [r3]
 8002954:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002958:	ee77 7a87 	vadd.f32	s15, s15, s14
 800295c:	4b1f      	ldr	r3, [pc, #124]	; (80029dc <TIM1_UP_TIM16_IRQHandler+0x98>)
 800295e:	edc3 7a00 	vstr	s15, [r3]
  volt_percent = (int)(voltage*10 - 440);
 8002962:	4b1e      	ldr	r3, [pc, #120]	; (80029dc <TIM1_UP_TIM16_IRQHandler+0x98>)
 8002964:	edd3 7a00 	vldr	s15, [r3]
 8002968:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800296c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002970:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80029e0 <TIM1_UP_TIM16_IRQHandler+0x9c>
 8002974:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002978:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800297c:	ee17 2a90 	vmov	r2, s15
 8002980:	4b18      	ldr	r3, [pc, #96]	; (80029e4 <TIM1_UP_TIM16_IRQHandler+0xa0>)
 8002982:	601a      	str	r2, [r3, #0]
  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_3);
 8002984:	2108      	movs	r1, #8
 8002986:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800298a:	f000 fb39 	bl	8003000 <HAL_GPIO_TogglePin>
  LCD_updateBattery(&hspi1,volt_percent);
 800298e:	4b15      	ldr	r3, [pc, #84]	; (80029e4 <TIM1_UP_TIM16_IRQHandler+0xa0>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4619      	mov	r1, r3
 8002994:	4814      	ldr	r0, [pc, #80]	; (80029e8 <TIM1_UP_TIM16_IRQHandler+0xa4>)
 8002996:	f7ff fac1 	bl	8001f1c <LCD_updateBattery>
  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_3);
 800299a:	2108      	movs	r1, #8
 800299c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029a0:	f000 fb2e 	bl	8003000 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_3);
 80029a4:	2108      	movs	r1, #8
 80029a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029aa:	f000 fb29 	bl	8003000 <HAL_GPIO_TogglePin>
//	  LCD_warnings(&hspi1, (buf[2] << 4) | buf[3],volt_percent,&Twarning,&Vwarning);
  LCD_warnings(&hspi1, (buf[2] << 4) | buf[3],volt_percent,&warning);
 80029ae:	4b0f      	ldr	r3, [pc, #60]	; (80029ec <TIM1_UP_TIM16_IRQHandler+0xa8>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	011a      	lsls	r2, r3, #4
 80029b4:	4b0d      	ldr	r3, [pc, #52]	; (80029ec <TIM1_UP_TIM16_IRQHandler+0xa8>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	ea42 0103 	orr.w	r1, r2, r3
 80029bc:	4b09      	ldr	r3, [pc, #36]	; (80029e4 <TIM1_UP_TIM16_IRQHandler+0xa0>)
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	4b0b      	ldr	r3, [pc, #44]	; (80029f0 <TIM1_UP_TIM16_IRQHandler+0xac>)
 80029c2:	4809      	ldr	r0, [pc, #36]	; (80029e8 <TIM1_UP_TIM16_IRQHandler+0xa4>)
 80029c4:	f7ff f998 	bl	8001cf8 <LCD_warnings>
  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_3);
 80029c8:	2108      	movs	r1, #8
 80029ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029ce:	f000 fb17 	bl	8003000 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80029d2:	bf00      	nop
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	20000150 	.word	0x20000150
 80029dc:	20000090 	.word	0x20000090
 80029e0:	43dc0000 	.word	0x43dc0000
 80029e4:	20000274 	.word	0x20000274
 80029e8:	20000278 	.word	0x20000278
 80029ec:	20000068 	.word	0x20000068
 80029f0:	20000270 	.word	0x20000270

080029f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80029f8:	4802      	ldr	r0, [pc, #8]	; (8002a04 <TIM2_IRQHandler+0x10>)
 80029fa:	f002 fc59 	bl	80052b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80029fe:	bf00      	nop
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	20000224 	.word	0x20000224

08002a08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002a0c:	4b06      	ldr	r3, [pc, #24]	; (8002a28 <SystemInit+0x20>)
 8002a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a12:	4a05      	ldr	r2, [pc, #20]	; (8002a28 <SystemInit+0x20>)
 8002a14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002a1c:	bf00      	nop
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	e000ed00 	.word	0xe000ed00

08002a2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002a2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a64 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a30:	f7ff ffea 	bl	8002a08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a34:	480c      	ldr	r0, [pc, #48]	; (8002a68 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a36:	490d      	ldr	r1, [pc, #52]	; (8002a6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a38:	4a0d      	ldr	r2, [pc, #52]	; (8002a70 <LoopForever+0xe>)
  movs r3, #0
 8002a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a3c:	e002      	b.n	8002a44 <LoopCopyDataInit>

08002a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a42:	3304      	adds	r3, #4

08002a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a48:	d3f9      	bcc.n	8002a3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a4a:	4a0a      	ldr	r2, [pc, #40]	; (8002a74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a4c:	4c0a      	ldr	r4, [pc, #40]	; (8002a78 <LoopForever+0x16>)
  movs r3, #0
 8002a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a50:	e001      	b.n	8002a56 <LoopFillZerobss>

08002a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a54:	3204      	adds	r2, #4

08002a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a58:	d3fb      	bcc.n	8002a52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a5a:	f003 fc93 	bl	8006384 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a5e:	f7ff fa8f 	bl	8001f80 <main>

08002a62 <LoopForever>:

LoopForever:
    b LoopForever
 8002a62:	e7fe      	b.n	8002a62 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002a64:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002a68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a6c:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8002a70:	080069cc 	.word	0x080069cc
  ldr r2, =_sbss
 8002a74:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8002a78:	200002e0 	.word	0x200002e0

08002a7c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a7c:	e7fe      	b.n	8002a7c <ADC1_IRQHandler>

08002a7e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b082      	sub	sp, #8
 8002a82:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a84:	2300      	movs	r3, #0
 8002a86:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a88:	2003      	movs	r0, #3
 8002a8a:	f000 f902 	bl	8002c92 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a8e:	2007      	movs	r0, #7
 8002a90:	f7ff fe94 	bl	80027bc <HAL_InitTick>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d002      	beq.n	8002aa0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	71fb      	strb	r3, [r7, #7]
 8002a9e:	e001      	b.n	8002aa4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002aa0:	f7ff fd5c 	bl	800255c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002aa4:	79fb      	ldrb	r3, [r7, #7]
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
	...

08002ab0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ab4:	4b06      	ldr	r3, [pc, #24]	; (8002ad0 <HAL_IncTick+0x20>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	461a      	mov	r2, r3
 8002aba:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <HAL_IncTick+0x24>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4413      	add	r3, r2
 8002ac0:	4a04      	ldr	r2, [pc, #16]	; (8002ad4 <HAL_IncTick+0x24>)
 8002ac2:	6013      	str	r3, [r2, #0]
}
 8002ac4:	bf00      	nop
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	2000009c 	.word	0x2000009c
 8002ad4:	200002dc 	.word	0x200002dc

08002ad8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  return uwTick;
 8002adc:	4b03      	ldr	r3, [pc, #12]	; (8002aec <HAL_GetTick+0x14>)
 8002ade:	681b      	ldr	r3, [r3, #0]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	200002dc 	.word	0x200002dc

08002af0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002af8:	f7ff ffee 	bl	8002ad8 <HAL_GetTick>
 8002afc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b08:	d005      	beq.n	8002b16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002b0a:	4b0a      	ldr	r3, [pc, #40]	; (8002b34 <HAL_Delay+0x44>)
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	4413      	add	r3, r2
 8002b14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b16:	bf00      	nop
 8002b18:	f7ff ffde 	bl	8002ad8 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d8f7      	bhi.n	8002b18 <HAL_Delay+0x28>
  {
  }
}
 8002b28:	bf00      	nop
 8002b2a:	bf00      	nop
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	2000009c 	.word	0x2000009c

08002b38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b48:	4b0c      	ldr	r3, [pc, #48]	; (8002b7c <__NVIC_SetPriorityGrouping+0x44>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b4e:	68ba      	ldr	r2, [r7, #8]
 8002b50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b54:	4013      	ands	r3, r2
 8002b56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b6a:	4a04      	ldr	r2, [pc, #16]	; (8002b7c <__NVIC_SetPriorityGrouping+0x44>)
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	60d3      	str	r3, [r2, #12]
}
 8002b70:	bf00      	nop
 8002b72:	3714      	adds	r7, #20
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr
 8002b7c:	e000ed00 	.word	0xe000ed00

08002b80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b84:	4b04      	ldr	r3, [pc, #16]	; (8002b98 <__NVIC_GetPriorityGrouping+0x18>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	0a1b      	lsrs	r3, r3, #8
 8002b8a:	f003 0307 	and.w	r3, r3, #7
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	e000ed00 	.word	0xe000ed00

08002b9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	db0b      	blt.n	8002bc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bae:	79fb      	ldrb	r3, [r7, #7]
 8002bb0:	f003 021f 	and.w	r2, r3, #31
 8002bb4:	4907      	ldr	r1, [pc, #28]	; (8002bd4 <__NVIC_EnableIRQ+0x38>)
 8002bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bba:	095b      	lsrs	r3, r3, #5
 8002bbc:	2001      	movs	r0, #1
 8002bbe:	fa00 f202 	lsl.w	r2, r0, r2
 8002bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002bc6:	bf00      	nop
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	e000e100 	.word	0xe000e100

08002bd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	4603      	mov	r3, r0
 8002be0:	6039      	str	r1, [r7, #0]
 8002be2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	db0a      	blt.n	8002c02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	b2da      	uxtb	r2, r3
 8002bf0:	490c      	ldr	r1, [pc, #48]	; (8002c24 <__NVIC_SetPriority+0x4c>)
 8002bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf6:	0112      	lsls	r2, r2, #4
 8002bf8:	b2d2      	uxtb	r2, r2
 8002bfa:	440b      	add	r3, r1
 8002bfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c00:	e00a      	b.n	8002c18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	4908      	ldr	r1, [pc, #32]	; (8002c28 <__NVIC_SetPriority+0x50>)
 8002c08:	79fb      	ldrb	r3, [r7, #7]
 8002c0a:	f003 030f 	and.w	r3, r3, #15
 8002c0e:	3b04      	subs	r3, #4
 8002c10:	0112      	lsls	r2, r2, #4
 8002c12:	b2d2      	uxtb	r2, r2
 8002c14:	440b      	add	r3, r1
 8002c16:	761a      	strb	r2, [r3, #24]
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	e000e100 	.word	0xe000e100
 8002c28:	e000ed00 	.word	0xe000ed00

08002c2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b089      	sub	sp, #36	; 0x24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f003 0307 	and.w	r3, r3, #7
 8002c3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	f1c3 0307 	rsb	r3, r3, #7
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	bf28      	it	cs
 8002c4a:	2304      	movcs	r3, #4
 8002c4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	3304      	adds	r3, #4
 8002c52:	2b06      	cmp	r3, #6
 8002c54:	d902      	bls.n	8002c5c <NVIC_EncodePriority+0x30>
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	3b03      	subs	r3, #3
 8002c5a:	e000      	b.n	8002c5e <NVIC_EncodePriority+0x32>
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c60:	f04f 32ff 	mov.w	r2, #4294967295
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	43da      	mvns	r2, r3
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	401a      	ands	r2, r3
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c74:	f04f 31ff 	mov.w	r1, #4294967295
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c7e:	43d9      	mvns	r1, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c84:	4313      	orrs	r3, r2
         );
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3724      	adds	r7, #36	; 0x24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr

08002c92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b082      	sub	sp, #8
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7ff ff4c 	bl	8002b38 <__NVIC_SetPriorityGrouping>
}
 8002ca0:	bf00      	nop
 8002ca2:	3708      	adds	r7, #8
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	4603      	mov	r3, r0
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
 8002cb4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002cba:	f7ff ff61 	bl	8002b80 <__NVIC_GetPriorityGrouping>
 8002cbe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	68b9      	ldr	r1, [r7, #8]
 8002cc4:	6978      	ldr	r0, [r7, #20]
 8002cc6:	f7ff ffb1 	bl	8002c2c <NVIC_EncodePriority>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cd0:	4611      	mov	r1, r2
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff ff80 	bl	8002bd8 <__NVIC_SetPriority>
}
 8002cd8:	bf00      	nop
 8002cda:	3718      	adds	r7, #24
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff ff54 	bl	8002b9c <__NVIC_EnableIRQ>
}
 8002cf4:	bf00      	nop
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b087      	sub	sp, #28
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d06:	2300      	movs	r3, #0
 8002d08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d0a:	e148      	b.n	8002f9e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	2101      	movs	r1, #1
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	fa01 f303 	lsl.w	r3, r1, r3
 8002d18:	4013      	ands	r3, r2
 8002d1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f000 813a 	beq.w	8002f98 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f003 0303 	and.w	r3, r3, #3
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d005      	beq.n	8002d3c <HAL_GPIO_Init+0x40>
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f003 0303 	and.w	r3, r3, #3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d130      	bne.n	8002d9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	2203      	movs	r2, #3
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	4013      	ands	r3, r2
 8002d52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	68da      	ldr	r2, [r3, #12]
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d72:	2201      	movs	r2, #1
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	43db      	mvns	r3, r3
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	091b      	lsrs	r3, r3, #4
 8002d88:	f003 0201 	and.w	r2, r3, #1
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f003 0303 	and.w	r3, r3, #3
 8002da6:	2b03      	cmp	r3, #3
 8002da8:	d017      	beq.n	8002dda <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	2203      	movs	r2, #3
 8002db6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dba:	43db      	mvns	r3, r3
 8002dbc:	693a      	ldr	r2, [r7, #16]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	689a      	ldr	r2, [r3, #8]
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f003 0303 	and.w	r3, r3, #3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d123      	bne.n	8002e2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	08da      	lsrs	r2, r3, #3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	3208      	adds	r2, #8
 8002dee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002df2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	f003 0307 	and.w	r3, r3, #7
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	220f      	movs	r2, #15
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	43db      	mvns	r3, r3
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	4013      	ands	r3, r2
 8002e08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	691a      	ldr	r2, [r3, #16]
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	08da      	lsrs	r2, r3, #3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	3208      	adds	r2, #8
 8002e28:	6939      	ldr	r1, [r7, #16]
 8002e2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	2203      	movs	r2, #3
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	43db      	mvns	r3, r3
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	4013      	ands	r3, r2
 8002e44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f003 0203 	and.w	r2, r3, #3
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f000 8094 	beq.w	8002f98 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e70:	4b52      	ldr	r3, [pc, #328]	; (8002fbc <HAL_GPIO_Init+0x2c0>)
 8002e72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e74:	4a51      	ldr	r2, [pc, #324]	; (8002fbc <HAL_GPIO_Init+0x2c0>)
 8002e76:	f043 0301 	orr.w	r3, r3, #1
 8002e7a:	6613      	str	r3, [r2, #96]	; 0x60
 8002e7c:	4b4f      	ldr	r3, [pc, #316]	; (8002fbc <HAL_GPIO_Init+0x2c0>)
 8002e7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e80:	f003 0301 	and.w	r3, r3, #1
 8002e84:	60bb      	str	r3, [r7, #8]
 8002e86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e88:	4a4d      	ldr	r2, [pc, #308]	; (8002fc0 <HAL_GPIO_Init+0x2c4>)
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	089b      	lsrs	r3, r3, #2
 8002e8e:	3302      	adds	r3, #2
 8002e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	f003 0303 	and.w	r3, r3, #3
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	220f      	movs	r2, #15
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002eb2:	d00d      	beq.n	8002ed0 <HAL_GPIO_Init+0x1d4>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a43      	ldr	r2, [pc, #268]	; (8002fc4 <HAL_GPIO_Init+0x2c8>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d007      	beq.n	8002ecc <HAL_GPIO_Init+0x1d0>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a42      	ldr	r2, [pc, #264]	; (8002fc8 <HAL_GPIO_Init+0x2cc>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d101      	bne.n	8002ec8 <HAL_GPIO_Init+0x1cc>
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	e004      	b.n	8002ed2 <HAL_GPIO_Init+0x1d6>
 8002ec8:	2307      	movs	r3, #7
 8002eca:	e002      	b.n	8002ed2 <HAL_GPIO_Init+0x1d6>
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e000      	b.n	8002ed2 <HAL_GPIO_Init+0x1d6>
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	f002 0203 	and.w	r2, r2, #3
 8002ed8:	0092      	lsls	r2, r2, #2
 8002eda:	4093      	lsls	r3, r2
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ee2:	4937      	ldr	r1, [pc, #220]	; (8002fc0 <HAL_GPIO_Init+0x2c4>)
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	089b      	lsrs	r3, r3, #2
 8002ee8:	3302      	adds	r3, #2
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ef0:	4b36      	ldr	r3, [pc, #216]	; (8002fcc <HAL_GPIO_Init+0x2d0>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	4013      	ands	r3, r2
 8002efe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d003      	beq.n	8002f14 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f14:	4a2d      	ldr	r2, [pc, #180]	; (8002fcc <HAL_GPIO_Init+0x2d0>)
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f1a:	4b2c      	ldr	r3, [pc, #176]	; (8002fcc <HAL_GPIO_Init+0x2d0>)
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	43db      	mvns	r3, r3
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	4013      	ands	r3, r2
 8002f28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f3e:	4a23      	ldr	r2, [pc, #140]	; (8002fcc <HAL_GPIO_Init+0x2d0>)
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002f44:	4b21      	ldr	r3, [pc, #132]	; (8002fcc <HAL_GPIO_Init+0x2d0>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	43db      	mvns	r3, r3
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	4013      	ands	r3, r2
 8002f52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d003      	beq.n	8002f68 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f68:	4a18      	ldr	r2, [pc, #96]	; (8002fcc <HAL_GPIO_Init+0x2d0>)
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002f6e:	4b17      	ldr	r3, [pc, #92]	; (8002fcc <HAL_GPIO_Init+0x2d0>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	43db      	mvns	r3, r3
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f92:	4a0e      	ldr	r2, [pc, #56]	; (8002fcc <HAL_GPIO_Init+0x2d0>)
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f47f aeaf 	bne.w	8002d0c <HAL_GPIO_Init+0x10>
  }
}
 8002fae:	bf00      	nop
 8002fb0:	bf00      	nop
 8002fb2:	371c      	adds	r7, #28
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	40010000 	.word	0x40010000
 8002fc4:	48000400 	.word	0x48000400
 8002fc8:	48000800 	.word	0x48000800
 8002fcc:	40010400 	.word	0x40010400

08002fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	460b      	mov	r3, r1
 8002fda:	807b      	strh	r3, [r7, #2]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fe0:	787b      	ldrb	r3, [r7, #1]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d003      	beq.n	8002fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fe6:	887a      	ldrh	r2, [r7, #2]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002fec:	e002      	b.n	8002ff4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002fee:	887a      	ldrh	r2, [r7, #2]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	460b      	mov	r3, r1
 800300a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003012:	887a      	ldrh	r2, [r7, #2]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	4013      	ands	r3, r2
 8003018:	041a      	lsls	r2, r3, #16
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	43d9      	mvns	r1, r3
 800301e:	887b      	ldrh	r3, [r7, #2]
 8003020:	400b      	ands	r3, r1
 8003022:	431a      	orrs	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	619a      	str	r2, [r3, #24]
}
 8003028:	bf00      	nop
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003038:	4b05      	ldr	r3, [pc, #20]	; (8003050 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a04      	ldr	r2, [pc, #16]	; (8003050 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800303e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003042:	6013      	str	r3, [r2, #0]
}
 8003044:	bf00      	nop
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	40007000 	.word	0x40007000

08003054 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003058:	4b04      	ldr	r3, [pc, #16]	; (800306c <HAL_PWREx_GetVoltageRange+0x18>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003060:	4618      	mov	r0, r3
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	40007000 	.word	0x40007000

08003070 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800307e:	d130      	bne.n	80030e2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003080:	4b23      	ldr	r3, [pc, #140]	; (8003110 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003088:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800308c:	d038      	beq.n	8003100 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800308e:	4b20      	ldr	r3, [pc, #128]	; (8003110 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003096:	4a1e      	ldr	r2, [pc, #120]	; (8003110 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003098:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800309c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800309e:	4b1d      	ldr	r3, [pc, #116]	; (8003114 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2232      	movs	r2, #50	; 0x32
 80030a4:	fb02 f303 	mul.w	r3, r2, r3
 80030a8:	4a1b      	ldr	r2, [pc, #108]	; (8003118 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80030aa:	fba2 2303 	umull	r2, r3, r2, r3
 80030ae:	0c9b      	lsrs	r3, r3, #18
 80030b0:	3301      	adds	r3, #1
 80030b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030b4:	e002      	b.n	80030bc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	3b01      	subs	r3, #1
 80030ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030bc:	4b14      	ldr	r3, [pc, #80]	; (8003110 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030c8:	d102      	bne.n	80030d0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1f2      	bne.n	80030b6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030d0:	4b0f      	ldr	r3, [pc, #60]	; (8003110 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030dc:	d110      	bne.n	8003100 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e00f      	b.n	8003102 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80030e2:	4b0b      	ldr	r3, [pc, #44]	; (8003110 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ee:	d007      	beq.n	8003100 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80030f0:	4b07      	ldr	r3, [pc, #28]	; (8003110 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030f8:	4a05      	ldr	r2, [pc, #20]	; (8003110 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030fe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	40007000 	.word	0x40007000
 8003114:	20000094 	.word	0x20000094
 8003118:	431bde83 	.word	0x431bde83

0800311c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b088      	sub	sp, #32
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d102      	bne.n	8003130 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	f000 bc02 	b.w	8003934 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003130:	4b96      	ldr	r3, [pc, #600]	; (800338c <HAL_RCC_OscConfig+0x270>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f003 030c 	and.w	r3, r3, #12
 8003138:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800313a:	4b94      	ldr	r3, [pc, #592]	; (800338c <HAL_RCC_OscConfig+0x270>)
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	f003 0303 	and.w	r3, r3, #3
 8003142:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0310 	and.w	r3, r3, #16
 800314c:	2b00      	cmp	r3, #0
 800314e:	f000 80e4 	beq.w	800331a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d007      	beq.n	8003168 <HAL_RCC_OscConfig+0x4c>
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	2b0c      	cmp	r3, #12
 800315c:	f040 808b 	bne.w	8003276 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	2b01      	cmp	r3, #1
 8003164:	f040 8087 	bne.w	8003276 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003168:	4b88      	ldr	r3, [pc, #544]	; (800338c <HAL_RCC_OscConfig+0x270>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d005      	beq.n	8003180 <HAL_RCC_OscConfig+0x64>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d101      	bne.n	8003180 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e3d9      	b.n	8003934 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a1a      	ldr	r2, [r3, #32]
 8003184:	4b81      	ldr	r3, [pc, #516]	; (800338c <HAL_RCC_OscConfig+0x270>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0308 	and.w	r3, r3, #8
 800318c:	2b00      	cmp	r3, #0
 800318e:	d004      	beq.n	800319a <HAL_RCC_OscConfig+0x7e>
 8003190:	4b7e      	ldr	r3, [pc, #504]	; (800338c <HAL_RCC_OscConfig+0x270>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003198:	e005      	b.n	80031a6 <HAL_RCC_OscConfig+0x8a>
 800319a:	4b7c      	ldr	r3, [pc, #496]	; (800338c <HAL_RCC_OscConfig+0x270>)
 800319c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031a0:	091b      	lsrs	r3, r3, #4
 80031a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d223      	bcs.n	80031f2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f000 fdbe 	bl	8003d30 <RCC_SetFlashLatencyFromMSIRange>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e3ba      	b.n	8003934 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031be:	4b73      	ldr	r3, [pc, #460]	; (800338c <HAL_RCC_OscConfig+0x270>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a72      	ldr	r2, [pc, #456]	; (800338c <HAL_RCC_OscConfig+0x270>)
 80031c4:	f043 0308 	orr.w	r3, r3, #8
 80031c8:	6013      	str	r3, [r2, #0]
 80031ca:	4b70      	ldr	r3, [pc, #448]	; (800338c <HAL_RCC_OscConfig+0x270>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	496d      	ldr	r1, [pc, #436]	; (800338c <HAL_RCC_OscConfig+0x270>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031dc:	4b6b      	ldr	r3, [pc, #428]	; (800338c <HAL_RCC_OscConfig+0x270>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	69db      	ldr	r3, [r3, #28]
 80031e8:	021b      	lsls	r3, r3, #8
 80031ea:	4968      	ldr	r1, [pc, #416]	; (800338c <HAL_RCC_OscConfig+0x270>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	604b      	str	r3, [r1, #4]
 80031f0:	e025      	b.n	800323e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031f2:	4b66      	ldr	r3, [pc, #408]	; (800338c <HAL_RCC_OscConfig+0x270>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a65      	ldr	r2, [pc, #404]	; (800338c <HAL_RCC_OscConfig+0x270>)
 80031f8:	f043 0308 	orr.w	r3, r3, #8
 80031fc:	6013      	str	r3, [r2, #0]
 80031fe:	4b63      	ldr	r3, [pc, #396]	; (800338c <HAL_RCC_OscConfig+0x270>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	4960      	ldr	r1, [pc, #384]	; (800338c <HAL_RCC_OscConfig+0x270>)
 800320c:	4313      	orrs	r3, r2
 800320e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003210:	4b5e      	ldr	r3, [pc, #376]	; (800338c <HAL_RCC_OscConfig+0x270>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	69db      	ldr	r3, [r3, #28]
 800321c:	021b      	lsls	r3, r3, #8
 800321e:	495b      	ldr	r1, [pc, #364]	; (800338c <HAL_RCC_OscConfig+0x270>)
 8003220:	4313      	orrs	r3, r2
 8003222:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d109      	bne.n	800323e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	4618      	mov	r0, r3
 8003230:	f000 fd7e 	bl	8003d30 <RCC_SetFlashLatencyFromMSIRange>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e37a      	b.n	8003934 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800323e:	f000 fc81 	bl	8003b44 <HAL_RCC_GetSysClockFreq>
 8003242:	4602      	mov	r2, r0
 8003244:	4b51      	ldr	r3, [pc, #324]	; (800338c <HAL_RCC_OscConfig+0x270>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	091b      	lsrs	r3, r3, #4
 800324a:	f003 030f 	and.w	r3, r3, #15
 800324e:	4950      	ldr	r1, [pc, #320]	; (8003390 <HAL_RCC_OscConfig+0x274>)
 8003250:	5ccb      	ldrb	r3, [r1, r3]
 8003252:	f003 031f 	and.w	r3, r3, #31
 8003256:	fa22 f303 	lsr.w	r3, r2, r3
 800325a:	4a4e      	ldr	r2, [pc, #312]	; (8003394 <HAL_RCC_OscConfig+0x278>)
 800325c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800325e:	4b4e      	ldr	r3, [pc, #312]	; (8003398 <HAL_RCC_OscConfig+0x27c>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4618      	mov	r0, r3
 8003264:	f7ff faaa 	bl	80027bc <HAL_InitTick>
 8003268:	4603      	mov	r3, r0
 800326a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800326c:	7bfb      	ldrb	r3, [r7, #15]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d052      	beq.n	8003318 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003272:	7bfb      	ldrb	r3, [r7, #15]
 8003274:	e35e      	b.n	8003934 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d032      	beq.n	80032e4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800327e:	4b43      	ldr	r3, [pc, #268]	; (800338c <HAL_RCC_OscConfig+0x270>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a42      	ldr	r2, [pc, #264]	; (800338c <HAL_RCC_OscConfig+0x270>)
 8003284:	f043 0301 	orr.w	r3, r3, #1
 8003288:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800328a:	f7ff fc25 	bl	8002ad8 <HAL_GetTick>
 800328e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003290:	e008      	b.n	80032a4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003292:	f7ff fc21 	bl	8002ad8 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e347      	b.n	8003934 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032a4:	4b39      	ldr	r3, [pc, #228]	; (800338c <HAL_RCC_OscConfig+0x270>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d0f0      	beq.n	8003292 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032b0:	4b36      	ldr	r3, [pc, #216]	; (800338c <HAL_RCC_OscConfig+0x270>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a35      	ldr	r2, [pc, #212]	; (800338c <HAL_RCC_OscConfig+0x270>)
 80032b6:	f043 0308 	orr.w	r3, r3, #8
 80032ba:	6013      	str	r3, [r2, #0]
 80032bc:	4b33      	ldr	r3, [pc, #204]	; (800338c <HAL_RCC_OscConfig+0x270>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a1b      	ldr	r3, [r3, #32]
 80032c8:	4930      	ldr	r1, [pc, #192]	; (800338c <HAL_RCC_OscConfig+0x270>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032ce:	4b2f      	ldr	r3, [pc, #188]	; (800338c <HAL_RCC_OscConfig+0x270>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	021b      	lsls	r3, r3, #8
 80032dc:	492b      	ldr	r1, [pc, #172]	; (800338c <HAL_RCC_OscConfig+0x270>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	604b      	str	r3, [r1, #4]
 80032e2:	e01a      	b.n	800331a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80032e4:	4b29      	ldr	r3, [pc, #164]	; (800338c <HAL_RCC_OscConfig+0x270>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a28      	ldr	r2, [pc, #160]	; (800338c <HAL_RCC_OscConfig+0x270>)
 80032ea:	f023 0301 	bic.w	r3, r3, #1
 80032ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032f0:	f7ff fbf2 	bl	8002ad8 <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032f8:	f7ff fbee 	bl	8002ad8 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e314      	b.n	8003934 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800330a:	4b20      	ldr	r3, [pc, #128]	; (800338c <HAL_RCC_OscConfig+0x270>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1f0      	bne.n	80032f8 <HAL_RCC_OscConfig+0x1dc>
 8003316:	e000      	b.n	800331a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003318:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d073      	beq.n	800340e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	2b08      	cmp	r3, #8
 800332a:	d005      	beq.n	8003338 <HAL_RCC_OscConfig+0x21c>
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	2b0c      	cmp	r3, #12
 8003330:	d10e      	bne.n	8003350 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	2b03      	cmp	r3, #3
 8003336:	d10b      	bne.n	8003350 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003338:	4b14      	ldr	r3, [pc, #80]	; (800338c <HAL_RCC_OscConfig+0x270>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d063      	beq.n	800340c <HAL_RCC_OscConfig+0x2f0>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d15f      	bne.n	800340c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e2f1      	b.n	8003934 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003358:	d106      	bne.n	8003368 <HAL_RCC_OscConfig+0x24c>
 800335a:	4b0c      	ldr	r3, [pc, #48]	; (800338c <HAL_RCC_OscConfig+0x270>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a0b      	ldr	r2, [pc, #44]	; (800338c <HAL_RCC_OscConfig+0x270>)
 8003360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003364:	6013      	str	r3, [r2, #0]
 8003366:	e025      	b.n	80033b4 <HAL_RCC_OscConfig+0x298>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003370:	d114      	bne.n	800339c <HAL_RCC_OscConfig+0x280>
 8003372:	4b06      	ldr	r3, [pc, #24]	; (800338c <HAL_RCC_OscConfig+0x270>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a05      	ldr	r2, [pc, #20]	; (800338c <HAL_RCC_OscConfig+0x270>)
 8003378:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800337c:	6013      	str	r3, [r2, #0]
 800337e:	4b03      	ldr	r3, [pc, #12]	; (800338c <HAL_RCC_OscConfig+0x270>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a02      	ldr	r2, [pc, #8]	; (800338c <HAL_RCC_OscConfig+0x270>)
 8003384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003388:	6013      	str	r3, [r2, #0]
 800338a:	e013      	b.n	80033b4 <HAL_RCC_OscConfig+0x298>
 800338c:	40021000 	.word	0x40021000
 8003390:	0800694c 	.word	0x0800694c
 8003394:	20000094 	.word	0x20000094
 8003398:	20000098 	.word	0x20000098
 800339c:	4ba0      	ldr	r3, [pc, #640]	; (8003620 <HAL_RCC_OscConfig+0x504>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a9f      	ldr	r2, [pc, #636]	; (8003620 <HAL_RCC_OscConfig+0x504>)
 80033a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033a6:	6013      	str	r3, [r2, #0]
 80033a8:	4b9d      	ldr	r3, [pc, #628]	; (8003620 <HAL_RCC_OscConfig+0x504>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a9c      	ldr	r2, [pc, #624]	; (8003620 <HAL_RCC_OscConfig+0x504>)
 80033ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d013      	beq.n	80033e4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033bc:	f7ff fb8c 	bl	8002ad8 <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033c4:	f7ff fb88 	bl	8002ad8 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b64      	cmp	r3, #100	; 0x64
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e2ae      	b.n	8003934 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033d6:	4b92      	ldr	r3, [pc, #584]	; (8003620 <HAL_RCC_OscConfig+0x504>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d0f0      	beq.n	80033c4 <HAL_RCC_OscConfig+0x2a8>
 80033e2:	e014      	b.n	800340e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e4:	f7ff fb78 	bl	8002ad8 <HAL_GetTick>
 80033e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033ea:	e008      	b.n	80033fe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033ec:	f7ff fb74 	bl	8002ad8 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b64      	cmp	r3, #100	; 0x64
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e29a      	b.n	8003934 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033fe:	4b88      	ldr	r3, [pc, #544]	; (8003620 <HAL_RCC_OscConfig+0x504>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1f0      	bne.n	80033ec <HAL_RCC_OscConfig+0x2d0>
 800340a:	e000      	b.n	800340e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800340c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d060      	beq.n	80034dc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	2b04      	cmp	r3, #4
 800341e:	d005      	beq.n	800342c <HAL_RCC_OscConfig+0x310>
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	2b0c      	cmp	r3, #12
 8003424:	d119      	bne.n	800345a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	2b02      	cmp	r3, #2
 800342a:	d116      	bne.n	800345a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800342c:	4b7c      	ldr	r3, [pc, #496]	; (8003620 <HAL_RCC_OscConfig+0x504>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003434:	2b00      	cmp	r3, #0
 8003436:	d005      	beq.n	8003444 <HAL_RCC_OscConfig+0x328>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d101      	bne.n	8003444 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e277      	b.n	8003934 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003444:	4b76      	ldr	r3, [pc, #472]	; (8003620 <HAL_RCC_OscConfig+0x504>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	061b      	lsls	r3, r3, #24
 8003452:	4973      	ldr	r1, [pc, #460]	; (8003620 <HAL_RCC_OscConfig+0x504>)
 8003454:	4313      	orrs	r3, r2
 8003456:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003458:	e040      	b.n	80034dc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d023      	beq.n	80034aa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003462:	4b6f      	ldr	r3, [pc, #444]	; (8003620 <HAL_RCC_OscConfig+0x504>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a6e      	ldr	r2, [pc, #440]	; (8003620 <HAL_RCC_OscConfig+0x504>)
 8003468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800346c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800346e:	f7ff fb33 	bl	8002ad8 <HAL_GetTick>
 8003472:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003474:	e008      	b.n	8003488 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003476:	f7ff fb2f 	bl	8002ad8 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d901      	bls.n	8003488 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e255      	b.n	8003934 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003488:	4b65      	ldr	r3, [pc, #404]	; (8003620 <HAL_RCC_OscConfig+0x504>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003490:	2b00      	cmp	r3, #0
 8003492:	d0f0      	beq.n	8003476 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003494:	4b62      	ldr	r3, [pc, #392]	; (8003620 <HAL_RCC_OscConfig+0x504>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	061b      	lsls	r3, r3, #24
 80034a2:	495f      	ldr	r1, [pc, #380]	; (8003620 <HAL_RCC_OscConfig+0x504>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	604b      	str	r3, [r1, #4]
 80034a8:	e018      	b.n	80034dc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034aa:	4b5d      	ldr	r3, [pc, #372]	; (8003620 <HAL_RCC_OscConfig+0x504>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a5c      	ldr	r2, [pc, #368]	; (8003620 <HAL_RCC_OscConfig+0x504>)
 80034b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b6:	f7ff fb0f 	bl	8002ad8 <HAL_GetTick>
 80034ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034bc:	e008      	b.n	80034d0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034be:	f7ff fb0b 	bl	8002ad8 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e231      	b.n	8003934 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034d0:	4b53      	ldr	r3, [pc, #332]	; (8003620 <HAL_RCC_OscConfig+0x504>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1f0      	bne.n	80034be <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0308 	and.w	r3, r3, #8
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d03c      	beq.n	8003562 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d01c      	beq.n	800352a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034f0:	4b4b      	ldr	r3, [pc, #300]	; (8003620 <HAL_RCC_OscConfig+0x504>)
 80034f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034f6:	4a4a      	ldr	r2, [pc, #296]	; (8003620 <HAL_RCC_OscConfig+0x504>)
 80034f8:	f043 0301 	orr.w	r3, r3, #1
 80034fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003500:	f7ff faea 	bl	8002ad8 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003508:	f7ff fae6 	bl	8002ad8 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e20c      	b.n	8003934 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800351a:	4b41      	ldr	r3, [pc, #260]	; (8003620 <HAL_RCC_OscConfig+0x504>)
 800351c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d0ef      	beq.n	8003508 <HAL_RCC_OscConfig+0x3ec>
 8003528:	e01b      	b.n	8003562 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800352a:	4b3d      	ldr	r3, [pc, #244]	; (8003620 <HAL_RCC_OscConfig+0x504>)
 800352c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003530:	4a3b      	ldr	r2, [pc, #236]	; (8003620 <HAL_RCC_OscConfig+0x504>)
 8003532:	f023 0301 	bic.w	r3, r3, #1
 8003536:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800353a:	f7ff facd 	bl	8002ad8 <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003540:	e008      	b.n	8003554 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003542:	f7ff fac9 	bl	8002ad8 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e1ef      	b.n	8003934 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003554:	4b32      	ldr	r3, [pc, #200]	; (8003620 <HAL_RCC_OscConfig+0x504>)
 8003556:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1ef      	bne.n	8003542 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0304 	and.w	r3, r3, #4
 800356a:	2b00      	cmp	r3, #0
 800356c:	f000 80a6 	beq.w	80036bc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003570:	2300      	movs	r3, #0
 8003572:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003574:	4b2a      	ldr	r3, [pc, #168]	; (8003620 <HAL_RCC_OscConfig+0x504>)
 8003576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d10d      	bne.n	800359c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003580:	4b27      	ldr	r3, [pc, #156]	; (8003620 <HAL_RCC_OscConfig+0x504>)
 8003582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003584:	4a26      	ldr	r2, [pc, #152]	; (8003620 <HAL_RCC_OscConfig+0x504>)
 8003586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800358a:	6593      	str	r3, [r2, #88]	; 0x58
 800358c:	4b24      	ldr	r3, [pc, #144]	; (8003620 <HAL_RCC_OscConfig+0x504>)
 800358e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003594:	60bb      	str	r3, [r7, #8]
 8003596:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003598:	2301      	movs	r3, #1
 800359a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800359c:	4b21      	ldr	r3, [pc, #132]	; (8003624 <HAL_RCC_OscConfig+0x508>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d118      	bne.n	80035da <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035a8:	4b1e      	ldr	r3, [pc, #120]	; (8003624 <HAL_RCC_OscConfig+0x508>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a1d      	ldr	r2, [pc, #116]	; (8003624 <HAL_RCC_OscConfig+0x508>)
 80035ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035b4:	f7ff fa90 	bl	8002ad8 <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035ba:	e008      	b.n	80035ce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035bc:	f7ff fa8c 	bl	8002ad8 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e1b2      	b.n	8003934 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035ce:	4b15      	ldr	r3, [pc, #84]	; (8003624 <HAL_RCC_OscConfig+0x508>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d0f0      	beq.n	80035bc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d108      	bne.n	80035f4 <HAL_RCC_OscConfig+0x4d8>
 80035e2:	4b0f      	ldr	r3, [pc, #60]	; (8003620 <HAL_RCC_OscConfig+0x504>)
 80035e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e8:	4a0d      	ldr	r2, [pc, #52]	; (8003620 <HAL_RCC_OscConfig+0x504>)
 80035ea:	f043 0301 	orr.w	r3, r3, #1
 80035ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035f2:	e029      	b.n	8003648 <HAL_RCC_OscConfig+0x52c>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	2b05      	cmp	r3, #5
 80035fa:	d115      	bne.n	8003628 <HAL_RCC_OscConfig+0x50c>
 80035fc:	4b08      	ldr	r3, [pc, #32]	; (8003620 <HAL_RCC_OscConfig+0x504>)
 80035fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003602:	4a07      	ldr	r2, [pc, #28]	; (8003620 <HAL_RCC_OscConfig+0x504>)
 8003604:	f043 0304 	orr.w	r3, r3, #4
 8003608:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800360c:	4b04      	ldr	r3, [pc, #16]	; (8003620 <HAL_RCC_OscConfig+0x504>)
 800360e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003612:	4a03      	ldr	r2, [pc, #12]	; (8003620 <HAL_RCC_OscConfig+0x504>)
 8003614:	f043 0301 	orr.w	r3, r3, #1
 8003618:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800361c:	e014      	b.n	8003648 <HAL_RCC_OscConfig+0x52c>
 800361e:	bf00      	nop
 8003620:	40021000 	.word	0x40021000
 8003624:	40007000 	.word	0x40007000
 8003628:	4b9a      	ldr	r3, [pc, #616]	; (8003894 <HAL_RCC_OscConfig+0x778>)
 800362a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800362e:	4a99      	ldr	r2, [pc, #612]	; (8003894 <HAL_RCC_OscConfig+0x778>)
 8003630:	f023 0301 	bic.w	r3, r3, #1
 8003634:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003638:	4b96      	ldr	r3, [pc, #600]	; (8003894 <HAL_RCC_OscConfig+0x778>)
 800363a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800363e:	4a95      	ldr	r2, [pc, #596]	; (8003894 <HAL_RCC_OscConfig+0x778>)
 8003640:	f023 0304 	bic.w	r3, r3, #4
 8003644:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d016      	beq.n	800367e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003650:	f7ff fa42 	bl	8002ad8 <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003656:	e00a      	b.n	800366e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003658:	f7ff fa3e 	bl	8002ad8 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	f241 3288 	movw	r2, #5000	; 0x1388
 8003666:	4293      	cmp	r3, r2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e162      	b.n	8003934 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800366e:	4b89      	ldr	r3, [pc, #548]	; (8003894 <HAL_RCC_OscConfig+0x778>)
 8003670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d0ed      	beq.n	8003658 <HAL_RCC_OscConfig+0x53c>
 800367c:	e015      	b.n	80036aa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800367e:	f7ff fa2b 	bl	8002ad8 <HAL_GetTick>
 8003682:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003684:	e00a      	b.n	800369c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003686:	f7ff fa27 	bl	8002ad8 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	f241 3288 	movw	r2, #5000	; 0x1388
 8003694:	4293      	cmp	r3, r2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e14b      	b.n	8003934 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800369c:	4b7d      	ldr	r3, [pc, #500]	; (8003894 <HAL_RCC_OscConfig+0x778>)
 800369e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1ed      	bne.n	8003686 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036aa:	7ffb      	ldrb	r3, [r7, #31]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d105      	bne.n	80036bc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036b0:	4b78      	ldr	r3, [pc, #480]	; (8003894 <HAL_RCC_OscConfig+0x778>)
 80036b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b4:	4a77      	ldr	r2, [pc, #476]	; (8003894 <HAL_RCC_OscConfig+0x778>)
 80036b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036ba:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0320 	and.w	r3, r3, #32
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d03c      	beq.n	8003742 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d01c      	beq.n	800370a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80036d0:	4b70      	ldr	r3, [pc, #448]	; (8003894 <HAL_RCC_OscConfig+0x778>)
 80036d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036d6:	4a6f      	ldr	r2, [pc, #444]	; (8003894 <HAL_RCC_OscConfig+0x778>)
 80036d8:	f043 0301 	orr.w	r3, r3, #1
 80036dc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e0:	f7ff f9fa 	bl	8002ad8 <HAL_GetTick>
 80036e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036e6:	e008      	b.n	80036fa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036e8:	f7ff f9f6 	bl	8002ad8 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e11c      	b.n	8003934 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036fa:	4b66      	ldr	r3, [pc, #408]	; (8003894 <HAL_RCC_OscConfig+0x778>)
 80036fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d0ef      	beq.n	80036e8 <HAL_RCC_OscConfig+0x5cc>
 8003708:	e01b      	b.n	8003742 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800370a:	4b62      	ldr	r3, [pc, #392]	; (8003894 <HAL_RCC_OscConfig+0x778>)
 800370c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003710:	4a60      	ldr	r2, [pc, #384]	; (8003894 <HAL_RCC_OscConfig+0x778>)
 8003712:	f023 0301 	bic.w	r3, r3, #1
 8003716:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800371a:	f7ff f9dd 	bl	8002ad8 <HAL_GetTick>
 800371e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003720:	e008      	b.n	8003734 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003722:	f7ff f9d9 	bl	8002ad8 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d901      	bls.n	8003734 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e0ff      	b.n	8003934 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003734:	4b57      	ldr	r3, [pc, #348]	; (8003894 <HAL_RCC_OscConfig+0x778>)
 8003736:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1ef      	bne.n	8003722 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003746:	2b00      	cmp	r3, #0
 8003748:	f000 80f3 	beq.w	8003932 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003750:	2b02      	cmp	r3, #2
 8003752:	f040 80c9 	bne.w	80038e8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003756:	4b4f      	ldr	r3, [pc, #316]	; (8003894 <HAL_RCC_OscConfig+0x778>)
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	f003 0203 	and.w	r2, r3, #3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003766:	429a      	cmp	r2, r3
 8003768:	d12c      	bne.n	80037c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003774:	3b01      	subs	r3, #1
 8003776:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003778:	429a      	cmp	r2, r3
 800377a:	d123      	bne.n	80037c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003786:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003788:	429a      	cmp	r2, r3
 800378a:	d11b      	bne.n	80037c4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003796:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003798:	429a      	cmp	r2, r3
 800379a:	d113      	bne.n	80037c4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a6:	085b      	lsrs	r3, r3, #1
 80037a8:	3b01      	subs	r3, #1
 80037aa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d109      	bne.n	80037c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ba:	085b      	lsrs	r3, r3, #1
 80037bc:	3b01      	subs	r3, #1
 80037be:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d06b      	beq.n	800389c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	2b0c      	cmp	r3, #12
 80037c8:	d062      	beq.n	8003890 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80037ca:	4b32      	ldr	r3, [pc, #200]	; (8003894 <HAL_RCC_OscConfig+0x778>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e0ac      	b.n	8003934 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80037da:	4b2e      	ldr	r3, [pc, #184]	; (8003894 <HAL_RCC_OscConfig+0x778>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a2d      	ldr	r2, [pc, #180]	; (8003894 <HAL_RCC_OscConfig+0x778>)
 80037e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037e4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037e6:	f7ff f977 	bl	8002ad8 <HAL_GetTick>
 80037ea:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037ec:	e008      	b.n	8003800 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ee:	f7ff f973 	bl	8002ad8 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d901      	bls.n	8003800 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e099      	b.n	8003934 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003800:	4b24      	ldr	r3, [pc, #144]	; (8003894 <HAL_RCC_OscConfig+0x778>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1f0      	bne.n	80037ee <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800380c:	4b21      	ldr	r3, [pc, #132]	; (8003894 <HAL_RCC_OscConfig+0x778>)
 800380e:	68da      	ldr	r2, [r3, #12]
 8003810:	4b21      	ldr	r3, [pc, #132]	; (8003898 <HAL_RCC_OscConfig+0x77c>)
 8003812:	4013      	ands	r3, r2
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800381c:	3a01      	subs	r2, #1
 800381e:	0112      	lsls	r2, r2, #4
 8003820:	4311      	orrs	r1, r2
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003826:	0212      	lsls	r2, r2, #8
 8003828:	4311      	orrs	r1, r2
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800382e:	0852      	lsrs	r2, r2, #1
 8003830:	3a01      	subs	r2, #1
 8003832:	0552      	lsls	r2, r2, #21
 8003834:	4311      	orrs	r1, r2
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800383a:	0852      	lsrs	r2, r2, #1
 800383c:	3a01      	subs	r2, #1
 800383e:	0652      	lsls	r2, r2, #25
 8003840:	4311      	orrs	r1, r2
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003846:	06d2      	lsls	r2, r2, #27
 8003848:	430a      	orrs	r2, r1
 800384a:	4912      	ldr	r1, [pc, #72]	; (8003894 <HAL_RCC_OscConfig+0x778>)
 800384c:	4313      	orrs	r3, r2
 800384e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003850:	4b10      	ldr	r3, [pc, #64]	; (8003894 <HAL_RCC_OscConfig+0x778>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a0f      	ldr	r2, [pc, #60]	; (8003894 <HAL_RCC_OscConfig+0x778>)
 8003856:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800385a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800385c:	4b0d      	ldr	r3, [pc, #52]	; (8003894 <HAL_RCC_OscConfig+0x778>)
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	4a0c      	ldr	r2, [pc, #48]	; (8003894 <HAL_RCC_OscConfig+0x778>)
 8003862:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003866:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003868:	f7ff f936 	bl	8002ad8 <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800386e:	e008      	b.n	8003882 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003870:	f7ff f932 	bl	8002ad8 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b02      	cmp	r3, #2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e058      	b.n	8003934 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003882:	4b04      	ldr	r3, [pc, #16]	; (8003894 <HAL_RCC_OscConfig+0x778>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d0f0      	beq.n	8003870 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800388e:	e050      	b.n	8003932 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e04f      	b.n	8003934 <HAL_RCC_OscConfig+0x818>
 8003894:	40021000 	.word	0x40021000
 8003898:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800389c:	4b27      	ldr	r3, [pc, #156]	; (800393c <HAL_RCC_OscConfig+0x820>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d144      	bne.n	8003932 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80038a8:	4b24      	ldr	r3, [pc, #144]	; (800393c <HAL_RCC_OscConfig+0x820>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a23      	ldr	r2, [pc, #140]	; (800393c <HAL_RCC_OscConfig+0x820>)
 80038ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038b2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038b4:	4b21      	ldr	r3, [pc, #132]	; (800393c <HAL_RCC_OscConfig+0x820>)
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	4a20      	ldr	r2, [pc, #128]	; (800393c <HAL_RCC_OscConfig+0x820>)
 80038ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038be:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80038c0:	f7ff f90a 	bl	8002ad8 <HAL_GetTick>
 80038c4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038c6:	e008      	b.n	80038da <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038c8:	f7ff f906 	bl	8002ad8 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d901      	bls.n	80038da <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e02c      	b.n	8003934 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038da:	4b18      	ldr	r3, [pc, #96]	; (800393c <HAL_RCC_OscConfig+0x820>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d0f0      	beq.n	80038c8 <HAL_RCC_OscConfig+0x7ac>
 80038e6:	e024      	b.n	8003932 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	2b0c      	cmp	r3, #12
 80038ec:	d01f      	beq.n	800392e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ee:	4b13      	ldr	r3, [pc, #76]	; (800393c <HAL_RCC_OscConfig+0x820>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a12      	ldr	r2, [pc, #72]	; (800393c <HAL_RCC_OscConfig+0x820>)
 80038f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fa:	f7ff f8ed 	bl	8002ad8 <HAL_GetTick>
 80038fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003900:	e008      	b.n	8003914 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003902:	f7ff f8e9 	bl	8002ad8 <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b02      	cmp	r3, #2
 800390e:	d901      	bls.n	8003914 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e00f      	b.n	8003934 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003914:	4b09      	ldr	r3, [pc, #36]	; (800393c <HAL_RCC_OscConfig+0x820>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d1f0      	bne.n	8003902 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003920:	4b06      	ldr	r3, [pc, #24]	; (800393c <HAL_RCC_OscConfig+0x820>)
 8003922:	68da      	ldr	r2, [r3, #12]
 8003924:	4905      	ldr	r1, [pc, #20]	; (800393c <HAL_RCC_OscConfig+0x820>)
 8003926:	4b06      	ldr	r3, [pc, #24]	; (8003940 <HAL_RCC_OscConfig+0x824>)
 8003928:	4013      	ands	r3, r2
 800392a:	60cb      	str	r3, [r1, #12]
 800392c:	e001      	b.n	8003932 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e000      	b.n	8003934 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3720      	adds	r7, #32
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	40021000 	.word	0x40021000
 8003940:	feeefffc 	.word	0xfeeefffc

08003944 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d101      	bne.n	8003958 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e0e7      	b.n	8003b28 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003958:	4b75      	ldr	r3, [pc, #468]	; (8003b30 <HAL_RCC_ClockConfig+0x1ec>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0307 	and.w	r3, r3, #7
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	429a      	cmp	r2, r3
 8003964:	d910      	bls.n	8003988 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003966:	4b72      	ldr	r3, [pc, #456]	; (8003b30 <HAL_RCC_ClockConfig+0x1ec>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f023 0207 	bic.w	r2, r3, #7
 800396e:	4970      	ldr	r1, [pc, #448]	; (8003b30 <HAL_RCC_ClockConfig+0x1ec>)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	4313      	orrs	r3, r2
 8003974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003976:	4b6e      	ldr	r3, [pc, #440]	; (8003b30 <HAL_RCC_ClockConfig+0x1ec>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0307 	and.w	r3, r3, #7
 800397e:	683a      	ldr	r2, [r7, #0]
 8003980:	429a      	cmp	r2, r3
 8003982:	d001      	beq.n	8003988 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e0cf      	b.n	8003b28 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d010      	beq.n	80039b6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689a      	ldr	r2, [r3, #8]
 8003998:	4b66      	ldr	r3, [pc, #408]	; (8003b34 <HAL_RCC_ClockConfig+0x1f0>)
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d908      	bls.n	80039b6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039a4:	4b63      	ldr	r3, [pc, #396]	; (8003b34 <HAL_RCC_ClockConfig+0x1f0>)
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	4960      	ldr	r1, [pc, #384]	; (8003b34 <HAL_RCC_ClockConfig+0x1f0>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d04c      	beq.n	8003a5c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	2b03      	cmp	r3, #3
 80039c8:	d107      	bne.n	80039da <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039ca:	4b5a      	ldr	r3, [pc, #360]	; (8003b34 <HAL_RCC_ClockConfig+0x1f0>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d121      	bne.n	8003a1a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e0a6      	b.n	8003b28 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d107      	bne.n	80039f2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039e2:	4b54      	ldr	r3, [pc, #336]	; (8003b34 <HAL_RCC_ClockConfig+0x1f0>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d115      	bne.n	8003a1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e09a      	b.n	8003b28 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d107      	bne.n	8003a0a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039fa:	4b4e      	ldr	r3, [pc, #312]	; (8003b34 <HAL_RCC_ClockConfig+0x1f0>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d109      	bne.n	8003a1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e08e      	b.n	8003b28 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a0a:	4b4a      	ldr	r3, [pc, #296]	; (8003b34 <HAL_RCC_ClockConfig+0x1f0>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e086      	b.n	8003b28 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a1a:	4b46      	ldr	r3, [pc, #280]	; (8003b34 <HAL_RCC_ClockConfig+0x1f0>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f023 0203 	bic.w	r2, r3, #3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	4943      	ldr	r1, [pc, #268]	; (8003b34 <HAL_RCC_ClockConfig+0x1f0>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a2c:	f7ff f854 	bl	8002ad8 <HAL_GetTick>
 8003a30:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a32:	e00a      	b.n	8003a4a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a34:	f7ff f850 	bl	8002ad8 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e06e      	b.n	8003b28 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a4a:	4b3a      	ldr	r3, [pc, #232]	; (8003b34 <HAL_RCC_ClockConfig+0x1f0>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f003 020c 	and.w	r2, r3, #12
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d1eb      	bne.n	8003a34 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d010      	beq.n	8003a8a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689a      	ldr	r2, [r3, #8]
 8003a6c:	4b31      	ldr	r3, [pc, #196]	; (8003b34 <HAL_RCC_ClockConfig+0x1f0>)
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d208      	bcs.n	8003a8a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a78:	4b2e      	ldr	r3, [pc, #184]	; (8003b34 <HAL_RCC_ClockConfig+0x1f0>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	492b      	ldr	r1, [pc, #172]	; (8003b34 <HAL_RCC_ClockConfig+0x1f0>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a8a:	4b29      	ldr	r3, [pc, #164]	; (8003b30 <HAL_RCC_ClockConfig+0x1ec>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0307 	and.w	r3, r3, #7
 8003a92:	683a      	ldr	r2, [r7, #0]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d210      	bcs.n	8003aba <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a98:	4b25      	ldr	r3, [pc, #148]	; (8003b30 <HAL_RCC_ClockConfig+0x1ec>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f023 0207 	bic.w	r2, r3, #7
 8003aa0:	4923      	ldr	r1, [pc, #140]	; (8003b30 <HAL_RCC_ClockConfig+0x1ec>)
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aa8:	4b21      	ldr	r3, [pc, #132]	; (8003b30 <HAL_RCC_ClockConfig+0x1ec>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0307 	and.w	r3, r3, #7
 8003ab0:	683a      	ldr	r2, [r7, #0]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d001      	beq.n	8003aba <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e036      	b.n	8003b28 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0304 	and.w	r3, r3, #4
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d008      	beq.n	8003ad8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ac6:	4b1b      	ldr	r3, [pc, #108]	; (8003b34 <HAL_RCC_ClockConfig+0x1f0>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	4918      	ldr	r1, [pc, #96]	; (8003b34 <HAL_RCC_ClockConfig+0x1f0>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0308 	and.w	r3, r3, #8
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d009      	beq.n	8003af8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ae4:	4b13      	ldr	r3, [pc, #76]	; (8003b34 <HAL_RCC_ClockConfig+0x1f0>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	00db      	lsls	r3, r3, #3
 8003af2:	4910      	ldr	r1, [pc, #64]	; (8003b34 <HAL_RCC_ClockConfig+0x1f0>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003af8:	f000 f824 	bl	8003b44 <HAL_RCC_GetSysClockFreq>
 8003afc:	4602      	mov	r2, r0
 8003afe:	4b0d      	ldr	r3, [pc, #52]	; (8003b34 <HAL_RCC_ClockConfig+0x1f0>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	091b      	lsrs	r3, r3, #4
 8003b04:	f003 030f 	and.w	r3, r3, #15
 8003b08:	490b      	ldr	r1, [pc, #44]	; (8003b38 <HAL_RCC_ClockConfig+0x1f4>)
 8003b0a:	5ccb      	ldrb	r3, [r1, r3]
 8003b0c:	f003 031f 	and.w	r3, r3, #31
 8003b10:	fa22 f303 	lsr.w	r3, r2, r3
 8003b14:	4a09      	ldr	r2, [pc, #36]	; (8003b3c <HAL_RCC_ClockConfig+0x1f8>)
 8003b16:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003b18:	4b09      	ldr	r3, [pc, #36]	; (8003b40 <HAL_RCC_ClockConfig+0x1fc>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7fe fe4d 	bl	80027bc <HAL_InitTick>
 8003b22:	4603      	mov	r3, r0
 8003b24:	72fb      	strb	r3, [r7, #11]

  return status;
 8003b26:	7afb      	ldrb	r3, [r7, #11]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	40022000 	.word	0x40022000
 8003b34:	40021000 	.word	0x40021000
 8003b38:	0800694c 	.word	0x0800694c
 8003b3c:	20000094 	.word	0x20000094
 8003b40:	20000098 	.word	0x20000098

08003b44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b089      	sub	sp, #36	; 0x24
 8003b48:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	61fb      	str	r3, [r7, #28]
 8003b4e:	2300      	movs	r3, #0
 8003b50:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b52:	4b3e      	ldr	r3, [pc, #248]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f003 030c 	and.w	r3, r3, #12
 8003b5a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b5c:	4b3b      	ldr	r3, [pc, #236]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	f003 0303 	and.w	r3, r3, #3
 8003b64:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d005      	beq.n	8003b78 <HAL_RCC_GetSysClockFreq+0x34>
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	2b0c      	cmp	r3, #12
 8003b70:	d121      	bne.n	8003bb6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d11e      	bne.n	8003bb6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003b78:	4b34      	ldr	r3, [pc, #208]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0308 	and.w	r3, r3, #8
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d107      	bne.n	8003b94 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b84:	4b31      	ldr	r3, [pc, #196]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8003b86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b8a:	0a1b      	lsrs	r3, r3, #8
 8003b8c:	f003 030f 	and.w	r3, r3, #15
 8003b90:	61fb      	str	r3, [r7, #28]
 8003b92:	e005      	b.n	8003ba0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b94:	4b2d      	ldr	r3, [pc, #180]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	091b      	lsrs	r3, r3, #4
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003ba0:	4a2b      	ldr	r2, [pc, #172]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ba8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10d      	bne.n	8003bcc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bb4:	e00a      	b.n	8003bcc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	2b04      	cmp	r3, #4
 8003bba:	d102      	bne.n	8003bc2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003bbc:	4b25      	ldr	r3, [pc, #148]	; (8003c54 <HAL_RCC_GetSysClockFreq+0x110>)
 8003bbe:	61bb      	str	r3, [r7, #24]
 8003bc0:	e004      	b.n	8003bcc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	2b08      	cmp	r3, #8
 8003bc6:	d101      	bne.n	8003bcc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003bc8:	4b23      	ldr	r3, [pc, #140]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x114>)
 8003bca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	2b0c      	cmp	r3, #12
 8003bd0:	d134      	bne.n	8003c3c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003bd2:	4b1e      	ldr	r3, [pc, #120]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	f003 0303 	and.w	r3, r3, #3
 8003bda:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d003      	beq.n	8003bea <HAL_RCC_GetSysClockFreq+0xa6>
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	2b03      	cmp	r3, #3
 8003be6:	d003      	beq.n	8003bf0 <HAL_RCC_GetSysClockFreq+0xac>
 8003be8:	e005      	b.n	8003bf6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003bea:	4b1a      	ldr	r3, [pc, #104]	; (8003c54 <HAL_RCC_GetSysClockFreq+0x110>)
 8003bec:	617b      	str	r3, [r7, #20]
      break;
 8003bee:	e005      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003bf0:	4b19      	ldr	r3, [pc, #100]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x114>)
 8003bf2:	617b      	str	r3, [r7, #20]
      break;
 8003bf4:	e002      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	617b      	str	r3, [r7, #20]
      break;
 8003bfa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003bfc:	4b13      	ldr	r3, [pc, #76]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	091b      	lsrs	r3, r3, #4
 8003c02:	f003 0307 	and.w	r3, r3, #7
 8003c06:	3301      	adds	r3, #1
 8003c08:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003c0a:	4b10      	ldr	r3, [pc, #64]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	0a1b      	lsrs	r3, r3, #8
 8003c10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c14:	697a      	ldr	r2, [r7, #20]
 8003c16:	fb03 f202 	mul.w	r2, r3, r2
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c20:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c22:	4b0a      	ldr	r3, [pc, #40]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x108>)
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	0e5b      	lsrs	r3, r3, #25
 8003c28:	f003 0303 	and.w	r3, r3, #3
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	005b      	lsls	r3, r3, #1
 8003c30:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c3a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003c3c:	69bb      	ldr	r3, [r7, #24]
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3724      	adds	r7, #36	; 0x24
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	40021000 	.word	0x40021000
 8003c50:	08006964 	.word	0x08006964
 8003c54:	00f42400 	.word	0x00f42400
 8003c58:	007a1200 	.word	0x007a1200

08003c5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c60:	4b03      	ldr	r3, [pc, #12]	; (8003c70 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c62:	681b      	ldr	r3, [r3, #0]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	20000094 	.word	0x20000094

08003c74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003c78:	f7ff fff0 	bl	8003c5c <HAL_RCC_GetHCLKFreq>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	4b06      	ldr	r3, [pc, #24]	; (8003c98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	0a1b      	lsrs	r3, r3, #8
 8003c84:	f003 0307 	and.w	r3, r3, #7
 8003c88:	4904      	ldr	r1, [pc, #16]	; (8003c9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c8a:	5ccb      	ldrb	r3, [r1, r3]
 8003c8c:	f003 031f 	and.w	r3, r3, #31
 8003c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	40021000 	.word	0x40021000
 8003c9c:	0800695c 	.word	0x0800695c

08003ca0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ca4:	f7ff ffda 	bl	8003c5c <HAL_RCC_GetHCLKFreq>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	4b06      	ldr	r3, [pc, #24]	; (8003cc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	0adb      	lsrs	r3, r3, #11
 8003cb0:	f003 0307 	and.w	r3, r3, #7
 8003cb4:	4904      	ldr	r1, [pc, #16]	; (8003cc8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003cb6:	5ccb      	ldrb	r3, [r1, r3]
 8003cb8:	f003 031f 	and.w	r3, r3, #31
 8003cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	40021000 	.word	0x40021000
 8003cc8:	0800695c 	.word	0x0800695c

08003ccc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	220f      	movs	r2, #15
 8003cda:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003cdc:	4b12      	ldr	r3, [pc, #72]	; (8003d28 <HAL_RCC_GetClockConfig+0x5c>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f003 0203 	and.w	r2, r3, #3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003ce8:	4b0f      	ldr	r3, [pc, #60]	; (8003d28 <HAL_RCC_GetClockConfig+0x5c>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003cf4:	4b0c      	ldr	r3, [pc, #48]	; (8003d28 <HAL_RCC_GetClockConfig+0x5c>)
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003d00:	4b09      	ldr	r3, [pc, #36]	; (8003d28 <HAL_RCC_GetClockConfig+0x5c>)
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	08db      	lsrs	r3, r3, #3
 8003d06:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003d0e:	4b07      	ldr	r3, [pc, #28]	; (8003d2c <HAL_RCC_GetClockConfig+0x60>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0207 	and.w	r2, r3, #7
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	601a      	str	r2, [r3, #0]
}
 8003d1a:	bf00      	nop
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	40021000 	.word	0x40021000
 8003d2c:	40022000 	.word	0x40022000

08003d30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003d38:	2300      	movs	r3, #0
 8003d3a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003d3c:	4b2a      	ldr	r3, [pc, #168]	; (8003de8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d003      	beq.n	8003d50 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003d48:	f7ff f984 	bl	8003054 <HAL_PWREx_GetVoltageRange>
 8003d4c:	6178      	str	r0, [r7, #20]
 8003d4e:	e014      	b.n	8003d7a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d50:	4b25      	ldr	r3, [pc, #148]	; (8003de8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d54:	4a24      	ldr	r2, [pc, #144]	; (8003de8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d5a:	6593      	str	r3, [r2, #88]	; 0x58
 8003d5c:	4b22      	ldr	r3, [pc, #136]	; (8003de8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d64:	60fb      	str	r3, [r7, #12]
 8003d66:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003d68:	f7ff f974 	bl	8003054 <HAL_PWREx_GetVoltageRange>
 8003d6c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003d6e:	4b1e      	ldr	r3, [pc, #120]	; (8003de8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d72:	4a1d      	ldr	r2, [pc, #116]	; (8003de8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d78:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d80:	d10b      	bne.n	8003d9a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2b80      	cmp	r3, #128	; 0x80
 8003d86:	d919      	bls.n	8003dbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2ba0      	cmp	r3, #160	; 0xa0
 8003d8c:	d902      	bls.n	8003d94 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d8e:	2302      	movs	r3, #2
 8003d90:	613b      	str	r3, [r7, #16]
 8003d92:	e013      	b.n	8003dbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d94:	2301      	movs	r3, #1
 8003d96:	613b      	str	r3, [r7, #16]
 8003d98:	e010      	b.n	8003dbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2b80      	cmp	r3, #128	; 0x80
 8003d9e:	d902      	bls.n	8003da6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003da0:	2303      	movs	r3, #3
 8003da2:	613b      	str	r3, [r7, #16]
 8003da4:	e00a      	b.n	8003dbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2b80      	cmp	r3, #128	; 0x80
 8003daa:	d102      	bne.n	8003db2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003dac:	2302      	movs	r3, #2
 8003dae:	613b      	str	r3, [r7, #16]
 8003db0:	e004      	b.n	8003dbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2b70      	cmp	r3, #112	; 0x70
 8003db6:	d101      	bne.n	8003dbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003db8:	2301      	movs	r3, #1
 8003dba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003dbc:	4b0b      	ldr	r3, [pc, #44]	; (8003dec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f023 0207 	bic.w	r2, r3, #7
 8003dc4:	4909      	ldr	r1, [pc, #36]	; (8003dec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003dcc:	4b07      	ldr	r3, [pc, #28]	; (8003dec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0307 	and.w	r3, r3, #7
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d001      	beq.n	8003dde <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e000      	b.n	8003de0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3718      	adds	r7, #24
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	40021000 	.word	0x40021000
 8003dec:	40022000 	.word	0x40022000

08003df0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003df8:	2300      	movs	r3, #0
 8003dfa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d031      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e10:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e14:	d01a      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003e16:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e1a:	d814      	bhi.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d009      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003e20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e24:	d10f      	bne.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003e26:	4b5d      	ldr	r3, [pc, #372]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	4a5c      	ldr	r2, [pc, #368]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e30:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e32:	e00c      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	3304      	adds	r3, #4
 8003e38:	2100      	movs	r1, #0
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 f9de 	bl	80041fc <RCCEx_PLLSAI1_Config>
 8003e40:	4603      	mov	r3, r0
 8003e42:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e44:	e003      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	74fb      	strb	r3, [r7, #19]
      break;
 8003e4a:	e000      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003e4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e4e:	7cfb      	ldrb	r3, [r7, #19]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d10b      	bne.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e54:	4b51      	ldr	r3, [pc, #324]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e5a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e62:	494e      	ldr	r1, [pc, #312]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003e6a:	e001      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e6c:	7cfb      	ldrb	r3, [r7, #19]
 8003e6e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f000 809e 	beq.w	8003fba <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e82:	4b46      	ldr	r3, [pc, #280]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e000      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003e92:	2300      	movs	r3, #0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00d      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e98:	4b40      	ldr	r3, [pc, #256]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e9c:	4a3f      	ldr	r2, [pc, #252]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ea2:	6593      	str	r3, [r2, #88]	; 0x58
 8003ea4:	4b3d      	ldr	r3, [pc, #244]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eac:	60bb      	str	r3, [r7, #8]
 8003eae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003eb4:	4b3a      	ldr	r3, [pc, #232]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a39      	ldr	r2, [pc, #228]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003eba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ebe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ec0:	f7fe fe0a 	bl	8002ad8 <HAL_GetTick>
 8003ec4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ec6:	e009      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ec8:	f7fe fe06 	bl	8002ad8 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d902      	bls.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	74fb      	strb	r3, [r7, #19]
        break;
 8003eda:	e005      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003edc:	4b30      	ldr	r3, [pc, #192]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d0ef      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003ee8:	7cfb      	ldrb	r3, [r7, #19]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d15a      	bne.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003eee:	4b2b      	ldr	r3, [pc, #172]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ef8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d01e      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d019      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f0a:	4b24      	ldr	r3, [pc, #144]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f14:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f16:	4b21      	ldr	r3, [pc, #132]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f1c:	4a1f      	ldr	r2, [pc, #124]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f26:	4b1d      	ldr	r3, [pc, #116]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f2c:	4a1b      	ldr	r2, [pc, #108]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f36:	4a19      	ldr	r2, [pc, #100]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	f003 0301 	and.w	r3, r3, #1
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d016      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f48:	f7fe fdc6 	bl	8002ad8 <HAL_GetTick>
 8003f4c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f4e:	e00b      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f50:	f7fe fdc2 	bl	8002ad8 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d902      	bls.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	74fb      	strb	r3, [r7, #19]
            break;
 8003f66:	e006      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f68:	4b0c      	ldr	r3, [pc, #48]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d0ec      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003f76:	7cfb      	ldrb	r3, [r7, #19]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d10b      	bne.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f7c:	4b07      	ldr	r3, [pc, #28]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f8a:	4904      	ldr	r1, [pc, #16]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003f92:	e009      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f94:	7cfb      	ldrb	r3, [r7, #19]
 8003f96:	74bb      	strb	r3, [r7, #18]
 8003f98:	e006      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003f9a:	bf00      	nop
 8003f9c:	40021000 	.word	0x40021000
 8003fa0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fa4:	7cfb      	ldrb	r3, [r7, #19]
 8003fa6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fa8:	7c7b      	ldrb	r3, [r7, #17]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d105      	bne.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fae:	4b8a      	ldr	r3, [pc, #552]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb2:	4a89      	ldr	r2, [pc, #548]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003fb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fb8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00a      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fc6:	4b84      	ldr	r3, [pc, #528]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fcc:	f023 0203 	bic.w	r2, r3, #3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	4980      	ldr	r1, [pc, #512]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00a      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fe8:	4b7b      	ldr	r3, [pc, #492]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fee:	f023 020c 	bic.w	r2, r3, #12
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff6:	4978      	ldr	r1, [pc, #480]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0320 	and.w	r3, r3, #32
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00a      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800400a:	4b73      	ldr	r3, [pc, #460]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800400c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004010:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004018:	496f      	ldr	r1, [pc, #444]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800401a:	4313      	orrs	r3, r2
 800401c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00a      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800402c:	4b6a      	ldr	r3, [pc, #424]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800402e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004032:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800403a:	4967      	ldr	r1, [pc, #412]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800403c:	4313      	orrs	r3, r2
 800403e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00a      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800404e:	4b62      	ldr	r3, [pc, #392]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004054:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405c:	495e      	ldr	r1, [pc, #376]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800405e:	4313      	orrs	r3, r2
 8004060:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00a      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004070:	4b59      	ldr	r3, [pc, #356]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004076:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407e:	4956      	ldr	r1, [pc, #344]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004080:	4313      	orrs	r3, r2
 8004082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00a      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004092:	4b51      	ldr	r3, [pc, #324]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004098:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a0:	494d      	ldr	r1, [pc, #308]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d028      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040b4:	4b48      	ldr	r3, [pc, #288]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80040b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	4945      	ldr	r1, [pc, #276]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040d2:	d106      	bne.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040d4:	4b40      	ldr	r3, [pc, #256]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	4a3f      	ldr	r2, [pc, #252]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80040da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040de:	60d3      	str	r3, [r2, #12]
 80040e0:	e011      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040ea:	d10c      	bne.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	3304      	adds	r3, #4
 80040f0:	2101      	movs	r1, #1
 80040f2:	4618      	mov	r0, r3
 80040f4:	f000 f882 	bl	80041fc <RCCEx_PLLSAI1_Config>
 80040f8:	4603      	mov	r3, r0
 80040fa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80040fc:	7cfb      	ldrb	r3, [r7, #19]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004102:	7cfb      	ldrb	r3, [r7, #19]
 8004104:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d028      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004112:	4b31      	ldr	r3, [pc, #196]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004118:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004120:	492d      	ldr	r1, [pc, #180]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004122:	4313      	orrs	r3, r2
 8004124:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800412c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004130:	d106      	bne.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004132:	4b29      	ldr	r3, [pc, #164]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	4a28      	ldr	r2, [pc, #160]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004138:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800413c:	60d3      	str	r3, [r2, #12]
 800413e:	e011      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004144:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004148:	d10c      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	3304      	adds	r3, #4
 800414e:	2101      	movs	r1, #1
 8004150:	4618      	mov	r0, r3
 8004152:	f000 f853 	bl	80041fc <RCCEx_PLLSAI1_Config>
 8004156:	4603      	mov	r3, r0
 8004158:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800415a:	7cfb      	ldrb	r3, [r7, #19]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d001      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004160:	7cfb      	ldrb	r3, [r7, #19]
 8004162:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d01c      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004170:	4b19      	ldr	r3, [pc, #100]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004176:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800417e:	4916      	ldr	r1, [pc, #88]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004180:	4313      	orrs	r3, r2
 8004182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800418a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800418e:	d10c      	bne.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	3304      	adds	r3, #4
 8004194:	2102      	movs	r1, #2
 8004196:	4618      	mov	r0, r3
 8004198:	f000 f830 	bl	80041fc <RCCEx_PLLSAI1_Config>
 800419c:	4603      	mov	r3, r0
 800419e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041a0:	7cfb      	ldrb	r3, [r7, #19]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80041a6:	7cfb      	ldrb	r3, [r7, #19]
 80041a8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00a      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80041b6:	4b08      	ldr	r3, [pc, #32]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041bc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041c4:	4904      	ldr	r1, [pc, #16]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80041cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3718      	adds	r7, #24
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	40021000 	.word	0x40021000

080041dc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80041dc:	b480      	push	{r7}
 80041de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80041e0:	4b05      	ldr	r3, [pc, #20]	; (80041f8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a04      	ldr	r2, [pc, #16]	; (80041f8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80041e6:	f043 0304 	orr.w	r3, r3, #4
 80041ea:	6013      	str	r3, [r2, #0]
}
 80041ec:	bf00      	nop
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	40021000 	.word	0x40021000

080041fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004206:	2300      	movs	r3, #0
 8004208:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800420a:	4b74      	ldr	r3, [pc, #464]	; (80043dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	f003 0303 	and.w	r3, r3, #3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d018      	beq.n	8004248 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004216:	4b71      	ldr	r3, [pc, #452]	; (80043dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	f003 0203 	and.w	r2, r3, #3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	429a      	cmp	r2, r3
 8004224:	d10d      	bne.n	8004242 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
       ||
 800422a:	2b00      	cmp	r3, #0
 800422c:	d009      	beq.n	8004242 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800422e:	4b6b      	ldr	r3, [pc, #428]	; (80043dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	091b      	lsrs	r3, r3, #4
 8004234:	f003 0307 	and.w	r3, r3, #7
 8004238:	1c5a      	adds	r2, r3, #1
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
       ||
 800423e:	429a      	cmp	r2, r3
 8004240:	d047      	beq.n	80042d2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	73fb      	strb	r3, [r7, #15]
 8004246:	e044      	b.n	80042d2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2b03      	cmp	r3, #3
 800424e:	d018      	beq.n	8004282 <RCCEx_PLLSAI1_Config+0x86>
 8004250:	2b03      	cmp	r3, #3
 8004252:	d825      	bhi.n	80042a0 <RCCEx_PLLSAI1_Config+0xa4>
 8004254:	2b01      	cmp	r3, #1
 8004256:	d002      	beq.n	800425e <RCCEx_PLLSAI1_Config+0x62>
 8004258:	2b02      	cmp	r3, #2
 800425a:	d009      	beq.n	8004270 <RCCEx_PLLSAI1_Config+0x74>
 800425c:	e020      	b.n	80042a0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800425e:	4b5f      	ldr	r3, [pc, #380]	; (80043dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b00      	cmp	r3, #0
 8004268:	d11d      	bne.n	80042a6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800426e:	e01a      	b.n	80042a6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004270:	4b5a      	ldr	r3, [pc, #360]	; (80043dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004278:	2b00      	cmp	r3, #0
 800427a:	d116      	bne.n	80042aa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004280:	e013      	b.n	80042aa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004282:	4b56      	ldr	r3, [pc, #344]	; (80043dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d10f      	bne.n	80042ae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800428e:	4b53      	ldr	r3, [pc, #332]	; (80043dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d109      	bne.n	80042ae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800429e:	e006      	b.n	80042ae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	73fb      	strb	r3, [r7, #15]
      break;
 80042a4:	e004      	b.n	80042b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042a6:	bf00      	nop
 80042a8:	e002      	b.n	80042b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042aa:	bf00      	nop
 80042ac:	e000      	b.n	80042b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80042b0:	7bfb      	ldrb	r3, [r7, #15]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10d      	bne.n	80042d2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80042b6:	4b49      	ldr	r3, [pc, #292]	; (80043dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6819      	ldr	r1, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	3b01      	subs	r3, #1
 80042c8:	011b      	lsls	r3, r3, #4
 80042ca:	430b      	orrs	r3, r1
 80042cc:	4943      	ldr	r1, [pc, #268]	; (80043dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80042d2:	7bfb      	ldrb	r3, [r7, #15]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d17c      	bne.n	80043d2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80042d8:	4b40      	ldr	r3, [pc, #256]	; (80043dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a3f      	ldr	r2, [pc, #252]	; (80043dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80042de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80042e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042e4:	f7fe fbf8 	bl	8002ad8 <HAL_GetTick>
 80042e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80042ea:	e009      	b.n	8004300 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042ec:	f7fe fbf4 	bl	8002ad8 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d902      	bls.n	8004300 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	73fb      	strb	r3, [r7, #15]
        break;
 80042fe:	e005      	b.n	800430c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004300:	4b36      	ldr	r3, [pc, #216]	; (80043dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1ef      	bne.n	80042ec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800430c:	7bfb      	ldrb	r3, [r7, #15]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d15f      	bne.n	80043d2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d110      	bne.n	800433a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004318:	4b30      	ldr	r3, [pc, #192]	; (80043dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004320:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	6892      	ldr	r2, [r2, #8]
 8004328:	0211      	lsls	r1, r2, #8
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	68d2      	ldr	r2, [r2, #12]
 800432e:	06d2      	lsls	r2, r2, #27
 8004330:	430a      	orrs	r2, r1
 8004332:	492a      	ldr	r1, [pc, #168]	; (80043dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004334:	4313      	orrs	r3, r2
 8004336:	610b      	str	r3, [r1, #16]
 8004338:	e027      	b.n	800438a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d112      	bne.n	8004366 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004340:	4b26      	ldr	r3, [pc, #152]	; (80043dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004348:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	6892      	ldr	r2, [r2, #8]
 8004350:	0211      	lsls	r1, r2, #8
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	6912      	ldr	r2, [r2, #16]
 8004356:	0852      	lsrs	r2, r2, #1
 8004358:	3a01      	subs	r2, #1
 800435a:	0552      	lsls	r2, r2, #21
 800435c:	430a      	orrs	r2, r1
 800435e:	491f      	ldr	r1, [pc, #124]	; (80043dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004360:	4313      	orrs	r3, r2
 8004362:	610b      	str	r3, [r1, #16]
 8004364:	e011      	b.n	800438a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004366:	4b1d      	ldr	r3, [pc, #116]	; (80043dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800436e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	6892      	ldr	r2, [r2, #8]
 8004376:	0211      	lsls	r1, r2, #8
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	6952      	ldr	r2, [r2, #20]
 800437c:	0852      	lsrs	r2, r2, #1
 800437e:	3a01      	subs	r2, #1
 8004380:	0652      	lsls	r2, r2, #25
 8004382:	430a      	orrs	r2, r1
 8004384:	4915      	ldr	r1, [pc, #84]	; (80043dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004386:	4313      	orrs	r3, r2
 8004388:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800438a:	4b14      	ldr	r3, [pc, #80]	; (80043dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a13      	ldr	r2, [pc, #76]	; (80043dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004390:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004394:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004396:	f7fe fb9f 	bl	8002ad8 <HAL_GetTick>
 800439a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800439c:	e009      	b.n	80043b2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800439e:	f7fe fb9b 	bl	8002ad8 <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d902      	bls.n	80043b2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	73fb      	strb	r3, [r7, #15]
          break;
 80043b0:	e005      	b.n	80043be <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043b2:	4b0a      	ldr	r3, [pc, #40]	; (80043dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d0ef      	beq.n	800439e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80043be:	7bfb      	ldrb	r3, [r7, #15]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d106      	bne.n	80043d2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80043c4:	4b05      	ldr	r3, [pc, #20]	; (80043dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80043c6:	691a      	ldr	r2, [r3, #16]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	4903      	ldr	r1, [pc, #12]	; (80043dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80043d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3710      	adds	r7, #16
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	40021000 	.word	0x40021000

080043e0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d079      	beq.n	80044e6 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d106      	bne.n	800440c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7fe f8cc 	bl	80025a4 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2202      	movs	r2, #2
 8004410:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	f003 0310 	and.w	r3, r3, #16
 800441e:	2b10      	cmp	r3, #16
 8004420:	d058      	beq.n	80044d4 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	22ca      	movs	r2, #202	; 0xca
 8004428:	625a      	str	r2, [r3, #36]	; 0x24
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2253      	movs	r2, #83	; 0x53
 8004430:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 f880 	bl	8004538 <RTC_EnterInitMode>
 8004438:	4603      	mov	r3, r0
 800443a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800443c:	7bfb      	ldrb	r3, [r7, #15]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d127      	bne.n	8004492 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	6812      	ldr	r2, [r2, #0]
 800444c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004450:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004454:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	6899      	ldr	r1, [r3, #8]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685a      	ldr	r2, [r3, #4]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	431a      	orrs	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	431a      	orrs	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	430a      	orrs	r2, r1
 8004472:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	68d2      	ldr	r2, [r2, #12]
 800447c:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	6919      	ldr	r1, [r3, #16]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	041a      	lsls	r2, r3, #16
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	430a      	orrs	r2, r1
 8004490:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f884 	bl	80045a0 <RTC_ExitInitMode>
 8004498:	4603      	mov	r3, r0
 800449a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800449c:	7bfb      	ldrb	r3, [r7, #15]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d113      	bne.n	80044ca <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f022 0203 	bic.w	r2, r2, #3
 80044b0:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	69da      	ldr	r2, [r3, #28]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	695b      	ldr	r3, [r3, #20]
 80044c0:	431a      	orrs	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	22ff      	movs	r2, #255	; 0xff
 80044d0:	625a      	str	r2, [r3, #36]	; 0x24
 80044d2:	e001      	b.n	80044d8 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80044d4:	2300      	movs	r3, #0
 80044d6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80044d8:	7bfb      	ldrb	r3, [r7, #15]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d103      	bne.n	80044e6 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 80044e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a0d      	ldr	r2, [pc, #52]	; (8004534 <HAL_RTC_WaitForSynchro+0x44>)
 80044fe:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8004500:	f7fe faea 	bl	8002ad8 <HAL_GetTick>
 8004504:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004506:	e009      	b.n	800451c <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004508:	f7fe fae6 	bl	8002ad8 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004516:	d901      	bls.n	800451c <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e007      	b.n	800452c <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	f003 0320 	and.w	r3, r3, #32
 8004526:	2b00      	cmp	r3, #0
 8004528:	d0ee      	beq.n	8004508 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3710      	adds	r7, #16
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	0003ff5f 	.word	0x0003ff5f

08004538 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004540:	2300      	movs	r3, #0
 8004542:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800454e:	2b00      	cmp	r3, #0
 8004550:	d120      	bne.n	8004594 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f04f 32ff 	mov.w	r2, #4294967295
 800455a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800455c:	f7fe fabc 	bl	8002ad8 <HAL_GetTick>
 8004560:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004562:	e00d      	b.n	8004580 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004564:	f7fe fab8 	bl	8002ad8 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004572:	d905      	bls.n	8004580 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2203      	movs	r2, #3
 800457c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800458a:	2b00      	cmp	r3, #0
 800458c:	d102      	bne.n	8004594 <RTC_EnterInitMode+0x5c>
 800458e:	7bfb      	ldrb	r3, [r7, #15]
 8004590:	2b03      	cmp	r3, #3
 8004592:	d1e7      	bne.n	8004564 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8004594:	7bfb      	ldrb	r3, [r7, #15]
}
 8004596:	4618      	mov	r0, r3
 8004598:	3710      	adds	r7, #16
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
	...

080045a0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045a8:	2300      	movs	r3, #0
 80045aa:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80045ac:	4b1a      	ldr	r3, [pc, #104]	; (8004618 <RTC_ExitInitMode+0x78>)
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	4a19      	ldr	r2, [pc, #100]	; (8004618 <RTC_ExitInitMode+0x78>)
 80045b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045b6:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80045b8:	4b17      	ldr	r3, [pc, #92]	; (8004618 <RTC_ExitInitMode+0x78>)
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f003 0320 	and.w	r3, r3, #32
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d10c      	bne.n	80045de <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f7ff ff93 	bl	80044f0 <HAL_RTC_WaitForSynchro>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d01e      	beq.n	800460e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2203      	movs	r2, #3
 80045d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	73fb      	strb	r3, [r7, #15]
 80045dc:	e017      	b.n	800460e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80045de:	4b0e      	ldr	r3, [pc, #56]	; (8004618 <RTC_ExitInitMode+0x78>)
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	4a0d      	ldr	r2, [pc, #52]	; (8004618 <RTC_ExitInitMode+0x78>)
 80045e4:	f023 0320 	bic.w	r3, r3, #32
 80045e8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7ff ff80 	bl	80044f0 <HAL_RTC_WaitForSynchro>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d005      	beq.n	8004602 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2203      	movs	r2, #3
 80045fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004602:	4b05      	ldr	r3, [pc, #20]	; (8004618 <RTC_ExitInitMode+0x78>)
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	4a04      	ldr	r2, [pc, #16]	; (8004618 <RTC_ExitInitMode+0x78>)
 8004608:	f043 0320 	orr.w	r3, r3, #32
 800460c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800460e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004610:	4618      	mov	r0, r3
 8004612:	3710      	adds	r7, #16
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	40002800 	.word	0x40002800

0800461c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d101      	bne.n	800462e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e095      	b.n	800475a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004632:	2b00      	cmp	r3, #0
 8004634:	d108      	bne.n	8004648 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800463e:	d009      	beq.n	8004654 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	61da      	str	r2, [r3, #28]
 8004646:	e005      	b.n	8004654 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d106      	bne.n	8004674 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f7fd ffc8 	bl	8002604 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2202      	movs	r2, #2
 8004678:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800468a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004694:	d902      	bls.n	800469c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004696:	2300      	movs	r3, #0
 8004698:	60fb      	str	r3, [r7, #12]
 800469a:	e002      	b.n	80046a2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800469c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046a0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80046aa:	d007      	beq.n	80046bc <HAL_SPI_Init+0xa0>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80046b4:	d002      	beq.n	80046bc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80046cc:	431a      	orrs	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	431a      	orrs	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	695b      	ldr	r3, [r3, #20]
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	431a      	orrs	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046ea:	431a      	orrs	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	69db      	ldr	r3, [r3, #28]
 80046f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046f4:	431a      	orrs	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046fe:	ea42 0103 	orr.w	r1, r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004706:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	0c1b      	lsrs	r3, r3, #16
 8004718:	f003 0204 	and.w	r2, r3, #4
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004720:	f003 0310 	and.w	r3, r3, #16
 8004724:	431a      	orrs	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800472a:	f003 0308 	and.w	r3, r3, #8
 800472e:	431a      	orrs	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004738:	ea42 0103 	orr.w	r1, r2, r3
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	430a      	orrs	r2, r1
 8004748:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3710      	adds	r7, #16
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004762:	b580      	push	{r7, lr}
 8004764:	b088      	sub	sp, #32
 8004766:	af00      	add	r7, sp, #0
 8004768:	60f8      	str	r0, [r7, #12]
 800476a:	60b9      	str	r1, [r7, #8]
 800476c:	603b      	str	r3, [r7, #0]
 800476e:	4613      	mov	r3, r2
 8004770:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004772:	2300      	movs	r3, #0
 8004774:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800477c:	2b01      	cmp	r3, #1
 800477e:	d101      	bne.n	8004784 <HAL_SPI_Transmit+0x22>
 8004780:	2302      	movs	r3, #2
 8004782:	e15f      	b.n	8004a44 <HAL_SPI_Transmit+0x2e2>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800478c:	f7fe f9a4 	bl	8002ad8 <HAL_GetTick>
 8004790:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004792:	88fb      	ldrh	r3, [r7, #6]
 8004794:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d002      	beq.n	80047a8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80047a2:	2302      	movs	r3, #2
 80047a4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047a6:	e148      	b.n	8004a3a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d002      	beq.n	80047b4 <HAL_SPI_Transmit+0x52>
 80047ae:	88fb      	ldrh	r3, [r7, #6]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d102      	bne.n	80047ba <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047b8:	e13f      	b.n	8004a3a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2203      	movs	r2, #3
 80047be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	88fa      	ldrh	r2, [r7, #6]
 80047d2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	88fa      	ldrh	r2, [r7, #6]
 80047d8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2200      	movs	r2, #0
 80047f4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004804:	d10f      	bne.n	8004826 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004814:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004824:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004830:	2b40      	cmp	r3, #64	; 0x40
 8004832:	d007      	beq.n	8004844 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004842:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800484c:	d94f      	bls.n	80048ee <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d002      	beq.n	800485c <HAL_SPI_Transmit+0xfa>
 8004856:	8afb      	ldrh	r3, [r7, #22]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d142      	bne.n	80048e2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004860:	881a      	ldrh	r2, [r3, #0]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486c:	1c9a      	adds	r2, r3, #2
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004876:	b29b      	uxth	r3, r3
 8004878:	3b01      	subs	r3, #1
 800487a:	b29a      	uxth	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004880:	e02f      	b.n	80048e2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b02      	cmp	r3, #2
 800488e:	d112      	bne.n	80048b6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004894:	881a      	ldrh	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a0:	1c9a      	adds	r2, r3, #2
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	3b01      	subs	r3, #1
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80048b4:	e015      	b.n	80048e2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048b6:	f7fe f90f 	bl	8002ad8 <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	683a      	ldr	r2, [r7, #0]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d803      	bhi.n	80048ce <HAL_SPI_Transmit+0x16c>
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048cc:	d102      	bne.n	80048d4 <HAL_SPI_Transmit+0x172>
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d106      	bne.n	80048e2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80048e0:	e0ab      	b.n	8004a3a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1ca      	bne.n	8004882 <HAL_SPI_Transmit+0x120>
 80048ec:	e080      	b.n	80049f0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d002      	beq.n	80048fc <HAL_SPI_Transmit+0x19a>
 80048f6:	8afb      	ldrh	r3, [r7, #22]
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d174      	bne.n	80049e6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004900:	b29b      	uxth	r3, r3
 8004902:	2b01      	cmp	r3, #1
 8004904:	d912      	bls.n	800492c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490a:	881a      	ldrh	r2, [r3, #0]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004916:	1c9a      	adds	r2, r3, #2
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004920:	b29b      	uxth	r3, r3
 8004922:	3b02      	subs	r3, #2
 8004924:	b29a      	uxth	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	87da      	strh	r2, [r3, #62]	; 0x3e
 800492a:	e05c      	b.n	80049e6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	330c      	adds	r3, #12
 8004936:	7812      	ldrb	r2, [r2, #0]
 8004938:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493e:	1c5a      	adds	r2, r3, #1
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004948:	b29b      	uxth	r3, r3
 800494a:	3b01      	subs	r3, #1
 800494c:	b29a      	uxth	r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004952:	e048      	b.n	80049e6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b02      	cmp	r3, #2
 8004960:	d12b      	bne.n	80049ba <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004966:	b29b      	uxth	r3, r3
 8004968:	2b01      	cmp	r3, #1
 800496a:	d912      	bls.n	8004992 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004970:	881a      	ldrh	r2, [r3, #0]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497c:	1c9a      	adds	r2, r3, #2
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004986:	b29b      	uxth	r3, r3
 8004988:	3b02      	subs	r3, #2
 800498a:	b29a      	uxth	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004990:	e029      	b.n	80049e6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	330c      	adds	r3, #12
 800499c:	7812      	ldrb	r2, [r2, #0]
 800499e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a4:	1c5a      	adds	r2, r3, #1
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	3b01      	subs	r3, #1
 80049b2:	b29a      	uxth	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049b8:	e015      	b.n	80049e6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049ba:	f7fe f88d 	bl	8002ad8 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	683a      	ldr	r2, [r7, #0]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d803      	bhi.n	80049d2 <HAL_SPI_Transmit+0x270>
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d0:	d102      	bne.n	80049d8 <HAL_SPI_Transmit+0x276>
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d106      	bne.n	80049e6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80049e4:	e029      	b.n	8004a3a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d1b1      	bne.n	8004954 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049f0:	69ba      	ldr	r2, [r7, #24]
 80049f2:	6839      	ldr	r1, [r7, #0]
 80049f4:	68f8      	ldr	r0, [r7, #12]
 80049f6:	f000 fb69 	bl	80050cc <SPI_EndRxTxTransaction>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d002      	beq.n	8004a06 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2220      	movs	r2, #32
 8004a04:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10a      	bne.n	8004a24 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a0e:	2300      	movs	r3, #0
 8004a10:	613b      	str	r3, [r7, #16]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	613b      	str	r3, [r7, #16]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	613b      	str	r3, [r7, #16]
 8004a22:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d002      	beq.n	8004a32 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	77fb      	strb	r3, [r7, #31]
 8004a30:	e003      	b.n	8004a3a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004a42:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3720      	adds	r7, #32
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b08a      	sub	sp, #40	; 0x28
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	607a      	str	r2, [r7, #4]
 8004a58:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d101      	bne.n	8004a72 <HAL_SPI_TransmitReceive+0x26>
 8004a6e:	2302      	movs	r3, #2
 8004a70:	e20a      	b.n	8004e88 <HAL_SPI_TransmitReceive+0x43c>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2201      	movs	r2, #1
 8004a76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a7a:	f7fe f82d 	bl	8002ad8 <HAL_GetTick>
 8004a7e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a86:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004a8e:	887b      	ldrh	r3, [r7, #2]
 8004a90:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004a92:	887b      	ldrh	r3, [r7, #2]
 8004a94:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004a96:	7efb      	ldrb	r3, [r7, #27]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d00e      	beq.n	8004aba <HAL_SPI_TransmitReceive+0x6e>
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004aa2:	d106      	bne.n	8004ab2 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d102      	bne.n	8004ab2 <HAL_SPI_TransmitReceive+0x66>
 8004aac:	7efb      	ldrb	r3, [r7, #27]
 8004aae:	2b04      	cmp	r3, #4
 8004ab0:	d003      	beq.n	8004aba <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004ab8:	e1e0      	b.n	8004e7c <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d005      	beq.n	8004acc <HAL_SPI_TransmitReceive+0x80>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d002      	beq.n	8004acc <HAL_SPI_TransmitReceive+0x80>
 8004ac6:	887b      	ldrh	r3, [r7, #2]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d103      	bne.n	8004ad4 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004ad2:	e1d3      	b.n	8004e7c <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	2b04      	cmp	r3, #4
 8004ade:	d003      	beq.n	8004ae8 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2205      	movs	r2, #5
 8004ae4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	887a      	ldrh	r2, [r7, #2]
 8004af8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	887a      	ldrh	r2, [r7, #2]
 8004b00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	887a      	ldrh	r2, [r7, #2]
 8004b0e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	887a      	ldrh	r2, [r7, #2]
 8004b14:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b2a:	d802      	bhi.n	8004b32 <HAL_SPI_TransmitReceive+0xe6>
 8004b2c:	8a3b      	ldrh	r3, [r7, #16]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d908      	bls.n	8004b44 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	685a      	ldr	r2, [r3, #4]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b40:	605a      	str	r2, [r3, #4]
 8004b42:	e007      	b.n	8004b54 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	685a      	ldr	r2, [r3, #4]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b52:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b5e:	2b40      	cmp	r3, #64	; 0x40
 8004b60:	d007      	beq.n	8004b72 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b70:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b7a:	f240 8081 	bls.w	8004c80 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d002      	beq.n	8004b8c <HAL_SPI_TransmitReceive+0x140>
 8004b86:	8a7b      	ldrh	r3, [r7, #18]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d16d      	bne.n	8004c68 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b90:	881a      	ldrh	r2, [r3, #0]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9c:	1c9a      	adds	r2, r3, #2
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bb0:	e05a      	b.n	8004c68 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	f003 0302 	and.w	r3, r3, #2
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d11b      	bne.n	8004bf8 <HAL_SPI_TransmitReceive+0x1ac>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d016      	beq.n	8004bf8 <HAL_SPI_TransmitReceive+0x1ac>
 8004bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d113      	bne.n	8004bf8 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd4:	881a      	ldrh	r2, [r3, #0]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be0:	1c9a      	adds	r2, r3, #2
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	3b01      	subs	r3, #1
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f003 0301 	and.w	r3, r3, #1
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d11c      	bne.n	8004c40 <HAL_SPI_TransmitReceive+0x1f4>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d016      	beq.n	8004c40 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68da      	ldr	r2, [r3, #12]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1c:	b292      	uxth	r2, r2
 8004c1e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c24:	1c9a      	adds	r2, r3, #2
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	3b01      	subs	r3, #1
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004c40:	f7fd ff4a 	bl	8002ad8 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d80b      	bhi.n	8004c68 <HAL_SPI_TransmitReceive+0x21c>
 8004c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c56:	d007      	beq.n	8004c68 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004c66:	e109      	b.n	8004e7c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d19f      	bne.n	8004bb2 <HAL_SPI_TransmitReceive+0x166>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d199      	bne.n	8004bb2 <HAL_SPI_TransmitReceive+0x166>
 8004c7e:	e0e3      	b.n	8004e48 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d003      	beq.n	8004c90 <HAL_SPI_TransmitReceive+0x244>
 8004c88:	8a7b      	ldrh	r3, [r7, #18]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	f040 80cf 	bne.w	8004e2e <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d912      	bls.n	8004cc0 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9e:	881a      	ldrh	r2, [r3, #0]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004caa:	1c9a      	adds	r2, r3, #2
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	3b02      	subs	r3, #2
 8004cb8:	b29a      	uxth	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004cbe:	e0b6      	b.n	8004e2e <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	330c      	adds	r3, #12
 8004cca:	7812      	ldrb	r2, [r2, #0]
 8004ccc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd2:	1c5a      	adds	r2, r3, #1
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	b29a      	uxth	r2, r3
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ce6:	e0a2      	b.n	8004e2e <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d134      	bne.n	8004d60 <HAL_SPI_TransmitReceive+0x314>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d02f      	beq.n	8004d60 <HAL_SPI_TransmitReceive+0x314>
 8004d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d12c      	bne.n	8004d60 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d912      	bls.n	8004d36 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d14:	881a      	ldrh	r2, [r3, #0]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d20:	1c9a      	adds	r2, r3, #2
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	3b02      	subs	r3, #2
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d34:	e012      	b.n	8004d5c <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	330c      	adds	r3, #12
 8004d40:	7812      	ldrb	r2, [r2, #0]
 8004d42:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d48:	1c5a      	adds	r2, r3, #1
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	3b01      	subs	r3, #1
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d148      	bne.n	8004e00 <HAL_SPI_TransmitReceive+0x3b4>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d042      	beq.n	8004e00 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d923      	bls.n	8004dce <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68da      	ldr	r2, [r3, #12]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d90:	b292      	uxth	r2, r2
 8004d92:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d98:	1c9a      	adds	r2, r3, #2
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	3b02      	subs	r3, #2
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d81f      	bhi.n	8004dfc <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	685a      	ldr	r2, [r3, #4]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004dca:	605a      	str	r2, [r3, #4]
 8004dcc:	e016      	b.n	8004dfc <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f103 020c 	add.w	r2, r3, #12
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dda:	7812      	ldrb	r2, [r2, #0]
 8004ddc:	b2d2      	uxtb	r2, r2
 8004dde:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de4:	1c5a      	adds	r2, r3, #1
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	3b01      	subs	r3, #1
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004e00:	f7fd fe6a 	bl	8002ad8 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d803      	bhi.n	8004e18 <HAL_SPI_TransmitReceive+0x3cc>
 8004e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e16:	d102      	bne.n	8004e1e <HAL_SPI_TransmitReceive+0x3d2>
 8004e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d107      	bne.n	8004e2e <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004e2c:	e026      	b.n	8004e7c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f47f af57 	bne.w	8004ce8 <HAL_SPI_TransmitReceive+0x29c>
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	f47f af50 	bne.w	8004ce8 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e48:	69fa      	ldr	r2, [r7, #28]
 8004e4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	f000 f93d 	bl	80050cc <SPI_EndRxTxTransaction>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d005      	beq.n	8004e64 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2220      	movs	r2, #32
 8004e62:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d003      	beq.n	8004e74 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e72:	e003      	b.n	8004e7c <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004e84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3728      	adds	r7, #40	; 0x28
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b088      	sub	sp, #32
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	603b      	str	r3, [r7, #0]
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ea0:	f7fd fe1a 	bl	8002ad8 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea8:	1a9b      	subs	r3, r3, r2
 8004eaa:	683a      	ldr	r2, [r7, #0]
 8004eac:	4413      	add	r3, r2
 8004eae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004eb0:	f7fd fe12 	bl	8002ad8 <HAL_GetTick>
 8004eb4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004eb6:	4b39      	ldr	r3, [pc, #228]	; (8004f9c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	015b      	lsls	r3, r3, #5
 8004ebc:	0d1b      	lsrs	r3, r3, #20
 8004ebe:	69fa      	ldr	r2, [r7, #28]
 8004ec0:	fb02 f303 	mul.w	r3, r2, r3
 8004ec4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ec6:	e054      	b.n	8004f72 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ece:	d050      	beq.n	8004f72 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ed0:	f7fd fe02 	bl	8002ad8 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	69fa      	ldr	r2, [r7, #28]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d902      	bls.n	8004ee6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d13d      	bne.n	8004f62 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	685a      	ldr	r2, [r3, #4]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ef4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004efe:	d111      	bne.n	8004f24 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f08:	d004      	beq.n	8004f14 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f12:	d107      	bne.n	8004f24 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f2c:	d10f      	bne.n	8004f4e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f3c:	601a      	str	r2, [r3, #0]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2201      	movs	r2, #1
 8004f52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e017      	b.n	8004f92 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d101      	bne.n	8004f6c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	689a      	ldr	r2, [r3, #8]
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	bf0c      	ite	eq
 8004f82:	2301      	moveq	r3, #1
 8004f84:	2300      	movne	r3, #0
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	461a      	mov	r2, r3
 8004f8a:	79fb      	ldrb	r3, [r7, #7]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d19b      	bne.n	8004ec8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3720      	adds	r7, #32
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	20000094 	.word	0x20000094

08004fa0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b08a      	sub	sp, #40	; 0x28
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	607a      	str	r2, [r7, #4]
 8004fac:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004fb2:	f7fd fd91 	bl	8002ad8 <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fba:	1a9b      	subs	r3, r3, r2
 8004fbc:	683a      	ldr	r2, [r7, #0]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004fc2:	f7fd fd89 	bl	8002ad8 <HAL_GetTick>
 8004fc6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	330c      	adds	r3, #12
 8004fce:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004fd0:	4b3d      	ldr	r3, [pc, #244]	; (80050c8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	4413      	add	r3, r2
 8004fda:	00da      	lsls	r2, r3, #3
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	0d1b      	lsrs	r3, r3, #20
 8004fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fe2:	fb02 f303 	mul.w	r3, r2, r3
 8004fe6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004fe8:	e060      	b.n	80050ac <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004ff0:	d107      	bne.n	8005002 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d104      	bne.n	8005002 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005000:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005008:	d050      	beq.n	80050ac <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800500a:	f7fd fd65 	bl	8002ad8 <HAL_GetTick>
 800500e:	4602      	mov	r2, r0
 8005010:	6a3b      	ldr	r3, [r7, #32]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005016:	429a      	cmp	r2, r3
 8005018:	d902      	bls.n	8005020 <SPI_WaitFifoStateUntilTimeout+0x80>
 800501a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501c:	2b00      	cmp	r3, #0
 800501e:	d13d      	bne.n	800509c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	685a      	ldr	r2, [r3, #4]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800502e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005038:	d111      	bne.n	800505e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005042:	d004      	beq.n	800504e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800504c:	d107      	bne.n	800505e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800505c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005062:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005066:	d10f      	bne.n	8005088 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005076:	601a      	str	r2, [r3, #0]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005086:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e010      	b.n	80050be <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d101      	bne.n	80050a6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80050a2:	2300      	movs	r3, #0
 80050a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	3b01      	subs	r3, #1
 80050aa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	689a      	ldr	r2, [r3, #8]
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	4013      	ands	r3, r2
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d196      	bne.n	8004fea <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3728      	adds	r7, #40	; 0x28
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	20000094 	.word	0x20000094

080050cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b086      	sub	sp, #24
 80050d0:	af02      	add	r7, sp, #8
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	9300      	str	r3, [sp, #0]
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	2200      	movs	r2, #0
 80050e0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f7ff ff5b 	bl	8004fa0 <SPI_WaitFifoStateUntilTimeout>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d007      	beq.n	8005100 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050f4:	f043 0220 	orr.w	r2, r3, #32
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e027      	b.n	8005150 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	9300      	str	r3, [sp, #0]
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	2200      	movs	r2, #0
 8005108:	2180      	movs	r1, #128	; 0x80
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	f7ff fec0 	bl	8004e90 <SPI_WaitFlagStateUntilTimeout>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d007      	beq.n	8005126 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800511a:	f043 0220 	orr.w	r2, r3, #32
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e014      	b.n	8005150 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	9300      	str	r3, [sp, #0]
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	2200      	movs	r2, #0
 800512e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	f7ff ff34 	bl	8004fa0 <SPI_WaitFifoStateUntilTimeout>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d007      	beq.n	800514e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005142:	f043 0220 	orr.w	r2, r3, #32
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e000      	b.n	8005150 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3710      	adds	r7, #16
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d101      	bne.n	800516a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e049      	b.n	80051fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005170:	b2db      	uxtb	r3, r3
 8005172:	2b00      	cmp	r3, #0
 8005174:	d106      	bne.n	8005184 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f7fd fa82 	bl	8002688 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2202      	movs	r2, #2
 8005188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	3304      	adds	r3, #4
 8005194:	4619      	mov	r1, r3
 8005196:	4610      	mov	r0, r2
 8005198:	f000 fa7e 	bl	8005698 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3708      	adds	r7, #8
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
	...

08005208 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005216:	b2db      	uxtb	r3, r3
 8005218:	2b01      	cmp	r3, #1
 800521a:	d001      	beq.n	8005220 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e03b      	b.n	8005298 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2202      	movs	r2, #2
 8005224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68da      	ldr	r2, [r3, #12]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f042 0201 	orr.w	r2, r2, #1
 8005236:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a19      	ldr	r2, [pc, #100]	; (80052a4 <HAL_TIM_Base_Start_IT+0x9c>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d009      	beq.n	8005256 <HAL_TIM_Base_Start_IT+0x4e>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800524a:	d004      	beq.n	8005256 <HAL_TIM_Base_Start_IT+0x4e>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a15      	ldr	r2, [pc, #84]	; (80052a8 <HAL_TIM_Base_Start_IT+0xa0>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d115      	bne.n	8005282 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	689a      	ldr	r2, [r3, #8]
 800525c:	4b13      	ldr	r3, [pc, #76]	; (80052ac <HAL_TIM_Base_Start_IT+0xa4>)
 800525e:	4013      	ands	r3, r2
 8005260:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2b06      	cmp	r3, #6
 8005266:	d015      	beq.n	8005294 <HAL_TIM_Base_Start_IT+0x8c>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800526e:	d011      	beq.n	8005294 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f042 0201 	orr.w	r2, r2, #1
 800527e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005280:	e008      	b.n	8005294 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f042 0201 	orr.w	r2, r2, #1
 8005290:	601a      	str	r2, [r3, #0]
 8005292:	e000      	b.n	8005296 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005294:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3714      	adds	r7, #20
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr
 80052a4:	40012c00 	.word	0x40012c00
 80052a8:	40014000 	.word	0x40014000
 80052ac:	00010007 	.word	0x00010007

080052b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	f003 0302 	and.w	r3, r3, #2
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d020      	beq.n	8005314 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f003 0302 	and.w	r3, r3, #2
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d01b      	beq.n	8005314 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f06f 0202 	mvn.w	r2, #2
 80052e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2201      	movs	r2, #1
 80052ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	f003 0303 	and.w	r3, r3, #3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d003      	beq.n	8005302 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 f9ad 	bl	800565a <HAL_TIM_IC_CaptureCallback>
 8005300:	e005      	b.n	800530e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f99f 	bl	8005646 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f000 f9b0 	bl	800566e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	f003 0304 	and.w	r3, r3, #4
 800531a:	2b00      	cmp	r3, #0
 800531c:	d020      	beq.n	8005360 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f003 0304 	and.w	r3, r3, #4
 8005324:	2b00      	cmp	r3, #0
 8005326:	d01b      	beq.n	8005360 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f06f 0204 	mvn.w	r2, #4
 8005330:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2202      	movs	r2, #2
 8005336:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005342:	2b00      	cmp	r3, #0
 8005344:	d003      	beq.n	800534e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f987 	bl	800565a <HAL_TIM_IC_CaptureCallback>
 800534c:	e005      	b.n	800535a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 f979 	bl	8005646 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 f98a 	bl	800566e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	f003 0308 	and.w	r3, r3, #8
 8005366:	2b00      	cmp	r3, #0
 8005368:	d020      	beq.n	80053ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f003 0308 	and.w	r3, r3, #8
 8005370:	2b00      	cmp	r3, #0
 8005372:	d01b      	beq.n	80053ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f06f 0208 	mvn.w	r2, #8
 800537c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2204      	movs	r2, #4
 8005382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	69db      	ldr	r3, [r3, #28]
 800538a:	f003 0303 	and.w	r3, r3, #3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d003      	beq.n	800539a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f961 	bl	800565a <HAL_TIM_IC_CaptureCallback>
 8005398:	e005      	b.n	80053a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 f953 	bl	8005646 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 f964 	bl	800566e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	f003 0310 	and.w	r3, r3, #16
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d020      	beq.n	80053f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f003 0310 	and.w	r3, r3, #16
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d01b      	beq.n	80053f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f06f 0210 	mvn.w	r2, #16
 80053c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2208      	movs	r2, #8
 80053ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	69db      	ldr	r3, [r3, #28]
 80053d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d003      	beq.n	80053e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 f93b 	bl	800565a <HAL_TIM_IC_CaptureCallback>
 80053e4:	e005      	b.n	80053f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f92d 	bl	8005646 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 f93e 	bl	800566e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00c      	beq.n	800541c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f003 0301 	and.w	r3, r3, #1
 8005408:	2b00      	cmp	r3, #0
 800540a:	d007      	beq.n	800541c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f06f 0201 	mvn.w	r2, #1
 8005414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f7fd f88c 	bl	8002534 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00c      	beq.n	8005440 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800542c:	2b00      	cmp	r3, #0
 800542e:	d007      	beq.n	8005440 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 fa9a 	bl	8005974 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00c      	beq.n	8005464 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005450:	2b00      	cmp	r3, #0
 8005452:	d007      	beq.n	8005464 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800545c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 fa92 	bl	8005988 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00c      	beq.n	8005488 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005474:	2b00      	cmp	r3, #0
 8005476:	d007      	beq.n	8005488 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 f8fd 	bl	8005682 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	f003 0320 	and.w	r3, r3, #32
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00c      	beq.n	80054ac <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f003 0320 	and.w	r3, r3, #32
 8005498:	2b00      	cmp	r3, #0
 800549a:	d007      	beq.n	80054ac <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f06f 0220 	mvn.w	r2, #32
 80054a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 fa5a 	bl	8005960 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054ac:	bf00      	nop
 80054ae:	3710      	adds	r7, #16
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054be:	2300      	movs	r3, #0
 80054c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d101      	bne.n	80054d0 <HAL_TIM_ConfigClockSource+0x1c>
 80054cc:	2302      	movs	r3, #2
 80054ce:	e0b6      	b.n	800563e <HAL_TIM_ConfigClockSource+0x18a>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2202      	movs	r2, #2
 80054dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80054f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68ba      	ldr	r2, [r7, #8]
 8005502:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800550c:	d03e      	beq.n	800558c <HAL_TIM_ConfigClockSource+0xd8>
 800550e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005512:	f200 8087 	bhi.w	8005624 <HAL_TIM_ConfigClockSource+0x170>
 8005516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800551a:	f000 8086 	beq.w	800562a <HAL_TIM_ConfigClockSource+0x176>
 800551e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005522:	d87f      	bhi.n	8005624 <HAL_TIM_ConfigClockSource+0x170>
 8005524:	2b70      	cmp	r3, #112	; 0x70
 8005526:	d01a      	beq.n	800555e <HAL_TIM_ConfigClockSource+0xaa>
 8005528:	2b70      	cmp	r3, #112	; 0x70
 800552a:	d87b      	bhi.n	8005624 <HAL_TIM_ConfigClockSource+0x170>
 800552c:	2b60      	cmp	r3, #96	; 0x60
 800552e:	d050      	beq.n	80055d2 <HAL_TIM_ConfigClockSource+0x11e>
 8005530:	2b60      	cmp	r3, #96	; 0x60
 8005532:	d877      	bhi.n	8005624 <HAL_TIM_ConfigClockSource+0x170>
 8005534:	2b50      	cmp	r3, #80	; 0x50
 8005536:	d03c      	beq.n	80055b2 <HAL_TIM_ConfigClockSource+0xfe>
 8005538:	2b50      	cmp	r3, #80	; 0x50
 800553a:	d873      	bhi.n	8005624 <HAL_TIM_ConfigClockSource+0x170>
 800553c:	2b40      	cmp	r3, #64	; 0x40
 800553e:	d058      	beq.n	80055f2 <HAL_TIM_ConfigClockSource+0x13e>
 8005540:	2b40      	cmp	r3, #64	; 0x40
 8005542:	d86f      	bhi.n	8005624 <HAL_TIM_ConfigClockSource+0x170>
 8005544:	2b30      	cmp	r3, #48	; 0x30
 8005546:	d064      	beq.n	8005612 <HAL_TIM_ConfigClockSource+0x15e>
 8005548:	2b30      	cmp	r3, #48	; 0x30
 800554a:	d86b      	bhi.n	8005624 <HAL_TIM_ConfigClockSource+0x170>
 800554c:	2b20      	cmp	r3, #32
 800554e:	d060      	beq.n	8005612 <HAL_TIM_ConfigClockSource+0x15e>
 8005550:	2b20      	cmp	r3, #32
 8005552:	d867      	bhi.n	8005624 <HAL_TIM_ConfigClockSource+0x170>
 8005554:	2b00      	cmp	r3, #0
 8005556:	d05c      	beq.n	8005612 <HAL_TIM_ConfigClockSource+0x15e>
 8005558:	2b10      	cmp	r3, #16
 800555a:	d05a      	beq.n	8005612 <HAL_TIM_ConfigClockSource+0x15e>
 800555c:	e062      	b.n	8005624 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800556e:	f000 f971 	bl	8005854 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005580:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68ba      	ldr	r2, [r7, #8]
 8005588:	609a      	str	r2, [r3, #8]
      break;
 800558a:	e04f      	b.n	800562c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800559c:	f000 f95a 	bl	8005854 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	689a      	ldr	r2, [r3, #8]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055ae:	609a      	str	r2, [r3, #8]
      break;
 80055b0:	e03c      	b.n	800562c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055be:	461a      	mov	r2, r3
 80055c0:	f000 f8ce 	bl	8005760 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2150      	movs	r1, #80	; 0x50
 80055ca:	4618      	mov	r0, r3
 80055cc:	f000 f927 	bl	800581e <TIM_ITRx_SetConfig>
      break;
 80055d0:	e02c      	b.n	800562c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055de:	461a      	mov	r2, r3
 80055e0:	f000 f8ed 	bl	80057be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2160      	movs	r1, #96	; 0x60
 80055ea:	4618      	mov	r0, r3
 80055ec:	f000 f917 	bl	800581e <TIM_ITRx_SetConfig>
      break;
 80055f0:	e01c      	b.n	800562c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055fe:	461a      	mov	r2, r3
 8005600:	f000 f8ae 	bl	8005760 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2140      	movs	r1, #64	; 0x40
 800560a:	4618      	mov	r0, r3
 800560c:	f000 f907 	bl	800581e <TIM_ITRx_SetConfig>
      break;
 8005610:	e00c      	b.n	800562c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4619      	mov	r1, r3
 800561c:	4610      	mov	r0, r2
 800561e:	f000 f8fe 	bl	800581e <TIM_ITRx_SetConfig>
      break;
 8005622:	e003      	b.n	800562c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	73fb      	strb	r3, [r7, #15]
      break;
 8005628:	e000      	b.n	800562c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800562a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800563c:	7bfb      	ldrb	r3, [r7, #15]
}
 800563e:	4618      	mov	r0, r3
 8005640:	3710      	adds	r7, #16
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}

08005646 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005646:	b480      	push	{r7}
 8005648:	b083      	sub	sp, #12
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800564e:	bf00      	nop
 8005650:	370c      	adds	r7, #12
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr

0800565a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800565a:	b480      	push	{r7}
 800565c:	b083      	sub	sp, #12
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005662:	bf00      	nop
 8005664:	370c      	adds	r7, #12
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr

0800566e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800566e:	b480      	push	{r7}
 8005670:	b083      	sub	sp, #12
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005676:	bf00      	nop
 8005678:	370c      	adds	r7, #12
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr

08005682 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005682:	b480      	push	{r7}
 8005684:	b083      	sub	sp, #12
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800568a:	bf00      	nop
 800568c:	370c      	adds	r7, #12
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
	...

08005698 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005698:	b480      	push	{r7}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a2a      	ldr	r2, [pc, #168]	; (8005754 <TIM_Base_SetConfig+0xbc>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d003      	beq.n	80056b8 <TIM_Base_SetConfig+0x20>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056b6:	d108      	bne.n	80056ca <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a21      	ldr	r2, [pc, #132]	; (8005754 <TIM_Base_SetConfig+0xbc>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d00b      	beq.n	80056ea <TIM_Base_SetConfig+0x52>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056d8:	d007      	beq.n	80056ea <TIM_Base_SetConfig+0x52>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a1e      	ldr	r2, [pc, #120]	; (8005758 <TIM_Base_SetConfig+0xc0>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d003      	beq.n	80056ea <TIM_Base_SetConfig+0x52>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a1d      	ldr	r2, [pc, #116]	; (800575c <TIM_Base_SetConfig+0xc4>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d108      	bne.n	80056fc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	4313      	orrs	r3, r2
 8005708:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	689a      	ldr	r2, [r3, #8]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4a0c      	ldr	r2, [pc, #48]	; (8005754 <TIM_Base_SetConfig+0xbc>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d007      	beq.n	8005738 <TIM_Base_SetConfig+0xa0>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a0b      	ldr	r2, [pc, #44]	; (8005758 <TIM_Base_SetConfig+0xc0>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d003      	beq.n	8005738 <TIM_Base_SetConfig+0xa0>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a0a      	ldr	r2, [pc, #40]	; (800575c <TIM_Base_SetConfig+0xc4>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d103      	bne.n	8005740 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	691a      	ldr	r2, [r3, #16]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	615a      	str	r2, [r3, #20]
}
 8005746:	bf00      	nop
 8005748:	3714      	adds	r7, #20
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	40012c00 	.word	0x40012c00
 8005758:	40014000 	.word	0x40014000
 800575c:	40014400 	.word	0x40014400

08005760 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005760:	b480      	push	{r7}
 8005762:	b087      	sub	sp, #28
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6a1b      	ldr	r3, [r3, #32]
 8005770:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6a1b      	ldr	r3, [r3, #32]
 8005776:	f023 0201 	bic.w	r2, r3, #1
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800578a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	011b      	lsls	r3, r3, #4
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	4313      	orrs	r3, r2
 8005794:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	f023 030a 	bic.w	r3, r3, #10
 800579c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	693a      	ldr	r2, [r7, #16]
 80057aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	697a      	ldr	r2, [r7, #20]
 80057b0:	621a      	str	r2, [r3, #32]
}
 80057b2:	bf00      	nop
 80057b4:	371c      	adds	r7, #28
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr

080057be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057be:	b480      	push	{r7}
 80057c0:	b087      	sub	sp, #28
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	60f8      	str	r0, [r7, #12]
 80057c6:	60b9      	str	r1, [r7, #8]
 80057c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6a1b      	ldr	r3, [r3, #32]
 80057d4:	f023 0210 	bic.w	r2, r3, #16
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	699b      	ldr	r3, [r3, #24]
 80057e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	031b      	lsls	r3, r3, #12
 80057ee:	693a      	ldr	r2, [r7, #16]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057fa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	011b      	lsls	r3, r3, #4
 8005800:	697a      	ldr	r2, [r7, #20]
 8005802:	4313      	orrs	r3, r2
 8005804:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	621a      	str	r2, [r3, #32]
}
 8005812:	bf00      	nop
 8005814:	371c      	adds	r7, #28
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr

0800581e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800581e:	b480      	push	{r7}
 8005820:	b085      	sub	sp, #20
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
 8005826:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005834:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005836:	683a      	ldr	r2, [r7, #0]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	4313      	orrs	r3, r2
 800583c:	f043 0307 	orr.w	r3, r3, #7
 8005840:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	609a      	str	r2, [r3, #8]
}
 8005848:	bf00      	nop
 800584a:	3714      	adds	r7, #20
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005854:	b480      	push	{r7}
 8005856:	b087      	sub	sp, #28
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	607a      	str	r2, [r7, #4]
 8005860:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800586e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	021a      	lsls	r2, r3, #8
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	431a      	orrs	r2, r3
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	4313      	orrs	r3, r2
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	4313      	orrs	r3, r2
 8005880:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	609a      	str	r2, [r3, #8]
}
 8005888:	bf00      	nop
 800588a:	371c      	adds	r7, #28
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d101      	bne.n	80058ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058a8:	2302      	movs	r3, #2
 80058aa:	e04f      	b.n	800594c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2202      	movs	r2, #2
 80058b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a21      	ldr	r2, [pc, #132]	; (8005958 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d108      	bne.n	80058e8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80058dc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a14      	ldr	r2, [pc, #80]	; (8005958 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d009      	beq.n	8005920 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005914:	d004      	beq.n	8005920 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a10      	ldr	r2, [pc, #64]	; (800595c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d10c      	bne.n	800593a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005926:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	68ba      	ldr	r2, [r7, #8]
 800592e:	4313      	orrs	r3, r2
 8005930:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68ba      	ldr	r2, [r7, #8]
 8005938:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2201      	movs	r2, #1
 800593e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	3714      	adds	r7, #20
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr
 8005958:	40012c00 	.word	0x40012c00
 800595c:	40014000 	.word	0x40014000

08005960 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005968:	bf00      	nop
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800597c:	bf00      	nop
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005990:	bf00      	nop
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d101      	bne.n	80059ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e040      	b.n	8005a30 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d106      	bne.n	80059c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f7fc fea4 	bl	800270c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2224      	movs	r2, #36	; 0x24
 80059c8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f022 0201 	bic.w	r2, r2, #1
 80059d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d002      	beq.n	80059e8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 fa54 	bl	8005e90 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 f825 	bl	8005a38 <UART_SetConfig>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d101      	bne.n	80059f8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e01b      	b.n	8005a30 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	685a      	ldr	r2, [r3, #4]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	689a      	ldr	r2, [r3, #8]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f042 0201 	orr.w	r2, r2, #1
 8005a26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 fad3 	bl	8005fd4 <UART_CheckIdleState>
 8005a2e:	4603      	mov	r3, r0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3708      	adds	r7, #8
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a3c:	b08a      	sub	sp, #40	; 0x28
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a42:	2300      	movs	r3, #0
 8005a44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	689a      	ldr	r2, [r3, #8]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	431a      	orrs	r2, r3
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	695b      	ldr	r3, [r3, #20]
 8005a56:	431a      	orrs	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	69db      	ldr	r3, [r3, #28]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	4bb4      	ldr	r3, [pc, #720]	; (8005d38 <UART_SetConfig+0x300>)
 8005a68:	4013      	ands	r3, r2
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	6812      	ldr	r2, [r2, #0]
 8005a6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a70:	430b      	orrs	r3, r1
 8005a72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	68da      	ldr	r2, [r3, #12]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	430a      	orrs	r2, r1
 8005a88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4aa9      	ldr	r2, [pc, #676]	; (8005d3c <UART_SetConfig+0x304>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d004      	beq.n	8005aa4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6a1b      	ldr	r3, [r3, #32]
 8005a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ab4:	430a      	orrs	r2, r1
 8005ab6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4aa0      	ldr	r2, [pc, #640]	; (8005d40 <UART_SetConfig+0x308>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d126      	bne.n	8005b10 <UART_SetConfig+0xd8>
 8005ac2:	4ba0      	ldr	r3, [pc, #640]	; (8005d44 <UART_SetConfig+0x30c>)
 8005ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ac8:	f003 0303 	and.w	r3, r3, #3
 8005acc:	2b03      	cmp	r3, #3
 8005ace:	d81b      	bhi.n	8005b08 <UART_SetConfig+0xd0>
 8005ad0:	a201      	add	r2, pc, #4	; (adr r2, 8005ad8 <UART_SetConfig+0xa0>)
 8005ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad6:	bf00      	nop
 8005ad8:	08005ae9 	.word	0x08005ae9
 8005adc:	08005af9 	.word	0x08005af9
 8005ae0:	08005af1 	.word	0x08005af1
 8005ae4:	08005b01 	.word	0x08005b01
 8005ae8:	2301      	movs	r3, #1
 8005aea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005aee:	e080      	b.n	8005bf2 <UART_SetConfig+0x1ba>
 8005af0:	2302      	movs	r3, #2
 8005af2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005af6:	e07c      	b.n	8005bf2 <UART_SetConfig+0x1ba>
 8005af8:	2304      	movs	r3, #4
 8005afa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005afe:	e078      	b.n	8005bf2 <UART_SetConfig+0x1ba>
 8005b00:	2308      	movs	r3, #8
 8005b02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b06:	e074      	b.n	8005bf2 <UART_SetConfig+0x1ba>
 8005b08:	2310      	movs	r3, #16
 8005b0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b0e:	e070      	b.n	8005bf2 <UART_SetConfig+0x1ba>
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a8c      	ldr	r2, [pc, #560]	; (8005d48 <UART_SetConfig+0x310>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d138      	bne.n	8005b8c <UART_SetConfig+0x154>
 8005b1a:	4b8a      	ldr	r3, [pc, #552]	; (8005d44 <UART_SetConfig+0x30c>)
 8005b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b20:	f003 030c 	and.w	r3, r3, #12
 8005b24:	2b0c      	cmp	r3, #12
 8005b26:	d82d      	bhi.n	8005b84 <UART_SetConfig+0x14c>
 8005b28:	a201      	add	r2, pc, #4	; (adr r2, 8005b30 <UART_SetConfig+0xf8>)
 8005b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b2e:	bf00      	nop
 8005b30:	08005b65 	.word	0x08005b65
 8005b34:	08005b85 	.word	0x08005b85
 8005b38:	08005b85 	.word	0x08005b85
 8005b3c:	08005b85 	.word	0x08005b85
 8005b40:	08005b75 	.word	0x08005b75
 8005b44:	08005b85 	.word	0x08005b85
 8005b48:	08005b85 	.word	0x08005b85
 8005b4c:	08005b85 	.word	0x08005b85
 8005b50:	08005b6d 	.word	0x08005b6d
 8005b54:	08005b85 	.word	0x08005b85
 8005b58:	08005b85 	.word	0x08005b85
 8005b5c:	08005b85 	.word	0x08005b85
 8005b60:	08005b7d 	.word	0x08005b7d
 8005b64:	2300      	movs	r3, #0
 8005b66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b6a:	e042      	b.n	8005bf2 <UART_SetConfig+0x1ba>
 8005b6c:	2302      	movs	r3, #2
 8005b6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b72:	e03e      	b.n	8005bf2 <UART_SetConfig+0x1ba>
 8005b74:	2304      	movs	r3, #4
 8005b76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b7a:	e03a      	b.n	8005bf2 <UART_SetConfig+0x1ba>
 8005b7c:	2308      	movs	r3, #8
 8005b7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b82:	e036      	b.n	8005bf2 <UART_SetConfig+0x1ba>
 8005b84:	2310      	movs	r3, #16
 8005b86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b8a:	e032      	b.n	8005bf2 <UART_SetConfig+0x1ba>
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a6a      	ldr	r2, [pc, #424]	; (8005d3c <UART_SetConfig+0x304>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d12a      	bne.n	8005bec <UART_SetConfig+0x1b4>
 8005b96:	4b6b      	ldr	r3, [pc, #428]	; (8005d44 <UART_SetConfig+0x30c>)
 8005b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b9c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ba0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ba4:	d01a      	beq.n	8005bdc <UART_SetConfig+0x1a4>
 8005ba6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005baa:	d81b      	bhi.n	8005be4 <UART_SetConfig+0x1ac>
 8005bac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bb0:	d00c      	beq.n	8005bcc <UART_SetConfig+0x194>
 8005bb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bb6:	d815      	bhi.n	8005be4 <UART_SetConfig+0x1ac>
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d003      	beq.n	8005bc4 <UART_SetConfig+0x18c>
 8005bbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bc0:	d008      	beq.n	8005bd4 <UART_SetConfig+0x19c>
 8005bc2:	e00f      	b.n	8005be4 <UART_SetConfig+0x1ac>
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bca:	e012      	b.n	8005bf2 <UART_SetConfig+0x1ba>
 8005bcc:	2302      	movs	r3, #2
 8005bce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bd2:	e00e      	b.n	8005bf2 <UART_SetConfig+0x1ba>
 8005bd4:	2304      	movs	r3, #4
 8005bd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bda:	e00a      	b.n	8005bf2 <UART_SetConfig+0x1ba>
 8005bdc:	2308      	movs	r3, #8
 8005bde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005be2:	e006      	b.n	8005bf2 <UART_SetConfig+0x1ba>
 8005be4:	2310      	movs	r3, #16
 8005be6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bea:	e002      	b.n	8005bf2 <UART_SetConfig+0x1ba>
 8005bec:	2310      	movs	r3, #16
 8005bee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a51      	ldr	r2, [pc, #324]	; (8005d3c <UART_SetConfig+0x304>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d17a      	bne.n	8005cf2 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005bfc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c00:	2b08      	cmp	r3, #8
 8005c02:	d824      	bhi.n	8005c4e <UART_SetConfig+0x216>
 8005c04:	a201      	add	r2, pc, #4	; (adr r2, 8005c0c <UART_SetConfig+0x1d4>)
 8005c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c0a:	bf00      	nop
 8005c0c:	08005c31 	.word	0x08005c31
 8005c10:	08005c4f 	.word	0x08005c4f
 8005c14:	08005c39 	.word	0x08005c39
 8005c18:	08005c4f 	.word	0x08005c4f
 8005c1c:	08005c3f 	.word	0x08005c3f
 8005c20:	08005c4f 	.word	0x08005c4f
 8005c24:	08005c4f 	.word	0x08005c4f
 8005c28:	08005c4f 	.word	0x08005c4f
 8005c2c:	08005c47 	.word	0x08005c47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c30:	f7fe f820 	bl	8003c74 <HAL_RCC_GetPCLK1Freq>
 8005c34:	61f8      	str	r0, [r7, #28]
        break;
 8005c36:	e010      	b.n	8005c5a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c38:	4b44      	ldr	r3, [pc, #272]	; (8005d4c <UART_SetConfig+0x314>)
 8005c3a:	61fb      	str	r3, [r7, #28]
        break;
 8005c3c:	e00d      	b.n	8005c5a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c3e:	f7fd ff81 	bl	8003b44 <HAL_RCC_GetSysClockFreq>
 8005c42:	61f8      	str	r0, [r7, #28]
        break;
 8005c44:	e009      	b.n	8005c5a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c4a:	61fb      	str	r3, [r7, #28]
        break;
 8005c4c:	e005      	b.n	8005c5a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005c58:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f000 8107 	beq.w	8005e70 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	685a      	ldr	r2, [r3, #4]
 8005c66:	4613      	mov	r3, r2
 8005c68:	005b      	lsls	r3, r3, #1
 8005c6a:	4413      	add	r3, r2
 8005c6c:	69fa      	ldr	r2, [r7, #28]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d305      	bcc.n	8005c7e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005c78:	69fa      	ldr	r2, [r7, #28]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d903      	bls.n	8005c86 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005c84:	e0f4      	b.n	8005e70 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	461c      	mov	r4, r3
 8005c8c:	4615      	mov	r5, r2
 8005c8e:	f04f 0200 	mov.w	r2, #0
 8005c92:	f04f 0300 	mov.w	r3, #0
 8005c96:	022b      	lsls	r3, r5, #8
 8005c98:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005c9c:	0222      	lsls	r2, r4, #8
 8005c9e:	68f9      	ldr	r1, [r7, #12]
 8005ca0:	6849      	ldr	r1, [r1, #4]
 8005ca2:	0849      	lsrs	r1, r1, #1
 8005ca4:	2000      	movs	r0, #0
 8005ca6:	4688      	mov	r8, r1
 8005ca8:	4681      	mov	r9, r0
 8005caa:	eb12 0a08 	adds.w	sl, r2, r8
 8005cae:	eb43 0b09 	adc.w	fp, r3, r9
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	603b      	str	r3, [r7, #0]
 8005cba:	607a      	str	r2, [r7, #4]
 8005cbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cc0:	4650      	mov	r0, sl
 8005cc2:	4659      	mov	r1, fp
 8005cc4:	f7fa fe78 	bl	80009b8 <__aeabi_uldivmod>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	460b      	mov	r3, r1
 8005ccc:	4613      	mov	r3, r2
 8005cce:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cd6:	d308      	bcc.n	8005cea <UART_SetConfig+0x2b2>
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cde:	d204      	bcs.n	8005cea <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	69ba      	ldr	r2, [r7, #24]
 8005ce6:	60da      	str	r2, [r3, #12]
 8005ce8:	e0c2      	b.n	8005e70 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005cf0:	e0be      	b.n	8005e70 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	69db      	ldr	r3, [r3, #28]
 8005cf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cfa:	d16a      	bne.n	8005dd2 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005cfc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d00:	2b08      	cmp	r3, #8
 8005d02:	d834      	bhi.n	8005d6e <UART_SetConfig+0x336>
 8005d04:	a201      	add	r2, pc, #4	; (adr r2, 8005d0c <UART_SetConfig+0x2d4>)
 8005d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d0a:	bf00      	nop
 8005d0c:	08005d31 	.word	0x08005d31
 8005d10:	08005d51 	.word	0x08005d51
 8005d14:	08005d59 	.word	0x08005d59
 8005d18:	08005d6f 	.word	0x08005d6f
 8005d1c:	08005d5f 	.word	0x08005d5f
 8005d20:	08005d6f 	.word	0x08005d6f
 8005d24:	08005d6f 	.word	0x08005d6f
 8005d28:	08005d6f 	.word	0x08005d6f
 8005d2c:	08005d67 	.word	0x08005d67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d30:	f7fd ffa0 	bl	8003c74 <HAL_RCC_GetPCLK1Freq>
 8005d34:	61f8      	str	r0, [r7, #28]
        break;
 8005d36:	e020      	b.n	8005d7a <UART_SetConfig+0x342>
 8005d38:	efff69f3 	.word	0xefff69f3
 8005d3c:	40008000 	.word	0x40008000
 8005d40:	40013800 	.word	0x40013800
 8005d44:	40021000 	.word	0x40021000
 8005d48:	40004400 	.word	0x40004400
 8005d4c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d50:	f7fd ffa6 	bl	8003ca0 <HAL_RCC_GetPCLK2Freq>
 8005d54:	61f8      	str	r0, [r7, #28]
        break;
 8005d56:	e010      	b.n	8005d7a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d58:	4b4c      	ldr	r3, [pc, #304]	; (8005e8c <UART_SetConfig+0x454>)
 8005d5a:	61fb      	str	r3, [r7, #28]
        break;
 8005d5c:	e00d      	b.n	8005d7a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d5e:	f7fd fef1 	bl	8003b44 <HAL_RCC_GetSysClockFreq>
 8005d62:	61f8      	str	r0, [r7, #28]
        break;
 8005d64:	e009      	b.n	8005d7a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d6a:	61fb      	str	r3, [r7, #28]
        break;
 8005d6c:	e005      	b.n	8005d7a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005d78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d077      	beq.n	8005e70 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	005a      	lsls	r2, r3, #1
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	085b      	lsrs	r3, r3, #1
 8005d8a:	441a      	add	r2, r3
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d94:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	2b0f      	cmp	r3, #15
 8005d9a:	d916      	bls.n	8005dca <UART_SetConfig+0x392>
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005da2:	d212      	bcs.n	8005dca <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	f023 030f 	bic.w	r3, r3, #15
 8005dac:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	085b      	lsrs	r3, r3, #1
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	f003 0307 	and.w	r3, r3, #7
 8005db8:	b29a      	uxth	r2, r3
 8005dba:	8afb      	ldrh	r3, [r7, #22]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	8afa      	ldrh	r2, [r7, #22]
 8005dc6:	60da      	str	r2, [r3, #12]
 8005dc8:	e052      	b.n	8005e70 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005dd0:	e04e      	b.n	8005e70 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005dd2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005dd6:	2b08      	cmp	r3, #8
 8005dd8:	d827      	bhi.n	8005e2a <UART_SetConfig+0x3f2>
 8005dda:	a201      	add	r2, pc, #4	; (adr r2, 8005de0 <UART_SetConfig+0x3a8>)
 8005ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de0:	08005e05 	.word	0x08005e05
 8005de4:	08005e0d 	.word	0x08005e0d
 8005de8:	08005e15 	.word	0x08005e15
 8005dec:	08005e2b 	.word	0x08005e2b
 8005df0:	08005e1b 	.word	0x08005e1b
 8005df4:	08005e2b 	.word	0x08005e2b
 8005df8:	08005e2b 	.word	0x08005e2b
 8005dfc:	08005e2b 	.word	0x08005e2b
 8005e00:	08005e23 	.word	0x08005e23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e04:	f7fd ff36 	bl	8003c74 <HAL_RCC_GetPCLK1Freq>
 8005e08:	61f8      	str	r0, [r7, #28]
        break;
 8005e0a:	e014      	b.n	8005e36 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e0c:	f7fd ff48 	bl	8003ca0 <HAL_RCC_GetPCLK2Freq>
 8005e10:	61f8      	str	r0, [r7, #28]
        break;
 8005e12:	e010      	b.n	8005e36 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e14:	4b1d      	ldr	r3, [pc, #116]	; (8005e8c <UART_SetConfig+0x454>)
 8005e16:	61fb      	str	r3, [r7, #28]
        break;
 8005e18:	e00d      	b.n	8005e36 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e1a:	f7fd fe93 	bl	8003b44 <HAL_RCC_GetSysClockFreq>
 8005e1e:	61f8      	str	r0, [r7, #28]
        break;
 8005e20:	e009      	b.n	8005e36 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e26:	61fb      	str	r3, [r7, #28]
        break;
 8005e28:	e005      	b.n	8005e36 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005e34:	bf00      	nop
    }

    if (pclk != 0U)
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d019      	beq.n	8005e70 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	085a      	lsrs	r2, r3, #1
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	441a      	add	r2, r3
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e4e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	2b0f      	cmp	r3, #15
 8005e54:	d909      	bls.n	8005e6a <UART_SetConfig+0x432>
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e5c:	d205      	bcs.n	8005e6a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	b29a      	uxth	r2, r3
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	60da      	str	r2, [r3, #12]
 8005e68:	e002      	b.n	8005e70 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2200      	movs	r2, #0
 8005e74:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005e7c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3728      	adds	r7, #40	; 0x28
 8005e84:	46bd      	mov	sp, r7
 8005e86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e8a:	bf00      	nop
 8005e8c:	00f42400 	.word	0x00f42400

08005e90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9c:	f003 0308 	and.w	r3, r3, #8
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00a      	beq.n	8005eba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	430a      	orrs	r2, r1
 8005eb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ebe:	f003 0301 	and.w	r3, r3, #1
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d00a      	beq.n	8005edc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	430a      	orrs	r2, r1
 8005eda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee0:	f003 0302 	and.w	r3, r3, #2
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d00a      	beq.n	8005efe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	430a      	orrs	r2, r1
 8005efc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f02:	f003 0304 	and.w	r3, r3, #4
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00a      	beq.n	8005f20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	430a      	orrs	r2, r1
 8005f1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f24:	f003 0310 	and.w	r3, r3, #16
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00a      	beq.n	8005f42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f46:	f003 0320 	and.w	r3, r3, #32
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00a      	beq.n	8005f64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	430a      	orrs	r2, r1
 8005f62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d01a      	beq.n	8005fa6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	430a      	orrs	r2, r1
 8005f84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f8e:	d10a      	bne.n	8005fa6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	430a      	orrs	r2, r1
 8005fa4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00a      	beq.n	8005fc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	430a      	orrs	r2, r1
 8005fc6:	605a      	str	r2, [r3, #4]
  }
}
 8005fc8:	bf00      	nop
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b098      	sub	sp, #96	; 0x60
 8005fd8:	af02      	add	r7, sp, #8
 8005fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005fe4:	f7fc fd78 	bl	8002ad8 <HAL_GetTick>
 8005fe8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 0308 	and.w	r3, r3, #8
 8005ff4:	2b08      	cmp	r3, #8
 8005ff6:	d12e      	bne.n	8006056 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ff8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ffc:	9300      	str	r3, [sp, #0]
 8005ffe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006000:	2200      	movs	r2, #0
 8006002:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 f88c 	bl	8006124 <UART_WaitOnFlagUntilTimeout>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d021      	beq.n	8006056 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800601a:	e853 3f00 	ldrex	r3, [r3]
 800601e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006022:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006026:	653b      	str	r3, [r7, #80]	; 0x50
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	461a      	mov	r2, r3
 800602e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006030:	647b      	str	r3, [r7, #68]	; 0x44
 8006032:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006034:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006036:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006038:	e841 2300 	strex	r3, r2, [r1]
 800603c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800603e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006040:	2b00      	cmp	r3, #0
 8006042:	d1e6      	bne.n	8006012 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2220      	movs	r2, #32
 8006048:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	e062      	b.n	800611c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0304 	and.w	r3, r3, #4
 8006060:	2b04      	cmp	r3, #4
 8006062:	d149      	bne.n	80060f8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006064:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006068:	9300      	str	r3, [sp, #0]
 800606a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800606c:	2200      	movs	r2, #0
 800606e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 f856 	bl	8006124 <UART_WaitOnFlagUntilTimeout>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d03c      	beq.n	80060f8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006086:	e853 3f00 	ldrex	r3, [r3]
 800608a:	623b      	str	r3, [r7, #32]
   return(result);
 800608c:	6a3b      	ldr	r3, [r7, #32]
 800608e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006092:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	461a      	mov	r2, r3
 800609a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800609c:	633b      	str	r3, [r7, #48]	; 0x30
 800609e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80060a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060a4:	e841 2300 	strex	r3, r2, [r1]
 80060a8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80060aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d1e6      	bne.n	800607e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	3308      	adds	r3, #8
 80060b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	e853 3f00 	ldrex	r3, [r3]
 80060be:	60fb      	str	r3, [r7, #12]
   return(result);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f023 0301 	bic.w	r3, r3, #1
 80060c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	3308      	adds	r3, #8
 80060ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060d0:	61fa      	str	r2, [r7, #28]
 80060d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d4:	69b9      	ldr	r1, [r7, #24]
 80060d6:	69fa      	ldr	r2, [r7, #28]
 80060d8:	e841 2300 	strex	r3, r2, [r1]
 80060dc:	617b      	str	r3, [r7, #20]
   return(result);
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d1e5      	bne.n	80060b0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2220      	movs	r2, #32
 80060e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060f4:	2303      	movs	r3, #3
 80060f6:	e011      	b.n	800611c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2220      	movs	r2, #32
 80060fc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2220      	movs	r2, #32
 8006102:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800611a:	2300      	movs	r3, #0
}
 800611c:	4618      	mov	r0, r3
 800611e:	3758      	adds	r7, #88	; 0x58
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	603b      	str	r3, [r7, #0]
 8006130:	4613      	mov	r3, r2
 8006132:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006134:	e049      	b.n	80061ca <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800613c:	d045      	beq.n	80061ca <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800613e:	f7fc fccb 	bl	8002ad8 <HAL_GetTick>
 8006142:	4602      	mov	r2, r0
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	1ad3      	subs	r3, r2, r3
 8006148:	69ba      	ldr	r2, [r7, #24]
 800614a:	429a      	cmp	r2, r3
 800614c:	d302      	bcc.n	8006154 <UART_WaitOnFlagUntilTimeout+0x30>
 800614e:	69bb      	ldr	r3, [r7, #24]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d101      	bne.n	8006158 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006154:	2303      	movs	r3, #3
 8006156:	e048      	b.n	80061ea <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 0304 	and.w	r3, r3, #4
 8006162:	2b00      	cmp	r3, #0
 8006164:	d031      	beq.n	80061ca <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	69db      	ldr	r3, [r3, #28]
 800616c:	f003 0308 	and.w	r3, r3, #8
 8006170:	2b08      	cmp	r3, #8
 8006172:	d110      	bne.n	8006196 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2208      	movs	r2, #8
 800617a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800617c:	68f8      	ldr	r0, [r7, #12]
 800617e:	f000 f838 	bl	80061f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2208      	movs	r2, #8
 8006186:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e029      	b.n	80061ea <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	69db      	ldr	r3, [r3, #28]
 800619c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061a4:	d111      	bne.n	80061ca <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061b0:	68f8      	ldr	r0, [r7, #12]
 80061b2:	f000 f81e 	bl	80061f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2220      	movs	r2, #32
 80061ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e00f      	b.n	80061ea <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	69da      	ldr	r2, [r3, #28]
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	4013      	ands	r3, r2
 80061d4:	68ba      	ldr	r2, [r7, #8]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	bf0c      	ite	eq
 80061da:	2301      	moveq	r3, #1
 80061dc:	2300      	movne	r3, #0
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	461a      	mov	r2, r3
 80061e2:	79fb      	ldrb	r3, [r7, #7]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d0a6      	beq.n	8006136 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3710      	adds	r7, #16
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061f2:	b480      	push	{r7}
 80061f4:	b095      	sub	sp, #84	; 0x54
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006202:	e853 3f00 	ldrex	r3, [r3]
 8006206:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800620e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	461a      	mov	r2, r3
 8006216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006218:	643b      	str	r3, [r7, #64]	; 0x40
 800621a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800621e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006220:	e841 2300 	strex	r3, r2, [r1]
 8006224:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006228:	2b00      	cmp	r3, #0
 800622a:	d1e6      	bne.n	80061fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	3308      	adds	r3, #8
 8006232:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006234:	6a3b      	ldr	r3, [r7, #32]
 8006236:	e853 3f00 	ldrex	r3, [r3]
 800623a:	61fb      	str	r3, [r7, #28]
   return(result);
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	f023 0301 	bic.w	r3, r3, #1
 8006242:	64bb      	str	r3, [r7, #72]	; 0x48
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	3308      	adds	r3, #8
 800624a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800624c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800624e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006250:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006252:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006254:	e841 2300 	strex	r3, r2, [r1]
 8006258:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800625a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625c:	2b00      	cmp	r3, #0
 800625e:	d1e5      	bne.n	800622c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006264:	2b01      	cmp	r3, #1
 8006266:	d118      	bne.n	800629a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	e853 3f00 	ldrex	r3, [r3]
 8006274:	60bb      	str	r3, [r7, #8]
   return(result);
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	f023 0310 	bic.w	r3, r3, #16
 800627c:	647b      	str	r3, [r7, #68]	; 0x44
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	461a      	mov	r2, r3
 8006284:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006286:	61bb      	str	r3, [r7, #24]
 8006288:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800628a:	6979      	ldr	r1, [r7, #20]
 800628c:	69ba      	ldr	r2, [r7, #24]
 800628e:	e841 2300 	strex	r3, r2, [r1]
 8006292:	613b      	str	r3, [r7, #16]
   return(result);
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d1e6      	bne.n	8006268 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2220      	movs	r2, #32
 800629e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	669a      	str	r2, [r3, #104]	; 0x68
}
 80062ae:	bf00      	nop
 80062b0:	3754      	adds	r7, #84	; 0x54
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr

080062ba <__itoa>:
 80062ba:	1e93      	subs	r3, r2, #2
 80062bc:	2b22      	cmp	r3, #34	; 0x22
 80062be:	b510      	push	{r4, lr}
 80062c0:	460c      	mov	r4, r1
 80062c2:	d904      	bls.n	80062ce <__itoa+0x14>
 80062c4:	2300      	movs	r3, #0
 80062c6:	700b      	strb	r3, [r1, #0]
 80062c8:	461c      	mov	r4, r3
 80062ca:	4620      	mov	r0, r4
 80062cc:	bd10      	pop	{r4, pc}
 80062ce:	2a0a      	cmp	r2, #10
 80062d0:	d109      	bne.n	80062e6 <__itoa+0x2c>
 80062d2:	2800      	cmp	r0, #0
 80062d4:	da07      	bge.n	80062e6 <__itoa+0x2c>
 80062d6:	232d      	movs	r3, #45	; 0x2d
 80062d8:	700b      	strb	r3, [r1, #0]
 80062da:	4240      	negs	r0, r0
 80062dc:	2101      	movs	r1, #1
 80062de:	4421      	add	r1, r4
 80062e0:	f000 f806 	bl	80062f0 <__utoa>
 80062e4:	e7f1      	b.n	80062ca <__itoa+0x10>
 80062e6:	2100      	movs	r1, #0
 80062e8:	e7f9      	b.n	80062de <__itoa+0x24>

080062ea <itoa>:
 80062ea:	f7ff bfe6 	b.w	80062ba <__itoa>
	...

080062f0 <__utoa>:
 80062f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062f2:	4c1f      	ldr	r4, [pc, #124]	; (8006370 <__utoa+0x80>)
 80062f4:	b08b      	sub	sp, #44	; 0x2c
 80062f6:	4605      	mov	r5, r0
 80062f8:	460b      	mov	r3, r1
 80062fa:	466e      	mov	r6, sp
 80062fc:	f104 0c20 	add.w	ip, r4, #32
 8006300:	6820      	ldr	r0, [r4, #0]
 8006302:	6861      	ldr	r1, [r4, #4]
 8006304:	4637      	mov	r7, r6
 8006306:	c703      	stmia	r7!, {r0, r1}
 8006308:	3408      	adds	r4, #8
 800630a:	4564      	cmp	r4, ip
 800630c:	463e      	mov	r6, r7
 800630e:	d1f7      	bne.n	8006300 <__utoa+0x10>
 8006310:	7921      	ldrb	r1, [r4, #4]
 8006312:	7139      	strb	r1, [r7, #4]
 8006314:	1e91      	subs	r1, r2, #2
 8006316:	6820      	ldr	r0, [r4, #0]
 8006318:	6038      	str	r0, [r7, #0]
 800631a:	2922      	cmp	r1, #34	; 0x22
 800631c:	f04f 0100 	mov.w	r1, #0
 8006320:	d904      	bls.n	800632c <__utoa+0x3c>
 8006322:	7019      	strb	r1, [r3, #0]
 8006324:	460b      	mov	r3, r1
 8006326:	4618      	mov	r0, r3
 8006328:	b00b      	add	sp, #44	; 0x2c
 800632a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800632c:	1e58      	subs	r0, r3, #1
 800632e:	4684      	mov	ip, r0
 8006330:	fbb5 f7f2 	udiv	r7, r5, r2
 8006334:	fb02 5617 	mls	r6, r2, r7, r5
 8006338:	3628      	adds	r6, #40	; 0x28
 800633a:	446e      	add	r6, sp
 800633c:	460c      	mov	r4, r1
 800633e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8006342:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8006346:	462e      	mov	r6, r5
 8006348:	42b2      	cmp	r2, r6
 800634a:	f101 0101 	add.w	r1, r1, #1
 800634e:	463d      	mov	r5, r7
 8006350:	d9ee      	bls.n	8006330 <__utoa+0x40>
 8006352:	2200      	movs	r2, #0
 8006354:	545a      	strb	r2, [r3, r1]
 8006356:	1919      	adds	r1, r3, r4
 8006358:	1aa5      	subs	r5, r4, r2
 800635a:	42aa      	cmp	r2, r5
 800635c:	dae3      	bge.n	8006326 <__utoa+0x36>
 800635e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8006362:	780e      	ldrb	r6, [r1, #0]
 8006364:	7006      	strb	r6, [r0, #0]
 8006366:	3201      	adds	r2, #1
 8006368:	f801 5901 	strb.w	r5, [r1], #-1
 800636c:	e7f4      	b.n	8006358 <__utoa+0x68>
 800636e:	bf00      	nop
 8006370:	08006994 	.word	0x08006994

08006374 <memset>:
 8006374:	4402      	add	r2, r0
 8006376:	4603      	mov	r3, r0
 8006378:	4293      	cmp	r3, r2
 800637a:	d100      	bne.n	800637e <memset+0xa>
 800637c:	4770      	bx	lr
 800637e:	f803 1b01 	strb.w	r1, [r3], #1
 8006382:	e7f9      	b.n	8006378 <memset+0x4>

08006384 <__libc_init_array>:
 8006384:	b570      	push	{r4, r5, r6, lr}
 8006386:	4d0d      	ldr	r5, [pc, #52]	; (80063bc <__libc_init_array+0x38>)
 8006388:	4c0d      	ldr	r4, [pc, #52]	; (80063c0 <__libc_init_array+0x3c>)
 800638a:	1b64      	subs	r4, r4, r5
 800638c:	10a4      	asrs	r4, r4, #2
 800638e:	2600      	movs	r6, #0
 8006390:	42a6      	cmp	r6, r4
 8006392:	d109      	bne.n	80063a8 <__libc_init_array+0x24>
 8006394:	4d0b      	ldr	r5, [pc, #44]	; (80063c4 <__libc_init_array+0x40>)
 8006396:	4c0c      	ldr	r4, [pc, #48]	; (80063c8 <__libc_init_array+0x44>)
 8006398:	f000 f818 	bl	80063cc <_init>
 800639c:	1b64      	subs	r4, r4, r5
 800639e:	10a4      	asrs	r4, r4, #2
 80063a0:	2600      	movs	r6, #0
 80063a2:	42a6      	cmp	r6, r4
 80063a4:	d105      	bne.n	80063b2 <__libc_init_array+0x2e>
 80063a6:	bd70      	pop	{r4, r5, r6, pc}
 80063a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80063ac:	4798      	blx	r3
 80063ae:	3601      	adds	r6, #1
 80063b0:	e7ee      	b.n	8006390 <__libc_init_array+0xc>
 80063b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80063b6:	4798      	blx	r3
 80063b8:	3601      	adds	r6, #1
 80063ba:	e7f2      	b.n	80063a2 <__libc_init_array+0x1e>
 80063bc:	080069c4 	.word	0x080069c4
 80063c0:	080069c4 	.word	0x080069c4
 80063c4:	080069c4 	.word	0x080069c4
 80063c8:	080069c8 	.word	0x080069c8

080063cc <_init>:
 80063cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ce:	bf00      	nop
 80063d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063d2:	bc08      	pop	{r3}
 80063d4:	469e      	mov	lr, r3
 80063d6:	4770      	bx	lr

080063d8 <_fini>:
 80063d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063da:	bf00      	nop
 80063dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063de:	bc08      	pop	{r3}
 80063e0:	469e      	mov	lr, r3
 80063e2:	4770      	bx	lr
