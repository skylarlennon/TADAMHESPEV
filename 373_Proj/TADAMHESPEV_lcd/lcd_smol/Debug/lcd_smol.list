
lcd_smol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e1c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d8  08004fa8  08004fa8  00014fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005580  08005580  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005580  08005580  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005580  08005580  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005580  08005580  00015580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005584  08005584  00015584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005588  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  20000074  080055fc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  080055fc  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010683  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025de  00000000  00000000  0003076a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001078  00000000  00000000  00032d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cba  00000000  00000000  00033dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000217de  00000000  00000000  00034a7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012557  00000000  00000000  00056258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ccbe2  00000000  00000000  000687af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004640  00000000  00000000  00135394  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  001399d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000074 	.word	0x20000074
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004f90 	.word	0x08004f90

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000078 	.word	0x20000078
 80001c8:	08004f90 	.word	0x08004f90

080001cc <__aeabi_drsub>:
 80001cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d0:	e002      	b.n	80001d8 <__adddf3>
 80001d2:	bf00      	nop

080001d4 <__aeabi_dsub>:
 80001d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d8 <__adddf3>:
 80001d8:	b530      	push	{r4, r5, lr}
 80001da:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001de:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e2:	ea94 0f05 	teq	r4, r5
 80001e6:	bf08      	it	eq
 80001e8:	ea90 0f02 	teqeq	r0, r2
 80001ec:	bf1f      	itttt	ne
 80001ee:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fe:	f000 80e2 	beq.w	80003c6 <__adddf3+0x1ee>
 8000202:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000206:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020a:	bfb8      	it	lt
 800020c:	426d      	neglt	r5, r5
 800020e:	dd0c      	ble.n	800022a <__adddf3+0x52>
 8000210:	442c      	add	r4, r5
 8000212:	ea80 0202 	eor.w	r2, r0, r2
 8000216:	ea81 0303 	eor.w	r3, r1, r3
 800021a:	ea82 0000 	eor.w	r0, r2, r0
 800021e:	ea83 0101 	eor.w	r1, r3, r1
 8000222:	ea80 0202 	eor.w	r2, r0, r2
 8000226:	ea81 0303 	eor.w	r3, r1, r3
 800022a:	2d36      	cmp	r5, #54	; 0x36
 800022c:	bf88      	it	hi
 800022e:	bd30      	pophi	{r4, r5, pc}
 8000230:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000234:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000238:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800023c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000240:	d002      	beq.n	8000248 <__adddf3+0x70>
 8000242:	4240      	negs	r0, r0
 8000244:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000248:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800024c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000250:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x84>
 8000256:	4252      	negs	r2, r2
 8000258:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800025c:	ea94 0f05 	teq	r4, r5
 8000260:	f000 80a7 	beq.w	80003b2 <__adddf3+0x1da>
 8000264:	f1a4 0401 	sub.w	r4, r4, #1
 8000268:	f1d5 0e20 	rsbs	lr, r5, #32
 800026c:	db0d      	blt.n	800028a <__adddf3+0xb2>
 800026e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000272:	fa22 f205 	lsr.w	r2, r2, r5
 8000276:	1880      	adds	r0, r0, r2
 8000278:	f141 0100 	adc.w	r1, r1, #0
 800027c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000280:	1880      	adds	r0, r0, r2
 8000282:	fa43 f305 	asr.w	r3, r3, r5
 8000286:	4159      	adcs	r1, r3
 8000288:	e00e      	b.n	80002a8 <__adddf3+0xd0>
 800028a:	f1a5 0520 	sub.w	r5, r5, #32
 800028e:	f10e 0e20 	add.w	lr, lr, #32
 8000292:	2a01      	cmp	r2, #1
 8000294:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000298:	bf28      	it	cs
 800029a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	18c0      	adds	r0, r0, r3
 80002a4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002ac:	d507      	bpl.n	80002be <__adddf3+0xe6>
 80002ae:	f04f 0e00 	mov.w	lr, #0
 80002b2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ba:	eb6e 0101 	sbc.w	r1, lr, r1
 80002be:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c2:	d31b      	bcc.n	80002fc <__adddf3+0x124>
 80002c4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c8:	d30c      	bcc.n	80002e4 <__adddf3+0x10c>
 80002ca:	0849      	lsrs	r1, r1, #1
 80002cc:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d4:	f104 0401 	add.w	r4, r4, #1
 80002d8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002dc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e0:	f080 809a 	bcs.w	8000418 <__adddf3+0x240>
 80002e4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e8:	bf08      	it	eq
 80002ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ee:	f150 0000 	adcs.w	r0, r0, #0
 80002f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f6:	ea41 0105 	orr.w	r1, r1, r5
 80002fa:	bd30      	pop	{r4, r5, pc}
 80002fc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000300:	4140      	adcs	r0, r0
 8000302:	eb41 0101 	adc.w	r1, r1, r1
 8000306:	3c01      	subs	r4, #1
 8000308:	bf28      	it	cs
 800030a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030e:	d2e9      	bcs.n	80002e4 <__adddf3+0x10c>
 8000310:	f091 0f00 	teq	r1, #0
 8000314:	bf04      	itt	eq
 8000316:	4601      	moveq	r1, r0
 8000318:	2000      	moveq	r0, #0
 800031a:	fab1 f381 	clz	r3, r1
 800031e:	bf08      	it	eq
 8000320:	3320      	addeq	r3, #32
 8000322:	f1a3 030b 	sub.w	r3, r3, #11
 8000326:	f1b3 0220 	subs.w	r2, r3, #32
 800032a:	da0c      	bge.n	8000346 <__adddf3+0x16e>
 800032c:	320c      	adds	r2, #12
 800032e:	dd08      	ble.n	8000342 <__adddf3+0x16a>
 8000330:	f102 0c14 	add.w	ip, r2, #20
 8000334:	f1c2 020c 	rsb	r2, r2, #12
 8000338:	fa01 f00c 	lsl.w	r0, r1, ip
 800033c:	fa21 f102 	lsr.w	r1, r1, r2
 8000340:	e00c      	b.n	800035c <__adddf3+0x184>
 8000342:	f102 0214 	add.w	r2, r2, #20
 8000346:	bfd8      	it	le
 8000348:	f1c2 0c20 	rsble	ip, r2, #32
 800034c:	fa01 f102 	lsl.w	r1, r1, r2
 8000350:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000354:	bfdc      	itt	le
 8000356:	ea41 010c 	orrle.w	r1, r1, ip
 800035a:	4090      	lslle	r0, r2
 800035c:	1ae4      	subs	r4, r4, r3
 800035e:	bfa2      	ittt	ge
 8000360:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000364:	4329      	orrge	r1, r5
 8000366:	bd30      	popge	{r4, r5, pc}
 8000368:	ea6f 0404 	mvn.w	r4, r4
 800036c:	3c1f      	subs	r4, #31
 800036e:	da1c      	bge.n	80003aa <__adddf3+0x1d2>
 8000370:	340c      	adds	r4, #12
 8000372:	dc0e      	bgt.n	8000392 <__adddf3+0x1ba>
 8000374:	f104 0414 	add.w	r4, r4, #20
 8000378:	f1c4 0220 	rsb	r2, r4, #32
 800037c:	fa20 f004 	lsr.w	r0, r0, r4
 8000380:	fa01 f302 	lsl.w	r3, r1, r2
 8000384:	ea40 0003 	orr.w	r0, r0, r3
 8000388:	fa21 f304 	lsr.w	r3, r1, r4
 800038c:	ea45 0103 	orr.w	r1, r5, r3
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	f1c4 040c 	rsb	r4, r4, #12
 8000396:	f1c4 0220 	rsb	r2, r4, #32
 800039a:	fa20 f002 	lsr.w	r0, r0, r2
 800039e:	fa01 f304 	lsl.w	r3, r1, r4
 80003a2:	ea40 0003 	orr.w	r0, r0, r3
 80003a6:	4629      	mov	r1, r5
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	fa21 f004 	lsr.w	r0, r1, r4
 80003ae:	4629      	mov	r1, r5
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f094 0f00 	teq	r4, #0
 80003b6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ba:	bf06      	itte	eq
 80003bc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c0:	3401      	addeq	r4, #1
 80003c2:	3d01      	subne	r5, #1
 80003c4:	e74e      	b.n	8000264 <__adddf3+0x8c>
 80003c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ca:	bf18      	it	ne
 80003cc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d0:	d029      	beq.n	8000426 <__adddf3+0x24e>
 80003d2:	ea94 0f05 	teq	r4, r5
 80003d6:	bf08      	it	eq
 80003d8:	ea90 0f02 	teqeq	r0, r2
 80003dc:	d005      	beq.n	80003ea <__adddf3+0x212>
 80003de:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e2:	bf04      	itt	eq
 80003e4:	4619      	moveq	r1, r3
 80003e6:	4610      	moveq	r0, r2
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea91 0f03 	teq	r1, r3
 80003ee:	bf1e      	ittt	ne
 80003f0:	2100      	movne	r1, #0
 80003f2:	2000      	movne	r0, #0
 80003f4:	bd30      	popne	{r4, r5, pc}
 80003f6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fa:	d105      	bne.n	8000408 <__adddf3+0x230>
 80003fc:	0040      	lsls	r0, r0, #1
 80003fe:	4149      	adcs	r1, r1
 8000400:	bf28      	it	cs
 8000402:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000406:	bd30      	pop	{r4, r5, pc}
 8000408:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800040c:	bf3c      	itt	cc
 800040e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000412:	bd30      	popcc	{r4, r5, pc}
 8000414:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000418:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800041c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000420:	f04f 0000 	mov.w	r0, #0
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042a:	bf1a      	itte	ne
 800042c:	4619      	movne	r1, r3
 800042e:	4610      	movne	r0, r2
 8000430:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000434:	bf1c      	itt	ne
 8000436:	460b      	movne	r3, r1
 8000438:	4602      	movne	r2, r0
 800043a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043e:	bf06      	itte	eq
 8000440:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000444:	ea91 0f03 	teqeq	r1, r3
 8000448:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	bf00      	nop

08000450 <__aeabi_ui2d>:
 8000450:	f090 0f00 	teq	r0, #0
 8000454:	bf04      	itt	eq
 8000456:	2100      	moveq	r1, #0
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000460:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000464:	f04f 0500 	mov.w	r5, #0
 8000468:	f04f 0100 	mov.w	r1, #0
 800046c:	e750      	b.n	8000310 <__adddf3+0x138>
 800046e:	bf00      	nop

08000470 <__aeabi_i2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000484:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000488:	bf48      	it	mi
 800048a:	4240      	negmi	r0, r0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e73e      	b.n	8000310 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_f2d>:
 8000494:	0042      	lsls	r2, r0, #1
 8000496:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049a:	ea4f 0131 	mov.w	r1, r1, rrx
 800049e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a2:	bf1f      	itttt	ne
 80004a4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004ac:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b0:	4770      	bxne	lr
 80004b2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b6:	bf08      	it	eq
 80004b8:	4770      	bxeq	lr
 80004ba:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004be:	bf04      	itt	eq
 80004c0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d4:	e71c      	b.n	8000310 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_ul2d>:
 80004d8:	ea50 0201 	orrs.w	r2, r0, r1
 80004dc:	bf08      	it	eq
 80004de:	4770      	bxeq	lr
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	f04f 0500 	mov.w	r5, #0
 80004e6:	e00a      	b.n	80004fe <__aeabi_l2d+0x16>

080004e8 <__aeabi_l2d>:
 80004e8:	ea50 0201 	orrs.w	r2, r0, r1
 80004ec:	bf08      	it	eq
 80004ee:	4770      	bxeq	lr
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f6:	d502      	bpl.n	80004fe <__aeabi_l2d+0x16>
 80004f8:	4240      	negs	r0, r0
 80004fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fe:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000502:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000506:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050a:	f43f aed8 	beq.w	80002be <__adddf3+0xe6>
 800050e:	f04f 0203 	mov.w	r2, #3
 8000512:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000516:	bf18      	it	ne
 8000518:	3203      	addne	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000526:	f1c2 0320 	rsb	r3, r2, #32
 800052a:	fa00 fc03 	lsl.w	ip, r0, r3
 800052e:	fa20 f002 	lsr.w	r0, r0, r2
 8000532:	fa01 fe03 	lsl.w	lr, r1, r3
 8000536:	ea40 000e 	orr.w	r0, r0, lr
 800053a:	fa21 f102 	lsr.w	r1, r1, r2
 800053e:	4414      	add	r4, r2
 8000540:	e6bd      	b.n	80002be <__adddf3+0xe6>
 8000542:	bf00      	nop

08000544 <__aeabi_dmul>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000552:	bf1d      	ittte	ne
 8000554:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000558:	ea94 0f0c 	teqne	r4, ip
 800055c:	ea95 0f0c 	teqne	r5, ip
 8000560:	f000 f8de 	bleq	8000720 <__aeabi_dmul+0x1dc>
 8000564:	442c      	add	r4, r5
 8000566:	ea81 0603 	eor.w	r6, r1, r3
 800056a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000572:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000576:	bf18      	it	ne
 8000578:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800057c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000580:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000584:	d038      	beq.n	80005f8 <__aeabi_dmul+0xb4>
 8000586:	fba0 ce02 	umull	ip, lr, r0, r2
 800058a:	f04f 0500 	mov.w	r5, #0
 800058e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000592:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000596:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059a:	f04f 0600 	mov.w	r6, #0
 800059e:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a2:	f09c 0f00 	teq	ip, #0
 80005a6:	bf18      	it	ne
 80005a8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005ac:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b8:	d204      	bcs.n	80005c4 <__aeabi_dmul+0x80>
 80005ba:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005be:	416d      	adcs	r5, r5
 80005c0:	eb46 0606 	adc.w	r6, r6, r6
 80005c4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005cc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005dc:	bf88      	it	hi
 80005de:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e2:	d81e      	bhi.n	8000622 <__aeabi_dmul+0xde>
 80005e4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e8:	bf08      	it	eq
 80005ea:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ee:	f150 0000 	adcs.w	r0, r0, #0
 80005f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005fc:	ea46 0101 	orr.w	r1, r6, r1
 8000600:	ea40 0002 	orr.w	r0, r0, r2
 8000604:	ea81 0103 	eor.w	r1, r1, r3
 8000608:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800060c:	bfc2      	ittt	gt
 800060e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000612:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000616:	bd70      	popgt	{r4, r5, r6, pc}
 8000618:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800061c:	f04f 0e00 	mov.w	lr, #0
 8000620:	3c01      	subs	r4, #1
 8000622:	f300 80ab 	bgt.w	800077c <__aeabi_dmul+0x238>
 8000626:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062a:	bfde      	ittt	le
 800062c:	2000      	movle	r0, #0
 800062e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000632:	bd70      	pople	{r4, r5, r6, pc}
 8000634:	f1c4 0400 	rsb	r4, r4, #0
 8000638:	3c20      	subs	r4, #32
 800063a:	da35      	bge.n	80006a8 <__aeabi_dmul+0x164>
 800063c:	340c      	adds	r4, #12
 800063e:	dc1b      	bgt.n	8000678 <__aeabi_dmul+0x134>
 8000640:	f104 0414 	add.w	r4, r4, #20
 8000644:	f1c4 0520 	rsb	r5, r4, #32
 8000648:	fa00 f305 	lsl.w	r3, r0, r5
 800064c:	fa20 f004 	lsr.w	r0, r0, r4
 8000650:	fa01 f205 	lsl.w	r2, r1, r5
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800065c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000660:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000664:	fa21 f604 	lsr.w	r6, r1, r4
 8000668:	eb42 0106 	adc.w	r1, r2, r6
 800066c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000670:	bf08      	it	eq
 8000672:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f1c4 040c 	rsb	r4, r4, #12
 800067c:	f1c4 0520 	rsb	r5, r4, #32
 8000680:	fa00 f304 	lsl.w	r3, r0, r4
 8000684:	fa20 f005 	lsr.w	r0, r0, r5
 8000688:	fa01 f204 	lsl.w	r2, r1, r4
 800068c:	ea40 0002 	orr.w	r0, r0, r2
 8000690:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	f141 0100 	adc.w	r1, r1, #0
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f205 	lsl.w	r2, r0, r5
 80006b0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b4:	fa20 f304 	lsr.w	r3, r0, r4
 80006b8:	fa01 f205 	lsl.w	r2, r1, r5
 80006bc:	ea43 0302 	orr.w	r3, r3, r2
 80006c0:	fa21 f004 	lsr.w	r0, r1, r4
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	fa21 f204 	lsr.w	r2, r1, r4
 80006cc:	ea20 0002 	bic.w	r0, r0, r2
 80006d0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f094 0f00 	teq	r4, #0
 80006e4:	d10f      	bne.n	8000706 <__aeabi_dmul+0x1c2>
 80006e6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ea:	0040      	lsls	r0, r0, #1
 80006ec:	eb41 0101 	adc.w	r1, r1, r1
 80006f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f4:	bf08      	it	eq
 80006f6:	3c01      	subeq	r4, #1
 80006f8:	d0f7      	beq.n	80006ea <__aeabi_dmul+0x1a6>
 80006fa:	ea41 0106 	orr.w	r1, r1, r6
 80006fe:	f095 0f00 	teq	r5, #0
 8000702:	bf18      	it	ne
 8000704:	4770      	bxne	lr
 8000706:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070a:	0052      	lsls	r2, r2, #1
 800070c:	eb43 0303 	adc.w	r3, r3, r3
 8000710:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000714:	bf08      	it	eq
 8000716:	3d01      	subeq	r5, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1c6>
 800071a:	ea43 0306 	orr.w	r3, r3, r6
 800071e:	4770      	bx	lr
 8000720:	ea94 0f0c 	teq	r4, ip
 8000724:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000728:	bf18      	it	ne
 800072a:	ea95 0f0c 	teqne	r5, ip
 800072e:	d00c      	beq.n	800074a <__aeabi_dmul+0x206>
 8000730:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000734:	bf18      	it	ne
 8000736:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073a:	d1d1      	bne.n	80006e0 <__aeabi_dmul+0x19c>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074e:	bf06      	itte	eq
 8000750:	4610      	moveq	r0, r2
 8000752:	4619      	moveq	r1, r3
 8000754:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000758:	d019      	beq.n	800078e <__aeabi_dmul+0x24a>
 800075a:	ea94 0f0c 	teq	r4, ip
 800075e:	d102      	bne.n	8000766 <__aeabi_dmul+0x222>
 8000760:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000764:	d113      	bne.n	800078e <__aeabi_dmul+0x24a>
 8000766:	ea95 0f0c 	teq	r5, ip
 800076a:	d105      	bne.n	8000778 <__aeabi_dmul+0x234>
 800076c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000770:	bf1c      	itt	ne
 8000772:	4610      	movne	r0, r2
 8000774:	4619      	movne	r1, r3
 8000776:	d10a      	bne.n	800078e <__aeabi_dmul+0x24a>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000784:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000792:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000796:	bd70      	pop	{r4, r5, r6, pc}

08000798 <__aeabi_ddiv>:
 8000798:	b570      	push	{r4, r5, r6, lr}
 800079a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a6:	bf1d      	ittte	ne
 80007a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007ac:	ea94 0f0c 	teqne	r4, ip
 80007b0:	ea95 0f0c 	teqne	r5, ip
 80007b4:	f000 f8a7 	bleq	8000906 <__aeabi_ddiv+0x16e>
 80007b8:	eba4 0405 	sub.w	r4, r4, r5
 80007bc:	ea81 0e03 	eor.w	lr, r1, r3
 80007c0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c8:	f000 8088 	beq.w	80008dc <__aeabi_ddiv+0x144>
 80007cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007dc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007ec:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f0:	429d      	cmp	r5, r3
 80007f2:	bf08      	it	eq
 80007f4:	4296      	cmpeq	r6, r2
 80007f6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fa:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fe:	d202      	bcs.n	8000806 <__aeabi_ddiv+0x6e>
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	1ab6      	subs	r6, r6, r2
 8000808:	eb65 0503 	sbc.w	r5, r5, r3
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000816:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081a:	ebb6 0e02 	subs.w	lr, r6, r2
 800081e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000822:	bf22      	ittt	cs
 8000824:	1ab6      	subcs	r6, r6, r2
 8000826:	4675      	movcs	r5, lr
 8000828:	ea40 000c 	orrcs.w	r0, r0, ip
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	ebb6 0e02 	subs.w	lr, r6, r2
 8000836:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083a:	bf22      	ittt	cs
 800083c:	1ab6      	subcs	r6, r6, r2
 800083e:	4675      	movcs	r5, lr
 8000840:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000874:	ea55 0e06 	orrs.w	lr, r5, r6
 8000878:	d018      	beq.n	80008ac <__aeabi_ddiv+0x114>
 800087a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000882:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000886:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000892:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000896:	d1c0      	bne.n	800081a <__aeabi_ddiv+0x82>
 8000898:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800089c:	d10b      	bne.n	80008b6 <__aeabi_ddiv+0x11e>
 800089e:	ea41 0100 	orr.w	r1, r1, r0
 80008a2:	f04f 0000 	mov.w	r0, #0
 80008a6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008aa:	e7b6      	b.n	800081a <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	bf04      	itt	eq
 80008b2:	4301      	orreq	r1, r0
 80008b4:	2000      	moveq	r0, #0
 80008b6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ba:	bf88      	it	hi
 80008bc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c0:	f63f aeaf 	bhi.w	8000622 <__aeabi_dmul+0xde>
 80008c4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c8:	bf04      	itt	eq
 80008ca:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d2:	f150 0000 	adcs.w	r0, r0, #0
 80008d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008da:	bd70      	pop	{r4, r5, r6, pc}
 80008dc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e8:	bfc2      	ittt	gt
 80008ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f2:	bd70      	popgt	{r4, r5, r6, pc}
 80008f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f8:	f04f 0e00 	mov.w	lr, #0
 80008fc:	3c01      	subs	r4, #1
 80008fe:	e690      	b.n	8000622 <__aeabi_dmul+0xde>
 8000900:	ea45 0e06 	orr.w	lr, r5, r6
 8000904:	e68d      	b.n	8000622 <__aeabi_dmul+0xde>
 8000906:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090a:	ea94 0f0c 	teq	r4, ip
 800090e:	bf08      	it	eq
 8000910:	ea95 0f0c 	teqeq	r5, ip
 8000914:	f43f af3b 	beq.w	800078e <__aeabi_dmul+0x24a>
 8000918:	ea94 0f0c 	teq	r4, ip
 800091c:	d10a      	bne.n	8000934 <__aeabi_ddiv+0x19c>
 800091e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000922:	f47f af34 	bne.w	800078e <__aeabi_dmul+0x24a>
 8000926:	ea95 0f0c 	teq	r5, ip
 800092a:	f47f af25 	bne.w	8000778 <__aeabi_dmul+0x234>
 800092e:	4610      	mov	r0, r2
 8000930:	4619      	mov	r1, r3
 8000932:	e72c      	b.n	800078e <__aeabi_dmul+0x24a>
 8000934:	ea95 0f0c 	teq	r5, ip
 8000938:	d106      	bne.n	8000948 <__aeabi_ddiv+0x1b0>
 800093a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093e:	f43f aefd 	beq.w	800073c <__aeabi_dmul+0x1f8>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e722      	b.n	800078e <__aeabi_dmul+0x24a>
 8000948:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800094c:	bf18      	it	ne
 800094e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000952:	f47f aec5 	bne.w	80006e0 <__aeabi_dmul+0x19c>
 8000956:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095a:	f47f af0d 	bne.w	8000778 <__aeabi_dmul+0x234>
 800095e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000962:	f47f aeeb 	bne.w	800073c <__aeabi_dmul+0x1f8>
 8000966:	e712      	b.n	800078e <__aeabi_dmul+0x24a>

08000968 <__aeabi_d2iz>:
 8000968:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800096c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000970:	d215      	bcs.n	800099e <__aeabi_d2iz+0x36>
 8000972:	d511      	bpl.n	8000998 <__aeabi_d2iz+0x30>
 8000974:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000978:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800097c:	d912      	bls.n	80009a4 <__aeabi_d2iz+0x3c>
 800097e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000982:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000986:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800098e:	fa23 f002 	lsr.w	r0, r3, r2
 8000992:	bf18      	it	ne
 8000994:	4240      	negne	r0, r0
 8000996:	4770      	bx	lr
 8000998:	f04f 0000 	mov.w	r0, #0
 800099c:	4770      	bx	lr
 800099e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a2:	d105      	bne.n	80009b0 <__aeabi_d2iz+0x48>
 80009a4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009a8:	bf08      	it	eq
 80009aa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009ae:	4770      	bx	lr
 80009b0:	f04f 0000 	mov.w	r0, #0
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <uint16_to_bytes>:
  }
#endif

// Probably going to move these to a different file, but for now
void uint16_to_bytes(uint16_t in, uint8_t *out)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	6039      	str	r1, [r7, #0]
 80009c2:	80fb      	strh	r3, [r7, #6]
	out[0] = (in >> 8) & 0xFF;
 80009c4:	88fb      	ldrh	r3, [r7, #6]
 80009c6:	0a1b      	lsrs	r3, r3, #8
 80009c8:	b29b      	uxth	r3, r3
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	701a      	strb	r2, [r3, #0]
	out[1] = in & 0xFF;
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	3301      	adds	r3, #1
 80009d4:	88fa      	ldrh	r2, [r7, #6]
 80009d6:	b2d2      	uxtb	r2, r2
 80009d8:	701a      	strb	r2, [r3, #0]
}
 80009da:	bf00      	nop
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
	...

080009e8 <LCD_reset>:
	HX8357_DISPON, 0x80 +  50/5, // Main screen turn on, delay 50 ms
	0,                           // END OF COMMAND LIST
  };

void LCD_reset()
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 80009ec:	2201      	movs	r2, #1
 80009ee:	2110      	movs	r1, #16
 80009f0:	480b      	ldr	r0, [pc, #44]	; (8000a20 <LCD_reset+0x38>)
 80009f2:	f001 ff4f 	bl	8002894 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80009f6:	2064      	movs	r0, #100	; 0x64
 80009f8:	f001 fcdc 	bl	80023b4 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 80009fc:	2200      	movs	r2, #0
 80009fe:	2110      	movs	r1, #16
 8000a00:	4807      	ldr	r0, [pc, #28]	; (8000a20 <LCD_reset+0x38>)
 8000a02:	f001 ff47 	bl	8002894 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000a06:	2064      	movs	r0, #100	; 0x64
 8000a08:	f001 fcd4 	bl	80023b4 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	2110      	movs	r1, #16
 8000a10:	4803      	ldr	r0, [pc, #12]	; (8000a20 <LCD_reset+0x38>)
 8000a12:	f001 ff3f 	bl	8002894 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000a16:	20c8      	movs	r0, #200	; 0xc8
 8000a18:	f001 fccc 	bl	80023b4 <HAL_Delay>
}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	48000400 	.word	0x48000400

08000a24 <LCD_writeCommand>:

HAL_StatusTypeDef LCD_writeCommand(SPI_HandleTypeDef* spi, uint8_t cmd)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af02      	add	r7, sp, #8
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	460b      	mov	r3, r1
 8000a2e:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef result;
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2120      	movs	r1, #32
 8000a34:	480b      	ldr	r0, [pc, #44]	; (8000a64 <LCD_writeCommand+0x40>)
 8000a36:	f001 ff2d 	bl	8002894 <HAL_GPIO_WritePin>
	uint8_t buf[1];
	result = HAL_SPI_TransmitReceive(spi, &cmd, &buf[0], 1, 100);
 8000a3a:	f107 020c 	add.w	r2, r7, #12
 8000a3e:	1cf9      	adds	r1, r7, #3
 8000a40:	2364      	movs	r3, #100	; 0x64
 8000a42:	9300      	str	r3, [sp, #0]
 8000a44:	2301      	movs	r3, #1
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f003 fc32 	bl	80042b0 <HAL_SPI_TransmitReceive>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000a50:	2201      	movs	r2, #1
 8000a52:	2120      	movs	r1, #32
 8000a54:	4803      	ldr	r0, [pc, #12]	; (8000a64 <LCD_writeCommand+0x40>)
 8000a56:	f001 ff1d 	bl	8002894 <HAL_GPIO_WritePin>
	return result;
 8000a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3710      	adds	r7, #16
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	48000400 	.word	0x48000400

08000a68 <LCD_startWrite>:

void LCD_startWrite()
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2140      	movs	r1, #64	; 0x40
 8000a70:	4802      	ldr	r0, [pc, #8]	; (8000a7c <LCD_startWrite+0x14>)
 8000a72:	f001 ff0f 	bl	8002894 <HAL_GPIO_WritePin>
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	48000400 	.word	0x48000400

08000a80 <LCD_endWrite>:

void LCD_endWrite()
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000a84:	2201      	movs	r2, #1
 8000a86:	2140      	movs	r1, #64	; 0x40
 8000a88:	4802      	ldr	r0, [pc, #8]	; (8000a94 <LCD_endWrite+0x14>)
 8000a8a:	f001 ff03 	bl	8002894 <HAL_GPIO_WritePin>
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	48000400 	.word	0x48000400

08000a98 <LCD_begin>:

int LCD_begin(SPI_HandleTypeDef* spi)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	LCD_reset();
 8000aa0:	f7ff ffa2 	bl	80009e8 <LCD_reset>
	LCD_startWrite();
 8000aa4:	f7ff ffe0 	bl	8000a68 <LCD_startWrite>
	uint8_t *addr = init;
 8000aa8:	4b26      	ldr	r3, [pc, #152]	; (8000b44 <LCD_begin+0xac>)
 8000aaa:	60fb      	str	r3, [r7, #12]
	uint8_t cmd, x, numArgs;
	HAL_StatusTypeDef result;
	while((cmd = *(addr++)) > 0) // '0' command ends list
 8000aac:	e03b      	b.n	8000b26 <LCD_begin+0x8e>
	{
		if (cmd != 0xFF) // '255' is ignored
 8000aae:	7abb      	ldrb	r3, [r7, #10]
 8000ab0:	2bff      	cmp	r3, #255	; 0xff
 8000ab2:	d00d      	beq.n	8000ad0 <LCD_begin+0x38>
		{
			result = LCD_writeCommand(spi, cmd);
 8000ab4:	7abb      	ldrb	r3, [r7, #10]
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f7ff ffb3 	bl	8000a24 <LCD_writeCommand>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	727b      	strb	r3, [r7, #9]
			if (result != HAL_OK)
 8000ac2:	7a7b      	ldrb	r3, [r7, #9]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d003      	beq.n	8000ad0 <LCD_begin+0x38>
			{
				LCD_endWrite();
 8000ac8:	f7ff ffda 	bl	8000a80 <LCD_endWrite>
				return 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	e035      	b.n	8000b3c <LCD_begin+0xa4>
			}
		}
		x = *(addr++);
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	1c5a      	adds	r2, r3, #1
 8000ad4:	60fa      	str	r2, [r7, #12]
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	723b      	strb	r3, [r7, #8]
		numArgs = x & 0x7F;
 8000ada:	7a3b      	ldrb	r3, [r7, #8]
 8000adc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ae0:	72fb      	strb	r3, [r7, #11]
		if (x & 0x80) // If high bit set...
 8000ae2:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	da18      	bge.n	8000b1c <LCD_begin+0x84>
		{
			HAL_Delay(numArgs * 5); // numArgs is actually a delay time (5ms units)
 8000aea:	7afa      	ldrb	r2, [r7, #11]
 8000aec:	4613      	mov	r3, r2
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	4413      	add	r3, r2
 8000af2:	4618      	mov	r0, r3
 8000af4:	f001 fc5e 	bl	80023b4 <HAL_Delay>
 8000af8:	e015      	b.n	8000b26 <LCD_begin+0x8e>
		}
		else // Otherwise, issue args to command...
		{
			while (numArgs--)
			{
				result = HAL_SPI_Transmit(spi, addr++, 1, 100);
 8000afa:	68f9      	ldr	r1, [r7, #12]
 8000afc:	1c4b      	adds	r3, r1, #1
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	2364      	movs	r3, #100	; 0x64
 8000b02:	2201      	movs	r2, #1
 8000b04:	6878      	ldr	r0, [r7, #4]
 8000b06:	f003 fa5e 	bl	8003fc6 <HAL_SPI_Transmit>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	727b      	strb	r3, [r7, #9]
				if (result != HAL_OK)
 8000b0e:	7a7b      	ldrb	r3, [r7, #9]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d003      	beq.n	8000b1c <LCD_begin+0x84>
				{
					LCD_endWrite();
 8000b14:	f7ff ffb4 	bl	8000a80 <LCD_endWrite>
					return 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	e00f      	b.n	8000b3c <LCD_begin+0xa4>
			while (numArgs--)
 8000b1c:	7afb      	ldrb	r3, [r7, #11]
 8000b1e:	1e5a      	subs	r2, r3, #1
 8000b20:	72fa      	strb	r2, [r7, #11]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d1e9      	bne.n	8000afa <LCD_begin+0x62>
	while((cmd = *(addr++)) > 0) // '0' command ends list
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	1c5a      	adds	r2, r3, #1
 8000b2a:	60fa      	str	r2, [r7, #12]
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	72bb      	strb	r3, [r7, #10]
 8000b30:	7abb      	ldrb	r3, [r7, #10]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d1bb      	bne.n	8000aae <LCD_begin+0x16>
				}
			}
		}
	}
	LCD_endWrite();
 8000b36:	f7ff ffa3 	bl	8000a80 <LCD_endWrite>
	return 1;
 8000b3a:	2301      	movs	r3, #1
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3710      	adds	r7, #16
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000000 	.word	0x20000000

08000b48 <LCD_setAddrWindow>:
	LCD_endWrite();
	return result == HAL_OK;
}

int LCD_setAddrWindow(SPI_HandleTypeDef* spi, uint16_t x1, uint16_t y1, uint16_t w, uint16_t h)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	4608      	mov	r0, r1
 8000b52:	4611      	mov	r1, r2
 8000b54:	461a      	mov	r2, r3
 8000b56:	4603      	mov	r3, r0
 8000b58:	817b      	strh	r3, [r7, #10]
 8000b5a:	460b      	mov	r3, r1
 8000b5c:	813b      	strh	r3, [r7, #8]
 8000b5e:	4613      	mov	r3, r2
 8000b60:	80fb      	strh	r3, [r7, #6]
	uint16_t x2 = x1 + w - 1;
 8000b62:	897a      	ldrh	r2, [r7, #10]
 8000b64:	88fb      	ldrh	r3, [r7, #6]
 8000b66:	4413      	add	r3, r2
 8000b68:	b29b      	uxth	r3, r3
 8000b6a:	3b01      	subs	r3, #1
 8000b6c:	82fb      	strh	r3, [r7, #22]
	uint16_t y2 = y1 + h - 1;
 8000b6e:	893a      	ldrh	r2, [r7, #8]
 8000b70:	8c3b      	ldrh	r3, [r7, #32]
 8000b72:	4413      	add	r3, r2
 8000b74:	b29b      	uxth	r3, r3
 8000b76:	3b01      	subs	r3, #1
 8000b78:	82bb      	strh	r3, [r7, #20]
	uint8_t buf[2];

	LCD_startWrite();
 8000b7a:	f7ff ff75 	bl	8000a68 <LCD_startWrite>
	LCD_writeCommand(spi, HX8357_CASET); // Column address set
 8000b7e:	212a      	movs	r1, #42	; 0x2a
 8000b80:	68f8      	ldr	r0, [r7, #12]
 8000b82:	f7ff ff4f 	bl	8000a24 <LCD_writeCommand>

	uint16_to_bytes(x1, buf);
 8000b86:	f107 0210 	add.w	r2, r7, #16
 8000b8a:	897b      	ldrh	r3, [r7, #10]
 8000b8c:	4611      	mov	r1, r2
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff ff12 	bl	80009b8 <uint16_to_bytes>
	HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 8000b94:	f107 0110 	add.w	r1, r7, #16
 8000b98:	2364      	movs	r3, #100	; 0x64
 8000b9a:	2202      	movs	r2, #2
 8000b9c:	68f8      	ldr	r0, [r7, #12]
 8000b9e:	f003 fa12 	bl	8003fc6 <HAL_SPI_Transmit>

	uint16_to_bytes(x2, buf);
 8000ba2:	f107 0210 	add.w	r2, r7, #16
 8000ba6:	8afb      	ldrh	r3, [r7, #22]
 8000ba8:	4611      	mov	r1, r2
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff ff04 	bl	80009b8 <uint16_to_bytes>
	HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 8000bb0:	f107 0110 	add.w	r1, r7, #16
 8000bb4:	2364      	movs	r3, #100	; 0x64
 8000bb6:	2202      	movs	r2, #2
 8000bb8:	68f8      	ldr	r0, [r7, #12]
 8000bba:	f003 fa04 	bl	8003fc6 <HAL_SPI_Transmit>

	LCD_writeCommand(spi, HX8357_PASET); // Row address set
 8000bbe:	212b      	movs	r1, #43	; 0x2b
 8000bc0:	68f8      	ldr	r0, [r7, #12]
 8000bc2:	f7ff ff2f 	bl	8000a24 <LCD_writeCommand>

	uint16_to_bytes(y1, buf);
 8000bc6:	f107 0210 	add.w	r2, r7, #16
 8000bca:	893b      	ldrh	r3, [r7, #8]
 8000bcc:	4611      	mov	r1, r2
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff fef2 	bl	80009b8 <uint16_to_bytes>
	HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 8000bd4:	f107 0110 	add.w	r1, r7, #16
 8000bd8:	2364      	movs	r3, #100	; 0x64
 8000bda:	2202      	movs	r2, #2
 8000bdc:	68f8      	ldr	r0, [r7, #12]
 8000bde:	f003 f9f2 	bl	8003fc6 <HAL_SPI_Transmit>

	uint16_to_bytes(y2, buf);
 8000be2:	f107 0210 	add.w	r2, r7, #16
 8000be6:	8abb      	ldrh	r3, [r7, #20]
 8000be8:	4611      	mov	r1, r2
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff fee4 	bl	80009b8 <uint16_to_bytes>
	HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 8000bf0:	f107 0110 	add.w	r1, r7, #16
 8000bf4:	2364      	movs	r3, #100	; 0x64
 8000bf6:	2202      	movs	r2, #2
 8000bf8:	68f8      	ldr	r0, [r7, #12]
 8000bfa:	f003 f9e4 	bl	8003fc6 <HAL_SPI_Transmit>

	LCD_endWrite();
 8000bfe:	f7ff ff3f 	bl	8000a80 <LCD_endWrite>
	return 1;
 8000c02:	2301      	movs	r3, #1
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3718      	adds	r7, #24
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <LCD_color565>:

uint16_t LCD_color565(uint8_t red, uint8_t green, uint8_t blue) {
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]
 8000c16:	460b      	mov	r3, r1
 8000c18:	71bb      	strb	r3, [r7, #6]
 8000c1a:	4613      	mov	r3, r2
 8000c1c:	717b      	strb	r3, [r7, #5]
    return ((red & 0xF8) << 8) | ((green & 0xFC) << 3) | ((blue & 0xF8) >> 3);
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	021b      	lsls	r3, r3, #8
 8000c22:	b21b      	sxth	r3, r3
 8000c24:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000c28:	f023 0307 	bic.w	r3, r3, #7
 8000c2c:	b21a      	sxth	r2, r3
 8000c2e:	79bb      	ldrb	r3, [r7, #6]
 8000c30:	00db      	lsls	r3, r3, #3
 8000c32:	b21b      	sxth	r3, r3
 8000c34:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8000c38:	b21b      	sxth	r3, r3
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	b21a      	sxth	r2, r3
 8000c3e:	797b      	ldrb	r3, [r7, #5]
 8000c40:	08db      	lsrs	r3, r3, #3
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	b21b      	sxth	r3, r3
 8000c46:	4313      	orrs	r3, r2
 8000c48:	b21b      	sxth	r3, r3
 8000c4a:	b29b      	uxth	r3, r3
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <LCD_pushColor>:

int LCD_pushColor(SPI_HandleTypeDef* spi, uint16_t color) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	460b      	mov	r3, r1
 8000c62:	807b      	strh	r3, [r7, #2]
	LCD_startWrite();
 8000c64:	f7ff ff00 	bl	8000a68 <LCD_startWrite>
	LCD_writeCommand(spi, HX8357_RAMWR); // Write to RAM
 8000c68:	212c      	movs	r1, #44	; 0x2c
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f7ff feda 	bl	8000a24 <LCD_writeCommand>
	HAL_SPI_Transmit(spi, (uint8_t*)&color, 2, 100);
 8000c70:	1cb9      	adds	r1, r7, #2
 8000c72:	2364      	movs	r3, #100	; 0x64
 8000c74:	2202      	movs	r2, #2
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f003 f9a5 	bl	8003fc6 <HAL_SPI_Transmit>
	LCD_writeCommand(spi, HX8357_NOP); // Write command to stop RAMWR
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f7ff fed0 	bl	8000a24 <LCD_writeCommand>
	LCD_endWrite();
 8000c84:	f7ff fefc 	bl	8000a80 <LCD_endWrite>
	return 1;
 8000c88:	2301      	movs	r3, #1
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <LCD_pushColorCopy>:

int LCD_pushColorCopy(SPI_HandleTypeDef* spi, uint16_t color, uint32_t count) {
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b086      	sub	sp, #24
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	60f8      	str	r0, [r7, #12]
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	607a      	str	r2, [r7, #4]
 8000c9e:	817b      	strh	r3, [r7, #10]
	LCD_startWrite();
 8000ca0:	f7ff fee2 	bl	8000a68 <LCD_startWrite>

	LCD_writeCommand(spi, HX8357_RAMWR); // Write to RAM
 8000ca4:	212c      	movs	r1, #44	; 0x2c
 8000ca6:	68f8      	ldr	r0, [r7, #12]
 8000ca8:	f7ff febc 	bl	8000a24 <LCD_writeCommand>

	uint8_t buf[2];
	uint16_to_bytes(color, &buf[0]);
 8000cac:	f107 0210 	add.w	r2, r7, #16
 8000cb0:	897b      	ldrh	r3, [r7, #10]
 8000cb2:	4611      	mov	r1, r2
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff fe7f 	bl	80009b8 <uint16_to_bytes>
	for (int i = 0; i < count; ++i)
 8000cba:	2300      	movs	r3, #0
 8000cbc:	617b      	str	r3, [r7, #20]
 8000cbe:	e009      	b.n	8000cd4 <LCD_pushColorCopy+0x42>
	{
		HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 8000cc0:	f107 0110 	add.w	r1, r7, #16
 8000cc4:	2364      	movs	r3, #100	; 0x64
 8000cc6:	2202      	movs	r2, #2
 8000cc8:	68f8      	ldr	r0, [r7, #12]
 8000cca:	f003 f97c 	bl	8003fc6 <HAL_SPI_Transmit>
	for (int i = 0; i < count; ++i)
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	617b      	str	r3, [r7, #20]
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d8f1      	bhi.n	8000cc0 <LCD_pushColorCopy+0x2e>
	}

	LCD_writeCommand(spi, HX8357_NOP); // Write command to stop RAMWR
 8000cdc:	2100      	movs	r1, #0
 8000cde:	68f8      	ldr	r0, [r7, #12]
 8000ce0:	f7ff fea0 	bl	8000a24 <LCD_writeCommand>

	LCD_endWrite();
 8000ce4:	f7ff fecc 	bl	8000a80 <LCD_endWrite>
	return 1;
 8000ce8:	2301      	movs	r3, #1
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3718      	adds	r7, #24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <LCD_writePixel>:

	LCD_endWrite();
	return 1;
}

int LCD_writePixel(SPI_HandleTypeDef* spi, int16_t x, int16_t y, uint16_t color) {
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b086      	sub	sp, #24
 8000cf6:	af02      	add	r7, sp, #8
 8000cf8:	60f8      	str	r0, [r7, #12]
 8000cfa:	4608      	mov	r0, r1
 8000cfc:	4611      	mov	r1, r2
 8000cfe:	461a      	mov	r2, r3
 8000d00:	4603      	mov	r3, r0
 8000d02:	817b      	strh	r3, [r7, #10]
 8000d04:	460b      	mov	r3, r1
 8000d06:	813b      	strh	r3, [r7, #8]
 8000d08:	4613      	mov	r3, r2
 8000d0a:	80fb      	strh	r3, [r7, #6]
    if ((x < 0) ||(x >= HX8357_TFTWIDTH) || (y < 0) || (y >= HX8357_TFTHEIGHT)) return 0;
 8000d0c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db0d      	blt.n	8000d30 <LCD_writePixel+0x3e>
 8000d14:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000d18:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000d1c:	da08      	bge.n	8000d30 <LCD_writePixel+0x3e>
 8000d1e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	db04      	blt.n	8000d30 <LCD_writePixel+0x3e>
 8000d26:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000d2a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000d2e:	db01      	blt.n	8000d34 <LCD_writePixel+0x42>
 8000d30:	2300      	movs	r3, #0
 8000d32:	e017      	b.n	8000d64 <LCD_writePixel+0x72>
    if(!LCD_setAddrWindow(spi, x, y, 1, 1)) return 0;
 8000d34:	8979      	ldrh	r1, [r7, #10]
 8000d36:	893a      	ldrh	r2, [r7, #8]
 8000d38:	2301      	movs	r3, #1
 8000d3a:	9300      	str	r3, [sp, #0]
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	68f8      	ldr	r0, [r7, #12]
 8000d40:	f7ff ff02 	bl	8000b48 <LCD_setAddrWindow>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d101      	bne.n	8000d4e <LCD_writePixel+0x5c>
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	e00a      	b.n	8000d64 <LCD_writePixel+0x72>
    if (!LCD_pushColor(spi, color)) return 0;
 8000d4e:	88fb      	ldrh	r3, [r7, #6]
 8000d50:	4619      	mov	r1, r3
 8000d52:	68f8      	ldr	r0, [r7, #12]
 8000d54:	f7ff ff80 	bl	8000c58 <LCD_pushColor>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d101      	bne.n	8000d62 <LCD_writePixel+0x70>
 8000d5e:	2300      	movs	r3, #0
 8000d60:	e000      	b.n	8000d64 <LCD_writePixel+0x72>
    return 1;
 8000d62:	2301      	movs	r3, #1
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <LCD_writePixels>:

// Length of colors array must be w * h
int LCD_writePixels(SPI_HandleTypeDef* spi, uint16_t color,
					int16_t x, int16_t y, int16_t w, int16_t h)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af02      	add	r7, sp, #8
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	4608      	mov	r0, r1
 8000d76:	4611      	mov	r1, r2
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	817b      	strh	r3, [r7, #10]
 8000d7e:	460b      	mov	r3, r1
 8000d80:	813b      	strh	r3, [r7, #8]
 8000d82:	4613      	mov	r3, r2
 8000d84:	80fb      	strh	r3, [r7, #6]
	if ((x < 0) ||(x >= HX8357_TFTWIDTH) || (y < 0) || (y >= HX8357_TFTHEIGHT)) return 0;
 8000d86:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	db0d      	blt.n	8000daa <LCD_writePixels+0x3e>
 8000d8e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000d92:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000d96:	da08      	bge.n	8000daa <LCD_writePixels+0x3e>
 8000d98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	db04      	blt.n	8000daa <LCD_writePixels+0x3e>
 8000da0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000da4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000da8:	db01      	blt.n	8000dae <LCD_writePixels+0x42>
 8000daa:	2300      	movs	r3, #0
 8000dac:	e01f      	b.n	8000dee <LCD_writePixels+0x82>
	if(!LCD_setAddrWindow(spi, x, y, w, h)) return 0;
 8000dae:	8939      	ldrh	r1, [r7, #8]
 8000db0:	88fa      	ldrh	r2, [r7, #6]
 8000db2:	8b38      	ldrh	r0, [r7, #24]
 8000db4:	8bbb      	ldrh	r3, [r7, #28]
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	4603      	mov	r3, r0
 8000dba:	68f8      	ldr	r0, [r7, #12]
 8000dbc:	f7ff fec4 	bl	8000b48 <LCD_setAddrWindow>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d101      	bne.n	8000dca <LCD_writePixels+0x5e>
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	e011      	b.n	8000dee <LCD_writePixels+0x82>
	if (!LCD_pushColorCopy(spi, color, w*h)) return 0;
 8000dca:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000dce:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8000dd2:	fb02 f303 	mul.w	r3, r2, r3
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	897b      	ldrh	r3, [r7, #10]
 8000dda:	4619      	mov	r1, r3
 8000ddc:	68f8      	ldr	r0, [r7, #12]
 8000dde:	f7ff ff58 	bl	8000c92 <LCD_pushColorCopy>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d101      	bne.n	8000dec <LCD_writePixels+0x80>
 8000de8:	2300      	movs	r3, #0
 8000dea:	e000      	b.n	8000dee <LCD_writePixels+0x82>
	return 1;
 8000dec:	2301      	movs	r3, #1
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
	...

08000df8 <LCD_drawChar>:
		0x70, 0x1C, 0x07, 0x1C, 0x70,
		0x0E, 0x38, 0xE0, 0x38, 0x0E
};

void LCD_drawChar(SPI_HandleTypeDef* spi, int16_t x, int16_t y, unsigned char c, uint16_t color, uint32_t size)
{
 8000df8:	b590      	push	{r4, r7, lr}
 8000dfa:	b089      	sub	sp, #36	; 0x24
 8000dfc:	af02      	add	r7, sp, #8
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	4608      	mov	r0, r1
 8000e02:	4611      	mov	r1, r2
 8000e04:	461a      	mov	r2, r3
 8000e06:	4603      	mov	r3, r0
 8000e08:	817b      	strh	r3, [r7, #10]
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	813b      	strh	r3, [r7, #8]
 8000e0e:	4613      	mov	r3, r2
 8000e10:	71fb      	strb	r3, [r7, #7]
	if((x >= HX8357_TFTWIDTH)   || // Clip right
 8000e12:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000e16:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000e1a:	f280 80b5 	bge.w	8000f88 <LCD_drawChar+0x190>
	   (y >= HX8357_TFTHEIGHT)  || // Clip bottom
	   ((x + 6 * size - 1) < 0) || // Clip left
 8000e1e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000e22:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000e26:	f280 80af 	bge.w	8000f88 <LCD_drawChar+0x190>
	   ((y + 8 * size - 1) < 0))   // Clip top
		return;

	uint16_t bg = LCD_color565(255, 255, 255);
 8000e2a:	22ff      	movs	r2, #255	; 0xff
 8000e2c:	21ff      	movs	r1, #255	; 0xff
 8000e2e:	20ff      	movs	r0, #255	; 0xff
 8000e30:	f7ff feec 	bl	8000c0c <LCD_color565>
 8000e34:	4603      	mov	r3, r0
 8000e36:	827b      	strh	r3, [r7, #18]
	LCD_startWrite();
 8000e38:	f7ff fe16 	bl	8000a68 <LCD_startWrite>
	for(int8_t i = 0; i < 5; i++) // Char bitmap = 5 columns
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	75fb      	strb	r3, [r7, #23]
 8000e40:	e09a      	b.n	8000f78 <LCD_drawChar+0x180>
	{
		uint8_t line = font[c * 5 + i];
 8000e42:	79fa      	ldrb	r2, [r7, #7]
 8000e44:	4613      	mov	r3, r2
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	441a      	add	r2, r3
 8000e4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e4e:	4413      	add	r3, r2
 8000e50:	4a4f      	ldr	r2, [pc, #316]	; (8000f90 <LCD_drawChar+0x198>)
 8000e52:	5cd3      	ldrb	r3, [r2, r3]
 8000e54:	75bb      	strb	r3, [r7, #22]
		for(int8_t j = 0; j < 8; j++, line >>= 1)
 8000e56:	2300      	movs	r3, #0
 8000e58:	757b      	strb	r3, [r7, #21]
 8000e5a:	e082      	b.n	8000f62 <LCD_drawChar+0x16a>
		{
			if (line & 1)
 8000e5c:	7dbb      	ldrb	r3, [r7, #22]
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d03a      	beq.n	8000edc <LCD_drawChar+0xe4>
			{
				if (size == 1) LCD_writePixel(spi, x+i, y+j, color);
 8000e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d112      	bne.n	8000e92 <LCD_drawChar+0x9a>
 8000e6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e70:	b29a      	uxth	r2, r3
 8000e72:	897b      	ldrh	r3, [r7, #10]
 8000e74:	4413      	add	r3, r2
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	b219      	sxth	r1, r3
 8000e7a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000e7e:	b29a      	uxth	r2, r3
 8000e80:	893b      	ldrh	r3, [r7, #8]
 8000e82:	4413      	add	r3, r2
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	b21a      	sxth	r2, r3
 8000e88:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000e8a:	68f8      	ldr	r0, [r7, #12]
 8000e8c:	f7ff ff31 	bl	8000cf2 <LCD_writePixel>
 8000e90:	e05e      	b.n	8000f50 <LCD_drawChar+0x158>
				else LCD_writePixels(spi, color, x+i*size, y+j*size, size, size);
 8000e92:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e96:	b29a      	uxth	r2, r3
 8000e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	fb12 f303 	smulbb	r3, r2, r3
 8000ea0:	b29a      	uxth	r2, r3
 8000ea2:	897b      	ldrh	r3, [r7, #10]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	b218      	sxth	r0, r3
 8000eaa:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	fb12 f303 	smulbb	r3, r2, r3
 8000eb8:	b29a      	uxth	r2, r3
 8000eba:	893b      	ldrh	r3, [r7, #8]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	b21c      	sxth	r4, r3
 8000ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ec4:	b21b      	sxth	r3, r3
 8000ec6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ec8:	b212      	sxth	r2, r2
 8000eca:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000ecc:	9201      	str	r2, [sp, #4]
 8000ece:	9300      	str	r3, [sp, #0]
 8000ed0:	4623      	mov	r3, r4
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	68f8      	ldr	r0, [r7, #12]
 8000ed6:	f7ff ff49 	bl	8000d6c <LCD_writePixels>
 8000eda:	e039      	b.n	8000f50 <LCD_drawChar+0x158>
			}
			else
			{
				if (size == 1) LCD_writePixel(spi, x+i, y+j, bg);
 8000edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d112      	bne.n	8000f08 <LCD_drawChar+0x110>
 8000ee2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ee6:	b29a      	uxth	r2, r3
 8000ee8:	897b      	ldrh	r3, [r7, #10]
 8000eea:	4413      	add	r3, r2
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	b219      	sxth	r1, r3
 8000ef0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	893b      	ldrh	r3, [r7, #8]
 8000ef8:	4413      	add	r3, r2
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	b21a      	sxth	r2, r3
 8000efe:	8a7b      	ldrh	r3, [r7, #18]
 8000f00:	68f8      	ldr	r0, [r7, #12]
 8000f02:	f7ff fef6 	bl	8000cf2 <LCD_writePixel>
 8000f06:	e023      	b.n	8000f50 <LCD_drawChar+0x158>
				else LCD_writePixels(spi, bg, x+i*size, y+j*size, size, size);
 8000f08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f0c:	b29a      	uxth	r2, r3
 8000f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f10:	b29b      	uxth	r3, r3
 8000f12:	fb12 f303 	smulbb	r3, r2, r3
 8000f16:	b29a      	uxth	r2, r3
 8000f18:	897b      	ldrh	r3, [r7, #10]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	b218      	sxth	r0, r3
 8000f20:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000f24:	b29a      	uxth	r2, r3
 8000f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	fb12 f303 	smulbb	r3, r2, r3
 8000f2e:	b29a      	uxth	r2, r3
 8000f30:	893b      	ldrh	r3, [r7, #8]
 8000f32:	4413      	add	r3, r2
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	b21c      	sxth	r4, r3
 8000f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f3a:	b21b      	sxth	r3, r3
 8000f3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f3e:	b212      	sxth	r2, r2
 8000f40:	8a79      	ldrh	r1, [r7, #18]
 8000f42:	9201      	str	r2, [sp, #4]
 8000f44:	9300      	str	r3, [sp, #0]
 8000f46:	4623      	mov	r3, r4
 8000f48:	4602      	mov	r2, r0
 8000f4a:	68f8      	ldr	r0, [r7, #12]
 8000f4c:	f7ff ff0e 	bl	8000d6c <LCD_writePixels>
		for(int8_t j = 0; j < 8; j++, line >>= 1)
 8000f50:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	3301      	adds	r3, #1
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	757b      	strb	r3, [r7, #21]
 8000f5c:	7dbb      	ldrb	r3, [r7, #22]
 8000f5e:	085b      	lsrs	r3, r3, #1
 8000f60:	75bb      	strb	r3, [r7, #22]
 8000f62:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000f66:	2b07      	cmp	r3, #7
 8000f68:	f77f af78 	ble.w	8000e5c <LCD_drawChar+0x64>
	for(int8_t i = 0; i < 5; i++) // Char bitmap = 5 columns
 8000f6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	3301      	adds	r3, #1
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	75fb      	strb	r3, [r7, #23]
 8000f78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f7c:	2b04      	cmp	r3, #4
 8000f7e:	f77f af60 	ble.w	8000e42 <LCD_drawChar+0x4a>
			}
		}
	}
	LCD_endWrite();
 8000f82:	f7ff fd7d 	bl	8000a80 <LCD_endWrite>
 8000f86:	e000      	b.n	8000f8a <LCD_drawChar+0x192>
		return;
 8000f88:	bf00      	nop
}
 8000f8a:	371c      	adds	r7, #28
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd90      	pop	{r4, r7, pc}
 8000f90:	08005010 	.word	0x08005010

08000f94 <LCD_drawString>:
	}
	LCD_endWrite();
}

void LCD_drawString(SPI_HandleTypeDef* spi, int16_t x, int16_t y, unsigned char* c, uint32_t length, uint16_t color, uint32_t size)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b088      	sub	sp, #32
 8000f98:	af02      	add	r7, sp, #8
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	817b      	strh	r3, [r7, #10]
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	813b      	strh	r3, [r7, #8]
	for (int i = 0; i < length; ++i) LCD_drawChar(spi, x + i*6*size, y, c[i], color, size);
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
 8000faa:	e020      	b.n	8000fee <LCD_drawString+0x5a>
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	b29a      	uxth	r2, r3
 8000fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	fb12 f303 	smulbb	r3, r2, r3
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	461a      	mov	r2, r3
 8000fbc:	0052      	lsls	r2, r2, #1
 8000fbe:	4413      	add	r3, r2
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	897b      	ldrh	r3, [r7, #10]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	b219      	sxth	r1, r3
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	7818      	ldrb	r0, [r3, #0]
 8000fd4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fda:	9301      	str	r3, [sp, #4]
 8000fdc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	68f8      	ldr	r0, [r7, #12]
 8000fe4:	f7ff ff08 	bl	8000df8 <LCD_drawChar>
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	3301      	adds	r3, #1
 8000fec:	617b      	str	r3, [r7, #20]
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	6a3a      	ldr	r2, [r7, #32]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d8da      	bhi.n	8000fac <LCD_drawString+0x18>
}
 8000ff6:	bf00      	nop
 8000ff8:	bf00      	nop
 8000ffa:	3718      	adds	r7, #24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <LCD_writeLine>:
		}
	}
	LCD_endWrite();
}

void LCD_writeLine(SPI_HandleTypeDef *spi, int x0, int y0, int x1, int y1, int color) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b08a      	sub	sp, #40	; 0x28
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
 800100c:	603b      	str	r3, [r7, #0]
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 800100e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001018:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800101c:	6839      	ldr	r1, [r7, #0]
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	1acb      	subs	r3, r1, r3
 8001022:	2b00      	cmp	r3, #0
 8001024:	bfb8      	it	lt
 8001026:	425b      	neglt	r3, r3
 8001028:	429a      	cmp	r2, r3
 800102a:	bfcc      	ite	gt
 800102c:	2301      	movgt	r3, #1
 800102e:	2300      	movle	r3, #0
 8001030:	b2db      	uxtb	r3, r3
 8001032:	847b      	strh	r3, [r7, #34]	; 0x22
  if (steep) {
 8001034:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001038:	2b00      	cmp	r3, #0
 800103a:	d00d      	beq.n	8001058 <LCD_writeLine+0x58>
    _swap_int16_t(x0, y0);
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	843b      	strh	r3, [r7, #32]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	60bb      	str	r3, [r7, #8]
 8001044:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001048:	607b      	str	r3, [r7, #4]
    _swap_int16_t(x1, y1);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	83fb      	strh	r3, [r7, #30]
 800104e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001050:	603b      	str	r3, [r7, #0]
 8001052:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001056:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (x0 > x1) {
 8001058:	68ba      	ldr	r2, [r7, #8]
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	429a      	cmp	r2, r3
 800105e:	dd0d      	ble.n	800107c <LCD_writeLine+0x7c>
    _swap_int16_t(x0, x1);
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	83bb      	strh	r3, [r7, #28]
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800106c:	603b      	str	r3, [r7, #0]
    _swap_int16_t(y0, y1);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	837b      	strh	r3, [r7, #26]
 8001072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800107a:	633b      	str	r3, [r7, #48]	; 0x30
  }

  int16_t dx, dy;
  dx = x1 - x0;
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	b29a      	uxth	r2, r3
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	b29b      	uxth	r3, r3
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	b29b      	uxth	r3, r3
 8001088:	833b      	strh	r3, [r7, #24]
  dy = abs(y1 - y0);
 800108a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	2b00      	cmp	r3, #0
 8001092:	bfb8      	it	lt
 8001094:	425b      	neglt	r3, r3
 8001096:	82fb      	strh	r3, [r7, #22]

  int16_t err = dx / 2;
 8001098:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800109c:	0fda      	lsrs	r2, r3, #31
 800109e:	4413      	add	r3, r2
 80010a0:	105b      	asrs	r3, r3, #1
 80010a2:	84fb      	strh	r3, [r7, #38]	; 0x26
  int16_t ystep;

  if (y0 < y1) {
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010a8:	429a      	cmp	r2, r3
 80010aa:	da02      	bge.n	80010b2 <LCD_writeLine+0xb2>
    ystep = 1;
 80010ac:	2301      	movs	r3, #1
 80010ae:	84bb      	strh	r3, [r7, #36]	; 0x24
 80010b0:	e030      	b.n	8001114 <LCD_writeLine+0x114>
  } else {
    ystep = -1;
 80010b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010b6:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  for (; x0 <= x1; x0++) {
 80010b8:	e02c      	b.n	8001114 <LCD_writeLine+0x114>
    if (steep) {
 80010ba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d009      	beq.n	80010d6 <LCD_writeLine+0xd6>
      LCD_writePixel(spi, y0, x0, color);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	b219      	sxth	r1, r3
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	b21a      	sxth	r2, r3
 80010ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	68f8      	ldr	r0, [r7, #12]
 80010d0:	f7ff fe0f 	bl	8000cf2 <LCD_writePixel>
 80010d4:	e008      	b.n	80010e8 <LCD_writeLine+0xe8>
    } else {
      LCD_writePixel(spi, x0, y0, color);
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	b219      	sxth	r1, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	b21a      	sxth	r2, r3
 80010de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	68f8      	ldr	r0, [r7, #12]
 80010e4:	f7ff fe05 	bl	8000cf2 <LCD_writePixel>
    }
    err -= dy;
 80010e8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80010ea:	8afb      	ldrh	r3, [r7, #22]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	84fb      	strh	r3, [r7, #38]	; 0x26
    if (err < 0) {
 80010f2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	da09      	bge.n	800110e <LCD_writeLine+0x10e>
      y0 += ystep;
 80010fa:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	4413      	add	r3, r2
 8001102:	607b      	str	r3, [r7, #4]
      err += dx;
 8001104:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001106:	8b3b      	ldrh	r3, [r7, #24]
 8001108:	4413      	add	r3, r2
 800110a:	b29b      	uxth	r3, r3
 800110c:	84fb      	strh	r3, [r7, #38]	; 0x26
  for (; x0 <= x1; x0++) {
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	3301      	adds	r3, #1
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	68ba      	ldr	r2, [r7, #8]
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	429a      	cmp	r2, r3
 800111a:	ddce      	ble.n	80010ba <LCD_writeLine+0xba>
    }
  }
}
 800111c:	bf00      	nop
 800111e:	bf00      	nop
 8001120:	3728      	adds	r7, #40	; 0x28
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <LCD_writeFastHLine>:

void LCD_writeFastVLine(SPI_HandleTypeDef *spi, int16_t x, int16_t y, int16_t h, uint16_t color) {
	LCD_writeLine(spi, x, y, x, y + h - 1, color);
}

void LCD_writeFastHLine(SPI_HandleTypeDef *spi, int16_t x, int16_t y, int16_t w, uint16_t color) {
 8001126:	b590      	push	{r4, r7, lr}
 8001128:	b087      	sub	sp, #28
 800112a:	af02      	add	r7, sp, #8
 800112c:	60f8      	str	r0, [r7, #12]
 800112e:	4608      	mov	r0, r1
 8001130:	4611      	mov	r1, r2
 8001132:	461a      	mov	r2, r3
 8001134:	4603      	mov	r3, r0
 8001136:	817b      	strh	r3, [r7, #10]
 8001138:	460b      	mov	r3, r1
 800113a:	813b      	strh	r3, [r7, #8]
 800113c:	4613      	mov	r3, r2
 800113e:	80fb      	strh	r3, [r7, #6]
	LCD_writeLine(spi, x, y, x + w - 1, y, color);
 8001140:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001144:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 8001148:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800114c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001150:	4413      	add	r3, r2
 8001152:	1e5c      	subs	r4, r3, #1
 8001154:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001158:	8c3a      	ldrh	r2, [r7, #32]
 800115a:	9201      	str	r2, [sp, #4]
 800115c:	9300      	str	r3, [sp, #0]
 800115e:	4623      	mov	r3, r4
 8001160:	4602      	mov	r2, r0
 8001162:	68f8      	ldr	r0, [r7, #12]
 8001164:	f7ff ff4c 	bl	8001000 <LCD_writeLine>
}
 8001168:	bf00      	nop
 800116a:	3714      	adds	r7, #20
 800116c:	46bd      	mov	sp, r7
 800116e:	bd90      	pop	{r4, r7, pc}

08001170 <LCD_fillTriangle>:
	for (int16_t i = y; i < y + h; i++) {
		LCD_writeFastHLine(spi, x, i, w, color);
	}
}

void LCD_fillTriangle(SPI_HandleTypeDef *spi, int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b092      	sub	sp, #72	; 0x48
 8001174:	af02      	add	r7, sp, #8
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	4608      	mov	r0, r1
 800117a:	4611      	mov	r1, r2
 800117c:	461a      	mov	r2, r3
 800117e:	4603      	mov	r3, r0
 8001180:	817b      	strh	r3, [r7, #10]
 8001182:	460b      	mov	r3, r1
 8001184:	813b      	strh	r3, [r7, #8]
 8001186:	4613      	mov	r3, r2
 8001188:	80fb      	strh	r3, [r7, #6]
	int16_t a, b, y, last;

	  // Sort coordinates by Y order (y2 >= y1 >= y0)
	  if (y0 > y1) {
 800118a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800118e:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8001192:	429a      	cmp	r2, r3
 8001194:	dd0d      	ble.n	80011b2 <LCD_fillTriangle+0x42>
	    _swap_int16_t(y0, y1);
 8001196:	893b      	ldrh	r3, [r7, #8]
 8001198:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800119a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800119e:	813b      	strh	r3, [r7, #8]
 80011a0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80011a2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	    _swap_int16_t(x0, x1);
 80011a6:	897b      	ldrh	r3, [r7, #10]
 80011a8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80011aa:	88fb      	ldrh	r3, [r7, #6]
 80011ac:	817b      	strh	r3, [r7, #10]
 80011ae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80011b0:	80fb      	strh	r3, [r7, #6]
	  }
	  if (y1 > y2) {
 80011b2:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 80011b6:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80011ba:	429a      	cmp	r2, r3
 80011bc:	dd11      	ble.n	80011e2 <LCD_fillTriangle+0x72>
	    _swap_int16_t(y2, y1);
 80011be:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80011c2:	857b      	strh	r3, [r7, #42]	; 0x2a
 80011c4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80011c8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80011cc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80011ce:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	    _swap_int16_t(x2, x1);
 80011d2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80011d6:	853b      	strh	r3, [r7, #40]	; 0x28
 80011d8:	88fb      	ldrh	r3, [r7, #6]
 80011da:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80011de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80011e0:	80fb      	strh	r3, [r7, #6]
	  }
	  if (y0 > y1) {
 80011e2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80011e6:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 80011ea:	429a      	cmp	r2, r3
 80011ec:	dd0d      	ble.n	800120a <LCD_fillTriangle+0x9a>
	    _swap_int16_t(y0, y1);
 80011ee:	893b      	ldrh	r3, [r7, #8]
 80011f0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80011f2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80011f6:	813b      	strh	r3, [r7, #8]
 80011f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011fa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	    _swap_int16_t(x0, x1);
 80011fe:	897b      	ldrh	r3, [r7, #10]
 8001200:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001202:	88fb      	ldrh	r3, [r7, #6]
 8001204:	817b      	strh	r3, [r7, #10]
 8001206:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001208:	80fb      	strh	r3, [r7, #6]
	  }

	  if (y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 800120a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800120e:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8001212:	429a      	cmp	r2, r3
 8001214:	d13a      	bne.n	800128c <LCD_fillTriangle+0x11c>
	    a = b = x0;
 8001216:	897b      	ldrh	r3, [r7, #10]
 8001218:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800121a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800121c:	87fb      	strh	r3, [r7, #62]	; 0x3e
	    if (x1 < a)
 800121e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001222:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8001226:	429a      	cmp	r2, r3
 8001228:	da02      	bge.n	8001230 <LCD_fillTriangle+0xc0>
	      a = x1;
 800122a:	88fb      	ldrh	r3, [r7, #6]
 800122c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800122e:	e007      	b.n	8001240 <LCD_fillTriangle+0xd0>
	    else if (x1 > b)
 8001230:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001234:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8001238:	429a      	cmp	r2, r3
 800123a:	dd01      	ble.n	8001240 <LCD_fillTriangle+0xd0>
	      b = x1;
 800123c:	88fb      	ldrh	r3, [r7, #6]
 800123e:	87bb      	strh	r3, [r7, #60]	; 0x3c
	    if (x2 < a)
 8001240:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	; 0x4c
 8001244:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8001248:	429a      	cmp	r2, r3
 800124a:	da03      	bge.n	8001254 <LCD_fillTriangle+0xe4>
	      a = x2;
 800124c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001250:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8001252:	e008      	b.n	8001266 <LCD_fillTriangle+0xf6>
	    else if (x2 > b)
 8001254:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	; 0x4c
 8001258:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800125c:	429a      	cmp	r2, r3
 800125e:	dd02      	ble.n	8001266 <LCD_fillTriangle+0xf6>
	      b = x2;
 8001260:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001264:	87bb      	strh	r3, [r7, #60]	; 0x3c
	    LCD_writeFastHLine(spi, a, y0, b - a + 1, color);
 8001266:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8001268:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	b29b      	uxth	r3, r3
 800126e:	3301      	adds	r3, #1
 8001270:	b29b      	uxth	r3, r3
 8001272:	b218      	sxth	r0, r3
 8001274:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001278:	f9b7 103e 	ldrsh.w	r1, [r7, #62]	; 0x3e
 800127c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001280:	9300      	str	r3, [sp, #0]
 8001282:	4603      	mov	r3, r0
 8001284:	68f8      	ldr	r0, [r7, #12]
 8001286:	f7ff ff4e 	bl	8001126 <LCD_writeFastHLine>
	    return;
 800128a:	e0de      	b.n	800144a <LCD_fillTriangle+0x2da>
	  }

	  int16_t dx01 = x1 - x0, dy01 = y1 - y0, dx02 = x2 - x0, dy02 = y2 - y0,
 800128c:	88fa      	ldrh	r2, [r7, #6]
 800128e:	897b      	ldrh	r3, [r7, #10]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	b29b      	uxth	r3, r3
 8001294:	847b      	strh	r3, [r7, #34]	; 0x22
 8001296:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800129a:	893b      	ldrh	r3, [r7, #8]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	b29b      	uxth	r3, r3
 80012a0:	843b      	strh	r3, [r7, #32]
 80012a2:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80012a6:	897b      	ldrh	r3, [r7, #10]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	83fb      	strh	r3, [r7, #30]
 80012ae:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80012b2:	893b      	ldrh	r3, [r7, #8]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	83bb      	strh	r3, [r7, #28]
	          dx12 = x2 - x1, dy12 = y2 - y1;
 80012ba:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80012be:	88fb      	ldrh	r3, [r7, #6]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	837b      	strh	r3, [r7, #26]
 80012c6:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80012ca:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	833b      	strh	r3, [r7, #24]
	  int32_t sa = 0, sb = 0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	637b      	str	r3, [r7, #52]	; 0x34
 80012d8:	2300      	movs	r3, #0
 80012da:	633b      	str	r3, [r7, #48]	; 0x30
	  // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
	  // is included here (and second loop will be skipped, avoiding a /0
	  // error there), otherwise scanline y1 is skipped here and handled
	  // in the second loop...which also avoids a /0 error here if y0=y1
	  // (flat-topped triangle).
	  if (y1 == y2)
 80012dc:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 80012e0:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d103      	bne.n	80012f0 <LCD_fillTriangle+0x180>
	    last = y1; // Include y1 scanline
 80012e8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80012ec:	873b      	strh	r3, [r7, #56]	; 0x38
 80012ee:	e004      	b.n	80012fa <LCD_fillTriangle+0x18a>
	  else
	    last = y1 - 1; // Skip it
 80012f0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80012f4:	3b01      	subs	r3, #1
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	873b      	strh	r3, [r7, #56]	; 0x38

	  for (y = y0; y <= last; y++) {
 80012fa:	893b      	ldrh	r3, [r7, #8]
 80012fc:	877b      	strh	r3, [r7, #58]	; 0x3a
 80012fe:	e041      	b.n	8001384 <LCD_fillTriangle+0x214>
	    a = x0 + sa / dy01;
 8001300:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001304:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001306:	fb92 f3f3 	sdiv	r3, r2, r3
 800130a:	b29a      	uxth	r2, r3
 800130c:	897b      	ldrh	r3, [r7, #10]
 800130e:	4413      	add	r3, r2
 8001310:	b29b      	uxth	r3, r3
 8001312:	87fb      	strh	r3, [r7, #62]	; 0x3e
	    b = x0 + sb / dy02;
 8001314:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001318:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800131a:	fb92 f3f3 	sdiv	r3, r2, r3
 800131e:	b29a      	uxth	r2, r3
 8001320:	897b      	ldrh	r3, [r7, #10]
 8001322:	4413      	add	r3, r2
 8001324:	b29b      	uxth	r3, r3
 8001326:	87bb      	strh	r3, [r7, #60]	; 0x3c
	    sa += dx01;
 8001328:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800132c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800132e:	4413      	add	r3, r2
 8001330:	637b      	str	r3, [r7, #52]	; 0x34
	    sb += dx02;
 8001332:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001336:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001338:	4413      	add	r3, r2
 800133a:	633b      	str	r3, [r7, #48]	; 0x30
	    /* longhand:
	    a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
	    b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
	    */
	    if (a > b)
 800133c:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	; 0x3e
 8001340:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8001344:	429a      	cmp	r2, r3
 8001346:	dd05      	ble.n	8001354 <LCD_fillTriangle+0x1e4>
	      _swap_int16_t(a, b);
 8001348:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800134a:	82bb      	strh	r3, [r7, #20]
 800134c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800134e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8001350:	8abb      	ldrh	r3, [r7, #20]
 8001352:	87bb      	strh	r3, [r7, #60]	; 0x3c
	    LCD_writeFastHLine(spi, a, y, b - a + 1, color);
 8001354:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8001356:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	b29b      	uxth	r3, r3
 800135c:	3301      	adds	r3, #1
 800135e:	b29b      	uxth	r3, r3
 8001360:	b218      	sxth	r0, r3
 8001362:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 8001366:	f9b7 103e 	ldrsh.w	r1, [r7, #62]	; 0x3e
 800136a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	4603      	mov	r3, r0
 8001372:	68f8      	ldr	r0, [r7, #12]
 8001374:	f7ff fed7 	bl	8001126 <LCD_writeFastHLine>
	  for (y = y0; y <= last; y++) {
 8001378:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800137c:	b29b      	uxth	r3, r3
 800137e:	3301      	adds	r3, #1
 8001380:	b29b      	uxth	r3, r3
 8001382:	877b      	strh	r3, [r7, #58]	; 0x3a
 8001384:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 8001388:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800138c:	429a      	cmp	r2, r3
 800138e:	ddb7      	ble.n	8001300 <LCD_fillTriangle+0x190>
	  }

	  // For lower part of triangle, find scanline crossings for segments
	  // 0-2 and 1-2.  This loop is skipped if y1=y2.
	  sa = (int32_t)dx12 * (y - y1);
 8001390:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001394:	f9b7 103a 	ldrsh.w	r1, [r7, #58]	; 0x3a
 8001398:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 800139c:	1a8a      	subs	r2, r1, r2
 800139e:	fb02 f303 	mul.w	r3, r2, r3
 80013a2:	637b      	str	r3, [r7, #52]	; 0x34
	  sb = (int32_t)dx02 * (y - y0);
 80013a4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013a8:	f9b7 103a 	ldrsh.w	r1, [r7, #58]	; 0x3a
 80013ac:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80013b0:	1a8a      	subs	r2, r1, r2
 80013b2:	fb02 f303 	mul.w	r3, r2, r3
 80013b6:	633b      	str	r3, [r7, #48]	; 0x30
	  for (; y <= y2; y++) {
 80013b8:	e041      	b.n	800143e <LCD_fillTriangle+0x2ce>
	    a = x1 + sa / dy12;
 80013ba:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80013be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	88fb      	ldrh	r3, [r7, #6]
 80013c8:	4413      	add	r3, r2
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	87fb      	strh	r3, [r7, #62]	; 0x3e
	    b = x0 + sb / dy02;
 80013ce:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80013d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80013d8:	b29a      	uxth	r2, r3
 80013da:	897b      	ldrh	r3, [r7, #10]
 80013dc:	4413      	add	r3, r2
 80013de:	b29b      	uxth	r3, r3
 80013e0:	87bb      	strh	r3, [r7, #60]	; 0x3c
	    sa += dx12;
 80013e2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80013e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013e8:	4413      	add	r3, r2
 80013ea:	637b      	str	r3, [r7, #52]	; 0x34
	    sb += dx02;
 80013ec:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013f2:	4413      	add	r3, r2
 80013f4:	633b      	str	r3, [r7, #48]	; 0x30
	    /* longhand:
	    a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
	    b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
	    */
	    if (a > b)
 80013f6:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	; 0x3e
 80013fa:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 80013fe:	429a      	cmp	r2, r3
 8001400:	dd05      	ble.n	800140e <LCD_fillTriangle+0x29e>
	      _swap_int16_t(a, b);
 8001402:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001404:	82fb      	strh	r3, [r7, #22]
 8001406:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001408:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800140a:	8afb      	ldrh	r3, [r7, #22]
 800140c:	87bb      	strh	r3, [r7, #60]	; 0x3c
	    LCD_writeFastHLine(spi, a, y, b - a + 1, color);
 800140e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8001410:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	b29b      	uxth	r3, r3
 8001416:	3301      	adds	r3, #1
 8001418:	b29b      	uxth	r3, r3
 800141a:	b218      	sxth	r0, r3
 800141c:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 8001420:	f9b7 103e 	ldrsh.w	r1, [r7, #62]	; 0x3e
 8001424:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001428:	9300      	str	r3, [sp, #0]
 800142a:	4603      	mov	r3, r0
 800142c:	68f8      	ldr	r0, [r7, #12]
 800142e:	f7ff fe7a 	bl	8001126 <LCD_writeFastHLine>
	  for (; y <= y2; y++) {
 8001432:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8001436:	b29b      	uxth	r3, r3
 8001438:	3301      	adds	r3, #1
 800143a:	b29b      	uxth	r3, r3
 800143c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800143e:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 8001442:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8001446:	429a      	cmp	r2, r3
 8001448:	ddb7      	ble.n	80013ba <LCD_fillTriangle+0x24a>
	  }
}
 800144a:	3740      	adds	r7, #64	; 0x40
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <LCD_drawBattery>:

//homemade functions for TADAMHASPEV, move to different file
void LCD_drawBattery(SPI_HandleTypeDef* spi, int16_t x, int16_t y, uint16_t color, uint32_t size) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af02      	add	r7, sp, #8
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	4608      	mov	r0, r1
 800145a:	4611      	mov	r1, r2
 800145c:	461a      	mov	r2, r3
 800145e:	4603      	mov	r3, r0
 8001460:	817b      	strh	r3, [r7, #10]
 8001462:	460b      	mov	r3, r1
 8001464:	813b      	strh	r3, [r7, #8]
 8001466:	4613      	mov	r3, r2
 8001468:	80fb      	strh	r3, [r7, #6]
	//make battery thicker?
	//left
	if(!LCD_setAddrWindow(spi, x, y + size, 1, 22*size)) return;
 800146a:	8979      	ldrh	r1, [r7, #10]
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	b29a      	uxth	r2, r3
 8001470:	893b      	ldrh	r3, [r7, #8]
 8001472:	4413      	add	r3, r2
 8001474:	b29a      	uxth	r2, r3
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	b29b      	uxth	r3, r3
 800147a:	4618      	mov	r0, r3
 800147c:	0080      	lsls	r0, r0, #2
 800147e:	4418      	add	r0, r3
 8001480:	0040      	lsls	r0, r0, #1
 8001482:	4403      	add	r3, r0
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	b29b      	uxth	r3, r3
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	2301      	movs	r3, #1
 800148c:	68f8      	ldr	r0, [r7, #12]
 800148e:	f7ff fb5b 	bl	8000b48 <LCD_setAddrWindow>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	f000 80e3 	beq.w	8001660 <LCD_drawBattery+0x210>
	if (!LCD_pushColorCopy(spi, color, 22*size)) return;
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	2216      	movs	r2, #22
 800149e:	fb03 f202 	mul.w	r2, r3, r2
 80014a2:	88fb      	ldrh	r3, [r7, #6]
 80014a4:	4619      	mov	r1, r3
 80014a6:	68f8      	ldr	r0, [r7, #12]
 80014a8:	f7ff fbf3 	bl	8000c92 <LCD_pushColorCopy>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	f000 80d8 	beq.w	8001664 <LCD_drawBattery+0x214>

	//right
	if(!LCD_setAddrWindow(spi, x + 10*size, y + size, 1, 22*size)) return;
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	461a      	mov	r2, r3
 80014ba:	0092      	lsls	r2, r2, #2
 80014bc:	4413      	add	r3, r2
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	897b      	ldrh	r3, [r7, #10]
 80014c4:	4413      	add	r3, r2
 80014c6:	b299      	uxth	r1, r3
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	893b      	ldrh	r3, [r7, #8]
 80014ce:	4413      	add	r3, r2
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	4618      	mov	r0, r3
 80014d8:	0080      	lsls	r0, r0, #2
 80014da:	4418      	add	r0, r3
 80014dc:	0040      	lsls	r0, r0, #1
 80014de:	4403      	add	r3, r0
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	9300      	str	r3, [sp, #0]
 80014e6:	2301      	movs	r3, #1
 80014e8:	68f8      	ldr	r0, [r7, #12]
 80014ea:	f7ff fb2d 	bl	8000b48 <LCD_setAddrWindow>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	f000 80b9 	beq.w	8001668 <LCD_drawBattery+0x218>
	if (!LCD_pushColorCopy(spi, color, 22*size)) return;
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	2216      	movs	r2, #22
 80014fa:	fb03 f202 	mul.w	r2, r3, r2
 80014fe:	88fb      	ldrh	r3, [r7, #6]
 8001500:	4619      	mov	r1, r3
 8001502:	68f8      	ldr	r0, [r7, #12]
 8001504:	f7ff fbc5 	bl	8000c92 <LCD_pushColorCopy>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	f000 80ae 	beq.w	800166c <LCD_drawBattery+0x21c>

	//top
	if(!LCD_setAddrWindow(spi, x, y + size, 10*size, 1)) return;
 8001510:	8979      	ldrh	r1, [r7, #10]
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	b29a      	uxth	r2, r3
 8001516:	893b      	ldrh	r3, [r7, #8]
 8001518:	4413      	add	r3, r2
 800151a:	b29a      	uxth	r2, r3
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	b29b      	uxth	r3, r3
 8001520:	4618      	mov	r0, r3
 8001522:	0080      	lsls	r0, r0, #2
 8001524:	4403      	add	r3, r0
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	b29b      	uxth	r3, r3
 800152a:	2001      	movs	r0, #1
 800152c:	9000      	str	r0, [sp, #0]
 800152e:	68f8      	ldr	r0, [r7, #12]
 8001530:	f7ff fb0a 	bl	8000b48 <LCD_setAddrWindow>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	f000 809a 	beq.w	8001670 <LCD_drawBattery+0x220>
	if (!LCD_pushColorCopy(spi, color, 10*size)) return;
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	4613      	mov	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4413      	add	r3, r2
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	461a      	mov	r2, r3
 8001548:	88fb      	ldrh	r3, [r7, #6]
 800154a:	4619      	mov	r1, r3
 800154c:	68f8      	ldr	r0, [r7, #12]
 800154e:	f7ff fba0 	bl	8000c92 <LCD_pushColorCopy>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	f000 808d 	beq.w	8001674 <LCD_drawBattery+0x224>

	//bottom
	if(!LCD_setAddrWindow(spi, x, y + 23*size, 10*size, 1)) return;
 800155a:	8979      	ldrh	r1, [r7, #10]
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	b29b      	uxth	r3, r3
 8001560:	461a      	mov	r2, r3
 8001562:	0052      	lsls	r2, r2, #1
 8001564:	441a      	add	r2, r3
 8001566:	00d2      	lsls	r2, r2, #3
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	b29a      	uxth	r2, r3
 800156c:	893b      	ldrh	r3, [r7, #8]
 800156e:	4413      	add	r3, r2
 8001570:	b29a      	uxth	r2, r3
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	b29b      	uxth	r3, r3
 8001576:	4618      	mov	r0, r3
 8001578:	0080      	lsls	r0, r0, #2
 800157a:	4403      	add	r3, r0
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	b29b      	uxth	r3, r3
 8001580:	2001      	movs	r0, #1
 8001582:	9000      	str	r0, [sp, #0]
 8001584:	68f8      	ldr	r0, [r7, #12]
 8001586:	f7ff fadf 	bl	8000b48 <LCD_setAddrWindow>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d073      	beq.n	8001678 <LCD_drawBattery+0x228>
	if (!LCD_pushColorCopy(spi, color, 10*size)) return;
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	4613      	mov	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	4413      	add	r3, r2
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	461a      	mov	r2, r3
 800159c:	88fb      	ldrh	r3, [r7, #6]
 800159e:	4619      	mov	r1, r3
 80015a0:	68f8      	ldr	r0, [r7, #12]
 80015a2:	f7ff fb76 	bl	8000c92 <LCD_pushColorCopy>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d067      	beq.n	800167c <LCD_drawBattery+0x22c>

	//lil cap
	if(!LCD_setAddrWindow(spi, x + 3*size, y, 4*size, 1)) return;
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	461a      	mov	r2, r3
 80015b2:	0052      	lsls	r2, r2, #1
 80015b4:	4413      	add	r3, r2
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	897b      	ldrh	r3, [r7, #10]
 80015ba:	4413      	add	r3, r2
 80015bc:	b299      	uxth	r1, r3
 80015be:	893a      	ldrh	r2, [r7, #8]
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	2001      	movs	r0, #1
 80015ca:	9000      	str	r0, [sp, #0]
 80015cc:	68f8      	ldr	r0, [r7, #12]
 80015ce:	f7ff fabb 	bl	8000b48 <LCD_setAddrWindow>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d053      	beq.n	8001680 <LCD_drawBattery+0x230>
	if (!LCD_pushColorCopy(spi, color, 4*size)) return;
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	009a      	lsls	r2, r3, #2
 80015dc:	88fb      	ldrh	r3, [r7, #6]
 80015de:	4619      	mov	r1, r3
 80015e0:	68f8      	ldr	r0, [r7, #12]
 80015e2:	f7ff fb56 	bl	8000c92 <LCD_pushColorCopy>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d04b      	beq.n	8001684 <LCD_drawBattery+0x234>

	if(!LCD_setAddrWindow(spi, x + 3*size, y, 1, size)) return;
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	461a      	mov	r2, r3
 80015f2:	0052      	lsls	r2, r2, #1
 80015f4:	4413      	add	r3, r2
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	897b      	ldrh	r3, [r7, #10]
 80015fa:	4413      	add	r3, r2
 80015fc:	b299      	uxth	r1, r3
 80015fe:	893a      	ldrh	r2, [r7, #8]
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	b29b      	uxth	r3, r3
 8001604:	9300      	str	r3, [sp, #0]
 8001606:	2301      	movs	r3, #1
 8001608:	68f8      	ldr	r0, [r7, #12]
 800160a:	f7ff fa9d 	bl	8000b48 <LCD_setAddrWindow>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d039      	beq.n	8001688 <LCD_drawBattery+0x238>
	if (!LCD_pushColorCopy(spi, color, size)) return;
 8001614:	88fb      	ldrh	r3, [r7, #6]
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	4619      	mov	r1, r3
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	f7ff fb39 	bl	8000c92 <LCD_pushColorCopy>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d032      	beq.n	800168c <LCD_drawBattery+0x23c>

	if(!LCD_setAddrWindow(spi, x + 3*size + 4*size, y, 1, size)) return;
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	b29b      	uxth	r3, r3
 800162a:	461a      	mov	r2, r3
 800162c:	00d2      	lsls	r2, r2, #3
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	b29a      	uxth	r2, r3
 8001632:	897b      	ldrh	r3, [r7, #10]
 8001634:	4413      	add	r3, r2
 8001636:	b299      	uxth	r1, r3
 8001638:	893a      	ldrh	r2, [r7, #8]
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	b29b      	uxth	r3, r3
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	2301      	movs	r3, #1
 8001642:	68f8      	ldr	r0, [r7, #12]
 8001644:	f7ff fa80 	bl	8000b48 <LCD_setAddrWindow>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d020      	beq.n	8001690 <LCD_drawBattery+0x240>
	if (!LCD_pushColorCopy(spi, color, size)) return;
 800164e:	88fb      	ldrh	r3, [r7, #6]
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4619      	mov	r1, r3
 8001654:	68f8      	ldr	r0, [r7, #12]
 8001656:	f7ff fb1c 	bl	8000c92 <LCD_pushColorCopy>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
	return;
 800165e:	e018      	b.n	8001692 <LCD_drawBattery+0x242>
	if(!LCD_setAddrWindow(spi, x, y + size, 1, 22*size)) return;
 8001660:	bf00      	nop
 8001662:	e016      	b.n	8001692 <LCD_drawBattery+0x242>
	if (!LCD_pushColorCopy(spi, color, 22*size)) return;
 8001664:	bf00      	nop
 8001666:	e014      	b.n	8001692 <LCD_drawBattery+0x242>
	if(!LCD_setAddrWindow(spi, x + 10*size, y + size, 1, 22*size)) return;
 8001668:	bf00      	nop
 800166a:	e012      	b.n	8001692 <LCD_drawBattery+0x242>
	if (!LCD_pushColorCopy(spi, color, 22*size)) return;
 800166c:	bf00      	nop
 800166e:	e010      	b.n	8001692 <LCD_drawBattery+0x242>
	if(!LCD_setAddrWindow(spi, x, y + size, 10*size, 1)) return;
 8001670:	bf00      	nop
 8001672:	e00e      	b.n	8001692 <LCD_drawBattery+0x242>
	if (!LCD_pushColorCopy(spi, color, 10*size)) return;
 8001674:	bf00      	nop
 8001676:	e00c      	b.n	8001692 <LCD_drawBattery+0x242>
	if(!LCD_setAddrWindow(spi, x, y + 23*size, 10*size, 1)) return;
 8001678:	bf00      	nop
 800167a:	e00a      	b.n	8001692 <LCD_drawBattery+0x242>
	if (!LCD_pushColorCopy(spi, color, 10*size)) return;
 800167c:	bf00      	nop
 800167e:	e008      	b.n	8001692 <LCD_drawBattery+0x242>
	if(!LCD_setAddrWindow(spi, x + 3*size, y, 4*size, 1)) return;
 8001680:	bf00      	nop
 8001682:	e006      	b.n	8001692 <LCD_drawBattery+0x242>
	if (!LCD_pushColorCopy(spi, color, 4*size)) return;
 8001684:	bf00      	nop
 8001686:	e004      	b.n	8001692 <LCD_drawBattery+0x242>
	if(!LCD_setAddrWindow(spi, x + 3*size, y, 1, size)) return;
 8001688:	bf00      	nop
 800168a:	e002      	b.n	8001692 <LCD_drawBattery+0x242>
	if (!LCD_pushColorCopy(spi, color, size)) return;
 800168c:	bf00      	nop
 800168e:	e000      	b.n	8001692 <LCD_drawBattery+0x242>
	if(!LCD_setAddrWindow(spi, x + 3*size + 4*size, y, 1, size)) return;
 8001690:	bf00      	nop
}
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <LCD_drawFrame>:

void LCD_drawFrame(SPI_HandleTypeDef* spi, uint16_t color) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af02      	add	r7, sp, #8
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	460b      	mov	r3, r1
 80016a2:	807b      	strh	r3, [r7, #2]
	//rows
	LCD_writeLine(spi,0,80,360,80,HX8357_BLACK);
 80016a4:	2300      	movs	r3, #0
 80016a6:	9301      	str	r3, [sp, #4]
 80016a8:	2350      	movs	r3, #80	; 0x50
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80016b0:	2250      	movs	r2, #80	; 0x50
 80016b2:	2100      	movs	r1, #0
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7ff fca3 	bl	8001000 <LCD_writeLine>
	LCD_writeLine(spi,0,160,360,160,HX8357_BLACK);
 80016ba:	2300      	movs	r3, #0
 80016bc:	9301      	str	r3, [sp, #4]
 80016be:	23a0      	movs	r3, #160	; 0xa0
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80016c6:	22a0      	movs	r2, #160	; 0xa0
 80016c8:	2100      	movs	r1, #0
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f7ff fc98 	bl	8001000 <LCD_writeLine>
	LCD_writeLine(spi,0,240,360,240,HX8357_BLACK);
 80016d0:	2300      	movs	r3, #0
 80016d2:	9301      	str	r3, [sp, #4]
 80016d4:	23f0      	movs	r3, #240	; 0xf0
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80016dc:	22f0      	movs	r2, #240	; 0xf0
 80016de:	2100      	movs	r1, #0
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f7ff fc8d 	bl	8001000 <LCD_writeLine>

	//column
	LCD_writeLine(spi,360,0,360,320,HX8357_BLACK);
 80016e6:	2300      	movs	r3, #0
 80016e8:	9301      	str	r3, [sp, #4]
 80016ea:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80016ee:	9300      	str	r3, [sp, #0]
 80016f0:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80016f4:	2200      	movs	r2, #0
 80016f6:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff fc80 	bl	8001000 <LCD_writeLine>
	return;
 8001700:	bf00      	nop
}
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <LCD_fillBattery>:

void LCD_fillBattery(SPI_HandleTypeDef* spi, int16_t x, int16_t y, uint32_t size, uint32_t level) {
 8001708:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800170c:	b088      	sub	sp, #32
 800170e:	af02      	add	r7, sp, #8
 8001710:	60f8      	str	r0, [r7, #12]
 8001712:	607b      	str	r3, [r7, #4]
 8001714:	460b      	mov	r3, r1
 8001716:	817b      	strh	r3, [r7, #10]
 8001718:	4613      	mov	r3, r2
 800171a:	813b      	strh	r3, [r7, #8]
	uint32_t color = HX8357_GREEN;
 800171c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001720:	617b      	str	r3, [r7, #20]
	if (level < 20) {
 8001722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001724:	2b13      	cmp	r3, #19
 8001726:	d803      	bhi.n	8001730 <LCD_fillBattery+0x28>
		color = HX8357_RED;
 8001728:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800172c:	617b      	str	r3, [r7, #20]
 800172e:	e005      	b.n	800173c <LCD_fillBattery+0x34>
	} else if (level < 50) {
 8001730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001732:	2b31      	cmp	r3, #49	; 0x31
 8001734:	d802      	bhi.n	800173c <LCD_fillBattery+0x34>
		color = HX8357_YELLOW;
 8001736:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800173a:	617b      	str	r3, [r7, #20]
	}
	//level = 100 --> y offset 0
	//level = 0 --> y offset 22*size
	int offset = 22*size - (22*size)*(level/100.0);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2216      	movs	r2, #22
 8001740:	fb02 f303 	mul.w	r3, r2, r3
 8001744:	4618      	mov	r0, r3
 8001746:	f7fe fe83 	bl	8000450 <__aeabi_ui2d>
 800174a:	4604      	mov	r4, r0
 800174c:	460d      	mov	r5, r1
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2216      	movs	r2, #22
 8001752:	fb02 f303 	mul.w	r3, r2, r3
 8001756:	4618      	mov	r0, r3
 8001758:	f7fe fe7a 	bl	8000450 <__aeabi_ui2d>
 800175c:	4680      	mov	r8, r0
 800175e:	4689      	mov	r9, r1
 8001760:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001762:	f7fe fe75 	bl	8000450 <__aeabi_ui2d>
 8001766:	f04f 0200 	mov.w	r2, #0
 800176a:	4b3d      	ldr	r3, [pc, #244]	; (8001860 <LCD_fillBattery+0x158>)
 800176c:	f7ff f814 	bl	8000798 <__aeabi_ddiv>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	4640      	mov	r0, r8
 8001776:	4649      	mov	r1, r9
 8001778:	f7fe fee4 	bl	8000544 <__aeabi_dmul>
 800177c:	4602      	mov	r2, r0
 800177e:	460b      	mov	r3, r1
 8001780:	4620      	mov	r0, r4
 8001782:	4629      	mov	r1, r5
 8001784:	f7fe fd26 	bl	80001d4 <__aeabi_dsub>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	4610      	mov	r0, r2
 800178e:	4619      	mov	r1, r3
 8001790:	f7ff f8ea 	bl	8000968 <__aeabi_d2iz>
 8001794:	4603      	mov	r3, r0
 8001796:	613b      	str	r3, [r7, #16]
	LCD_writePixels(spi, HX8357_WHITE, x + 3, ((y + size) + 3), 10*size - 6, (22*size - 6));
 8001798:	897b      	ldrh	r3, [r7, #10]
 800179a:	3303      	adds	r3, #3
 800179c:	b29b      	uxth	r3, r3
 800179e:	b219      	sxth	r1, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	893b      	ldrh	r3, [r7, #8]
 80017a6:	4413      	add	r3, r2
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	3303      	adds	r3, #3
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	b218      	sxth	r0, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	461a      	mov	r2, r3
 80017b6:	0092      	lsls	r2, r2, #2
 80017b8:	4413      	add	r3, r2
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	b29b      	uxth	r3, r3
 80017be:	3b06      	subs	r3, #6
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	b21a      	sxth	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	461c      	mov	r4, r3
 80017ca:	00a4      	lsls	r4, r4, #2
 80017cc:	441c      	add	r4, r3
 80017ce:	0064      	lsls	r4, r4, #1
 80017d0:	4423      	add	r3, r4
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	3b06      	subs	r3, #6
 80017d8:	b29b      	uxth	r3, r3
 80017da:	b21b      	sxth	r3, r3
 80017dc:	9301      	str	r3, [sp, #4]
 80017de:	9200      	str	r2, [sp, #0]
 80017e0:	4603      	mov	r3, r0
 80017e2:	460a      	mov	r2, r1
 80017e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80017e8:	68f8      	ldr	r0, [r7, #12]
 80017ea:	f7ff fabf 	bl	8000d6c <LCD_writePixels>
	LCD_writePixels(spi, color, x + 3, ((y + size) + 3) + offset, 10*size - 6, (22*size - 6) - offset);
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	b298      	uxth	r0, r3
 80017f2:	897b      	ldrh	r3, [r7, #10]
 80017f4:	3303      	adds	r3, #3
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	b21c      	sxth	r4, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	893b      	ldrh	r3, [r7, #8]
 8001800:	4413      	add	r3, r2
 8001802:	b29a      	uxth	r2, r3
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	b29b      	uxth	r3, r3
 8001808:	4413      	add	r3, r2
 800180a:	b29b      	uxth	r3, r3
 800180c:	3303      	adds	r3, #3
 800180e:	b29b      	uxth	r3, r3
 8001810:	b21d      	sxth	r5, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	b29b      	uxth	r3, r3
 8001816:	461a      	mov	r2, r3
 8001818:	0092      	lsls	r2, r2, #2
 800181a:	4413      	add	r3, r2
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	b29b      	uxth	r3, r3
 8001820:	3b06      	subs	r3, #6
 8001822:	b29b      	uxth	r3, r3
 8001824:	b21a      	sxth	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	b29b      	uxth	r3, r3
 800182a:	4619      	mov	r1, r3
 800182c:	0089      	lsls	r1, r1, #2
 800182e:	4419      	add	r1, r3
 8001830:	0049      	lsls	r1, r1, #1
 8001832:	440b      	add	r3, r1
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	b299      	uxth	r1, r3
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	b29b      	uxth	r3, r3
 800183c:	1acb      	subs	r3, r1, r3
 800183e:	b29b      	uxth	r3, r3
 8001840:	3b06      	subs	r3, #6
 8001842:	b29b      	uxth	r3, r3
 8001844:	b21b      	sxth	r3, r3
 8001846:	9301      	str	r3, [sp, #4]
 8001848:	9200      	str	r2, [sp, #0]
 800184a:	462b      	mov	r3, r5
 800184c:	4622      	mov	r2, r4
 800184e:	4601      	mov	r1, r0
 8001850:	68f8      	ldr	r0, [r7, #12]
 8001852:	f7ff fa8b 	bl	8000d6c <LCD_writePixels>
}
 8001856:	bf00      	nop
 8001858:	3718      	adds	r7, #24
 800185a:	46bd      	mov	sp, r7
 800185c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001860:	40590000 	.word	0x40590000

08001864 <LCD_updateVals>:

void LCD_updateVals(SPI_HandleTypeDef* spi, int buf[], uint16_t color) {
 8001864:	b580      	push	{r7, lr}
 8001866:	b0d6      	sub	sp, #344	; 0x158
 8001868:	af04      	add	r7, sp, #16
 800186a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800186e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001872:	6018      	str	r0, [r3, #0]
 8001874:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001878:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800187c:	6019      	str	r1, [r3, #0]
 800187e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001882:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 8001886:	801a      	strh	r2, [r3, #0]
	//buf[0:1] accel, buf[2:3] temp, buf[4:5] power
	int accel = (buf[0] << 4) | buf[1];
 8001888:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800188c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	011a      	lsls	r2, r3, #4
 8001896:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800189a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	3304      	adds	r3, #4
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	int temp = (buf[2] << 4) | buf[3];
 80018aa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80018ae:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	3308      	adds	r3, #8
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	011a      	lsls	r2, r3, #4
 80018ba:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80018be:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	330c      	adds	r3, #12
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	int power = (buf[4] << 4) | buf[5];
 80018ce:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80018d2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	3310      	adds	r3, #16
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	011a      	lsls	r2, r3, #4
 80018de:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80018e2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	3314      	adds	r3, #20
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	char var1[100];
	char var2[100];
	char var3[100];
	itoa(accel,var1,10);
 80018f2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80018f6:	220a      	movs	r2, #10
 80018f8:	4619      	mov	r1, r3
 80018fa:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 80018fe:	f003 fad7 	bl	8004eb0 <itoa>
	itoa(temp,var2,10);
 8001902:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001906:	220a      	movs	r2, #10
 8001908:	4619      	mov	r1, r3
 800190a:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 800190e:	f003 facf 	bl	8004eb0 <itoa>
	itoa(power,var3,10);
 8001912:	f107 0310 	add.w	r3, r7, #16
 8001916:	220a      	movs	r2, #10
 8001918:	4619      	mov	r1, r3
 800191a:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 800191e:	f003 fac7 	bl	8004eb0 <itoa>
	LCD_drawString(spi,146,30 + 80*1,var1,4,color,4);
 8001922:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8001926:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800192a:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 800192e:	2304      	movs	r3, #4
 8001930:	9302      	str	r3, [sp, #8]
 8001932:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001936:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	9301      	str	r3, [sp, #4]
 800193e:	2304      	movs	r3, #4
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	4613      	mov	r3, r2
 8001944:	226e      	movs	r2, #110	; 0x6e
 8001946:	2192      	movs	r1, #146	; 0x92
 8001948:	6800      	ldr	r0, [r0, #0]
 800194a:	f7ff fb23 	bl	8000f94 <LCD_drawString>
	LCD_drawString(spi,146,30 + 80*2,var2,4,color,4);
 800194e:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8001952:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001956:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 800195a:	2304      	movs	r3, #4
 800195c:	9302      	str	r3, [sp, #8]
 800195e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001962:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 8001966:	881b      	ldrh	r3, [r3, #0]
 8001968:	9301      	str	r3, [sp, #4]
 800196a:	2304      	movs	r3, #4
 800196c:	9300      	str	r3, [sp, #0]
 800196e:	4613      	mov	r3, r2
 8001970:	22be      	movs	r2, #190	; 0xbe
 8001972:	2192      	movs	r1, #146	; 0x92
 8001974:	6800      	ldr	r0, [r0, #0]
 8001976:	f7ff fb0d 	bl	8000f94 <LCD_drawString>
	LCD_drawString(spi,146,30 + 80*3,var3,4,color,4);
 800197a:	f107 0210 	add.w	r2, r7, #16
 800197e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001982:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 8001986:	2304      	movs	r3, #4
 8001988:	9302      	str	r3, [sp, #8]
 800198a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800198e:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 8001992:	881b      	ldrh	r3, [r3, #0]
 8001994:	9301      	str	r3, [sp, #4]
 8001996:	2304      	movs	r3, #4
 8001998:	9300      	str	r3, [sp, #0]
 800199a:	4613      	mov	r3, r2
 800199c:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80019a0:	2192      	movs	r1, #146	; 0x92
 80019a2:	6800      	ldr	r0, [r0, #0]
 80019a4:	f7ff faf6 	bl	8000f94 <LCD_drawString>
}
 80019a8:	bf00      	nop
 80019aa:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
	...

080019b4 <LCD_warnings>:

void LCD_warnings(SPI_HandleTypeDef* spi, int temp, int level, int *warning) {
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b088      	sub	sp, #32
 80019b8:	af04      	add	r7, sp, #16
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
 80019c0:	603b      	str	r3, [r7, #0]
	if ((temp > 50 | level < 30) & *warning == 0) {
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	2b32      	cmp	r3, #50	; 0x32
 80019c6:	bfcc      	ite	gt
 80019c8:	2301      	movgt	r3, #1
 80019ca:	2300      	movle	r3, #0
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2b1d      	cmp	r3, #29
 80019d2:	bfd4      	ite	le
 80019d4:	2301      	movle	r3, #1
 80019d6:	2300      	movgt	r3, #0
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	4313      	orrs	r3, r2
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	461a      	mov	r2, r3
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	bf0c      	ite	eq
 80019e8:	2301      	moveq	r3, #1
 80019ea:	2300      	movne	r3, #0
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	4013      	ands	r3, r2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d00b      	beq.n	8001a0c <LCD_warnings+0x58>
			LCD_writePixels(spi,HX8357_WHITE,0,0,359,79);
 80019f4:	234f      	movs	r3, #79	; 0x4f
 80019f6:	9301      	str	r3, [sp, #4]
 80019f8:	f240 1367 	movw	r3, #359	; 0x167
 80019fc:	9300      	str	r3, [sp, #0]
 80019fe:	2300      	movs	r3, #0
 8001a00:	2200      	movs	r2, #0
 8001a02:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f7ff f9b0 	bl	8000d6c <LCD_writePixels>
	}
	if (temp > 50) {
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	2b32      	cmp	r3, #50	; 0x32
 8001a10:	dd1e      	ble.n	8001a50 <LCD_warnings+0x9c>
		LCD_fillTriangle(spi,15,55,45,55,30,25,HX8357_YELLOW);
 8001a12:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001a16:	9303      	str	r3, [sp, #12]
 8001a18:	2319      	movs	r3, #25
 8001a1a:	9302      	str	r3, [sp, #8]
 8001a1c:	231e      	movs	r3, #30
 8001a1e:	9301      	str	r3, [sp, #4]
 8001a20:	2337      	movs	r3, #55	; 0x37
 8001a22:	9300      	str	r3, [sp, #0]
 8001a24:	232d      	movs	r3, #45	; 0x2d
 8001a26:	2237      	movs	r2, #55	; 0x37
 8001a28:	210f      	movs	r1, #15
 8001a2a:	68f8      	ldr	r0, [r7, #12]
 8001a2c:	f7ff fba0 	bl	8001170 <LCD_fillTriangle>
		LCD_drawString(spi,55,30 + 80*0,"HIGH TEMP",9,HX8357_RED,2);
 8001a30:	2302      	movs	r3, #2
 8001a32:	9302      	str	r3, [sp, #8]
 8001a34:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001a38:	9301      	str	r3, [sp, #4]
 8001a3a:	2309      	movs	r3, #9
 8001a3c:	9300      	str	r3, [sp, #0]
 8001a3e:	4b2f      	ldr	r3, [pc, #188]	; (8001afc <LCD_warnings+0x148>)
 8001a40:	221e      	movs	r2, #30
 8001a42:	2137      	movs	r1, #55	; 0x37
 8001a44:	68f8      	ldr	r0, [r7, #12]
 8001a46:	f7ff faa5 	bl	8000f94 <LCD_drawString>
		*warning = 1;
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	601a      	str	r2, [r3, #0]
	}
	if (level < 30) {
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b1d      	cmp	r3, #29
 8001a54:	dc1e      	bgt.n	8001a94 <LCD_warnings+0xe0>
		LCD_fillTriangle(spi,180,55,210,55,195,25,HX8357_YELLOW);
 8001a56:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001a5a:	9303      	str	r3, [sp, #12]
 8001a5c:	2319      	movs	r3, #25
 8001a5e:	9302      	str	r3, [sp, #8]
 8001a60:	23c3      	movs	r3, #195	; 0xc3
 8001a62:	9301      	str	r3, [sp, #4]
 8001a64:	2337      	movs	r3, #55	; 0x37
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	23d2      	movs	r3, #210	; 0xd2
 8001a6a:	2237      	movs	r2, #55	; 0x37
 8001a6c:	21b4      	movs	r1, #180	; 0xb4
 8001a6e:	68f8      	ldr	r0, [r7, #12]
 8001a70:	f7ff fb7e 	bl	8001170 <LCD_fillTriangle>
		LCD_drawString(spi,220,30 + 80*0,"LOW VOLT",8,HX8357_RED,2);
 8001a74:	2302      	movs	r3, #2
 8001a76:	9302      	str	r3, [sp, #8]
 8001a78:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001a7c:	9301      	str	r3, [sp, #4]
 8001a7e:	2308      	movs	r3, #8
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	4b1f      	ldr	r3, [pc, #124]	; (8001b00 <LCD_warnings+0x14c>)
 8001a84:	221e      	movs	r2, #30
 8001a86:	21dc      	movs	r1, #220	; 0xdc
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	f7ff fa83 	bl	8000f94 <LCD_drawString>
		*warning = 1;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	2201      	movs	r2, #1
 8001a92:	601a      	str	r2, [r3, #0]
	}
	if (*warning == 1) {
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d12a      	bne.n	8001af2 <LCD_warnings+0x13e>
		if (temp < 50 & level > 30) {
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	2b31      	cmp	r3, #49	; 0x31
 8001aa0:	bfd4      	ite	le
 8001aa2:	2301      	movle	r3, #1
 8001aa4:	2300      	movgt	r3, #0
 8001aa6:	b2da      	uxtb	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b1e      	cmp	r3, #30
 8001aac:	bfcc      	ite	gt
 8001aae:	2301      	movgt	r3, #1
 8001ab0:	2300      	movle	r3, #0
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d01a      	beq.n	8001af2 <LCD_warnings+0x13e>
			LCD_writePixels(spi,HX8357_WHITE,0,0,359,79);
 8001abc:	234f      	movs	r3, #79	; 0x4f
 8001abe:	9301      	str	r3, [sp, #4]
 8001ac0:	f240 1367 	movw	r3, #359	; 0x167
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001ace:	68f8      	ldr	r0, [r7, #12]
 8001ad0:	f7ff f94c 	bl	8000d6c <LCD_writePixels>
			LCD_drawString(spi,20,30 + 80*0,"TADAMHESPEV | UMSM",18,HX8357_BLACK,3);
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	9302      	str	r3, [sp, #8]
 8001ad8:	2300      	movs	r3, #0
 8001ada:	9301      	str	r3, [sp, #4]
 8001adc:	2312      	movs	r3, #18
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	4b08      	ldr	r3, [pc, #32]	; (8001b04 <LCD_warnings+0x150>)
 8001ae2:	221e      	movs	r2, #30
 8001ae4:	2114      	movs	r1, #20
 8001ae6:	68f8      	ldr	r0, [r7, #12]
 8001ae8:	f7ff fa54 	bl	8000f94 <LCD_drawString>
			*warning = 0;
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001af2:	bf00      	nop
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	08004fa8 	.word	0x08004fa8
 8001b00:	08004fb4 	.word	0x08004fb4
 8001b04:	08004fc0 	.word	0x08004fc0

08001b08 <LCD_updateBattery>:

void LCD_updateBattery(SPI_HandleTypeDef* spi, int level) {
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	f5ad 7d50 	sub.w	sp, sp, #832	; 0x340
 8001b0e:	af04      	add	r7, sp, #16
 8001b10:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001b14:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8001b18:	6018      	str	r0, [r3, #0]
 8001b1a:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001b1e:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8001b22:	6019      	str	r1, [r3, #0]
	char lev[801];
	itoa(level,lev,10);
 8001b24:	f107 010c 	add.w	r1, r7, #12
 8001b28:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001b2c:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8001b30:	220a      	movs	r2, #10
 8001b32:	6818      	ldr	r0, [r3, #0]
 8001b34:	f003 f9bc 	bl	8004eb0 <itoa>

	LCD_fillBattery(spi,380,120,8,level);
 8001b38:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001b3c:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f507 724c 	add.w	r2, r7, #816	; 0x330
 8001b46:	f5a2 704b 	sub.w	r0, r2, #812	; 0x32c
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	2308      	movs	r3, #8
 8001b4e:	2278      	movs	r2, #120	; 0x78
 8001b50:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001b54:	6800      	ldr	r0, [r0, #0]
 8001b56:	f7ff fdd7 	bl	8001708 <LCD_fillBattery>
	LCD_drawString(spi,370,50,lev,3,HX8357_BLACK,4);
 8001b5a:	f107 030c 	add.w	r3, r7, #12
 8001b5e:	f507 724c 	add.w	r2, r7, #816	; 0x330
 8001b62:	f5a2 704b 	sub.w	r0, r2, #812	; 0x32c
 8001b66:	2204      	movs	r2, #4
 8001b68:	9202      	str	r2, [sp, #8]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	9201      	str	r2, [sp, #4]
 8001b6e:	2203      	movs	r2, #3
 8001b70:	9200      	str	r2, [sp, #0]
 8001b72:	2232      	movs	r2, #50	; 0x32
 8001b74:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8001b78:	6800      	ldr	r0, [r0, #0]
 8001b7a:	f7ff fa0b 	bl	8000f94 <LCD_drawString>
}
 8001b7e:	bf00      	nop
 8001b80:	f507 774c 	add.w	r7, r7, #816	; 0x330
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b098      	sub	sp, #96	; 0x60
 8001b8c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b8e:	f000 fbd8 	bl	8002342 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b92:	f000 f90d 	bl	8001db0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b96:	f000 f9d3 	bl	8001f40 <MX_GPIO_Init>
  MX_RTC_Init();
 8001b9a:	f000 f96b 	bl	8001e74 <MX_RTC_Init>
  MX_SPI1_Init();
 8001b9e:	f000 f991 	bl	8001ec4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  	LCD_begin(&hspi1);
 8001ba2:	487a      	ldr	r0, [pc, #488]	; (8001d8c <main+0x204>)
 8001ba4:	f7fe ff78 	bl	8000a98 <LCD_begin>
  	//LCD_fillRect(&hspi1, 0, 0, 480, 320, HX8357_WHITE);
  	LCD_writePixels(&hspi1,HX8357_WHITE,0,0,480,320);
 8001ba8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001bac:	9301      	str	r3, [sp, #4]
 8001bae:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001bbc:	4873      	ldr	r0, [pc, #460]	; (8001d8c <main+0x204>)
 8001bbe:	f7ff f8d5 	bl	8000d6c <LCD_writePixels>
    LCD_drawBattery(&hspi1,380,120,HX8357_BLACK,8);
 8001bc2:	2308      	movs	r3, #8
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	2278      	movs	r2, #120	; 0x78
 8001bca:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001bce:	486f      	ldr	r0, [pc, #444]	; (8001d8c <main+0x204>)
 8001bd0:	f7ff fc3e 	bl	8001450 <LCD_drawBattery>
    LCD_drawFrame(&hspi1,HX8357_BLACK);
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	486d      	ldr	r0, [pc, #436]	; (8001d8c <main+0x204>)
 8001bd8:	f7ff fd5e 	bl	8001698 <LCD_drawFrame>


    char * name = "TADAMHESPEV | UMSM";
 8001bdc:	4b6c      	ldr	r3, [pc, #432]	; (8001d90 <main+0x208>)
 8001bde:	64fb      	str	r3, [r7, #76]	; 0x4c
    char * speed = "SPEED:";
 8001be0:	4b6c      	ldr	r3, [pc, #432]	; (8001d94 <main+0x20c>)
 8001be2:	64bb      	str	r3, [r7, #72]	; 0x48
    char * temp = "TEMP:";
 8001be4:	4b6c      	ldr	r3, [pc, #432]	; (8001d98 <main+0x210>)
 8001be6:	647b      	str	r3, [r7, #68]	; 0x44
    char * power = "POWER:";
 8001be8:	4b6c      	ldr	r3, [pc, #432]	; (8001d9c <main+0x214>)
 8001bea:	643b      	str	r3, [r7, #64]	; 0x40

    char * mph = "mph";
 8001bec:	4b6c      	ldr	r3, [pc, #432]	; (8001da0 <main+0x218>)
 8001bee:	63fb      	str	r3, [r7, #60]	; 0x3c
    char * deg = "C";
 8001bf0:	4b6c      	ldr	r3, [pc, #432]	; (8001da4 <main+0x21c>)
 8001bf2:	63bb      	str	r3, [r7, #56]	; 0x38
    char * watt = "W";
 8001bf4:	4b6c      	ldr	r3, [pc, #432]	; (8001da8 <main+0x220>)
 8001bf6:	637b      	str	r3, [r7, #52]	; 0x34
    LCD_drawString(&hspi1,20,30 + 80*0,name,18,HX8357_BLACK,3);
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	9302      	str	r3, [sp, #8]
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	9301      	str	r3, [sp, #4]
 8001c00:	2312      	movs	r3, #18
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c06:	221e      	movs	r2, #30
 8001c08:	2114      	movs	r1, #20
 8001c0a:	4860      	ldr	r0, [pc, #384]	; (8001d8c <main+0x204>)
 8001c0c:	f7ff f9c2 	bl	8000f94 <LCD_drawString>
    LCD_drawString(&hspi1,5,30 + 80*1,speed,6,HX8357_BLACK,3);
 8001c10:	2303      	movs	r3, #3
 8001c12:	9302      	str	r3, [sp, #8]
 8001c14:	2300      	movs	r3, #0
 8001c16:	9301      	str	r3, [sp, #4]
 8001c18:	2306      	movs	r3, #6
 8001c1a:	9300      	str	r3, [sp, #0]
 8001c1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c1e:	226e      	movs	r2, #110	; 0x6e
 8001c20:	2105      	movs	r1, #5
 8001c22:	485a      	ldr	r0, [pc, #360]	; (8001d8c <main+0x204>)
 8001c24:	f7ff f9b6 	bl	8000f94 <LCD_drawString>
    LCD_drawString(&hspi1,5,30 + 80*2,temp,5,HX8357_BLACK,3);
 8001c28:	2303      	movs	r3, #3
 8001c2a:	9302      	str	r3, [sp, #8]
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	9301      	str	r3, [sp, #4]
 8001c30:	2305      	movs	r3, #5
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c36:	22be      	movs	r2, #190	; 0xbe
 8001c38:	2105      	movs	r1, #5
 8001c3a:	4854      	ldr	r0, [pc, #336]	; (8001d8c <main+0x204>)
 8001c3c:	f7ff f9aa 	bl	8000f94 <LCD_drawString>
    LCD_drawString(&hspi1,5,30 + 80*3,power,6,HX8357_BLACK,3);
 8001c40:	2303      	movs	r3, #3
 8001c42:	9302      	str	r3, [sp, #8]
 8001c44:	2300      	movs	r3, #0
 8001c46:	9301      	str	r3, [sp, #4]
 8001c48:	2306      	movs	r3, #6
 8001c4a:	9300      	str	r3, [sp, #0]
 8001c4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c4e:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8001c52:	2105      	movs	r1, #5
 8001c54:	484d      	ldr	r0, [pc, #308]	; (8001d8c <main+0x204>)
 8001c56:	f7ff f99d 	bl	8000f94 <LCD_drawString>

    LCD_drawString(&hspi1,280,30 + 80*1,mph,3,HX8357_BLACK,3);
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	9302      	str	r3, [sp, #8]
 8001c5e:	2300      	movs	r3, #0
 8001c60:	9301      	str	r3, [sp, #4]
 8001c62:	2303      	movs	r3, #3
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c68:	226e      	movs	r2, #110	; 0x6e
 8001c6a:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001c6e:	4847      	ldr	r0, [pc, #284]	; (8001d8c <main+0x204>)
 8001c70:	f7ff f990 	bl	8000f94 <LCD_drawString>
    LCD_drawString(&hspi1,306,30 + 80*2,deg,1,HX8357_BLACK,3);
 8001c74:	2303      	movs	r3, #3
 8001c76:	9302      	str	r3, [sp, #8]
 8001c78:	2300      	movs	r3, #0
 8001c7a:	9301      	str	r3, [sp, #4]
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	9300      	str	r3, [sp, #0]
 8001c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c82:	22be      	movs	r2, #190	; 0xbe
 8001c84:	f44f 7199 	mov.w	r1, #306	; 0x132
 8001c88:	4840      	ldr	r0, [pc, #256]	; (8001d8c <main+0x204>)
 8001c8a:	f7ff f983 	bl	8000f94 <LCD_drawString>
    LCD_drawString(&hspi1,306,30 + 80*3,watt,1,HX8357_BLACK,3);
 8001c8e:	2303      	movs	r3, #3
 8001c90:	9302      	str	r3, [sp, #8]
 8001c92:	2300      	movs	r3, #0
 8001c94:	9301      	str	r3, [sp, #4]
 8001c96:	2301      	movs	r3, #1
 8001c98:	9300      	str	r3, [sp, #0]
 8001c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c9c:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8001ca0:	f44f 7199 	mov.w	r1, #306	; 0x132
 8001ca4:	4839      	ldr	r0, [pc, #228]	; (8001d8c <main+0x204>)
 8001ca6:	f7ff f975 	bl	8000f94 <LCD_drawString>

    int volt_percent = 85;
 8001caa:	2355      	movs	r3, #85	; 0x55
 8001cac:	633b      	str	r3, [r7, #48]	; 0x30
    LCD_updateBattery(&hspi1,volt_percent);
 8001cae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001cb0:	4836      	ldr	r0, [pc, #216]	; (8001d8c <main+0x204>)
 8001cb2:	f7ff ff29 	bl	8001b08 <LCD_updateBattery>
    LCD_drawString(&hspi1,442,50,"%",1,HX8357_BLACK,4);
 8001cb6:	2304      	movs	r3, #4
 8001cb8:	9302      	str	r3, [sp, #8]
 8001cba:	2300      	movs	r3, #0
 8001cbc:	9301      	str	r3, [sp, #4]
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	9300      	str	r3, [sp, #0]
 8001cc2:	4b3a      	ldr	r3, [pc, #232]	; (8001dac <main+0x224>)
 8001cc4:	2232      	movs	r2, #50	; 0x32
 8001cc6:	f44f 71dd 	mov.w	r1, #442	; 0x1ba
 8001cca:	4830      	ldr	r0, [pc, #192]	; (8001d8c <main+0x204>)
 8001ccc:	f7ff f962 	bl	8000f94 <LCD_drawString>

    int buf[10] = {4,3,1,4,5,2};
 8001cd0:	f107 0308 	add.w	r3, r7, #8
 8001cd4:	2228      	movs	r2, #40	; 0x28
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f003 f92d 	bl	8004f38 <memset>
 8001cde:	2304      	movs	r3, #4
 8001ce0:	60bb      	str	r3, [r7, #8]
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	613b      	str	r3, [r7, #16]
 8001cea:	2304      	movs	r3, #4
 8001cec:	617b      	str	r3, [r7, #20]
 8001cee:	2305      	movs	r3, #5
 8001cf0:	61bb      	str	r3, [r7, #24]
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	61fb      	str	r3, [r7, #28]
    int warning = 0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	607b      	str	r3, [r7, #4]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //test
	  buf[2] = 1;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	613b      	str	r3, [r7, #16]
	  volt_percent = 75;
 8001cfe:	234b      	movs	r3, #75	; 0x4b
 8001d00:	633b      	str	r3, [r7, #48]	; 0x30
	  LCD_updateVals(&hspi1,buf,HX8357_BLACK);
 8001d02:	f107 0308 	add.w	r3, r7, #8
 8001d06:	2200      	movs	r2, #0
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4820      	ldr	r0, [pc, #128]	; (8001d8c <main+0x204>)
 8001d0c:	f7ff fdaa 	bl	8001864 <LCD_updateVals>
	  LCD_updateBattery(&hspi1,volt_percent);
 8001d10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d12:	481e      	ldr	r0, [pc, #120]	; (8001d8c <main+0x204>)
 8001d14:	f7ff fef8 	bl	8001b08 <LCD_updateBattery>
	  LCD_warnings(&hspi1, (buf[2] << 4) | buf[3],volt_percent,&warning);
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	011a      	lsls	r2, r3, #4
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	ea42 0103 	orr.w	r1, r2, r3
 8001d22:	1d3b      	adds	r3, r7, #4
 8001d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d26:	4819      	ldr	r0, [pc, #100]	; (8001d8c <main+0x204>)
 8001d28:	f7ff fe44 	bl	80019b4 <LCD_warnings>
	  HAL_Delay(500);
 8001d2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d30:	f000 fb40 	bl	80023b4 <HAL_Delay>

	  buf[2] = 3;
 8001d34:	2303      	movs	r3, #3
 8001d36:	613b      	str	r3, [r7, #16]
	  LCD_updateVals(&hspi1,buf,HX8357_BLACK);
 8001d38:	f107 0308 	add.w	r3, r7, #8
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4812      	ldr	r0, [pc, #72]	; (8001d8c <main+0x204>)
 8001d42:	f7ff fd8f 	bl	8001864 <LCD_updateVals>
	  LCD_warnings(&hspi1, (buf[2] << 4) | buf[3],volt_percent,&warning);
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	011a      	lsls	r2, r3, #4
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	ea42 0103 	orr.w	r1, r2, r3
 8001d50:	1d3b      	adds	r3, r7, #4
 8001d52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d54:	480d      	ldr	r0, [pc, #52]	; (8001d8c <main+0x204>)
 8001d56:	f7ff fe2d 	bl	80019b4 <LCD_warnings>
	  HAL_Delay(500);
 8001d5a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d5e:	f000 fb29 	bl	80023b4 <HAL_Delay>

	  volt_percent = 20;
 8001d62:	2314      	movs	r3, #20
 8001d64:	633b      	str	r3, [r7, #48]	; 0x30
	  LCD_updateBattery(&hspi1,volt_percent);
 8001d66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d68:	4808      	ldr	r0, [pc, #32]	; (8001d8c <main+0x204>)
 8001d6a:	f7ff fecd 	bl	8001b08 <LCD_updateBattery>
	  LCD_warnings(&hspi1, (buf[2] << 4) | buf[3],volt_percent,&warning);
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	011a      	lsls	r2, r3, #4
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	ea42 0103 	orr.w	r1, r2, r3
 8001d78:	1d3b      	adds	r3, r7, #4
 8001d7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d7c:	4803      	ldr	r0, [pc, #12]	; (8001d8c <main+0x204>)
 8001d7e:	f7ff fe19 	bl	80019b4 <LCD_warnings>
	  HAL_Delay(500);
 8001d82:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d86:	f000 fb15 	bl	80023b4 <HAL_Delay>
	  buf[2] = 1;
 8001d8a:	e7b6      	b.n	8001cfa <main+0x172>
 8001d8c:	200000b4 	.word	0x200000b4
 8001d90:	08004fd4 	.word	0x08004fd4
 8001d94:	08004fe8 	.word	0x08004fe8
 8001d98:	08004ff0 	.word	0x08004ff0
 8001d9c:	08004ff8 	.word	0x08004ff8
 8001da0:	08005000 	.word	0x08005000
 8001da4:	08005004 	.word	0x08005004
 8001da8:	08005008 	.word	0x08005008
 8001dac:	0800500c 	.word	0x0800500c

08001db0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b096      	sub	sp, #88	; 0x58
 8001db4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001db6:	f107 0314 	add.w	r3, r7, #20
 8001dba:	2244      	movs	r2, #68	; 0x44
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f003 f8ba 	bl	8004f38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dc4:	463b      	mov	r3, r7
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	605a      	str	r2, [r3, #4]
 8001dcc:	609a      	str	r2, [r3, #8]
 8001dce:	60da      	str	r2, [r3, #12]
 8001dd0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001dd2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001dd6:	f000 fd93 	bl	8002900 <HAL_PWREx_ControlVoltageScaling>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001de0:	f000 f92b 	bl	800203a <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001de4:	f000 fd6e 	bl	80028c4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001de8:	4b21      	ldr	r3, [pc, #132]	; (8001e70 <SystemClock_Config+0xc0>)
 8001dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dee:	4a20      	ldr	r2, [pc, #128]	; (8001e70 <SystemClock_Config+0xc0>)
 8001df0:	f023 0318 	bic.w	r3, r3, #24
 8001df4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001df8:	2314      	movs	r3, #20
 8001dfa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001e00:	2301      	movs	r3, #1
 8001e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001e04:	2300      	movs	r3, #0
 8001e06:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001e08:	2360      	movs	r3, #96	; 0x60
 8001e0a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001e10:	2301      	movs	r3, #1
 8001e12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001e14:	2301      	movs	r3, #1
 8001e16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001e18:	2328      	movs	r3, #40	; 0x28
 8001e1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001e1c:	2307      	movs	r3, #7
 8001e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001e20:	2302      	movs	r3, #2
 8001e22:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001e24:	2302      	movs	r3, #2
 8001e26:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e28:	f107 0314 	add.w	r3, r7, #20
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f000 fdbd 	bl	80029ac <HAL_RCC_OscConfig>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001e38:	f000 f8ff 	bl	800203a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e3c:	230f      	movs	r3, #15
 8001e3e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e40:	2303      	movs	r3, #3
 8001e42:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e44:	2300      	movs	r3, #0
 8001e46:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001e50:	463b      	mov	r3, r7
 8001e52:	2104      	movs	r1, #4
 8001e54:	4618      	mov	r0, r3
 8001e56:	f001 f9bd 	bl	80031d4 <HAL_RCC_ClockConfig>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001e60:	f000 f8eb 	bl	800203a <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001e64:	f001 fdec 	bl	8003a40 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001e68:	bf00      	nop
 8001e6a:	3758      	adds	r7, #88	; 0x58
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40021000 	.word	0x40021000

08001e74 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001e78:	4b10      	ldr	r3, [pc, #64]	; (8001ebc <MX_RTC_Init+0x48>)
 8001e7a:	4a11      	ldr	r2, [pc, #68]	; (8001ec0 <MX_RTC_Init+0x4c>)
 8001e7c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001e7e:	4b0f      	ldr	r3, [pc, #60]	; (8001ebc <MX_RTC_Init+0x48>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001e84:	4b0d      	ldr	r3, [pc, #52]	; (8001ebc <MX_RTC_Init+0x48>)
 8001e86:	227f      	movs	r2, #127	; 0x7f
 8001e88:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001e8a:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <MX_RTC_Init+0x48>)
 8001e8c:	22ff      	movs	r2, #255	; 0xff
 8001e8e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001e90:	4b0a      	ldr	r3, [pc, #40]	; (8001ebc <MX_RTC_Init+0x48>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001e96:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <MX_RTC_Init+0x48>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001e9c:	4b07      	ldr	r3, [pc, #28]	; (8001ebc <MX_RTC_Init+0x48>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001ea2:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <MX_RTC_Init+0x48>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ea8:	4804      	ldr	r0, [pc, #16]	; (8001ebc <MX_RTC_Init+0x48>)
 8001eaa:	f001 fecb 	bl	8003c44 <HAL_RTC_Init>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001eb4:	f000 f8c1 	bl	800203a <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001eb8:	bf00      	nop
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	20000090 	.word	0x20000090
 8001ec0:	40002800 	.word	0x40002800

08001ec4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ec8:	4b1b      	ldr	r3, [pc, #108]	; (8001f38 <MX_SPI1_Init+0x74>)
 8001eca:	4a1c      	ldr	r2, [pc, #112]	; (8001f3c <MX_SPI1_Init+0x78>)
 8001ecc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ece:	4b1a      	ldr	r3, [pc, #104]	; (8001f38 <MX_SPI1_Init+0x74>)
 8001ed0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ed4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ed6:	4b18      	ldr	r3, [pc, #96]	; (8001f38 <MX_SPI1_Init+0x74>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001edc:	4b16      	ldr	r3, [pc, #88]	; (8001f38 <MX_SPI1_Init+0x74>)
 8001ede:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001ee2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ee4:	4b14      	ldr	r3, [pc, #80]	; (8001f38 <MX_SPI1_Init+0x74>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001eea:	4b13      	ldr	r3, [pc, #76]	; (8001f38 <MX_SPI1_Init+0x74>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ef0:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <MX_SPI1_Init+0x74>)
 8001ef2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ef6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001ef8:	4b0f      	ldr	r3, [pc, #60]	; (8001f38 <MX_SPI1_Init+0x74>)
 8001efa:	2208      	movs	r2, #8
 8001efc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001efe:	4b0e      	ldr	r3, [pc, #56]	; (8001f38 <MX_SPI1_Init+0x74>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f04:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <MX_SPI1_Init+0x74>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f0a:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <MX_SPI1_Init+0x74>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001f10:	4b09      	ldr	r3, [pc, #36]	; (8001f38 <MX_SPI1_Init+0x74>)
 8001f12:	2207      	movs	r2, #7
 8001f14:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001f16:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <MX_SPI1_Init+0x74>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f1c:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <MX_SPI1_Init+0x74>)
 8001f1e:	2208      	movs	r2, #8
 8001f20:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f22:	4805      	ldr	r0, [pc, #20]	; (8001f38 <MX_SPI1_Init+0x74>)
 8001f24:	f001 ffac 	bl	8003e80 <HAL_SPI_Init>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001f2e:	f000 f884 	bl	800203a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f32:	bf00      	nop
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	200000b4 	.word	0x200000b4
 8001f3c:	40013000 	.word	0x40013000

08001f40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b088      	sub	sp, #32
 8001f44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f46:	f107 030c 	add.w	r3, r7, #12
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	605a      	str	r2, [r3, #4]
 8001f50:	609a      	str	r2, [r3, #8]
 8001f52:	60da      	str	r2, [r3, #12]
 8001f54:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f56:	4b2f      	ldr	r3, [pc, #188]	; (8002014 <MX_GPIO_Init+0xd4>)
 8001f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5a:	4a2e      	ldr	r2, [pc, #184]	; (8002014 <MX_GPIO_Init+0xd4>)
 8001f5c:	f043 0304 	orr.w	r3, r3, #4
 8001f60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f62:	4b2c      	ldr	r3, [pc, #176]	; (8002014 <MX_GPIO_Init+0xd4>)
 8001f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f66:	f003 0304 	and.w	r3, r3, #4
 8001f6a:	60bb      	str	r3, [r7, #8]
 8001f6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6e:	4b29      	ldr	r3, [pc, #164]	; (8002014 <MX_GPIO_Init+0xd4>)
 8001f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f72:	4a28      	ldr	r2, [pc, #160]	; (8002014 <MX_GPIO_Init+0xd4>)
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f7a:	4b26      	ldr	r3, [pc, #152]	; (8002014 <MX_GPIO_Init+0xd4>)
 8001f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	607b      	str	r3, [r7, #4]
 8001f84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f86:	4b23      	ldr	r3, [pc, #140]	; (8002014 <MX_GPIO_Init+0xd4>)
 8001f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8a:	4a22      	ldr	r2, [pc, #136]	; (8002014 <MX_GPIO_Init+0xd4>)
 8001f8c:	f043 0302 	orr.w	r3, r3, #2
 8001f90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f92:	4b20      	ldr	r3, [pc, #128]	; (8002014 <MX_GPIO_Init+0xd4>)
 8001f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	603b      	str	r3, [r7, #0]
 8001f9c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	2170      	movs	r1, #112	; 0x70
 8001fa2:	481d      	ldr	r0, [pc, #116]	; (8002018 <MX_GPIO_Init+0xd8>)
 8001fa4:	f000 fc76 	bl	8002894 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001fa8:	2304      	movs	r3, #4
 8001faa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fac:	2302      	movs	r3, #2
 8001fae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fb8:	2307      	movs	r3, #7
 8001fba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001fbc:	f107 030c 	add.w	r3, r7, #12
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fc6:	f000 fafb 	bl	80025c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001fca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001fe0:	f107 030c 	add.w	r3, r7, #12
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fea:	f000 fae9 	bl	80025c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001fee:	2370      	movs	r3, #112	; 0x70
 8001ff0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ffe:	f107 030c 	add.w	r3, r7, #12
 8002002:	4619      	mov	r1, r3
 8002004:	4804      	ldr	r0, [pc, #16]	; (8002018 <MX_GPIO_Init+0xd8>)
 8002006:	f000 fadb 	bl	80025c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800200a:	bf00      	nop
 800200c:	3720      	adds	r7, #32
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40021000 	.word	0x40021000
 8002018:	48000400 	.word	0x48000400

0800201c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800202c:	d101      	bne.n	8002032 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800202e:	f000 f9a1 	bl	8002374 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002032:	bf00      	nop
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800203a:	b480      	push	{r7}
 800203c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800203e:	b672      	cpsid	i
}
 8002040:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002042:	e7fe      	b.n	8002042 <Error_Handler+0x8>

08002044 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800204a:	4b0f      	ldr	r3, [pc, #60]	; (8002088 <HAL_MspInit+0x44>)
 800204c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800204e:	4a0e      	ldr	r2, [pc, #56]	; (8002088 <HAL_MspInit+0x44>)
 8002050:	f043 0301 	orr.w	r3, r3, #1
 8002054:	6613      	str	r3, [r2, #96]	; 0x60
 8002056:	4b0c      	ldr	r3, [pc, #48]	; (8002088 <HAL_MspInit+0x44>)
 8002058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	607b      	str	r3, [r7, #4]
 8002060:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002062:	4b09      	ldr	r3, [pc, #36]	; (8002088 <HAL_MspInit+0x44>)
 8002064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002066:	4a08      	ldr	r2, [pc, #32]	; (8002088 <HAL_MspInit+0x44>)
 8002068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800206c:	6593      	str	r3, [r2, #88]	; 0x58
 800206e:	4b06      	ldr	r3, [pc, #24]	; (8002088 <HAL_MspInit+0x44>)
 8002070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002076:	603b      	str	r3, [r7, #0]
 8002078:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	40021000 	.word	0x40021000

0800208c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b098      	sub	sp, #96	; 0x60
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002094:	f107 030c 	add.w	r3, r7, #12
 8002098:	2254      	movs	r2, #84	; 0x54
 800209a:	2100      	movs	r1, #0
 800209c:	4618      	mov	r0, r3
 800209e:	f002 ff4b 	bl	8004f38 <memset>
  if(hrtc->Instance==RTC)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a0f      	ldr	r2, [pc, #60]	; (80020e4 <HAL_RTC_MspInit+0x58>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d117      	bne.n	80020dc <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80020ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020b0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80020b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020b6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020b8:	f107 030c 	add.w	r3, r7, #12
 80020bc:	4618      	mov	r0, r3
 80020be:	f001 fac9 	bl	8003654 <HAL_RCCEx_PeriphCLKConfig>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80020c8:	f7ff ffb7 	bl	800203a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80020cc:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <HAL_RTC_MspInit+0x5c>)
 80020ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d2:	4a05      	ldr	r2, [pc, #20]	; (80020e8 <HAL_RTC_MspInit+0x5c>)
 80020d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80020dc:	bf00      	nop
 80020de:	3760      	adds	r7, #96	; 0x60
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40002800 	.word	0x40002800
 80020e8:	40021000 	.word	0x40021000

080020ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b08a      	sub	sp, #40	; 0x28
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f4:	f107 0314 	add.w	r3, r7, #20
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	605a      	str	r2, [r3, #4]
 80020fe:	609a      	str	r2, [r3, #8]
 8002100:	60da      	str	r2, [r3, #12]
 8002102:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a17      	ldr	r2, [pc, #92]	; (8002168 <HAL_SPI_MspInit+0x7c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d128      	bne.n	8002160 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800210e:	4b17      	ldr	r3, [pc, #92]	; (800216c <HAL_SPI_MspInit+0x80>)
 8002110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002112:	4a16      	ldr	r2, [pc, #88]	; (800216c <HAL_SPI_MspInit+0x80>)
 8002114:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002118:	6613      	str	r3, [r2, #96]	; 0x60
 800211a:	4b14      	ldr	r3, [pc, #80]	; (800216c <HAL_SPI_MspInit+0x80>)
 800211c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800211e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002122:	613b      	str	r3, [r7, #16]
 8002124:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002126:	4b11      	ldr	r3, [pc, #68]	; (800216c <HAL_SPI_MspInit+0x80>)
 8002128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800212a:	4a10      	ldr	r2, [pc, #64]	; (800216c <HAL_SPI_MspInit+0x80>)
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002132:	4b0e      	ldr	r3, [pc, #56]	; (800216c <HAL_SPI_MspInit+0x80>)
 8002134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800213e:	23e0      	movs	r3, #224	; 0xe0
 8002140:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002142:	2302      	movs	r3, #2
 8002144:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002146:	2300      	movs	r3, #0
 8002148:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800214a:	2303      	movs	r3, #3
 800214c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800214e:	2305      	movs	r3, #5
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002152:	f107 0314 	add.w	r3, r7, #20
 8002156:	4619      	mov	r1, r3
 8002158:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800215c:	f000 fa30 	bl	80025c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002160:	bf00      	nop
 8002162:	3728      	adds	r7, #40	; 0x28
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40013000 	.word	0x40013000
 800216c:	40021000 	.word	0x40021000

08002170 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08e      	sub	sp, #56	; 0x38
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002178:	2300      	movs	r3, #0
 800217a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800217e:	4b34      	ldr	r3, [pc, #208]	; (8002250 <HAL_InitTick+0xe0>)
 8002180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002182:	4a33      	ldr	r2, [pc, #204]	; (8002250 <HAL_InitTick+0xe0>)
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	6593      	str	r3, [r2, #88]	; 0x58
 800218a:	4b31      	ldr	r3, [pc, #196]	; (8002250 <HAL_InitTick+0xe0>)
 800218c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002196:	f107 0210 	add.w	r2, r7, #16
 800219a:	f107 0314 	add.w	r3, r7, #20
 800219e:	4611      	mov	r1, r2
 80021a0:	4618      	mov	r0, r3
 80021a2:	f001 f9c5 	bl	8003530 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80021a6:	6a3b      	ldr	r3, [r7, #32]
 80021a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80021aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d103      	bne.n	80021b8 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80021b0:	f001 f9a8 	bl	8003504 <HAL_RCC_GetPCLK1Freq>
 80021b4:	6378      	str	r0, [r7, #52]	; 0x34
 80021b6:	e004      	b.n	80021c2 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80021b8:	f001 f9a4 	bl	8003504 <HAL_RCC_GetPCLK1Freq>
 80021bc:	4603      	mov	r3, r0
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021c4:	4a23      	ldr	r2, [pc, #140]	; (8002254 <HAL_InitTick+0xe4>)
 80021c6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ca:	0c9b      	lsrs	r3, r3, #18
 80021cc:	3b01      	subs	r3, #1
 80021ce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80021d0:	4b21      	ldr	r3, [pc, #132]	; (8002258 <HAL_InitTick+0xe8>)
 80021d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021d6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80021d8:	4b1f      	ldr	r3, [pc, #124]	; (8002258 <HAL_InitTick+0xe8>)
 80021da:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021de:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80021e0:	4a1d      	ldr	r2, [pc, #116]	; (8002258 <HAL_InitTick+0xe8>)
 80021e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e4:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80021e6:	4b1c      	ldr	r3, [pc, #112]	; (8002258 <HAL_InitTick+0xe8>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ec:	4b1a      	ldr	r3, [pc, #104]	; (8002258 <HAL_InitTick+0xe8>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021f2:	4b19      	ldr	r3, [pc, #100]	; (8002258 <HAL_InitTick+0xe8>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80021f8:	4817      	ldr	r0, [pc, #92]	; (8002258 <HAL_InitTick+0xe8>)
 80021fa:	f002 fbdf 	bl	80049bc <HAL_TIM_Base_Init>
 80021fe:	4603      	mov	r3, r0
 8002200:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002204:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002208:	2b00      	cmp	r3, #0
 800220a:	d11b      	bne.n	8002244 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800220c:	4812      	ldr	r0, [pc, #72]	; (8002258 <HAL_InitTick+0xe8>)
 800220e:	f002 fc37 	bl	8004a80 <HAL_TIM_Base_Start_IT>
 8002212:	4603      	mov	r3, r0
 8002214:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002218:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800221c:	2b00      	cmp	r3, #0
 800221e:	d111      	bne.n	8002244 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002220:	201c      	movs	r0, #28
 8002222:	f000 f9bf 	bl	80025a4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2b0f      	cmp	r3, #15
 800222a:	d808      	bhi.n	800223e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800222c:	2200      	movs	r2, #0
 800222e:	6879      	ldr	r1, [r7, #4]
 8002230:	201c      	movs	r0, #28
 8002232:	f000 f99b 	bl	800256c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002236:	4a09      	ldr	r2, [pc, #36]	; (800225c <HAL_InitTick+0xec>)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6013      	str	r3, [r2, #0]
 800223c:	e002      	b.n	8002244 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002244:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002248:	4618      	mov	r0, r3
 800224a:	3738      	adds	r7, #56	; 0x38
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40021000 	.word	0x40021000
 8002254:	431bde83 	.word	0x431bde83
 8002258:	20000118 	.word	0x20000118
 800225c:	2000006c 	.word	0x2000006c

08002260 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002264:	e7fe      	b.n	8002264 <NMI_Handler+0x4>

08002266 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002266:	b480      	push	{r7}
 8002268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800226a:	e7fe      	b.n	800226a <HardFault_Handler+0x4>

0800226c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002270:	e7fe      	b.n	8002270 <MemManage_Handler+0x4>

08002272 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002272:	b480      	push	{r7}
 8002274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002276:	e7fe      	b.n	8002276 <BusFault_Handler+0x4>

08002278 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800227c:	e7fe      	b.n	800227c <UsageFault_Handler+0x4>

0800227e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800227e:	b480      	push	{r7}
 8002280:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002282:	bf00      	nop
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002290:	bf00      	nop
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800229a:	b480      	push	{r7}
 800229c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800229e:	bf00      	nop
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022ac:	bf00      	nop
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
	...

080022b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80022bc:	4802      	ldr	r0, [pc, #8]	; (80022c8 <TIM2_IRQHandler+0x10>)
 80022be:	f002 fc33 	bl	8004b28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80022c2:	bf00      	nop
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	20000118 	.word	0x20000118

080022cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80022d0:	4b06      	ldr	r3, [pc, #24]	; (80022ec <SystemInit+0x20>)
 80022d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d6:	4a05      	ldr	r2, [pc, #20]	; (80022ec <SystemInit+0x20>)
 80022d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80022e0:	bf00      	nop
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	e000ed00 	.word	0xe000ed00

080022f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80022f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002328 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022f4:	f7ff ffea 	bl	80022cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022f8:	480c      	ldr	r0, [pc, #48]	; (800232c <LoopForever+0x6>)
  ldr r1, =_edata
 80022fa:	490d      	ldr	r1, [pc, #52]	; (8002330 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022fc:	4a0d      	ldr	r2, [pc, #52]	; (8002334 <LoopForever+0xe>)
  movs r3, #0
 80022fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002300:	e002      	b.n	8002308 <LoopCopyDataInit>

08002302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002306:	3304      	adds	r3, #4

08002308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800230a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800230c:	d3f9      	bcc.n	8002302 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800230e:	4a0a      	ldr	r2, [pc, #40]	; (8002338 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002310:	4c0a      	ldr	r4, [pc, #40]	; (800233c <LoopForever+0x16>)
  movs r3, #0
 8002312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002314:	e001      	b.n	800231a <LoopFillZerobss>

08002316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002318:	3204      	adds	r2, #4

0800231a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800231a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800231c:	d3fb      	bcc.n	8002316 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800231e:	f002 fe13 	bl	8004f48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002322:	f7ff fc31 	bl	8001b88 <main>

08002326 <LoopForever>:

LoopForever:
    b LoopForever
 8002326:	e7fe      	b.n	8002326 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002328:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800232c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002330:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002334:	08005588 	.word	0x08005588
  ldr r2, =_sbss
 8002338:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800233c:	20000168 	.word	0x20000168

08002340 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002340:	e7fe      	b.n	8002340 <ADC1_IRQHandler>

08002342 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b082      	sub	sp, #8
 8002346:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002348:	2300      	movs	r3, #0
 800234a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800234c:	2003      	movs	r0, #3
 800234e:	f000 f902 	bl	8002556 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002352:	200f      	movs	r0, #15
 8002354:	f7ff ff0c 	bl	8002170 <HAL_InitTick>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d002      	beq.n	8002364 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	71fb      	strb	r3, [r7, #7]
 8002362:	e001      	b.n	8002368 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002364:	f7ff fe6e 	bl	8002044 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002368:	79fb      	ldrb	r3, [r7, #7]
}
 800236a:	4618      	mov	r0, r3
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
	...

08002374 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002378:	4b06      	ldr	r3, [pc, #24]	; (8002394 <HAL_IncTick+0x20>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	461a      	mov	r2, r3
 800237e:	4b06      	ldr	r3, [pc, #24]	; (8002398 <HAL_IncTick+0x24>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4413      	add	r3, r2
 8002384:	4a04      	ldr	r2, [pc, #16]	; (8002398 <HAL_IncTick+0x24>)
 8002386:	6013      	str	r3, [r2, #0]
}
 8002388:	bf00      	nop
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	20000070 	.word	0x20000070
 8002398:	20000164 	.word	0x20000164

0800239c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  return uwTick;
 80023a0:	4b03      	ldr	r3, [pc, #12]	; (80023b0 <HAL_GetTick+0x14>)
 80023a2:	681b      	ldr	r3, [r3, #0]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	20000164 	.word	0x20000164

080023b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023bc:	f7ff ffee 	bl	800239c <HAL_GetTick>
 80023c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023cc:	d005      	beq.n	80023da <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80023ce:	4b0a      	ldr	r3, [pc, #40]	; (80023f8 <HAL_Delay+0x44>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	461a      	mov	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	4413      	add	r3, r2
 80023d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023da:	bf00      	nop
 80023dc:	f7ff ffde 	bl	800239c <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d8f7      	bhi.n	80023dc <HAL_Delay+0x28>
  {
  }
}
 80023ec:	bf00      	nop
 80023ee:	bf00      	nop
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	20000070 	.word	0x20000070

080023fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800240c:	4b0c      	ldr	r3, [pc, #48]	; (8002440 <__NVIC_SetPriorityGrouping+0x44>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002412:	68ba      	ldr	r2, [r7, #8]
 8002414:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002418:	4013      	ands	r3, r2
 800241a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002424:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800242c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800242e:	4a04      	ldr	r2, [pc, #16]	; (8002440 <__NVIC_SetPriorityGrouping+0x44>)
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	60d3      	str	r3, [r2, #12]
}
 8002434:	bf00      	nop
 8002436:	3714      	adds	r7, #20
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	e000ed00 	.word	0xe000ed00

08002444 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002448:	4b04      	ldr	r3, [pc, #16]	; (800245c <__NVIC_GetPriorityGrouping+0x18>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	0a1b      	lsrs	r3, r3, #8
 800244e:	f003 0307 	and.w	r3, r3, #7
}
 8002452:	4618      	mov	r0, r3
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	e000ed00 	.word	0xe000ed00

08002460 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800246a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246e:	2b00      	cmp	r3, #0
 8002470:	db0b      	blt.n	800248a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002472:	79fb      	ldrb	r3, [r7, #7]
 8002474:	f003 021f 	and.w	r2, r3, #31
 8002478:	4907      	ldr	r1, [pc, #28]	; (8002498 <__NVIC_EnableIRQ+0x38>)
 800247a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247e:	095b      	lsrs	r3, r3, #5
 8002480:	2001      	movs	r0, #1
 8002482:	fa00 f202 	lsl.w	r2, r0, r2
 8002486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800248a:	bf00      	nop
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	e000e100 	.word	0xe000e100

0800249c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	6039      	str	r1, [r7, #0]
 80024a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	db0a      	blt.n	80024c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	490c      	ldr	r1, [pc, #48]	; (80024e8 <__NVIC_SetPriority+0x4c>)
 80024b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ba:	0112      	lsls	r2, r2, #4
 80024bc:	b2d2      	uxtb	r2, r2
 80024be:	440b      	add	r3, r1
 80024c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024c4:	e00a      	b.n	80024dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	b2da      	uxtb	r2, r3
 80024ca:	4908      	ldr	r1, [pc, #32]	; (80024ec <__NVIC_SetPriority+0x50>)
 80024cc:	79fb      	ldrb	r3, [r7, #7]
 80024ce:	f003 030f 	and.w	r3, r3, #15
 80024d2:	3b04      	subs	r3, #4
 80024d4:	0112      	lsls	r2, r2, #4
 80024d6:	b2d2      	uxtb	r2, r2
 80024d8:	440b      	add	r3, r1
 80024da:	761a      	strb	r2, [r3, #24]
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	e000e100 	.word	0xe000e100
 80024ec:	e000ed00 	.word	0xe000ed00

080024f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b089      	sub	sp, #36	; 0x24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	f1c3 0307 	rsb	r3, r3, #7
 800250a:	2b04      	cmp	r3, #4
 800250c:	bf28      	it	cs
 800250e:	2304      	movcs	r3, #4
 8002510:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	3304      	adds	r3, #4
 8002516:	2b06      	cmp	r3, #6
 8002518:	d902      	bls.n	8002520 <NVIC_EncodePriority+0x30>
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	3b03      	subs	r3, #3
 800251e:	e000      	b.n	8002522 <NVIC_EncodePriority+0x32>
 8002520:	2300      	movs	r3, #0
 8002522:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002524:	f04f 32ff 	mov.w	r2, #4294967295
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	43da      	mvns	r2, r3
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	401a      	ands	r2, r3
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002538:	f04f 31ff 	mov.w	r1, #4294967295
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	fa01 f303 	lsl.w	r3, r1, r3
 8002542:	43d9      	mvns	r1, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002548:	4313      	orrs	r3, r2
         );
}
 800254a:	4618      	mov	r0, r3
 800254c:	3724      	adds	r7, #36	; 0x24
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b082      	sub	sp, #8
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f7ff ff4c 	bl	80023fc <__NVIC_SetPriorityGrouping>
}
 8002564:	bf00      	nop
 8002566:	3708      	adds	r7, #8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	4603      	mov	r3, r0
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
 8002578:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800257a:	2300      	movs	r3, #0
 800257c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800257e:	f7ff ff61 	bl	8002444 <__NVIC_GetPriorityGrouping>
 8002582:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	68b9      	ldr	r1, [r7, #8]
 8002588:	6978      	ldr	r0, [r7, #20]
 800258a:	f7ff ffb1 	bl	80024f0 <NVIC_EncodePriority>
 800258e:	4602      	mov	r2, r0
 8002590:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002594:	4611      	mov	r1, r2
 8002596:	4618      	mov	r0, r3
 8002598:	f7ff ff80 	bl	800249c <__NVIC_SetPriority>
}
 800259c:	bf00      	nop
 800259e:	3718      	adds	r7, #24
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff ff54 	bl	8002460 <__NVIC_EnableIRQ>
}
 80025b8:	bf00      	nop
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b087      	sub	sp, #28
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025ca:	2300      	movs	r3, #0
 80025cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025ce:	e148      	b.n	8002862 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	2101      	movs	r1, #1
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	fa01 f303 	lsl.w	r3, r1, r3
 80025dc:	4013      	ands	r3, r2
 80025de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f000 813a 	beq.w	800285c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f003 0303 	and.w	r3, r3, #3
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d005      	beq.n	8002600 <HAL_GPIO_Init+0x40>
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f003 0303 	and.w	r3, r3, #3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d130      	bne.n	8002662 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	2203      	movs	r2, #3
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	43db      	mvns	r3, r3
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	4013      	ands	r3, r2
 8002616:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	68da      	ldr	r2, [r3, #12]
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	4313      	orrs	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002636:	2201      	movs	r2, #1
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	43db      	mvns	r3, r3
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	4013      	ands	r3, r2
 8002644:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	091b      	lsrs	r3, r3, #4
 800264c:	f003 0201 	and.w	r2, r3, #1
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	4313      	orrs	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f003 0303 	and.w	r3, r3, #3
 800266a:	2b03      	cmp	r3, #3
 800266c:	d017      	beq.n	800269e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	2203      	movs	r2, #3
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	43db      	mvns	r3, r3
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	4013      	ands	r3, r2
 8002684:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	689a      	ldr	r2, [r3, #8]
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	4313      	orrs	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d123      	bne.n	80026f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	08da      	lsrs	r2, r3, #3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	3208      	adds	r2, #8
 80026b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	f003 0307 	and.w	r3, r3, #7
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	220f      	movs	r2, #15
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	43db      	mvns	r3, r3
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	4013      	ands	r3, r2
 80026cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	691a      	ldr	r2, [r3, #16]
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	08da      	lsrs	r2, r3, #3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	3208      	adds	r2, #8
 80026ec:	6939      	ldr	r1, [r7, #16]
 80026ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	2203      	movs	r2, #3
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	43db      	mvns	r3, r3
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	4013      	ands	r3, r2
 8002708:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f003 0203 	and.w	r2, r3, #3
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	4313      	orrs	r3, r2
 800271e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800272e:	2b00      	cmp	r3, #0
 8002730:	f000 8094 	beq.w	800285c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002734:	4b52      	ldr	r3, [pc, #328]	; (8002880 <HAL_GPIO_Init+0x2c0>)
 8002736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002738:	4a51      	ldr	r2, [pc, #324]	; (8002880 <HAL_GPIO_Init+0x2c0>)
 800273a:	f043 0301 	orr.w	r3, r3, #1
 800273e:	6613      	str	r3, [r2, #96]	; 0x60
 8002740:	4b4f      	ldr	r3, [pc, #316]	; (8002880 <HAL_GPIO_Init+0x2c0>)
 8002742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	60bb      	str	r3, [r7, #8]
 800274a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800274c:	4a4d      	ldr	r2, [pc, #308]	; (8002884 <HAL_GPIO_Init+0x2c4>)
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	089b      	lsrs	r3, r3, #2
 8002752:	3302      	adds	r3, #2
 8002754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002758:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	f003 0303 	and.w	r3, r3, #3
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	220f      	movs	r2, #15
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	43db      	mvns	r3, r3
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	4013      	ands	r3, r2
 800276e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002776:	d00d      	beq.n	8002794 <HAL_GPIO_Init+0x1d4>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4a43      	ldr	r2, [pc, #268]	; (8002888 <HAL_GPIO_Init+0x2c8>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d007      	beq.n	8002790 <HAL_GPIO_Init+0x1d0>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a42      	ldr	r2, [pc, #264]	; (800288c <HAL_GPIO_Init+0x2cc>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d101      	bne.n	800278c <HAL_GPIO_Init+0x1cc>
 8002788:	2302      	movs	r3, #2
 800278a:	e004      	b.n	8002796 <HAL_GPIO_Init+0x1d6>
 800278c:	2307      	movs	r3, #7
 800278e:	e002      	b.n	8002796 <HAL_GPIO_Init+0x1d6>
 8002790:	2301      	movs	r3, #1
 8002792:	e000      	b.n	8002796 <HAL_GPIO_Init+0x1d6>
 8002794:	2300      	movs	r3, #0
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	f002 0203 	and.w	r2, r2, #3
 800279c:	0092      	lsls	r2, r2, #2
 800279e:	4093      	lsls	r3, r2
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80027a6:	4937      	ldr	r1, [pc, #220]	; (8002884 <HAL_GPIO_Init+0x2c4>)
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	089b      	lsrs	r3, r3, #2
 80027ac:	3302      	adds	r3, #2
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027b4:	4b36      	ldr	r3, [pc, #216]	; (8002890 <HAL_GPIO_Init+0x2d0>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	43db      	mvns	r3, r3
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	4013      	ands	r3, r2
 80027c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d003      	beq.n	80027d8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027d8:	4a2d      	ldr	r2, [pc, #180]	; (8002890 <HAL_GPIO_Init+0x2d0>)
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80027de:	4b2c      	ldr	r3, [pc, #176]	; (8002890 <HAL_GPIO_Init+0x2d0>)
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	43db      	mvns	r3, r3
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	4013      	ands	r3, r2
 80027ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4313      	orrs	r3, r2
 8002800:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002802:	4a23      	ldr	r2, [pc, #140]	; (8002890 <HAL_GPIO_Init+0x2d0>)
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002808:	4b21      	ldr	r3, [pc, #132]	; (8002890 <HAL_GPIO_Init+0x2d0>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	43db      	mvns	r3, r3
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	4013      	ands	r3, r2
 8002816:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d003      	beq.n	800282c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	4313      	orrs	r3, r2
 800282a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800282c:	4a18      	ldr	r2, [pc, #96]	; (8002890 <HAL_GPIO_Init+0x2d0>)
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002832:	4b17      	ldr	r3, [pc, #92]	; (8002890 <HAL_GPIO_Init+0x2d0>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	43db      	mvns	r3, r3
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	4013      	ands	r3, r2
 8002840:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	4313      	orrs	r3, r2
 8002854:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002856:	4a0e      	ldr	r2, [pc, #56]	; (8002890 <HAL_GPIO_Init+0x2d0>)
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	3301      	adds	r3, #1
 8002860:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	fa22 f303 	lsr.w	r3, r2, r3
 800286c:	2b00      	cmp	r3, #0
 800286e:	f47f aeaf 	bne.w	80025d0 <HAL_GPIO_Init+0x10>
  }
}
 8002872:	bf00      	nop
 8002874:	bf00      	nop
 8002876:	371c      	adds	r7, #28
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr
 8002880:	40021000 	.word	0x40021000
 8002884:	40010000 	.word	0x40010000
 8002888:	48000400 	.word	0x48000400
 800288c:	48000800 	.word	0x48000800
 8002890:	40010400 	.word	0x40010400

08002894 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	460b      	mov	r3, r1
 800289e:	807b      	strh	r3, [r7, #2]
 80028a0:	4613      	mov	r3, r2
 80028a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028a4:	787b      	ldrb	r3, [r7, #1]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028aa:	887a      	ldrh	r2, [r7, #2]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028b0:	e002      	b.n	80028b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028b2:	887a      	ldrh	r2, [r7, #2]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028c8:	4b05      	ldr	r3, [pc, #20]	; (80028e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a04      	ldr	r2, [pc, #16]	; (80028e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80028ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028d2:	6013      	str	r3, [r2, #0]
}
 80028d4:	bf00      	nop
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	40007000 	.word	0x40007000

080028e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80028e8:	4b04      	ldr	r3, [pc, #16]	; (80028fc <HAL_PWREx_GetVoltageRange+0x18>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	40007000 	.word	0x40007000

08002900 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800290e:	d130      	bne.n	8002972 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002910:	4b23      	ldr	r3, [pc, #140]	; (80029a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800291c:	d038      	beq.n	8002990 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800291e:	4b20      	ldr	r3, [pc, #128]	; (80029a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002926:	4a1e      	ldr	r2, [pc, #120]	; (80029a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002928:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800292c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800292e:	4b1d      	ldr	r3, [pc, #116]	; (80029a4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2232      	movs	r2, #50	; 0x32
 8002934:	fb02 f303 	mul.w	r3, r2, r3
 8002938:	4a1b      	ldr	r2, [pc, #108]	; (80029a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800293a:	fba2 2303 	umull	r2, r3, r2, r3
 800293e:	0c9b      	lsrs	r3, r3, #18
 8002940:	3301      	adds	r3, #1
 8002942:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002944:	e002      	b.n	800294c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	3b01      	subs	r3, #1
 800294a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800294c:	4b14      	ldr	r3, [pc, #80]	; (80029a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002954:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002958:	d102      	bne.n	8002960 <HAL_PWREx_ControlVoltageScaling+0x60>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1f2      	bne.n	8002946 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002960:	4b0f      	ldr	r3, [pc, #60]	; (80029a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800296c:	d110      	bne.n	8002990 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e00f      	b.n	8002992 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002972:	4b0b      	ldr	r3, [pc, #44]	; (80029a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800297a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800297e:	d007      	beq.n	8002990 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002980:	4b07      	ldr	r3, [pc, #28]	; (80029a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002988:	4a05      	ldr	r2, [pc, #20]	; (80029a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800298a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800298e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3714      	adds	r7, #20
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	40007000 	.word	0x40007000
 80029a4:	20000068 	.word	0x20000068
 80029a8:	431bde83 	.word	0x431bde83

080029ac <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b088      	sub	sp, #32
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d102      	bne.n	80029c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	f000 bc02 	b.w	80031c4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029c0:	4b96      	ldr	r3, [pc, #600]	; (8002c1c <HAL_RCC_OscConfig+0x270>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f003 030c 	and.w	r3, r3, #12
 80029c8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029ca:	4b94      	ldr	r3, [pc, #592]	; (8002c1c <HAL_RCC_OscConfig+0x270>)
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	f003 0303 	and.w	r3, r3, #3
 80029d2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0310 	and.w	r3, r3, #16
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f000 80e4 	beq.w	8002baa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d007      	beq.n	80029f8 <HAL_RCC_OscConfig+0x4c>
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	2b0c      	cmp	r3, #12
 80029ec:	f040 808b 	bne.w	8002b06 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	f040 8087 	bne.w	8002b06 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029f8:	4b88      	ldr	r3, [pc, #544]	; (8002c1c <HAL_RCC_OscConfig+0x270>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d005      	beq.n	8002a10 <HAL_RCC_OscConfig+0x64>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d101      	bne.n	8002a10 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e3d9      	b.n	80031c4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a1a      	ldr	r2, [r3, #32]
 8002a14:	4b81      	ldr	r3, [pc, #516]	; (8002c1c <HAL_RCC_OscConfig+0x270>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0308 	and.w	r3, r3, #8
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d004      	beq.n	8002a2a <HAL_RCC_OscConfig+0x7e>
 8002a20:	4b7e      	ldr	r3, [pc, #504]	; (8002c1c <HAL_RCC_OscConfig+0x270>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a28:	e005      	b.n	8002a36 <HAL_RCC_OscConfig+0x8a>
 8002a2a:	4b7c      	ldr	r3, [pc, #496]	; (8002c1c <HAL_RCC_OscConfig+0x270>)
 8002a2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a30:	091b      	lsrs	r3, r3, #4
 8002a32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d223      	bcs.n	8002a82 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 fda8 	bl	8003594 <RCC_SetFlashLatencyFromMSIRange>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e3ba      	b.n	80031c4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a4e:	4b73      	ldr	r3, [pc, #460]	; (8002c1c <HAL_RCC_OscConfig+0x270>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a72      	ldr	r2, [pc, #456]	; (8002c1c <HAL_RCC_OscConfig+0x270>)
 8002a54:	f043 0308 	orr.w	r3, r3, #8
 8002a58:	6013      	str	r3, [r2, #0]
 8002a5a:	4b70      	ldr	r3, [pc, #448]	; (8002c1c <HAL_RCC_OscConfig+0x270>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	496d      	ldr	r1, [pc, #436]	; (8002c1c <HAL_RCC_OscConfig+0x270>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a6c:	4b6b      	ldr	r3, [pc, #428]	; (8002c1c <HAL_RCC_OscConfig+0x270>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	69db      	ldr	r3, [r3, #28]
 8002a78:	021b      	lsls	r3, r3, #8
 8002a7a:	4968      	ldr	r1, [pc, #416]	; (8002c1c <HAL_RCC_OscConfig+0x270>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	604b      	str	r3, [r1, #4]
 8002a80:	e025      	b.n	8002ace <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a82:	4b66      	ldr	r3, [pc, #408]	; (8002c1c <HAL_RCC_OscConfig+0x270>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a65      	ldr	r2, [pc, #404]	; (8002c1c <HAL_RCC_OscConfig+0x270>)
 8002a88:	f043 0308 	orr.w	r3, r3, #8
 8002a8c:	6013      	str	r3, [r2, #0]
 8002a8e:	4b63      	ldr	r3, [pc, #396]	; (8002c1c <HAL_RCC_OscConfig+0x270>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	4960      	ldr	r1, [pc, #384]	; (8002c1c <HAL_RCC_OscConfig+0x270>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002aa0:	4b5e      	ldr	r3, [pc, #376]	; (8002c1c <HAL_RCC_OscConfig+0x270>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	69db      	ldr	r3, [r3, #28]
 8002aac:	021b      	lsls	r3, r3, #8
 8002aae:	495b      	ldr	r1, [pc, #364]	; (8002c1c <HAL_RCC_OscConfig+0x270>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d109      	bne.n	8002ace <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f000 fd68 	bl	8003594 <RCC_SetFlashLatencyFromMSIRange>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e37a      	b.n	80031c4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ace:	f000 fc81 	bl	80033d4 <HAL_RCC_GetSysClockFreq>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	4b51      	ldr	r3, [pc, #324]	; (8002c1c <HAL_RCC_OscConfig+0x270>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	091b      	lsrs	r3, r3, #4
 8002ada:	f003 030f 	and.w	r3, r3, #15
 8002ade:	4950      	ldr	r1, [pc, #320]	; (8002c20 <HAL_RCC_OscConfig+0x274>)
 8002ae0:	5ccb      	ldrb	r3, [r1, r3]
 8002ae2:	f003 031f 	and.w	r3, r3, #31
 8002ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8002aea:	4a4e      	ldr	r2, [pc, #312]	; (8002c24 <HAL_RCC_OscConfig+0x278>)
 8002aec:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002aee:	4b4e      	ldr	r3, [pc, #312]	; (8002c28 <HAL_RCC_OscConfig+0x27c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff fb3c 	bl	8002170 <HAL_InitTick>
 8002af8:	4603      	mov	r3, r0
 8002afa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002afc:	7bfb      	ldrb	r3, [r7, #15]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d052      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002b02:	7bfb      	ldrb	r3, [r7, #15]
 8002b04:	e35e      	b.n	80031c4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d032      	beq.n	8002b74 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b0e:	4b43      	ldr	r3, [pc, #268]	; (8002c1c <HAL_RCC_OscConfig+0x270>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a42      	ldr	r2, [pc, #264]	; (8002c1c <HAL_RCC_OscConfig+0x270>)
 8002b14:	f043 0301 	orr.w	r3, r3, #1
 8002b18:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b1a:	f7ff fc3f 	bl	800239c <HAL_GetTick>
 8002b1e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b22:	f7ff fc3b 	bl	800239c <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e347      	b.n	80031c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b34:	4b39      	ldr	r3, [pc, #228]	; (8002c1c <HAL_RCC_OscConfig+0x270>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0f0      	beq.n	8002b22 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b40:	4b36      	ldr	r3, [pc, #216]	; (8002c1c <HAL_RCC_OscConfig+0x270>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a35      	ldr	r2, [pc, #212]	; (8002c1c <HAL_RCC_OscConfig+0x270>)
 8002b46:	f043 0308 	orr.w	r3, r3, #8
 8002b4a:	6013      	str	r3, [r2, #0]
 8002b4c:	4b33      	ldr	r3, [pc, #204]	; (8002c1c <HAL_RCC_OscConfig+0x270>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	4930      	ldr	r1, [pc, #192]	; (8002c1c <HAL_RCC_OscConfig+0x270>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b5e:	4b2f      	ldr	r3, [pc, #188]	; (8002c1c <HAL_RCC_OscConfig+0x270>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	021b      	lsls	r3, r3, #8
 8002b6c:	492b      	ldr	r1, [pc, #172]	; (8002c1c <HAL_RCC_OscConfig+0x270>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	604b      	str	r3, [r1, #4]
 8002b72:	e01a      	b.n	8002baa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b74:	4b29      	ldr	r3, [pc, #164]	; (8002c1c <HAL_RCC_OscConfig+0x270>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a28      	ldr	r2, [pc, #160]	; (8002c1c <HAL_RCC_OscConfig+0x270>)
 8002b7a:	f023 0301 	bic.w	r3, r3, #1
 8002b7e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b80:	f7ff fc0c 	bl	800239c <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b88:	f7ff fc08 	bl	800239c <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e314      	b.n	80031c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b9a:	4b20      	ldr	r3, [pc, #128]	; (8002c1c <HAL_RCC_OscConfig+0x270>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1f0      	bne.n	8002b88 <HAL_RCC_OscConfig+0x1dc>
 8002ba6:	e000      	b.n	8002baa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ba8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d073      	beq.n	8002c9e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	2b08      	cmp	r3, #8
 8002bba:	d005      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x21c>
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	2b0c      	cmp	r3, #12
 8002bc0:	d10e      	bne.n	8002be0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	2b03      	cmp	r3, #3
 8002bc6:	d10b      	bne.n	8002be0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bc8:	4b14      	ldr	r3, [pc, #80]	; (8002c1c <HAL_RCC_OscConfig+0x270>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d063      	beq.n	8002c9c <HAL_RCC_OscConfig+0x2f0>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d15f      	bne.n	8002c9c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e2f1      	b.n	80031c4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002be8:	d106      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x24c>
 8002bea:	4b0c      	ldr	r3, [pc, #48]	; (8002c1c <HAL_RCC_OscConfig+0x270>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a0b      	ldr	r2, [pc, #44]	; (8002c1c <HAL_RCC_OscConfig+0x270>)
 8002bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf4:	6013      	str	r3, [r2, #0]
 8002bf6:	e025      	b.n	8002c44 <HAL_RCC_OscConfig+0x298>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c00:	d114      	bne.n	8002c2c <HAL_RCC_OscConfig+0x280>
 8002c02:	4b06      	ldr	r3, [pc, #24]	; (8002c1c <HAL_RCC_OscConfig+0x270>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a05      	ldr	r2, [pc, #20]	; (8002c1c <HAL_RCC_OscConfig+0x270>)
 8002c08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c0c:	6013      	str	r3, [r2, #0]
 8002c0e:	4b03      	ldr	r3, [pc, #12]	; (8002c1c <HAL_RCC_OscConfig+0x270>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a02      	ldr	r2, [pc, #8]	; (8002c1c <HAL_RCC_OscConfig+0x270>)
 8002c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c18:	6013      	str	r3, [r2, #0]
 8002c1a:	e013      	b.n	8002c44 <HAL_RCC_OscConfig+0x298>
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	08005510 	.word	0x08005510
 8002c24:	20000068 	.word	0x20000068
 8002c28:	2000006c 	.word	0x2000006c
 8002c2c:	4ba0      	ldr	r3, [pc, #640]	; (8002eb0 <HAL_RCC_OscConfig+0x504>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a9f      	ldr	r2, [pc, #636]	; (8002eb0 <HAL_RCC_OscConfig+0x504>)
 8002c32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c36:	6013      	str	r3, [r2, #0]
 8002c38:	4b9d      	ldr	r3, [pc, #628]	; (8002eb0 <HAL_RCC_OscConfig+0x504>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a9c      	ldr	r2, [pc, #624]	; (8002eb0 <HAL_RCC_OscConfig+0x504>)
 8002c3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d013      	beq.n	8002c74 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4c:	f7ff fba6 	bl	800239c <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c54:	f7ff fba2 	bl	800239c <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b64      	cmp	r3, #100	; 0x64
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e2ae      	b.n	80031c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c66:	4b92      	ldr	r3, [pc, #584]	; (8002eb0 <HAL_RCC_OscConfig+0x504>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d0f0      	beq.n	8002c54 <HAL_RCC_OscConfig+0x2a8>
 8002c72:	e014      	b.n	8002c9e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c74:	f7ff fb92 	bl	800239c <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c7c:	f7ff fb8e 	bl	800239c <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b64      	cmp	r3, #100	; 0x64
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e29a      	b.n	80031c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c8e:	4b88      	ldr	r3, [pc, #544]	; (8002eb0 <HAL_RCC_OscConfig+0x504>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1f0      	bne.n	8002c7c <HAL_RCC_OscConfig+0x2d0>
 8002c9a:	e000      	b.n	8002c9e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d060      	beq.n	8002d6c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	2b04      	cmp	r3, #4
 8002cae:	d005      	beq.n	8002cbc <HAL_RCC_OscConfig+0x310>
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	2b0c      	cmp	r3, #12
 8002cb4:	d119      	bne.n	8002cea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d116      	bne.n	8002cea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cbc:	4b7c      	ldr	r3, [pc, #496]	; (8002eb0 <HAL_RCC_OscConfig+0x504>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d005      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x328>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d101      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e277      	b.n	80031c4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd4:	4b76      	ldr	r3, [pc, #472]	; (8002eb0 <HAL_RCC_OscConfig+0x504>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	061b      	lsls	r3, r3, #24
 8002ce2:	4973      	ldr	r1, [pc, #460]	; (8002eb0 <HAL_RCC_OscConfig+0x504>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ce8:	e040      	b.n	8002d6c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d023      	beq.n	8002d3a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cf2:	4b6f      	ldr	r3, [pc, #444]	; (8002eb0 <HAL_RCC_OscConfig+0x504>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a6e      	ldr	r2, [pc, #440]	; (8002eb0 <HAL_RCC_OscConfig+0x504>)
 8002cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfe:	f7ff fb4d 	bl	800239c <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d04:	e008      	b.n	8002d18 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d06:	f7ff fb49 	bl	800239c <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e255      	b.n	80031c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d18:	4b65      	ldr	r3, [pc, #404]	; (8002eb0 <HAL_RCC_OscConfig+0x504>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0f0      	beq.n	8002d06 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d24:	4b62      	ldr	r3, [pc, #392]	; (8002eb0 <HAL_RCC_OscConfig+0x504>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	061b      	lsls	r3, r3, #24
 8002d32:	495f      	ldr	r1, [pc, #380]	; (8002eb0 <HAL_RCC_OscConfig+0x504>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	604b      	str	r3, [r1, #4]
 8002d38:	e018      	b.n	8002d6c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d3a:	4b5d      	ldr	r3, [pc, #372]	; (8002eb0 <HAL_RCC_OscConfig+0x504>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a5c      	ldr	r2, [pc, #368]	; (8002eb0 <HAL_RCC_OscConfig+0x504>)
 8002d40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d46:	f7ff fb29 	bl	800239c <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d4e:	f7ff fb25 	bl	800239c <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e231      	b.n	80031c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d60:	4b53      	ldr	r3, [pc, #332]	; (8002eb0 <HAL_RCC_OscConfig+0x504>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1f0      	bne.n	8002d4e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0308 	and.w	r3, r3, #8
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d03c      	beq.n	8002df2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d01c      	beq.n	8002dba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d80:	4b4b      	ldr	r3, [pc, #300]	; (8002eb0 <HAL_RCC_OscConfig+0x504>)
 8002d82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d86:	4a4a      	ldr	r2, [pc, #296]	; (8002eb0 <HAL_RCC_OscConfig+0x504>)
 8002d88:	f043 0301 	orr.w	r3, r3, #1
 8002d8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d90:	f7ff fb04 	bl	800239c <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d98:	f7ff fb00 	bl	800239c <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e20c      	b.n	80031c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002daa:	4b41      	ldr	r3, [pc, #260]	; (8002eb0 <HAL_RCC_OscConfig+0x504>)
 8002dac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d0ef      	beq.n	8002d98 <HAL_RCC_OscConfig+0x3ec>
 8002db8:	e01b      	b.n	8002df2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dba:	4b3d      	ldr	r3, [pc, #244]	; (8002eb0 <HAL_RCC_OscConfig+0x504>)
 8002dbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dc0:	4a3b      	ldr	r2, [pc, #236]	; (8002eb0 <HAL_RCC_OscConfig+0x504>)
 8002dc2:	f023 0301 	bic.w	r3, r3, #1
 8002dc6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dca:	f7ff fae7 	bl	800239c <HAL_GetTick>
 8002dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dd0:	e008      	b.n	8002de4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dd2:	f7ff fae3 	bl	800239c <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e1ef      	b.n	80031c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002de4:	4b32      	ldr	r3, [pc, #200]	; (8002eb0 <HAL_RCC_OscConfig+0x504>)
 8002de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1ef      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0304 	and.w	r3, r3, #4
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f000 80a6 	beq.w	8002f4c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e00:	2300      	movs	r3, #0
 8002e02:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e04:	4b2a      	ldr	r3, [pc, #168]	; (8002eb0 <HAL_RCC_OscConfig+0x504>)
 8002e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10d      	bne.n	8002e2c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e10:	4b27      	ldr	r3, [pc, #156]	; (8002eb0 <HAL_RCC_OscConfig+0x504>)
 8002e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e14:	4a26      	ldr	r2, [pc, #152]	; (8002eb0 <HAL_RCC_OscConfig+0x504>)
 8002e16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e1a:	6593      	str	r3, [r2, #88]	; 0x58
 8002e1c:	4b24      	ldr	r3, [pc, #144]	; (8002eb0 <HAL_RCC_OscConfig+0x504>)
 8002e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e24:	60bb      	str	r3, [r7, #8]
 8002e26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e2c:	4b21      	ldr	r3, [pc, #132]	; (8002eb4 <HAL_RCC_OscConfig+0x508>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d118      	bne.n	8002e6a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e38:	4b1e      	ldr	r3, [pc, #120]	; (8002eb4 <HAL_RCC_OscConfig+0x508>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a1d      	ldr	r2, [pc, #116]	; (8002eb4 <HAL_RCC_OscConfig+0x508>)
 8002e3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e44:	f7ff faaa 	bl	800239c <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e4c:	f7ff faa6 	bl	800239c <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e1b2      	b.n	80031c4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e5e:	4b15      	ldr	r3, [pc, #84]	; (8002eb4 <HAL_RCC_OscConfig+0x508>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d0f0      	beq.n	8002e4c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d108      	bne.n	8002e84 <HAL_RCC_OscConfig+0x4d8>
 8002e72:	4b0f      	ldr	r3, [pc, #60]	; (8002eb0 <HAL_RCC_OscConfig+0x504>)
 8002e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e78:	4a0d      	ldr	r2, [pc, #52]	; (8002eb0 <HAL_RCC_OscConfig+0x504>)
 8002e7a:	f043 0301 	orr.w	r3, r3, #1
 8002e7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e82:	e029      	b.n	8002ed8 <HAL_RCC_OscConfig+0x52c>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	2b05      	cmp	r3, #5
 8002e8a:	d115      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x50c>
 8002e8c:	4b08      	ldr	r3, [pc, #32]	; (8002eb0 <HAL_RCC_OscConfig+0x504>)
 8002e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e92:	4a07      	ldr	r2, [pc, #28]	; (8002eb0 <HAL_RCC_OscConfig+0x504>)
 8002e94:	f043 0304 	orr.w	r3, r3, #4
 8002e98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e9c:	4b04      	ldr	r3, [pc, #16]	; (8002eb0 <HAL_RCC_OscConfig+0x504>)
 8002e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea2:	4a03      	ldr	r2, [pc, #12]	; (8002eb0 <HAL_RCC_OscConfig+0x504>)
 8002ea4:	f043 0301 	orr.w	r3, r3, #1
 8002ea8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002eac:	e014      	b.n	8002ed8 <HAL_RCC_OscConfig+0x52c>
 8002eae:	bf00      	nop
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	40007000 	.word	0x40007000
 8002eb8:	4b9a      	ldr	r3, [pc, #616]	; (8003124 <HAL_RCC_OscConfig+0x778>)
 8002eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ebe:	4a99      	ldr	r2, [pc, #612]	; (8003124 <HAL_RCC_OscConfig+0x778>)
 8002ec0:	f023 0301 	bic.w	r3, r3, #1
 8002ec4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ec8:	4b96      	ldr	r3, [pc, #600]	; (8003124 <HAL_RCC_OscConfig+0x778>)
 8002eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ece:	4a95      	ldr	r2, [pc, #596]	; (8003124 <HAL_RCC_OscConfig+0x778>)
 8002ed0:	f023 0304 	bic.w	r3, r3, #4
 8002ed4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d016      	beq.n	8002f0e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee0:	f7ff fa5c 	bl	800239c <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ee6:	e00a      	b.n	8002efe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ee8:	f7ff fa58 	bl	800239c <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e162      	b.n	80031c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002efe:	4b89      	ldr	r3, [pc, #548]	; (8003124 <HAL_RCC_OscConfig+0x778>)
 8002f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0ed      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x53c>
 8002f0c:	e015      	b.n	8002f3a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f0e:	f7ff fa45 	bl	800239c <HAL_GetTick>
 8002f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f14:	e00a      	b.n	8002f2c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f16:	f7ff fa41 	bl	800239c <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d901      	bls.n	8002f2c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e14b      	b.n	80031c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f2c:	4b7d      	ldr	r3, [pc, #500]	; (8003124 <HAL_RCC_OscConfig+0x778>)
 8002f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1ed      	bne.n	8002f16 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f3a:	7ffb      	ldrb	r3, [r7, #31]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d105      	bne.n	8002f4c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f40:	4b78      	ldr	r3, [pc, #480]	; (8003124 <HAL_RCC_OscConfig+0x778>)
 8002f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f44:	4a77      	ldr	r2, [pc, #476]	; (8003124 <HAL_RCC_OscConfig+0x778>)
 8002f46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f4a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0320 	and.w	r3, r3, #32
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d03c      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d01c      	beq.n	8002f9a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f60:	4b70      	ldr	r3, [pc, #448]	; (8003124 <HAL_RCC_OscConfig+0x778>)
 8002f62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f66:	4a6f      	ldr	r2, [pc, #444]	; (8003124 <HAL_RCC_OscConfig+0x778>)
 8002f68:	f043 0301 	orr.w	r3, r3, #1
 8002f6c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f70:	f7ff fa14 	bl	800239c <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f78:	f7ff fa10 	bl	800239c <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e11c      	b.n	80031c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f8a:	4b66      	ldr	r3, [pc, #408]	; (8003124 <HAL_RCC_OscConfig+0x778>)
 8002f8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0ef      	beq.n	8002f78 <HAL_RCC_OscConfig+0x5cc>
 8002f98:	e01b      	b.n	8002fd2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f9a:	4b62      	ldr	r3, [pc, #392]	; (8003124 <HAL_RCC_OscConfig+0x778>)
 8002f9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fa0:	4a60      	ldr	r2, [pc, #384]	; (8003124 <HAL_RCC_OscConfig+0x778>)
 8002fa2:	f023 0301 	bic.w	r3, r3, #1
 8002fa6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002faa:	f7ff f9f7 	bl	800239c <HAL_GetTick>
 8002fae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fb2:	f7ff f9f3 	bl	800239c <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e0ff      	b.n	80031c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fc4:	4b57      	ldr	r3, [pc, #348]	; (8003124 <HAL_RCC_OscConfig+0x778>)
 8002fc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1ef      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f000 80f3 	beq.w	80031c2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	f040 80c9 	bne.w	8003178 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002fe6:	4b4f      	ldr	r3, [pc, #316]	; (8003124 <HAL_RCC_OscConfig+0x778>)
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	f003 0203 	and.w	r2, r3, #3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d12c      	bne.n	8003054 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003004:	3b01      	subs	r3, #1
 8003006:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003008:	429a      	cmp	r2, r3
 800300a:	d123      	bne.n	8003054 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003016:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003018:	429a      	cmp	r2, r3
 800301a:	d11b      	bne.n	8003054 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003026:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003028:	429a      	cmp	r2, r3
 800302a:	d113      	bne.n	8003054 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003036:	085b      	lsrs	r3, r3, #1
 8003038:	3b01      	subs	r3, #1
 800303a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800303c:	429a      	cmp	r2, r3
 800303e:	d109      	bne.n	8003054 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	085b      	lsrs	r3, r3, #1
 800304c:	3b01      	subs	r3, #1
 800304e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003050:	429a      	cmp	r2, r3
 8003052:	d06b      	beq.n	800312c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	2b0c      	cmp	r3, #12
 8003058:	d062      	beq.n	8003120 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800305a:	4b32      	ldr	r3, [pc, #200]	; (8003124 <HAL_RCC_OscConfig+0x778>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e0ac      	b.n	80031c4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800306a:	4b2e      	ldr	r3, [pc, #184]	; (8003124 <HAL_RCC_OscConfig+0x778>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a2d      	ldr	r2, [pc, #180]	; (8003124 <HAL_RCC_OscConfig+0x778>)
 8003070:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003074:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003076:	f7ff f991 	bl	800239c <HAL_GetTick>
 800307a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800307c:	e008      	b.n	8003090 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800307e:	f7ff f98d 	bl	800239c <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	2b02      	cmp	r3, #2
 800308a:	d901      	bls.n	8003090 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e099      	b.n	80031c4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003090:	4b24      	ldr	r3, [pc, #144]	; (8003124 <HAL_RCC_OscConfig+0x778>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1f0      	bne.n	800307e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800309c:	4b21      	ldr	r3, [pc, #132]	; (8003124 <HAL_RCC_OscConfig+0x778>)
 800309e:	68da      	ldr	r2, [r3, #12]
 80030a0:	4b21      	ldr	r3, [pc, #132]	; (8003128 <HAL_RCC_OscConfig+0x77c>)
 80030a2:	4013      	ands	r3, r2
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80030ac:	3a01      	subs	r2, #1
 80030ae:	0112      	lsls	r2, r2, #4
 80030b0:	4311      	orrs	r1, r2
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030b6:	0212      	lsls	r2, r2, #8
 80030b8:	4311      	orrs	r1, r2
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80030be:	0852      	lsrs	r2, r2, #1
 80030c0:	3a01      	subs	r2, #1
 80030c2:	0552      	lsls	r2, r2, #21
 80030c4:	4311      	orrs	r1, r2
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80030ca:	0852      	lsrs	r2, r2, #1
 80030cc:	3a01      	subs	r2, #1
 80030ce:	0652      	lsls	r2, r2, #25
 80030d0:	4311      	orrs	r1, r2
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030d6:	06d2      	lsls	r2, r2, #27
 80030d8:	430a      	orrs	r2, r1
 80030da:	4912      	ldr	r1, [pc, #72]	; (8003124 <HAL_RCC_OscConfig+0x778>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80030e0:	4b10      	ldr	r3, [pc, #64]	; (8003124 <HAL_RCC_OscConfig+0x778>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a0f      	ldr	r2, [pc, #60]	; (8003124 <HAL_RCC_OscConfig+0x778>)
 80030e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030ea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030ec:	4b0d      	ldr	r3, [pc, #52]	; (8003124 <HAL_RCC_OscConfig+0x778>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	4a0c      	ldr	r2, [pc, #48]	; (8003124 <HAL_RCC_OscConfig+0x778>)
 80030f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030f8:	f7ff f950 	bl	800239c <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003100:	f7ff f94c 	bl	800239c <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e058      	b.n	80031c4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003112:	4b04      	ldr	r3, [pc, #16]	; (8003124 <HAL_RCC_OscConfig+0x778>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d0f0      	beq.n	8003100 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800311e:	e050      	b.n	80031c2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e04f      	b.n	80031c4 <HAL_RCC_OscConfig+0x818>
 8003124:	40021000 	.word	0x40021000
 8003128:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800312c:	4b27      	ldr	r3, [pc, #156]	; (80031cc <HAL_RCC_OscConfig+0x820>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d144      	bne.n	80031c2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003138:	4b24      	ldr	r3, [pc, #144]	; (80031cc <HAL_RCC_OscConfig+0x820>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a23      	ldr	r2, [pc, #140]	; (80031cc <HAL_RCC_OscConfig+0x820>)
 800313e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003142:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003144:	4b21      	ldr	r3, [pc, #132]	; (80031cc <HAL_RCC_OscConfig+0x820>)
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	4a20      	ldr	r2, [pc, #128]	; (80031cc <HAL_RCC_OscConfig+0x820>)
 800314a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800314e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003150:	f7ff f924 	bl	800239c <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003156:	e008      	b.n	800316a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003158:	f7ff f920 	bl	800239c <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b02      	cmp	r3, #2
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e02c      	b.n	80031c4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800316a:	4b18      	ldr	r3, [pc, #96]	; (80031cc <HAL_RCC_OscConfig+0x820>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d0f0      	beq.n	8003158 <HAL_RCC_OscConfig+0x7ac>
 8003176:	e024      	b.n	80031c2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	2b0c      	cmp	r3, #12
 800317c:	d01f      	beq.n	80031be <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800317e:	4b13      	ldr	r3, [pc, #76]	; (80031cc <HAL_RCC_OscConfig+0x820>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a12      	ldr	r2, [pc, #72]	; (80031cc <HAL_RCC_OscConfig+0x820>)
 8003184:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003188:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318a:	f7ff f907 	bl	800239c <HAL_GetTick>
 800318e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003190:	e008      	b.n	80031a4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003192:	f7ff f903 	bl	800239c <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e00f      	b.n	80031c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031a4:	4b09      	ldr	r3, [pc, #36]	; (80031cc <HAL_RCC_OscConfig+0x820>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1f0      	bne.n	8003192 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80031b0:	4b06      	ldr	r3, [pc, #24]	; (80031cc <HAL_RCC_OscConfig+0x820>)
 80031b2:	68da      	ldr	r2, [r3, #12]
 80031b4:	4905      	ldr	r1, [pc, #20]	; (80031cc <HAL_RCC_OscConfig+0x820>)
 80031b6:	4b06      	ldr	r3, [pc, #24]	; (80031d0 <HAL_RCC_OscConfig+0x824>)
 80031b8:	4013      	ands	r3, r2
 80031ba:	60cb      	str	r3, [r1, #12]
 80031bc:	e001      	b.n	80031c2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e000      	b.n	80031c4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3720      	adds	r7, #32
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40021000 	.word	0x40021000
 80031d0:	feeefffc 	.word	0xfeeefffc

080031d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d101      	bne.n	80031e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e0e7      	b.n	80033b8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031e8:	4b75      	ldr	r3, [pc, #468]	; (80033c0 <HAL_RCC_ClockConfig+0x1ec>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d910      	bls.n	8003218 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031f6:	4b72      	ldr	r3, [pc, #456]	; (80033c0 <HAL_RCC_ClockConfig+0x1ec>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f023 0207 	bic.w	r2, r3, #7
 80031fe:	4970      	ldr	r1, [pc, #448]	; (80033c0 <HAL_RCC_ClockConfig+0x1ec>)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	4313      	orrs	r3, r2
 8003204:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003206:	4b6e      	ldr	r3, [pc, #440]	; (80033c0 <HAL_RCC_ClockConfig+0x1ec>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	429a      	cmp	r2, r3
 8003212:	d001      	beq.n	8003218 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e0cf      	b.n	80033b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d010      	beq.n	8003246 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	4b66      	ldr	r3, [pc, #408]	; (80033c4 <HAL_RCC_ClockConfig+0x1f0>)
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003230:	429a      	cmp	r2, r3
 8003232:	d908      	bls.n	8003246 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003234:	4b63      	ldr	r3, [pc, #396]	; (80033c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	4960      	ldr	r1, [pc, #384]	; (80033c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003242:	4313      	orrs	r3, r2
 8003244:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b00      	cmp	r3, #0
 8003250:	d04c      	beq.n	80032ec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	2b03      	cmp	r3, #3
 8003258:	d107      	bne.n	800326a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800325a:	4b5a      	ldr	r3, [pc, #360]	; (80033c4 <HAL_RCC_ClockConfig+0x1f0>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d121      	bne.n	80032aa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e0a6      	b.n	80033b8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2b02      	cmp	r3, #2
 8003270:	d107      	bne.n	8003282 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003272:	4b54      	ldr	r3, [pc, #336]	; (80033c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d115      	bne.n	80032aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e09a      	b.n	80033b8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d107      	bne.n	800329a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800328a:	4b4e      	ldr	r3, [pc, #312]	; (80033c4 <HAL_RCC_ClockConfig+0x1f0>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d109      	bne.n	80032aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e08e      	b.n	80033b8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800329a:	4b4a      	ldr	r3, [pc, #296]	; (80033c4 <HAL_RCC_ClockConfig+0x1f0>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e086      	b.n	80033b8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032aa:	4b46      	ldr	r3, [pc, #280]	; (80033c4 <HAL_RCC_ClockConfig+0x1f0>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f023 0203 	bic.w	r2, r3, #3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	4943      	ldr	r1, [pc, #268]	; (80033c4 <HAL_RCC_ClockConfig+0x1f0>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032bc:	f7ff f86e 	bl	800239c <HAL_GetTick>
 80032c0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032c2:	e00a      	b.n	80032da <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032c4:	f7ff f86a 	bl	800239c <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e06e      	b.n	80033b8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032da:	4b3a      	ldr	r3, [pc, #232]	; (80033c4 <HAL_RCC_ClockConfig+0x1f0>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 020c 	and.w	r2, r3, #12
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d1eb      	bne.n	80032c4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d010      	beq.n	800331a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689a      	ldr	r2, [r3, #8]
 80032fc:	4b31      	ldr	r3, [pc, #196]	; (80033c4 <HAL_RCC_ClockConfig+0x1f0>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003304:	429a      	cmp	r2, r3
 8003306:	d208      	bcs.n	800331a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003308:	4b2e      	ldr	r3, [pc, #184]	; (80033c4 <HAL_RCC_ClockConfig+0x1f0>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	492b      	ldr	r1, [pc, #172]	; (80033c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003316:	4313      	orrs	r3, r2
 8003318:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800331a:	4b29      	ldr	r3, [pc, #164]	; (80033c0 <HAL_RCC_ClockConfig+0x1ec>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0307 	and.w	r3, r3, #7
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	429a      	cmp	r2, r3
 8003326:	d210      	bcs.n	800334a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003328:	4b25      	ldr	r3, [pc, #148]	; (80033c0 <HAL_RCC_ClockConfig+0x1ec>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f023 0207 	bic.w	r2, r3, #7
 8003330:	4923      	ldr	r1, [pc, #140]	; (80033c0 <HAL_RCC_ClockConfig+0x1ec>)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	4313      	orrs	r3, r2
 8003336:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003338:	4b21      	ldr	r3, [pc, #132]	; (80033c0 <HAL_RCC_ClockConfig+0x1ec>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0307 	and.w	r3, r3, #7
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	429a      	cmp	r2, r3
 8003344:	d001      	beq.n	800334a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e036      	b.n	80033b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0304 	and.w	r3, r3, #4
 8003352:	2b00      	cmp	r3, #0
 8003354:	d008      	beq.n	8003368 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003356:	4b1b      	ldr	r3, [pc, #108]	; (80033c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	4918      	ldr	r1, [pc, #96]	; (80033c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003364:	4313      	orrs	r3, r2
 8003366:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0308 	and.w	r3, r3, #8
 8003370:	2b00      	cmp	r3, #0
 8003372:	d009      	beq.n	8003388 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003374:	4b13      	ldr	r3, [pc, #76]	; (80033c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	4910      	ldr	r1, [pc, #64]	; (80033c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003384:	4313      	orrs	r3, r2
 8003386:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003388:	f000 f824 	bl	80033d4 <HAL_RCC_GetSysClockFreq>
 800338c:	4602      	mov	r2, r0
 800338e:	4b0d      	ldr	r3, [pc, #52]	; (80033c4 <HAL_RCC_ClockConfig+0x1f0>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	091b      	lsrs	r3, r3, #4
 8003394:	f003 030f 	and.w	r3, r3, #15
 8003398:	490b      	ldr	r1, [pc, #44]	; (80033c8 <HAL_RCC_ClockConfig+0x1f4>)
 800339a:	5ccb      	ldrb	r3, [r1, r3]
 800339c:	f003 031f 	and.w	r3, r3, #31
 80033a0:	fa22 f303 	lsr.w	r3, r2, r3
 80033a4:	4a09      	ldr	r2, [pc, #36]	; (80033cc <HAL_RCC_ClockConfig+0x1f8>)
 80033a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80033a8:	4b09      	ldr	r3, [pc, #36]	; (80033d0 <HAL_RCC_ClockConfig+0x1fc>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7fe fedf 	bl	8002170 <HAL_InitTick>
 80033b2:	4603      	mov	r3, r0
 80033b4:	72fb      	strb	r3, [r7, #11]

  return status;
 80033b6:	7afb      	ldrb	r3, [r7, #11]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	40022000 	.word	0x40022000
 80033c4:	40021000 	.word	0x40021000
 80033c8:	08005510 	.word	0x08005510
 80033cc:	20000068 	.word	0x20000068
 80033d0:	2000006c 	.word	0x2000006c

080033d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b089      	sub	sp, #36	; 0x24
 80033d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80033da:	2300      	movs	r3, #0
 80033dc:	61fb      	str	r3, [r7, #28]
 80033de:	2300      	movs	r3, #0
 80033e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033e2:	4b3e      	ldr	r3, [pc, #248]	; (80034dc <HAL_RCC_GetSysClockFreq+0x108>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 030c 	and.w	r3, r3, #12
 80033ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033ec:	4b3b      	ldr	r3, [pc, #236]	; (80034dc <HAL_RCC_GetSysClockFreq+0x108>)
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	f003 0303 	and.w	r3, r3, #3
 80033f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d005      	beq.n	8003408 <HAL_RCC_GetSysClockFreq+0x34>
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	2b0c      	cmp	r3, #12
 8003400:	d121      	bne.n	8003446 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d11e      	bne.n	8003446 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003408:	4b34      	ldr	r3, [pc, #208]	; (80034dc <HAL_RCC_GetSysClockFreq+0x108>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0308 	and.w	r3, r3, #8
 8003410:	2b00      	cmp	r3, #0
 8003412:	d107      	bne.n	8003424 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003414:	4b31      	ldr	r3, [pc, #196]	; (80034dc <HAL_RCC_GetSysClockFreq+0x108>)
 8003416:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800341a:	0a1b      	lsrs	r3, r3, #8
 800341c:	f003 030f 	and.w	r3, r3, #15
 8003420:	61fb      	str	r3, [r7, #28]
 8003422:	e005      	b.n	8003430 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003424:	4b2d      	ldr	r3, [pc, #180]	; (80034dc <HAL_RCC_GetSysClockFreq+0x108>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	091b      	lsrs	r3, r3, #4
 800342a:	f003 030f 	and.w	r3, r3, #15
 800342e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003430:	4a2b      	ldr	r2, [pc, #172]	; (80034e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003438:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10d      	bne.n	800345c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003444:	e00a      	b.n	800345c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	2b04      	cmp	r3, #4
 800344a:	d102      	bne.n	8003452 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800344c:	4b25      	ldr	r3, [pc, #148]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800344e:	61bb      	str	r3, [r7, #24]
 8003450:	e004      	b.n	800345c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	2b08      	cmp	r3, #8
 8003456:	d101      	bne.n	800345c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003458:	4b23      	ldr	r3, [pc, #140]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x114>)
 800345a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	2b0c      	cmp	r3, #12
 8003460:	d134      	bne.n	80034cc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003462:	4b1e      	ldr	r3, [pc, #120]	; (80034dc <HAL_RCC_GetSysClockFreq+0x108>)
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	f003 0303 	and.w	r3, r3, #3
 800346a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	2b02      	cmp	r3, #2
 8003470:	d003      	beq.n	800347a <HAL_RCC_GetSysClockFreq+0xa6>
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2b03      	cmp	r3, #3
 8003476:	d003      	beq.n	8003480 <HAL_RCC_GetSysClockFreq+0xac>
 8003478:	e005      	b.n	8003486 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800347a:	4b1a      	ldr	r3, [pc, #104]	; (80034e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800347c:	617b      	str	r3, [r7, #20]
      break;
 800347e:	e005      	b.n	800348c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003480:	4b19      	ldr	r3, [pc, #100]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003482:	617b      	str	r3, [r7, #20]
      break;
 8003484:	e002      	b.n	800348c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	617b      	str	r3, [r7, #20]
      break;
 800348a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800348c:	4b13      	ldr	r3, [pc, #76]	; (80034dc <HAL_RCC_GetSysClockFreq+0x108>)
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	091b      	lsrs	r3, r3, #4
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	3301      	adds	r3, #1
 8003498:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800349a:	4b10      	ldr	r3, [pc, #64]	; (80034dc <HAL_RCC_GetSysClockFreq+0x108>)
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	0a1b      	lsrs	r3, r3, #8
 80034a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	fb03 f202 	mul.w	r2, r3, r2
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034b2:	4b0a      	ldr	r3, [pc, #40]	; (80034dc <HAL_RCC_GetSysClockFreq+0x108>)
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	0e5b      	lsrs	r3, r3, #25
 80034b8:	f003 0303 	and.w	r3, r3, #3
 80034bc:	3301      	adds	r3, #1
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80034cc:	69bb      	ldr	r3, [r7, #24]
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3724      	adds	r7, #36	; 0x24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	40021000 	.word	0x40021000
 80034e0:	08005528 	.word	0x08005528
 80034e4:	00f42400 	.word	0x00f42400
 80034e8:	007a1200 	.word	0x007a1200

080034ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034f0:	4b03      	ldr	r3, [pc, #12]	; (8003500 <HAL_RCC_GetHCLKFreq+0x14>)
 80034f2:	681b      	ldr	r3, [r3, #0]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	20000068 	.word	0x20000068

08003504 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003508:	f7ff fff0 	bl	80034ec <HAL_RCC_GetHCLKFreq>
 800350c:	4602      	mov	r2, r0
 800350e:	4b06      	ldr	r3, [pc, #24]	; (8003528 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	0a1b      	lsrs	r3, r3, #8
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	4904      	ldr	r1, [pc, #16]	; (800352c <HAL_RCC_GetPCLK1Freq+0x28>)
 800351a:	5ccb      	ldrb	r3, [r1, r3]
 800351c:	f003 031f 	and.w	r3, r3, #31
 8003520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003524:	4618      	mov	r0, r3
 8003526:	bd80      	pop	{r7, pc}
 8003528:	40021000 	.word	0x40021000
 800352c:	08005520 	.word	0x08005520

08003530 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	220f      	movs	r2, #15
 800353e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003540:	4b12      	ldr	r3, [pc, #72]	; (800358c <HAL_RCC_GetClockConfig+0x5c>)
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f003 0203 	and.w	r2, r3, #3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800354c:	4b0f      	ldr	r3, [pc, #60]	; (800358c <HAL_RCC_GetClockConfig+0x5c>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003558:	4b0c      	ldr	r3, [pc, #48]	; (800358c <HAL_RCC_GetClockConfig+0x5c>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003564:	4b09      	ldr	r3, [pc, #36]	; (800358c <HAL_RCC_GetClockConfig+0x5c>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	08db      	lsrs	r3, r3, #3
 800356a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003572:	4b07      	ldr	r3, [pc, #28]	; (8003590 <HAL_RCC_GetClockConfig+0x60>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0207 	and.w	r2, r3, #7
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	601a      	str	r2, [r3, #0]
}
 800357e:	bf00      	nop
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	40021000 	.word	0x40021000
 8003590:	40022000 	.word	0x40022000

08003594 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800359c:	2300      	movs	r3, #0
 800359e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80035a0:	4b2a      	ldr	r3, [pc, #168]	; (800364c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d003      	beq.n	80035b4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80035ac:	f7ff f99a 	bl	80028e4 <HAL_PWREx_GetVoltageRange>
 80035b0:	6178      	str	r0, [r7, #20]
 80035b2:	e014      	b.n	80035de <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80035b4:	4b25      	ldr	r3, [pc, #148]	; (800364c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b8:	4a24      	ldr	r2, [pc, #144]	; (800364c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035be:	6593      	str	r3, [r2, #88]	; 0x58
 80035c0:	4b22      	ldr	r3, [pc, #136]	; (800364c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c8:	60fb      	str	r3, [r7, #12]
 80035ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80035cc:	f7ff f98a 	bl	80028e4 <HAL_PWREx_GetVoltageRange>
 80035d0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80035d2:	4b1e      	ldr	r3, [pc, #120]	; (800364c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d6:	4a1d      	ldr	r2, [pc, #116]	; (800364c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035dc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035e4:	d10b      	bne.n	80035fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2b80      	cmp	r3, #128	; 0x80
 80035ea:	d919      	bls.n	8003620 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2ba0      	cmp	r3, #160	; 0xa0
 80035f0:	d902      	bls.n	80035f8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035f2:	2302      	movs	r3, #2
 80035f4:	613b      	str	r3, [r7, #16]
 80035f6:	e013      	b.n	8003620 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035f8:	2301      	movs	r3, #1
 80035fa:	613b      	str	r3, [r7, #16]
 80035fc:	e010      	b.n	8003620 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b80      	cmp	r3, #128	; 0x80
 8003602:	d902      	bls.n	800360a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003604:	2303      	movs	r3, #3
 8003606:	613b      	str	r3, [r7, #16]
 8003608:	e00a      	b.n	8003620 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b80      	cmp	r3, #128	; 0x80
 800360e:	d102      	bne.n	8003616 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003610:	2302      	movs	r3, #2
 8003612:	613b      	str	r3, [r7, #16]
 8003614:	e004      	b.n	8003620 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2b70      	cmp	r3, #112	; 0x70
 800361a:	d101      	bne.n	8003620 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800361c:	2301      	movs	r3, #1
 800361e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003620:	4b0b      	ldr	r3, [pc, #44]	; (8003650 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f023 0207 	bic.w	r2, r3, #7
 8003628:	4909      	ldr	r1, [pc, #36]	; (8003650 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	4313      	orrs	r3, r2
 800362e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003630:	4b07      	ldr	r3, [pc, #28]	; (8003650 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0307 	and.w	r3, r3, #7
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	429a      	cmp	r2, r3
 800363c:	d001      	beq.n	8003642 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e000      	b.n	8003644 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3718      	adds	r7, #24
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	40021000 	.word	0x40021000
 8003650:	40022000 	.word	0x40022000

08003654 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800365c:	2300      	movs	r3, #0
 800365e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003660:	2300      	movs	r3, #0
 8003662:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800366c:	2b00      	cmp	r3, #0
 800366e:	d031      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003674:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003678:	d01a      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800367a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800367e:	d814      	bhi.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003680:	2b00      	cmp	r3, #0
 8003682:	d009      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003684:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003688:	d10f      	bne.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800368a:	4b5d      	ldr	r3, [pc, #372]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	4a5c      	ldr	r2, [pc, #368]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003694:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003696:	e00c      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3304      	adds	r3, #4
 800369c:	2100      	movs	r1, #0
 800369e:	4618      	mov	r0, r3
 80036a0:	f000 f9de 	bl	8003a60 <RCCEx_PLLSAI1_Config>
 80036a4:	4603      	mov	r3, r0
 80036a6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036a8:	e003      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	74fb      	strb	r3, [r7, #19]
      break;
 80036ae:	e000      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80036b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036b2:	7cfb      	ldrb	r3, [r7, #19]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d10b      	bne.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036b8:	4b51      	ldr	r3, [pc, #324]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c6:	494e      	ldr	r1, [pc, #312]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80036ce:	e001      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d0:	7cfb      	ldrb	r3, [r7, #19]
 80036d2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f000 809e 	beq.w	800381e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036e2:	2300      	movs	r3, #0
 80036e4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036e6:	4b46      	ldr	r3, [pc, #280]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80036f2:	2301      	movs	r3, #1
 80036f4:	e000      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80036f6:	2300      	movs	r3, #0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00d      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036fc:	4b40      	ldr	r3, [pc, #256]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003700:	4a3f      	ldr	r2, [pc, #252]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003706:	6593      	str	r3, [r2, #88]	; 0x58
 8003708:	4b3d      	ldr	r3, [pc, #244]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800370a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800370c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003710:	60bb      	str	r3, [r7, #8]
 8003712:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003714:	2301      	movs	r3, #1
 8003716:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003718:	4b3a      	ldr	r3, [pc, #232]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a39      	ldr	r2, [pc, #228]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800371e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003722:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003724:	f7fe fe3a 	bl	800239c <HAL_GetTick>
 8003728:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800372a:	e009      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800372c:	f7fe fe36 	bl	800239c <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d902      	bls.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	74fb      	strb	r3, [r7, #19]
        break;
 800373e:	e005      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003740:	4b30      	ldr	r3, [pc, #192]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003748:	2b00      	cmp	r3, #0
 800374a:	d0ef      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800374c:	7cfb      	ldrb	r3, [r7, #19]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d15a      	bne.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003752:	4b2b      	ldr	r3, [pc, #172]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003758:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800375c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d01e      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	429a      	cmp	r2, r3
 800376c:	d019      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800376e:	4b24      	ldr	r3, [pc, #144]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003778:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800377a:	4b21      	ldr	r3, [pc, #132]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800377c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003780:	4a1f      	ldr	r2, [pc, #124]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003782:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003786:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800378a:	4b1d      	ldr	r3, [pc, #116]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800378c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003790:	4a1b      	ldr	r2, [pc, #108]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003796:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800379a:	4a19      	ldr	r2, [pc, #100]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	f003 0301 	and.w	r3, r3, #1
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d016      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ac:	f7fe fdf6 	bl	800239c <HAL_GetTick>
 80037b0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037b2:	e00b      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037b4:	f7fe fdf2 	bl	800239c <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d902      	bls.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	74fb      	strb	r3, [r7, #19]
            break;
 80037ca:	e006      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037cc:	4b0c      	ldr	r3, [pc, #48]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d0ec      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80037da:	7cfb      	ldrb	r3, [r7, #19]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d10b      	bne.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037e0:	4b07      	ldr	r3, [pc, #28]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ee:	4904      	ldr	r1, [pc, #16]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80037f6:	e009      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037f8:	7cfb      	ldrb	r3, [r7, #19]
 80037fa:	74bb      	strb	r3, [r7, #18]
 80037fc:	e006      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80037fe:	bf00      	nop
 8003800:	40021000 	.word	0x40021000
 8003804:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003808:	7cfb      	ldrb	r3, [r7, #19]
 800380a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800380c:	7c7b      	ldrb	r3, [r7, #17]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d105      	bne.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003812:	4b8a      	ldr	r3, [pc, #552]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003816:	4a89      	ldr	r2, [pc, #548]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003818:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800381c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00a      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800382a:	4b84      	ldr	r3, [pc, #528]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800382c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003830:	f023 0203 	bic.w	r2, r3, #3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	4980      	ldr	r1, [pc, #512]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800383a:	4313      	orrs	r3, r2
 800383c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00a      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800384c:	4b7b      	ldr	r3, [pc, #492]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800384e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003852:	f023 020c 	bic.w	r2, r3, #12
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385a:	4978      	ldr	r1, [pc, #480]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800385c:	4313      	orrs	r3, r2
 800385e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0320 	and.w	r3, r3, #32
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00a      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800386e:	4b73      	ldr	r3, [pc, #460]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003874:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387c:	496f      	ldr	r1, [pc, #444]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800387e:	4313      	orrs	r3, r2
 8003880:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00a      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003890:	4b6a      	ldr	r3, [pc, #424]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003896:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800389e:	4967      	ldr	r1, [pc, #412]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00a      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80038b2:	4b62      	ldr	r3, [pc, #392]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c0:	495e      	ldr	r1, [pc, #376]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00a      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038d4:	4b59      	ldr	r3, [pc, #356]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038da:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e2:	4956      	ldr	r1, [pc, #344]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00a      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038f6:	4b51      	ldr	r3, [pc, #324]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003904:	494d      	ldr	r1, [pc, #308]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003906:	4313      	orrs	r3, r2
 8003908:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d028      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003918:	4b48      	ldr	r3, [pc, #288]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800391a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800391e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003926:	4945      	ldr	r1, [pc, #276]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003928:	4313      	orrs	r3, r2
 800392a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003936:	d106      	bne.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003938:	4b40      	ldr	r3, [pc, #256]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	4a3f      	ldr	r2, [pc, #252]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800393e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003942:	60d3      	str	r3, [r2, #12]
 8003944:	e011      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800394e:	d10c      	bne.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	3304      	adds	r3, #4
 8003954:	2101      	movs	r1, #1
 8003956:	4618      	mov	r0, r3
 8003958:	f000 f882 	bl	8003a60 <RCCEx_PLLSAI1_Config>
 800395c:	4603      	mov	r3, r0
 800395e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003960:	7cfb      	ldrb	r3, [r7, #19]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003966:	7cfb      	ldrb	r3, [r7, #19]
 8003968:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d028      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003976:	4b31      	ldr	r3, [pc, #196]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800397c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003984:	492d      	ldr	r1, [pc, #180]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003986:	4313      	orrs	r3, r2
 8003988:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003990:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003994:	d106      	bne.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003996:	4b29      	ldr	r3, [pc, #164]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	4a28      	ldr	r2, [pc, #160]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800399c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039a0:	60d3      	str	r3, [r2, #12]
 80039a2:	e011      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039ac:	d10c      	bne.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	3304      	adds	r3, #4
 80039b2:	2101      	movs	r1, #1
 80039b4:	4618      	mov	r0, r3
 80039b6:	f000 f853 	bl	8003a60 <RCCEx_PLLSAI1_Config>
 80039ba:	4603      	mov	r3, r0
 80039bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039be:	7cfb      	ldrb	r3, [r7, #19]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80039c4:	7cfb      	ldrb	r3, [r7, #19]
 80039c6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d01c      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039d4:	4b19      	ldr	r3, [pc, #100]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039e2:	4916      	ldr	r1, [pc, #88]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039f2:	d10c      	bne.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	3304      	adds	r3, #4
 80039f8:	2102      	movs	r1, #2
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 f830 	bl	8003a60 <RCCEx_PLLSAI1_Config>
 8003a00:	4603      	mov	r3, r0
 8003a02:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a04:	7cfb      	ldrb	r3, [r7, #19]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003a0a:	7cfb      	ldrb	r3, [r7, #19]
 8003a0c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00a      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a1a:	4b08      	ldr	r3, [pc, #32]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a20:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a28:	4904      	ldr	r1, [pc, #16]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a30:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3718      	adds	r7, #24
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	40021000 	.word	0x40021000

08003a40 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003a40:	b480      	push	{r7}
 8003a42:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003a44:	4b05      	ldr	r3, [pc, #20]	; (8003a5c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a04      	ldr	r2, [pc, #16]	; (8003a5c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003a4a:	f043 0304 	orr.w	r3, r3, #4
 8003a4e:	6013      	str	r3, [r2, #0]
}
 8003a50:	bf00      	nop
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	40021000 	.word	0x40021000

08003a60 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a6e:	4b74      	ldr	r3, [pc, #464]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	f003 0303 	and.w	r3, r3, #3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d018      	beq.n	8003aac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003a7a:	4b71      	ldr	r3, [pc, #452]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f003 0203 	and.w	r2, r3, #3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d10d      	bne.n	8003aa6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
       ||
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d009      	beq.n	8003aa6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003a92:	4b6b      	ldr	r3, [pc, #428]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	091b      	lsrs	r3, r3, #4
 8003a98:	f003 0307 	and.w	r3, r3, #7
 8003a9c:	1c5a      	adds	r2, r3, #1
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
       ||
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d047      	beq.n	8003b36 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	73fb      	strb	r3, [r7, #15]
 8003aaa:	e044      	b.n	8003b36 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2b03      	cmp	r3, #3
 8003ab2:	d018      	beq.n	8003ae6 <RCCEx_PLLSAI1_Config+0x86>
 8003ab4:	2b03      	cmp	r3, #3
 8003ab6:	d825      	bhi.n	8003b04 <RCCEx_PLLSAI1_Config+0xa4>
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d002      	beq.n	8003ac2 <RCCEx_PLLSAI1_Config+0x62>
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d009      	beq.n	8003ad4 <RCCEx_PLLSAI1_Config+0x74>
 8003ac0:	e020      	b.n	8003b04 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ac2:	4b5f      	ldr	r3, [pc, #380]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d11d      	bne.n	8003b0a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ad2:	e01a      	b.n	8003b0a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ad4:	4b5a      	ldr	r3, [pc, #360]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d116      	bne.n	8003b0e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ae4:	e013      	b.n	8003b0e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ae6:	4b56      	ldr	r3, [pc, #344]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10f      	bne.n	8003b12 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003af2:	4b53      	ldr	r3, [pc, #332]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d109      	bne.n	8003b12 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b02:	e006      	b.n	8003b12 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	73fb      	strb	r3, [r7, #15]
      break;
 8003b08:	e004      	b.n	8003b14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b0a:	bf00      	nop
 8003b0c:	e002      	b.n	8003b14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b0e:	bf00      	nop
 8003b10:	e000      	b.n	8003b14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b12:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b14:	7bfb      	ldrb	r3, [r7, #15]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d10d      	bne.n	8003b36 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b1a:	4b49      	ldr	r3, [pc, #292]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6819      	ldr	r1, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	011b      	lsls	r3, r3, #4
 8003b2e:	430b      	orrs	r3, r1
 8003b30:	4943      	ldr	r1, [pc, #268]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b36:	7bfb      	ldrb	r3, [r7, #15]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d17c      	bne.n	8003c36 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003b3c:	4b40      	ldr	r3, [pc, #256]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a3f      	ldr	r2, [pc, #252]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b42:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b48:	f7fe fc28 	bl	800239c <HAL_GetTick>
 8003b4c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b4e:	e009      	b.n	8003b64 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b50:	f7fe fc24 	bl	800239c <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d902      	bls.n	8003b64 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	73fb      	strb	r3, [r7, #15]
        break;
 8003b62:	e005      	b.n	8003b70 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b64:	4b36      	ldr	r3, [pc, #216]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1ef      	bne.n	8003b50 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b70:	7bfb      	ldrb	r3, [r7, #15]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d15f      	bne.n	8003c36 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d110      	bne.n	8003b9e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b7c:	4b30      	ldr	r3, [pc, #192]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003b84:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6892      	ldr	r2, [r2, #8]
 8003b8c:	0211      	lsls	r1, r2, #8
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	68d2      	ldr	r2, [r2, #12]
 8003b92:	06d2      	lsls	r2, r2, #27
 8003b94:	430a      	orrs	r2, r1
 8003b96:	492a      	ldr	r1, [pc, #168]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	610b      	str	r3, [r1, #16]
 8003b9c:	e027      	b.n	8003bee <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d112      	bne.n	8003bca <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ba4:	4b26      	ldr	r3, [pc, #152]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003bac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	6892      	ldr	r2, [r2, #8]
 8003bb4:	0211      	lsls	r1, r2, #8
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	6912      	ldr	r2, [r2, #16]
 8003bba:	0852      	lsrs	r2, r2, #1
 8003bbc:	3a01      	subs	r2, #1
 8003bbe:	0552      	lsls	r2, r2, #21
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	491f      	ldr	r1, [pc, #124]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	610b      	str	r3, [r1, #16]
 8003bc8:	e011      	b.n	8003bee <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bca:	4b1d      	ldr	r3, [pc, #116]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003bd2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	6892      	ldr	r2, [r2, #8]
 8003bda:	0211      	lsls	r1, r2, #8
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	6952      	ldr	r2, [r2, #20]
 8003be0:	0852      	lsrs	r2, r2, #1
 8003be2:	3a01      	subs	r2, #1
 8003be4:	0652      	lsls	r2, r2, #25
 8003be6:	430a      	orrs	r2, r1
 8003be8:	4915      	ldr	r1, [pc, #84]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003bee:	4b14      	ldr	r3, [pc, #80]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a13      	ldr	r2, [pc, #76]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bf4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003bf8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bfa:	f7fe fbcf 	bl	800239c <HAL_GetTick>
 8003bfe:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c00:	e009      	b.n	8003c16 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c02:	f7fe fbcb 	bl	800239c <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d902      	bls.n	8003c16 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	73fb      	strb	r3, [r7, #15]
          break;
 8003c14:	e005      	b.n	8003c22 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c16:	4b0a      	ldr	r3, [pc, #40]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d0ef      	beq.n	8003c02 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003c22:	7bfb      	ldrb	r3, [r7, #15]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d106      	bne.n	8003c36 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003c28:	4b05      	ldr	r3, [pc, #20]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c2a:	691a      	ldr	r2, [r3, #16]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	4903      	ldr	r1, [pc, #12]	; (8003c40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3710      	adds	r7, #16
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	40021000 	.word	0x40021000

08003c44 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d079      	beq.n	8003d4a <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d106      	bne.n	8003c70 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f7fe fa0e 	bl	800208c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2202      	movs	r2, #2
 8003c74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	f003 0310 	and.w	r3, r3, #16
 8003c82:	2b10      	cmp	r3, #16
 8003c84:	d058      	beq.n	8003d38 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	22ca      	movs	r2, #202	; 0xca
 8003c8c:	625a      	str	r2, [r3, #36]	; 0x24
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2253      	movs	r2, #83	; 0x53
 8003c94:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 f880 	bl	8003d9c <RTC_EnterInitMode>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003ca0:	7bfb      	ldrb	r3, [r7, #15]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d127      	bne.n	8003cf6 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	6812      	ldr	r2, [r2, #0]
 8003cb0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003cb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cb8:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	6899      	ldr	r1, [r3, #8]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	431a      	orrs	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	68d2      	ldr	r2, [r2, #12]
 8003ce0:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	6919      	ldr	r1, [r3, #16]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	041a      	lsls	r2, r3, #16
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f884 	bl	8003e04 <RTC_ExitInitMode>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003d00:	7bfb      	ldrb	r3, [r7, #15]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d113      	bne.n	8003d2e <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 0203 	bic.w	r2, r2, #3
 8003d14:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	69da      	ldr	r2, [r3, #28]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	695b      	ldr	r3, [r3, #20]
 8003d24:	431a      	orrs	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	22ff      	movs	r2, #255	; 0xff
 8003d34:	625a      	str	r2, [r3, #36]	; 0x24
 8003d36:	e001      	b.n	8003d3c <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003d3c:	7bfb      	ldrb	r3, [r7, #15]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d103      	bne.n	8003d4a <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 8003d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a0d      	ldr	r2, [pc, #52]	; (8003d98 <HAL_RTC_WaitForSynchro+0x44>)
 8003d62:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8003d64:	f7fe fb1a 	bl	800239c <HAL_GetTick>
 8003d68:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003d6a:	e009      	b.n	8003d80 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003d6c:	f7fe fb16 	bl	800239c <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d7a:	d901      	bls.n	8003d80 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e007      	b.n	8003d90 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	f003 0320 	and.w	r3, r3, #32
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d0ee      	beq.n	8003d6c <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3710      	adds	r7, #16
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	0003ff5f 	.word	0x0003ff5f

08003d9c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003da4:	2300      	movs	r3, #0
 8003da6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d120      	bne.n	8003df8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f04f 32ff 	mov.w	r2, #4294967295
 8003dbe:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003dc0:	f7fe faec 	bl	800239c <HAL_GetTick>
 8003dc4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003dc6:	e00d      	b.n	8003de4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003dc8:	f7fe fae8 	bl	800239c <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003dd6:	d905      	bls.n	8003de4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2203      	movs	r2, #3
 8003de0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d102      	bne.n	8003df8 <RTC_EnterInitMode+0x5c>
 8003df2:	7bfb      	ldrb	r3, [r7, #15]
 8003df4:	2b03      	cmp	r3, #3
 8003df6:	d1e7      	bne.n	8003dc8 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8003df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3710      	adds	r7, #16
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
	...

08003e04 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8003e10:	4b1a      	ldr	r3, [pc, #104]	; (8003e7c <RTC_ExitInitMode+0x78>)
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	4a19      	ldr	r2, [pc, #100]	; (8003e7c <RTC_ExitInitMode+0x78>)
 8003e16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e1a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003e1c:	4b17      	ldr	r3, [pc, #92]	; (8003e7c <RTC_ExitInitMode+0x78>)
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f003 0320 	and.w	r3, r3, #32
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d10c      	bne.n	8003e42 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f7ff ff93 	bl	8003d54 <HAL_RTC_WaitForSynchro>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d01e      	beq.n	8003e72 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2203      	movs	r2, #3
 8003e38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	73fb      	strb	r3, [r7, #15]
 8003e40:	e017      	b.n	8003e72 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003e42:	4b0e      	ldr	r3, [pc, #56]	; (8003e7c <RTC_ExitInitMode+0x78>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	4a0d      	ldr	r2, [pc, #52]	; (8003e7c <RTC_ExitInitMode+0x78>)
 8003e48:	f023 0320 	bic.w	r3, r3, #32
 8003e4c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7ff ff80 	bl	8003d54 <HAL_RTC_WaitForSynchro>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d005      	beq.n	8003e66 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2203      	movs	r2, #3
 8003e5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003e66:	4b05      	ldr	r3, [pc, #20]	; (8003e7c <RTC_ExitInitMode+0x78>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	4a04      	ldr	r2, [pc, #16]	; (8003e7c <RTC_ExitInitMode+0x78>)
 8003e6c:	f043 0320 	orr.w	r3, r3, #32
 8003e70:	6093      	str	r3, [r2, #8]
  }

  return status;
 8003e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3710      	adds	r7, #16
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	40002800 	.word	0x40002800

08003e80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e095      	b.n	8003fbe <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d108      	bne.n	8003eac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ea2:	d009      	beq.n	8003eb8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	61da      	str	r2, [r3, #28]
 8003eaa:	e005      	b.n	8003eb8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d106      	bne.n	8003ed8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7fe f90a 	bl	80020ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2202      	movs	r2, #2
 8003edc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ef8:	d902      	bls.n	8003f00 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003efa:	2300      	movs	r3, #0
 8003efc:	60fb      	str	r3, [r7, #12]
 8003efe:	e002      	b.n	8003f06 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003f00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f04:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003f0e:	d007      	beq.n	8003f20 <HAL_SPI_Init+0xa0>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f18:	d002      	beq.n	8003f20 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f30:	431a      	orrs	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	695b      	ldr	r3, [r3, #20]
 8003f40:	f003 0301 	and.w	r3, r3, #1
 8003f44:	431a      	orrs	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f4e:	431a      	orrs	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	69db      	ldr	r3, [r3, #28]
 8003f54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f58:	431a      	orrs	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f62:	ea42 0103 	orr.w	r1, r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	430a      	orrs	r2, r1
 8003f74:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	0c1b      	lsrs	r3, r3, #16
 8003f7c:	f003 0204 	and.w	r2, r3, #4
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f84:	f003 0310 	and.w	r3, r3, #16
 8003f88:	431a      	orrs	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f8e:	f003 0308 	and.w	r3, r3, #8
 8003f92:	431a      	orrs	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003f9c:	ea42 0103 	orr.w	r1, r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b088      	sub	sp, #32
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	60f8      	str	r0, [r7, #12]
 8003fce:	60b9      	str	r1, [r7, #8]
 8003fd0:	603b      	str	r3, [r7, #0]
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d101      	bne.n	8003fe8 <HAL_SPI_Transmit+0x22>
 8003fe4:	2302      	movs	r3, #2
 8003fe6:	e15f      	b.n	80042a8 <HAL_SPI_Transmit+0x2e2>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ff0:	f7fe f9d4 	bl	800239c <HAL_GetTick>
 8003ff4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003ff6:	88fb      	ldrh	r3, [r7, #6]
 8003ff8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b01      	cmp	r3, #1
 8004004:	d002      	beq.n	800400c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004006:	2302      	movs	r3, #2
 8004008:	77fb      	strb	r3, [r7, #31]
    goto error;
 800400a:	e148      	b.n	800429e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d002      	beq.n	8004018 <HAL_SPI_Transmit+0x52>
 8004012:	88fb      	ldrh	r3, [r7, #6]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d102      	bne.n	800401e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800401c:	e13f      	b.n	800429e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2203      	movs	r2, #3
 8004022:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	68ba      	ldr	r2, [r7, #8]
 8004030:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	88fa      	ldrh	r2, [r7, #6]
 8004036:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	88fa      	ldrh	r2, [r7, #6]
 800403c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004068:	d10f      	bne.n	800408a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004078:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004088:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004094:	2b40      	cmp	r3, #64	; 0x40
 8004096:	d007      	beq.n	80040a8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040b0:	d94f      	bls.n	8004152 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d002      	beq.n	80040c0 <HAL_SPI_Transmit+0xfa>
 80040ba:	8afb      	ldrh	r3, [r7, #22]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d142      	bne.n	8004146 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c4:	881a      	ldrh	r2, [r3, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d0:	1c9a      	adds	r2, r3, #2
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040da:	b29b      	uxth	r3, r3
 80040dc:	3b01      	subs	r3, #1
 80040de:	b29a      	uxth	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80040e4:	e02f      	b.n	8004146 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d112      	bne.n	800411a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f8:	881a      	ldrh	r2, [r3, #0]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004104:	1c9a      	adds	r2, r3, #2
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800410e:	b29b      	uxth	r3, r3
 8004110:	3b01      	subs	r3, #1
 8004112:	b29a      	uxth	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004118:	e015      	b.n	8004146 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800411a:	f7fe f93f 	bl	800239c <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	429a      	cmp	r2, r3
 8004128:	d803      	bhi.n	8004132 <HAL_SPI_Transmit+0x16c>
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004130:	d102      	bne.n	8004138 <HAL_SPI_Transmit+0x172>
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d106      	bne.n	8004146 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004144:	e0ab      	b.n	800429e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800414a:	b29b      	uxth	r3, r3
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1ca      	bne.n	80040e6 <HAL_SPI_Transmit+0x120>
 8004150:	e080      	b.n	8004254 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d002      	beq.n	8004160 <HAL_SPI_Transmit+0x19a>
 800415a:	8afb      	ldrh	r3, [r7, #22]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d174      	bne.n	800424a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004164:	b29b      	uxth	r3, r3
 8004166:	2b01      	cmp	r3, #1
 8004168:	d912      	bls.n	8004190 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416e:	881a      	ldrh	r2, [r3, #0]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417a:	1c9a      	adds	r2, r3, #2
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004184:	b29b      	uxth	r3, r3
 8004186:	3b02      	subs	r3, #2
 8004188:	b29a      	uxth	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800418e:	e05c      	b.n	800424a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	330c      	adds	r3, #12
 800419a:	7812      	ldrb	r2, [r2, #0]
 800419c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a2:	1c5a      	adds	r2, r3, #1
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	3b01      	subs	r3, #1
 80041b0:	b29a      	uxth	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80041b6:	e048      	b.n	800424a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d12b      	bne.n	800421e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d912      	bls.n	80041f6 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d4:	881a      	ldrh	r2, [r3, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e0:	1c9a      	adds	r2, r3, #2
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	3b02      	subs	r3, #2
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80041f4:	e029      	b.n	800424a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	330c      	adds	r3, #12
 8004200:	7812      	ldrb	r2, [r2, #0]
 8004202:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004208:	1c5a      	adds	r2, r3, #1
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004212:	b29b      	uxth	r3, r3
 8004214:	3b01      	subs	r3, #1
 8004216:	b29a      	uxth	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800421c:	e015      	b.n	800424a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800421e:	f7fe f8bd 	bl	800239c <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	683a      	ldr	r2, [r7, #0]
 800422a:	429a      	cmp	r2, r3
 800422c:	d803      	bhi.n	8004236 <HAL_SPI_Transmit+0x270>
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004234:	d102      	bne.n	800423c <HAL_SPI_Transmit+0x276>
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d106      	bne.n	800424a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004248:	e029      	b.n	800429e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800424e:	b29b      	uxth	r3, r3
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1b1      	bne.n	80041b8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004254:	69ba      	ldr	r2, [r7, #24]
 8004256:	6839      	ldr	r1, [r7, #0]
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f000 fb69 	bl	8004930 <SPI_EndRxTxTransaction>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d002      	beq.n	800426a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2220      	movs	r2, #32
 8004268:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10a      	bne.n	8004288 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004272:	2300      	movs	r3, #0
 8004274:	613b      	str	r3, [r7, #16]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	613b      	str	r3, [r7, #16]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	613b      	str	r3, [r7, #16]
 8004286:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800428c:	2b00      	cmp	r3, #0
 800428e:	d002      	beq.n	8004296 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	77fb      	strb	r3, [r7, #31]
 8004294:	e003      	b.n	800429e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2201      	movs	r2, #1
 800429a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80042a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3720      	adds	r7, #32
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b08a      	sub	sp, #40	; 0x28
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
 80042bc:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80042be:	2301      	movs	r3, #1
 80042c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80042c2:	2300      	movs	r3, #0
 80042c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d101      	bne.n	80042d6 <HAL_SPI_TransmitReceive+0x26>
 80042d2:	2302      	movs	r3, #2
 80042d4:	e20a      	b.n	80046ec <HAL_SPI_TransmitReceive+0x43c>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042de:	f7fe f85d 	bl	800239c <HAL_GetTick>
 80042e2:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042ea:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80042f2:	887b      	ldrh	r3, [r7, #2]
 80042f4:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80042f6:	887b      	ldrh	r3, [r7, #2]
 80042f8:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80042fa:	7efb      	ldrb	r3, [r7, #27]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d00e      	beq.n	800431e <HAL_SPI_TransmitReceive+0x6e>
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004306:	d106      	bne.n	8004316 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d102      	bne.n	8004316 <HAL_SPI_TransmitReceive+0x66>
 8004310:	7efb      	ldrb	r3, [r7, #27]
 8004312:	2b04      	cmp	r3, #4
 8004314:	d003      	beq.n	800431e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004316:	2302      	movs	r3, #2
 8004318:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800431c:	e1e0      	b.n	80046e0 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d005      	beq.n	8004330 <HAL_SPI_TransmitReceive+0x80>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d002      	beq.n	8004330 <HAL_SPI_TransmitReceive+0x80>
 800432a:	887b      	ldrh	r3, [r7, #2]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d103      	bne.n	8004338 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004336:	e1d3      	b.n	80046e0 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800433e:	b2db      	uxtb	r3, r3
 8004340:	2b04      	cmp	r3, #4
 8004342:	d003      	beq.n	800434c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2205      	movs	r2, #5
 8004348:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	887a      	ldrh	r2, [r7, #2]
 800435c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	887a      	ldrh	r2, [r7, #2]
 8004364:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	68ba      	ldr	r2, [r7, #8]
 800436c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	887a      	ldrh	r2, [r7, #2]
 8004372:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	887a      	ldrh	r2, [r7, #2]
 8004378:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800438e:	d802      	bhi.n	8004396 <HAL_SPI_TransmitReceive+0xe6>
 8004390:	8a3b      	ldrh	r3, [r7, #16]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d908      	bls.n	80043a8 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	685a      	ldr	r2, [r3, #4]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80043a4:	605a      	str	r2, [r3, #4]
 80043a6:	e007      	b.n	80043b8 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	685a      	ldr	r2, [r3, #4]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80043b6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c2:	2b40      	cmp	r3, #64	; 0x40
 80043c4:	d007      	beq.n	80043d6 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043de:	f240 8081 	bls.w	80044e4 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d002      	beq.n	80043f0 <HAL_SPI_TransmitReceive+0x140>
 80043ea:	8a7b      	ldrh	r3, [r7, #18]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d16d      	bne.n	80044cc <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f4:	881a      	ldrh	r2, [r3, #0]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004400:	1c9a      	adds	r2, r3, #2
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800440a:	b29b      	uxth	r3, r3
 800440c:	3b01      	subs	r3, #1
 800440e:	b29a      	uxth	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004414:	e05a      	b.n	80044cc <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b02      	cmp	r3, #2
 8004422:	d11b      	bne.n	800445c <HAL_SPI_TransmitReceive+0x1ac>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004428:	b29b      	uxth	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d016      	beq.n	800445c <HAL_SPI_TransmitReceive+0x1ac>
 800442e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004430:	2b01      	cmp	r3, #1
 8004432:	d113      	bne.n	800445c <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004438:	881a      	ldrh	r2, [r3, #0]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004444:	1c9a      	adds	r2, r3, #2
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800444e:	b29b      	uxth	r3, r3
 8004450:	3b01      	subs	r3, #1
 8004452:	b29a      	uxth	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004458:	2300      	movs	r3, #0
 800445a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	2b01      	cmp	r3, #1
 8004468:	d11c      	bne.n	80044a4 <HAL_SPI_TransmitReceive+0x1f4>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004470:	b29b      	uxth	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d016      	beq.n	80044a4 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68da      	ldr	r2, [r3, #12]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004480:	b292      	uxth	r2, r2
 8004482:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004488:	1c9a      	adds	r2, r3, #2
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004494:	b29b      	uxth	r3, r3
 8004496:	3b01      	subs	r3, #1
 8004498:	b29a      	uxth	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80044a0:	2301      	movs	r3, #1
 80044a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80044a4:	f7fd ff7a 	bl	800239c <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d80b      	bhi.n	80044cc <HAL_SPI_TransmitReceive+0x21c>
 80044b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ba:	d007      	beq.n	80044cc <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2201      	movs	r2, #1
 80044c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80044ca:	e109      	b.n	80046e0 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d19f      	bne.n	8004416 <HAL_SPI_TransmitReceive+0x166>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044dc:	b29b      	uxth	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d199      	bne.n	8004416 <HAL_SPI_TransmitReceive+0x166>
 80044e2:	e0e3      	b.n	80046ac <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d003      	beq.n	80044f4 <HAL_SPI_TransmitReceive+0x244>
 80044ec:	8a7b      	ldrh	r3, [r7, #18]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	f040 80cf 	bne.w	8004692 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d912      	bls.n	8004524 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004502:	881a      	ldrh	r2, [r3, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450e:	1c9a      	adds	r2, r3, #2
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004518:	b29b      	uxth	r3, r3
 800451a:	3b02      	subs	r3, #2
 800451c:	b29a      	uxth	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004522:	e0b6      	b.n	8004692 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	330c      	adds	r3, #12
 800452e:	7812      	ldrb	r2, [r2, #0]
 8004530:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004536:	1c5a      	adds	r2, r3, #1
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004540:	b29b      	uxth	r3, r3
 8004542:	3b01      	subs	r3, #1
 8004544:	b29a      	uxth	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800454a:	e0a2      	b.n	8004692 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	2b02      	cmp	r3, #2
 8004558:	d134      	bne.n	80045c4 <HAL_SPI_TransmitReceive+0x314>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800455e:	b29b      	uxth	r3, r3
 8004560:	2b00      	cmp	r3, #0
 8004562:	d02f      	beq.n	80045c4 <HAL_SPI_TransmitReceive+0x314>
 8004564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004566:	2b01      	cmp	r3, #1
 8004568:	d12c      	bne.n	80045c4 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800456e:	b29b      	uxth	r3, r3
 8004570:	2b01      	cmp	r3, #1
 8004572:	d912      	bls.n	800459a <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004578:	881a      	ldrh	r2, [r3, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004584:	1c9a      	adds	r2, r3, #2
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800458e:	b29b      	uxth	r3, r3
 8004590:	3b02      	subs	r3, #2
 8004592:	b29a      	uxth	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004598:	e012      	b.n	80045c0 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	330c      	adds	r3, #12
 80045a4:	7812      	ldrb	r2, [r2, #0]
 80045a6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ac:	1c5a      	adds	r2, r3, #1
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	3b01      	subs	r3, #1
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80045c0:	2300      	movs	r3, #0
 80045c2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d148      	bne.n	8004664 <HAL_SPI_TransmitReceive+0x3b4>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045d8:	b29b      	uxth	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d042      	beq.n	8004664 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d923      	bls.n	8004632 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68da      	ldr	r2, [r3, #12]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f4:	b292      	uxth	r2, r2
 80045f6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fc:	1c9a      	adds	r2, r3, #2
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004608:	b29b      	uxth	r3, r3
 800460a:	3b02      	subs	r3, #2
 800460c:	b29a      	uxth	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800461a:	b29b      	uxth	r3, r3
 800461c:	2b01      	cmp	r3, #1
 800461e:	d81f      	bhi.n	8004660 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	685a      	ldr	r2, [r3, #4]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800462e:	605a      	str	r2, [r3, #4]
 8004630:	e016      	b.n	8004660 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f103 020c 	add.w	r2, r3, #12
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463e:	7812      	ldrb	r2, [r2, #0]
 8004640:	b2d2      	uxtb	r2, r2
 8004642:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004648:	1c5a      	adds	r2, r3, #1
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004654:	b29b      	uxth	r3, r3
 8004656:	3b01      	subs	r3, #1
 8004658:	b29a      	uxth	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004660:	2301      	movs	r3, #1
 8004662:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004664:	f7fd fe9a 	bl	800239c <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004670:	429a      	cmp	r2, r3
 8004672:	d803      	bhi.n	800467c <HAL_SPI_TransmitReceive+0x3cc>
 8004674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800467a:	d102      	bne.n	8004682 <HAL_SPI_TransmitReceive+0x3d2>
 800467c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800467e:	2b00      	cmp	r3, #0
 8004680:	d107      	bne.n	8004692 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004690:	e026      	b.n	80046e0 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004696:	b29b      	uxth	r3, r3
 8004698:	2b00      	cmp	r3, #0
 800469a:	f47f af57 	bne.w	800454c <HAL_SPI_TransmitReceive+0x29c>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	f47f af50 	bne.w	800454c <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046ac:	69fa      	ldr	r2, [r7, #28]
 80046ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f000 f93d 	bl	8004930 <SPI_EndRxTxTransaction>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d005      	beq.n	80046c8 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2220      	movs	r2, #32
 80046c6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d003      	beq.n	80046d8 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046d6:	e003      	b.n	80046e0 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80046e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3728      	adds	r7, #40	; 0x28
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b088      	sub	sp, #32
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	603b      	str	r3, [r7, #0]
 8004700:	4613      	mov	r3, r2
 8004702:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004704:	f7fd fe4a 	bl	800239c <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470c:	1a9b      	subs	r3, r3, r2
 800470e:	683a      	ldr	r2, [r7, #0]
 8004710:	4413      	add	r3, r2
 8004712:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004714:	f7fd fe42 	bl	800239c <HAL_GetTick>
 8004718:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800471a:	4b39      	ldr	r3, [pc, #228]	; (8004800 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	015b      	lsls	r3, r3, #5
 8004720:	0d1b      	lsrs	r3, r3, #20
 8004722:	69fa      	ldr	r2, [r7, #28]
 8004724:	fb02 f303 	mul.w	r3, r2, r3
 8004728:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800472a:	e054      	b.n	80047d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004732:	d050      	beq.n	80047d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004734:	f7fd fe32 	bl	800239c <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	69fa      	ldr	r2, [r7, #28]
 8004740:	429a      	cmp	r2, r3
 8004742:	d902      	bls.n	800474a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d13d      	bne.n	80047c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	685a      	ldr	r2, [r3, #4]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004758:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004762:	d111      	bne.n	8004788 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800476c:	d004      	beq.n	8004778 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004776:	d107      	bne.n	8004788 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004786:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004790:	d10f      	bne.n	80047b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047a0:	601a      	str	r2, [r3, #0]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e017      	b.n	80047f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d101      	bne.n	80047d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80047cc:	2300      	movs	r3, #0
 80047ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	3b01      	subs	r3, #1
 80047d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	4013      	ands	r3, r2
 80047e0:	68ba      	ldr	r2, [r7, #8]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	bf0c      	ite	eq
 80047e6:	2301      	moveq	r3, #1
 80047e8:	2300      	movne	r3, #0
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	461a      	mov	r2, r3
 80047ee:	79fb      	ldrb	r3, [r7, #7]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d19b      	bne.n	800472c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3720      	adds	r7, #32
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	20000068 	.word	0x20000068

08004804 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b08a      	sub	sp, #40	; 0x28
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
 8004810:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004812:	2300      	movs	r3, #0
 8004814:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004816:	f7fd fdc1 	bl	800239c <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481e:	1a9b      	subs	r3, r3, r2
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	4413      	add	r3, r2
 8004824:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004826:	f7fd fdb9 	bl	800239c <HAL_GetTick>
 800482a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	330c      	adds	r3, #12
 8004832:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004834:	4b3d      	ldr	r3, [pc, #244]	; (800492c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	4613      	mov	r3, r2
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	4413      	add	r3, r2
 800483e:	00da      	lsls	r2, r3, #3
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	0d1b      	lsrs	r3, r3, #20
 8004844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004846:	fb02 f303 	mul.w	r3, r2, r3
 800484a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800484c:	e060      	b.n	8004910 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004854:	d107      	bne.n	8004866 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d104      	bne.n	8004866 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	b2db      	uxtb	r3, r3
 8004862:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004864:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800486c:	d050      	beq.n	8004910 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800486e:	f7fd fd95 	bl	800239c <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	6a3b      	ldr	r3, [r7, #32]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800487a:	429a      	cmp	r2, r3
 800487c:	d902      	bls.n	8004884 <SPI_WaitFifoStateUntilTimeout+0x80>
 800487e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004880:	2b00      	cmp	r3, #0
 8004882:	d13d      	bne.n	8004900 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	685a      	ldr	r2, [r3, #4]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004892:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800489c:	d111      	bne.n	80048c2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048a6:	d004      	beq.n	80048b2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048b0:	d107      	bne.n	80048c2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048c0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048ca:	d10f      	bne.n	80048ec <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048da:	601a      	str	r2, [r3, #0]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048ea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e010      	b.n	8004922 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004906:	2300      	movs	r3, #0
 8004908:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	3b01      	subs	r3, #1
 800490e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689a      	ldr	r2, [r3, #8]
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	4013      	ands	r3, r2
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	429a      	cmp	r2, r3
 800491e:	d196      	bne.n	800484e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3728      	adds	r7, #40	; 0x28
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	20000068 	.word	0x20000068

08004930 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b086      	sub	sp, #24
 8004934:	af02      	add	r7, sp, #8
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	9300      	str	r3, [sp, #0]
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	2200      	movs	r2, #0
 8004944:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f7ff ff5b 	bl	8004804 <SPI_WaitFifoStateUntilTimeout>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d007      	beq.n	8004964 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004958:	f043 0220 	orr.w	r2, r3, #32
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e027      	b.n	80049b4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	9300      	str	r3, [sp, #0]
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	2200      	movs	r2, #0
 800496c:	2180      	movs	r1, #128	; 0x80
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f7ff fec0 	bl	80046f4 <SPI_WaitFlagStateUntilTimeout>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d007      	beq.n	800498a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800497e:	f043 0220 	orr.w	r2, r3, #32
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e014      	b.n	80049b4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	9300      	str	r3, [sp, #0]
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	2200      	movs	r2, #0
 8004992:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004996:	68f8      	ldr	r0, [r7, #12]
 8004998:	f7ff ff34 	bl	8004804 <SPI_WaitFifoStateUntilTimeout>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d007      	beq.n	80049b2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049a6:	f043 0220 	orr.w	r2, r3, #32
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e000      	b.n	80049b4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3710      	adds	r7, #16
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e049      	b.n	8004a62 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d106      	bne.n	80049e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 f841 	bl	8004a6a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2202      	movs	r2, #2
 80049ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	3304      	adds	r3, #4
 80049f8:	4619      	mov	r1, r3
 80049fa:	4610      	mov	r0, r2
 80049fc:	f000 f9be 	bl	8004d7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3708      	adds	r7, #8
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	b083      	sub	sp, #12
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004a72:	bf00      	nop
 8004a74:	370c      	adds	r7, #12
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
	...

08004a80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d001      	beq.n	8004a98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e03b      	b.n	8004b10 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68da      	ldr	r2, [r3, #12]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f042 0201 	orr.w	r2, r2, #1
 8004aae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a19      	ldr	r2, [pc, #100]	; (8004b1c <HAL_TIM_Base_Start_IT+0x9c>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d009      	beq.n	8004ace <HAL_TIM_Base_Start_IT+0x4e>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ac2:	d004      	beq.n	8004ace <HAL_TIM_Base_Start_IT+0x4e>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a15      	ldr	r2, [pc, #84]	; (8004b20 <HAL_TIM_Base_Start_IT+0xa0>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d115      	bne.n	8004afa <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	689a      	ldr	r2, [r3, #8]
 8004ad4:	4b13      	ldr	r3, [pc, #76]	; (8004b24 <HAL_TIM_Base_Start_IT+0xa4>)
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2b06      	cmp	r3, #6
 8004ade:	d015      	beq.n	8004b0c <HAL_TIM_Base_Start_IT+0x8c>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ae6:	d011      	beq.n	8004b0c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f042 0201 	orr.w	r2, r2, #1
 8004af6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004af8:	e008      	b.n	8004b0c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f042 0201 	orr.w	r2, r2, #1
 8004b08:	601a      	str	r2, [r3, #0]
 8004b0a:	e000      	b.n	8004b0e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b0c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3714      	adds	r7, #20
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	40012c00 	.word	0x40012c00
 8004b20:	40014000 	.word	0x40014000
 8004b24:	00010007 	.word	0x00010007

08004b28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d020      	beq.n	8004b8c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f003 0302 	and.w	r3, r3, #2
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d01b      	beq.n	8004b8c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f06f 0202 	mvn.w	r2, #2
 8004b5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2201      	movs	r2, #1
 8004b62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	f003 0303 	and.w	r3, r3, #3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d003      	beq.n	8004b7a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f8e4 	bl	8004d40 <HAL_TIM_IC_CaptureCallback>
 8004b78:	e005      	b.n	8004b86 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f8d6 	bl	8004d2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 f8e7 	bl	8004d54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	f003 0304 	and.w	r3, r3, #4
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d020      	beq.n	8004bd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f003 0304 	and.w	r3, r3, #4
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d01b      	beq.n	8004bd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f06f 0204 	mvn.w	r2, #4
 8004ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2202      	movs	r2, #2
 8004bae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d003      	beq.n	8004bc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 f8be 	bl	8004d40 <HAL_TIM_IC_CaptureCallback>
 8004bc4:	e005      	b.n	8004bd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f8b0 	bl	8004d2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f000 f8c1 	bl	8004d54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	f003 0308 	and.w	r3, r3, #8
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d020      	beq.n	8004c24 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f003 0308 	and.w	r3, r3, #8
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d01b      	beq.n	8004c24 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f06f 0208 	mvn.w	r2, #8
 8004bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2204      	movs	r2, #4
 8004bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	69db      	ldr	r3, [r3, #28]
 8004c02:	f003 0303 	and.w	r3, r3, #3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d003      	beq.n	8004c12 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f898 	bl	8004d40 <HAL_TIM_IC_CaptureCallback>
 8004c10:	e005      	b.n	8004c1e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 f88a 	bl	8004d2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 f89b 	bl	8004d54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	f003 0310 	and.w	r3, r3, #16
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d020      	beq.n	8004c70 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f003 0310 	and.w	r3, r3, #16
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d01b      	beq.n	8004c70 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f06f 0210 	mvn.w	r2, #16
 8004c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2208      	movs	r2, #8
 8004c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	69db      	ldr	r3, [r3, #28]
 8004c4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d003      	beq.n	8004c5e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f872 	bl	8004d40 <HAL_TIM_IC_CaptureCallback>
 8004c5c:	e005      	b.n	8004c6a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f864 	bl	8004d2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 f875 	bl	8004d54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00c      	beq.n	8004c94 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f003 0301 	and.w	r3, r3, #1
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d007      	beq.n	8004c94 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f06f 0201 	mvn.w	r2, #1
 8004c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f7fd f9c4 	bl	800201c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00c      	beq.n	8004cb8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d007      	beq.n	8004cb8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 f8d0 	bl	8004e58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00c      	beq.n	8004cdc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d007      	beq.n	8004cdc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 f8c8 	bl	8004e6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00c      	beq.n	8004d00 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d007      	beq.n	8004d00 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f834 	bl	8004d68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	f003 0320 	and.w	r3, r3, #32
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00c      	beq.n	8004d24 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f003 0320 	and.w	r3, r3, #32
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d007      	beq.n	8004d24 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f06f 0220 	mvn.w	r2, #32
 8004d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 f890 	bl	8004e44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d24:	bf00      	nop
 8004d26:	3710      	adds	r7, #16
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d34:	bf00      	nop
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d5c:	bf00      	nop
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d70:	bf00      	nop
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b085      	sub	sp, #20
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a2a      	ldr	r2, [pc, #168]	; (8004e38 <TIM_Base_SetConfig+0xbc>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d003      	beq.n	8004d9c <TIM_Base_SetConfig+0x20>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d9a:	d108      	bne.n	8004dae <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004da2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a21      	ldr	r2, [pc, #132]	; (8004e38 <TIM_Base_SetConfig+0xbc>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d00b      	beq.n	8004dce <TIM_Base_SetConfig+0x52>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dbc:	d007      	beq.n	8004dce <TIM_Base_SetConfig+0x52>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a1e      	ldr	r2, [pc, #120]	; (8004e3c <TIM_Base_SetConfig+0xc0>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d003      	beq.n	8004dce <TIM_Base_SetConfig+0x52>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a1d      	ldr	r2, [pc, #116]	; (8004e40 <TIM_Base_SetConfig+0xc4>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d108      	bne.n	8004de0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	689a      	ldr	r2, [r3, #8]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a0c      	ldr	r2, [pc, #48]	; (8004e38 <TIM_Base_SetConfig+0xbc>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d007      	beq.n	8004e1c <TIM_Base_SetConfig+0xa0>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a0b      	ldr	r2, [pc, #44]	; (8004e3c <TIM_Base_SetConfig+0xc0>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d003      	beq.n	8004e1c <TIM_Base_SetConfig+0xa0>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a0a      	ldr	r2, [pc, #40]	; (8004e40 <TIM_Base_SetConfig+0xc4>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d103      	bne.n	8004e24 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	691a      	ldr	r2, [r3, #16]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	615a      	str	r2, [r3, #20]
}
 8004e2a:	bf00      	nop
 8004e2c:	3714      	adds	r7, #20
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	40012c00 	.word	0x40012c00
 8004e3c:	40014000 	.word	0x40014000
 8004e40:	40014400 	.word	0x40014400

08004e44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004e74:	bf00      	nop
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <__itoa>:
 8004e80:	1e93      	subs	r3, r2, #2
 8004e82:	2b22      	cmp	r3, #34	; 0x22
 8004e84:	b510      	push	{r4, lr}
 8004e86:	460c      	mov	r4, r1
 8004e88:	d904      	bls.n	8004e94 <__itoa+0x14>
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	700b      	strb	r3, [r1, #0]
 8004e8e:	461c      	mov	r4, r3
 8004e90:	4620      	mov	r0, r4
 8004e92:	bd10      	pop	{r4, pc}
 8004e94:	2a0a      	cmp	r2, #10
 8004e96:	d109      	bne.n	8004eac <__itoa+0x2c>
 8004e98:	2800      	cmp	r0, #0
 8004e9a:	da07      	bge.n	8004eac <__itoa+0x2c>
 8004e9c:	232d      	movs	r3, #45	; 0x2d
 8004e9e:	700b      	strb	r3, [r1, #0]
 8004ea0:	4240      	negs	r0, r0
 8004ea2:	2101      	movs	r1, #1
 8004ea4:	4421      	add	r1, r4
 8004ea6:	f000 f805 	bl	8004eb4 <__utoa>
 8004eaa:	e7f1      	b.n	8004e90 <__itoa+0x10>
 8004eac:	2100      	movs	r1, #0
 8004eae:	e7f9      	b.n	8004ea4 <__itoa+0x24>

08004eb0 <itoa>:
 8004eb0:	f7ff bfe6 	b.w	8004e80 <__itoa>

08004eb4 <__utoa>:
 8004eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004eb6:	4c1f      	ldr	r4, [pc, #124]	; (8004f34 <__utoa+0x80>)
 8004eb8:	b08b      	sub	sp, #44	; 0x2c
 8004eba:	4605      	mov	r5, r0
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	466e      	mov	r6, sp
 8004ec0:	f104 0c20 	add.w	ip, r4, #32
 8004ec4:	6820      	ldr	r0, [r4, #0]
 8004ec6:	6861      	ldr	r1, [r4, #4]
 8004ec8:	4637      	mov	r7, r6
 8004eca:	c703      	stmia	r7!, {r0, r1}
 8004ecc:	3408      	adds	r4, #8
 8004ece:	4564      	cmp	r4, ip
 8004ed0:	463e      	mov	r6, r7
 8004ed2:	d1f7      	bne.n	8004ec4 <__utoa+0x10>
 8004ed4:	7921      	ldrb	r1, [r4, #4]
 8004ed6:	7139      	strb	r1, [r7, #4]
 8004ed8:	1e91      	subs	r1, r2, #2
 8004eda:	6820      	ldr	r0, [r4, #0]
 8004edc:	6038      	str	r0, [r7, #0]
 8004ede:	2922      	cmp	r1, #34	; 0x22
 8004ee0:	f04f 0100 	mov.w	r1, #0
 8004ee4:	d904      	bls.n	8004ef0 <__utoa+0x3c>
 8004ee6:	7019      	strb	r1, [r3, #0]
 8004ee8:	460b      	mov	r3, r1
 8004eea:	4618      	mov	r0, r3
 8004eec:	b00b      	add	sp, #44	; 0x2c
 8004eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ef0:	1e58      	subs	r0, r3, #1
 8004ef2:	4684      	mov	ip, r0
 8004ef4:	fbb5 f7f2 	udiv	r7, r5, r2
 8004ef8:	fb02 5617 	mls	r6, r2, r7, r5
 8004efc:	3628      	adds	r6, #40	; 0x28
 8004efe:	446e      	add	r6, sp
 8004f00:	460c      	mov	r4, r1
 8004f02:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8004f06:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8004f0a:	462e      	mov	r6, r5
 8004f0c:	42b2      	cmp	r2, r6
 8004f0e:	f101 0101 	add.w	r1, r1, #1
 8004f12:	463d      	mov	r5, r7
 8004f14:	d9ee      	bls.n	8004ef4 <__utoa+0x40>
 8004f16:	2200      	movs	r2, #0
 8004f18:	545a      	strb	r2, [r3, r1]
 8004f1a:	1919      	adds	r1, r3, r4
 8004f1c:	1aa5      	subs	r5, r4, r2
 8004f1e:	42aa      	cmp	r2, r5
 8004f20:	dae3      	bge.n	8004eea <__utoa+0x36>
 8004f22:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8004f26:	780e      	ldrb	r6, [r1, #0]
 8004f28:	7006      	strb	r6, [r0, #0]
 8004f2a:	3201      	adds	r2, #1
 8004f2c:	f801 5901 	strb.w	r5, [r1], #-1
 8004f30:	e7f4      	b.n	8004f1c <__utoa+0x68>
 8004f32:	bf00      	nop
 8004f34:	08005558 	.word	0x08005558

08004f38 <memset>:
 8004f38:	4402      	add	r2, r0
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d100      	bne.n	8004f42 <memset+0xa>
 8004f40:	4770      	bx	lr
 8004f42:	f803 1b01 	strb.w	r1, [r3], #1
 8004f46:	e7f9      	b.n	8004f3c <memset+0x4>

08004f48 <__libc_init_array>:
 8004f48:	b570      	push	{r4, r5, r6, lr}
 8004f4a:	4d0d      	ldr	r5, [pc, #52]	; (8004f80 <__libc_init_array+0x38>)
 8004f4c:	4c0d      	ldr	r4, [pc, #52]	; (8004f84 <__libc_init_array+0x3c>)
 8004f4e:	1b64      	subs	r4, r4, r5
 8004f50:	10a4      	asrs	r4, r4, #2
 8004f52:	2600      	movs	r6, #0
 8004f54:	42a6      	cmp	r6, r4
 8004f56:	d109      	bne.n	8004f6c <__libc_init_array+0x24>
 8004f58:	4d0b      	ldr	r5, [pc, #44]	; (8004f88 <__libc_init_array+0x40>)
 8004f5a:	4c0c      	ldr	r4, [pc, #48]	; (8004f8c <__libc_init_array+0x44>)
 8004f5c:	f000 f818 	bl	8004f90 <_init>
 8004f60:	1b64      	subs	r4, r4, r5
 8004f62:	10a4      	asrs	r4, r4, #2
 8004f64:	2600      	movs	r6, #0
 8004f66:	42a6      	cmp	r6, r4
 8004f68:	d105      	bne.n	8004f76 <__libc_init_array+0x2e>
 8004f6a:	bd70      	pop	{r4, r5, r6, pc}
 8004f6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f70:	4798      	blx	r3
 8004f72:	3601      	adds	r6, #1
 8004f74:	e7ee      	b.n	8004f54 <__libc_init_array+0xc>
 8004f76:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f7a:	4798      	blx	r3
 8004f7c:	3601      	adds	r6, #1
 8004f7e:	e7f2      	b.n	8004f66 <__libc_init_array+0x1e>
 8004f80:	08005580 	.word	0x08005580
 8004f84:	08005580 	.word	0x08005580
 8004f88:	08005580 	.word	0x08005580
 8004f8c:	08005584 	.word	0x08005584

08004f90 <_init>:
 8004f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f92:	bf00      	nop
 8004f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f96:	bc08      	pop	{r3}
 8004f98:	469e      	mov	lr, r3
 8004f9a:	4770      	bx	lr

08004f9c <_fini>:
 8004f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f9e:	bf00      	nop
 8004fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fa2:	bc08      	pop	{r3}
 8004fa4:	469e      	mov	lr, r3
 8004fa6:	4770      	bx	lr
