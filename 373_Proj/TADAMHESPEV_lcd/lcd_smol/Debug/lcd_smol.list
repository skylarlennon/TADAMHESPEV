
lcd_smol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d0c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ac  08004e98  08004e98  00014e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005444  08005444  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08005444  08005444  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005444  08005444  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005444  08005444  00015444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005448  08005448  00015448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800544c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  20000078  080054c4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  080054c4  00020204  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010de3  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000261c  00000000  00000000  00030ece  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010a8  00000000  00000000  000334f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ce0  00000000  00000000  00034598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000217de  00000000  00000000  00035278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000125e0  00000000  00000000  00056a56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ccc49  00000000  00000000  00069036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004700  00000000  00000000  00135c80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  0013a380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000078 	.word	0x20000078
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004e80 	.word	0x08004e80

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	2000007c 	.word	0x2000007c
 80001c8:	08004e80 	.word	0x08004e80

080001cc <__aeabi_drsub>:
 80001cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d0:	e002      	b.n	80001d8 <__adddf3>
 80001d2:	bf00      	nop

080001d4 <__aeabi_dsub>:
 80001d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d8 <__adddf3>:
 80001d8:	b530      	push	{r4, r5, lr}
 80001da:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001de:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e2:	ea94 0f05 	teq	r4, r5
 80001e6:	bf08      	it	eq
 80001e8:	ea90 0f02 	teqeq	r0, r2
 80001ec:	bf1f      	itttt	ne
 80001ee:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fe:	f000 80e2 	beq.w	80003c6 <__adddf3+0x1ee>
 8000202:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000206:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020a:	bfb8      	it	lt
 800020c:	426d      	neglt	r5, r5
 800020e:	dd0c      	ble.n	800022a <__adddf3+0x52>
 8000210:	442c      	add	r4, r5
 8000212:	ea80 0202 	eor.w	r2, r0, r2
 8000216:	ea81 0303 	eor.w	r3, r1, r3
 800021a:	ea82 0000 	eor.w	r0, r2, r0
 800021e:	ea83 0101 	eor.w	r1, r3, r1
 8000222:	ea80 0202 	eor.w	r2, r0, r2
 8000226:	ea81 0303 	eor.w	r3, r1, r3
 800022a:	2d36      	cmp	r5, #54	; 0x36
 800022c:	bf88      	it	hi
 800022e:	bd30      	pophi	{r4, r5, pc}
 8000230:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000234:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000238:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800023c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000240:	d002      	beq.n	8000248 <__adddf3+0x70>
 8000242:	4240      	negs	r0, r0
 8000244:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000248:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800024c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000250:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x84>
 8000256:	4252      	negs	r2, r2
 8000258:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800025c:	ea94 0f05 	teq	r4, r5
 8000260:	f000 80a7 	beq.w	80003b2 <__adddf3+0x1da>
 8000264:	f1a4 0401 	sub.w	r4, r4, #1
 8000268:	f1d5 0e20 	rsbs	lr, r5, #32
 800026c:	db0d      	blt.n	800028a <__adddf3+0xb2>
 800026e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000272:	fa22 f205 	lsr.w	r2, r2, r5
 8000276:	1880      	adds	r0, r0, r2
 8000278:	f141 0100 	adc.w	r1, r1, #0
 800027c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000280:	1880      	adds	r0, r0, r2
 8000282:	fa43 f305 	asr.w	r3, r3, r5
 8000286:	4159      	adcs	r1, r3
 8000288:	e00e      	b.n	80002a8 <__adddf3+0xd0>
 800028a:	f1a5 0520 	sub.w	r5, r5, #32
 800028e:	f10e 0e20 	add.w	lr, lr, #32
 8000292:	2a01      	cmp	r2, #1
 8000294:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000298:	bf28      	it	cs
 800029a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	18c0      	adds	r0, r0, r3
 80002a4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002ac:	d507      	bpl.n	80002be <__adddf3+0xe6>
 80002ae:	f04f 0e00 	mov.w	lr, #0
 80002b2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ba:	eb6e 0101 	sbc.w	r1, lr, r1
 80002be:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c2:	d31b      	bcc.n	80002fc <__adddf3+0x124>
 80002c4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c8:	d30c      	bcc.n	80002e4 <__adddf3+0x10c>
 80002ca:	0849      	lsrs	r1, r1, #1
 80002cc:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d4:	f104 0401 	add.w	r4, r4, #1
 80002d8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002dc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e0:	f080 809a 	bcs.w	8000418 <__adddf3+0x240>
 80002e4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e8:	bf08      	it	eq
 80002ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ee:	f150 0000 	adcs.w	r0, r0, #0
 80002f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f6:	ea41 0105 	orr.w	r1, r1, r5
 80002fa:	bd30      	pop	{r4, r5, pc}
 80002fc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000300:	4140      	adcs	r0, r0
 8000302:	eb41 0101 	adc.w	r1, r1, r1
 8000306:	3c01      	subs	r4, #1
 8000308:	bf28      	it	cs
 800030a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030e:	d2e9      	bcs.n	80002e4 <__adddf3+0x10c>
 8000310:	f091 0f00 	teq	r1, #0
 8000314:	bf04      	itt	eq
 8000316:	4601      	moveq	r1, r0
 8000318:	2000      	moveq	r0, #0
 800031a:	fab1 f381 	clz	r3, r1
 800031e:	bf08      	it	eq
 8000320:	3320      	addeq	r3, #32
 8000322:	f1a3 030b 	sub.w	r3, r3, #11
 8000326:	f1b3 0220 	subs.w	r2, r3, #32
 800032a:	da0c      	bge.n	8000346 <__adddf3+0x16e>
 800032c:	320c      	adds	r2, #12
 800032e:	dd08      	ble.n	8000342 <__adddf3+0x16a>
 8000330:	f102 0c14 	add.w	ip, r2, #20
 8000334:	f1c2 020c 	rsb	r2, r2, #12
 8000338:	fa01 f00c 	lsl.w	r0, r1, ip
 800033c:	fa21 f102 	lsr.w	r1, r1, r2
 8000340:	e00c      	b.n	800035c <__adddf3+0x184>
 8000342:	f102 0214 	add.w	r2, r2, #20
 8000346:	bfd8      	it	le
 8000348:	f1c2 0c20 	rsble	ip, r2, #32
 800034c:	fa01 f102 	lsl.w	r1, r1, r2
 8000350:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000354:	bfdc      	itt	le
 8000356:	ea41 010c 	orrle.w	r1, r1, ip
 800035a:	4090      	lslle	r0, r2
 800035c:	1ae4      	subs	r4, r4, r3
 800035e:	bfa2      	ittt	ge
 8000360:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000364:	4329      	orrge	r1, r5
 8000366:	bd30      	popge	{r4, r5, pc}
 8000368:	ea6f 0404 	mvn.w	r4, r4
 800036c:	3c1f      	subs	r4, #31
 800036e:	da1c      	bge.n	80003aa <__adddf3+0x1d2>
 8000370:	340c      	adds	r4, #12
 8000372:	dc0e      	bgt.n	8000392 <__adddf3+0x1ba>
 8000374:	f104 0414 	add.w	r4, r4, #20
 8000378:	f1c4 0220 	rsb	r2, r4, #32
 800037c:	fa20 f004 	lsr.w	r0, r0, r4
 8000380:	fa01 f302 	lsl.w	r3, r1, r2
 8000384:	ea40 0003 	orr.w	r0, r0, r3
 8000388:	fa21 f304 	lsr.w	r3, r1, r4
 800038c:	ea45 0103 	orr.w	r1, r5, r3
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	f1c4 040c 	rsb	r4, r4, #12
 8000396:	f1c4 0220 	rsb	r2, r4, #32
 800039a:	fa20 f002 	lsr.w	r0, r0, r2
 800039e:	fa01 f304 	lsl.w	r3, r1, r4
 80003a2:	ea40 0003 	orr.w	r0, r0, r3
 80003a6:	4629      	mov	r1, r5
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	fa21 f004 	lsr.w	r0, r1, r4
 80003ae:	4629      	mov	r1, r5
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f094 0f00 	teq	r4, #0
 80003b6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ba:	bf06      	itte	eq
 80003bc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c0:	3401      	addeq	r4, #1
 80003c2:	3d01      	subne	r5, #1
 80003c4:	e74e      	b.n	8000264 <__adddf3+0x8c>
 80003c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ca:	bf18      	it	ne
 80003cc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d0:	d029      	beq.n	8000426 <__adddf3+0x24e>
 80003d2:	ea94 0f05 	teq	r4, r5
 80003d6:	bf08      	it	eq
 80003d8:	ea90 0f02 	teqeq	r0, r2
 80003dc:	d005      	beq.n	80003ea <__adddf3+0x212>
 80003de:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e2:	bf04      	itt	eq
 80003e4:	4619      	moveq	r1, r3
 80003e6:	4610      	moveq	r0, r2
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea91 0f03 	teq	r1, r3
 80003ee:	bf1e      	ittt	ne
 80003f0:	2100      	movne	r1, #0
 80003f2:	2000      	movne	r0, #0
 80003f4:	bd30      	popne	{r4, r5, pc}
 80003f6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fa:	d105      	bne.n	8000408 <__adddf3+0x230>
 80003fc:	0040      	lsls	r0, r0, #1
 80003fe:	4149      	adcs	r1, r1
 8000400:	bf28      	it	cs
 8000402:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000406:	bd30      	pop	{r4, r5, pc}
 8000408:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800040c:	bf3c      	itt	cc
 800040e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000412:	bd30      	popcc	{r4, r5, pc}
 8000414:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000418:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800041c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000420:	f04f 0000 	mov.w	r0, #0
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042a:	bf1a      	itte	ne
 800042c:	4619      	movne	r1, r3
 800042e:	4610      	movne	r0, r2
 8000430:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000434:	bf1c      	itt	ne
 8000436:	460b      	movne	r3, r1
 8000438:	4602      	movne	r2, r0
 800043a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043e:	bf06      	itte	eq
 8000440:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000444:	ea91 0f03 	teqeq	r1, r3
 8000448:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	bf00      	nop

08000450 <__aeabi_ui2d>:
 8000450:	f090 0f00 	teq	r0, #0
 8000454:	bf04      	itt	eq
 8000456:	2100      	moveq	r1, #0
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000460:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000464:	f04f 0500 	mov.w	r5, #0
 8000468:	f04f 0100 	mov.w	r1, #0
 800046c:	e750      	b.n	8000310 <__adddf3+0x138>
 800046e:	bf00      	nop

08000470 <__aeabi_i2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000484:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000488:	bf48      	it	mi
 800048a:	4240      	negmi	r0, r0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e73e      	b.n	8000310 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_f2d>:
 8000494:	0042      	lsls	r2, r0, #1
 8000496:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049a:	ea4f 0131 	mov.w	r1, r1, rrx
 800049e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a2:	bf1f      	itttt	ne
 80004a4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004ac:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b0:	4770      	bxne	lr
 80004b2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b6:	bf08      	it	eq
 80004b8:	4770      	bxeq	lr
 80004ba:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004be:	bf04      	itt	eq
 80004c0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d4:	e71c      	b.n	8000310 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_ul2d>:
 80004d8:	ea50 0201 	orrs.w	r2, r0, r1
 80004dc:	bf08      	it	eq
 80004de:	4770      	bxeq	lr
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	f04f 0500 	mov.w	r5, #0
 80004e6:	e00a      	b.n	80004fe <__aeabi_l2d+0x16>

080004e8 <__aeabi_l2d>:
 80004e8:	ea50 0201 	orrs.w	r2, r0, r1
 80004ec:	bf08      	it	eq
 80004ee:	4770      	bxeq	lr
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f6:	d502      	bpl.n	80004fe <__aeabi_l2d+0x16>
 80004f8:	4240      	negs	r0, r0
 80004fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fe:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000502:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000506:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050a:	f43f aed8 	beq.w	80002be <__adddf3+0xe6>
 800050e:	f04f 0203 	mov.w	r2, #3
 8000512:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000516:	bf18      	it	ne
 8000518:	3203      	addne	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000526:	f1c2 0320 	rsb	r3, r2, #32
 800052a:	fa00 fc03 	lsl.w	ip, r0, r3
 800052e:	fa20 f002 	lsr.w	r0, r0, r2
 8000532:	fa01 fe03 	lsl.w	lr, r1, r3
 8000536:	ea40 000e 	orr.w	r0, r0, lr
 800053a:	fa21 f102 	lsr.w	r1, r1, r2
 800053e:	4414      	add	r4, r2
 8000540:	e6bd      	b.n	80002be <__adddf3+0xe6>
 8000542:	bf00      	nop

08000544 <__aeabi_dmul>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000552:	bf1d      	ittte	ne
 8000554:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000558:	ea94 0f0c 	teqne	r4, ip
 800055c:	ea95 0f0c 	teqne	r5, ip
 8000560:	f000 f8de 	bleq	8000720 <__aeabi_dmul+0x1dc>
 8000564:	442c      	add	r4, r5
 8000566:	ea81 0603 	eor.w	r6, r1, r3
 800056a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000572:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000576:	bf18      	it	ne
 8000578:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800057c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000580:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000584:	d038      	beq.n	80005f8 <__aeabi_dmul+0xb4>
 8000586:	fba0 ce02 	umull	ip, lr, r0, r2
 800058a:	f04f 0500 	mov.w	r5, #0
 800058e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000592:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000596:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059a:	f04f 0600 	mov.w	r6, #0
 800059e:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a2:	f09c 0f00 	teq	ip, #0
 80005a6:	bf18      	it	ne
 80005a8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005ac:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b8:	d204      	bcs.n	80005c4 <__aeabi_dmul+0x80>
 80005ba:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005be:	416d      	adcs	r5, r5
 80005c0:	eb46 0606 	adc.w	r6, r6, r6
 80005c4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005cc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005dc:	bf88      	it	hi
 80005de:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e2:	d81e      	bhi.n	8000622 <__aeabi_dmul+0xde>
 80005e4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e8:	bf08      	it	eq
 80005ea:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ee:	f150 0000 	adcs.w	r0, r0, #0
 80005f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005fc:	ea46 0101 	orr.w	r1, r6, r1
 8000600:	ea40 0002 	orr.w	r0, r0, r2
 8000604:	ea81 0103 	eor.w	r1, r1, r3
 8000608:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800060c:	bfc2      	ittt	gt
 800060e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000612:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000616:	bd70      	popgt	{r4, r5, r6, pc}
 8000618:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800061c:	f04f 0e00 	mov.w	lr, #0
 8000620:	3c01      	subs	r4, #1
 8000622:	f300 80ab 	bgt.w	800077c <__aeabi_dmul+0x238>
 8000626:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062a:	bfde      	ittt	le
 800062c:	2000      	movle	r0, #0
 800062e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000632:	bd70      	pople	{r4, r5, r6, pc}
 8000634:	f1c4 0400 	rsb	r4, r4, #0
 8000638:	3c20      	subs	r4, #32
 800063a:	da35      	bge.n	80006a8 <__aeabi_dmul+0x164>
 800063c:	340c      	adds	r4, #12
 800063e:	dc1b      	bgt.n	8000678 <__aeabi_dmul+0x134>
 8000640:	f104 0414 	add.w	r4, r4, #20
 8000644:	f1c4 0520 	rsb	r5, r4, #32
 8000648:	fa00 f305 	lsl.w	r3, r0, r5
 800064c:	fa20 f004 	lsr.w	r0, r0, r4
 8000650:	fa01 f205 	lsl.w	r2, r1, r5
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800065c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000660:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000664:	fa21 f604 	lsr.w	r6, r1, r4
 8000668:	eb42 0106 	adc.w	r1, r2, r6
 800066c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000670:	bf08      	it	eq
 8000672:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f1c4 040c 	rsb	r4, r4, #12
 800067c:	f1c4 0520 	rsb	r5, r4, #32
 8000680:	fa00 f304 	lsl.w	r3, r0, r4
 8000684:	fa20 f005 	lsr.w	r0, r0, r5
 8000688:	fa01 f204 	lsl.w	r2, r1, r4
 800068c:	ea40 0002 	orr.w	r0, r0, r2
 8000690:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	f141 0100 	adc.w	r1, r1, #0
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f205 	lsl.w	r2, r0, r5
 80006b0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b4:	fa20 f304 	lsr.w	r3, r0, r4
 80006b8:	fa01 f205 	lsl.w	r2, r1, r5
 80006bc:	ea43 0302 	orr.w	r3, r3, r2
 80006c0:	fa21 f004 	lsr.w	r0, r1, r4
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	fa21 f204 	lsr.w	r2, r1, r4
 80006cc:	ea20 0002 	bic.w	r0, r0, r2
 80006d0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f094 0f00 	teq	r4, #0
 80006e4:	d10f      	bne.n	8000706 <__aeabi_dmul+0x1c2>
 80006e6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ea:	0040      	lsls	r0, r0, #1
 80006ec:	eb41 0101 	adc.w	r1, r1, r1
 80006f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f4:	bf08      	it	eq
 80006f6:	3c01      	subeq	r4, #1
 80006f8:	d0f7      	beq.n	80006ea <__aeabi_dmul+0x1a6>
 80006fa:	ea41 0106 	orr.w	r1, r1, r6
 80006fe:	f095 0f00 	teq	r5, #0
 8000702:	bf18      	it	ne
 8000704:	4770      	bxne	lr
 8000706:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070a:	0052      	lsls	r2, r2, #1
 800070c:	eb43 0303 	adc.w	r3, r3, r3
 8000710:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000714:	bf08      	it	eq
 8000716:	3d01      	subeq	r5, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1c6>
 800071a:	ea43 0306 	orr.w	r3, r3, r6
 800071e:	4770      	bx	lr
 8000720:	ea94 0f0c 	teq	r4, ip
 8000724:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000728:	bf18      	it	ne
 800072a:	ea95 0f0c 	teqne	r5, ip
 800072e:	d00c      	beq.n	800074a <__aeabi_dmul+0x206>
 8000730:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000734:	bf18      	it	ne
 8000736:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073a:	d1d1      	bne.n	80006e0 <__aeabi_dmul+0x19c>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074e:	bf06      	itte	eq
 8000750:	4610      	moveq	r0, r2
 8000752:	4619      	moveq	r1, r3
 8000754:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000758:	d019      	beq.n	800078e <__aeabi_dmul+0x24a>
 800075a:	ea94 0f0c 	teq	r4, ip
 800075e:	d102      	bne.n	8000766 <__aeabi_dmul+0x222>
 8000760:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000764:	d113      	bne.n	800078e <__aeabi_dmul+0x24a>
 8000766:	ea95 0f0c 	teq	r5, ip
 800076a:	d105      	bne.n	8000778 <__aeabi_dmul+0x234>
 800076c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000770:	bf1c      	itt	ne
 8000772:	4610      	movne	r0, r2
 8000774:	4619      	movne	r1, r3
 8000776:	d10a      	bne.n	800078e <__aeabi_dmul+0x24a>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000784:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000792:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000796:	bd70      	pop	{r4, r5, r6, pc}

08000798 <__aeabi_ddiv>:
 8000798:	b570      	push	{r4, r5, r6, lr}
 800079a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a6:	bf1d      	ittte	ne
 80007a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007ac:	ea94 0f0c 	teqne	r4, ip
 80007b0:	ea95 0f0c 	teqne	r5, ip
 80007b4:	f000 f8a7 	bleq	8000906 <__aeabi_ddiv+0x16e>
 80007b8:	eba4 0405 	sub.w	r4, r4, r5
 80007bc:	ea81 0e03 	eor.w	lr, r1, r3
 80007c0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c8:	f000 8088 	beq.w	80008dc <__aeabi_ddiv+0x144>
 80007cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007dc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007ec:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f0:	429d      	cmp	r5, r3
 80007f2:	bf08      	it	eq
 80007f4:	4296      	cmpeq	r6, r2
 80007f6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fa:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fe:	d202      	bcs.n	8000806 <__aeabi_ddiv+0x6e>
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	1ab6      	subs	r6, r6, r2
 8000808:	eb65 0503 	sbc.w	r5, r5, r3
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000816:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081a:	ebb6 0e02 	subs.w	lr, r6, r2
 800081e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000822:	bf22      	ittt	cs
 8000824:	1ab6      	subcs	r6, r6, r2
 8000826:	4675      	movcs	r5, lr
 8000828:	ea40 000c 	orrcs.w	r0, r0, ip
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	ebb6 0e02 	subs.w	lr, r6, r2
 8000836:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083a:	bf22      	ittt	cs
 800083c:	1ab6      	subcs	r6, r6, r2
 800083e:	4675      	movcs	r5, lr
 8000840:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000874:	ea55 0e06 	orrs.w	lr, r5, r6
 8000878:	d018      	beq.n	80008ac <__aeabi_ddiv+0x114>
 800087a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000882:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000886:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000892:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000896:	d1c0      	bne.n	800081a <__aeabi_ddiv+0x82>
 8000898:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800089c:	d10b      	bne.n	80008b6 <__aeabi_ddiv+0x11e>
 800089e:	ea41 0100 	orr.w	r1, r1, r0
 80008a2:	f04f 0000 	mov.w	r0, #0
 80008a6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008aa:	e7b6      	b.n	800081a <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	bf04      	itt	eq
 80008b2:	4301      	orreq	r1, r0
 80008b4:	2000      	moveq	r0, #0
 80008b6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ba:	bf88      	it	hi
 80008bc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c0:	f63f aeaf 	bhi.w	8000622 <__aeabi_dmul+0xde>
 80008c4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c8:	bf04      	itt	eq
 80008ca:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d2:	f150 0000 	adcs.w	r0, r0, #0
 80008d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008da:	bd70      	pop	{r4, r5, r6, pc}
 80008dc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e8:	bfc2      	ittt	gt
 80008ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f2:	bd70      	popgt	{r4, r5, r6, pc}
 80008f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f8:	f04f 0e00 	mov.w	lr, #0
 80008fc:	3c01      	subs	r4, #1
 80008fe:	e690      	b.n	8000622 <__aeabi_dmul+0xde>
 8000900:	ea45 0e06 	orr.w	lr, r5, r6
 8000904:	e68d      	b.n	8000622 <__aeabi_dmul+0xde>
 8000906:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090a:	ea94 0f0c 	teq	r4, ip
 800090e:	bf08      	it	eq
 8000910:	ea95 0f0c 	teqeq	r5, ip
 8000914:	f43f af3b 	beq.w	800078e <__aeabi_dmul+0x24a>
 8000918:	ea94 0f0c 	teq	r4, ip
 800091c:	d10a      	bne.n	8000934 <__aeabi_ddiv+0x19c>
 800091e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000922:	f47f af34 	bne.w	800078e <__aeabi_dmul+0x24a>
 8000926:	ea95 0f0c 	teq	r5, ip
 800092a:	f47f af25 	bne.w	8000778 <__aeabi_dmul+0x234>
 800092e:	4610      	mov	r0, r2
 8000930:	4619      	mov	r1, r3
 8000932:	e72c      	b.n	800078e <__aeabi_dmul+0x24a>
 8000934:	ea95 0f0c 	teq	r5, ip
 8000938:	d106      	bne.n	8000948 <__aeabi_ddiv+0x1b0>
 800093a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093e:	f43f aefd 	beq.w	800073c <__aeabi_dmul+0x1f8>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e722      	b.n	800078e <__aeabi_dmul+0x24a>
 8000948:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800094c:	bf18      	it	ne
 800094e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000952:	f47f aec5 	bne.w	80006e0 <__aeabi_dmul+0x19c>
 8000956:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095a:	f47f af0d 	bne.w	8000778 <__aeabi_dmul+0x234>
 800095e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000962:	f47f aeeb 	bne.w	800073c <__aeabi_dmul+0x1f8>
 8000966:	e712      	b.n	800078e <__aeabi_dmul+0x24a>

08000968 <__aeabi_d2iz>:
 8000968:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800096c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000970:	d215      	bcs.n	800099e <__aeabi_d2iz+0x36>
 8000972:	d511      	bpl.n	8000998 <__aeabi_d2iz+0x30>
 8000974:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000978:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800097c:	d912      	bls.n	80009a4 <__aeabi_d2iz+0x3c>
 800097e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000982:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000986:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800098e:	fa23 f002 	lsr.w	r0, r3, r2
 8000992:	bf18      	it	ne
 8000994:	4240      	negne	r0, r0
 8000996:	4770      	bx	lr
 8000998:	f04f 0000 	mov.w	r0, #0
 800099c:	4770      	bx	lr
 800099e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a2:	d105      	bne.n	80009b0 <__aeabi_d2iz+0x48>
 80009a4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009a8:	bf08      	it	eq
 80009aa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009ae:	4770      	bx	lr
 80009b0:	f04f 0000 	mov.w	r0, #0
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <uint16_to_bytes>:
  }
#endif

// Probably going to move these to a different file, but for now
void uint16_to_bytes(uint16_t in, uint8_t *out)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	6039      	str	r1, [r7, #0]
 80009c2:	80fb      	strh	r3, [r7, #6]
	out[0] = (in >> 8) & 0xFF;
 80009c4:	88fb      	ldrh	r3, [r7, #6]
 80009c6:	0a1b      	lsrs	r3, r3, #8
 80009c8:	b29b      	uxth	r3, r3
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	701a      	strb	r2, [r3, #0]
	out[1] = in & 0xFF;
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	3301      	adds	r3, #1
 80009d4:	88fa      	ldrh	r2, [r7, #6]
 80009d6:	b2d2      	uxtb	r2, r2
 80009d8:	701a      	strb	r2, [r3, #0]
}
 80009da:	bf00      	nop
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
	...

080009e8 <LCD_reset>:
	HX8357_DISPON, 0x80 +  50/5, // Main screen turn on, delay 50 ms
	0,                           // END OF COMMAND LIST
  };

void LCD_reset()
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 80009ec:	2201      	movs	r2, #1
 80009ee:	2110      	movs	r1, #16
 80009f0:	480b      	ldr	r0, [pc, #44]	; (8000a20 <LCD_reset+0x38>)
 80009f2:	f001 fd07 	bl	8002404 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80009f6:	2064      	movs	r0, #100	; 0x64
 80009f8:	f001 fa94 	bl	8001f24 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 80009fc:	2200      	movs	r2, #0
 80009fe:	2110      	movs	r1, #16
 8000a00:	4807      	ldr	r0, [pc, #28]	; (8000a20 <LCD_reset+0x38>)
 8000a02:	f001 fcff 	bl	8002404 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000a06:	2064      	movs	r0, #100	; 0x64
 8000a08:	f001 fa8c 	bl	8001f24 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	2110      	movs	r1, #16
 8000a10:	4803      	ldr	r0, [pc, #12]	; (8000a20 <LCD_reset+0x38>)
 8000a12:	f001 fcf7 	bl	8002404 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000a16:	20c8      	movs	r0, #200	; 0xc8
 8000a18:	f001 fa84 	bl	8001f24 <HAL_Delay>
}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	48000400 	.word	0x48000400

08000a24 <LCD_writeCommand>:

HAL_StatusTypeDef LCD_writeCommand(SPI_HandleTypeDef* spi, uint8_t cmd)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af02      	add	r7, sp, #8
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	460b      	mov	r3, r1
 8000a2e:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef result;
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2120      	movs	r1, #32
 8000a34:	480b      	ldr	r0, [pc, #44]	; (8000a64 <LCD_writeCommand+0x40>)
 8000a36:	f001 fce5 	bl	8002404 <HAL_GPIO_WritePin>
	uint8_t buf[1];
	result = HAL_SPI_TransmitReceive(spi, &cmd, &buf[0], 1, 100);
 8000a3a:	f107 020c 	add.w	r2, r7, #12
 8000a3e:	1cf9      	adds	r1, r7, #3
 8000a40:	2364      	movs	r3, #100	; 0x64
 8000a42:	9300      	str	r3, [sp, #0]
 8000a44:	2301      	movs	r3, #1
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f003 f9ea 	bl	8003e20 <HAL_SPI_TransmitReceive>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000a50:	2201      	movs	r2, #1
 8000a52:	2120      	movs	r1, #32
 8000a54:	4803      	ldr	r0, [pc, #12]	; (8000a64 <LCD_writeCommand+0x40>)
 8000a56:	f001 fcd5 	bl	8002404 <HAL_GPIO_WritePin>
	return result;
 8000a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3710      	adds	r7, #16
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	48000400 	.word	0x48000400

08000a68 <LCD_startWrite>:

void LCD_startWrite()
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2140      	movs	r1, #64	; 0x40
 8000a70:	4802      	ldr	r0, [pc, #8]	; (8000a7c <LCD_startWrite+0x14>)
 8000a72:	f001 fcc7 	bl	8002404 <HAL_GPIO_WritePin>
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	48000400 	.word	0x48000400

08000a80 <LCD_endWrite>:

void LCD_endWrite()
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000a84:	2201      	movs	r2, #1
 8000a86:	2140      	movs	r1, #64	; 0x40
 8000a88:	4802      	ldr	r0, [pc, #8]	; (8000a94 <LCD_endWrite+0x14>)
 8000a8a:	f001 fcbb 	bl	8002404 <HAL_GPIO_WritePin>
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	48000400 	.word	0x48000400

08000a98 <LCD_begin>:

int LCD_begin(SPI_HandleTypeDef* spi)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	LCD_reset();
 8000aa0:	f7ff ffa2 	bl	80009e8 <LCD_reset>
	LCD_startWrite();
 8000aa4:	f7ff ffe0 	bl	8000a68 <LCD_startWrite>
	uint8_t *addr = init;
 8000aa8:	4b26      	ldr	r3, [pc, #152]	; (8000b44 <LCD_begin+0xac>)
 8000aaa:	60fb      	str	r3, [r7, #12]
	uint8_t cmd, x, numArgs;
	HAL_StatusTypeDef result;
	while((cmd = *(addr++)) > 0) // '0' command ends list
 8000aac:	e03b      	b.n	8000b26 <LCD_begin+0x8e>
	{
		if (cmd != 0xFF) // '255' is ignored
 8000aae:	7abb      	ldrb	r3, [r7, #10]
 8000ab0:	2bff      	cmp	r3, #255	; 0xff
 8000ab2:	d00d      	beq.n	8000ad0 <LCD_begin+0x38>
		{
			result = LCD_writeCommand(spi, cmd);
 8000ab4:	7abb      	ldrb	r3, [r7, #10]
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f7ff ffb3 	bl	8000a24 <LCD_writeCommand>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	727b      	strb	r3, [r7, #9]
			if (result != HAL_OK)
 8000ac2:	7a7b      	ldrb	r3, [r7, #9]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d003      	beq.n	8000ad0 <LCD_begin+0x38>
			{
				LCD_endWrite();
 8000ac8:	f7ff ffda 	bl	8000a80 <LCD_endWrite>
				return 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	e035      	b.n	8000b3c <LCD_begin+0xa4>
			}
		}
		x = *(addr++);
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	1c5a      	adds	r2, r3, #1
 8000ad4:	60fa      	str	r2, [r7, #12]
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	723b      	strb	r3, [r7, #8]
		numArgs = x & 0x7F;
 8000ada:	7a3b      	ldrb	r3, [r7, #8]
 8000adc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ae0:	72fb      	strb	r3, [r7, #11]
		if (x & 0x80) // If high bit set...
 8000ae2:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	da18      	bge.n	8000b1c <LCD_begin+0x84>
		{
			HAL_Delay(numArgs * 5); // numArgs is actually a delay time (5ms units)
 8000aea:	7afa      	ldrb	r2, [r7, #11]
 8000aec:	4613      	mov	r3, r2
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	4413      	add	r3, r2
 8000af2:	4618      	mov	r0, r3
 8000af4:	f001 fa16 	bl	8001f24 <HAL_Delay>
 8000af8:	e015      	b.n	8000b26 <LCD_begin+0x8e>
		}
		else // Otherwise, issue args to command...
		{
			while (numArgs--)
			{
				result = HAL_SPI_Transmit(spi, addr++, 1, 100);
 8000afa:	68f9      	ldr	r1, [r7, #12]
 8000afc:	1c4b      	adds	r3, r1, #1
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	2364      	movs	r3, #100	; 0x64
 8000b02:	2201      	movs	r2, #1
 8000b04:	6878      	ldr	r0, [r7, #4]
 8000b06:	f003 f816 	bl	8003b36 <HAL_SPI_Transmit>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	727b      	strb	r3, [r7, #9]
				if (result != HAL_OK)
 8000b0e:	7a7b      	ldrb	r3, [r7, #9]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d003      	beq.n	8000b1c <LCD_begin+0x84>
				{
					LCD_endWrite();
 8000b14:	f7ff ffb4 	bl	8000a80 <LCD_endWrite>
					return 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	e00f      	b.n	8000b3c <LCD_begin+0xa4>
			while (numArgs--)
 8000b1c:	7afb      	ldrb	r3, [r7, #11]
 8000b1e:	1e5a      	subs	r2, r3, #1
 8000b20:	72fa      	strb	r2, [r7, #11]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d1e9      	bne.n	8000afa <LCD_begin+0x62>
	while((cmd = *(addr++)) > 0) // '0' command ends list
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	1c5a      	adds	r2, r3, #1
 8000b2a:	60fa      	str	r2, [r7, #12]
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	72bb      	strb	r3, [r7, #10]
 8000b30:	7abb      	ldrb	r3, [r7, #10]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d1bb      	bne.n	8000aae <LCD_begin+0x16>
				}
			}
		}
	}
	LCD_endWrite();
 8000b36:	f7ff ffa3 	bl	8000a80 <LCD_endWrite>
	return 1;
 8000b3a:	2301      	movs	r3, #1
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3710      	adds	r7, #16
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000000 	.word	0x20000000

08000b48 <LCD_setAddrWindow>:
	LCD_endWrite();
	return result == HAL_OK;
}

int LCD_setAddrWindow(SPI_HandleTypeDef* spi, uint16_t x1, uint16_t y1, uint16_t w, uint16_t h)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	4608      	mov	r0, r1
 8000b52:	4611      	mov	r1, r2
 8000b54:	461a      	mov	r2, r3
 8000b56:	4603      	mov	r3, r0
 8000b58:	817b      	strh	r3, [r7, #10]
 8000b5a:	460b      	mov	r3, r1
 8000b5c:	813b      	strh	r3, [r7, #8]
 8000b5e:	4613      	mov	r3, r2
 8000b60:	80fb      	strh	r3, [r7, #6]
	uint16_t x2 = x1 + w - 1;
 8000b62:	897a      	ldrh	r2, [r7, #10]
 8000b64:	88fb      	ldrh	r3, [r7, #6]
 8000b66:	4413      	add	r3, r2
 8000b68:	b29b      	uxth	r3, r3
 8000b6a:	3b01      	subs	r3, #1
 8000b6c:	82fb      	strh	r3, [r7, #22]
	uint16_t y2 = y1 + h - 1;
 8000b6e:	893a      	ldrh	r2, [r7, #8]
 8000b70:	8c3b      	ldrh	r3, [r7, #32]
 8000b72:	4413      	add	r3, r2
 8000b74:	b29b      	uxth	r3, r3
 8000b76:	3b01      	subs	r3, #1
 8000b78:	82bb      	strh	r3, [r7, #20]
	uint8_t buf[2];

	LCD_startWrite();
 8000b7a:	f7ff ff75 	bl	8000a68 <LCD_startWrite>
	LCD_writeCommand(spi, HX8357_CASET); // Column address set
 8000b7e:	212a      	movs	r1, #42	; 0x2a
 8000b80:	68f8      	ldr	r0, [r7, #12]
 8000b82:	f7ff ff4f 	bl	8000a24 <LCD_writeCommand>

	uint16_to_bytes(x1, buf);
 8000b86:	f107 0210 	add.w	r2, r7, #16
 8000b8a:	897b      	ldrh	r3, [r7, #10]
 8000b8c:	4611      	mov	r1, r2
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff ff12 	bl	80009b8 <uint16_to_bytes>
	HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 8000b94:	f107 0110 	add.w	r1, r7, #16
 8000b98:	2364      	movs	r3, #100	; 0x64
 8000b9a:	2202      	movs	r2, #2
 8000b9c:	68f8      	ldr	r0, [r7, #12]
 8000b9e:	f002 ffca 	bl	8003b36 <HAL_SPI_Transmit>

	uint16_to_bytes(x2, buf);
 8000ba2:	f107 0210 	add.w	r2, r7, #16
 8000ba6:	8afb      	ldrh	r3, [r7, #22]
 8000ba8:	4611      	mov	r1, r2
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff ff04 	bl	80009b8 <uint16_to_bytes>
	HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 8000bb0:	f107 0110 	add.w	r1, r7, #16
 8000bb4:	2364      	movs	r3, #100	; 0x64
 8000bb6:	2202      	movs	r2, #2
 8000bb8:	68f8      	ldr	r0, [r7, #12]
 8000bba:	f002 ffbc 	bl	8003b36 <HAL_SPI_Transmit>

	LCD_writeCommand(spi, HX8357_PASET); // Row address set
 8000bbe:	212b      	movs	r1, #43	; 0x2b
 8000bc0:	68f8      	ldr	r0, [r7, #12]
 8000bc2:	f7ff ff2f 	bl	8000a24 <LCD_writeCommand>

	uint16_to_bytes(y1, buf);
 8000bc6:	f107 0210 	add.w	r2, r7, #16
 8000bca:	893b      	ldrh	r3, [r7, #8]
 8000bcc:	4611      	mov	r1, r2
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff fef2 	bl	80009b8 <uint16_to_bytes>
	HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 8000bd4:	f107 0110 	add.w	r1, r7, #16
 8000bd8:	2364      	movs	r3, #100	; 0x64
 8000bda:	2202      	movs	r2, #2
 8000bdc:	68f8      	ldr	r0, [r7, #12]
 8000bde:	f002 ffaa 	bl	8003b36 <HAL_SPI_Transmit>

	uint16_to_bytes(y2, buf);
 8000be2:	f107 0210 	add.w	r2, r7, #16
 8000be6:	8abb      	ldrh	r3, [r7, #20]
 8000be8:	4611      	mov	r1, r2
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff fee4 	bl	80009b8 <uint16_to_bytes>
	HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 8000bf0:	f107 0110 	add.w	r1, r7, #16
 8000bf4:	2364      	movs	r3, #100	; 0x64
 8000bf6:	2202      	movs	r2, #2
 8000bf8:	68f8      	ldr	r0, [r7, #12]
 8000bfa:	f002 ff9c 	bl	8003b36 <HAL_SPI_Transmit>

	LCD_endWrite();
 8000bfe:	f7ff ff3f 	bl	8000a80 <LCD_endWrite>
	return 1;
 8000c02:	2301      	movs	r3, #1
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3718      	adds	r7, #24
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <LCD_color565>:

uint16_t LCD_color565(uint8_t red, uint8_t green, uint8_t blue) {
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]
 8000c16:	460b      	mov	r3, r1
 8000c18:	71bb      	strb	r3, [r7, #6]
 8000c1a:	4613      	mov	r3, r2
 8000c1c:	717b      	strb	r3, [r7, #5]
    return ((red & 0xF8) << 8) | ((green & 0xFC) << 3) | ((blue & 0xF8) >> 3);
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	021b      	lsls	r3, r3, #8
 8000c22:	b21b      	sxth	r3, r3
 8000c24:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000c28:	f023 0307 	bic.w	r3, r3, #7
 8000c2c:	b21a      	sxth	r2, r3
 8000c2e:	79bb      	ldrb	r3, [r7, #6]
 8000c30:	00db      	lsls	r3, r3, #3
 8000c32:	b21b      	sxth	r3, r3
 8000c34:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8000c38:	b21b      	sxth	r3, r3
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	b21a      	sxth	r2, r3
 8000c3e:	797b      	ldrb	r3, [r7, #5]
 8000c40:	08db      	lsrs	r3, r3, #3
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	b21b      	sxth	r3, r3
 8000c46:	4313      	orrs	r3, r2
 8000c48:	b21b      	sxth	r3, r3
 8000c4a:	b29b      	uxth	r3, r3
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <LCD_pushColor>:

int LCD_pushColor(SPI_HandleTypeDef* spi, uint16_t color) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	460b      	mov	r3, r1
 8000c62:	807b      	strh	r3, [r7, #2]
	LCD_startWrite();
 8000c64:	f7ff ff00 	bl	8000a68 <LCD_startWrite>
	LCD_writeCommand(spi, HX8357_RAMWR); // Write to RAM
 8000c68:	212c      	movs	r1, #44	; 0x2c
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f7ff feda 	bl	8000a24 <LCD_writeCommand>
	HAL_SPI_Transmit(spi, (uint8_t*)&color, 2, 100);
 8000c70:	1cb9      	adds	r1, r7, #2
 8000c72:	2364      	movs	r3, #100	; 0x64
 8000c74:	2202      	movs	r2, #2
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f002 ff5d 	bl	8003b36 <HAL_SPI_Transmit>
	LCD_writeCommand(spi, HX8357_NOP); // Write command to stop RAMWR
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f7ff fed0 	bl	8000a24 <LCD_writeCommand>
	LCD_endWrite();
 8000c84:	f7ff fefc 	bl	8000a80 <LCD_endWrite>
	return 1;
 8000c88:	2301      	movs	r3, #1
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <LCD_pushColorCopy>:

int LCD_pushColorCopy(SPI_HandleTypeDef* spi, uint16_t color, uint32_t count) {
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b086      	sub	sp, #24
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	60f8      	str	r0, [r7, #12]
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	607a      	str	r2, [r7, #4]
 8000c9e:	817b      	strh	r3, [r7, #10]
	LCD_startWrite();
 8000ca0:	f7ff fee2 	bl	8000a68 <LCD_startWrite>

	LCD_writeCommand(spi, HX8357_RAMWR); // Write to RAM
 8000ca4:	212c      	movs	r1, #44	; 0x2c
 8000ca6:	68f8      	ldr	r0, [r7, #12]
 8000ca8:	f7ff febc 	bl	8000a24 <LCD_writeCommand>

	uint8_t buf[2];
	uint16_to_bytes(color, &buf[0]);
 8000cac:	f107 0210 	add.w	r2, r7, #16
 8000cb0:	897b      	ldrh	r3, [r7, #10]
 8000cb2:	4611      	mov	r1, r2
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff fe7f 	bl	80009b8 <uint16_to_bytes>
	for (int i = 0; i < count; ++i)
 8000cba:	2300      	movs	r3, #0
 8000cbc:	617b      	str	r3, [r7, #20]
 8000cbe:	e009      	b.n	8000cd4 <LCD_pushColorCopy+0x42>
	{
		HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 8000cc0:	f107 0110 	add.w	r1, r7, #16
 8000cc4:	2364      	movs	r3, #100	; 0x64
 8000cc6:	2202      	movs	r2, #2
 8000cc8:	68f8      	ldr	r0, [r7, #12]
 8000cca:	f002 ff34 	bl	8003b36 <HAL_SPI_Transmit>
	for (int i = 0; i < count; ++i)
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	617b      	str	r3, [r7, #20]
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d8f1      	bhi.n	8000cc0 <LCD_pushColorCopy+0x2e>
	}

	LCD_writeCommand(spi, HX8357_NOP); // Write command to stop RAMWR
 8000cdc:	2100      	movs	r1, #0
 8000cde:	68f8      	ldr	r0, [r7, #12]
 8000ce0:	f7ff fea0 	bl	8000a24 <LCD_writeCommand>

	LCD_endWrite();
 8000ce4:	f7ff fecc 	bl	8000a80 <LCD_endWrite>
	return 1;
 8000ce8:	2301      	movs	r3, #1
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3718      	adds	r7, #24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <LCD_writePixel>:

	LCD_endWrite();
	return 1;
}

int LCD_writePixel(SPI_HandleTypeDef* spi, int16_t x, int16_t y, uint16_t color) {
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b086      	sub	sp, #24
 8000cf6:	af02      	add	r7, sp, #8
 8000cf8:	60f8      	str	r0, [r7, #12]
 8000cfa:	4608      	mov	r0, r1
 8000cfc:	4611      	mov	r1, r2
 8000cfe:	461a      	mov	r2, r3
 8000d00:	4603      	mov	r3, r0
 8000d02:	817b      	strh	r3, [r7, #10]
 8000d04:	460b      	mov	r3, r1
 8000d06:	813b      	strh	r3, [r7, #8]
 8000d08:	4613      	mov	r3, r2
 8000d0a:	80fb      	strh	r3, [r7, #6]
    if ((x < 0) ||(x >= HX8357_TFTWIDTH) || (y < 0) || (y >= HX8357_TFTHEIGHT)) return 0;
 8000d0c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db0d      	blt.n	8000d30 <LCD_writePixel+0x3e>
 8000d14:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000d18:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000d1c:	da08      	bge.n	8000d30 <LCD_writePixel+0x3e>
 8000d1e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	db04      	blt.n	8000d30 <LCD_writePixel+0x3e>
 8000d26:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000d2a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000d2e:	db01      	blt.n	8000d34 <LCD_writePixel+0x42>
 8000d30:	2300      	movs	r3, #0
 8000d32:	e017      	b.n	8000d64 <LCD_writePixel+0x72>
    if(!LCD_setAddrWindow(spi, x, y, 1, 1)) return 0;
 8000d34:	8979      	ldrh	r1, [r7, #10]
 8000d36:	893a      	ldrh	r2, [r7, #8]
 8000d38:	2301      	movs	r3, #1
 8000d3a:	9300      	str	r3, [sp, #0]
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	68f8      	ldr	r0, [r7, #12]
 8000d40:	f7ff ff02 	bl	8000b48 <LCD_setAddrWindow>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d101      	bne.n	8000d4e <LCD_writePixel+0x5c>
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	e00a      	b.n	8000d64 <LCD_writePixel+0x72>
    if (!LCD_pushColor(spi, color)) return 0;
 8000d4e:	88fb      	ldrh	r3, [r7, #6]
 8000d50:	4619      	mov	r1, r3
 8000d52:	68f8      	ldr	r0, [r7, #12]
 8000d54:	f7ff ff80 	bl	8000c58 <LCD_pushColor>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d101      	bne.n	8000d62 <LCD_writePixel+0x70>
 8000d5e:	2300      	movs	r3, #0
 8000d60:	e000      	b.n	8000d64 <LCD_writePixel+0x72>
    return 1;
 8000d62:	2301      	movs	r3, #1
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <LCD_writePixels>:

// Length of colors array must be w * h
int LCD_writePixels(SPI_HandleTypeDef* spi, uint16_t color,
					int16_t x, int16_t y, int16_t w, int16_t h)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af02      	add	r7, sp, #8
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	4608      	mov	r0, r1
 8000d76:	4611      	mov	r1, r2
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	817b      	strh	r3, [r7, #10]
 8000d7e:	460b      	mov	r3, r1
 8000d80:	813b      	strh	r3, [r7, #8]
 8000d82:	4613      	mov	r3, r2
 8000d84:	80fb      	strh	r3, [r7, #6]
	if ((x < 0) ||(x >= HX8357_TFTWIDTH) || (y < 0) || (y >= HX8357_TFTHEIGHT)) return 0;
 8000d86:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	db0d      	blt.n	8000daa <LCD_writePixels+0x3e>
 8000d8e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000d92:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000d96:	da08      	bge.n	8000daa <LCD_writePixels+0x3e>
 8000d98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	db04      	blt.n	8000daa <LCD_writePixels+0x3e>
 8000da0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000da4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000da8:	db01      	blt.n	8000dae <LCD_writePixels+0x42>
 8000daa:	2300      	movs	r3, #0
 8000dac:	e01f      	b.n	8000dee <LCD_writePixels+0x82>
	if(!LCD_setAddrWindow(spi, x, y, w, h)) return 0;
 8000dae:	8939      	ldrh	r1, [r7, #8]
 8000db0:	88fa      	ldrh	r2, [r7, #6]
 8000db2:	8b38      	ldrh	r0, [r7, #24]
 8000db4:	8bbb      	ldrh	r3, [r7, #28]
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	4603      	mov	r3, r0
 8000dba:	68f8      	ldr	r0, [r7, #12]
 8000dbc:	f7ff fec4 	bl	8000b48 <LCD_setAddrWindow>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d101      	bne.n	8000dca <LCD_writePixels+0x5e>
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	e011      	b.n	8000dee <LCD_writePixels+0x82>
	if (!LCD_pushColorCopy(spi, color, w*h)) return 0;
 8000dca:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000dce:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8000dd2:	fb02 f303 	mul.w	r3, r2, r3
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	897b      	ldrh	r3, [r7, #10]
 8000dda:	4619      	mov	r1, r3
 8000ddc:	68f8      	ldr	r0, [r7, #12]
 8000dde:	f7ff ff58 	bl	8000c92 <LCD_pushColorCopy>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d101      	bne.n	8000dec <LCD_writePixels+0x80>
 8000de8:	2300      	movs	r3, #0
 8000dea:	e000      	b.n	8000dee <LCD_writePixels+0x82>
	return 1;
 8000dec:	2301      	movs	r3, #1
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
	...

08000df8 <LCD_drawChar>:
		0x70, 0x1C, 0x07, 0x1C, 0x70,
		0x0E, 0x38, 0xE0, 0x38, 0x0E
};

void LCD_drawChar(SPI_HandleTypeDef* spi, int16_t x, int16_t y, unsigned char c, uint16_t color, uint32_t size)
{
 8000df8:	b590      	push	{r4, r7, lr}
 8000dfa:	b089      	sub	sp, #36	; 0x24
 8000dfc:	af02      	add	r7, sp, #8
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	4608      	mov	r0, r1
 8000e02:	4611      	mov	r1, r2
 8000e04:	461a      	mov	r2, r3
 8000e06:	4603      	mov	r3, r0
 8000e08:	817b      	strh	r3, [r7, #10]
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	813b      	strh	r3, [r7, #8]
 8000e0e:	4613      	mov	r3, r2
 8000e10:	71fb      	strb	r3, [r7, #7]
	if((x >= HX8357_TFTWIDTH)   || // Clip right
 8000e12:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000e16:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000e1a:	f280 80b5 	bge.w	8000f88 <LCD_drawChar+0x190>
	   (y >= HX8357_TFTHEIGHT)  || // Clip bottom
	   ((x + 6 * size - 1) < 0) || // Clip left
 8000e1e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000e22:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000e26:	f280 80af 	bge.w	8000f88 <LCD_drawChar+0x190>
	   ((y + 8 * size - 1) < 0))   // Clip top
		return;

	uint16_t bg = LCD_color565(255, 255, 255);
 8000e2a:	22ff      	movs	r2, #255	; 0xff
 8000e2c:	21ff      	movs	r1, #255	; 0xff
 8000e2e:	20ff      	movs	r0, #255	; 0xff
 8000e30:	f7ff feec 	bl	8000c0c <LCD_color565>
 8000e34:	4603      	mov	r3, r0
 8000e36:	827b      	strh	r3, [r7, #18]
	LCD_startWrite();
 8000e38:	f7ff fe16 	bl	8000a68 <LCD_startWrite>
	for(int8_t i = 0; i < 5; i++) // Char bitmap = 5 columns
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	75fb      	strb	r3, [r7, #23]
 8000e40:	e09a      	b.n	8000f78 <LCD_drawChar+0x180>
	{
		uint8_t line = font[c * 5 + i];
 8000e42:	79fa      	ldrb	r2, [r7, #7]
 8000e44:	4613      	mov	r3, r2
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	441a      	add	r2, r3
 8000e4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e4e:	4413      	add	r3, r2
 8000e50:	4a4f      	ldr	r2, [pc, #316]	; (8000f90 <LCD_drawChar+0x198>)
 8000e52:	5cd3      	ldrb	r3, [r2, r3]
 8000e54:	75bb      	strb	r3, [r7, #22]
		for(int8_t j = 0; j < 8; j++, line >>= 1)
 8000e56:	2300      	movs	r3, #0
 8000e58:	757b      	strb	r3, [r7, #21]
 8000e5a:	e082      	b.n	8000f62 <LCD_drawChar+0x16a>
		{
			if (line & 1)
 8000e5c:	7dbb      	ldrb	r3, [r7, #22]
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d03a      	beq.n	8000edc <LCD_drawChar+0xe4>
			{
				if (size == 1) LCD_writePixel(spi, x+i, y+j, color);
 8000e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d112      	bne.n	8000e92 <LCD_drawChar+0x9a>
 8000e6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e70:	b29a      	uxth	r2, r3
 8000e72:	897b      	ldrh	r3, [r7, #10]
 8000e74:	4413      	add	r3, r2
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	b219      	sxth	r1, r3
 8000e7a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000e7e:	b29a      	uxth	r2, r3
 8000e80:	893b      	ldrh	r3, [r7, #8]
 8000e82:	4413      	add	r3, r2
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	b21a      	sxth	r2, r3
 8000e88:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000e8a:	68f8      	ldr	r0, [r7, #12]
 8000e8c:	f7ff ff31 	bl	8000cf2 <LCD_writePixel>
 8000e90:	e05e      	b.n	8000f50 <LCD_drawChar+0x158>
				else LCD_writePixels(spi, color, x+i*size, y+j*size, size, size);
 8000e92:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e96:	b29a      	uxth	r2, r3
 8000e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	fb12 f303 	smulbb	r3, r2, r3
 8000ea0:	b29a      	uxth	r2, r3
 8000ea2:	897b      	ldrh	r3, [r7, #10]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	b218      	sxth	r0, r3
 8000eaa:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	fb12 f303 	smulbb	r3, r2, r3
 8000eb8:	b29a      	uxth	r2, r3
 8000eba:	893b      	ldrh	r3, [r7, #8]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	b21c      	sxth	r4, r3
 8000ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ec4:	b21b      	sxth	r3, r3
 8000ec6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ec8:	b212      	sxth	r2, r2
 8000eca:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000ecc:	9201      	str	r2, [sp, #4]
 8000ece:	9300      	str	r3, [sp, #0]
 8000ed0:	4623      	mov	r3, r4
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	68f8      	ldr	r0, [r7, #12]
 8000ed6:	f7ff ff49 	bl	8000d6c <LCD_writePixels>
 8000eda:	e039      	b.n	8000f50 <LCD_drawChar+0x158>
			}
			else
			{
				if (size == 1) LCD_writePixel(spi, x+i, y+j, bg);
 8000edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d112      	bne.n	8000f08 <LCD_drawChar+0x110>
 8000ee2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ee6:	b29a      	uxth	r2, r3
 8000ee8:	897b      	ldrh	r3, [r7, #10]
 8000eea:	4413      	add	r3, r2
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	b219      	sxth	r1, r3
 8000ef0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	893b      	ldrh	r3, [r7, #8]
 8000ef8:	4413      	add	r3, r2
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	b21a      	sxth	r2, r3
 8000efe:	8a7b      	ldrh	r3, [r7, #18]
 8000f00:	68f8      	ldr	r0, [r7, #12]
 8000f02:	f7ff fef6 	bl	8000cf2 <LCD_writePixel>
 8000f06:	e023      	b.n	8000f50 <LCD_drawChar+0x158>
				else LCD_writePixels(spi, bg, x+i*size, y+j*size, size, size);
 8000f08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f0c:	b29a      	uxth	r2, r3
 8000f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f10:	b29b      	uxth	r3, r3
 8000f12:	fb12 f303 	smulbb	r3, r2, r3
 8000f16:	b29a      	uxth	r2, r3
 8000f18:	897b      	ldrh	r3, [r7, #10]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	b218      	sxth	r0, r3
 8000f20:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000f24:	b29a      	uxth	r2, r3
 8000f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	fb12 f303 	smulbb	r3, r2, r3
 8000f2e:	b29a      	uxth	r2, r3
 8000f30:	893b      	ldrh	r3, [r7, #8]
 8000f32:	4413      	add	r3, r2
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	b21c      	sxth	r4, r3
 8000f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f3a:	b21b      	sxth	r3, r3
 8000f3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f3e:	b212      	sxth	r2, r2
 8000f40:	8a79      	ldrh	r1, [r7, #18]
 8000f42:	9201      	str	r2, [sp, #4]
 8000f44:	9300      	str	r3, [sp, #0]
 8000f46:	4623      	mov	r3, r4
 8000f48:	4602      	mov	r2, r0
 8000f4a:	68f8      	ldr	r0, [r7, #12]
 8000f4c:	f7ff ff0e 	bl	8000d6c <LCD_writePixels>
		for(int8_t j = 0; j < 8; j++, line >>= 1)
 8000f50:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	3301      	adds	r3, #1
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	757b      	strb	r3, [r7, #21]
 8000f5c:	7dbb      	ldrb	r3, [r7, #22]
 8000f5e:	085b      	lsrs	r3, r3, #1
 8000f60:	75bb      	strb	r3, [r7, #22]
 8000f62:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000f66:	2b07      	cmp	r3, #7
 8000f68:	f77f af78 	ble.w	8000e5c <LCD_drawChar+0x64>
	for(int8_t i = 0; i < 5; i++) // Char bitmap = 5 columns
 8000f6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	3301      	adds	r3, #1
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	75fb      	strb	r3, [r7, #23]
 8000f78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f7c:	2b04      	cmp	r3, #4
 8000f7e:	f77f af60 	ble.w	8000e42 <LCD_drawChar+0x4a>
			}
		}
	}
	LCD_endWrite();
 8000f82:	f7ff fd7d 	bl	8000a80 <LCD_endWrite>
 8000f86:	e000      	b.n	8000f8a <LCD_drawChar+0x192>
		return;
 8000f88:	bf00      	nop
}
 8000f8a:	371c      	adds	r7, #28
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd90      	pop	{r4, r7, pc}
 8000f90:	08004ed4 	.word	0x08004ed4

08000f94 <LCD_drawString>:
	}
	LCD_endWrite();
}

void LCD_drawString(SPI_HandleTypeDef* spi, int16_t x, int16_t y, unsigned char* c, uint32_t length, uint16_t color, uint32_t size)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b088      	sub	sp, #32
 8000f98:	af02      	add	r7, sp, #8
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	817b      	strh	r3, [r7, #10]
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	813b      	strh	r3, [r7, #8]
	for (int i = 0; i < length; ++i) LCD_drawChar(spi, x + i*6*size, y, c[i], color, size);
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
 8000faa:	e020      	b.n	8000fee <LCD_drawString+0x5a>
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	b29a      	uxth	r2, r3
 8000fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	fb12 f303 	smulbb	r3, r2, r3
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	461a      	mov	r2, r3
 8000fbc:	0052      	lsls	r2, r2, #1
 8000fbe:	4413      	add	r3, r2
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	897b      	ldrh	r3, [r7, #10]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	b219      	sxth	r1, r3
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	7818      	ldrb	r0, [r3, #0]
 8000fd4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fda:	9301      	str	r3, [sp, #4]
 8000fdc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	68f8      	ldr	r0, [r7, #12]
 8000fe4:	f7ff ff08 	bl	8000df8 <LCD_drawChar>
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	3301      	adds	r3, #1
 8000fec:	617b      	str	r3, [r7, #20]
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	6a3a      	ldr	r2, [r7, #32]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d8da      	bhi.n	8000fac <LCD_drawString+0x18>
}
 8000ff6:	bf00      	nop
 8000ff8:	bf00      	nop
 8000ffa:	3718      	adds	r7, #24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <LCD_writeLine>:
		}
	}
	LCD_endWrite();
}

void LCD_writeLine(SPI_HandleTypeDef *spi, int x0, int y0, int x1, int y1, int color) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b08a      	sub	sp, #40	; 0x28
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
 800100c:	603b      	str	r3, [r7, #0]
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 800100e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001018:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800101c:	6839      	ldr	r1, [r7, #0]
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	1acb      	subs	r3, r1, r3
 8001022:	2b00      	cmp	r3, #0
 8001024:	bfb8      	it	lt
 8001026:	425b      	neglt	r3, r3
 8001028:	429a      	cmp	r2, r3
 800102a:	bfcc      	ite	gt
 800102c:	2301      	movgt	r3, #1
 800102e:	2300      	movle	r3, #0
 8001030:	b2db      	uxtb	r3, r3
 8001032:	847b      	strh	r3, [r7, #34]	; 0x22
  if (steep) {
 8001034:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001038:	2b00      	cmp	r3, #0
 800103a:	d00d      	beq.n	8001058 <LCD_writeLine+0x58>
    _swap_int16_t(x0, y0);
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	843b      	strh	r3, [r7, #32]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	60bb      	str	r3, [r7, #8]
 8001044:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001048:	607b      	str	r3, [r7, #4]
    _swap_int16_t(x1, y1);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	83fb      	strh	r3, [r7, #30]
 800104e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001050:	603b      	str	r3, [r7, #0]
 8001052:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001056:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (x0 > x1) {
 8001058:	68ba      	ldr	r2, [r7, #8]
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	429a      	cmp	r2, r3
 800105e:	dd0d      	ble.n	800107c <LCD_writeLine+0x7c>
    _swap_int16_t(x0, x1);
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	83bb      	strh	r3, [r7, #28]
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800106c:	603b      	str	r3, [r7, #0]
    _swap_int16_t(y0, y1);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	837b      	strh	r3, [r7, #26]
 8001072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001074:	607b      	str	r3, [r7, #4]
 8001076:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800107a:	633b      	str	r3, [r7, #48]	; 0x30
  }

  int16_t dx, dy;
  dx = x1 - x0;
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	b29a      	uxth	r2, r3
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	b29b      	uxth	r3, r3
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	b29b      	uxth	r3, r3
 8001088:	833b      	strh	r3, [r7, #24]
  dy = abs(y1 - y0);
 800108a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	2b00      	cmp	r3, #0
 8001092:	bfb8      	it	lt
 8001094:	425b      	neglt	r3, r3
 8001096:	82fb      	strh	r3, [r7, #22]

  int16_t err = dx / 2;
 8001098:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800109c:	0fda      	lsrs	r2, r3, #31
 800109e:	4413      	add	r3, r2
 80010a0:	105b      	asrs	r3, r3, #1
 80010a2:	84fb      	strh	r3, [r7, #38]	; 0x26
  int16_t ystep;

  if (y0 < y1) {
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010a8:	429a      	cmp	r2, r3
 80010aa:	da02      	bge.n	80010b2 <LCD_writeLine+0xb2>
    ystep = 1;
 80010ac:	2301      	movs	r3, #1
 80010ae:	84bb      	strh	r3, [r7, #36]	; 0x24
 80010b0:	e030      	b.n	8001114 <LCD_writeLine+0x114>
  } else {
    ystep = -1;
 80010b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010b6:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  for (; x0 <= x1; x0++) {
 80010b8:	e02c      	b.n	8001114 <LCD_writeLine+0x114>
    if (steep) {
 80010ba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d009      	beq.n	80010d6 <LCD_writeLine+0xd6>
      LCD_writePixel(spi, y0, x0, color);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	b219      	sxth	r1, r3
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	b21a      	sxth	r2, r3
 80010ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	68f8      	ldr	r0, [r7, #12]
 80010d0:	f7ff fe0f 	bl	8000cf2 <LCD_writePixel>
 80010d4:	e008      	b.n	80010e8 <LCD_writeLine+0xe8>
    } else {
      LCD_writePixel(spi, x0, y0, color);
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	b219      	sxth	r1, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	b21a      	sxth	r2, r3
 80010de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	68f8      	ldr	r0, [r7, #12]
 80010e4:	f7ff fe05 	bl	8000cf2 <LCD_writePixel>
    }
    err -= dy;
 80010e8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80010ea:	8afb      	ldrh	r3, [r7, #22]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	84fb      	strh	r3, [r7, #38]	; 0x26
    if (err < 0) {
 80010f2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	da09      	bge.n	800110e <LCD_writeLine+0x10e>
      y0 += ystep;
 80010fa:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	4413      	add	r3, r2
 8001102:	607b      	str	r3, [r7, #4]
      err += dx;
 8001104:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001106:	8b3b      	ldrh	r3, [r7, #24]
 8001108:	4413      	add	r3, r2
 800110a:	b29b      	uxth	r3, r3
 800110c:	84fb      	strh	r3, [r7, #38]	; 0x26
  for (; x0 <= x1; x0++) {
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	3301      	adds	r3, #1
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	68ba      	ldr	r2, [r7, #8]
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	429a      	cmp	r2, r3
 800111a:	ddce      	ble.n	80010ba <LCD_writeLine+0xba>
    }
  }
}
 800111c:	bf00      	nop
 800111e:	bf00      	nop
 8001120:	3728      	adds	r7, #40	; 0x28
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <LCD_drawBattery>:
	    LCD_writeFastHLine(spi, a, y, b - a + 1, color);
	  }
}

//homemade functions for TADAMHASPEV, move to different file
void LCD_drawBattery(SPI_HandleTypeDef* spi, int16_t x, int16_t y, uint16_t color, uint32_t size) {
 8001126:	b580      	push	{r7, lr}
 8001128:	b086      	sub	sp, #24
 800112a:	af02      	add	r7, sp, #8
 800112c:	60f8      	str	r0, [r7, #12]
 800112e:	4608      	mov	r0, r1
 8001130:	4611      	mov	r1, r2
 8001132:	461a      	mov	r2, r3
 8001134:	4603      	mov	r3, r0
 8001136:	817b      	strh	r3, [r7, #10]
 8001138:	460b      	mov	r3, r1
 800113a:	813b      	strh	r3, [r7, #8]
 800113c:	4613      	mov	r3, r2
 800113e:	80fb      	strh	r3, [r7, #6]
	//make battery thicker?
	//left
	if(!LCD_setAddrWindow(spi, x, y + size, 1, 22*size)) return;
 8001140:	8979      	ldrh	r1, [r7, #10]
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	b29a      	uxth	r2, r3
 8001146:	893b      	ldrh	r3, [r7, #8]
 8001148:	4413      	add	r3, r2
 800114a:	b29a      	uxth	r2, r3
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	b29b      	uxth	r3, r3
 8001150:	4618      	mov	r0, r3
 8001152:	0080      	lsls	r0, r0, #2
 8001154:	4418      	add	r0, r3
 8001156:	0040      	lsls	r0, r0, #1
 8001158:	4403      	add	r3, r0
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	b29b      	uxth	r3, r3
 800115e:	9300      	str	r3, [sp, #0]
 8001160:	2301      	movs	r3, #1
 8001162:	68f8      	ldr	r0, [r7, #12]
 8001164:	f7ff fcf0 	bl	8000b48 <LCD_setAddrWindow>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	f000 80e3 	beq.w	8001336 <LCD_drawBattery+0x210>
	if (!LCD_pushColorCopy(spi, color, 22*size)) return;
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	2216      	movs	r2, #22
 8001174:	fb03 f202 	mul.w	r2, r3, r2
 8001178:	88fb      	ldrh	r3, [r7, #6]
 800117a:	4619      	mov	r1, r3
 800117c:	68f8      	ldr	r0, [r7, #12]
 800117e:	f7ff fd88 	bl	8000c92 <LCD_pushColorCopy>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	f000 80d8 	beq.w	800133a <LCD_drawBattery+0x214>

	//right
	if(!LCD_setAddrWindow(spi, x + 10*size, y + size, 1, 22*size)) return;
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	b29b      	uxth	r3, r3
 800118e:	461a      	mov	r2, r3
 8001190:	0092      	lsls	r2, r2, #2
 8001192:	4413      	add	r3, r2
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	b29a      	uxth	r2, r3
 8001198:	897b      	ldrh	r3, [r7, #10]
 800119a:	4413      	add	r3, r2
 800119c:	b299      	uxth	r1, r3
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	893b      	ldrh	r3, [r7, #8]
 80011a4:	4413      	add	r3, r2
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	4618      	mov	r0, r3
 80011ae:	0080      	lsls	r0, r0, #2
 80011b0:	4418      	add	r0, r3
 80011b2:	0040      	lsls	r0, r0, #1
 80011b4:	4403      	add	r3, r0
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	2301      	movs	r3, #1
 80011be:	68f8      	ldr	r0, [r7, #12]
 80011c0:	f7ff fcc2 	bl	8000b48 <LCD_setAddrWindow>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	f000 80b9 	beq.w	800133e <LCD_drawBattery+0x218>
	if (!LCD_pushColorCopy(spi, color, 22*size)) return;
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	2216      	movs	r2, #22
 80011d0:	fb03 f202 	mul.w	r2, r3, r2
 80011d4:	88fb      	ldrh	r3, [r7, #6]
 80011d6:	4619      	mov	r1, r3
 80011d8:	68f8      	ldr	r0, [r7, #12]
 80011da:	f7ff fd5a 	bl	8000c92 <LCD_pushColorCopy>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	f000 80ae 	beq.w	8001342 <LCD_drawBattery+0x21c>

	//top
	if(!LCD_setAddrWindow(spi, x, y + size, 10*size, 1)) return;
 80011e6:	8979      	ldrh	r1, [r7, #10]
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	893b      	ldrh	r3, [r7, #8]
 80011ee:	4413      	add	r3, r2
 80011f0:	b29a      	uxth	r2, r3
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	4618      	mov	r0, r3
 80011f8:	0080      	lsls	r0, r0, #2
 80011fa:	4403      	add	r3, r0
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	b29b      	uxth	r3, r3
 8001200:	2001      	movs	r0, #1
 8001202:	9000      	str	r0, [sp, #0]
 8001204:	68f8      	ldr	r0, [r7, #12]
 8001206:	f7ff fc9f 	bl	8000b48 <LCD_setAddrWindow>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	f000 809a 	beq.w	8001346 <LCD_drawBattery+0x220>
	if (!LCD_pushColorCopy(spi, color, 10*size)) return;
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4613      	mov	r3, r2
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	4413      	add	r3, r2
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	461a      	mov	r2, r3
 800121e:	88fb      	ldrh	r3, [r7, #6]
 8001220:	4619      	mov	r1, r3
 8001222:	68f8      	ldr	r0, [r7, #12]
 8001224:	f7ff fd35 	bl	8000c92 <LCD_pushColorCopy>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	f000 808d 	beq.w	800134a <LCD_drawBattery+0x224>

	//bottom
	if(!LCD_setAddrWindow(spi, x, y + 23*size, 10*size, 1)) return;
 8001230:	8979      	ldrh	r1, [r7, #10]
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	b29b      	uxth	r3, r3
 8001236:	461a      	mov	r2, r3
 8001238:	0052      	lsls	r2, r2, #1
 800123a:	441a      	add	r2, r3
 800123c:	00d2      	lsls	r2, r2, #3
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	b29a      	uxth	r2, r3
 8001242:	893b      	ldrh	r3, [r7, #8]
 8001244:	4413      	add	r3, r2
 8001246:	b29a      	uxth	r2, r3
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	b29b      	uxth	r3, r3
 800124c:	4618      	mov	r0, r3
 800124e:	0080      	lsls	r0, r0, #2
 8001250:	4403      	add	r3, r0
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	b29b      	uxth	r3, r3
 8001256:	2001      	movs	r0, #1
 8001258:	9000      	str	r0, [sp, #0]
 800125a:	68f8      	ldr	r0, [r7, #12]
 800125c:	f7ff fc74 	bl	8000b48 <LCD_setAddrWindow>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d073      	beq.n	800134e <LCD_drawBattery+0x228>
	if (!LCD_pushColorCopy(spi, color, 10*size)) return;
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4613      	mov	r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	4413      	add	r3, r2
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	461a      	mov	r2, r3
 8001272:	88fb      	ldrh	r3, [r7, #6]
 8001274:	4619      	mov	r1, r3
 8001276:	68f8      	ldr	r0, [r7, #12]
 8001278:	f7ff fd0b 	bl	8000c92 <LCD_pushColorCopy>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d067      	beq.n	8001352 <LCD_drawBattery+0x22c>

	//lil cap
	if(!LCD_setAddrWindow(spi, x + 3*size, y, 4*size, 1)) return;
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	b29b      	uxth	r3, r3
 8001286:	461a      	mov	r2, r3
 8001288:	0052      	lsls	r2, r2, #1
 800128a:	4413      	add	r3, r2
 800128c:	b29a      	uxth	r2, r3
 800128e:	897b      	ldrh	r3, [r7, #10]
 8001290:	4413      	add	r3, r2
 8001292:	b299      	uxth	r1, r3
 8001294:	893a      	ldrh	r2, [r7, #8]
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	b29b      	uxth	r3, r3
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	b29b      	uxth	r3, r3
 800129e:	2001      	movs	r0, #1
 80012a0:	9000      	str	r0, [sp, #0]
 80012a2:	68f8      	ldr	r0, [r7, #12]
 80012a4:	f7ff fc50 	bl	8000b48 <LCD_setAddrWindow>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d053      	beq.n	8001356 <LCD_drawBattery+0x230>
	if (!LCD_pushColorCopy(spi, color, 4*size)) return;
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	009a      	lsls	r2, r3, #2
 80012b2:	88fb      	ldrh	r3, [r7, #6]
 80012b4:	4619      	mov	r1, r3
 80012b6:	68f8      	ldr	r0, [r7, #12]
 80012b8:	f7ff fceb 	bl	8000c92 <LCD_pushColorCopy>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d04b      	beq.n	800135a <LCD_drawBattery+0x234>

	if(!LCD_setAddrWindow(spi, x + 3*size, y, 1, size)) return;
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	461a      	mov	r2, r3
 80012c8:	0052      	lsls	r2, r2, #1
 80012ca:	4413      	add	r3, r2
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	897b      	ldrh	r3, [r7, #10]
 80012d0:	4413      	add	r3, r2
 80012d2:	b299      	uxth	r1, r3
 80012d4:	893a      	ldrh	r2, [r7, #8]
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	b29b      	uxth	r3, r3
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	2301      	movs	r3, #1
 80012de:	68f8      	ldr	r0, [r7, #12]
 80012e0:	f7ff fc32 	bl	8000b48 <LCD_setAddrWindow>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d039      	beq.n	800135e <LCD_drawBattery+0x238>
	if (!LCD_pushColorCopy(spi, color, size)) return;
 80012ea:	88fb      	ldrh	r3, [r7, #6]
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4619      	mov	r1, r3
 80012f0:	68f8      	ldr	r0, [r7, #12]
 80012f2:	f7ff fcce 	bl	8000c92 <LCD_pushColorCopy>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d032      	beq.n	8001362 <LCD_drawBattery+0x23c>

	if(!LCD_setAddrWindow(spi, x + 3*size + 4*size, y, 1, size)) return;
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	b29b      	uxth	r3, r3
 8001300:	461a      	mov	r2, r3
 8001302:	00d2      	lsls	r2, r2, #3
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	b29a      	uxth	r2, r3
 8001308:	897b      	ldrh	r3, [r7, #10]
 800130a:	4413      	add	r3, r2
 800130c:	b299      	uxth	r1, r3
 800130e:	893a      	ldrh	r2, [r7, #8]
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	b29b      	uxth	r3, r3
 8001314:	9300      	str	r3, [sp, #0]
 8001316:	2301      	movs	r3, #1
 8001318:	68f8      	ldr	r0, [r7, #12]
 800131a:	f7ff fc15 	bl	8000b48 <LCD_setAddrWindow>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d020      	beq.n	8001366 <LCD_drawBattery+0x240>
	if (!LCD_pushColorCopy(spi, color, size)) return;
 8001324:	88fb      	ldrh	r3, [r7, #6]
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4619      	mov	r1, r3
 800132a:	68f8      	ldr	r0, [r7, #12]
 800132c:	f7ff fcb1 	bl	8000c92 <LCD_pushColorCopy>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
	return;
 8001334:	e018      	b.n	8001368 <LCD_drawBattery+0x242>
	if(!LCD_setAddrWindow(spi, x, y + size, 1, 22*size)) return;
 8001336:	bf00      	nop
 8001338:	e016      	b.n	8001368 <LCD_drawBattery+0x242>
	if (!LCD_pushColorCopy(spi, color, 22*size)) return;
 800133a:	bf00      	nop
 800133c:	e014      	b.n	8001368 <LCD_drawBattery+0x242>
	if(!LCD_setAddrWindow(spi, x + 10*size, y + size, 1, 22*size)) return;
 800133e:	bf00      	nop
 8001340:	e012      	b.n	8001368 <LCD_drawBattery+0x242>
	if (!LCD_pushColorCopy(spi, color, 22*size)) return;
 8001342:	bf00      	nop
 8001344:	e010      	b.n	8001368 <LCD_drawBattery+0x242>
	if(!LCD_setAddrWindow(spi, x, y + size, 10*size, 1)) return;
 8001346:	bf00      	nop
 8001348:	e00e      	b.n	8001368 <LCD_drawBattery+0x242>
	if (!LCD_pushColorCopy(spi, color, 10*size)) return;
 800134a:	bf00      	nop
 800134c:	e00c      	b.n	8001368 <LCD_drawBattery+0x242>
	if(!LCD_setAddrWindow(spi, x, y + 23*size, 10*size, 1)) return;
 800134e:	bf00      	nop
 8001350:	e00a      	b.n	8001368 <LCD_drawBattery+0x242>
	if (!LCD_pushColorCopy(spi, color, 10*size)) return;
 8001352:	bf00      	nop
 8001354:	e008      	b.n	8001368 <LCD_drawBattery+0x242>
	if(!LCD_setAddrWindow(spi, x + 3*size, y, 4*size, 1)) return;
 8001356:	bf00      	nop
 8001358:	e006      	b.n	8001368 <LCD_drawBattery+0x242>
	if (!LCD_pushColorCopy(spi, color, 4*size)) return;
 800135a:	bf00      	nop
 800135c:	e004      	b.n	8001368 <LCD_drawBattery+0x242>
	if(!LCD_setAddrWindow(spi, x + 3*size, y, 1, size)) return;
 800135e:	bf00      	nop
 8001360:	e002      	b.n	8001368 <LCD_drawBattery+0x242>
	if (!LCD_pushColorCopy(spi, color, size)) return;
 8001362:	bf00      	nop
 8001364:	e000      	b.n	8001368 <LCD_drawBattery+0x242>
	if(!LCD_setAddrWindow(spi, x + 3*size + 4*size, y, 1, size)) return;
 8001366:	bf00      	nop
}
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <LCD_drawFrame>:

void LCD_drawFrame(SPI_HandleTypeDef* spi, uint16_t color) {
 800136e:	b580      	push	{r7, lr}
 8001370:	b084      	sub	sp, #16
 8001372:	af02      	add	r7, sp, #8
 8001374:	6078      	str	r0, [r7, #4]
 8001376:	460b      	mov	r3, r1
 8001378:	807b      	strh	r3, [r7, #2]
	//rows
	LCD_writeLine(spi,0,80,360,80,HX8357_BLACK);
 800137a:	2300      	movs	r3, #0
 800137c:	9301      	str	r3, [sp, #4]
 800137e:	2350      	movs	r3, #80	; 0x50
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001386:	2250      	movs	r2, #80	; 0x50
 8001388:	2100      	movs	r1, #0
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff fe38 	bl	8001000 <LCD_writeLine>
	LCD_writeLine(spi,0,160,360,160,HX8357_BLACK);
 8001390:	2300      	movs	r3, #0
 8001392:	9301      	str	r3, [sp, #4]
 8001394:	23a0      	movs	r3, #160	; 0xa0
 8001396:	9300      	str	r3, [sp, #0]
 8001398:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800139c:	22a0      	movs	r2, #160	; 0xa0
 800139e:	2100      	movs	r1, #0
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f7ff fe2d 	bl	8001000 <LCD_writeLine>
	LCD_writeLine(spi,0,240,360,240,HX8357_BLACK);
 80013a6:	2300      	movs	r3, #0
 80013a8:	9301      	str	r3, [sp, #4]
 80013aa:	23f0      	movs	r3, #240	; 0xf0
 80013ac:	9300      	str	r3, [sp, #0]
 80013ae:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80013b2:	22f0      	movs	r2, #240	; 0xf0
 80013b4:	2100      	movs	r1, #0
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff fe22 	bl	8001000 <LCD_writeLine>

	//column
	LCD_writeLine(spi,360,0,360,320,HX8357_BLACK);
 80013bc:	2300      	movs	r3, #0
 80013be:	9301      	str	r3, [sp, #4]
 80013c0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80013ca:	2200      	movs	r2, #0
 80013cc:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f7ff fe15 	bl	8001000 <LCD_writeLine>
	return;
 80013d6:	bf00      	nop
}
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
	...

080013e0 <LCD_fillBattery>:

void LCD_fillBattery(SPI_HandleTypeDef* spi, int16_t x, int16_t y, uint32_t size, uint32_t level) {
 80013e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013e4:	b088      	sub	sp, #32
 80013e6:	af02      	add	r7, sp, #8
 80013e8:	60f8      	str	r0, [r7, #12]
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	460b      	mov	r3, r1
 80013ee:	817b      	strh	r3, [r7, #10]
 80013f0:	4613      	mov	r3, r2
 80013f2:	813b      	strh	r3, [r7, #8]
	uint32_t color = HX8357_GREEN;
 80013f4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80013f8:	617b      	str	r3, [r7, #20]
	if (level < 20) {
 80013fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013fc:	2b13      	cmp	r3, #19
 80013fe:	d803      	bhi.n	8001408 <LCD_fillBattery+0x28>
		color = HX8357_RED;
 8001400:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001404:	617b      	str	r3, [r7, #20]
 8001406:	e005      	b.n	8001414 <LCD_fillBattery+0x34>
	} else if (level < 50) {
 8001408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800140a:	2b31      	cmp	r3, #49	; 0x31
 800140c:	d802      	bhi.n	8001414 <LCD_fillBattery+0x34>
		color = HX8357_YELLOW;
 800140e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001412:	617b      	str	r3, [r7, #20]
	}
	//level = 100 --> y offset 0
	//level = 0 --> y offset 22*size
	int offset = 22*size - (22*size)*(level/100.0);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2216      	movs	r2, #22
 8001418:	fb02 f303 	mul.w	r3, r2, r3
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff f817 	bl	8000450 <__aeabi_ui2d>
 8001422:	4604      	mov	r4, r0
 8001424:	460d      	mov	r5, r1
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2216      	movs	r2, #22
 800142a:	fb02 f303 	mul.w	r3, r2, r3
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff f80e 	bl	8000450 <__aeabi_ui2d>
 8001434:	4680      	mov	r8, r0
 8001436:	4689      	mov	r9, r1
 8001438:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800143a:	f7ff f809 	bl	8000450 <__aeabi_ui2d>
 800143e:	f04f 0200 	mov.w	r2, #0
 8001442:	4b3d      	ldr	r3, [pc, #244]	; (8001538 <LCD_fillBattery+0x158>)
 8001444:	f7ff f9a8 	bl	8000798 <__aeabi_ddiv>
 8001448:	4602      	mov	r2, r0
 800144a:	460b      	mov	r3, r1
 800144c:	4640      	mov	r0, r8
 800144e:	4649      	mov	r1, r9
 8001450:	f7ff f878 	bl	8000544 <__aeabi_dmul>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	4620      	mov	r0, r4
 800145a:	4629      	mov	r1, r5
 800145c:	f7fe feba 	bl	80001d4 <__aeabi_dsub>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4610      	mov	r0, r2
 8001466:	4619      	mov	r1, r3
 8001468:	f7ff fa7e 	bl	8000968 <__aeabi_d2iz>
 800146c:	4603      	mov	r3, r0
 800146e:	613b      	str	r3, [r7, #16]
	LCD_writePixels(spi, HX8357_WHITE, x + 3, ((y + size) + 3), 10*size - 6, (22*size - 6));
 8001470:	897b      	ldrh	r3, [r7, #10]
 8001472:	3303      	adds	r3, #3
 8001474:	b29b      	uxth	r3, r3
 8001476:	b219      	sxth	r1, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	b29a      	uxth	r2, r3
 800147c:	893b      	ldrh	r3, [r7, #8]
 800147e:	4413      	add	r3, r2
 8001480:	b29b      	uxth	r3, r3
 8001482:	3303      	adds	r3, #3
 8001484:	b29b      	uxth	r3, r3
 8001486:	b218      	sxth	r0, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	b29b      	uxth	r3, r3
 800148c:	461a      	mov	r2, r3
 800148e:	0092      	lsls	r2, r2, #2
 8001490:	4413      	add	r3, r2
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	b29b      	uxth	r3, r3
 8001496:	3b06      	subs	r3, #6
 8001498:	b29b      	uxth	r3, r3
 800149a:	b21a      	sxth	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	b29b      	uxth	r3, r3
 80014a0:	461c      	mov	r4, r3
 80014a2:	00a4      	lsls	r4, r4, #2
 80014a4:	441c      	add	r4, r3
 80014a6:	0064      	lsls	r4, r4, #1
 80014a8:	4423      	add	r3, r4
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	3b06      	subs	r3, #6
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	b21b      	sxth	r3, r3
 80014b4:	9301      	str	r3, [sp, #4]
 80014b6:	9200      	str	r2, [sp, #0]
 80014b8:	4603      	mov	r3, r0
 80014ba:	460a      	mov	r2, r1
 80014bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80014c0:	68f8      	ldr	r0, [r7, #12]
 80014c2:	f7ff fc53 	bl	8000d6c <LCD_writePixels>
	LCD_writePixels(spi, color, x + 3, ((y + size) + 3) + offset, 10*size - 6, (22*size - 6) - offset);
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	b298      	uxth	r0, r3
 80014ca:	897b      	ldrh	r3, [r7, #10]
 80014cc:	3303      	adds	r3, #3
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	b21c      	sxth	r4, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	b29a      	uxth	r2, r3
 80014d6:	893b      	ldrh	r3, [r7, #8]
 80014d8:	4413      	add	r3, r2
 80014da:	b29a      	uxth	r2, r3
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	b29b      	uxth	r3, r3
 80014e0:	4413      	add	r3, r2
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	3303      	adds	r3, #3
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	b21d      	sxth	r5, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	461a      	mov	r2, r3
 80014f0:	0092      	lsls	r2, r2, #2
 80014f2:	4413      	add	r3, r2
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	3b06      	subs	r3, #6
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	b21a      	sxth	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	b29b      	uxth	r3, r3
 8001502:	4619      	mov	r1, r3
 8001504:	0089      	lsls	r1, r1, #2
 8001506:	4419      	add	r1, r3
 8001508:	0049      	lsls	r1, r1, #1
 800150a:	440b      	add	r3, r1
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	b299      	uxth	r1, r3
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	b29b      	uxth	r3, r3
 8001514:	1acb      	subs	r3, r1, r3
 8001516:	b29b      	uxth	r3, r3
 8001518:	3b06      	subs	r3, #6
 800151a:	b29b      	uxth	r3, r3
 800151c:	b21b      	sxth	r3, r3
 800151e:	9301      	str	r3, [sp, #4]
 8001520:	9200      	str	r2, [sp, #0]
 8001522:	462b      	mov	r3, r5
 8001524:	4622      	mov	r2, r4
 8001526:	4601      	mov	r1, r0
 8001528:	68f8      	ldr	r0, [r7, #12]
 800152a:	f7ff fc1f 	bl	8000d6c <LCD_writePixels>
}
 800152e:	bf00      	nop
 8001530:	3718      	adds	r7, #24
 8001532:	46bd      	mov	sp, r7
 8001534:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001538:	40590000 	.word	0x40590000

0800153c <LCD_updateBattery>:
			*warning = 0;
		}
	}
}

void LCD_updateBattery(SPI_HandleTypeDef* spi, int level) {
 800153c:	b580      	push	{r7, lr}
 800153e:	f5ad 7d50 	sub.w	sp, sp, #832	; 0x340
 8001542:	af04      	add	r7, sp, #16
 8001544:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001548:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 800154c:	6018      	str	r0, [r3, #0]
 800154e:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001552:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8001556:	6019      	str	r1, [r3, #0]
	char lev[801];
	itoa(level,lev,10);
 8001558:	f107 010c 	add.w	r1, r7, #12
 800155c:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001560:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8001564:	220a      	movs	r2, #10
 8001566:	6818      	ldr	r0, [r3, #0]
 8001568:	f003 fc1a 	bl	8004da0 <itoa>

	LCD_fillBattery(spi,380,120,8,level);
 800156c:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8001570:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f507 724c 	add.w	r2, r7, #816	; 0x330
 800157a:	f5a2 704b 	sub.w	r0, r2, #812	; 0x32c
 800157e:	9300      	str	r3, [sp, #0]
 8001580:	2308      	movs	r3, #8
 8001582:	2278      	movs	r2, #120	; 0x78
 8001584:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001588:	6800      	ldr	r0, [r0, #0]
 800158a:	f7ff ff29 	bl	80013e0 <LCD_fillBattery>
	LCD_drawString(spi,370,50,lev,3,HX8357_BLACK,4);
 800158e:	f107 030c 	add.w	r3, r7, #12
 8001592:	f507 724c 	add.w	r2, r7, #816	; 0x330
 8001596:	f5a2 704b 	sub.w	r0, r2, #812	; 0x32c
 800159a:	2204      	movs	r2, #4
 800159c:	9202      	str	r2, [sp, #8]
 800159e:	2200      	movs	r2, #0
 80015a0:	9201      	str	r2, [sp, #4]
 80015a2:	2203      	movs	r2, #3
 80015a4:	9200      	str	r2, [sp, #0]
 80015a6:	2232      	movs	r2, #50	; 0x32
 80015a8:	f44f 71b9 	mov.w	r1, #370	; 0x172
 80015ac:	6800      	ldr	r0, [r0, #0]
 80015ae:	f7ff fcf1 	bl	8000f94 <LCD_drawString>
}
 80015b2:	bf00      	nop
 80015b4:	f507 774c 	add.w	r7, r7, #816	; 0x330
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08c      	sub	sp, #48	; 0x30
 80015c0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015c2:	f000 fc76 	bl	8001eb2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015c6:	f000 f8c9 	bl	800175c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015ca:	f000 fa09 	bl	80019e0 <MX_GPIO_Init>
  MX_RTC_Init();
 80015ce:	f000 f927 	bl	8001820 <MX_RTC_Init>
  MX_SPI1_Init();
 80015d2:	f000 f94d 	bl	8001870 <MX_SPI1_Init>
  MX_TIM15_Init();
 80015d6:	f000 f989 	bl	80018ec <MX_TIM15_Init>
  MX_TIM16_Init();
 80015da:	f000 f9d9 	bl	8001990 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  	LCD_begin(&hspi1);
 80015de:	4853      	ldr	r0, [pc, #332]	; (800172c <main+0x170>)
 80015e0:	f7ff fa5a 	bl	8000a98 <LCD_begin>
  	//LCD_fillRect(&hspi1, 0, 0, 480, 320, HX8357_WHITE);
  	LCD_writePixels(&hspi1,HX8357_WHITE,0,0,480,320);
 80015e4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80015e8:	9301      	str	r3, [sp, #4]
 80015ea:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80015ee:	9300      	str	r3, [sp, #0]
 80015f0:	2300      	movs	r3, #0
 80015f2:	2200      	movs	r2, #0
 80015f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80015f8:	484c      	ldr	r0, [pc, #304]	; (800172c <main+0x170>)
 80015fa:	f7ff fbb7 	bl	8000d6c <LCD_writePixels>
    LCD_drawBattery(&hspi1,380,120,HX8357_BLACK,8);
 80015fe:	2308      	movs	r3, #8
 8001600:	9300      	str	r3, [sp, #0]
 8001602:	2300      	movs	r3, #0
 8001604:	2278      	movs	r2, #120	; 0x78
 8001606:	f44f 71be 	mov.w	r1, #380	; 0x17c
 800160a:	4848      	ldr	r0, [pc, #288]	; (800172c <main+0x170>)
 800160c:	f7ff fd8b 	bl	8001126 <LCD_drawBattery>
    LCD_drawFrame(&hspi1,HX8357_BLACK);
 8001610:	2100      	movs	r1, #0
 8001612:	4846      	ldr	r0, [pc, #280]	; (800172c <main+0x170>)
 8001614:	f7ff feab 	bl	800136e <LCD_drawFrame>


    char * name = "TADAMHESPEV | UMSM";
 8001618:	4b45      	ldr	r3, [pc, #276]	; (8001730 <main+0x174>)
 800161a:	61fb      	str	r3, [r7, #28]
    char * speed = "SPEED:";
 800161c:	4b45      	ldr	r3, [pc, #276]	; (8001734 <main+0x178>)
 800161e:	61bb      	str	r3, [r7, #24]
    char * temp = "TEMP:";
 8001620:	4b45      	ldr	r3, [pc, #276]	; (8001738 <main+0x17c>)
 8001622:	617b      	str	r3, [r7, #20]
    char * power = "POWER:";
 8001624:	4b45      	ldr	r3, [pc, #276]	; (800173c <main+0x180>)
 8001626:	613b      	str	r3, [r7, #16]

    char * mph = "mph";
 8001628:	4b45      	ldr	r3, [pc, #276]	; (8001740 <main+0x184>)
 800162a:	60fb      	str	r3, [r7, #12]
    char * deg = "C";
 800162c:	4b45      	ldr	r3, [pc, #276]	; (8001744 <main+0x188>)
 800162e:	60bb      	str	r3, [r7, #8]
    char * watt = "W";
 8001630:	4b45      	ldr	r3, [pc, #276]	; (8001748 <main+0x18c>)
 8001632:	607b      	str	r3, [r7, #4]
    LCD_drawString(&hspi1,20,30 + 80*0,name,18,HX8357_BLACK,3);
 8001634:	2303      	movs	r3, #3
 8001636:	9302      	str	r3, [sp, #8]
 8001638:	2300      	movs	r3, #0
 800163a:	9301      	str	r3, [sp, #4]
 800163c:	2312      	movs	r3, #18
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	221e      	movs	r2, #30
 8001644:	2114      	movs	r1, #20
 8001646:	4839      	ldr	r0, [pc, #228]	; (800172c <main+0x170>)
 8001648:	f7ff fca4 	bl	8000f94 <LCD_drawString>
    LCD_drawString(&hspi1,5,30 + 80*1,speed,6,HX8357_BLACK,3);
 800164c:	2303      	movs	r3, #3
 800164e:	9302      	str	r3, [sp, #8]
 8001650:	2300      	movs	r3, #0
 8001652:	9301      	str	r3, [sp, #4]
 8001654:	2306      	movs	r3, #6
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	226e      	movs	r2, #110	; 0x6e
 800165c:	2105      	movs	r1, #5
 800165e:	4833      	ldr	r0, [pc, #204]	; (800172c <main+0x170>)
 8001660:	f7ff fc98 	bl	8000f94 <LCD_drawString>
    LCD_drawString(&hspi1,5,30 + 80*2,temp,5,HX8357_BLACK,3);
 8001664:	2303      	movs	r3, #3
 8001666:	9302      	str	r3, [sp, #8]
 8001668:	2300      	movs	r3, #0
 800166a:	9301      	str	r3, [sp, #4]
 800166c:	2305      	movs	r3, #5
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	22be      	movs	r2, #190	; 0xbe
 8001674:	2105      	movs	r1, #5
 8001676:	482d      	ldr	r0, [pc, #180]	; (800172c <main+0x170>)
 8001678:	f7ff fc8c 	bl	8000f94 <LCD_drawString>
    LCD_drawString(&hspi1,5,30 + 80*3,power,6,HX8357_BLACK,3);
 800167c:	2303      	movs	r3, #3
 800167e:	9302      	str	r3, [sp, #8]
 8001680:	2300      	movs	r3, #0
 8001682:	9301      	str	r3, [sp, #4]
 8001684:	2306      	movs	r3, #6
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800168e:	2105      	movs	r1, #5
 8001690:	4826      	ldr	r0, [pc, #152]	; (800172c <main+0x170>)
 8001692:	f7ff fc7f 	bl	8000f94 <LCD_drawString>

    LCD_drawString(&hspi1,280,30 + 80*1,mph,3,HX8357_BLACK,3);
 8001696:	2303      	movs	r3, #3
 8001698:	9302      	str	r3, [sp, #8]
 800169a:	2300      	movs	r3, #0
 800169c:	9301      	str	r3, [sp, #4]
 800169e:	2303      	movs	r3, #3
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	226e      	movs	r2, #110	; 0x6e
 80016a6:	f44f 718c 	mov.w	r1, #280	; 0x118
 80016aa:	4820      	ldr	r0, [pc, #128]	; (800172c <main+0x170>)
 80016ac:	f7ff fc72 	bl	8000f94 <LCD_drawString>
    LCD_drawString(&hspi1,306,30 + 80*2,deg,1,HX8357_BLACK,3);
 80016b0:	2303      	movs	r3, #3
 80016b2:	9302      	str	r3, [sp, #8]
 80016b4:	2300      	movs	r3, #0
 80016b6:	9301      	str	r3, [sp, #4]
 80016b8:	2301      	movs	r3, #1
 80016ba:	9300      	str	r3, [sp, #0]
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	22be      	movs	r2, #190	; 0xbe
 80016c0:	f44f 7199 	mov.w	r1, #306	; 0x132
 80016c4:	4819      	ldr	r0, [pc, #100]	; (800172c <main+0x170>)
 80016c6:	f7ff fc65 	bl	8000f94 <LCD_drawString>
    LCD_drawString(&hspi1,306,30 + 80*3,watt,1,HX8357_BLACK,3);
 80016ca:	2303      	movs	r3, #3
 80016cc:	9302      	str	r3, [sp, #8]
 80016ce:	2300      	movs	r3, #0
 80016d0:	9301      	str	r3, [sp, #4]
 80016d2:	2301      	movs	r3, #1
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80016dc:	f44f 7199 	mov.w	r1, #306	; 0x132
 80016e0:	4812      	ldr	r0, [pc, #72]	; (800172c <main+0x170>)
 80016e2:	f7ff fc57 	bl	8000f94 <LCD_drawString>

    LCD_updateBattery(&hspi1,volt_percent);
 80016e6:	4b19      	ldr	r3, [pc, #100]	; (800174c <main+0x190>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4619      	mov	r1, r3
 80016ec:	480f      	ldr	r0, [pc, #60]	; (800172c <main+0x170>)
 80016ee:	f7ff ff25 	bl	800153c <LCD_updateBattery>
    LCD_drawString(&hspi1,442,50,"%",1,HX8357_BLACK,4);
 80016f2:	2304      	movs	r3, #4
 80016f4:	9302      	str	r3, [sp, #8]
 80016f6:	2300      	movs	r3, #0
 80016f8:	9301      	str	r3, [sp, #4]
 80016fa:	2301      	movs	r3, #1
 80016fc:	9300      	str	r3, [sp, #0]
 80016fe:	4b14      	ldr	r3, [pc, #80]	; (8001750 <main+0x194>)
 8001700:	2232      	movs	r2, #50	; 0x32
 8001702:	f44f 71dd 	mov.w	r1, #442	; 0x1ba
 8001706:	4809      	ldr	r0, [pc, #36]	; (800172c <main+0x170>)
 8001708:	f7ff fc44 	bl	8000f94 <LCD_drawString>

    HAL_TIM_Base_Start_IT(&htim15);
 800170c:	4811      	ldr	r0, [pc, #68]	; (8001754 <main+0x198>)
 800170e:	f002 ff65 	bl	80045dc <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim16);
 8001712:	4811      	ldr	r0, [pc, #68]	; (8001758 <main+0x19c>)
 8001714:	f002 ff62 	bl	80045dc <HAL_TIM_Base_Start_IT>
//	  volt_percent = 20;
//	  LCD_updateBattery(&hspi1,volt_percent);
//	  LCD_warnings(&hspi1, (buf[2] << 4) | buf[3],volt_percent,&warning);
//	  HAL_Delay(500);

	  volt_percent-=1;
 8001718:	4b0c      	ldr	r3, [pc, #48]	; (800174c <main+0x190>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	3b01      	subs	r3, #1
 800171e:	4a0b      	ldr	r2, [pc, #44]	; (800174c <main+0x190>)
 8001720:	6013      	str	r3, [r2, #0]
	  HAL_Delay(1000);
 8001722:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001726:	f000 fbfd 	bl	8001f24 <HAL_Delay>
	  volt_percent-=1;
 800172a:	e7f5      	b.n	8001718 <main+0x15c>
 800172c:	200000b8 	.word	0x200000b8
 8001730:	08004e98 	.word	0x08004e98
 8001734:	08004eac 	.word	0x08004eac
 8001738:	08004eb4 	.word	0x08004eb4
 800173c:	08004ebc 	.word	0x08004ebc
 8001740:	08004ec4 	.word	0x08004ec4
 8001744:	08004ec8 	.word	0x08004ec8
 8001748:	08004ecc 	.word	0x08004ecc
 800174c:	20000068 	.word	0x20000068
 8001750:	08004ed0 	.word	0x08004ed0
 8001754:	2000011c 	.word	0x2000011c
 8001758:	20000168 	.word	0x20000168

0800175c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b096      	sub	sp, #88	; 0x58
 8001760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001762:	f107 0314 	add.w	r3, r7, #20
 8001766:	2244      	movs	r2, #68	; 0x44
 8001768:	2100      	movs	r1, #0
 800176a:	4618      	mov	r0, r3
 800176c:	f003 fb5c 	bl	8004e28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001770:	463b      	mov	r3, r7
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	605a      	str	r2, [r3, #4]
 8001778:	609a      	str	r2, [r3, #8]
 800177a:	60da      	str	r2, [r3, #12]
 800177c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800177e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001782:	f000 fe75 	bl	8002470 <HAL_PWREx_ControlVoltageScaling>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800178c:	f000 f9b6 	bl	8001afc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001790:	f000 fe50 	bl	8002434 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001794:	4b21      	ldr	r3, [pc, #132]	; (800181c <SystemClock_Config+0xc0>)
 8001796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800179a:	4a20      	ldr	r2, [pc, #128]	; (800181c <SystemClock_Config+0xc0>)
 800179c:	f023 0318 	bic.w	r3, r3, #24
 80017a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80017a4:	2314      	movs	r3, #20
 80017a6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80017a8:	2301      	movs	r3, #1
 80017aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80017ac:	2301      	movs	r3, #1
 80017ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80017b4:	2360      	movs	r3, #96	; 0x60
 80017b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017b8:	2302      	movs	r3, #2
 80017ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80017bc:	2301      	movs	r3, #1
 80017be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80017c0:	2301      	movs	r3, #1
 80017c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80017c4:	2328      	movs	r3, #40	; 0x28
 80017c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80017c8:	2307      	movs	r3, #7
 80017ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80017cc:	2302      	movs	r3, #2
 80017ce:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80017d0:	2302      	movs	r3, #2
 80017d2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017d4:	f107 0314 	add.w	r3, r7, #20
 80017d8:	4618      	mov	r0, r3
 80017da:	f000 fe9f 	bl	800251c <HAL_RCC_OscConfig>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80017e4:	f000 f98a 	bl	8001afc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017e8:	230f      	movs	r3, #15
 80017ea:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017ec:	2303      	movs	r3, #3
 80017ee:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017f0:	2300      	movs	r3, #0
 80017f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017f4:	2300      	movs	r3, #0
 80017f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017f8:	2300      	movs	r3, #0
 80017fa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80017fc:	463b      	mov	r3, r7
 80017fe:	2104      	movs	r1, #4
 8001800:	4618      	mov	r0, r3
 8001802:	f001 fa9f 	bl	8002d44 <HAL_RCC_ClockConfig>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800180c:	f000 f976 	bl	8001afc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001810:	f001 fece 	bl	80035b0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001814:	bf00      	nop
 8001816:	3758      	adds	r7, #88	; 0x58
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40021000 	.word	0x40021000

08001820 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001824:	4b10      	ldr	r3, [pc, #64]	; (8001868 <MX_RTC_Init+0x48>)
 8001826:	4a11      	ldr	r2, [pc, #68]	; (800186c <MX_RTC_Init+0x4c>)
 8001828:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800182a:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <MX_RTC_Init+0x48>)
 800182c:	2200      	movs	r2, #0
 800182e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001830:	4b0d      	ldr	r3, [pc, #52]	; (8001868 <MX_RTC_Init+0x48>)
 8001832:	227f      	movs	r2, #127	; 0x7f
 8001834:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001836:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <MX_RTC_Init+0x48>)
 8001838:	22ff      	movs	r2, #255	; 0xff
 800183a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800183c:	4b0a      	ldr	r3, [pc, #40]	; (8001868 <MX_RTC_Init+0x48>)
 800183e:	2200      	movs	r2, #0
 8001840:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001842:	4b09      	ldr	r3, [pc, #36]	; (8001868 <MX_RTC_Init+0x48>)
 8001844:	2200      	movs	r2, #0
 8001846:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001848:	4b07      	ldr	r3, [pc, #28]	; (8001868 <MX_RTC_Init+0x48>)
 800184a:	2200      	movs	r2, #0
 800184c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800184e:	4b06      	ldr	r3, [pc, #24]	; (8001868 <MX_RTC_Init+0x48>)
 8001850:	2200      	movs	r2, #0
 8001852:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001854:	4804      	ldr	r0, [pc, #16]	; (8001868 <MX_RTC_Init+0x48>)
 8001856:	f001 ffad 	bl	80037b4 <HAL_RTC_Init>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001860:	f000 f94c 	bl	8001afc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001864:	bf00      	nop
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000094 	.word	0x20000094
 800186c:	40002800 	.word	0x40002800

08001870 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001874:	4b1b      	ldr	r3, [pc, #108]	; (80018e4 <MX_SPI1_Init+0x74>)
 8001876:	4a1c      	ldr	r2, [pc, #112]	; (80018e8 <MX_SPI1_Init+0x78>)
 8001878:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800187a:	4b1a      	ldr	r3, [pc, #104]	; (80018e4 <MX_SPI1_Init+0x74>)
 800187c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001880:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001882:	4b18      	ldr	r3, [pc, #96]	; (80018e4 <MX_SPI1_Init+0x74>)
 8001884:	2200      	movs	r2, #0
 8001886:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001888:	4b16      	ldr	r3, [pc, #88]	; (80018e4 <MX_SPI1_Init+0x74>)
 800188a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800188e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001890:	4b14      	ldr	r3, [pc, #80]	; (80018e4 <MX_SPI1_Init+0x74>)
 8001892:	2200      	movs	r2, #0
 8001894:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001896:	4b13      	ldr	r3, [pc, #76]	; (80018e4 <MX_SPI1_Init+0x74>)
 8001898:	2200      	movs	r2, #0
 800189a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800189c:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <MX_SPI1_Init+0x74>)
 800189e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018a2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80018a4:	4b0f      	ldr	r3, [pc, #60]	; (80018e4 <MX_SPI1_Init+0x74>)
 80018a6:	2208      	movs	r2, #8
 80018a8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018aa:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <MX_SPI1_Init+0x74>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018b0:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <MX_SPI1_Init+0x74>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018b6:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <MX_SPI1_Init+0x74>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80018bc:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <MX_SPI1_Init+0x74>)
 80018be:	2207      	movs	r2, #7
 80018c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80018c2:	4b08      	ldr	r3, [pc, #32]	; (80018e4 <MX_SPI1_Init+0x74>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018c8:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <MX_SPI1_Init+0x74>)
 80018ca:	2208      	movs	r2, #8
 80018cc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018ce:	4805      	ldr	r0, [pc, #20]	; (80018e4 <MX_SPI1_Init+0x74>)
 80018d0:	f002 f88e 	bl	80039f0 <HAL_SPI_Init>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80018da:	f000 f90f 	bl	8001afc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	200000b8 	.word	0x200000b8
 80018e8:	40013000 	.word	0x40013000

080018ec <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b088      	sub	sp, #32
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018f2:	f107 0310 	add.w	r3, r7, #16
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	605a      	str	r2, [r3, #4]
 80018fc:	609a      	str	r2, [r3, #8]
 80018fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001900:	1d3b      	adds	r3, r7, #4
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	605a      	str	r2, [r3, #4]
 8001908:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800190a:	4b1f      	ldr	r3, [pc, #124]	; (8001988 <MX_TIM15_Init+0x9c>)
 800190c:	4a1f      	ldr	r2, [pc, #124]	; (800198c <MX_TIM15_Init+0xa0>)
 800190e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 7999;
 8001910:	4b1d      	ldr	r3, [pc, #116]	; (8001988 <MX_TIM15_Init+0x9c>)
 8001912:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001916:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001918:	4b1b      	ldr	r3, [pc, #108]	; (8001988 <MX_TIM15_Init+0x9c>)
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 9999;
 800191e:	4b1a      	ldr	r3, [pc, #104]	; (8001988 <MX_TIM15_Init+0x9c>)
 8001920:	f242 720f 	movw	r2, #9999	; 0x270f
 8001924:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001926:	4b18      	ldr	r3, [pc, #96]	; (8001988 <MX_TIM15_Init+0x9c>)
 8001928:	2200      	movs	r2, #0
 800192a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800192c:	4b16      	ldr	r3, [pc, #88]	; (8001988 <MX_TIM15_Init+0x9c>)
 800192e:	2200      	movs	r2, #0
 8001930:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001932:	4b15      	ldr	r3, [pc, #84]	; (8001988 <MX_TIM15_Init+0x9c>)
 8001934:	2200      	movs	r2, #0
 8001936:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001938:	4813      	ldr	r0, [pc, #76]	; (8001988 <MX_TIM15_Init+0x9c>)
 800193a:	f002 fdf7 	bl	800452c <HAL_TIM_Base_Init>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8001944:	f000 f8da 	bl	8001afc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001948:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800194c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800194e:	f107 0310 	add.w	r3, r7, #16
 8001952:	4619      	mov	r1, r3
 8001954:	480c      	ldr	r0, [pc, #48]	; (8001988 <MX_TIM15_Init+0x9c>)
 8001956:	f002 ff97 	bl	8004888 <HAL_TIM_ConfigClockSource>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8001960:	f000 f8cc 	bl	8001afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001964:	2300      	movs	r3, #0
 8001966:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001968:	2300      	movs	r3, #0
 800196a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800196c:	1d3b      	adds	r3, r7, #4
 800196e:	4619      	mov	r1, r3
 8001970:	4805      	ldr	r0, [pc, #20]	; (8001988 <MX_TIM15_Init+0x9c>)
 8001972:	f003 f979 	bl	8004c68 <HAL_TIMEx_MasterConfigSynchronization>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 800197c:	f000 f8be 	bl	8001afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001980:	bf00      	nop
 8001982:	3720      	adds	r7, #32
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	2000011c 	.word	0x2000011c
 800198c:	40014000 	.word	0x40014000

08001990 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001994:	4b10      	ldr	r3, [pc, #64]	; (80019d8 <MX_TIM16_Init+0x48>)
 8001996:	4a11      	ldr	r2, [pc, #68]	; (80019dc <MX_TIM16_Init+0x4c>)
 8001998:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7999;
 800199a:	4b0f      	ldr	r3, [pc, #60]	; (80019d8 <MX_TIM16_Init+0x48>)
 800199c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80019a0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a2:	4b0d      	ldr	r3, [pc, #52]	; (80019d8 <MX_TIM16_Init+0x48>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9999;
 80019a8:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <MX_TIM16_Init+0x48>)
 80019aa:	f242 720f 	movw	r2, #9999	; 0x270f
 80019ae:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019b0:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <MX_TIM16_Init+0x48>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80019b6:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <MX_TIM16_Init+0x48>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019bc:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <MX_TIM16_Init+0x48>)
 80019be:	2200      	movs	r2, #0
 80019c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80019c2:	4805      	ldr	r0, [pc, #20]	; (80019d8 <MX_TIM16_Init+0x48>)
 80019c4:	f002 fdb2 	bl	800452c <HAL_TIM_Base_Init>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80019ce:	f000 f895 	bl	8001afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000168 	.word	0x20000168
 80019dc:	40014400 	.word	0x40014400

080019e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b088      	sub	sp, #32
 80019e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e6:	f107 030c 	add.w	r3, r7, #12
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	605a      	str	r2, [r3, #4]
 80019f0:	609a      	str	r2, [r3, #8]
 80019f2:	60da      	str	r2, [r3, #12]
 80019f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019f6:	4b2f      	ldr	r3, [pc, #188]	; (8001ab4 <MX_GPIO_Init+0xd4>)
 80019f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fa:	4a2e      	ldr	r2, [pc, #184]	; (8001ab4 <MX_GPIO_Init+0xd4>)
 80019fc:	f043 0304 	orr.w	r3, r3, #4
 8001a00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a02:	4b2c      	ldr	r3, [pc, #176]	; (8001ab4 <MX_GPIO_Init+0xd4>)
 8001a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a06:	f003 0304 	and.w	r3, r3, #4
 8001a0a:	60bb      	str	r3, [r7, #8]
 8001a0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0e:	4b29      	ldr	r3, [pc, #164]	; (8001ab4 <MX_GPIO_Init+0xd4>)
 8001a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a12:	4a28      	ldr	r2, [pc, #160]	; (8001ab4 <MX_GPIO_Init+0xd4>)
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a1a:	4b26      	ldr	r3, [pc, #152]	; (8001ab4 <MX_GPIO_Init+0xd4>)
 8001a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a26:	4b23      	ldr	r3, [pc, #140]	; (8001ab4 <MX_GPIO_Init+0xd4>)
 8001a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2a:	4a22      	ldr	r2, [pc, #136]	; (8001ab4 <MX_GPIO_Init+0xd4>)
 8001a2c:	f043 0302 	orr.w	r3, r3, #2
 8001a30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a32:	4b20      	ldr	r3, [pc, #128]	; (8001ab4 <MX_GPIO_Init+0xd4>)
 8001a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	603b      	str	r3, [r7, #0]
 8001a3c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2170      	movs	r1, #112	; 0x70
 8001a42:	481d      	ldr	r0, [pc, #116]	; (8001ab8 <MX_GPIO_Init+0xd8>)
 8001a44:	f000 fcde 	bl	8002404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001a48:	2304      	movs	r3, #4
 8001a4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a54:	2303      	movs	r3, #3
 8001a56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a58:	2307      	movs	r3, #7
 8001a5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001a5c:	f107 030c 	add.w	r3, r7, #12
 8001a60:	4619      	mov	r1, r3
 8001a62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a66:	f000 fb63 	bl	8002130 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001a6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a70:	2302      	movs	r3, #2
 8001a72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001a80:	f107 030c 	add.w	r3, r7, #12
 8001a84:	4619      	mov	r1, r3
 8001a86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a8a:	f000 fb51 	bl	8002130 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001a8e:	2370      	movs	r3, #112	; 0x70
 8001a90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a92:	2301      	movs	r3, #1
 8001a94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a9e:	f107 030c 	add.w	r3, r7, #12
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4804      	ldr	r0, [pc, #16]	; (8001ab8 <MX_GPIO_Init+0xd8>)
 8001aa6:	f000 fb43 	bl	8002130 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001aaa:	bf00      	nop
 8001aac:	3720      	adds	r7, #32
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	48000400 	.word	0x48000400

08001abc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001acc:	d101      	bne.n	8001ad2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001ace:	f000 fa09 	bl	8001ee4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM15) {

  }
  if (htim->Instance == TIM16) {
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a06      	ldr	r2, [pc, #24]	; (8001af0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d105      	bne.n	8001ae8 <HAL_TIM_PeriodElapsedCallback+0x2c>
	  LCD_updateBattery(&hspi1,volt_percent);
 8001adc:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4805      	ldr	r0, [pc, #20]	; (8001af8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001ae4:	f7ff fd2a 	bl	800153c <LCD_updateBattery>
  }
  /* USER CODE END Callback 1 */
}
 8001ae8:	bf00      	nop
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40014400 	.word	0x40014400
 8001af4:	20000068 	.word	0x20000068
 8001af8:	200000b8 	.word	0x200000b8

08001afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b00:	b672      	cpsid	i
}
 8001b02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b04:	e7fe      	b.n	8001b04 <Error_Handler+0x8>
	...

08001b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b0e:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <HAL_MspInit+0x44>)
 8001b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b12:	4a0e      	ldr	r2, [pc, #56]	; (8001b4c <HAL_MspInit+0x44>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	6613      	str	r3, [r2, #96]	; 0x60
 8001b1a:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <HAL_MspInit+0x44>)
 8001b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	607b      	str	r3, [r7, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b26:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <HAL_MspInit+0x44>)
 8001b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b2a:	4a08      	ldr	r2, [pc, #32]	; (8001b4c <HAL_MspInit+0x44>)
 8001b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b30:	6593      	str	r3, [r2, #88]	; 0x58
 8001b32:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <HAL_MspInit+0x44>)
 8001b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3a:	603b      	str	r3, [r7, #0]
 8001b3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	40021000 	.word	0x40021000

08001b50 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b098      	sub	sp, #96	; 0x60
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b58:	f107 030c 	add.w	r3, r7, #12
 8001b5c:	2254      	movs	r2, #84	; 0x54
 8001b5e:	2100      	movs	r1, #0
 8001b60:	4618      	mov	r0, r3
 8001b62:	f003 f961 	bl	8004e28 <memset>
  if(hrtc->Instance==RTC)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a0f      	ldr	r2, [pc, #60]	; (8001ba8 <HAL_RTC_MspInit+0x58>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d117      	bne.n	8001ba0 <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001b70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b74:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001b76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b7a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b7c:	f107 030c 	add.w	r3, r7, #12
 8001b80:	4618      	mov	r0, r3
 8001b82:	f001 fb1f 	bl	80031c4 <HAL_RCCEx_PeriphCLKConfig>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001b8c:	f7ff ffb6 	bl	8001afc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001b90:	4b06      	ldr	r3, [pc, #24]	; (8001bac <HAL_RTC_MspInit+0x5c>)
 8001b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b96:	4a05      	ldr	r2, [pc, #20]	; (8001bac <HAL_RTC_MspInit+0x5c>)
 8001b98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001ba0:	bf00      	nop
 8001ba2:	3760      	adds	r7, #96	; 0x60
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40002800 	.word	0x40002800
 8001bac:	40021000 	.word	0x40021000

08001bb0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08a      	sub	sp, #40	; 0x28
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb8:	f107 0314 	add.w	r3, r7, #20
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a17      	ldr	r2, [pc, #92]	; (8001c2c <HAL_SPI_MspInit+0x7c>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d128      	bne.n	8001c24 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bd2:	4b17      	ldr	r3, [pc, #92]	; (8001c30 <HAL_SPI_MspInit+0x80>)
 8001bd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bd6:	4a16      	ldr	r2, [pc, #88]	; (8001c30 <HAL_SPI_MspInit+0x80>)
 8001bd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bdc:	6613      	str	r3, [r2, #96]	; 0x60
 8001bde:	4b14      	ldr	r3, [pc, #80]	; (8001c30 <HAL_SPI_MspInit+0x80>)
 8001be0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001be2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001be6:	613b      	str	r3, [r7, #16]
 8001be8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bea:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <HAL_SPI_MspInit+0x80>)
 8001bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bee:	4a10      	ldr	r2, [pc, #64]	; (8001c30 <HAL_SPI_MspInit+0x80>)
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bf6:	4b0e      	ldr	r3, [pc, #56]	; (8001c30 <HAL_SPI_MspInit+0x80>)
 8001bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001c02:	23e0      	movs	r3, #224	; 0xe0
 8001c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c06:	2302      	movs	r3, #2
 8001c08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c12:	2305      	movs	r3, #5
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c16:	f107 0314 	add.w	r3, r7, #20
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c20:	f000 fa86 	bl	8002130 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c24:	bf00      	nop
 8001c26:	3728      	adds	r7, #40	; 0x28
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40013000 	.word	0x40013000
 8001c30:	40021000 	.word	0x40021000

08001c34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a1a      	ldr	r2, [pc, #104]	; (8001cac <HAL_TIM_Base_MspInit+0x78>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d114      	bne.n	8001c70 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001c46:	4b1a      	ldr	r3, [pc, #104]	; (8001cb0 <HAL_TIM_Base_MspInit+0x7c>)
 8001c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c4a:	4a19      	ldr	r2, [pc, #100]	; (8001cb0 <HAL_TIM_Base_MspInit+0x7c>)
 8001c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c50:	6613      	str	r3, [r2, #96]	; 0x60
 8001c52:	4b17      	ldr	r3, [pc, #92]	; (8001cb0 <HAL_TIM_Base_MspInit+0x7c>)
 8001c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2100      	movs	r1, #0
 8001c62:	2018      	movs	r0, #24
 8001c64:	f000 fa3a 	bl	80020dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001c68:	2018      	movs	r0, #24
 8001c6a:	f000 fa53 	bl	8002114 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001c6e:	e018      	b.n	8001ca2 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM16)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a0f      	ldr	r2, [pc, #60]	; (8001cb4 <HAL_TIM_Base_MspInit+0x80>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d113      	bne.n	8001ca2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001c7a:	4b0d      	ldr	r3, [pc, #52]	; (8001cb0 <HAL_TIM_Base_MspInit+0x7c>)
 8001c7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c7e:	4a0c      	ldr	r2, [pc, #48]	; (8001cb0 <HAL_TIM_Base_MspInit+0x7c>)
 8001c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c84:	6613      	str	r3, [r2, #96]	; 0x60
 8001c86:	4b0a      	ldr	r3, [pc, #40]	; (8001cb0 <HAL_TIM_Base_MspInit+0x7c>)
 8001c88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8e:	60bb      	str	r3, [r7, #8]
 8001c90:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001c92:	2200      	movs	r2, #0
 8001c94:	2100      	movs	r1, #0
 8001c96:	2019      	movs	r0, #25
 8001c98:	f000 fa20 	bl	80020dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001c9c:	2019      	movs	r0, #25
 8001c9e:	f000 fa39 	bl	8002114 <HAL_NVIC_EnableIRQ>
}
 8001ca2:	bf00      	nop
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40014000 	.word	0x40014000
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	40014400 	.word	0x40014400

08001cb8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08e      	sub	sp, #56	; 0x38
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001cc6:	4b34      	ldr	r3, [pc, #208]	; (8001d98 <HAL_InitTick+0xe0>)
 8001cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cca:	4a33      	ldr	r2, [pc, #204]	; (8001d98 <HAL_InitTick+0xe0>)
 8001ccc:	f043 0301 	orr.w	r3, r3, #1
 8001cd0:	6593      	str	r3, [r2, #88]	; 0x58
 8001cd2:	4b31      	ldr	r3, [pc, #196]	; (8001d98 <HAL_InitTick+0xe0>)
 8001cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001cde:	f107 0210 	add.w	r2, r7, #16
 8001ce2:	f107 0314 	add.w	r3, r7, #20
 8001ce6:	4611      	mov	r1, r2
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f001 f9d9 	bl	80030a0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001cee:	6a3b      	ldr	r3, [r7, #32]
 8001cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d103      	bne.n	8001d00 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001cf8:	f001 f9bc 	bl	8003074 <HAL_RCC_GetPCLK1Freq>
 8001cfc:	6378      	str	r0, [r7, #52]	; 0x34
 8001cfe:	e004      	b.n	8001d0a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001d00:	f001 f9b8 	bl	8003074 <HAL_RCC_GetPCLK1Freq>
 8001d04:	4603      	mov	r3, r0
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d0c:	4a23      	ldr	r2, [pc, #140]	; (8001d9c <HAL_InitTick+0xe4>)
 8001d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d12:	0c9b      	lsrs	r3, r3, #18
 8001d14:	3b01      	subs	r3, #1
 8001d16:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001d18:	4b21      	ldr	r3, [pc, #132]	; (8001da0 <HAL_InitTick+0xe8>)
 8001d1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d1e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001d20:	4b1f      	ldr	r3, [pc, #124]	; (8001da0 <HAL_InitTick+0xe8>)
 8001d22:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d26:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001d28:	4a1d      	ldr	r2, [pc, #116]	; (8001da0 <HAL_InitTick+0xe8>)
 8001d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d2c:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001d2e:	4b1c      	ldr	r3, [pc, #112]	; (8001da0 <HAL_InitTick+0xe8>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d34:	4b1a      	ldr	r3, [pc, #104]	; (8001da0 <HAL_InitTick+0xe8>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d3a:	4b19      	ldr	r3, [pc, #100]	; (8001da0 <HAL_InitTick+0xe8>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001d40:	4817      	ldr	r0, [pc, #92]	; (8001da0 <HAL_InitTick+0xe8>)
 8001d42:	f002 fbf3 	bl	800452c <HAL_TIM_Base_Init>
 8001d46:	4603      	mov	r3, r0
 8001d48:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001d4c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d11b      	bne.n	8001d8c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001d54:	4812      	ldr	r0, [pc, #72]	; (8001da0 <HAL_InitTick+0xe8>)
 8001d56:	f002 fc41 	bl	80045dc <HAL_TIM_Base_Start_IT>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001d60:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d111      	bne.n	8001d8c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d68:	201c      	movs	r0, #28
 8001d6a:	f000 f9d3 	bl	8002114 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2b0f      	cmp	r3, #15
 8001d72:	d808      	bhi.n	8001d86 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001d74:	2200      	movs	r2, #0
 8001d76:	6879      	ldr	r1, [r7, #4]
 8001d78:	201c      	movs	r0, #28
 8001d7a:	f000 f9af 	bl	80020dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d7e:	4a09      	ldr	r2, [pc, #36]	; (8001da4 <HAL_InitTick+0xec>)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6013      	str	r3, [r2, #0]
 8001d84:	e002      	b.n	8001d8c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001d8c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3738      	adds	r7, #56	; 0x38
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	431bde83 	.word	0x431bde83
 8001da0:	200001b4 	.word	0x200001b4
 8001da4:	20000070 	.word	0x20000070

08001da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dac:	e7fe      	b.n	8001dac <NMI_Handler+0x4>

08001dae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dae:	b480      	push	{r7}
 8001db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001db2:	e7fe      	b.n	8001db2 <HardFault_Handler+0x4>

08001db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001db8:	e7fe      	b.n	8001db8 <MemManage_Handler+0x4>

08001dba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dbe:	e7fe      	b.n	8001dbe <BusFault_Handler+0x4>

08001dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dc4:	e7fe      	b.n	8001dc4 <UsageFault_Handler+0x4>

08001dc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dca:	bf00      	nop
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dd8:	bf00      	nop
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001de2:	b480      	push	{r7}
 8001de4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001de6:	bf00      	nop
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
	...

08001e00 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8001e04:	4802      	ldr	r0, [pc, #8]	; (8001e10 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8001e06:	f002 fc3d 	bl	8004684 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	2000011c 	.word	0x2000011c

08001e14 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001e18:	4802      	ldr	r0, [pc, #8]	; (8001e24 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001e1a:	f002 fc33 	bl	8004684 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000168 	.word	0x20000168

08001e28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e2c:	4802      	ldr	r0, [pc, #8]	; (8001e38 <TIM2_IRQHandler+0x10>)
 8001e2e:	f002 fc29 	bl	8004684 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	200001b4 	.word	0x200001b4

08001e3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e40:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <SystemInit+0x20>)
 8001e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e46:	4a05      	ldr	r2, [pc, #20]	; (8001e5c <SystemInit+0x20>)
 8001e48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001e50:	bf00      	nop
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e98 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e64:	f7ff ffea 	bl	8001e3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e68:	480c      	ldr	r0, [pc, #48]	; (8001e9c <LoopForever+0x6>)
  ldr r1, =_edata
 8001e6a:	490d      	ldr	r1, [pc, #52]	; (8001ea0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e6c:	4a0d      	ldr	r2, [pc, #52]	; (8001ea4 <LoopForever+0xe>)
  movs r3, #0
 8001e6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e70:	e002      	b.n	8001e78 <LoopCopyDataInit>

08001e72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e76:	3304      	adds	r3, #4

08001e78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e7c:	d3f9      	bcc.n	8001e72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ea8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e80:	4c0a      	ldr	r4, [pc, #40]	; (8001eac <LoopForever+0x16>)
  movs r3, #0
 8001e82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e84:	e001      	b.n	8001e8a <LoopFillZerobss>

08001e86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e88:	3204      	adds	r2, #4

08001e8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e8c:	d3fb      	bcc.n	8001e86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e8e:	f002 ffd3 	bl	8004e38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e92:	f7ff fb93 	bl	80015bc <main>

08001e96 <LoopForever>:

LoopForever:
    b LoopForever
 8001e96:	e7fe      	b.n	8001e96 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e98:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001e9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ea0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001ea4:	0800544c 	.word	0x0800544c
  ldr r2, =_sbss
 8001ea8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001eac:	20000204 	.word	0x20000204

08001eb0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001eb0:	e7fe      	b.n	8001eb0 <ADC1_IRQHandler>

08001eb2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b082      	sub	sp, #8
 8001eb6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ebc:	2003      	movs	r0, #3
 8001ebe:	f000 f902 	bl	80020c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ec2:	200f      	movs	r0, #15
 8001ec4:	f7ff fef8 	bl	8001cb8 <HAL_InitTick>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d002      	beq.n	8001ed4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	71fb      	strb	r3, [r7, #7]
 8001ed2:	e001      	b.n	8001ed8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ed4:	f7ff fe18 	bl	8001b08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ed8:	79fb      	ldrb	r3, [r7, #7]
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
	...

08001ee4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ee8:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <HAL_IncTick+0x20>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	461a      	mov	r2, r3
 8001eee:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <HAL_IncTick+0x24>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	4a04      	ldr	r2, [pc, #16]	; (8001f08 <HAL_IncTick+0x24>)
 8001ef6:	6013      	str	r3, [r2, #0]
}
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	20000074 	.word	0x20000074
 8001f08:	20000200 	.word	0x20000200

08001f0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f10:	4b03      	ldr	r3, [pc, #12]	; (8001f20 <HAL_GetTick+0x14>)
 8001f12:	681b      	ldr	r3, [r3, #0]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	20000200 	.word	0x20000200

08001f24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f2c:	f7ff ffee 	bl	8001f0c <HAL_GetTick>
 8001f30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f3c:	d005      	beq.n	8001f4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001f3e:	4b0a      	ldr	r3, [pc, #40]	; (8001f68 <HAL_Delay+0x44>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	461a      	mov	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	4413      	add	r3, r2
 8001f48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f4a:	bf00      	nop
 8001f4c:	f7ff ffde 	bl	8001f0c <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d8f7      	bhi.n	8001f4c <HAL_Delay+0x28>
  {
  }
}
 8001f5c:	bf00      	nop
 8001f5e:	bf00      	nop
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	20000074 	.word	0x20000074

08001f6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f82:	68ba      	ldr	r2, [r7, #8]
 8001f84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f88:	4013      	ands	r3, r2
 8001f8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f9e:	4a04      	ldr	r2, [pc, #16]	; (8001fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	60d3      	str	r3, [r2, #12]
}
 8001fa4:	bf00      	nop
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fb8:	4b04      	ldr	r3, [pc, #16]	; (8001fcc <__NVIC_GetPriorityGrouping+0x18>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	0a1b      	lsrs	r3, r3, #8
 8001fbe:	f003 0307 	and.w	r3, r3, #7
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	e000ed00 	.word	0xe000ed00

08001fd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	db0b      	blt.n	8001ffa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fe2:	79fb      	ldrb	r3, [r7, #7]
 8001fe4:	f003 021f 	and.w	r2, r3, #31
 8001fe8:	4907      	ldr	r1, [pc, #28]	; (8002008 <__NVIC_EnableIRQ+0x38>)
 8001fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fee:	095b      	lsrs	r3, r3, #5
 8001ff0:	2001      	movs	r0, #1
 8001ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	e000e100 	.word	0xe000e100

0800200c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	6039      	str	r1, [r7, #0]
 8002016:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201c:	2b00      	cmp	r3, #0
 800201e:	db0a      	blt.n	8002036 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	b2da      	uxtb	r2, r3
 8002024:	490c      	ldr	r1, [pc, #48]	; (8002058 <__NVIC_SetPriority+0x4c>)
 8002026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202a:	0112      	lsls	r2, r2, #4
 800202c:	b2d2      	uxtb	r2, r2
 800202e:	440b      	add	r3, r1
 8002030:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002034:	e00a      	b.n	800204c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	b2da      	uxtb	r2, r3
 800203a:	4908      	ldr	r1, [pc, #32]	; (800205c <__NVIC_SetPriority+0x50>)
 800203c:	79fb      	ldrb	r3, [r7, #7]
 800203e:	f003 030f 	and.w	r3, r3, #15
 8002042:	3b04      	subs	r3, #4
 8002044:	0112      	lsls	r2, r2, #4
 8002046:	b2d2      	uxtb	r2, r2
 8002048:	440b      	add	r3, r1
 800204a:	761a      	strb	r2, [r3, #24]
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	e000e100 	.word	0xe000e100
 800205c:	e000ed00 	.word	0xe000ed00

08002060 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002060:	b480      	push	{r7}
 8002062:	b089      	sub	sp, #36	; 0x24
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	f1c3 0307 	rsb	r3, r3, #7
 800207a:	2b04      	cmp	r3, #4
 800207c:	bf28      	it	cs
 800207e:	2304      	movcs	r3, #4
 8002080:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	3304      	adds	r3, #4
 8002086:	2b06      	cmp	r3, #6
 8002088:	d902      	bls.n	8002090 <NVIC_EncodePriority+0x30>
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	3b03      	subs	r3, #3
 800208e:	e000      	b.n	8002092 <NVIC_EncodePriority+0x32>
 8002090:	2300      	movs	r3, #0
 8002092:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002094:	f04f 32ff 	mov.w	r2, #4294967295
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	43da      	mvns	r2, r3
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	401a      	ands	r2, r3
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020a8:	f04f 31ff 	mov.w	r1, #4294967295
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	fa01 f303 	lsl.w	r3, r1, r3
 80020b2:	43d9      	mvns	r1, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b8:	4313      	orrs	r3, r2
         );
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3724      	adds	r7, #36	; 0x24
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b082      	sub	sp, #8
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff ff4c 	bl	8001f6c <__NVIC_SetPriorityGrouping>
}
 80020d4:	bf00      	nop
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
 80020e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020ea:	2300      	movs	r3, #0
 80020ec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020ee:	f7ff ff61 	bl	8001fb4 <__NVIC_GetPriorityGrouping>
 80020f2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	68b9      	ldr	r1, [r7, #8]
 80020f8:	6978      	ldr	r0, [r7, #20]
 80020fa:	f7ff ffb1 	bl	8002060 <NVIC_EncodePriority>
 80020fe:	4602      	mov	r2, r0
 8002100:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002104:	4611      	mov	r1, r2
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff ff80 	bl	800200c <__NVIC_SetPriority>
}
 800210c:	bf00      	nop
 800210e:	3718      	adds	r7, #24
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800211e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff ff54 	bl	8001fd0 <__NVIC_EnableIRQ>
}
 8002128:	bf00      	nop
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002130:	b480      	push	{r7}
 8002132:	b087      	sub	sp, #28
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800213e:	e148      	b.n	80023d2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	2101      	movs	r1, #1
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	fa01 f303 	lsl.w	r3, r1, r3
 800214c:	4013      	ands	r3, r2
 800214e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2b00      	cmp	r3, #0
 8002154:	f000 813a 	beq.w	80023cc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f003 0303 	and.w	r3, r3, #3
 8002160:	2b01      	cmp	r3, #1
 8002162:	d005      	beq.n	8002170 <HAL_GPIO_Init+0x40>
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f003 0303 	and.w	r3, r3, #3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d130      	bne.n	80021d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	2203      	movs	r2, #3
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	43db      	mvns	r3, r3
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	4013      	ands	r3, r2
 8002186:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	68da      	ldr	r2, [r3, #12]
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	4313      	orrs	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021a6:	2201      	movs	r2, #1
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	43db      	mvns	r3, r3
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	4013      	ands	r3, r2
 80021b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	091b      	lsrs	r3, r3, #4
 80021bc:	f003 0201 	and.w	r2, r3, #1
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f003 0303 	and.w	r3, r3, #3
 80021da:	2b03      	cmp	r3, #3
 80021dc:	d017      	beq.n	800220e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	2203      	movs	r2, #3
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43db      	mvns	r3, r3
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	4013      	ands	r3, r2
 80021f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	689a      	ldr	r2, [r3, #8]
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	4313      	orrs	r3, r2
 8002206:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f003 0303 	and.w	r3, r3, #3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d123      	bne.n	8002262 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	08da      	lsrs	r2, r3, #3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	3208      	adds	r2, #8
 8002222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002226:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	f003 0307 	and.w	r3, r3, #7
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	220f      	movs	r2, #15
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43db      	mvns	r3, r3
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	4013      	ands	r3, r2
 800223c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	691a      	ldr	r2, [r3, #16]
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	f003 0307 	and.w	r3, r3, #7
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	4313      	orrs	r3, r2
 8002252:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	08da      	lsrs	r2, r3, #3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3208      	adds	r2, #8
 800225c:	6939      	ldr	r1, [r7, #16]
 800225e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	2203      	movs	r2, #3
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	43db      	mvns	r3, r3
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	4013      	ands	r3, r2
 8002278:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f003 0203 	and.w	r2, r3, #3
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	4313      	orrs	r3, r2
 800228e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f000 8094 	beq.w	80023cc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022a4:	4b52      	ldr	r3, [pc, #328]	; (80023f0 <HAL_GPIO_Init+0x2c0>)
 80022a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022a8:	4a51      	ldr	r2, [pc, #324]	; (80023f0 <HAL_GPIO_Init+0x2c0>)
 80022aa:	f043 0301 	orr.w	r3, r3, #1
 80022ae:	6613      	str	r3, [r2, #96]	; 0x60
 80022b0:	4b4f      	ldr	r3, [pc, #316]	; (80023f0 <HAL_GPIO_Init+0x2c0>)
 80022b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	60bb      	str	r3, [r7, #8]
 80022ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022bc:	4a4d      	ldr	r2, [pc, #308]	; (80023f4 <HAL_GPIO_Init+0x2c4>)
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	089b      	lsrs	r3, r3, #2
 80022c2:	3302      	adds	r3, #2
 80022c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	f003 0303 	and.w	r3, r3, #3
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	220f      	movs	r2, #15
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	43db      	mvns	r3, r3
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	4013      	ands	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022e6:	d00d      	beq.n	8002304 <HAL_GPIO_Init+0x1d4>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a43      	ldr	r2, [pc, #268]	; (80023f8 <HAL_GPIO_Init+0x2c8>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d007      	beq.n	8002300 <HAL_GPIO_Init+0x1d0>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a42      	ldr	r2, [pc, #264]	; (80023fc <HAL_GPIO_Init+0x2cc>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d101      	bne.n	80022fc <HAL_GPIO_Init+0x1cc>
 80022f8:	2302      	movs	r3, #2
 80022fa:	e004      	b.n	8002306 <HAL_GPIO_Init+0x1d6>
 80022fc:	2307      	movs	r3, #7
 80022fe:	e002      	b.n	8002306 <HAL_GPIO_Init+0x1d6>
 8002300:	2301      	movs	r3, #1
 8002302:	e000      	b.n	8002306 <HAL_GPIO_Init+0x1d6>
 8002304:	2300      	movs	r3, #0
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	f002 0203 	and.w	r2, r2, #3
 800230c:	0092      	lsls	r2, r2, #2
 800230e:	4093      	lsls	r3, r2
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	4313      	orrs	r3, r2
 8002314:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002316:	4937      	ldr	r1, [pc, #220]	; (80023f4 <HAL_GPIO_Init+0x2c4>)
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	089b      	lsrs	r3, r3, #2
 800231c:	3302      	adds	r3, #2
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002324:	4b36      	ldr	r3, [pc, #216]	; (8002400 <HAL_GPIO_Init+0x2d0>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	43db      	mvns	r3, r3
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	4013      	ands	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d003      	beq.n	8002348 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	4313      	orrs	r3, r2
 8002346:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002348:	4a2d      	ldr	r2, [pc, #180]	; (8002400 <HAL_GPIO_Init+0x2d0>)
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800234e:	4b2c      	ldr	r3, [pc, #176]	; (8002400 <HAL_GPIO_Init+0x2d0>)
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	43db      	mvns	r3, r3
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	4013      	ands	r3, r2
 800235c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d003      	beq.n	8002372 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	4313      	orrs	r3, r2
 8002370:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002372:	4a23      	ldr	r2, [pc, #140]	; (8002400 <HAL_GPIO_Init+0x2d0>)
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002378:	4b21      	ldr	r3, [pc, #132]	; (8002400 <HAL_GPIO_Init+0x2d0>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	43db      	mvns	r3, r3
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	4013      	ands	r3, r2
 8002386:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d003      	beq.n	800239c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	4313      	orrs	r3, r2
 800239a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800239c:	4a18      	ldr	r2, [pc, #96]	; (8002400 <HAL_GPIO_Init+0x2d0>)
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80023a2:	4b17      	ldr	r3, [pc, #92]	; (8002400 <HAL_GPIO_Init+0x2d0>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	43db      	mvns	r3, r3
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	4013      	ands	r3, r2
 80023b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80023c6:	4a0e      	ldr	r2, [pc, #56]	; (8002400 <HAL_GPIO_Init+0x2d0>)
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	3301      	adds	r3, #1
 80023d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	fa22 f303 	lsr.w	r3, r2, r3
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f47f aeaf 	bne.w	8002140 <HAL_GPIO_Init+0x10>
  }
}
 80023e2:	bf00      	nop
 80023e4:	bf00      	nop
 80023e6:	371c      	adds	r7, #28
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	40021000 	.word	0x40021000
 80023f4:	40010000 	.word	0x40010000
 80023f8:	48000400 	.word	0x48000400
 80023fc:	48000800 	.word	0x48000800
 8002400:	40010400 	.word	0x40010400

08002404 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	460b      	mov	r3, r1
 800240e:	807b      	strh	r3, [r7, #2]
 8002410:	4613      	mov	r3, r2
 8002412:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002414:	787b      	ldrb	r3, [r7, #1]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800241a:	887a      	ldrh	r2, [r7, #2]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002420:	e002      	b.n	8002428 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002422:	887a      	ldrh	r2, [r7, #2]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002438:	4b05      	ldr	r3, [pc, #20]	; (8002450 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a04      	ldr	r2, [pc, #16]	; (8002450 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800243e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002442:	6013      	str	r3, [r2, #0]
}
 8002444:	bf00      	nop
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	40007000 	.word	0x40007000

08002454 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002458:	4b04      	ldr	r3, [pc, #16]	; (800246c <HAL_PWREx_GetVoltageRange+0x18>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002460:	4618      	mov	r0, r3
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	40007000 	.word	0x40007000

08002470 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800247e:	d130      	bne.n	80024e2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002480:	4b23      	ldr	r3, [pc, #140]	; (8002510 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002488:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800248c:	d038      	beq.n	8002500 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800248e:	4b20      	ldr	r3, [pc, #128]	; (8002510 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002496:	4a1e      	ldr	r2, [pc, #120]	; (8002510 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002498:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800249c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800249e:	4b1d      	ldr	r3, [pc, #116]	; (8002514 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2232      	movs	r2, #50	; 0x32
 80024a4:	fb02 f303 	mul.w	r3, r2, r3
 80024a8:	4a1b      	ldr	r2, [pc, #108]	; (8002518 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80024aa:	fba2 2303 	umull	r2, r3, r2, r3
 80024ae:	0c9b      	lsrs	r3, r3, #18
 80024b0:	3301      	adds	r3, #1
 80024b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024b4:	e002      	b.n	80024bc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	3b01      	subs	r3, #1
 80024ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024bc:	4b14      	ldr	r3, [pc, #80]	; (8002510 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024be:	695b      	ldr	r3, [r3, #20]
 80024c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024c8:	d102      	bne.n	80024d0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1f2      	bne.n	80024b6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024d0:	4b0f      	ldr	r3, [pc, #60]	; (8002510 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024d2:	695b      	ldr	r3, [r3, #20]
 80024d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024dc:	d110      	bne.n	8002500 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e00f      	b.n	8002502 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80024e2:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ee:	d007      	beq.n	8002500 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80024f0:	4b07      	ldr	r3, [pc, #28]	; (8002510 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024f8:	4a05      	ldr	r2, [pc, #20]	; (8002510 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024fe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3714      	adds	r7, #20
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	40007000 	.word	0x40007000
 8002514:	2000006c 	.word	0x2000006c
 8002518:	431bde83 	.word	0x431bde83

0800251c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b088      	sub	sp, #32
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d102      	bne.n	8002530 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	f000 bc02 	b.w	8002d34 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002530:	4b96      	ldr	r3, [pc, #600]	; (800278c <HAL_RCC_OscConfig+0x270>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f003 030c 	and.w	r3, r3, #12
 8002538:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800253a:	4b94      	ldr	r3, [pc, #592]	; (800278c <HAL_RCC_OscConfig+0x270>)
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	f003 0303 	and.w	r3, r3, #3
 8002542:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0310 	and.w	r3, r3, #16
 800254c:	2b00      	cmp	r3, #0
 800254e:	f000 80e4 	beq.w	800271a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d007      	beq.n	8002568 <HAL_RCC_OscConfig+0x4c>
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	2b0c      	cmp	r3, #12
 800255c:	f040 808b 	bne.w	8002676 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	2b01      	cmp	r3, #1
 8002564:	f040 8087 	bne.w	8002676 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002568:	4b88      	ldr	r3, [pc, #544]	; (800278c <HAL_RCC_OscConfig+0x270>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d005      	beq.n	8002580 <HAL_RCC_OscConfig+0x64>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e3d9      	b.n	8002d34 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a1a      	ldr	r2, [r3, #32]
 8002584:	4b81      	ldr	r3, [pc, #516]	; (800278c <HAL_RCC_OscConfig+0x270>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0308 	and.w	r3, r3, #8
 800258c:	2b00      	cmp	r3, #0
 800258e:	d004      	beq.n	800259a <HAL_RCC_OscConfig+0x7e>
 8002590:	4b7e      	ldr	r3, [pc, #504]	; (800278c <HAL_RCC_OscConfig+0x270>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002598:	e005      	b.n	80025a6 <HAL_RCC_OscConfig+0x8a>
 800259a:	4b7c      	ldr	r3, [pc, #496]	; (800278c <HAL_RCC_OscConfig+0x270>)
 800259c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025a0:	091b      	lsrs	r3, r3, #4
 80025a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d223      	bcs.n	80025f2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f000 fda8 	bl	8003104 <RCC_SetFlashLatencyFromMSIRange>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e3ba      	b.n	8002d34 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025be:	4b73      	ldr	r3, [pc, #460]	; (800278c <HAL_RCC_OscConfig+0x270>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a72      	ldr	r2, [pc, #456]	; (800278c <HAL_RCC_OscConfig+0x270>)
 80025c4:	f043 0308 	orr.w	r3, r3, #8
 80025c8:	6013      	str	r3, [r2, #0]
 80025ca:	4b70      	ldr	r3, [pc, #448]	; (800278c <HAL_RCC_OscConfig+0x270>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	496d      	ldr	r1, [pc, #436]	; (800278c <HAL_RCC_OscConfig+0x270>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025dc:	4b6b      	ldr	r3, [pc, #428]	; (800278c <HAL_RCC_OscConfig+0x270>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	021b      	lsls	r3, r3, #8
 80025ea:	4968      	ldr	r1, [pc, #416]	; (800278c <HAL_RCC_OscConfig+0x270>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	604b      	str	r3, [r1, #4]
 80025f0:	e025      	b.n	800263e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025f2:	4b66      	ldr	r3, [pc, #408]	; (800278c <HAL_RCC_OscConfig+0x270>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a65      	ldr	r2, [pc, #404]	; (800278c <HAL_RCC_OscConfig+0x270>)
 80025f8:	f043 0308 	orr.w	r3, r3, #8
 80025fc:	6013      	str	r3, [r2, #0]
 80025fe:	4b63      	ldr	r3, [pc, #396]	; (800278c <HAL_RCC_OscConfig+0x270>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	4960      	ldr	r1, [pc, #384]	; (800278c <HAL_RCC_OscConfig+0x270>)
 800260c:	4313      	orrs	r3, r2
 800260e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002610:	4b5e      	ldr	r3, [pc, #376]	; (800278c <HAL_RCC_OscConfig+0x270>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	69db      	ldr	r3, [r3, #28]
 800261c:	021b      	lsls	r3, r3, #8
 800261e:	495b      	ldr	r1, [pc, #364]	; (800278c <HAL_RCC_OscConfig+0x270>)
 8002620:	4313      	orrs	r3, r2
 8002622:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d109      	bne.n	800263e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	4618      	mov	r0, r3
 8002630:	f000 fd68 	bl	8003104 <RCC_SetFlashLatencyFromMSIRange>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e37a      	b.n	8002d34 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800263e:	f000 fc81 	bl	8002f44 <HAL_RCC_GetSysClockFreq>
 8002642:	4602      	mov	r2, r0
 8002644:	4b51      	ldr	r3, [pc, #324]	; (800278c <HAL_RCC_OscConfig+0x270>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	091b      	lsrs	r3, r3, #4
 800264a:	f003 030f 	and.w	r3, r3, #15
 800264e:	4950      	ldr	r1, [pc, #320]	; (8002790 <HAL_RCC_OscConfig+0x274>)
 8002650:	5ccb      	ldrb	r3, [r1, r3]
 8002652:	f003 031f 	and.w	r3, r3, #31
 8002656:	fa22 f303 	lsr.w	r3, r2, r3
 800265a:	4a4e      	ldr	r2, [pc, #312]	; (8002794 <HAL_RCC_OscConfig+0x278>)
 800265c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800265e:	4b4e      	ldr	r3, [pc, #312]	; (8002798 <HAL_RCC_OscConfig+0x27c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff fb28 	bl	8001cb8 <HAL_InitTick>
 8002668:	4603      	mov	r3, r0
 800266a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800266c:	7bfb      	ldrb	r3, [r7, #15]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d052      	beq.n	8002718 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002672:	7bfb      	ldrb	r3, [r7, #15]
 8002674:	e35e      	b.n	8002d34 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d032      	beq.n	80026e4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800267e:	4b43      	ldr	r3, [pc, #268]	; (800278c <HAL_RCC_OscConfig+0x270>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a42      	ldr	r2, [pc, #264]	; (800278c <HAL_RCC_OscConfig+0x270>)
 8002684:	f043 0301 	orr.w	r3, r3, #1
 8002688:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800268a:	f7ff fc3f 	bl	8001f0c <HAL_GetTick>
 800268e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002690:	e008      	b.n	80026a4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002692:	f7ff fc3b 	bl	8001f0c <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e347      	b.n	8002d34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026a4:	4b39      	ldr	r3, [pc, #228]	; (800278c <HAL_RCC_OscConfig+0x270>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d0f0      	beq.n	8002692 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026b0:	4b36      	ldr	r3, [pc, #216]	; (800278c <HAL_RCC_OscConfig+0x270>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a35      	ldr	r2, [pc, #212]	; (800278c <HAL_RCC_OscConfig+0x270>)
 80026b6:	f043 0308 	orr.w	r3, r3, #8
 80026ba:	6013      	str	r3, [r2, #0]
 80026bc:	4b33      	ldr	r3, [pc, #204]	; (800278c <HAL_RCC_OscConfig+0x270>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a1b      	ldr	r3, [r3, #32]
 80026c8:	4930      	ldr	r1, [pc, #192]	; (800278c <HAL_RCC_OscConfig+0x270>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026ce:	4b2f      	ldr	r3, [pc, #188]	; (800278c <HAL_RCC_OscConfig+0x270>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	021b      	lsls	r3, r3, #8
 80026dc:	492b      	ldr	r1, [pc, #172]	; (800278c <HAL_RCC_OscConfig+0x270>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	604b      	str	r3, [r1, #4]
 80026e2:	e01a      	b.n	800271a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026e4:	4b29      	ldr	r3, [pc, #164]	; (800278c <HAL_RCC_OscConfig+0x270>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a28      	ldr	r2, [pc, #160]	; (800278c <HAL_RCC_OscConfig+0x270>)
 80026ea:	f023 0301 	bic.w	r3, r3, #1
 80026ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026f0:	f7ff fc0c 	bl	8001f0c <HAL_GetTick>
 80026f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026f6:	e008      	b.n	800270a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026f8:	f7ff fc08 	bl	8001f0c <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b02      	cmp	r3, #2
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e314      	b.n	8002d34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800270a:	4b20      	ldr	r3, [pc, #128]	; (800278c <HAL_RCC_OscConfig+0x270>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1f0      	bne.n	80026f8 <HAL_RCC_OscConfig+0x1dc>
 8002716:	e000      	b.n	800271a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002718:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	d073      	beq.n	800280e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	2b08      	cmp	r3, #8
 800272a:	d005      	beq.n	8002738 <HAL_RCC_OscConfig+0x21c>
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	2b0c      	cmp	r3, #12
 8002730:	d10e      	bne.n	8002750 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	2b03      	cmp	r3, #3
 8002736:	d10b      	bne.n	8002750 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002738:	4b14      	ldr	r3, [pc, #80]	; (800278c <HAL_RCC_OscConfig+0x270>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d063      	beq.n	800280c <HAL_RCC_OscConfig+0x2f0>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d15f      	bne.n	800280c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e2f1      	b.n	8002d34 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002758:	d106      	bne.n	8002768 <HAL_RCC_OscConfig+0x24c>
 800275a:	4b0c      	ldr	r3, [pc, #48]	; (800278c <HAL_RCC_OscConfig+0x270>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a0b      	ldr	r2, [pc, #44]	; (800278c <HAL_RCC_OscConfig+0x270>)
 8002760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002764:	6013      	str	r3, [r2, #0]
 8002766:	e025      	b.n	80027b4 <HAL_RCC_OscConfig+0x298>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002770:	d114      	bne.n	800279c <HAL_RCC_OscConfig+0x280>
 8002772:	4b06      	ldr	r3, [pc, #24]	; (800278c <HAL_RCC_OscConfig+0x270>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a05      	ldr	r2, [pc, #20]	; (800278c <HAL_RCC_OscConfig+0x270>)
 8002778:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800277c:	6013      	str	r3, [r2, #0]
 800277e:	4b03      	ldr	r3, [pc, #12]	; (800278c <HAL_RCC_OscConfig+0x270>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a02      	ldr	r2, [pc, #8]	; (800278c <HAL_RCC_OscConfig+0x270>)
 8002784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002788:	6013      	str	r3, [r2, #0]
 800278a:	e013      	b.n	80027b4 <HAL_RCC_OscConfig+0x298>
 800278c:	40021000 	.word	0x40021000
 8002790:	080053d4 	.word	0x080053d4
 8002794:	2000006c 	.word	0x2000006c
 8002798:	20000070 	.word	0x20000070
 800279c:	4ba0      	ldr	r3, [pc, #640]	; (8002a20 <HAL_RCC_OscConfig+0x504>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a9f      	ldr	r2, [pc, #636]	; (8002a20 <HAL_RCC_OscConfig+0x504>)
 80027a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027a6:	6013      	str	r3, [r2, #0]
 80027a8:	4b9d      	ldr	r3, [pc, #628]	; (8002a20 <HAL_RCC_OscConfig+0x504>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a9c      	ldr	r2, [pc, #624]	; (8002a20 <HAL_RCC_OscConfig+0x504>)
 80027ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d013      	beq.n	80027e4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027bc:	f7ff fba6 	bl	8001f0c <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027c4:	f7ff fba2 	bl	8001f0c <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b64      	cmp	r3, #100	; 0x64
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e2ae      	b.n	8002d34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027d6:	4b92      	ldr	r3, [pc, #584]	; (8002a20 <HAL_RCC_OscConfig+0x504>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d0f0      	beq.n	80027c4 <HAL_RCC_OscConfig+0x2a8>
 80027e2:	e014      	b.n	800280e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e4:	f7ff fb92 	bl	8001f0c <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027ec:	f7ff fb8e 	bl	8001f0c <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b64      	cmp	r3, #100	; 0x64
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e29a      	b.n	8002d34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027fe:	4b88      	ldr	r3, [pc, #544]	; (8002a20 <HAL_RCC_OscConfig+0x504>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1f0      	bne.n	80027ec <HAL_RCC_OscConfig+0x2d0>
 800280a:	e000      	b.n	800280e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800280c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d060      	beq.n	80028dc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	2b04      	cmp	r3, #4
 800281e:	d005      	beq.n	800282c <HAL_RCC_OscConfig+0x310>
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	2b0c      	cmp	r3, #12
 8002824:	d119      	bne.n	800285a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	2b02      	cmp	r3, #2
 800282a:	d116      	bne.n	800285a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800282c:	4b7c      	ldr	r3, [pc, #496]	; (8002a20 <HAL_RCC_OscConfig+0x504>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002834:	2b00      	cmp	r3, #0
 8002836:	d005      	beq.n	8002844 <HAL_RCC_OscConfig+0x328>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d101      	bne.n	8002844 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e277      	b.n	8002d34 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002844:	4b76      	ldr	r3, [pc, #472]	; (8002a20 <HAL_RCC_OscConfig+0x504>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	061b      	lsls	r3, r3, #24
 8002852:	4973      	ldr	r1, [pc, #460]	; (8002a20 <HAL_RCC_OscConfig+0x504>)
 8002854:	4313      	orrs	r3, r2
 8002856:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002858:	e040      	b.n	80028dc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d023      	beq.n	80028aa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002862:	4b6f      	ldr	r3, [pc, #444]	; (8002a20 <HAL_RCC_OscConfig+0x504>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a6e      	ldr	r2, [pc, #440]	; (8002a20 <HAL_RCC_OscConfig+0x504>)
 8002868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800286c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286e:	f7ff fb4d 	bl	8001f0c <HAL_GetTick>
 8002872:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002874:	e008      	b.n	8002888 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002876:	f7ff fb49 	bl	8001f0c <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e255      	b.n	8002d34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002888:	4b65      	ldr	r3, [pc, #404]	; (8002a20 <HAL_RCC_OscConfig+0x504>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002890:	2b00      	cmp	r3, #0
 8002892:	d0f0      	beq.n	8002876 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002894:	4b62      	ldr	r3, [pc, #392]	; (8002a20 <HAL_RCC_OscConfig+0x504>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	061b      	lsls	r3, r3, #24
 80028a2:	495f      	ldr	r1, [pc, #380]	; (8002a20 <HAL_RCC_OscConfig+0x504>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	604b      	str	r3, [r1, #4]
 80028a8:	e018      	b.n	80028dc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028aa:	4b5d      	ldr	r3, [pc, #372]	; (8002a20 <HAL_RCC_OscConfig+0x504>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a5c      	ldr	r2, [pc, #368]	; (8002a20 <HAL_RCC_OscConfig+0x504>)
 80028b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b6:	f7ff fb29 	bl	8001f0c <HAL_GetTick>
 80028ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028bc:	e008      	b.n	80028d0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028be:	f7ff fb25 	bl	8001f0c <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e231      	b.n	8002d34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028d0:	4b53      	ldr	r3, [pc, #332]	; (8002a20 <HAL_RCC_OscConfig+0x504>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1f0      	bne.n	80028be <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0308 	and.w	r3, r3, #8
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d03c      	beq.n	8002962 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	695b      	ldr	r3, [r3, #20]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d01c      	beq.n	800292a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028f0:	4b4b      	ldr	r3, [pc, #300]	; (8002a20 <HAL_RCC_OscConfig+0x504>)
 80028f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028f6:	4a4a      	ldr	r2, [pc, #296]	; (8002a20 <HAL_RCC_OscConfig+0x504>)
 80028f8:	f043 0301 	orr.w	r3, r3, #1
 80028fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002900:	f7ff fb04 	bl	8001f0c <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002908:	f7ff fb00 	bl	8001f0c <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e20c      	b.n	8002d34 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800291a:	4b41      	ldr	r3, [pc, #260]	; (8002a20 <HAL_RCC_OscConfig+0x504>)
 800291c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d0ef      	beq.n	8002908 <HAL_RCC_OscConfig+0x3ec>
 8002928:	e01b      	b.n	8002962 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800292a:	4b3d      	ldr	r3, [pc, #244]	; (8002a20 <HAL_RCC_OscConfig+0x504>)
 800292c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002930:	4a3b      	ldr	r2, [pc, #236]	; (8002a20 <HAL_RCC_OscConfig+0x504>)
 8002932:	f023 0301 	bic.w	r3, r3, #1
 8002936:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800293a:	f7ff fae7 	bl	8001f0c <HAL_GetTick>
 800293e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002940:	e008      	b.n	8002954 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002942:	f7ff fae3 	bl	8001f0c <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e1ef      	b.n	8002d34 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002954:	4b32      	ldr	r3, [pc, #200]	; (8002a20 <HAL_RCC_OscConfig+0x504>)
 8002956:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1ef      	bne.n	8002942 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0304 	and.w	r3, r3, #4
 800296a:	2b00      	cmp	r3, #0
 800296c:	f000 80a6 	beq.w	8002abc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002970:	2300      	movs	r3, #0
 8002972:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002974:	4b2a      	ldr	r3, [pc, #168]	; (8002a20 <HAL_RCC_OscConfig+0x504>)
 8002976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d10d      	bne.n	800299c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002980:	4b27      	ldr	r3, [pc, #156]	; (8002a20 <HAL_RCC_OscConfig+0x504>)
 8002982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002984:	4a26      	ldr	r2, [pc, #152]	; (8002a20 <HAL_RCC_OscConfig+0x504>)
 8002986:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800298a:	6593      	str	r3, [r2, #88]	; 0x58
 800298c:	4b24      	ldr	r3, [pc, #144]	; (8002a20 <HAL_RCC_OscConfig+0x504>)
 800298e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002994:	60bb      	str	r3, [r7, #8]
 8002996:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002998:	2301      	movs	r3, #1
 800299a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800299c:	4b21      	ldr	r3, [pc, #132]	; (8002a24 <HAL_RCC_OscConfig+0x508>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d118      	bne.n	80029da <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029a8:	4b1e      	ldr	r3, [pc, #120]	; (8002a24 <HAL_RCC_OscConfig+0x508>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a1d      	ldr	r2, [pc, #116]	; (8002a24 <HAL_RCC_OscConfig+0x508>)
 80029ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029b4:	f7ff faaa 	bl	8001f0c <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029bc:	f7ff faa6 	bl	8001f0c <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e1b2      	b.n	8002d34 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029ce:	4b15      	ldr	r3, [pc, #84]	; (8002a24 <HAL_RCC_OscConfig+0x508>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0f0      	beq.n	80029bc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d108      	bne.n	80029f4 <HAL_RCC_OscConfig+0x4d8>
 80029e2:	4b0f      	ldr	r3, [pc, #60]	; (8002a20 <HAL_RCC_OscConfig+0x504>)
 80029e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e8:	4a0d      	ldr	r2, [pc, #52]	; (8002a20 <HAL_RCC_OscConfig+0x504>)
 80029ea:	f043 0301 	orr.w	r3, r3, #1
 80029ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029f2:	e029      	b.n	8002a48 <HAL_RCC_OscConfig+0x52c>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	2b05      	cmp	r3, #5
 80029fa:	d115      	bne.n	8002a28 <HAL_RCC_OscConfig+0x50c>
 80029fc:	4b08      	ldr	r3, [pc, #32]	; (8002a20 <HAL_RCC_OscConfig+0x504>)
 80029fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a02:	4a07      	ldr	r2, [pc, #28]	; (8002a20 <HAL_RCC_OscConfig+0x504>)
 8002a04:	f043 0304 	orr.w	r3, r3, #4
 8002a08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a0c:	4b04      	ldr	r3, [pc, #16]	; (8002a20 <HAL_RCC_OscConfig+0x504>)
 8002a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a12:	4a03      	ldr	r2, [pc, #12]	; (8002a20 <HAL_RCC_OscConfig+0x504>)
 8002a14:	f043 0301 	orr.w	r3, r3, #1
 8002a18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a1c:	e014      	b.n	8002a48 <HAL_RCC_OscConfig+0x52c>
 8002a1e:	bf00      	nop
 8002a20:	40021000 	.word	0x40021000
 8002a24:	40007000 	.word	0x40007000
 8002a28:	4b9a      	ldr	r3, [pc, #616]	; (8002c94 <HAL_RCC_OscConfig+0x778>)
 8002a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a2e:	4a99      	ldr	r2, [pc, #612]	; (8002c94 <HAL_RCC_OscConfig+0x778>)
 8002a30:	f023 0301 	bic.w	r3, r3, #1
 8002a34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a38:	4b96      	ldr	r3, [pc, #600]	; (8002c94 <HAL_RCC_OscConfig+0x778>)
 8002a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a3e:	4a95      	ldr	r2, [pc, #596]	; (8002c94 <HAL_RCC_OscConfig+0x778>)
 8002a40:	f023 0304 	bic.w	r3, r3, #4
 8002a44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d016      	beq.n	8002a7e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a50:	f7ff fa5c 	bl	8001f0c <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a56:	e00a      	b.n	8002a6e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a58:	f7ff fa58 	bl	8001f0c <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e162      	b.n	8002d34 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a6e:	4b89      	ldr	r3, [pc, #548]	; (8002c94 <HAL_RCC_OscConfig+0x778>)
 8002a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0ed      	beq.n	8002a58 <HAL_RCC_OscConfig+0x53c>
 8002a7c:	e015      	b.n	8002aaa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a7e:	f7ff fa45 	bl	8001f0c <HAL_GetTick>
 8002a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a84:	e00a      	b.n	8002a9c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a86:	f7ff fa41 	bl	8001f0c <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e14b      	b.n	8002d34 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a9c:	4b7d      	ldr	r3, [pc, #500]	; (8002c94 <HAL_RCC_OscConfig+0x778>)
 8002a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1ed      	bne.n	8002a86 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002aaa:	7ffb      	ldrb	r3, [r7, #31]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d105      	bne.n	8002abc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ab0:	4b78      	ldr	r3, [pc, #480]	; (8002c94 <HAL_RCC_OscConfig+0x778>)
 8002ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab4:	4a77      	ldr	r2, [pc, #476]	; (8002c94 <HAL_RCC_OscConfig+0x778>)
 8002ab6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aba:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0320 	and.w	r3, r3, #32
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d03c      	beq.n	8002b42 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d01c      	beq.n	8002b0a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ad0:	4b70      	ldr	r3, [pc, #448]	; (8002c94 <HAL_RCC_OscConfig+0x778>)
 8002ad2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ad6:	4a6f      	ldr	r2, [pc, #444]	; (8002c94 <HAL_RCC_OscConfig+0x778>)
 8002ad8:	f043 0301 	orr.w	r3, r3, #1
 8002adc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae0:	f7ff fa14 	bl	8001f0c <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ae8:	f7ff fa10 	bl	8001f0c <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e11c      	b.n	8002d34 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002afa:	4b66      	ldr	r3, [pc, #408]	; (8002c94 <HAL_RCC_OscConfig+0x778>)
 8002afc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0ef      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x5cc>
 8002b08:	e01b      	b.n	8002b42 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b0a:	4b62      	ldr	r3, [pc, #392]	; (8002c94 <HAL_RCC_OscConfig+0x778>)
 8002b0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b10:	4a60      	ldr	r2, [pc, #384]	; (8002c94 <HAL_RCC_OscConfig+0x778>)
 8002b12:	f023 0301 	bic.w	r3, r3, #1
 8002b16:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b1a:	f7ff f9f7 	bl	8001f0c <HAL_GetTick>
 8002b1e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b22:	f7ff f9f3 	bl	8001f0c <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e0ff      	b.n	8002d34 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b34:	4b57      	ldr	r3, [pc, #348]	; (8002c94 <HAL_RCC_OscConfig+0x778>)
 8002b36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1ef      	bne.n	8002b22 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f000 80f3 	beq.w	8002d32 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	f040 80c9 	bne.w	8002ce8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b56:	4b4f      	ldr	r3, [pc, #316]	; (8002c94 <HAL_RCC_OscConfig+0x778>)
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	f003 0203 	and.w	r2, r3, #3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d12c      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b74:	3b01      	subs	r3, #1
 8002b76:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d123      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b86:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d11b      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b96:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d113      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba6:	085b      	lsrs	r3, r3, #1
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d109      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	085b      	lsrs	r3, r3, #1
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d06b      	beq.n	8002c9c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	2b0c      	cmp	r3, #12
 8002bc8:	d062      	beq.n	8002c90 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002bca:	4b32      	ldr	r3, [pc, #200]	; (8002c94 <HAL_RCC_OscConfig+0x778>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e0ac      	b.n	8002d34 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002bda:	4b2e      	ldr	r3, [pc, #184]	; (8002c94 <HAL_RCC_OscConfig+0x778>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a2d      	ldr	r2, [pc, #180]	; (8002c94 <HAL_RCC_OscConfig+0x778>)
 8002be0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002be4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002be6:	f7ff f991 	bl	8001f0c <HAL_GetTick>
 8002bea:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bec:	e008      	b.n	8002c00 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bee:	f7ff f98d 	bl	8001f0c <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e099      	b.n	8002d34 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c00:	4b24      	ldr	r3, [pc, #144]	; (8002c94 <HAL_RCC_OscConfig+0x778>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d1f0      	bne.n	8002bee <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c0c:	4b21      	ldr	r3, [pc, #132]	; (8002c94 <HAL_RCC_OscConfig+0x778>)
 8002c0e:	68da      	ldr	r2, [r3, #12]
 8002c10:	4b21      	ldr	r3, [pc, #132]	; (8002c98 <HAL_RCC_OscConfig+0x77c>)
 8002c12:	4013      	ands	r3, r2
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c1c:	3a01      	subs	r2, #1
 8002c1e:	0112      	lsls	r2, r2, #4
 8002c20:	4311      	orrs	r1, r2
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c26:	0212      	lsls	r2, r2, #8
 8002c28:	4311      	orrs	r1, r2
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c2e:	0852      	lsrs	r2, r2, #1
 8002c30:	3a01      	subs	r2, #1
 8002c32:	0552      	lsls	r2, r2, #21
 8002c34:	4311      	orrs	r1, r2
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c3a:	0852      	lsrs	r2, r2, #1
 8002c3c:	3a01      	subs	r2, #1
 8002c3e:	0652      	lsls	r2, r2, #25
 8002c40:	4311      	orrs	r1, r2
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c46:	06d2      	lsls	r2, r2, #27
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	4912      	ldr	r1, [pc, #72]	; (8002c94 <HAL_RCC_OscConfig+0x778>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c50:	4b10      	ldr	r3, [pc, #64]	; (8002c94 <HAL_RCC_OscConfig+0x778>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a0f      	ldr	r2, [pc, #60]	; (8002c94 <HAL_RCC_OscConfig+0x778>)
 8002c56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c5a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c5c:	4b0d      	ldr	r3, [pc, #52]	; (8002c94 <HAL_RCC_OscConfig+0x778>)
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	4a0c      	ldr	r2, [pc, #48]	; (8002c94 <HAL_RCC_OscConfig+0x778>)
 8002c62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c66:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c68:	f7ff f950 	bl	8001f0c <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c70:	f7ff f94c 	bl	8001f0c <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e058      	b.n	8002d34 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c82:	4b04      	ldr	r3, [pc, #16]	; (8002c94 <HAL_RCC_OscConfig+0x778>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d0f0      	beq.n	8002c70 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c8e:	e050      	b.n	8002d32 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e04f      	b.n	8002d34 <HAL_RCC_OscConfig+0x818>
 8002c94:	40021000 	.word	0x40021000
 8002c98:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c9c:	4b27      	ldr	r3, [pc, #156]	; (8002d3c <HAL_RCC_OscConfig+0x820>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d144      	bne.n	8002d32 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ca8:	4b24      	ldr	r3, [pc, #144]	; (8002d3c <HAL_RCC_OscConfig+0x820>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a23      	ldr	r2, [pc, #140]	; (8002d3c <HAL_RCC_OscConfig+0x820>)
 8002cae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cb2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cb4:	4b21      	ldr	r3, [pc, #132]	; (8002d3c <HAL_RCC_OscConfig+0x820>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	4a20      	ldr	r2, [pc, #128]	; (8002d3c <HAL_RCC_OscConfig+0x820>)
 8002cba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cbe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cc0:	f7ff f924 	bl	8001f0c <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc8:	f7ff f920 	bl	8001f0c <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e02c      	b.n	8002d34 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cda:	4b18      	ldr	r3, [pc, #96]	; (8002d3c <HAL_RCC_OscConfig+0x820>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d0f0      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x7ac>
 8002ce6:	e024      	b.n	8002d32 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	2b0c      	cmp	r3, #12
 8002cec:	d01f      	beq.n	8002d2e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cee:	4b13      	ldr	r3, [pc, #76]	; (8002d3c <HAL_RCC_OscConfig+0x820>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a12      	ldr	r2, [pc, #72]	; (8002d3c <HAL_RCC_OscConfig+0x820>)
 8002cf4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfa:	f7ff f907 	bl	8001f0c <HAL_GetTick>
 8002cfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d00:	e008      	b.n	8002d14 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d02:	f7ff f903 	bl	8001f0c <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e00f      	b.n	8002d34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d14:	4b09      	ldr	r3, [pc, #36]	; (8002d3c <HAL_RCC_OscConfig+0x820>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1f0      	bne.n	8002d02 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002d20:	4b06      	ldr	r3, [pc, #24]	; (8002d3c <HAL_RCC_OscConfig+0x820>)
 8002d22:	68da      	ldr	r2, [r3, #12]
 8002d24:	4905      	ldr	r1, [pc, #20]	; (8002d3c <HAL_RCC_OscConfig+0x820>)
 8002d26:	4b06      	ldr	r3, [pc, #24]	; (8002d40 <HAL_RCC_OscConfig+0x824>)
 8002d28:	4013      	ands	r3, r2
 8002d2a:	60cb      	str	r3, [r1, #12]
 8002d2c:	e001      	b.n	8002d32 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e000      	b.n	8002d34 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3720      	adds	r7, #32
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	feeefffc 	.word	0xfeeefffc

08002d44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d101      	bne.n	8002d58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e0e7      	b.n	8002f28 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d58:	4b75      	ldr	r3, [pc, #468]	; (8002f30 <HAL_RCC_ClockConfig+0x1ec>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0307 	and.w	r3, r3, #7
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d910      	bls.n	8002d88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d66:	4b72      	ldr	r3, [pc, #456]	; (8002f30 <HAL_RCC_ClockConfig+0x1ec>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f023 0207 	bic.w	r2, r3, #7
 8002d6e:	4970      	ldr	r1, [pc, #448]	; (8002f30 <HAL_RCC_ClockConfig+0x1ec>)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d76:	4b6e      	ldr	r3, [pc, #440]	; (8002f30 <HAL_RCC_ClockConfig+0x1ec>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0307 	and.w	r3, r3, #7
 8002d7e:	683a      	ldr	r2, [r7, #0]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d001      	beq.n	8002d88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e0cf      	b.n	8002f28 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d010      	beq.n	8002db6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689a      	ldr	r2, [r3, #8]
 8002d98:	4b66      	ldr	r3, [pc, #408]	; (8002f34 <HAL_RCC_ClockConfig+0x1f0>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d908      	bls.n	8002db6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002da4:	4b63      	ldr	r3, [pc, #396]	; (8002f34 <HAL_RCC_ClockConfig+0x1f0>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	4960      	ldr	r1, [pc, #384]	; (8002f34 <HAL_RCC_ClockConfig+0x1f0>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d04c      	beq.n	8002e5c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2b03      	cmp	r3, #3
 8002dc8:	d107      	bne.n	8002dda <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dca:	4b5a      	ldr	r3, [pc, #360]	; (8002f34 <HAL_RCC_ClockConfig+0x1f0>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d121      	bne.n	8002e1a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e0a6      	b.n	8002f28 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d107      	bne.n	8002df2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002de2:	4b54      	ldr	r3, [pc, #336]	; (8002f34 <HAL_RCC_ClockConfig+0x1f0>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d115      	bne.n	8002e1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e09a      	b.n	8002f28 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d107      	bne.n	8002e0a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002dfa:	4b4e      	ldr	r3, [pc, #312]	; (8002f34 <HAL_RCC_ClockConfig+0x1f0>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d109      	bne.n	8002e1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e08e      	b.n	8002f28 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e0a:	4b4a      	ldr	r3, [pc, #296]	; (8002f34 <HAL_RCC_ClockConfig+0x1f0>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e086      	b.n	8002f28 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e1a:	4b46      	ldr	r3, [pc, #280]	; (8002f34 <HAL_RCC_ClockConfig+0x1f0>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f023 0203 	bic.w	r2, r3, #3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	4943      	ldr	r1, [pc, #268]	; (8002f34 <HAL_RCC_ClockConfig+0x1f0>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e2c:	f7ff f86e 	bl	8001f0c <HAL_GetTick>
 8002e30:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e32:	e00a      	b.n	8002e4a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e34:	f7ff f86a 	bl	8001f0c <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e06e      	b.n	8002f28 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e4a:	4b3a      	ldr	r3, [pc, #232]	; (8002f34 <HAL_RCC_ClockConfig+0x1f0>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f003 020c 	and.w	r2, r3, #12
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d1eb      	bne.n	8002e34 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d010      	beq.n	8002e8a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	4b31      	ldr	r3, [pc, #196]	; (8002f34 <HAL_RCC_ClockConfig+0x1f0>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d208      	bcs.n	8002e8a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e78:	4b2e      	ldr	r3, [pc, #184]	; (8002f34 <HAL_RCC_ClockConfig+0x1f0>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	492b      	ldr	r1, [pc, #172]	; (8002f34 <HAL_RCC_ClockConfig+0x1f0>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e8a:	4b29      	ldr	r3, [pc, #164]	; (8002f30 <HAL_RCC_ClockConfig+0x1ec>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0307 	and.w	r3, r3, #7
 8002e92:	683a      	ldr	r2, [r7, #0]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d210      	bcs.n	8002eba <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e98:	4b25      	ldr	r3, [pc, #148]	; (8002f30 <HAL_RCC_ClockConfig+0x1ec>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f023 0207 	bic.w	r2, r3, #7
 8002ea0:	4923      	ldr	r1, [pc, #140]	; (8002f30 <HAL_RCC_ClockConfig+0x1ec>)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ea8:	4b21      	ldr	r3, [pc, #132]	; (8002f30 <HAL_RCC_ClockConfig+0x1ec>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d001      	beq.n	8002eba <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e036      	b.n	8002f28 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0304 	and.w	r3, r3, #4
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d008      	beq.n	8002ed8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ec6:	4b1b      	ldr	r3, [pc, #108]	; (8002f34 <HAL_RCC_ClockConfig+0x1f0>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	4918      	ldr	r1, [pc, #96]	; (8002f34 <HAL_RCC_ClockConfig+0x1f0>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0308 	and.w	r3, r3, #8
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d009      	beq.n	8002ef8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ee4:	4b13      	ldr	r3, [pc, #76]	; (8002f34 <HAL_RCC_ClockConfig+0x1f0>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	4910      	ldr	r1, [pc, #64]	; (8002f34 <HAL_RCC_ClockConfig+0x1f0>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ef8:	f000 f824 	bl	8002f44 <HAL_RCC_GetSysClockFreq>
 8002efc:	4602      	mov	r2, r0
 8002efe:	4b0d      	ldr	r3, [pc, #52]	; (8002f34 <HAL_RCC_ClockConfig+0x1f0>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	091b      	lsrs	r3, r3, #4
 8002f04:	f003 030f 	and.w	r3, r3, #15
 8002f08:	490b      	ldr	r1, [pc, #44]	; (8002f38 <HAL_RCC_ClockConfig+0x1f4>)
 8002f0a:	5ccb      	ldrb	r3, [r1, r3]
 8002f0c:	f003 031f 	and.w	r3, r3, #31
 8002f10:	fa22 f303 	lsr.w	r3, r2, r3
 8002f14:	4a09      	ldr	r2, [pc, #36]	; (8002f3c <HAL_RCC_ClockConfig+0x1f8>)
 8002f16:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f18:	4b09      	ldr	r3, [pc, #36]	; (8002f40 <HAL_RCC_ClockConfig+0x1fc>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7fe fecb 	bl	8001cb8 <HAL_InitTick>
 8002f22:	4603      	mov	r3, r0
 8002f24:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f26:	7afb      	ldrb	r3, [r7, #11]
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3710      	adds	r7, #16
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40022000 	.word	0x40022000
 8002f34:	40021000 	.word	0x40021000
 8002f38:	080053d4 	.word	0x080053d4
 8002f3c:	2000006c 	.word	0x2000006c
 8002f40:	20000070 	.word	0x20000070

08002f44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b089      	sub	sp, #36	; 0x24
 8002f48:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	61fb      	str	r3, [r7, #28]
 8002f4e:	2300      	movs	r3, #0
 8002f50:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f52:	4b3e      	ldr	r3, [pc, #248]	; (800304c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f003 030c 	and.w	r3, r3, #12
 8002f5a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f5c:	4b3b      	ldr	r3, [pc, #236]	; (800304c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	f003 0303 	and.w	r3, r3, #3
 8002f64:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d005      	beq.n	8002f78 <HAL_RCC_GetSysClockFreq+0x34>
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	2b0c      	cmp	r3, #12
 8002f70:	d121      	bne.n	8002fb6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d11e      	bne.n	8002fb6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f78:	4b34      	ldr	r3, [pc, #208]	; (800304c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0308 	and.w	r3, r3, #8
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d107      	bne.n	8002f94 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f84:	4b31      	ldr	r3, [pc, #196]	; (800304c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f8a:	0a1b      	lsrs	r3, r3, #8
 8002f8c:	f003 030f 	and.w	r3, r3, #15
 8002f90:	61fb      	str	r3, [r7, #28]
 8002f92:	e005      	b.n	8002fa0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f94:	4b2d      	ldr	r3, [pc, #180]	; (800304c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	091b      	lsrs	r3, r3, #4
 8002f9a:	f003 030f 	and.w	r3, r3, #15
 8002f9e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002fa0:	4a2b      	ldr	r2, [pc, #172]	; (8003050 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fa8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10d      	bne.n	8002fcc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fb4:	e00a      	b.n	8002fcc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	2b04      	cmp	r3, #4
 8002fba:	d102      	bne.n	8002fc2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002fbc:	4b25      	ldr	r3, [pc, #148]	; (8003054 <HAL_RCC_GetSysClockFreq+0x110>)
 8002fbe:	61bb      	str	r3, [r7, #24]
 8002fc0:	e004      	b.n	8002fcc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	2b08      	cmp	r3, #8
 8002fc6:	d101      	bne.n	8002fcc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002fc8:	4b23      	ldr	r3, [pc, #140]	; (8003058 <HAL_RCC_GetSysClockFreq+0x114>)
 8002fca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	2b0c      	cmp	r3, #12
 8002fd0:	d134      	bne.n	800303c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002fd2:	4b1e      	ldr	r3, [pc, #120]	; (800304c <HAL_RCC_GetSysClockFreq+0x108>)
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	f003 0303 	and.w	r3, r3, #3
 8002fda:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d003      	beq.n	8002fea <HAL_RCC_GetSysClockFreq+0xa6>
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	2b03      	cmp	r3, #3
 8002fe6:	d003      	beq.n	8002ff0 <HAL_RCC_GetSysClockFreq+0xac>
 8002fe8:	e005      	b.n	8002ff6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002fea:	4b1a      	ldr	r3, [pc, #104]	; (8003054 <HAL_RCC_GetSysClockFreq+0x110>)
 8002fec:	617b      	str	r3, [r7, #20]
      break;
 8002fee:	e005      	b.n	8002ffc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ff0:	4b19      	ldr	r3, [pc, #100]	; (8003058 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ff2:	617b      	str	r3, [r7, #20]
      break;
 8002ff4:	e002      	b.n	8002ffc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	617b      	str	r3, [r7, #20]
      break;
 8002ffa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ffc:	4b13      	ldr	r3, [pc, #76]	; (800304c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	091b      	lsrs	r3, r3, #4
 8003002:	f003 0307 	and.w	r3, r3, #7
 8003006:	3301      	adds	r3, #1
 8003008:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800300a:	4b10      	ldr	r3, [pc, #64]	; (800304c <HAL_RCC_GetSysClockFreq+0x108>)
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	0a1b      	lsrs	r3, r3, #8
 8003010:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003014:	697a      	ldr	r2, [r7, #20]
 8003016:	fb03 f202 	mul.w	r2, r3, r2
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003020:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003022:	4b0a      	ldr	r3, [pc, #40]	; (800304c <HAL_RCC_GetSysClockFreq+0x108>)
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	0e5b      	lsrs	r3, r3, #25
 8003028:	f003 0303 	and.w	r3, r3, #3
 800302c:	3301      	adds	r3, #1
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	fbb2 f3f3 	udiv	r3, r2, r3
 800303a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800303c:	69bb      	ldr	r3, [r7, #24]
}
 800303e:	4618      	mov	r0, r3
 8003040:	3724      	adds	r7, #36	; 0x24
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	40021000 	.word	0x40021000
 8003050:	080053ec 	.word	0x080053ec
 8003054:	00f42400 	.word	0x00f42400
 8003058:	007a1200 	.word	0x007a1200

0800305c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003060:	4b03      	ldr	r3, [pc, #12]	; (8003070 <HAL_RCC_GetHCLKFreq+0x14>)
 8003062:	681b      	ldr	r3, [r3, #0]
}
 8003064:	4618      	mov	r0, r3
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	2000006c 	.word	0x2000006c

08003074 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003078:	f7ff fff0 	bl	800305c <HAL_RCC_GetHCLKFreq>
 800307c:	4602      	mov	r2, r0
 800307e:	4b06      	ldr	r3, [pc, #24]	; (8003098 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	0a1b      	lsrs	r3, r3, #8
 8003084:	f003 0307 	and.w	r3, r3, #7
 8003088:	4904      	ldr	r1, [pc, #16]	; (800309c <HAL_RCC_GetPCLK1Freq+0x28>)
 800308a:	5ccb      	ldrb	r3, [r1, r3]
 800308c:	f003 031f 	and.w	r3, r3, #31
 8003090:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003094:	4618      	mov	r0, r3
 8003096:	bd80      	pop	{r7, pc}
 8003098:	40021000 	.word	0x40021000
 800309c:	080053e4 	.word	0x080053e4

080030a0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	220f      	movs	r2, #15
 80030ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80030b0:	4b12      	ldr	r3, [pc, #72]	; (80030fc <HAL_RCC_GetClockConfig+0x5c>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f003 0203 	and.w	r2, r3, #3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80030bc:	4b0f      	ldr	r3, [pc, #60]	; (80030fc <HAL_RCC_GetClockConfig+0x5c>)
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80030c8:	4b0c      	ldr	r3, [pc, #48]	; (80030fc <HAL_RCC_GetClockConfig+0x5c>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80030d4:	4b09      	ldr	r3, [pc, #36]	; (80030fc <HAL_RCC_GetClockConfig+0x5c>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	08db      	lsrs	r3, r3, #3
 80030da:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80030e2:	4b07      	ldr	r3, [pc, #28]	; (8003100 <HAL_RCC_GetClockConfig+0x60>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0207 	and.w	r2, r3, #7
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	601a      	str	r2, [r3, #0]
}
 80030ee:	bf00      	nop
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	40021000 	.word	0x40021000
 8003100:	40022000 	.word	0x40022000

08003104 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800310c:	2300      	movs	r3, #0
 800310e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003110:	4b2a      	ldr	r3, [pc, #168]	; (80031bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d003      	beq.n	8003124 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800311c:	f7ff f99a 	bl	8002454 <HAL_PWREx_GetVoltageRange>
 8003120:	6178      	str	r0, [r7, #20]
 8003122:	e014      	b.n	800314e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003124:	4b25      	ldr	r3, [pc, #148]	; (80031bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003128:	4a24      	ldr	r2, [pc, #144]	; (80031bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800312a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800312e:	6593      	str	r3, [r2, #88]	; 0x58
 8003130:	4b22      	ldr	r3, [pc, #136]	; (80031bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003138:	60fb      	str	r3, [r7, #12]
 800313a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800313c:	f7ff f98a 	bl	8002454 <HAL_PWREx_GetVoltageRange>
 8003140:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003142:	4b1e      	ldr	r3, [pc, #120]	; (80031bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003146:	4a1d      	ldr	r2, [pc, #116]	; (80031bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003148:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800314c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003154:	d10b      	bne.n	800316e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2b80      	cmp	r3, #128	; 0x80
 800315a:	d919      	bls.n	8003190 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2ba0      	cmp	r3, #160	; 0xa0
 8003160:	d902      	bls.n	8003168 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003162:	2302      	movs	r3, #2
 8003164:	613b      	str	r3, [r7, #16]
 8003166:	e013      	b.n	8003190 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003168:	2301      	movs	r3, #1
 800316a:	613b      	str	r3, [r7, #16]
 800316c:	e010      	b.n	8003190 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2b80      	cmp	r3, #128	; 0x80
 8003172:	d902      	bls.n	800317a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003174:	2303      	movs	r3, #3
 8003176:	613b      	str	r3, [r7, #16]
 8003178:	e00a      	b.n	8003190 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b80      	cmp	r3, #128	; 0x80
 800317e:	d102      	bne.n	8003186 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003180:	2302      	movs	r3, #2
 8003182:	613b      	str	r3, [r7, #16]
 8003184:	e004      	b.n	8003190 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b70      	cmp	r3, #112	; 0x70
 800318a:	d101      	bne.n	8003190 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800318c:	2301      	movs	r3, #1
 800318e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003190:	4b0b      	ldr	r3, [pc, #44]	; (80031c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f023 0207 	bic.w	r2, r3, #7
 8003198:	4909      	ldr	r1, [pc, #36]	; (80031c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	4313      	orrs	r3, r2
 800319e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031a0:	4b07      	ldr	r3, [pc, #28]	; (80031c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0307 	and.w	r3, r3, #7
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d001      	beq.n	80031b2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e000      	b.n	80031b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3718      	adds	r7, #24
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	40021000 	.word	0x40021000
 80031c0:	40022000 	.word	0x40022000

080031c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031cc:	2300      	movs	r3, #0
 80031ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031d0:	2300      	movs	r3, #0
 80031d2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d031      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80031e8:	d01a      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80031ea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80031ee:	d814      	bhi.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x56>
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d009      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80031f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031f8:	d10f      	bne.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80031fa:	4b5d      	ldr	r3, [pc, #372]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	4a5c      	ldr	r2, [pc, #368]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003204:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003206:	e00c      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	3304      	adds	r3, #4
 800320c:	2100      	movs	r1, #0
 800320e:	4618      	mov	r0, r3
 8003210:	f000 f9de 	bl	80035d0 <RCCEx_PLLSAI1_Config>
 8003214:	4603      	mov	r3, r0
 8003216:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003218:	e003      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	74fb      	strb	r3, [r7, #19]
      break;
 800321e:	e000      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003220:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003222:	7cfb      	ldrb	r3, [r7, #19]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d10b      	bne.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003228:	4b51      	ldr	r3, [pc, #324]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800322a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800322e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003236:	494e      	ldr	r1, [pc, #312]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003238:	4313      	orrs	r3, r2
 800323a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800323e:	e001      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003240:	7cfb      	ldrb	r3, [r7, #19]
 8003242:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 809e 	beq.w	800338e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003252:	2300      	movs	r3, #0
 8003254:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003256:	4b46      	ldr	r3, [pc, #280]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800325a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003262:	2301      	movs	r3, #1
 8003264:	e000      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003266:	2300      	movs	r3, #0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00d      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800326c:	4b40      	ldr	r3, [pc, #256]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800326e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003270:	4a3f      	ldr	r2, [pc, #252]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003272:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003276:	6593      	str	r3, [r2, #88]	; 0x58
 8003278:	4b3d      	ldr	r3, [pc, #244]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800327a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800327c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003280:	60bb      	str	r3, [r7, #8]
 8003282:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003284:	2301      	movs	r3, #1
 8003286:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003288:	4b3a      	ldr	r3, [pc, #232]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a39      	ldr	r2, [pc, #228]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800328e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003292:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003294:	f7fe fe3a 	bl	8001f0c <HAL_GetTick>
 8003298:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800329a:	e009      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800329c:	f7fe fe36 	bl	8001f0c <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d902      	bls.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	74fb      	strb	r3, [r7, #19]
        break;
 80032ae:	e005      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032b0:	4b30      	ldr	r3, [pc, #192]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d0ef      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80032bc:	7cfb      	ldrb	r3, [r7, #19]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d15a      	bne.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032c2:	4b2b      	ldr	r3, [pc, #172]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80032c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032cc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d01e      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d019      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032de:	4b24      	ldr	r3, [pc, #144]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80032e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032e8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032ea:	4b21      	ldr	r3, [pc, #132]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80032ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f0:	4a1f      	ldr	r2, [pc, #124]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80032f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032fa:	4b1d      	ldr	r3, [pc, #116]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80032fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003300:	4a1b      	ldr	r2, [pc, #108]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003302:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003306:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800330a:	4a19      	ldr	r2, [pc, #100]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	f003 0301 	and.w	r3, r3, #1
 8003318:	2b00      	cmp	r3, #0
 800331a:	d016      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331c:	f7fe fdf6 	bl	8001f0c <HAL_GetTick>
 8003320:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003322:	e00b      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003324:	f7fe fdf2 	bl	8001f0c <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003332:	4293      	cmp	r3, r2
 8003334:	d902      	bls.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	74fb      	strb	r3, [r7, #19]
            break;
 800333a:	e006      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800333c:	4b0c      	ldr	r3, [pc, #48]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800333e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d0ec      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800334a:	7cfb      	ldrb	r3, [r7, #19]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d10b      	bne.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003350:	4b07      	ldr	r3, [pc, #28]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003356:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800335e:	4904      	ldr	r1, [pc, #16]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003360:	4313      	orrs	r3, r2
 8003362:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003366:	e009      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003368:	7cfb      	ldrb	r3, [r7, #19]
 800336a:	74bb      	strb	r3, [r7, #18]
 800336c:	e006      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800336e:	bf00      	nop
 8003370:	40021000 	.word	0x40021000
 8003374:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003378:	7cfb      	ldrb	r3, [r7, #19]
 800337a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800337c:	7c7b      	ldrb	r3, [r7, #17]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d105      	bne.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003382:	4b8a      	ldr	r3, [pc, #552]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003386:	4a89      	ldr	r2, [pc, #548]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003388:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800338c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00a      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800339a:	4b84      	ldr	r3, [pc, #528]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800339c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a0:	f023 0203 	bic.w	r2, r3, #3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	4980      	ldr	r1, [pc, #512]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00a      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033bc:	4b7b      	ldr	r3, [pc, #492]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c2:	f023 020c 	bic.w	r2, r3, #12
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ca:	4978      	ldr	r1, [pc, #480]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0320 	and.w	r3, r3, #32
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00a      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033de:	4b73      	ldr	r3, [pc, #460]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ec:	496f      	ldr	r1, [pc, #444]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00a      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003400:	4b6a      	ldr	r3, [pc, #424]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003406:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800340e:	4967      	ldr	r1, [pc, #412]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003410:	4313      	orrs	r3, r2
 8003412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00a      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003422:	4b62      	ldr	r3, [pc, #392]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003428:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003430:	495e      	ldr	r1, [pc, #376]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003432:	4313      	orrs	r3, r2
 8003434:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00a      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003444:	4b59      	ldr	r3, [pc, #356]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800344a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003452:	4956      	ldr	r1, [pc, #344]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003454:	4313      	orrs	r3, r2
 8003456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00a      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003466:	4b51      	ldr	r3, [pc, #324]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800346c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003474:	494d      	ldr	r1, [pc, #308]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003476:	4313      	orrs	r3, r2
 8003478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d028      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003488:	4b48      	ldr	r3, [pc, #288]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800348a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800348e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	4945      	ldr	r1, [pc, #276]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003498:	4313      	orrs	r3, r2
 800349a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034a6:	d106      	bne.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034a8:	4b40      	ldr	r3, [pc, #256]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	4a3f      	ldr	r2, [pc, #252]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80034ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034b2:	60d3      	str	r3, [r2, #12]
 80034b4:	e011      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034be:	d10c      	bne.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	3304      	adds	r3, #4
 80034c4:	2101      	movs	r1, #1
 80034c6:	4618      	mov	r0, r3
 80034c8:	f000 f882 	bl	80035d0 <RCCEx_PLLSAI1_Config>
 80034cc:	4603      	mov	r3, r0
 80034ce:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80034d0:	7cfb      	ldrb	r3, [r7, #19]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80034d6:	7cfb      	ldrb	r3, [r7, #19]
 80034d8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d028      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034e6:	4b31      	ldr	r3, [pc, #196]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80034e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f4:	492d      	ldr	r1, [pc, #180]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003500:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003504:	d106      	bne.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003506:	4b29      	ldr	r3, [pc, #164]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	4a28      	ldr	r2, [pc, #160]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800350c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003510:	60d3      	str	r3, [r2, #12]
 8003512:	e011      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003518:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800351c:	d10c      	bne.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	3304      	adds	r3, #4
 8003522:	2101      	movs	r1, #1
 8003524:	4618      	mov	r0, r3
 8003526:	f000 f853 	bl	80035d0 <RCCEx_PLLSAI1_Config>
 800352a:	4603      	mov	r3, r0
 800352c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800352e:	7cfb      	ldrb	r3, [r7, #19]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003534:	7cfb      	ldrb	r3, [r7, #19]
 8003536:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d01c      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003544:	4b19      	ldr	r3, [pc, #100]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800354a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003552:	4916      	ldr	r1, [pc, #88]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003554:	4313      	orrs	r3, r2
 8003556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800355e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003562:	d10c      	bne.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	3304      	adds	r3, #4
 8003568:	2102      	movs	r1, #2
 800356a:	4618      	mov	r0, r3
 800356c:	f000 f830 	bl	80035d0 <RCCEx_PLLSAI1_Config>
 8003570:	4603      	mov	r3, r0
 8003572:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003574:	7cfb      	ldrb	r3, [r7, #19]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800357a:	7cfb      	ldrb	r3, [r7, #19]
 800357c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00a      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800358a:	4b08      	ldr	r3, [pc, #32]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800358c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003590:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003598:	4904      	ldr	r1, [pc, #16]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800359a:	4313      	orrs	r3, r2
 800359c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80035a0:	7cbb      	ldrb	r3, [r7, #18]
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3718      	adds	r7, #24
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	40021000 	.word	0x40021000

080035b0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80035b4:	4b05      	ldr	r3, [pc, #20]	; (80035cc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a04      	ldr	r2, [pc, #16]	; (80035cc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80035ba:	f043 0304 	orr.w	r3, r3, #4
 80035be:	6013      	str	r3, [r2, #0]
}
 80035c0:	bf00      	nop
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	40021000 	.word	0x40021000

080035d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035da:	2300      	movs	r3, #0
 80035dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035de:	4b74      	ldr	r3, [pc, #464]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	f003 0303 	and.w	r3, r3, #3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d018      	beq.n	800361c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80035ea:	4b71      	ldr	r3, [pc, #452]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	f003 0203 	and.w	r2, r3, #3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d10d      	bne.n	8003616 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
       ||
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d009      	beq.n	8003616 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003602:	4b6b      	ldr	r3, [pc, #428]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	091b      	lsrs	r3, r3, #4
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	1c5a      	adds	r2, r3, #1
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
       ||
 8003612:	429a      	cmp	r2, r3
 8003614:	d047      	beq.n	80036a6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	73fb      	strb	r3, [r7, #15]
 800361a:	e044      	b.n	80036a6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2b03      	cmp	r3, #3
 8003622:	d018      	beq.n	8003656 <RCCEx_PLLSAI1_Config+0x86>
 8003624:	2b03      	cmp	r3, #3
 8003626:	d825      	bhi.n	8003674 <RCCEx_PLLSAI1_Config+0xa4>
 8003628:	2b01      	cmp	r3, #1
 800362a:	d002      	beq.n	8003632 <RCCEx_PLLSAI1_Config+0x62>
 800362c:	2b02      	cmp	r3, #2
 800362e:	d009      	beq.n	8003644 <RCCEx_PLLSAI1_Config+0x74>
 8003630:	e020      	b.n	8003674 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003632:	4b5f      	ldr	r3, [pc, #380]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d11d      	bne.n	800367a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003642:	e01a      	b.n	800367a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003644:	4b5a      	ldr	r3, [pc, #360]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800364c:	2b00      	cmp	r3, #0
 800364e:	d116      	bne.n	800367e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003654:	e013      	b.n	800367e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003656:	4b56      	ldr	r3, [pc, #344]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10f      	bne.n	8003682 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003662:	4b53      	ldr	r3, [pc, #332]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d109      	bne.n	8003682 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003672:	e006      	b.n	8003682 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	73fb      	strb	r3, [r7, #15]
      break;
 8003678:	e004      	b.n	8003684 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800367a:	bf00      	nop
 800367c:	e002      	b.n	8003684 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800367e:	bf00      	nop
 8003680:	e000      	b.n	8003684 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003682:	bf00      	nop
    }

    if(status == HAL_OK)
 8003684:	7bfb      	ldrb	r3, [r7, #15]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10d      	bne.n	80036a6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800368a:	4b49      	ldr	r3, [pc, #292]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6819      	ldr	r1, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	3b01      	subs	r3, #1
 800369c:	011b      	lsls	r3, r3, #4
 800369e:	430b      	orrs	r3, r1
 80036a0:	4943      	ldr	r1, [pc, #268]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80036a6:	7bfb      	ldrb	r3, [r7, #15]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d17c      	bne.n	80037a6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80036ac:	4b40      	ldr	r3, [pc, #256]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a3f      	ldr	r2, [pc, #252]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80036b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036b8:	f7fe fc28 	bl	8001f0c <HAL_GetTick>
 80036bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036be:	e009      	b.n	80036d4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036c0:	f7fe fc24 	bl	8001f0c <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d902      	bls.n	80036d4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	73fb      	strb	r3, [r7, #15]
        break;
 80036d2:	e005      	b.n	80036e0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036d4:	4b36      	ldr	r3, [pc, #216]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1ef      	bne.n	80036c0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80036e0:	7bfb      	ldrb	r3, [r7, #15]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d15f      	bne.n	80037a6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d110      	bne.n	800370e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036ec:	4b30      	ldr	r3, [pc, #192]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80036f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	6892      	ldr	r2, [r2, #8]
 80036fc:	0211      	lsls	r1, r2, #8
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	68d2      	ldr	r2, [r2, #12]
 8003702:	06d2      	lsls	r2, r2, #27
 8003704:	430a      	orrs	r2, r1
 8003706:	492a      	ldr	r1, [pc, #168]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003708:	4313      	orrs	r3, r2
 800370a:	610b      	str	r3, [r1, #16]
 800370c:	e027      	b.n	800375e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d112      	bne.n	800373a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003714:	4b26      	ldr	r3, [pc, #152]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800371c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	6892      	ldr	r2, [r2, #8]
 8003724:	0211      	lsls	r1, r2, #8
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	6912      	ldr	r2, [r2, #16]
 800372a:	0852      	lsrs	r2, r2, #1
 800372c:	3a01      	subs	r2, #1
 800372e:	0552      	lsls	r2, r2, #21
 8003730:	430a      	orrs	r2, r1
 8003732:	491f      	ldr	r1, [pc, #124]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003734:	4313      	orrs	r3, r2
 8003736:	610b      	str	r3, [r1, #16]
 8003738:	e011      	b.n	800375e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800373a:	4b1d      	ldr	r3, [pc, #116]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003742:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6892      	ldr	r2, [r2, #8]
 800374a:	0211      	lsls	r1, r2, #8
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	6952      	ldr	r2, [r2, #20]
 8003750:	0852      	lsrs	r2, r2, #1
 8003752:	3a01      	subs	r2, #1
 8003754:	0652      	lsls	r2, r2, #25
 8003756:	430a      	orrs	r2, r1
 8003758:	4915      	ldr	r1, [pc, #84]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800375a:	4313      	orrs	r3, r2
 800375c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800375e:	4b14      	ldr	r3, [pc, #80]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a13      	ldr	r2, [pc, #76]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003764:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003768:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800376a:	f7fe fbcf 	bl	8001f0c <HAL_GetTick>
 800376e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003770:	e009      	b.n	8003786 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003772:	f7fe fbcb 	bl	8001f0c <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	2b02      	cmp	r3, #2
 800377e:	d902      	bls.n	8003786 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	73fb      	strb	r3, [r7, #15]
          break;
 8003784:	e005      	b.n	8003792 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003786:	4b0a      	ldr	r3, [pc, #40]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d0ef      	beq.n	8003772 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003792:	7bfb      	ldrb	r3, [r7, #15]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d106      	bne.n	80037a6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003798:	4b05      	ldr	r3, [pc, #20]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800379a:	691a      	ldr	r2, [r3, #16]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	4903      	ldr	r1, [pc, #12]	; (80037b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80037a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3710      	adds	r7, #16
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	40021000 	.word	0x40021000

080037b4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d079      	beq.n	80038ba <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d106      	bne.n	80037e0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7fe f9b8 	bl	8001b50 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2202      	movs	r2, #2
 80037e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	f003 0310 	and.w	r3, r3, #16
 80037f2:	2b10      	cmp	r3, #16
 80037f4:	d058      	beq.n	80038a8 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	22ca      	movs	r2, #202	; 0xca
 80037fc:	625a      	str	r2, [r3, #36]	; 0x24
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2253      	movs	r2, #83	; 0x53
 8003804:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f880 	bl	800390c <RTC_EnterInitMode>
 800380c:	4603      	mov	r3, r0
 800380e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003810:	7bfb      	ldrb	r3, [r7, #15]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d127      	bne.n	8003866 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	6812      	ldr	r2, [r2, #0]
 8003820:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003824:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003828:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	6899      	ldr	r1, [r3, #8]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	431a      	orrs	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	431a      	orrs	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	430a      	orrs	r2, r1
 8003846:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	68d2      	ldr	r2, [r2, #12]
 8003850:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	6919      	ldr	r1, [r3, #16]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	041a      	lsls	r2, r3, #16
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f884 	bl	8003974 <RTC_ExitInitMode>
 800386c:	4603      	mov	r3, r0
 800386e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003870:	7bfb      	ldrb	r3, [r7, #15]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d113      	bne.n	800389e <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f022 0203 	bic.w	r2, r2, #3
 8003884:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	69da      	ldr	r2, [r3, #28]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	431a      	orrs	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	430a      	orrs	r2, r1
 800389c:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	22ff      	movs	r2, #255	; 0xff
 80038a4:	625a      	str	r2, [r3, #36]	; 0x24
 80038a6:	e001      	b.n	80038ac <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80038a8:	2300      	movs	r3, #0
 80038aa:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80038ac:	7bfb      	ldrb	r3, [r7, #15]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d103      	bne.n	80038ba <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 80038ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3710      	adds	r7, #16
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a0d      	ldr	r2, [pc, #52]	; (8003908 <HAL_RTC_WaitForSynchro+0x44>)
 80038d2:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80038d4:	f7fe fb1a 	bl	8001f0c <HAL_GetTick>
 80038d8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80038da:	e009      	b.n	80038f0 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80038dc:	f7fe fb16 	bl	8001f0c <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038ea:	d901      	bls.n	80038f0 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e007      	b.n	8003900 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	f003 0320 	and.w	r3, r3, #32
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d0ee      	beq.n	80038dc <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	3710      	adds	r7, #16
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	0003ff5f 	.word	0x0003ff5f

0800390c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003914:	2300      	movs	r3, #0
 8003916:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003922:	2b00      	cmp	r3, #0
 8003924:	d120      	bne.n	8003968 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f04f 32ff 	mov.w	r2, #4294967295
 800392e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003930:	f7fe faec 	bl	8001f0c <HAL_GetTick>
 8003934:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003936:	e00d      	b.n	8003954 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003938:	f7fe fae8 	bl	8001f0c <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003946:	d905      	bls.n	8003954 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2203      	movs	r2, #3
 8003950:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800395e:	2b00      	cmp	r3, #0
 8003960:	d102      	bne.n	8003968 <RTC_EnterInitMode+0x5c>
 8003962:	7bfb      	ldrb	r3, [r7, #15]
 8003964:	2b03      	cmp	r3, #3
 8003966:	d1e7      	bne.n	8003938 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8003968:	7bfb      	ldrb	r3, [r7, #15]
}
 800396a:	4618      	mov	r0, r3
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
	...

08003974 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800397c:	2300      	movs	r3, #0
 800397e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8003980:	4b1a      	ldr	r3, [pc, #104]	; (80039ec <RTC_ExitInitMode+0x78>)
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	4a19      	ldr	r2, [pc, #100]	; (80039ec <RTC_ExitInitMode+0x78>)
 8003986:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800398a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800398c:	4b17      	ldr	r3, [pc, #92]	; (80039ec <RTC_ExitInitMode+0x78>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f003 0320 	and.w	r3, r3, #32
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10c      	bne.n	80039b2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f7ff ff93 	bl	80038c4 <HAL_RTC_WaitForSynchro>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d01e      	beq.n	80039e2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2203      	movs	r2, #3
 80039a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	73fb      	strb	r3, [r7, #15]
 80039b0:	e017      	b.n	80039e2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80039b2:	4b0e      	ldr	r3, [pc, #56]	; (80039ec <RTC_ExitInitMode+0x78>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	4a0d      	ldr	r2, [pc, #52]	; (80039ec <RTC_ExitInitMode+0x78>)
 80039b8:	f023 0320 	bic.w	r3, r3, #32
 80039bc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f7ff ff80 	bl	80038c4 <HAL_RTC_WaitForSynchro>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d005      	beq.n	80039d6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2203      	movs	r2, #3
 80039ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80039d6:	4b05      	ldr	r3, [pc, #20]	; (80039ec <RTC_ExitInitMode+0x78>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	4a04      	ldr	r2, [pc, #16]	; (80039ec <RTC_ExitInitMode+0x78>)
 80039dc:	f043 0320 	orr.w	r3, r3, #32
 80039e0:	6093      	str	r3, [r2, #8]
  }

  return status;
 80039e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	40002800 	.word	0x40002800

080039f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e095      	b.n	8003b2e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d108      	bne.n	8003a1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a12:	d009      	beq.n	8003a28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	61da      	str	r2, [r3, #28]
 8003a1a:	e005      	b.n	8003a28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d106      	bne.n	8003a48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7fe f8b4 	bl	8001bb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a5e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a68:	d902      	bls.n	8003a70 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60fb      	str	r3, [r7, #12]
 8003a6e:	e002      	b.n	8003a76 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a74:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003a7e:	d007      	beq.n	8003a90 <HAL_SPI_Init+0xa0>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a88:	d002      	beq.n	8003a90 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	695b      	ldr	r3, [r3, #20]
 8003ab0:	f003 0301 	and.w	r3, r3, #1
 8003ab4:	431a      	orrs	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	69db      	ldr	r3, [r3, #28]
 8003ac4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad2:	ea42 0103 	orr.w	r1, r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ada:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	0c1b      	lsrs	r3, r3, #16
 8003aec:	f003 0204 	and.w	r2, r3, #4
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af4:	f003 0310 	and.w	r3, r3, #16
 8003af8:	431a      	orrs	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003afe:	f003 0308 	and.w	r3, r3, #8
 8003b02:	431a      	orrs	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003b0c:	ea42 0103 	orr.w	r1, r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b088      	sub	sp, #32
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	60f8      	str	r0, [r7, #12]
 8003b3e:	60b9      	str	r1, [r7, #8]
 8003b40:	603b      	str	r3, [r7, #0]
 8003b42:	4613      	mov	r3, r2
 8003b44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b46:	2300      	movs	r3, #0
 8003b48:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d101      	bne.n	8003b58 <HAL_SPI_Transmit+0x22>
 8003b54:	2302      	movs	r3, #2
 8003b56:	e15f      	b.n	8003e18 <HAL_SPI_Transmit+0x2e2>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b60:	f7fe f9d4 	bl	8001f0c <HAL_GetTick>
 8003b64:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003b66:	88fb      	ldrh	r3, [r7, #6]
 8003b68:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d002      	beq.n	8003b7c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003b76:	2302      	movs	r3, #2
 8003b78:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b7a:	e148      	b.n	8003e0e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d002      	beq.n	8003b88 <HAL_SPI_Transmit+0x52>
 8003b82:	88fb      	ldrh	r3, [r7, #6]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d102      	bne.n	8003b8e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b8c:	e13f      	b.n	8003e0e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2203      	movs	r2, #3
 8003b92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	68ba      	ldr	r2, [r7, #8]
 8003ba0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	88fa      	ldrh	r2, [r7, #6]
 8003ba6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	88fa      	ldrh	r2, [r7, #6]
 8003bac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bd8:	d10f      	bne.n	8003bfa <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003be8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bf8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c04:	2b40      	cmp	r3, #64	; 0x40
 8003c06:	d007      	beq.n	8003c18 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c20:	d94f      	bls.n	8003cc2 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d002      	beq.n	8003c30 <HAL_SPI_Transmit+0xfa>
 8003c2a:	8afb      	ldrh	r3, [r7, #22]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d142      	bne.n	8003cb6 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c34:	881a      	ldrh	r2, [r3, #0]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c40:	1c9a      	adds	r2, r3, #2
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003c54:	e02f      	b.n	8003cb6 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d112      	bne.n	8003c8a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c68:	881a      	ldrh	r2, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c74:	1c9a      	adds	r2, r3, #2
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	3b01      	subs	r3, #1
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c88:	e015      	b.n	8003cb6 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c8a:	f7fe f93f 	bl	8001f0c <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d803      	bhi.n	8003ca2 <HAL_SPI_Transmit+0x16c>
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca0:	d102      	bne.n	8003ca8 <HAL_SPI_Transmit+0x172>
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d106      	bne.n	8003cb6 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003cb4:	e0ab      	b.n	8003e0e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1ca      	bne.n	8003c56 <HAL_SPI_Transmit+0x120>
 8003cc0:	e080      	b.n	8003dc4 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d002      	beq.n	8003cd0 <HAL_SPI_Transmit+0x19a>
 8003cca:	8afb      	ldrh	r3, [r7, #22]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d174      	bne.n	8003dba <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d912      	bls.n	8003d00 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cde:	881a      	ldrh	r2, [r3, #0]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cea:	1c9a      	adds	r2, r3, #2
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	3b02      	subs	r3, #2
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003cfe:	e05c      	b.n	8003dba <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	330c      	adds	r3, #12
 8003d0a:	7812      	ldrb	r2, [r2, #0]
 8003d0c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d12:	1c5a      	adds	r2, r3, #1
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003d26:	e048      	b.n	8003dba <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d12b      	bne.n	8003d8e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d912      	bls.n	8003d66 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d44:	881a      	ldrh	r2, [r3, #0]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d50:	1c9a      	adds	r2, r3, #2
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	3b02      	subs	r3, #2
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d64:	e029      	b.n	8003dba <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	330c      	adds	r3, #12
 8003d70:	7812      	ldrb	r2, [r2, #0]
 8003d72:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d78:	1c5a      	adds	r2, r3, #1
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	3b01      	subs	r3, #1
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d8c:	e015      	b.n	8003dba <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d8e:	f7fe f8bd 	bl	8001f0c <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d803      	bhi.n	8003da6 <HAL_SPI_Transmit+0x270>
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da4:	d102      	bne.n	8003dac <HAL_SPI_Transmit+0x276>
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d106      	bne.n	8003dba <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003db8:	e029      	b.n	8003e0e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1b1      	bne.n	8003d28 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	6839      	ldr	r1, [r7, #0]
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f000 fb69 	bl	80044a0 <SPI_EndRxTxTransaction>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d002      	beq.n	8003dda <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10a      	bne.n	8003df8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003de2:	2300      	movs	r3, #0
 8003de4:	613b      	str	r3, [r7, #16]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	613b      	str	r3, [r7, #16]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	613b      	str	r3, [r7, #16]
 8003df6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d002      	beq.n	8003e06 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	77fb      	strb	r3, [r7, #31]
 8003e04:	e003      	b.n	8003e0e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003e16:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3720      	adds	r7, #32
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b08a      	sub	sp, #40	; 0x28
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
 8003e2c:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003e32:	2300      	movs	r3, #0
 8003e34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d101      	bne.n	8003e46 <HAL_SPI_TransmitReceive+0x26>
 8003e42:	2302      	movs	r3, #2
 8003e44:	e20a      	b.n	800425c <HAL_SPI_TransmitReceive+0x43c>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e4e:	f7fe f85d 	bl	8001f0c <HAL_GetTick>
 8003e52:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e5a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003e62:	887b      	ldrh	r3, [r7, #2]
 8003e64:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003e66:	887b      	ldrh	r3, [r7, #2]
 8003e68:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003e6a:	7efb      	ldrb	r3, [r7, #27]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d00e      	beq.n	8003e8e <HAL_SPI_TransmitReceive+0x6e>
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e76:	d106      	bne.n	8003e86 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d102      	bne.n	8003e86 <HAL_SPI_TransmitReceive+0x66>
 8003e80:	7efb      	ldrb	r3, [r7, #27]
 8003e82:	2b04      	cmp	r3, #4
 8003e84:	d003      	beq.n	8003e8e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003e86:	2302      	movs	r3, #2
 8003e88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003e8c:	e1e0      	b.n	8004250 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d005      	beq.n	8003ea0 <HAL_SPI_TransmitReceive+0x80>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d002      	beq.n	8003ea0 <HAL_SPI_TransmitReceive+0x80>
 8003e9a:	887b      	ldrh	r3, [r7, #2]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d103      	bne.n	8003ea8 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003ea6:	e1d3      	b.n	8004250 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	2b04      	cmp	r3, #4
 8003eb2:	d003      	beq.n	8003ebc <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2205      	movs	r2, #5
 8003eb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	887a      	ldrh	r2, [r7, #2]
 8003ecc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	887a      	ldrh	r2, [r7, #2]
 8003ed4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	68ba      	ldr	r2, [r7, #8]
 8003edc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	887a      	ldrh	r2, [r7, #2]
 8003ee2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	887a      	ldrh	r2, [r7, #2]
 8003ee8:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003efe:	d802      	bhi.n	8003f06 <HAL_SPI_TransmitReceive+0xe6>
 8003f00:	8a3b      	ldrh	r3, [r7, #16]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d908      	bls.n	8003f18 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	685a      	ldr	r2, [r3, #4]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f14:	605a      	str	r2, [r3, #4]
 8003f16:	e007      	b.n	8003f28 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	685a      	ldr	r2, [r3, #4]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f26:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f32:	2b40      	cmp	r3, #64	; 0x40
 8003f34:	d007      	beq.n	8003f46 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f44:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f4e:	f240 8081 	bls.w	8004054 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d002      	beq.n	8003f60 <HAL_SPI_TransmitReceive+0x140>
 8003f5a:	8a7b      	ldrh	r3, [r7, #18]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d16d      	bne.n	800403c <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f64:	881a      	ldrh	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f70:	1c9a      	adds	r2, r3, #2
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f84:	e05a      	b.n	800403c <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d11b      	bne.n	8003fcc <HAL_SPI_TransmitReceive+0x1ac>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d016      	beq.n	8003fcc <HAL_SPI_TransmitReceive+0x1ac>
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d113      	bne.n	8003fcc <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa8:	881a      	ldrh	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb4:	1c9a      	adds	r2, r3, #2
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d11c      	bne.n	8004014 <HAL_SPI_TransmitReceive+0x1f4>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d016      	beq.n	8004014 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68da      	ldr	r2, [r3, #12]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff0:	b292      	uxth	r2, r2
 8003ff2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff8:	1c9a      	adds	r2, r3, #2
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004004:	b29b      	uxth	r3, r3
 8004006:	3b01      	subs	r3, #1
 8004008:	b29a      	uxth	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004010:	2301      	movs	r3, #1
 8004012:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004014:	f7fd ff7a 	bl	8001f0c <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004020:	429a      	cmp	r2, r3
 8004022:	d80b      	bhi.n	800403c <HAL_SPI_TransmitReceive+0x21c>
 8004024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800402a:	d007      	beq.n	800403c <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2201      	movs	r2, #1
 8004036:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800403a:	e109      	b.n	8004250 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004040:	b29b      	uxth	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d19f      	bne.n	8003f86 <HAL_SPI_TransmitReceive+0x166>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800404c:	b29b      	uxth	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d199      	bne.n	8003f86 <HAL_SPI_TransmitReceive+0x166>
 8004052:	e0e3      	b.n	800421c <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d003      	beq.n	8004064 <HAL_SPI_TransmitReceive+0x244>
 800405c:	8a7b      	ldrh	r3, [r7, #18]
 800405e:	2b01      	cmp	r3, #1
 8004060:	f040 80cf 	bne.w	8004202 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004068:	b29b      	uxth	r3, r3
 800406a:	2b01      	cmp	r3, #1
 800406c:	d912      	bls.n	8004094 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004072:	881a      	ldrh	r2, [r3, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407e:	1c9a      	adds	r2, r3, #2
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004088:	b29b      	uxth	r3, r3
 800408a:	3b02      	subs	r3, #2
 800408c:	b29a      	uxth	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004092:	e0b6      	b.n	8004202 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	330c      	adds	r3, #12
 800409e:	7812      	ldrb	r2, [r2, #0]
 80040a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a6:	1c5a      	adds	r2, r3, #1
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	3b01      	subs	r3, #1
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040ba:	e0a2      	b.n	8004202 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d134      	bne.n	8004134 <HAL_SPI_TransmitReceive+0x314>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d02f      	beq.n	8004134 <HAL_SPI_TransmitReceive+0x314>
 80040d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d12c      	bne.n	8004134 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040de:	b29b      	uxth	r3, r3
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d912      	bls.n	800410a <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e8:	881a      	ldrh	r2, [r3, #0]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f4:	1c9a      	adds	r2, r3, #2
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040fe:	b29b      	uxth	r3, r3
 8004100:	3b02      	subs	r3, #2
 8004102:	b29a      	uxth	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004108:	e012      	b.n	8004130 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	330c      	adds	r3, #12
 8004114:	7812      	ldrb	r2, [r2, #0]
 8004116:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411c:	1c5a      	adds	r2, r3, #1
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004126:	b29b      	uxth	r3, r3
 8004128:	3b01      	subs	r3, #1
 800412a:	b29a      	uxth	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004130:	2300      	movs	r3, #0
 8004132:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b01      	cmp	r3, #1
 8004140:	d148      	bne.n	80041d4 <HAL_SPI_TransmitReceive+0x3b4>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004148:	b29b      	uxth	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d042      	beq.n	80041d4 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004154:	b29b      	uxth	r3, r3
 8004156:	2b01      	cmp	r3, #1
 8004158:	d923      	bls.n	80041a2 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68da      	ldr	r2, [r3, #12]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004164:	b292      	uxth	r2, r2
 8004166:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416c:	1c9a      	adds	r2, r3, #2
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004178:	b29b      	uxth	r3, r3
 800417a:	3b02      	subs	r3, #2
 800417c:	b29a      	uxth	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800418a:	b29b      	uxth	r3, r3
 800418c:	2b01      	cmp	r3, #1
 800418e:	d81f      	bhi.n	80041d0 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	685a      	ldr	r2, [r3, #4]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800419e:	605a      	str	r2, [r3, #4]
 80041a0:	e016      	b.n	80041d0 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f103 020c 	add.w	r2, r3, #12
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ae:	7812      	ldrb	r2, [r2, #0]
 80041b0:	b2d2      	uxtb	r2, r2
 80041b2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b8:	1c5a      	adds	r2, r3, #1
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	3b01      	subs	r3, #1
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041d0:	2301      	movs	r3, #1
 80041d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80041d4:	f7fd fe9a 	bl	8001f0c <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d803      	bhi.n	80041ec <HAL_SPI_TransmitReceive+0x3cc>
 80041e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ea:	d102      	bne.n	80041f2 <HAL_SPI_TransmitReceive+0x3d2>
 80041ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d107      	bne.n	8004202 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004200:	e026      	b.n	8004250 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004206:	b29b      	uxth	r3, r3
 8004208:	2b00      	cmp	r3, #0
 800420a:	f47f af57 	bne.w	80040bc <HAL_SPI_TransmitReceive+0x29c>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004214:	b29b      	uxth	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	f47f af50 	bne.w	80040bc <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800421c:	69fa      	ldr	r2, [r7, #28]
 800421e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f000 f93d 	bl	80044a0 <SPI_EndRxTxTransaction>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d005      	beq.n	8004238 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2220      	movs	r2, #32
 8004236:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800423c:	2b00      	cmp	r3, #0
 800423e:	d003      	beq.n	8004248 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004246:	e003      	b.n	8004250 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004258:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800425c:	4618      	mov	r0, r3
 800425e:	3728      	adds	r7, #40	; 0x28
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b088      	sub	sp, #32
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	603b      	str	r3, [r7, #0]
 8004270:	4613      	mov	r3, r2
 8004272:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004274:	f7fd fe4a 	bl	8001f0c <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800427c:	1a9b      	subs	r3, r3, r2
 800427e:	683a      	ldr	r2, [r7, #0]
 8004280:	4413      	add	r3, r2
 8004282:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004284:	f7fd fe42 	bl	8001f0c <HAL_GetTick>
 8004288:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800428a:	4b39      	ldr	r3, [pc, #228]	; (8004370 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	015b      	lsls	r3, r3, #5
 8004290:	0d1b      	lsrs	r3, r3, #20
 8004292:	69fa      	ldr	r2, [r7, #28]
 8004294:	fb02 f303 	mul.w	r3, r2, r3
 8004298:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800429a:	e054      	b.n	8004346 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a2:	d050      	beq.n	8004346 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80042a4:	f7fd fe32 	bl	8001f0c <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	69fa      	ldr	r2, [r7, #28]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d902      	bls.n	80042ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d13d      	bne.n	8004336 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80042c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042d2:	d111      	bne.n	80042f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042dc:	d004      	beq.n	80042e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042e6:	d107      	bne.n	80042f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004300:	d10f      	bne.n	8004322 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004310:	601a      	str	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004320:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e017      	b.n	8004366 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d101      	bne.n	8004340 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800433c:	2300      	movs	r3, #0
 800433e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	3b01      	subs	r3, #1
 8004344:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	689a      	ldr	r2, [r3, #8]
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	4013      	ands	r3, r2
 8004350:	68ba      	ldr	r2, [r7, #8]
 8004352:	429a      	cmp	r2, r3
 8004354:	bf0c      	ite	eq
 8004356:	2301      	moveq	r3, #1
 8004358:	2300      	movne	r3, #0
 800435a:	b2db      	uxtb	r3, r3
 800435c:	461a      	mov	r2, r3
 800435e:	79fb      	ldrb	r3, [r7, #7]
 8004360:	429a      	cmp	r2, r3
 8004362:	d19b      	bne.n	800429c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3720      	adds	r7, #32
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	2000006c 	.word	0x2000006c

08004374 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b08a      	sub	sp, #40	; 0x28
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
 8004380:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004382:	2300      	movs	r3, #0
 8004384:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004386:	f7fd fdc1 	bl	8001f0c <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438e:	1a9b      	subs	r3, r3, r2
 8004390:	683a      	ldr	r2, [r7, #0]
 8004392:	4413      	add	r3, r2
 8004394:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004396:	f7fd fdb9 	bl	8001f0c <HAL_GetTick>
 800439a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	330c      	adds	r3, #12
 80043a2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80043a4:	4b3d      	ldr	r3, [pc, #244]	; (800449c <SPI_WaitFifoStateUntilTimeout+0x128>)
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	4613      	mov	r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	4413      	add	r3, r2
 80043ae:	00da      	lsls	r2, r3, #3
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	0d1b      	lsrs	r3, r3, #20
 80043b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043b6:	fb02 f303 	mul.w	r3, r2, r3
 80043ba:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80043bc:	e060      	b.n	8004480 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80043c4:	d107      	bne.n	80043d6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d104      	bne.n	80043d6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80043d4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043dc:	d050      	beq.n	8004480 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80043de:	f7fd fd95 	bl	8001f0c <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	6a3b      	ldr	r3, [r7, #32]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d902      	bls.n	80043f4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80043ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d13d      	bne.n	8004470 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	685a      	ldr	r2, [r3, #4]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004402:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800440c:	d111      	bne.n	8004432 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004416:	d004      	beq.n	8004422 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004420:	d107      	bne.n	8004432 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004430:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004436:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800443a:	d10f      	bne.n	800445c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800444a:	601a      	str	r2, [r3, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800445a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e010      	b.n	8004492 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004476:	2300      	movs	r3, #0
 8004478:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	3b01      	subs	r3, #1
 800447e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	689a      	ldr	r2, [r3, #8]
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	4013      	ands	r3, r2
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	429a      	cmp	r2, r3
 800448e:	d196      	bne.n	80043be <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3728      	adds	r7, #40	; 0x28
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	2000006c 	.word	0x2000006c

080044a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af02      	add	r7, sp, #8
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	9300      	str	r3, [sp, #0]
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f7ff ff5b 	bl	8004374 <SPI_WaitFifoStateUntilTimeout>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d007      	beq.n	80044d4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044c8:	f043 0220 	orr.w	r2, r3, #32
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e027      	b.n	8004524 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	9300      	str	r3, [sp, #0]
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	2200      	movs	r2, #0
 80044dc:	2180      	movs	r1, #128	; 0x80
 80044de:	68f8      	ldr	r0, [r7, #12]
 80044e0:	f7ff fec0 	bl	8004264 <SPI_WaitFlagStateUntilTimeout>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d007      	beq.n	80044fa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044ee:	f043 0220 	orr.w	r2, r3, #32
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e014      	b.n	8004524 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	9300      	str	r3, [sp, #0]
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	2200      	movs	r2, #0
 8004502:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	f7ff ff34 	bl	8004374 <SPI_WaitFifoStateUntilTimeout>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d007      	beq.n	8004522 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004516:	f043 0220 	orr.w	r2, r3, #32
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e000      	b.n	8004524 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3710      	adds	r7, #16
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e049      	b.n	80045d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004544:	b2db      	uxtb	r3, r3
 8004546:	2b00      	cmp	r3, #0
 8004548:	d106      	bne.n	8004558 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f7fd fb6e 	bl	8001c34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2202      	movs	r2, #2
 800455c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	3304      	adds	r3, #4
 8004568:	4619      	mov	r1, r3
 800456a:	4610      	mov	r0, r2
 800456c:	f000 fa7e 	bl	8004a6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3708      	adds	r7, #8
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
	...

080045dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d001      	beq.n	80045f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e03b      	b.n	800466c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2202      	movs	r2, #2
 80045f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68da      	ldr	r2, [r3, #12]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f042 0201 	orr.w	r2, r2, #1
 800460a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a19      	ldr	r2, [pc, #100]	; (8004678 <HAL_TIM_Base_Start_IT+0x9c>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d009      	beq.n	800462a <HAL_TIM_Base_Start_IT+0x4e>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800461e:	d004      	beq.n	800462a <HAL_TIM_Base_Start_IT+0x4e>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a15      	ldr	r2, [pc, #84]	; (800467c <HAL_TIM_Base_Start_IT+0xa0>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d115      	bne.n	8004656 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	689a      	ldr	r2, [r3, #8]
 8004630:	4b13      	ldr	r3, [pc, #76]	; (8004680 <HAL_TIM_Base_Start_IT+0xa4>)
 8004632:	4013      	ands	r3, r2
 8004634:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2b06      	cmp	r3, #6
 800463a:	d015      	beq.n	8004668 <HAL_TIM_Base_Start_IT+0x8c>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004642:	d011      	beq.n	8004668 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f042 0201 	orr.w	r2, r2, #1
 8004652:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004654:	e008      	b.n	8004668 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f042 0201 	orr.w	r2, r2, #1
 8004664:	601a      	str	r2, [r3, #0]
 8004666:	e000      	b.n	800466a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004668:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	3714      	adds	r7, #20
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr
 8004678:	40012c00 	.word	0x40012c00
 800467c:	40014000 	.word	0x40014000
 8004680:	00010007 	.word	0x00010007

08004684 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d020      	beq.n	80046e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f003 0302 	and.w	r3, r3, #2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d01b      	beq.n	80046e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f06f 0202 	mvn.w	r2, #2
 80046b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	f003 0303 	and.w	r3, r3, #3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d003      	beq.n	80046d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f9ad 	bl	8004a2e <HAL_TIM_IC_CaptureCallback>
 80046d4:	e005      	b.n	80046e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 f99f 	bl	8004a1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 f9b0 	bl	8004a42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	f003 0304 	and.w	r3, r3, #4
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d020      	beq.n	8004734 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d01b      	beq.n	8004734 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f06f 0204 	mvn.w	r2, #4
 8004704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2202      	movs	r2, #2
 800470a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004716:	2b00      	cmp	r3, #0
 8004718:	d003      	beq.n	8004722 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f987 	bl	8004a2e <HAL_TIM_IC_CaptureCallback>
 8004720:	e005      	b.n	800472e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f979 	bl	8004a1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 f98a 	bl	8004a42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	f003 0308 	and.w	r3, r3, #8
 800473a:	2b00      	cmp	r3, #0
 800473c:	d020      	beq.n	8004780 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f003 0308 	and.w	r3, r3, #8
 8004744:	2b00      	cmp	r3, #0
 8004746:	d01b      	beq.n	8004780 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f06f 0208 	mvn.w	r2, #8
 8004750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2204      	movs	r2, #4
 8004756:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	f003 0303 	and.w	r3, r3, #3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d003      	beq.n	800476e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f961 	bl	8004a2e <HAL_TIM_IC_CaptureCallback>
 800476c:	e005      	b.n	800477a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f953 	bl	8004a1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f000 f964 	bl	8004a42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	f003 0310 	and.w	r3, r3, #16
 8004786:	2b00      	cmp	r3, #0
 8004788:	d020      	beq.n	80047cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f003 0310 	and.w	r3, r3, #16
 8004790:	2b00      	cmp	r3, #0
 8004792:	d01b      	beq.n	80047cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f06f 0210 	mvn.w	r2, #16
 800479c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2208      	movs	r2, #8
 80047a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	69db      	ldr	r3, [r3, #28]
 80047aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d003      	beq.n	80047ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 f93b 	bl	8004a2e <HAL_TIM_IC_CaptureCallback>
 80047b8:	e005      	b.n	80047c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 f92d 	bl	8004a1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 f93e 	bl	8004a42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00c      	beq.n	80047f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f003 0301 	and.w	r3, r3, #1
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d007      	beq.n	80047f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f06f 0201 	mvn.w	r2, #1
 80047e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f7fd f966 	bl	8001abc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00c      	beq.n	8004814 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004800:	2b00      	cmp	r3, #0
 8004802:	d007      	beq.n	8004814 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800480c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 fa9a 	bl	8004d48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00c      	beq.n	8004838 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004824:	2b00      	cmp	r3, #0
 8004826:	d007      	beq.n	8004838 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 fa92 	bl	8004d5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00c      	beq.n	800485c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004848:	2b00      	cmp	r3, #0
 800484a:	d007      	beq.n	800485c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 f8fd 	bl	8004a56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	f003 0320 	and.w	r3, r3, #32
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00c      	beq.n	8004880 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f003 0320 	and.w	r3, r3, #32
 800486c:	2b00      	cmp	r3, #0
 800486e:	d007      	beq.n	8004880 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f06f 0220 	mvn.w	r2, #32
 8004878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 fa5a 	bl	8004d34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004880:	bf00      	nop
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004892:	2300      	movs	r3, #0
 8004894:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800489c:	2b01      	cmp	r3, #1
 800489e:	d101      	bne.n	80048a4 <HAL_TIM_ConfigClockSource+0x1c>
 80048a0:	2302      	movs	r3, #2
 80048a2:	e0b6      	b.n	8004a12 <HAL_TIM_ConfigClockSource+0x18a>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2202      	movs	r2, #2
 80048b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80048c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68ba      	ldr	r2, [r7, #8]
 80048d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048e0:	d03e      	beq.n	8004960 <HAL_TIM_ConfigClockSource+0xd8>
 80048e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048e6:	f200 8087 	bhi.w	80049f8 <HAL_TIM_ConfigClockSource+0x170>
 80048ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ee:	f000 8086 	beq.w	80049fe <HAL_TIM_ConfigClockSource+0x176>
 80048f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048f6:	d87f      	bhi.n	80049f8 <HAL_TIM_ConfigClockSource+0x170>
 80048f8:	2b70      	cmp	r3, #112	; 0x70
 80048fa:	d01a      	beq.n	8004932 <HAL_TIM_ConfigClockSource+0xaa>
 80048fc:	2b70      	cmp	r3, #112	; 0x70
 80048fe:	d87b      	bhi.n	80049f8 <HAL_TIM_ConfigClockSource+0x170>
 8004900:	2b60      	cmp	r3, #96	; 0x60
 8004902:	d050      	beq.n	80049a6 <HAL_TIM_ConfigClockSource+0x11e>
 8004904:	2b60      	cmp	r3, #96	; 0x60
 8004906:	d877      	bhi.n	80049f8 <HAL_TIM_ConfigClockSource+0x170>
 8004908:	2b50      	cmp	r3, #80	; 0x50
 800490a:	d03c      	beq.n	8004986 <HAL_TIM_ConfigClockSource+0xfe>
 800490c:	2b50      	cmp	r3, #80	; 0x50
 800490e:	d873      	bhi.n	80049f8 <HAL_TIM_ConfigClockSource+0x170>
 8004910:	2b40      	cmp	r3, #64	; 0x40
 8004912:	d058      	beq.n	80049c6 <HAL_TIM_ConfigClockSource+0x13e>
 8004914:	2b40      	cmp	r3, #64	; 0x40
 8004916:	d86f      	bhi.n	80049f8 <HAL_TIM_ConfigClockSource+0x170>
 8004918:	2b30      	cmp	r3, #48	; 0x30
 800491a:	d064      	beq.n	80049e6 <HAL_TIM_ConfigClockSource+0x15e>
 800491c:	2b30      	cmp	r3, #48	; 0x30
 800491e:	d86b      	bhi.n	80049f8 <HAL_TIM_ConfigClockSource+0x170>
 8004920:	2b20      	cmp	r3, #32
 8004922:	d060      	beq.n	80049e6 <HAL_TIM_ConfigClockSource+0x15e>
 8004924:	2b20      	cmp	r3, #32
 8004926:	d867      	bhi.n	80049f8 <HAL_TIM_ConfigClockSource+0x170>
 8004928:	2b00      	cmp	r3, #0
 800492a:	d05c      	beq.n	80049e6 <HAL_TIM_ConfigClockSource+0x15e>
 800492c:	2b10      	cmp	r3, #16
 800492e:	d05a      	beq.n	80049e6 <HAL_TIM_ConfigClockSource+0x15e>
 8004930:	e062      	b.n	80049f8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004942:	f000 f971 	bl	8004c28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004954:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68ba      	ldr	r2, [r7, #8]
 800495c:	609a      	str	r2, [r3, #8]
      break;
 800495e:	e04f      	b.n	8004a00 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004970:	f000 f95a 	bl	8004c28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	689a      	ldr	r2, [r3, #8]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004982:	609a      	str	r2, [r3, #8]
      break;
 8004984:	e03c      	b.n	8004a00 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004992:	461a      	mov	r2, r3
 8004994:	f000 f8ce 	bl	8004b34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2150      	movs	r1, #80	; 0x50
 800499e:	4618      	mov	r0, r3
 80049a0:	f000 f927 	bl	8004bf2 <TIM_ITRx_SetConfig>
      break;
 80049a4:	e02c      	b.n	8004a00 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80049b2:	461a      	mov	r2, r3
 80049b4:	f000 f8ed 	bl	8004b92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2160      	movs	r1, #96	; 0x60
 80049be:	4618      	mov	r0, r3
 80049c0:	f000 f917 	bl	8004bf2 <TIM_ITRx_SetConfig>
      break;
 80049c4:	e01c      	b.n	8004a00 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049d2:	461a      	mov	r2, r3
 80049d4:	f000 f8ae 	bl	8004b34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2140      	movs	r1, #64	; 0x40
 80049de:	4618      	mov	r0, r3
 80049e0:	f000 f907 	bl	8004bf2 <TIM_ITRx_SetConfig>
      break;
 80049e4:	e00c      	b.n	8004a00 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4619      	mov	r1, r3
 80049f0:	4610      	mov	r0, r2
 80049f2:	f000 f8fe 	bl	8004bf2 <TIM_ITRx_SetConfig>
      break;
 80049f6:	e003      	b.n	8004a00 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	73fb      	strb	r3, [r7, #15]
      break;
 80049fc:	e000      	b.n	8004a00 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80049fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b083      	sub	sp, #12
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a22:	bf00      	nop
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr

08004a2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	b083      	sub	sp, #12
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a36:	bf00      	nop
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a42:	b480      	push	{r7}
 8004a44:	b083      	sub	sp, #12
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a4a:	bf00      	nop
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr

08004a56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a56:	b480      	push	{r7}
 8004a58:	b083      	sub	sp, #12
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a5e:	bf00      	nop
 8004a60:	370c      	adds	r7, #12
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
	...

08004a6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a2a      	ldr	r2, [pc, #168]	; (8004b28 <TIM_Base_SetConfig+0xbc>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d003      	beq.n	8004a8c <TIM_Base_SetConfig+0x20>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a8a:	d108      	bne.n	8004a9e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a21      	ldr	r2, [pc, #132]	; (8004b28 <TIM_Base_SetConfig+0xbc>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d00b      	beq.n	8004abe <TIM_Base_SetConfig+0x52>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aac:	d007      	beq.n	8004abe <TIM_Base_SetConfig+0x52>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a1e      	ldr	r2, [pc, #120]	; (8004b2c <TIM_Base_SetConfig+0xc0>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d003      	beq.n	8004abe <TIM_Base_SetConfig+0x52>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a1d      	ldr	r2, [pc, #116]	; (8004b30 <TIM_Base_SetConfig+0xc4>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d108      	bne.n	8004ad0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ac4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	689a      	ldr	r2, [r3, #8]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a0c      	ldr	r2, [pc, #48]	; (8004b28 <TIM_Base_SetConfig+0xbc>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d007      	beq.n	8004b0c <TIM_Base_SetConfig+0xa0>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a0b      	ldr	r2, [pc, #44]	; (8004b2c <TIM_Base_SetConfig+0xc0>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d003      	beq.n	8004b0c <TIM_Base_SetConfig+0xa0>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a0a      	ldr	r2, [pc, #40]	; (8004b30 <TIM_Base_SetConfig+0xc4>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d103      	bne.n	8004b14 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	691a      	ldr	r2, [r3, #16]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	615a      	str	r2, [r3, #20]
}
 8004b1a:	bf00      	nop
 8004b1c:	3714      	adds	r7, #20
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	40012c00 	.word	0x40012c00
 8004b2c:	40014000 	.word	0x40014000
 8004b30:	40014400 	.word	0x40014400

08004b34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b087      	sub	sp, #28
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6a1b      	ldr	r3, [r3, #32]
 8004b44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	f023 0201 	bic.w	r2, r3, #1
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	011b      	lsls	r3, r3, #4
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	f023 030a 	bic.w	r3, r3, #10
 8004b70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	693a      	ldr	r2, [r7, #16]
 8004b7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	621a      	str	r2, [r3, #32]
}
 8004b86:	bf00      	nop
 8004b88:	371c      	adds	r7, #28
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr

08004b92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b92:	b480      	push	{r7}
 8004b94:	b087      	sub	sp, #28
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	60f8      	str	r0, [r7, #12]
 8004b9a:	60b9      	str	r1, [r7, #8]
 8004b9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6a1b      	ldr	r3, [r3, #32]
 8004ba8:	f023 0210 	bic.w	r2, r3, #16
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004bbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	031b      	lsls	r3, r3, #12
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004bce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	011b      	lsls	r3, r3, #4
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	693a      	ldr	r2, [r7, #16]
 8004bde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	697a      	ldr	r2, [r7, #20]
 8004be4:	621a      	str	r2, [r3, #32]
}
 8004be6:	bf00      	nop
 8004be8:	371c      	adds	r7, #28
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr

08004bf2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	b085      	sub	sp, #20
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
 8004bfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c0a:	683a      	ldr	r2, [r7, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	f043 0307 	orr.w	r3, r3, #7
 8004c14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	609a      	str	r2, [r3, #8]
}
 8004c1c:	bf00      	nop
 8004c1e:	3714      	adds	r7, #20
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b087      	sub	sp, #28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
 8004c34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	021a      	lsls	r2, r3, #8
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	431a      	orrs	r2, r3
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	609a      	str	r2, [r3, #8]
}
 8004c5c:	bf00      	nop
 8004c5e:	371c      	adds	r7, #28
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d101      	bne.n	8004c80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	e04f      	b.n	8004d20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a21      	ldr	r2, [pc, #132]	; (8004d2c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d108      	bne.n	8004cbc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004cb0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a14      	ldr	r2, [pc, #80]	; (8004d2c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d009      	beq.n	8004cf4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ce8:	d004      	beq.n	8004cf4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a10      	ldr	r2, [pc, #64]	; (8004d30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d10c      	bne.n	8004d0e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cfa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	68ba      	ldr	r2, [r7, #8]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68ba      	ldr	r2, [r7, #8]
 8004d0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2201      	movs	r2, #1
 8004d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3714      	adds	r7, #20
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr
 8004d2c:	40012c00 	.word	0x40012c00
 8004d30:	40014000 	.word	0x40014000

08004d34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d3c:	bf00      	nop
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <__itoa>:
 8004d70:	1e93      	subs	r3, r2, #2
 8004d72:	2b22      	cmp	r3, #34	; 0x22
 8004d74:	b510      	push	{r4, lr}
 8004d76:	460c      	mov	r4, r1
 8004d78:	d904      	bls.n	8004d84 <__itoa+0x14>
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	700b      	strb	r3, [r1, #0]
 8004d7e:	461c      	mov	r4, r3
 8004d80:	4620      	mov	r0, r4
 8004d82:	bd10      	pop	{r4, pc}
 8004d84:	2a0a      	cmp	r2, #10
 8004d86:	d109      	bne.n	8004d9c <__itoa+0x2c>
 8004d88:	2800      	cmp	r0, #0
 8004d8a:	da07      	bge.n	8004d9c <__itoa+0x2c>
 8004d8c:	232d      	movs	r3, #45	; 0x2d
 8004d8e:	700b      	strb	r3, [r1, #0]
 8004d90:	4240      	negs	r0, r0
 8004d92:	2101      	movs	r1, #1
 8004d94:	4421      	add	r1, r4
 8004d96:	f000 f805 	bl	8004da4 <__utoa>
 8004d9a:	e7f1      	b.n	8004d80 <__itoa+0x10>
 8004d9c:	2100      	movs	r1, #0
 8004d9e:	e7f9      	b.n	8004d94 <__itoa+0x24>

08004da0 <itoa>:
 8004da0:	f7ff bfe6 	b.w	8004d70 <__itoa>

08004da4 <__utoa>:
 8004da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004da6:	4c1f      	ldr	r4, [pc, #124]	; (8004e24 <__utoa+0x80>)
 8004da8:	b08b      	sub	sp, #44	; 0x2c
 8004daa:	4605      	mov	r5, r0
 8004dac:	460b      	mov	r3, r1
 8004dae:	466e      	mov	r6, sp
 8004db0:	f104 0c20 	add.w	ip, r4, #32
 8004db4:	6820      	ldr	r0, [r4, #0]
 8004db6:	6861      	ldr	r1, [r4, #4]
 8004db8:	4637      	mov	r7, r6
 8004dba:	c703      	stmia	r7!, {r0, r1}
 8004dbc:	3408      	adds	r4, #8
 8004dbe:	4564      	cmp	r4, ip
 8004dc0:	463e      	mov	r6, r7
 8004dc2:	d1f7      	bne.n	8004db4 <__utoa+0x10>
 8004dc4:	7921      	ldrb	r1, [r4, #4]
 8004dc6:	7139      	strb	r1, [r7, #4]
 8004dc8:	1e91      	subs	r1, r2, #2
 8004dca:	6820      	ldr	r0, [r4, #0]
 8004dcc:	6038      	str	r0, [r7, #0]
 8004dce:	2922      	cmp	r1, #34	; 0x22
 8004dd0:	f04f 0100 	mov.w	r1, #0
 8004dd4:	d904      	bls.n	8004de0 <__utoa+0x3c>
 8004dd6:	7019      	strb	r1, [r3, #0]
 8004dd8:	460b      	mov	r3, r1
 8004dda:	4618      	mov	r0, r3
 8004ddc:	b00b      	add	sp, #44	; 0x2c
 8004dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004de0:	1e58      	subs	r0, r3, #1
 8004de2:	4684      	mov	ip, r0
 8004de4:	fbb5 f7f2 	udiv	r7, r5, r2
 8004de8:	fb02 5617 	mls	r6, r2, r7, r5
 8004dec:	3628      	adds	r6, #40	; 0x28
 8004dee:	446e      	add	r6, sp
 8004df0:	460c      	mov	r4, r1
 8004df2:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8004df6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8004dfa:	462e      	mov	r6, r5
 8004dfc:	42b2      	cmp	r2, r6
 8004dfe:	f101 0101 	add.w	r1, r1, #1
 8004e02:	463d      	mov	r5, r7
 8004e04:	d9ee      	bls.n	8004de4 <__utoa+0x40>
 8004e06:	2200      	movs	r2, #0
 8004e08:	545a      	strb	r2, [r3, r1]
 8004e0a:	1919      	adds	r1, r3, r4
 8004e0c:	1aa5      	subs	r5, r4, r2
 8004e0e:	42aa      	cmp	r2, r5
 8004e10:	dae3      	bge.n	8004dda <__utoa+0x36>
 8004e12:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8004e16:	780e      	ldrb	r6, [r1, #0]
 8004e18:	7006      	strb	r6, [r0, #0]
 8004e1a:	3201      	adds	r2, #1
 8004e1c:	f801 5901 	strb.w	r5, [r1], #-1
 8004e20:	e7f4      	b.n	8004e0c <__utoa+0x68>
 8004e22:	bf00      	nop
 8004e24:	0800541c 	.word	0x0800541c

08004e28 <memset>:
 8004e28:	4402      	add	r2, r0
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d100      	bne.n	8004e32 <memset+0xa>
 8004e30:	4770      	bx	lr
 8004e32:	f803 1b01 	strb.w	r1, [r3], #1
 8004e36:	e7f9      	b.n	8004e2c <memset+0x4>

08004e38 <__libc_init_array>:
 8004e38:	b570      	push	{r4, r5, r6, lr}
 8004e3a:	4d0d      	ldr	r5, [pc, #52]	; (8004e70 <__libc_init_array+0x38>)
 8004e3c:	4c0d      	ldr	r4, [pc, #52]	; (8004e74 <__libc_init_array+0x3c>)
 8004e3e:	1b64      	subs	r4, r4, r5
 8004e40:	10a4      	asrs	r4, r4, #2
 8004e42:	2600      	movs	r6, #0
 8004e44:	42a6      	cmp	r6, r4
 8004e46:	d109      	bne.n	8004e5c <__libc_init_array+0x24>
 8004e48:	4d0b      	ldr	r5, [pc, #44]	; (8004e78 <__libc_init_array+0x40>)
 8004e4a:	4c0c      	ldr	r4, [pc, #48]	; (8004e7c <__libc_init_array+0x44>)
 8004e4c:	f000 f818 	bl	8004e80 <_init>
 8004e50:	1b64      	subs	r4, r4, r5
 8004e52:	10a4      	asrs	r4, r4, #2
 8004e54:	2600      	movs	r6, #0
 8004e56:	42a6      	cmp	r6, r4
 8004e58:	d105      	bne.n	8004e66 <__libc_init_array+0x2e>
 8004e5a:	bd70      	pop	{r4, r5, r6, pc}
 8004e5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e60:	4798      	blx	r3
 8004e62:	3601      	adds	r6, #1
 8004e64:	e7ee      	b.n	8004e44 <__libc_init_array+0xc>
 8004e66:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e6a:	4798      	blx	r3
 8004e6c:	3601      	adds	r6, #1
 8004e6e:	e7f2      	b.n	8004e56 <__libc_init_array+0x1e>
 8004e70:	08005444 	.word	0x08005444
 8004e74:	08005444 	.word	0x08005444
 8004e78:	08005444 	.word	0x08005444
 8004e7c:	08005448 	.word	0x08005448

08004e80 <_init>:
 8004e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e82:	bf00      	nop
 8004e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e86:	bc08      	pop	{r3}
 8004e88:	469e      	mov	lr, r3
 8004e8a:	4770      	bx	lr

08004e8c <_fini>:
 8004e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e8e:	bf00      	nop
 8004e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e92:	bc08      	pop	{r3}
 8004e94:	469e      	mov	lr, r3
 8004e96:	4770      	bx	lr
