
lcd_smol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000539c  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005dc  0800552c  0800552c  0001552c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b08  08005b08  000200a0  2**0
                  CONTENTS
  4 .ARM          00000000  08005b08  08005b08  000200a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b08  08005b08  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b08  08005b08  00015b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b0c  08005b0c  00015b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08005b10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  200000a0  08005bb0  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  08005bb0  00020230  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010e1a  00000000  00000000  00020113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000261e  00000000  00000000  00030f2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010a8  00000000  00000000  00033550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ce0  00000000  00000000  000345f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000217de  00000000  00000000  000352d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012647  00000000  00000000  00056ab6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ccc50  00000000  00000000  000690fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000046f8  00000000  00000000  00135d50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  0013a448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a0 	.word	0x200000a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005514 	.word	0x08005514

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a4 	.word	0x200000a4
 80001cc:	08005514 	.word	0x08005514

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2iz>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000974:	d215      	bcs.n	80009a2 <__aeabi_d2iz+0x36>
 8000976:	d511      	bpl.n	800099c <__aeabi_d2iz+0x30>
 8000978:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d912      	bls.n	80009a8 <__aeabi_d2iz+0x3c>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000992:	fa23 f002 	lsr.w	r0, r3, r2
 8000996:	bf18      	it	ne
 8000998:	4240      	negne	r0, r0
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d105      	bne.n	80009b4 <__aeabi_d2iz+0x48>
 80009a8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009ac:	bf08      	it	eq
 80009ae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009b2:	4770      	bx	lr
 80009b4:	f04f 0000 	mov.w	r0, #0
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <uint16_to_bytes>:
  }
#endif

// Probably going to move these to a different file, but for now
void uint16_to_bytes(uint16_t in, uint8_t *out)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	6039      	str	r1, [r7, #0]
 80009c6:	80fb      	strh	r3, [r7, #6]
	out[0] = (in >> 8) & 0xFF;
 80009c8:	88fb      	ldrh	r3, [r7, #6]
 80009ca:	0a1b      	lsrs	r3, r3, #8
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	b2da      	uxtb	r2, r3
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	701a      	strb	r2, [r3, #0]
	out[1] = in & 0xFF;
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	3301      	adds	r3, #1
 80009d8:	88fa      	ldrh	r2, [r7, #6]
 80009da:	b2d2      	uxtb	r2, r2
 80009dc:	701a      	strb	r2, [r3, #0]
}
 80009de:	bf00      	nop
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
	...

080009ec <LCD_reset>:
	HX8357_DISPON, 0x80 +  50/5, // Main screen turn on, delay 50 ms
	0,                           // END OF COMMAND LIST
  };

void LCD_reset()
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 80009f0:	2201      	movs	r2, #1
 80009f2:	2110      	movs	r1, #16
 80009f4:	480b      	ldr	r0, [pc, #44]	; (8000a24 <LCD_reset+0x38>)
 80009f6:	f002 f84f 	bl	8002a98 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80009fa:	2064      	movs	r0, #100	; 0x64
 80009fc:	f001 fddc 	bl	80025b8 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8000a00:	2200      	movs	r2, #0
 8000a02:	2110      	movs	r1, #16
 8000a04:	4807      	ldr	r0, [pc, #28]	; (8000a24 <LCD_reset+0x38>)
 8000a06:	f002 f847 	bl	8002a98 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000a0a:	2064      	movs	r0, #100	; 0x64
 8000a0c:	f001 fdd4 	bl	80025b8 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8000a10:	2201      	movs	r2, #1
 8000a12:	2110      	movs	r1, #16
 8000a14:	4803      	ldr	r0, [pc, #12]	; (8000a24 <LCD_reset+0x38>)
 8000a16:	f002 f83f 	bl	8002a98 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000a1a:	20c8      	movs	r0, #200	; 0xc8
 8000a1c:	f001 fdcc 	bl	80025b8 <HAL_Delay>
}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	48000400 	.word	0x48000400

08000a28 <LCD_writeCommand>:

HAL_StatusTypeDef LCD_writeCommand(SPI_HandleTypeDef* spi, uint8_t cmd)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af02      	add	r7, sp, #8
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	460b      	mov	r3, r1
 8000a32:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef result;
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8000a34:	2200      	movs	r2, #0
 8000a36:	2120      	movs	r1, #32
 8000a38:	480b      	ldr	r0, [pc, #44]	; (8000a68 <LCD_writeCommand+0x40>)
 8000a3a:	f002 f82d 	bl	8002a98 <HAL_GPIO_WritePin>
	uint8_t buf[1];
	result = HAL_SPI_TransmitReceive(spi, &cmd, &buf[0], 1, 100);
 8000a3e:	f107 020c 	add.w	r2, r7, #12
 8000a42:	1cf9      	adds	r1, r7, #3
 8000a44:	2364      	movs	r3, #100	; 0x64
 8000a46:	9300      	str	r3, [sp, #0]
 8000a48:	2301      	movs	r3, #1
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f003 fd32 	bl	80044b4 <HAL_SPI_TransmitReceive>
 8000a50:	4603      	mov	r3, r0
 8000a52:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000a54:	2201      	movs	r2, #1
 8000a56:	2120      	movs	r1, #32
 8000a58:	4803      	ldr	r0, [pc, #12]	; (8000a68 <LCD_writeCommand+0x40>)
 8000a5a:	f002 f81d 	bl	8002a98 <HAL_GPIO_WritePin>
	return result;
 8000a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3710      	adds	r7, #16
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	48000400 	.word	0x48000400

08000a6c <LCD_startWrite>:

void LCD_startWrite()
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	2140      	movs	r1, #64	; 0x40
 8000a74:	4802      	ldr	r0, [pc, #8]	; (8000a80 <LCD_startWrite+0x14>)
 8000a76:	f002 f80f 	bl	8002a98 <HAL_GPIO_WritePin>
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	48000400 	.word	0x48000400

08000a84 <LCD_endWrite>:

void LCD_endWrite()
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	2140      	movs	r1, #64	; 0x40
 8000a8c:	4802      	ldr	r0, [pc, #8]	; (8000a98 <LCD_endWrite+0x14>)
 8000a8e:	f002 f803 	bl	8002a98 <HAL_GPIO_WritePin>
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	48000400 	.word	0x48000400

08000a9c <LCD_begin>:

int LCD_begin(SPI_HandleTypeDef* spi)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	LCD_reset();
 8000aa4:	f7ff ffa2 	bl	80009ec <LCD_reset>
	LCD_startWrite();
 8000aa8:	f7ff ffe0 	bl	8000a6c <LCD_startWrite>
	uint8_t *addr = init;
 8000aac:	4b26      	ldr	r3, [pc, #152]	; (8000b48 <LCD_begin+0xac>)
 8000aae:	60fb      	str	r3, [r7, #12]
	uint8_t cmd, x, numArgs;
	HAL_StatusTypeDef result;
	while((cmd = *(addr++)) > 0) // '0' command ends list
 8000ab0:	e03b      	b.n	8000b2a <LCD_begin+0x8e>
	{
		if (cmd != 0xFF) // '255' is ignored
 8000ab2:	7abb      	ldrb	r3, [r7, #10]
 8000ab4:	2bff      	cmp	r3, #255	; 0xff
 8000ab6:	d00d      	beq.n	8000ad4 <LCD_begin+0x38>
		{
			result = LCD_writeCommand(spi, cmd);
 8000ab8:	7abb      	ldrb	r3, [r7, #10]
 8000aba:	4619      	mov	r1, r3
 8000abc:	6878      	ldr	r0, [r7, #4]
 8000abe:	f7ff ffb3 	bl	8000a28 <LCD_writeCommand>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	727b      	strb	r3, [r7, #9]
			if (result != HAL_OK)
 8000ac6:	7a7b      	ldrb	r3, [r7, #9]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d003      	beq.n	8000ad4 <LCD_begin+0x38>
			{
				LCD_endWrite();
 8000acc:	f7ff ffda 	bl	8000a84 <LCD_endWrite>
				return 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	e035      	b.n	8000b40 <LCD_begin+0xa4>
			}
		}
		x = *(addr++);
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	1c5a      	adds	r2, r3, #1
 8000ad8:	60fa      	str	r2, [r7, #12]
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	723b      	strb	r3, [r7, #8]
		numArgs = x & 0x7F;
 8000ade:	7a3b      	ldrb	r3, [r7, #8]
 8000ae0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ae4:	72fb      	strb	r3, [r7, #11]
		if (x & 0x80) // If high bit set...
 8000ae6:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	da18      	bge.n	8000b20 <LCD_begin+0x84>
		{
			HAL_Delay(numArgs * 5); // numArgs is actually a delay time (5ms units)
 8000aee:	7afa      	ldrb	r2, [r7, #11]
 8000af0:	4613      	mov	r3, r2
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	4413      	add	r3, r2
 8000af6:	4618      	mov	r0, r3
 8000af8:	f001 fd5e 	bl	80025b8 <HAL_Delay>
 8000afc:	e015      	b.n	8000b2a <LCD_begin+0x8e>
		}
		else // Otherwise, issue args to command...
		{
			while (numArgs--)
			{
				result = HAL_SPI_Transmit(spi, addr++, 1, 100);
 8000afe:	68f9      	ldr	r1, [r7, #12]
 8000b00:	1c4b      	adds	r3, r1, #1
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	2364      	movs	r3, #100	; 0x64
 8000b06:	2201      	movs	r2, #1
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f003 fb5e 	bl	80041ca <HAL_SPI_Transmit>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	727b      	strb	r3, [r7, #9]
				if (result != HAL_OK)
 8000b12:	7a7b      	ldrb	r3, [r7, #9]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d003      	beq.n	8000b20 <LCD_begin+0x84>
				{
					LCD_endWrite();
 8000b18:	f7ff ffb4 	bl	8000a84 <LCD_endWrite>
					return 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	e00f      	b.n	8000b40 <LCD_begin+0xa4>
			while (numArgs--)
 8000b20:	7afb      	ldrb	r3, [r7, #11]
 8000b22:	1e5a      	subs	r2, r3, #1
 8000b24:	72fa      	strb	r2, [r7, #11]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d1e9      	bne.n	8000afe <LCD_begin+0x62>
	while((cmd = *(addr++)) > 0) // '0' command ends list
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	1c5a      	adds	r2, r3, #1
 8000b2e:	60fa      	str	r2, [r7, #12]
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	72bb      	strb	r3, [r7, #10]
 8000b34:	7abb      	ldrb	r3, [r7, #10]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d1bb      	bne.n	8000ab2 <LCD_begin+0x16>
				}
			}
		}
	}
	LCD_endWrite();
 8000b3a:	f7ff ffa3 	bl	8000a84 <LCD_endWrite>
	return 1;
 8000b3e:	2301      	movs	r3, #1
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3710      	adds	r7, #16
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20000000 	.word	0x20000000

08000b4c <LCD_setAddrWindow>:
	LCD_endWrite();
	return result == HAL_OK;
}

int LCD_setAddrWindow(SPI_HandleTypeDef* spi, uint16_t x1, uint16_t y1, uint16_t w, uint16_t h)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	4608      	mov	r0, r1
 8000b56:	4611      	mov	r1, r2
 8000b58:	461a      	mov	r2, r3
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	817b      	strh	r3, [r7, #10]
 8000b5e:	460b      	mov	r3, r1
 8000b60:	813b      	strh	r3, [r7, #8]
 8000b62:	4613      	mov	r3, r2
 8000b64:	80fb      	strh	r3, [r7, #6]
	uint16_t x2 = x1 + w - 1;
 8000b66:	897a      	ldrh	r2, [r7, #10]
 8000b68:	88fb      	ldrh	r3, [r7, #6]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	b29b      	uxth	r3, r3
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	82fb      	strh	r3, [r7, #22]
	uint16_t y2 = y1 + h - 1;
 8000b72:	893a      	ldrh	r2, [r7, #8]
 8000b74:	8c3b      	ldrh	r3, [r7, #32]
 8000b76:	4413      	add	r3, r2
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	3b01      	subs	r3, #1
 8000b7c:	82bb      	strh	r3, [r7, #20]
	uint8_t buf[2];

	LCD_startWrite();
 8000b7e:	f7ff ff75 	bl	8000a6c <LCD_startWrite>
	LCD_writeCommand(spi, HX8357_CASET); // Column address set
 8000b82:	212a      	movs	r1, #42	; 0x2a
 8000b84:	68f8      	ldr	r0, [r7, #12]
 8000b86:	f7ff ff4f 	bl	8000a28 <LCD_writeCommand>

	uint16_to_bytes(x1, buf);
 8000b8a:	f107 0210 	add.w	r2, r7, #16
 8000b8e:	897b      	ldrh	r3, [r7, #10]
 8000b90:	4611      	mov	r1, r2
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff ff12 	bl	80009bc <uint16_to_bytes>
	HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 8000b98:	f107 0110 	add.w	r1, r7, #16
 8000b9c:	2364      	movs	r3, #100	; 0x64
 8000b9e:	2202      	movs	r2, #2
 8000ba0:	68f8      	ldr	r0, [r7, #12]
 8000ba2:	f003 fb12 	bl	80041ca <HAL_SPI_Transmit>

	uint16_to_bytes(x2, buf);
 8000ba6:	f107 0210 	add.w	r2, r7, #16
 8000baa:	8afb      	ldrh	r3, [r7, #22]
 8000bac:	4611      	mov	r1, r2
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff ff04 	bl	80009bc <uint16_to_bytes>
	HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 8000bb4:	f107 0110 	add.w	r1, r7, #16
 8000bb8:	2364      	movs	r3, #100	; 0x64
 8000bba:	2202      	movs	r2, #2
 8000bbc:	68f8      	ldr	r0, [r7, #12]
 8000bbe:	f003 fb04 	bl	80041ca <HAL_SPI_Transmit>

	LCD_writeCommand(spi, HX8357_PASET); // Row address set
 8000bc2:	212b      	movs	r1, #43	; 0x2b
 8000bc4:	68f8      	ldr	r0, [r7, #12]
 8000bc6:	f7ff ff2f 	bl	8000a28 <LCD_writeCommand>

	uint16_to_bytes(y1, buf);
 8000bca:	f107 0210 	add.w	r2, r7, #16
 8000bce:	893b      	ldrh	r3, [r7, #8]
 8000bd0:	4611      	mov	r1, r2
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff fef2 	bl	80009bc <uint16_to_bytes>
	HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 8000bd8:	f107 0110 	add.w	r1, r7, #16
 8000bdc:	2364      	movs	r3, #100	; 0x64
 8000bde:	2202      	movs	r2, #2
 8000be0:	68f8      	ldr	r0, [r7, #12]
 8000be2:	f003 faf2 	bl	80041ca <HAL_SPI_Transmit>

	uint16_to_bytes(y2, buf);
 8000be6:	f107 0210 	add.w	r2, r7, #16
 8000bea:	8abb      	ldrh	r3, [r7, #20]
 8000bec:	4611      	mov	r1, r2
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fee4 	bl	80009bc <uint16_to_bytes>
	HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 8000bf4:	f107 0110 	add.w	r1, r7, #16
 8000bf8:	2364      	movs	r3, #100	; 0x64
 8000bfa:	2202      	movs	r2, #2
 8000bfc:	68f8      	ldr	r0, [r7, #12]
 8000bfe:	f003 fae4 	bl	80041ca <HAL_SPI_Transmit>

	LCD_endWrite();
 8000c02:	f7ff ff3f 	bl	8000a84 <LCD_endWrite>
	return 1;
 8000c06:	2301      	movs	r3, #1
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3718      	adds	r7, #24
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <LCD_color565>:

uint16_t LCD_color565(uint8_t red, uint8_t green, uint8_t blue) {
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	71fb      	strb	r3, [r7, #7]
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	71bb      	strb	r3, [r7, #6]
 8000c1e:	4613      	mov	r3, r2
 8000c20:	717b      	strb	r3, [r7, #5]
    return ((red & 0xF8) << 8) | ((green & 0xFC) << 3) | ((blue & 0xF8) >> 3);
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	021b      	lsls	r3, r3, #8
 8000c26:	b21b      	sxth	r3, r3
 8000c28:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000c2c:	f023 0307 	bic.w	r3, r3, #7
 8000c30:	b21a      	sxth	r2, r3
 8000c32:	79bb      	ldrb	r3, [r7, #6]
 8000c34:	00db      	lsls	r3, r3, #3
 8000c36:	b21b      	sxth	r3, r3
 8000c38:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8000c3c:	b21b      	sxth	r3, r3
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	b21a      	sxth	r2, r3
 8000c42:	797b      	ldrb	r3, [r7, #5]
 8000c44:	08db      	lsrs	r3, r3, #3
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	b21b      	sxth	r3, r3
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	b21b      	sxth	r3, r3
 8000c4e:	b29b      	uxth	r3, r3
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <LCD_pushColor>:

int LCD_pushColor(SPI_HandleTypeDef* spi, uint16_t color) {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	460b      	mov	r3, r1
 8000c66:	807b      	strh	r3, [r7, #2]
	LCD_startWrite();
 8000c68:	f7ff ff00 	bl	8000a6c <LCD_startWrite>
	LCD_writeCommand(spi, HX8357_RAMWR); // Write to RAM
 8000c6c:	212c      	movs	r1, #44	; 0x2c
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f7ff feda 	bl	8000a28 <LCD_writeCommand>
	HAL_SPI_Transmit(spi, (uint8_t*)&color, 2, 100);
 8000c74:	1cb9      	adds	r1, r7, #2
 8000c76:	2364      	movs	r3, #100	; 0x64
 8000c78:	2202      	movs	r2, #2
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f003 faa5 	bl	80041ca <HAL_SPI_Transmit>
	LCD_writeCommand(spi, HX8357_NOP); // Write command to stop RAMWR
 8000c80:	2100      	movs	r1, #0
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f7ff fed0 	bl	8000a28 <LCD_writeCommand>
	LCD_endWrite();
 8000c88:	f7ff fefc 	bl	8000a84 <LCD_endWrite>
	return 1;
 8000c8c:	2301      	movs	r3, #1
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <LCD_pushColorCopy>:

int LCD_pushColorCopy(SPI_HandleTypeDef* spi, uint16_t color, uint32_t count) {
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b086      	sub	sp, #24
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	60f8      	str	r0, [r7, #12]
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	607a      	str	r2, [r7, #4]
 8000ca2:	817b      	strh	r3, [r7, #10]
	LCD_startWrite();
 8000ca4:	f7ff fee2 	bl	8000a6c <LCD_startWrite>

	LCD_writeCommand(spi, HX8357_RAMWR); // Write to RAM
 8000ca8:	212c      	movs	r1, #44	; 0x2c
 8000caa:	68f8      	ldr	r0, [r7, #12]
 8000cac:	f7ff febc 	bl	8000a28 <LCD_writeCommand>

	uint8_t buf[2];
	uint16_to_bytes(color, &buf[0]);
 8000cb0:	f107 0210 	add.w	r2, r7, #16
 8000cb4:	897b      	ldrh	r3, [r7, #10]
 8000cb6:	4611      	mov	r1, r2
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff fe7f 	bl	80009bc <uint16_to_bytes>
	for (int i = 0; i < count; ++i)
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	617b      	str	r3, [r7, #20]
 8000cc2:	e009      	b.n	8000cd8 <LCD_pushColorCopy+0x42>
	{
		HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 8000cc4:	f107 0110 	add.w	r1, r7, #16
 8000cc8:	2364      	movs	r3, #100	; 0x64
 8000cca:	2202      	movs	r2, #2
 8000ccc:	68f8      	ldr	r0, [r7, #12]
 8000cce:	f003 fa7c 	bl	80041ca <HAL_SPI_Transmit>
	for (int i = 0; i < count; ++i)
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	617b      	str	r3, [r7, #20]
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d8f1      	bhi.n	8000cc4 <LCD_pushColorCopy+0x2e>
	}

	LCD_writeCommand(spi, HX8357_NOP); // Write command to stop RAMWR
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	68f8      	ldr	r0, [r7, #12]
 8000ce4:	f7ff fea0 	bl	8000a28 <LCD_writeCommand>

	LCD_endWrite();
 8000ce8:	f7ff fecc 	bl	8000a84 <LCD_endWrite>
	return 1;
 8000cec:	2301      	movs	r3, #1
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3718      	adds	r7, #24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <LCD_writePixel>:

	LCD_endWrite();
	return 1;
}

int LCD_writePixel(SPI_HandleTypeDef* spi, int16_t x, int16_t y, uint16_t color) {
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b086      	sub	sp, #24
 8000cfa:	af02      	add	r7, sp, #8
 8000cfc:	60f8      	str	r0, [r7, #12]
 8000cfe:	4608      	mov	r0, r1
 8000d00:	4611      	mov	r1, r2
 8000d02:	461a      	mov	r2, r3
 8000d04:	4603      	mov	r3, r0
 8000d06:	817b      	strh	r3, [r7, #10]
 8000d08:	460b      	mov	r3, r1
 8000d0a:	813b      	strh	r3, [r7, #8]
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	80fb      	strh	r3, [r7, #6]
    if ((x < 0) ||(x >= HX8357_TFTWIDTH) || (y < 0) || (y >= HX8357_TFTHEIGHT)) return 0;
 8000d10:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	db0d      	blt.n	8000d34 <LCD_writePixel+0x3e>
 8000d18:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000d1c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000d20:	da08      	bge.n	8000d34 <LCD_writePixel+0x3e>
 8000d22:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	db04      	blt.n	8000d34 <LCD_writePixel+0x3e>
 8000d2a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000d2e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000d32:	db01      	blt.n	8000d38 <LCD_writePixel+0x42>
 8000d34:	2300      	movs	r3, #0
 8000d36:	e017      	b.n	8000d68 <LCD_writePixel+0x72>
    if(!LCD_setAddrWindow(spi, x, y, 1, 1)) return 0;
 8000d38:	8979      	ldrh	r1, [r7, #10]
 8000d3a:	893a      	ldrh	r2, [r7, #8]
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	9300      	str	r3, [sp, #0]
 8000d40:	2301      	movs	r3, #1
 8000d42:	68f8      	ldr	r0, [r7, #12]
 8000d44:	f7ff ff02 	bl	8000b4c <LCD_setAddrWindow>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d101      	bne.n	8000d52 <LCD_writePixel+0x5c>
 8000d4e:	2300      	movs	r3, #0
 8000d50:	e00a      	b.n	8000d68 <LCD_writePixel+0x72>
    if (!LCD_pushColor(spi, color)) return 0;
 8000d52:	88fb      	ldrh	r3, [r7, #6]
 8000d54:	4619      	mov	r1, r3
 8000d56:	68f8      	ldr	r0, [r7, #12]
 8000d58:	f7ff ff80 	bl	8000c5c <LCD_pushColor>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d101      	bne.n	8000d66 <LCD_writePixel+0x70>
 8000d62:	2300      	movs	r3, #0
 8000d64:	e000      	b.n	8000d68 <LCD_writePixel+0x72>
    return 1;
 8000d66:	2301      	movs	r3, #1
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3710      	adds	r7, #16
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <LCD_writePixels>:

// Length of colors array must be w * h
int LCD_writePixels(SPI_HandleTypeDef* spi, uint16_t color,
					int16_t x, int16_t y, int16_t w, int16_t h)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af02      	add	r7, sp, #8
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	4608      	mov	r0, r1
 8000d7a:	4611      	mov	r1, r2
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4603      	mov	r3, r0
 8000d80:	817b      	strh	r3, [r7, #10]
 8000d82:	460b      	mov	r3, r1
 8000d84:	813b      	strh	r3, [r7, #8]
 8000d86:	4613      	mov	r3, r2
 8000d88:	80fb      	strh	r3, [r7, #6]
	if ((x < 0) ||(x >= HX8357_TFTWIDTH) || (y < 0) || (y >= HX8357_TFTHEIGHT)) return 0;
 8000d8a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	db0d      	blt.n	8000dae <LCD_writePixels+0x3e>
 8000d92:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000d96:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000d9a:	da08      	bge.n	8000dae <LCD_writePixels+0x3e>
 8000d9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	db04      	blt.n	8000dae <LCD_writePixels+0x3e>
 8000da4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000da8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000dac:	db01      	blt.n	8000db2 <LCD_writePixels+0x42>
 8000dae:	2300      	movs	r3, #0
 8000db0:	e01f      	b.n	8000df2 <LCD_writePixels+0x82>
	if(!LCD_setAddrWindow(spi, x, y, w, h)) return 0;
 8000db2:	8939      	ldrh	r1, [r7, #8]
 8000db4:	88fa      	ldrh	r2, [r7, #6]
 8000db6:	8b38      	ldrh	r0, [r7, #24]
 8000db8:	8bbb      	ldrh	r3, [r7, #28]
 8000dba:	9300      	str	r3, [sp, #0]
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	68f8      	ldr	r0, [r7, #12]
 8000dc0:	f7ff fec4 	bl	8000b4c <LCD_setAddrWindow>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d101      	bne.n	8000dce <LCD_writePixels+0x5e>
 8000dca:	2300      	movs	r3, #0
 8000dcc:	e011      	b.n	8000df2 <LCD_writePixels+0x82>
	if (!LCD_pushColorCopy(spi, color, w*h)) return 0;
 8000dce:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000dd2:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8000dd6:	fb02 f303 	mul.w	r3, r2, r3
 8000dda:	461a      	mov	r2, r3
 8000ddc:	897b      	ldrh	r3, [r7, #10]
 8000dde:	4619      	mov	r1, r3
 8000de0:	68f8      	ldr	r0, [r7, #12]
 8000de2:	f7ff ff58 	bl	8000c96 <LCD_pushColorCopy>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d101      	bne.n	8000df0 <LCD_writePixels+0x80>
 8000dec:	2300      	movs	r3, #0
 8000dee:	e000      	b.n	8000df2 <LCD_writePixels+0x82>
	return 1;
 8000df0:	2301      	movs	r3, #1
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
	...

08000dfc <LCD_drawChar>:
		0x70, 0x1C, 0x07, 0x1C, 0x70,
		0x0E, 0x38, 0xE0, 0x38, 0x0E
};

void LCD_drawChar(SPI_HandleTypeDef* spi, int16_t x, int16_t y, unsigned char c, uint16_t color, uint32_t size)
{
 8000dfc:	b590      	push	{r4, r7, lr}
 8000dfe:	b089      	sub	sp, #36	; 0x24
 8000e00:	af02      	add	r7, sp, #8
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	4608      	mov	r0, r1
 8000e06:	4611      	mov	r1, r2
 8000e08:	461a      	mov	r2, r3
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	817b      	strh	r3, [r7, #10]
 8000e0e:	460b      	mov	r3, r1
 8000e10:	813b      	strh	r3, [r7, #8]
 8000e12:	4613      	mov	r3, r2
 8000e14:	71fb      	strb	r3, [r7, #7]
	if((x >= HX8357_TFTWIDTH)   || // Clip right
 8000e16:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000e1a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000e1e:	f280 80b5 	bge.w	8000f8c <LCD_drawChar+0x190>
	   (y >= HX8357_TFTHEIGHT)  || // Clip bottom
	   ((x + 6 * size - 1) < 0) || // Clip left
 8000e22:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000e26:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000e2a:	f280 80af 	bge.w	8000f8c <LCD_drawChar+0x190>
	   ((y + 8 * size - 1) < 0))   // Clip top
		return;

	uint16_t bg = LCD_color565(255, 255, 255);
 8000e2e:	22ff      	movs	r2, #255	; 0xff
 8000e30:	21ff      	movs	r1, #255	; 0xff
 8000e32:	20ff      	movs	r0, #255	; 0xff
 8000e34:	f7ff feec 	bl	8000c10 <LCD_color565>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	827b      	strh	r3, [r7, #18]
	LCD_startWrite();
 8000e3c:	f7ff fe16 	bl	8000a6c <LCD_startWrite>
	for(int8_t i = 0; i < 5; i++) // Char bitmap = 5 columns
 8000e40:	2300      	movs	r3, #0
 8000e42:	75fb      	strb	r3, [r7, #23]
 8000e44:	e09a      	b.n	8000f7c <LCD_drawChar+0x180>
	{
		uint8_t line = font[c * 5 + i];
 8000e46:	79fa      	ldrb	r2, [r7, #7]
 8000e48:	4613      	mov	r3, r2
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	441a      	add	r2, r3
 8000e4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e52:	4413      	add	r3, r2
 8000e54:	4a4f      	ldr	r2, [pc, #316]	; (8000f94 <LCD_drawChar+0x198>)
 8000e56:	5cd3      	ldrb	r3, [r2, r3]
 8000e58:	75bb      	strb	r3, [r7, #22]
		for(int8_t j = 0; j < 8; j++, line >>= 1)
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	757b      	strb	r3, [r7, #21]
 8000e5e:	e082      	b.n	8000f66 <LCD_drawChar+0x16a>
		{
			if (line & 1)
 8000e60:	7dbb      	ldrb	r3, [r7, #22]
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d03a      	beq.n	8000ee0 <LCD_drawChar+0xe4>
			{
				if (size == 1) LCD_writePixel(spi, x+i, y+j, color);
 8000e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d112      	bne.n	8000e96 <LCD_drawChar+0x9a>
 8000e70:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e74:	b29a      	uxth	r2, r3
 8000e76:	897b      	ldrh	r3, [r7, #10]
 8000e78:	4413      	add	r3, r2
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	b219      	sxth	r1, r3
 8000e7e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000e82:	b29a      	uxth	r2, r3
 8000e84:	893b      	ldrh	r3, [r7, #8]
 8000e86:	4413      	add	r3, r2
 8000e88:	b29b      	uxth	r3, r3
 8000e8a:	b21a      	sxth	r2, r3
 8000e8c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000e8e:	68f8      	ldr	r0, [r7, #12]
 8000e90:	f7ff ff31 	bl	8000cf6 <LCD_writePixel>
 8000e94:	e05e      	b.n	8000f54 <LCD_drawChar+0x158>
				else LCD_writePixels(spi, color, x+i*size, y+j*size, size, size);
 8000e96:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	fb12 f303 	smulbb	r3, r2, r3
 8000ea4:	b29a      	uxth	r2, r3
 8000ea6:	897b      	ldrh	r3, [r7, #10]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	b218      	sxth	r0, r3
 8000eae:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000eb2:	b29a      	uxth	r2, r3
 8000eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	fb12 f303 	smulbb	r3, r2, r3
 8000ebc:	b29a      	uxth	r2, r3
 8000ebe:	893b      	ldrh	r3, [r7, #8]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	b21c      	sxth	r4, r3
 8000ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ec8:	b21b      	sxth	r3, r3
 8000eca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ecc:	b212      	sxth	r2, r2
 8000ece:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000ed0:	9201      	str	r2, [sp, #4]
 8000ed2:	9300      	str	r3, [sp, #0]
 8000ed4:	4623      	mov	r3, r4
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	68f8      	ldr	r0, [r7, #12]
 8000eda:	f7ff ff49 	bl	8000d70 <LCD_writePixels>
 8000ede:	e039      	b.n	8000f54 <LCD_drawChar+0x158>
			}
			else
			{
				if (size == 1) LCD_writePixel(spi, x+i, y+j, bg);
 8000ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d112      	bne.n	8000f0c <LCD_drawChar+0x110>
 8000ee6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000eea:	b29a      	uxth	r2, r3
 8000eec:	897b      	ldrh	r3, [r7, #10]
 8000eee:	4413      	add	r3, r2
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	b219      	sxth	r1, r3
 8000ef4:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000ef8:	b29a      	uxth	r2, r3
 8000efa:	893b      	ldrh	r3, [r7, #8]
 8000efc:	4413      	add	r3, r2
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	b21a      	sxth	r2, r3
 8000f02:	8a7b      	ldrh	r3, [r7, #18]
 8000f04:	68f8      	ldr	r0, [r7, #12]
 8000f06:	f7ff fef6 	bl	8000cf6 <LCD_writePixel>
 8000f0a:	e023      	b.n	8000f54 <LCD_drawChar+0x158>
				else LCD_writePixels(spi, bg, x+i*size, y+j*size, size, size);
 8000f0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f10:	b29a      	uxth	r2, r3
 8000f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	fb12 f303 	smulbb	r3, r2, r3
 8000f1a:	b29a      	uxth	r2, r3
 8000f1c:	897b      	ldrh	r3, [r7, #10]
 8000f1e:	4413      	add	r3, r2
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	b218      	sxth	r0, r3
 8000f24:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000f28:	b29a      	uxth	r2, r3
 8000f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	fb12 f303 	smulbb	r3, r2, r3
 8000f32:	b29a      	uxth	r2, r3
 8000f34:	893b      	ldrh	r3, [r7, #8]
 8000f36:	4413      	add	r3, r2
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	b21c      	sxth	r4, r3
 8000f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f3e:	b21b      	sxth	r3, r3
 8000f40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f42:	b212      	sxth	r2, r2
 8000f44:	8a79      	ldrh	r1, [r7, #18]
 8000f46:	9201      	str	r2, [sp, #4]
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	4623      	mov	r3, r4
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	68f8      	ldr	r0, [r7, #12]
 8000f50:	f7ff ff0e 	bl	8000d70 <LCD_writePixels>
		for(int8_t j = 0; j < 8; j++, line >>= 1)
 8000f54:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	757b      	strb	r3, [r7, #21]
 8000f60:	7dbb      	ldrb	r3, [r7, #22]
 8000f62:	085b      	lsrs	r3, r3, #1
 8000f64:	75bb      	strb	r3, [r7, #22]
 8000f66:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000f6a:	2b07      	cmp	r3, #7
 8000f6c:	f77f af78 	ble.w	8000e60 <LCD_drawChar+0x64>
	for(int8_t i = 0; i < 5; i++) // Char bitmap = 5 columns
 8000f70:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	3301      	adds	r3, #1
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	75fb      	strb	r3, [r7, #23]
 8000f7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f80:	2b04      	cmp	r3, #4
 8000f82:	f77f af60 	ble.w	8000e46 <LCD_drawChar+0x4a>
			}
		}
	}
	LCD_endWrite();
 8000f86:	f7ff fd7d 	bl	8000a84 <LCD_endWrite>
 8000f8a:	e000      	b.n	8000f8e <LCD_drawChar+0x192>
		return;
 8000f8c:	bf00      	nop
}
 8000f8e:	371c      	adds	r7, #28
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd90      	pop	{r4, r7, pc}
 8000f94:	08005598 	.word	0x08005598

08000f98 <LCD_drawString>:
	}
	LCD_endWrite();
}

void LCD_drawString(SPI_HandleTypeDef* spi, int16_t x, int16_t y, unsigned char* c, uint32_t length, uint16_t color, uint32_t size)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b088      	sub	sp, #32
 8000f9c:	af02      	add	r7, sp, #8
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	607b      	str	r3, [r7, #4]
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	817b      	strh	r3, [r7, #10]
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	813b      	strh	r3, [r7, #8]
	for (int i = 0; i < length; ++i) LCD_drawChar(spi, x + i*6*size, y, c[i], color, size);
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
 8000fae:	e020      	b.n	8000ff2 <LCD_drawString+0x5a>
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	fb12 f303 	smulbb	r3, r2, r3
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	0052      	lsls	r2, r2, #1
 8000fc2:	4413      	add	r3, r2
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	897b      	ldrh	r3, [r7, #10]
 8000fca:	4413      	add	r3, r2
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	b219      	sxth	r1, r3
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	7818      	ldrb	r0, [r3, #0]
 8000fd8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fde:	9301      	str	r3, [sp, #4]
 8000fe0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	68f8      	ldr	r0, [r7, #12]
 8000fe8:	f7ff ff08 	bl	8000dfc <LCD_drawChar>
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	617b      	str	r3, [r7, #20]
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	6a3a      	ldr	r2, [r7, #32]
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d8da      	bhi.n	8000fb0 <LCD_drawString+0x18>
}
 8000ffa:	bf00      	nop
 8000ffc:	bf00      	nop
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <LCD_writeLine>:
		}
	}
	LCD_endWrite();
}

void LCD_writeLine(SPI_HandleTypeDef *spi, int x0, int y0, int x1, int y1, int color) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b08a      	sub	sp, #40	; 0x28
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
 8001010:	603b      	str	r3, [r7, #0]
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8001012:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800101c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001020:	6839      	ldr	r1, [r7, #0]
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	1acb      	subs	r3, r1, r3
 8001026:	2b00      	cmp	r3, #0
 8001028:	bfb8      	it	lt
 800102a:	425b      	neglt	r3, r3
 800102c:	429a      	cmp	r2, r3
 800102e:	bfcc      	ite	gt
 8001030:	2301      	movgt	r3, #1
 8001032:	2300      	movle	r3, #0
 8001034:	b2db      	uxtb	r3, r3
 8001036:	847b      	strh	r3, [r7, #34]	; 0x22
  if (steep) {
 8001038:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800103c:	2b00      	cmp	r3, #0
 800103e:	d00d      	beq.n	800105c <LCD_writeLine+0x58>
    _swap_int16_t(x0, y0);
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	843b      	strh	r3, [r7, #32]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800104c:	607b      	str	r3, [r7, #4]
    _swap_int16_t(x1, y1);
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	83fb      	strh	r3, [r7, #30]
 8001052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001054:	603b      	str	r3, [r7, #0]
 8001056:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800105a:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (x0 > x1) {
 800105c:	68ba      	ldr	r2, [r7, #8]
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	429a      	cmp	r2, r3
 8001062:	dd0d      	ble.n	8001080 <LCD_writeLine+0x7c>
    _swap_int16_t(x0, x1);
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	83bb      	strh	r3, [r7, #28]
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001070:	603b      	str	r3, [r7, #0]
    _swap_int16_t(y0, y1);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	837b      	strh	r3, [r7, #26]
 8001076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800107e:	633b      	str	r3, [r7, #48]	; 0x30
  }

  int16_t dx, dy;
  dx = x1 - x0;
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	b29a      	uxth	r2, r3
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	b29b      	uxth	r3, r3
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	b29b      	uxth	r3, r3
 800108c:	833b      	strh	r3, [r7, #24]
  dy = abs(y1 - y0);
 800108e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	2b00      	cmp	r3, #0
 8001096:	bfb8      	it	lt
 8001098:	425b      	neglt	r3, r3
 800109a:	82fb      	strh	r3, [r7, #22]

  int16_t err = dx / 2;
 800109c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80010a0:	0fda      	lsrs	r2, r3, #31
 80010a2:	4413      	add	r3, r2
 80010a4:	105b      	asrs	r3, r3, #1
 80010a6:	84fb      	strh	r3, [r7, #38]	; 0x26
  int16_t ystep;

  if (y0 < y1) {
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010ac:	429a      	cmp	r2, r3
 80010ae:	da02      	bge.n	80010b6 <LCD_writeLine+0xb2>
    ystep = 1;
 80010b0:	2301      	movs	r3, #1
 80010b2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80010b4:	e030      	b.n	8001118 <LCD_writeLine+0x114>
  } else {
    ystep = -1;
 80010b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010ba:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  for (; x0 <= x1; x0++) {
 80010bc:	e02c      	b.n	8001118 <LCD_writeLine+0x114>
    if (steep) {
 80010be:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d009      	beq.n	80010da <LCD_writeLine+0xd6>
      LCD_writePixel(spi, y0, x0, color);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	b219      	sxth	r1, r3
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	b21a      	sxth	r2, r3
 80010ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	68f8      	ldr	r0, [r7, #12]
 80010d4:	f7ff fe0f 	bl	8000cf6 <LCD_writePixel>
 80010d8:	e008      	b.n	80010ec <LCD_writeLine+0xe8>
    } else {
      LCD_writePixel(spi, x0, y0, color);
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	b219      	sxth	r1, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	b21a      	sxth	r2, r3
 80010e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	68f8      	ldr	r0, [r7, #12]
 80010e8:	f7ff fe05 	bl	8000cf6 <LCD_writePixel>
    }
    err -= dy;
 80010ec:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80010ee:	8afb      	ldrh	r3, [r7, #22]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	84fb      	strh	r3, [r7, #38]	; 0x26
    if (err < 0) {
 80010f6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	da09      	bge.n	8001112 <LCD_writeLine+0x10e>
      y0 += ystep;
 80010fe:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	4413      	add	r3, r2
 8001106:	607b      	str	r3, [r7, #4]
      err += dx;
 8001108:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800110a:	8b3b      	ldrh	r3, [r7, #24]
 800110c:	4413      	add	r3, r2
 800110e:	b29b      	uxth	r3, r3
 8001110:	84fb      	strh	r3, [r7, #38]	; 0x26
  for (; x0 <= x1; x0++) {
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	3301      	adds	r3, #1
 8001116:	60bb      	str	r3, [r7, #8]
 8001118:	68ba      	ldr	r2, [r7, #8]
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	429a      	cmp	r2, r3
 800111e:	ddce      	ble.n	80010be <LCD_writeLine+0xba>
    }
  }
}
 8001120:	bf00      	nop
 8001122:	bf00      	nop
 8001124:	3728      	adds	r7, #40	; 0x28
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <LCD_writeFastHLine>:

void LCD_writeFastVLine(SPI_HandleTypeDef *spi, int16_t x, int16_t y, int16_t h, uint16_t color) {
	LCD_writeLine(spi, x, y, x, y + h - 1, color);
}

void LCD_writeFastHLine(SPI_HandleTypeDef *spi, int16_t x, int16_t y, int16_t w, uint16_t color) {
 800112a:	b590      	push	{r4, r7, lr}
 800112c:	b087      	sub	sp, #28
 800112e:	af02      	add	r7, sp, #8
 8001130:	60f8      	str	r0, [r7, #12]
 8001132:	4608      	mov	r0, r1
 8001134:	4611      	mov	r1, r2
 8001136:	461a      	mov	r2, r3
 8001138:	4603      	mov	r3, r0
 800113a:	817b      	strh	r3, [r7, #10]
 800113c:	460b      	mov	r3, r1
 800113e:	813b      	strh	r3, [r7, #8]
 8001140:	4613      	mov	r3, r2
 8001142:	80fb      	strh	r3, [r7, #6]
	LCD_writeLine(spi, x, y, x + w - 1, y, color);
 8001144:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001148:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 800114c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001150:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001154:	4413      	add	r3, r2
 8001156:	1e5c      	subs	r4, r3, #1
 8001158:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800115c:	8c3a      	ldrh	r2, [r7, #32]
 800115e:	9201      	str	r2, [sp, #4]
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	4623      	mov	r3, r4
 8001164:	4602      	mov	r2, r0
 8001166:	68f8      	ldr	r0, [r7, #12]
 8001168:	f7ff ff4c 	bl	8001004 <LCD_writeLine>
}
 800116c:	bf00      	nop
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	bd90      	pop	{r4, r7, pc}

08001174 <LCD_fillTriangle>:
	for (int16_t i = y; i < y + h; i++) {
		LCD_writeFastHLine(spi, x, i, w, color);
	}
}

void LCD_fillTriangle(SPI_HandleTypeDef *spi, int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
 8001174:	b580      	push	{r7, lr}
 8001176:	b092      	sub	sp, #72	; 0x48
 8001178:	af02      	add	r7, sp, #8
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	4608      	mov	r0, r1
 800117e:	4611      	mov	r1, r2
 8001180:	461a      	mov	r2, r3
 8001182:	4603      	mov	r3, r0
 8001184:	817b      	strh	r3, [r7, #10]
 8001186:	460b      	mov	r3, r1
 8001188:	813b      	strh	r3, [r7, #8]
 800118a:	4613      	mov	r3, r2
 800118c:	80fb      	strh	r3, [r7, #6]
	int16_t a, b, y, last;

	  // Sort coordinates by Y order (y2 >= y1 >= y0)
	  if (y0 > y1) {
 800118e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001192:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8001196:	429a      	cmp	r2, r3
 8001198:	dd0d      	ble.n	80011b6 <LCD_fillTriangle+0x42>
	    _swap_int16_t(y0, y1);
 800119a:	893b      	ldrh	r3, [r7, #8]
 800119c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800119e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80011a2:	813b      	strh	r3, [r7, #8]
 80011a4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80011a6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	    _swap_int16_t(x0, x1);
 80011aa:	897b      	ldrh	r3, [r7, #10]
 80011ac:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80011ae:	88fb      	ldrh	r3, [r7, #6]
 80011b0:	817b      	strh	r3, [r7, #10]
 80011b2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80011b4:	80fb      	strh	r3, [r7, #6]
	  }
	  if (y1 > y2) {
 80011b6:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 80011ba:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80011be:	429a      	cmp	r2, r3
 80011c0:	dd11      	ble.n	80011e6 <LCD_fillTriangle+0x72>
	    _swap_int16_t(y2, y1);
 80011c2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80011c6:	857b      	strh	r3, [r7, #42]	; 0x2a
 80011c8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80011cc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80011d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80011d2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	    _swap_int16_t(x2, x1);
 80011d6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80011da:	853b      	strh	r3, [r7, #40]	; 0x28
 80011dc:	88fb      	ldrh	r3, [r7, #6]
 80011de:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80011e2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80011e4:	80fb      	strh	r3, [r7, #6]
	  }
	  if (y0 > y1) {
 80011e6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80011ea:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 80011ee:	429a      	cmp	r2, r3
 80011f0:	dd0d      	ble.n	800120e <LCD_fillTriangle+0x9a>
	    _swap_int16_t(y0, y1);
 80011f2:	893b      	ldrh	r3, [r7, #8]
 80011f4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80011f6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80011fa:	813b      	strh	r3, [r7, #8]
 80011fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011fe:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	    _swap_int16_t(x0, x1);
 8001202:	897b      	ldrh	r3, [r7, #10]
 8001204:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001206:	88fb      	ldrh	r3, [r7, #6]
 8001208:	817b      	strh	r3, [r7, #10]
 800120a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800120c:	80fb      	strh	r3, [r7, #6]
	  }

	  if (y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 800120e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001212:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8001216:	429a      	cmp	r2, r3
 8001218:	d13a      	bne.n	8001290 <LCD_fillTriangle+0x11c>
	    a = b = x0;
 800121a:	897b      	ldrh	r3, [r7, #10]
 800121c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800121e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001220:	87fb      	strh	r3, [r7, #62]	; 0x3e
	    if (x1 < a)
 8001222:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001226:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800122a:	429a      	cmp	r2, r3
 800122c:	da02      	bge.n	8001234 <LCD_fillTriangle+0xc0>
	      a = x1;
 800122e:	88fb      	ldrh	r3, [r7, #6]
 8001230:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8001232:	e007      	b.n	8001244 <LCD_fillTriangle+0xd0>
	    else if (x1 > b)
 8001234:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001238:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800123c:	429a      	cmp	r2, r3
 800123e:	dd01      	ble.n	8001244 <LCD_fillTriangle+0xd0>
	      b = x1;
 8001240:	88fb      	ldrh	r3, [r7, #6]
 8001242:	87bb      	strh	r3, [r7, #60]	; 0x3c
	    if (x2 < a)
 8001244:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	; 0x4c
 8001248:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800124c:	429a      	cmp	r2, r3
 800124e:	da03      	bge.n	8001258 <LCD_fillTriangle+0xe4>
	      a = x2;
 8001250:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001254:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8001256:	e008      	b.n	800126a <LCD_fillTriangle+0xf6>
	    else if (x2 > b)
 8001258:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	; 0x4c
 800125c:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8001260:	429a      	cmp	r2, r3
 8001262:	dd02      	ble.n	800126a <LCD_fillTriangle+0xf6>
	      b = x2;
 8001264:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001268:	87bb      	strh	r3, [r7, #60]	; 0x3c
	    LCD_writeFastHLine(spi, a, y0, b - a + 1, color);
 800126a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800126c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	b29b      	uxth	r3, r3
 8001272:	3301      	adds	r3, #1
 8001274:	b29b      	uxth	r3, r3
 8001276:	b218      	sxth	r0, r3
 8001278:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800127c:	f9b7 103e 	ldrsh.w	r1, [r7, #62]	; 0x3e
 8001280:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001284:	9300      	str	r3, [sp, #0]
 8001286:	4603      	mov	r3, r0
 8001288:	68f8      	ldr	r0, [r7, #12]
 800128a:	f7ff ff4e 	bl	800112a <LCD_writeFastHLine>
	    return;
 800128e:	e0de      	b.n	800144e <LCD_fillTriangle+0x2da>
	  }

	  int16_t dx01 = x1 - x0, dy01 = y1 - y0, dx02 = x2 - x0, dy02 = y2 - y0,
 8001290:	88fa      	ldrh	r2, [r7, #6]
 8001292:	897b      	ldrh	r3, [r7, #10]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	b29b      	uxth	r3, r3
 8001298:	847b      	strh	r3, [r7, #34]	; 0x22
 800129a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800129e:	893b      	ldrh	r3, [r7, #8]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	843b      	strh	r3, [r7, #32]
 80012a6:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80012aa:	897b      	ldrh	r3, [r7, #10]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	83fb      	strh	r3, [r7, #30]
 80012b2:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80012b6:	893b      	ldrh	r3, [r7, #8]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	83bb      	strh	r3, [r7, #28]
	          dx12 = x2 - x1, dy12 = y2 - y1;
 80012be:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80012c2:	88fb      	ldrh	r3, [r7, #6]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	837b      	strh	r3, [r7, #26]
 80012ca:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80012ce:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	833b      	strh	r3, [r7, #24]
	  int32_t sa = 0, sb = 0;
 80012d8:	2300      	movs	r3, #0
 80012da:	637b      	str	r3, [r7, #52]	; 0x34
 80012dc:	2300      	movs	r3, #0
 80012de:	633b      	str	r3, [r7, #48]	; 0x30
	  // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
	  // is included here (and second loop will be skipped, avoiding a /0
	  // error there), otherwise scanline y1 is skipped here and handled
	  // in the second loop...which also avoids a /0 error here if y0=y1
	  // (flat-topped triangle).
	  if (y1 == y2)
 80012e0:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 80012e4:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d103      	bne.n	80012f4 <LCD_fillTriangle+0x180>
	    last = y1; // Include y1 scanline
 80012ec:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80012f0:	873b      	strh	r3, [r7, #56]	; 0x38
 80012f2:	e004      	b.n	80012fe <LCD_fillTriangle+0x18a>
	  else
	    last = y1 - 1; // Skip it
 80012f4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80012f8:	3b01      	subs	r3, #1
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	873b      	strh	r3, [r7, #56]	; 0x38

	  for (y = y0; y <= last; y++) {
 80012fe:	893b      	ldrh	r3, [r7, #8]
 8001300:	877b      	strh	r3, [r7, #58]	; 0x3a
 8001302:	e041      	b.n	8001388 <LCD_fillTriangle+0x214>
	    a = x0 + sa / dy01;
 8001304:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001308:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800130a:	fb92 f3f3 	sdiv	r3, r2, r3
 800130e:	b29a      	uxth	r2, r3
 8001310:	897b      	ldrh	r3, [r7, #10]
 8001312:	4413      	add	r3, r2
 8001314:	b29b      	uxth	r3, r3
 8001316:	87fb      	strh	r3, [r7, #62]	; 0x3e
	    b = x0 + sb / dy02;
 8001318:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800131c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800131e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001322:	b29a      	uxth	r2, r3
 8001324:	897b      	ldrh	r3, [r7, #10]
 8001326:	4413      	add	r3, r2
 8001328:	b29b      	uxth	r3, r3
 800132a:	87bb      	strh	r3, [r7, #60]	; 0x3c
	    sa += dx01;
 800132c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001330:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001332:	4413      	add	r3, r2
 8001334:	637b      	str	r3, [r7, #52]	; 0x34
	    sb += dx02;
 8001336:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800133a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800133c:	4413      	add	r3, r2
 800133e:	633b      	str	r3, [r7, #48]	; 0x30
	    /* longhand:
	    a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
	    b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
	    */
	    if (a > b)
 8001340:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	; 0x3e
 8001344:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8001348:	429a      	cmp	r2, r3
 800134a:	dd05      	ble.n	8001358 <LCD_fillTriangle+0x1e4>
	      _swap_int16_t(a, b);
 800134c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800134e:	82bb      	strh	r3, [r7, #20]
 8001350:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001352:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8001354:	8abb      	ldrh	r3, [r7, #20]
 8001356:	87bb      	strh	r3, [r7, #60]	; 0x3c
	    LCD_writeFastHLine(spi, a, y, b - a + 1, color);
 8001358:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800135a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	b29b      	uxth	r3, r3
 8001360:	3301      	adds	r3, #1
 8001362:	b29b      	uxth	r3, r3
 8001364:	b218      	sxth	r0, r3
 8001366:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 800136a:	f9b7 103e 	ldrsh.w	r1, [r7, #62]	; 0x3e
 800136e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	4603      	mov	r3, r0
 8001376:	68f8      	ldr	r0, [r7, #12]
 8001378:	f7ff fed7 	bl	800112a <LCD_writeFastHLine>
	  for (y = y0; y <= last; y++) {
 800137c:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8001380:	b29b      	uxth	r3, r3
 8001382:	3301      	adds	r3, #1
 8001384:	b29b      	uxth	r3, r3
 8001386:	877b      	strh	r3, [r7, #58]	; 0x3a
 8001388:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 800138c:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8001390:	429a      	cmp	r2, r3
 8001392:	ddb7      	ble.n	8001304 <LCD_fillTriangle+0x190>
	  }

	  // For lower part of triangle, find scanline crossings for segments
	  // 0-2 and 1-2.  This loop is skipped if y1=y2.
	  sa = (int32_t)dx12 * (y - y1);
 8001394:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001398:	f9b7 103a 	ldrsh.w	r1, [r7, #58]	; 0x3a
 800139c:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 80013a0:	1a8a      	subs	r2, r1, r2
 80013a2:	fb02 f303 	mul.w	r3, r2, r3
 80013a6:	637b      	str	r3, [r7, #52]	; 0x34
	  sb = (int32_t)dx02 * (y - y0);
 80013a8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013ac:	f9b7 103a 	ldrsh.w	r1, [r7, #58]	; 0x3a
 80013b0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80013b4:	1a8a      	subs	r2, r1, r2
 80013b6:	fb02 f303 	mul.w	r3, r2, r3
 80013ba:	633b      	str	r3, [r7, #48]	; 0x30
	  for (; y <= y2; y++) {
 80013bc:	e041      	b.n	8001442 <LCD_fillTriangle+0x2ce>
	    a = x1 + sa / dy12;
 80013be:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80013c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80013c8:	b29a      	uxth	r2, r3
 80013ca:	88fb      	ldrh	r3, [r7, #6]
 80013cc:	4413      	add	r3, r2
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	87fb      	strh	r3, [r7, #62]	; 0x3e
	    b = x0 + sb / dy02;
 80013d2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80013d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80013dc:	b29a      	uxth	r2, r3
 80013de:	897b      	ldrh	r3, [r7, #10]
 80013e0:	4413      	add	r3, r2
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	87bb      	strh	r3, [r7, #60]	; 0x3c
	    sa += dx12;
 80013e6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80013ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80013ec:	4413      	add	r3, r2
 80013ee:	637b      	str	r3, [r7, #52]	; 0x34
	    sb += dx02;
 80013f0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013f6:	4413      	add	r3, r2
 80013f8:	633b      	str	r3, [r7, #48]	; 0x30
	    /* longhand:
	    a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
	    b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
	    */
	    if (a > b)
 80013fa:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	; 0x3e
 80013fe:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8001402:	429a      	cmp	r2, r3
 8001404:	dd05      	ble.n	8001412 <LCD_fillTriangle+0x29e>
	      _swap_int16_t(a, b);
 8001406:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001408:	82fb      	strh	r3, [r7, #22]
 800140a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800140c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800140e:	8afb      	ldrh	r3, [r7, #22]
 8001410:	87bb      	strh	r3, [r7, #60]	; 0x3c
	    LCD_writeFastHLine(spi, a, y, b - a + 1, color);
 8001412:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8001414:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	b29b      	uxth	r3, r3
 800141a:	3301      	adds	r3, #1
 800141c:	b29b      	uxth	r3, r3
 800141e:	b218      	sxth	r0, r3
 8001420:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 8001424:	f9b7 103e 	ldrsh.w	r1, [r7, #62]	; 0x3e
 8001428:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800142c:	9300      	str	r3, [sp, #0]
 800142e:	4603      	mov	r3, r0
 8001430:	68f8      	ldr	r0, [r7, #12]
 8001432:	f7ff fe7a 	bl	800112a <LCD_writeFastHLine>
	  for (; y <= y2; y++) {
 8001436:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800143a:	b29b      	uxth	r3, r3
 800143c:	3301      	adds	r3, #1
 800143e:	b29b      	uxth	r3, r3
 8001440:	877b      	strh	r3, [r7, #58]	; 0x3a
 8001442:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 8001446:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800144a:	429a      	cmp	r2, r3
 800144c:	ddb7      	ble.n	80013be <LCD_fillTriangle+0x24a>
	  }
}
 800144e:	3740      	adds	r7, #64	; 0x40
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <LCD_drawBattery>:

//homemade functions for TADAMHASPEV, move to different file
void LCD_drawBattery(SPI_HandleTypeDef* spi, int16_t x, int16_t y, uint16_t color, uint32_t size) {
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af02      	add	r7, sp, #8
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	4608      	mov	r0, r1
 800145e:	4611      	mov	r1, r2
 8001460:	461a      	mov	r2, r3
 8001462:	4603      	mov	r3, r0
 8001464:	817b      	strh	r3, [r7, #10]
 8001466:	460b      	mov	r3, r1
 8001468:	813b      	strh	r3, [r7, #8]
 800146a:	4613      	mov	r3, r2
 800146c:	80fb      	strh	r3, [r7, #6]
	//make battery thicker?
	//left
	if(!LCD_setAddrWindow(spi, x, y + size, 1, 22*size)) return;
 800146e:	8979      	ldrh	r1, [r7, #10]
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	b29a      	uxth	r2, r3
 8001474:	893b      	ldrh	r3, [r7, #8]
 8001476:	4413      	add	r3, r2
 8001478:	b29a      	uxth	r2, r3
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	b29b      	uxth	r3, r3
 800147e:	4618      	mov	r0, r3
 8001480:	0080      	lsls	r0, r0, #2
 8001482:	4418      	add	r0, r3
 8001484:	0040      	lsls	r0, r0, #1
 8001486:	4403      	add	r3, r0
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	b29b      	uxth	r3, r3
 800148c:	9300      	str	r3, [sp, #0]
 800148e:	2301      	movs	r3, #1
 8001490:	68f8      	ldr	r0, [r7, #12]
 8001492:	f7ff fb5b 	bl	8000b4c <LCD_setAddrWindow>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	f000 80e3 	beq.w	8001664 <LCD_drawBattery+0x210>
	if (!LCD_pushColorCopy(spi, color, 22*size)) return;
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	2216      	movs	r2, #22
 80014a2:	fb03 f202 	mul.w	r2, r3, r2
 80014a6:	88fb      	ldrh	r3, [r7, #6]
 80014a8:	4619      	mov	r1, r3
 80014aa:	68f8      	ldr	r0, [r7, #12]
 80014ac:	f7ff fbf3 	bl	8000c96 <LCD_pushColorCopy>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	f000 80d8 	beq.w	8001668 <LCD_drawBattery+0x214>

	//right
	if(!LCD_setAddrWindow(spi, x + 10*size, y + size, 1, 22*size)) return;
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	461a      	mov	r2, r3
 80014be:	0092      	lsls	r2, r2, #2
 80014c0:	4413      	add	r3, r2
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	b29a      	uxth	r2, r3
 80014c6:	897b      	ldrh	r3, [r7, #10]
 80014c8:	4413      	add	r3, r2
 80014ca:	b299      	uxth	r1, r3
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	b29a      	uxth	r2, r3
 80014d0:	893b      	ldrh	r3, [r7, #8]
 80014d2:	4413      	add	r3, r2
 80014d4:	b29a      	uxth	r2, r3
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	b29b      	uxth	r3, r3
 80014da:	4618      	mov	r0, r3
 80014dc:	0080      	lsls	r0, r0, #2
 80014de:	4418      	add	r0, r3
 80014e0:	0040      	lsls	r0, r0, #1
 80014e2:	4403      	add	r3, r0
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	2301      	movs	r3, #1
 80014ec:	68f8      	ldr	r0, [r7, #12]
 80014ee:	f7ff fb2d 	bl	8000b4c <LCD_setAddrWindow>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	f000 80b9 	beq.w	800166c <LCD_drawBattery+0x218>
	if (!LCD_pushColorCopy(spi, color, 22*size)) return;
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	2216      	movs	r2, #22
 80014fe:	fb03 f202 	mul.w	r2, r3, r2
 8001502:	88fb      	ldrh	r3, [r7, #6]
 8001504:	4619      	mov	r1, r3
 8001506:	68f8      	ldr	r0, [r7, #12]
 8001508:	f7ff fbc5 	bl	8000c96 <LCD_pushColorCopy>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	f000 80ae 	beq.w	8001670 <LCD_drawBattery+0x21c>

	//top
	if(!LCD_setAddrWindow(spi, x, y + size, 10*size, 1)) return;
 8001514:	8979      	ldrh	r1, [r7, #10]
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	b29a      	uxth	r2, r3
 800151a:	893b      	ldrh	r3, [r7, #8]
 800151c:	4413      	add	r3, r2
 800151e:	b29a      	uxth	r2, r3
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	b29b      	uxth	r3, r3
 8001524:	4618      	mov	r0, r3
 8001526:	0080      	lsls	r0, r0, #2
 8001528:	4403      	add	r3, r0
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	b29b      	uxth	r3, r3
 800152e:	2001      	movs	r0, #1
 8001530:	9000      	str	r0, [sp, #0]
 8001532:	68f8      	ldr	r0, [r7, #12]
 8001534:	f7ff fb0a 	bl	8000b4c <LCD_setAddrWindow>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	f000 809a 	beq.w	8001674 <LCD_drawBattery+0x220>
	if (!LCD_pushColorCopy(spi, color, 10*size)) return;
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4613      	mov	r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	4413      	add	r3, r2
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	461a      	mov	r2, r3
 800154c:	88fb      	ldrh	r3, [r7, #6]
 800154e:	4619      	mov	r1, r3
 8001550:	68f8      	ldr	r0, [r7, #12]
 8001552:	f7ff fba0 	bl	8000c96 <LCD_pushColorCopy>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	f000 808d 	beq.w	8001678 <LCD_drawBattery+0x224>

	//bottom
	if(!LCD_setAddrWindow(spi, x, y + 23*size, 10*size, 1)) return;
 800155e:	8979      	ldrh	r1, [r7, #10]
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	b29b      	uxth	r3, r3
 8001564:	461a      	mov	r2, r3
 8001566:	0052      	lsls	r2, r2, #1
 8001568:	441a      	add	r2, r3
 800156a:	00d2      	lsls	r2, r2, #3
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	b29a      	uxth	r2, r3
 8001570:	893b      	ldrh	r3, [r7, #8]
 8001572:	4413      	add	r3, r2
 8001574:	b29a      	uxth	r2, r3
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	b29b      	uxth	r3, r3
 800157a:	4618      	mov	r0, r3
 800157c:	0080      	lsls	r0, r0, #2
 800157e:	4403      	add	r3, r0
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	b29b      	uxth	r3, r3
 8001584:	2001      	movs	r0, #1
 8001586:	9000      	str	r0, [sp, #0]
 8001588:	68f8      	ldr	r0, [r7, #12]
 800158a:	f7ff fadf 	bl	8000b4c <LCD_setAddrWindow>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d073      	beq.n	800167c <LCD_drawBattery+0x228>
	if (!LCD_pushColorCopy(spi, color, 10*size)) return;
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4613      	mov	r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	4413      	add	r3, r2
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	461a      	mov	r2, r3
 80015a0:	88fb      	ldrh	r3, [r7, #6]
 80015a2:	4619      	mov	r1, r3
 80015a4:	68f8      	ldr	r0, [r7, #12]
 80015a6:	f7ff fb76 	bl	8000c96 <LCD_pushColorCopy>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d067      	beq.n	8001680 <LCD_drawBattery+0x22c>

	//lil cap
	if(!LCD_setAddrWindow(spi, x + 3*size, y, 4*size, 1)) return;
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	461a      	mov	r2, r3
 80015b6:	0052      	lsls	r2, r2, #1
 80015b8:	4413      	add	r3, r2
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	897b      	ldrh	r3, [r7, #10]
 80015be:	4413      	add	r3, r2
 80015c0:	b299      	uxth	r1, r3
 80015c2:	893a      	ldrh	r2, [r7, #8]
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	2001      	movs	r0, #1
 80015ce:	9000      	str	r0, [sp, #0]
 80015d0:	68f8      	ldr	r0, [r7, #12]
 80015d2:	f7ff fabb 	bl	8000b4c <LCD_setAddrWindow>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d053      	beq.n	8001684 <LCD_drawBattery+0x230>
	if (!LCD_pushColorCopy(spi, color, 4*size)) return;
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	009a      	lsls	r2, r3, #2
 80015e0:	88fb      	ldrh	r3, [r7, #6]
 80015e2:	4619      	mov	r1, r3
 80015e4:	68f8      	ldr	r0, [r7, #12]
 80015e6:	f7ff fb56 	bl	8000c96 <LCD_pushColorCopy>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d04b      	beq.n	8001688 <LCD_drawBattery+0x234>

	if(!LCD_setAddrWindow(spi, x + 3*size, y, 1, size)) return;
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	461a      	mov	r2, r3
 80015f6:	0052      	lsls	r2, r2, #1
 80015f8:	4413      	add	r3, r2
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	897b      	ldrh	r3, [r7, #10]
 80015fe:	4413      	add	r3, r2
 8001600:	b299      	uxth	r1, r3
 8001602:	893a      	ldrh	r2, [r7, #8]
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	b29b      	uxth	r3, r3
 8001608:	9300      	str	r3, [sp, #0]
 800160a:	2301      	movs	r3, #1
 800160c:	68f8      	ldr	r0, [r7, #12]
 800160e:	f7ff fa9d 	bl	8000b4c <LCD_setAddrWindow>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d039      	beq.n	800168c <LCD_drawBattery+0x238>
	if (!LCD_pushColorCopy(spi, color, size)) return;
 8001618:	88fb      	ldrh	r3, [r7, #6]
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4619      	mov	r1, r3
 800161e:	68f8      	ldr	r0, [r7, #12]
 8001620:	f7ff fb39 	bl	8000c96 <LCD_pushColorCopy>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d032      	beq.n	8001690 <LCD_drawBattery+0x23c>

	if(!LCD_setAddrWindow(spi, x + 3*size + 4*size, y, 1, size)) return;
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	b29b      	uxth	r3, r3
 800162e:	461a      	mov	r2, r3
 8001630:	00d2      	lsls	r2, r2, #3
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	b29a      	uxth	r2, r3
 8001636:	897b      	ldrh	r3, [r7, #10]
 8001638:	4413      	add	r3, r2
 800163a:	b299      	uxth	r1, r3
 800163c:	893a      	ldrh	r2, [r7, #8]
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	b29b      	uxth	r3, r3
 8001642:	9300      	str	r3, [sp, #0]
 8001644:	2301      	movs	r3, #1
 8001646:	68f8      	ldr	r0, [r7, #12]
 8001648:	f7ff fa80 	bl	8000b4c <LCD_setAddrWindow>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d020      	beq.n	8001694 <LCD_drawBattery+0x240>
	if (!LCD_pushColorCopy(spi, color, size)) return;
 8001652:	88fb      	ldrh	r3, [r7, #6]
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	4619      	mov	r1, r3
 8001658:	68f8      	ldr	r0, [r7, #12]
 800165a:	f7ff fb1c 	bl	8000c96 <LCD_pushColorCopy>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
	return;
 8001662:	e018      	b.n	8001696 <LCD_drawBattery+0x242>
	if(!LCD_setAddrWindow(spi, x, y + size, 1, 22*size)) return;
 8001664:	bf00      	nop
 8001666:	e016      	b.n	8001696 <LCD_drawBattery+0x242>
	if (!LCD_pushColorCopy(spi, color, 22*size)) return;
 8001668:	bf00      	nop
 800166a:	e014      	b.n	8001696 <LCD_drawBattery+0x242>
	if(!LCD_setAddrWindow(spi, x + 10*size, y + size, 1, 22*size)) return;
 800166c:	bf00      	nop
 800166e:	e012      	b.n	8001696 <LCD_drawBattery+0x242>
	if (!LCD_pushColorCopy(spi, color, 22*size)) return;
 8001670:	bf00      	nop
 8001672:	e010      	b.n	8001696 <LCD_drawBattery+0x242>
	if(!LCD_setAddrWindow(spi, x, y + size, 10*size, 1)) return;
 8001674:	bf00      	nop
 8001676:	e00e      	b.n	8001696 <LCD_drawBattery+0x242>
	if (!LCD_pushColorCopy(spi, color, 10*size)) return;
 8001678:	bf00      	nop
 800167a:	e00c      	b.n	8001696 <LCD_drawBattery+0x242>
	if(!LCD_setAddrWindow(spi, x, y + 23*size, 10*size, 1)) return;
 800167c:	bf00      	nop
 800167e:	e00a      	b.n	8001696 <LCD_drawBattery+0x242>
	if (!LCD_pushColorCopy(spi, color, 10*size)) return;
 8001680:	bf00      	nop
 8001682:	e008      	b.n	8001696 <LCD_drawBattery+0x242>
	if(!LCD_setAddrWindow(spi, x + 3*size, y, 4*size, 1)) return;
 8001684:	bf00      	nop
 8001686:	e006      	b.n	8001696 <LCD_drawBattery+0x242>
	if (!LCD_pushColorCopy(spi, color, 4*size)) return;
 8001688:	bf00      	nop
 800168a:	e004      	b.n	8001696 <LCD_drawBattery+0x242>
	if(!LCD_setAddrWindow(spi, x + 3*size, y, 1, size)) return;
 800168c:	bf00      	nop
 800168e:	e002      	b.n	8001696 <LCD_drawBattery+0x242>
	if (!LCD_pushColorCopy(spi, color, size)) return;
 8001690:	bf00      	nop
 8001692:	e000      	b.n	8001696 <LCD_drawBattery+0x242>
	if(!LCD_setAddrWindow(spi, x + 3*size + 4*size, y, 1, size)) return;
 8001694:	bf00      	nop
}
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <LCD_drawFrame>:

void LCD_drawFrame(SPI_HandleTypeDef* spi, uint16_t color) {
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af02      	add	r7, sp, #8
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	807b      	strh	r3, [r7, #2]
	//rows
	LCD_writeLine(spi,0,80,360,80,HX8357_BLACK);
 80016a8:	2300      	movs	r3, #0
 80016aa:	9301      	str	r3, [sp, #4]
 80016ac:	2350      	movs	r3, #80	; 0x50
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80016b4:	2250      	movs	r2, #80	; 0x50
 80016b6:	2100      	movs	r1, #0
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f7ff fca3 	bl	8001004 <LCD_writeLine>
	LCD_writeLine(spi,0,160,360,160,HX8357_BLACK);
 80016be:	2300      	movs	r3, #0
 80016c0:	9301      	str	r3, [sp, #4]
 80016c2:	23a0      	movs	r3, #160	; 0xa0
 80016c4:	9300      	str	r3, [sp, #0]
 80016c6:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80016ca:	22a0      	movs	r2, #160	; 0xa0
 80016cc:	2100      	movs	r1, #0
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff fc98 	bl	8001004 <LCD_writeLine>
	LCD_writeLine(spi,0,240,360,240,HX8357_BLACK);
 80016d4:	2300      	movs	r3, #0
 80016d6:	9301      	str	r3, [sp, #4]
 80016d8:	23f0      	movs	r3, #240	; 0xf0
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80016e0:	22f0      	movs	r2, #240	; 0xf0
 80016e2:	2100      	movs	r1, #0
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff fc8d 	bl	8001004 <LCD_writeLine>

	//column
	LCD_writeLine(spi,360,0,360,320,HX8357_BLACK);
 80016ea:	2300      	movs	r3, #0
 80016ec:	9301      	str	r3, [sp, #4]
 80016ee:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80016f8:	2200      	movs	r2, #0
 80016fa:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7ff fc80 	bl	8001004 <LCD_writeLine>
	return;
 8001704:	bf00      	nop
}
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <LCD_fillBattery>:

void LCD_fillBattery(SPI_HandleTypeDef* spi, int16_t x, int16_t y, uint32_t size, int level) {
 800170c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001710:	b088      	sub	sp, #32
 8001712:	af02      	add	r7, sp, #8
 8001714:	60f8      	str	r0, [r7, #12]
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	460b      	mov	r3, r1
 800171a:	817b      	strh	r3, [r7, #10]
 800171c:	4613      	mov	r3, r2
 800171e:	813b      	strh	r3, [r7, #8]
	LCD_writePixels(spi, HX8357_WHITE, x + 3, ((y + size) + 3), 10*size - 6, (22*size - 6));
 8001720:	897b      	ldrh	r3, [r7, #10]
 8001722:	3303      	adds	r3, #3
 8001724:	b29b      	uxth	r3, r3
 8001726:	b219      	sxth	r1, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	b29a      	uxth	r2, r3
 800172c:	893b      	ldrh	r3, [r7, #8]
 800172e:	4413      	add	r3, r2
 8001730:	b29b      	uxth	r3, r3
 8001732:	3303      	adds	r3, #3
 8001734:	b29b      	uxth	r3, r3
 8001736:	b218      	sxth	r0, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	b29b      	uxth	r3, r3
 800173c:	461a      	mov	r2, r3
 800173e:	0092      	lsls	r2, r2, #2
 8001740:	4413      	add	r3, r2
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	b29b      	uxth	r3, r3
 8001746:	3b06      	subs	r3, #6
 8001748:	b29b      	uxth	r3, r3
 800174a:	b21a      	sxth	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	b29b      	uxth	r3, r3
 8001750:	461c      	mov	r4, r3
 8001752:	00a4      	lsls	r4, r4, #2
 8001754:	441c      	add	r4, r3
 8001756:	0064      	lsls	r4, r4, #1
 8001758:	4423      	add	r3, r4
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	b29b      	uxth	r3, r3
 800175e:	3b06      	subs	r3, #6
 8001760:	b29b      	uxth	r3, r3
 8001762:	b21b      	sxth	r3, r3
 8001764:	9301      	str	r3, [sp, #4]
 8001766:	9200      	str	r2, [sp, #0]
 8001768:	4603      	mov	r3, r0
 800176a:	460a      	mov	r2, r1
 800176c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001770:	68f8      	ldr	r0, [r7, #12]
 8001772:	f7ff fafd 	bl	8000d70 <LCD_writePixels>
	int offset = 22*size - (22*size)*(level/100.0);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2216      	movs	r2, #22
 800177a:	fb02 f303 	mul.w	r3, r2, r3
 800177e:	4618      	mov	r0, r3
 8001780:	f7fe fe68 	bl	8000454 <__aeabi_ui2d>
 8001784:	4604      	mov	r4, r0
 8001786:	460d      	mov	r5, r1
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2216      	movs	r2, #22
 800178c:	fb02 f303 	mul.w	r3, r2, r3
 8001790:	4618      	mov	r0, r3
 8001792:	f7fe fe5f 	bl	8000454 <__aeabi_ui2d>
 8001796:	4680      	mov	r8, r0
 8001798:	4689      	mov	r9, r1
 800179a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800179c:	f7fe fe6a 	bl	8000474 <__aeabi_i2d>
 80017a0:	f04f 0200 	mov.w	r2, #0
 80017a4:	4b60      	ldr	r3, [pc, #384]	; (8001928 <LCD_fillBattery+0x21c>)
 80017a6:	f7fe fff9 	bl	800079c <__aeabi_ddiv>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	4640      	mov	r0, r8
 80017b0:	4649      	mov	r1, r9
 80017b2:	f7fe fec9 	bl	8000548 <__aeabi_dmul>
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	4620      	mov	r0, r4
 80017bc:	4629      	mov	r1, r5
 80017be:	f7fe fd0b 	bl	80001d8 <__aeabi_dsub>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4610      	mov	r0, r2
 80017c8:	4619      	mov	r1, r3
 80017ca:	f7ff f8cf 	bl	800096c <__aeabi_d2iz>
 80017ce:	4603      	mov	r3, r0
 80017d0:	617b      	str	r3, [r7, #20]
	if (level > 0) {
 80017d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f340 80a1 	ble.w	800191c <LCD_fillBattery+0x210>
		if (level < 20) {
 80017da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017dc:	2b13      	cmp	r3, #19
 80017de:	dc33      	bgt.n	8001848 <LCD_fillBattery+0x13c>
			LCD_writePixels(spi, HX8357_RED, x + 3, ((y + size) + 3) + offset, 10*size - 6, (22*size - 6) - offset);
 80017e0:	897b      	ldrh	r3, [r7, #10]
 80017e2:	3303      	adds	r3, #3
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	b218      	sxth	r0, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	893b      	ldrh	r3, [r7, #8]
 80017ee:	4413      	add	r3, r2
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	4413      	add	r3, r2
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	3303      	adds	r3, #3
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	b21c      	sxth	r4, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	b29b      	uxth	r3, r3
 8001804:	461a      	mov	r2, r3
 8001806:	0092      	lsls	r2, r2, #2
 8001808:	4413      	add	r3, r2
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	b29b      	uxth	r3, r3
 800180e:	3b06      	subs	r3, #6
 8001810:	b29b      	uxth	r3, r3
 8001812:	b21a      	sxth	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	b29b      	uxth	r3, r3
 8001818:	4619      	mov	r1, r3
 800181a:	0089      	lsls	r1, r1, #2
 800181c:	4419      	add	r1, r3
 800181e:	0049      	lsls	r1, r1, #1
 8001820:	440b      	add	r3, r1
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	b299      	uxth	r1, r3
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	b29b      	uxth	r3, r3
 800182a:	1acb      	subs	r3, r1, r3
 800182c:	b29b      	uxth	r3, r3
 800182e:	3b06      	subs	r3, #6
 8001830:	b29b      	uxth	r3, r3
 8001832:	b21b      	sxth	r3, r3
 8001834:	9301      	str	r3, [sp, #4]
 8001836:	9200      	str	r2, [sp, #0]
 8001838:	4623      	mov	r3, r4
 800183a:	4602      	mov	r2, r0
 800183c:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8001840:	68f8      	ldr	r0, [r7, #12]
 8001842:	f7ff fa95 	bl	8000d70 <LCD_writePixels>
			LCD_writePixels(spi, HX8357_GREEN, x + 3, ((y + size) + 3) + offset, 10*size - 6, (22*size - 6) - offset);
		}
	}
	//level = 100 --> y offset 0
	//level = 0 --> y offset 22*size
}
 8001846:	e069      	b.n	800191c <LCD_fillBattery+0x210>
		} else if (level < 50) {
 8001848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800184a:	2b31      	cmp	r3, #49	; 0x31
 800184c:	dc33      	bgt.n	80018b6 <LCD_fillBattery+0x1aa>
			LCD_writePixels(spi, HX8357_YELLOW, x + 3, ((y + size) + 3) + offset, 10*size - 6, (22*size - 6) - offset);
 800184e:	897b      	ldrh	r3, [r7, #10]
 8001850:	3303      	adds	r3, #3
 8001852:	b29b      	uxth	r3, r3
 8001854:	b218      	sxth	r0, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	b29a      	uxth	r2, r3
 800185a:	893b      	ldrh	r3, [r7, #8]
 800185c:	4413      	add	r3, r2
 800185e:	b29a      	uxth	r2, r3
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	b29b      	uxth	r3, r3
 8001864:	4413      	add	r3, r2
 8001866:	b29b      	uxth	r3, r3
 8001868:	3303      	adds	r3, #3
 800186a:	b29b      	uxth	r3, r3
 800186c:	b21c      	sxth	r4, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	b29b      	uxth	r3, r3
 8001872:	461a      	mov	r2, r3
 8001874:	0092      	lsls	r2, r2, #2
 8001876:	4413      	add	r3, r2
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	b29b      	uxth	r3, r3
 800187c:	3b06      	subs	r3, #6
 800187e:	b29b      	uxth	r3, r3
 8001880:	b21a      	sxth	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	b29b      	uxth	r3, r3
 8001886:	4619      	mov	r1, r3
 8001888:	0089      	lsls	r1, r1, #2
 800188a:	4419      	add	r1, r3
 800188c:	0049      	lsls	r1, r1, #1
 800188e:	440b      	add	r3, r1
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	b299      	uxth	r1, r3
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	b29b      	uxth	r3, r3
 8001898:	1acb      	subs	r3, r1, r3
 800189a:	b29b      	uxth	r3, r3
 800189c:	3b06      	subs	r3, #6
 800189e:	b29b      	uxth	r3, r3
 80018a0:	b21b      	sxth	r3, r3
 80018a2:	9301      	str	r3, [sp, #4]
 80018a4:	9200      	str	r2, [sp, #0]
 80018a6:	4623      	mov	r3, r4
 80018a8:	4602      	mov	r2, r0
 80018aa:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 80018ae:	68f8      	ldr	r0, [r7, #12]
 80018b0:	f7ff fa5e 	bl	8000d70 <LCD_writePixels>
}
 80018b4:	e032      	b.n	800191c <LCD_fillBattery+0x210>
			LCD_writePixels(spi, HX8357_GREEN, x + 3, ((y + size) + 3) + offset, 10*size - 6, (22*size - 6) - offset);
 80018b6:	897b      	ldrh	r3, [r7, #10]
 80018b8:	3303      	adds	r3, #3
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	b218      	sxth	r0, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	893b      	ldrh	r3, [r7, #8]
 80018c4:	4413      	add	r3, r2
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	4413      	add	r3, r2
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	3303      	adds	r3, #3
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	b21c      	sxth	r4, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	b29b      	uxth	r3, r3
 80018da:	461a      	mov	r2, r3
 80018dc:	0092      	lsls	r2, r2, #2
 80018de:	4413      	add	r3, r2
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	3b06      	subs	r3, #6
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	b21a      	sxth	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	4619      	mov	r1, r3
 80018f0:	0089      	lsls	r1, r1, #2
 80018f2:	4419      	add	r1, r3
 80018f4:	0049      	lsls	r1, r1, #1
 80018f6:	440b      	add	r3, r1
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	b299      	uxth	r1, r3
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	b29b      	uxth	r3, r3
 8001900:	1acb      	subs	r3, r1, r3
 8001902:	b29b      	uxth	r3, r3
 8001904:	3b06      	subs	r3, #6
 8001906:	b29b      	uxth	r3, r3
 8001908:	b21b      	sxth	r3, r3
 800190a:	9301      	str	r3, [sp, #4]
 800190c:	9200      	str	r2, [sp, #0]
 800190e:	4623      	mov	r3, r4
 8001910:	4602      	mov	r2, r0
 8001912:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8001916:	68f8      	ldr	r0, [r7, #12]
 8001918:	f7ff fa2a 	bl	8000d70 <LCD_writePixels>
}
 800191c:	bf00      	nop
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001926:	bf00      	nop
 8001928:	40590000 	.word	0x40590000

0800192c <LCD_updateVals>:

void LCD_updateVals(SPI_HandleTypeDef* spi, int buf[], uint16_t color) {
 800192c:	b580      	push	{r7, lr}
 800192e:	b08e      	sub	sp, #56	; 0x38
 8001930:	af04      	add	r7, sp, #16
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	4613      	mov	r3, r2
 8001938:	80fb      	strh	r3, [r7, #6]
	//buf[0:1] accel, buf[2:3] temp, buf[4:5] power
	int accel = (buf[0] << 4) | buf[1];
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	011a      	lsls	r2, r3, #4
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	3304      	adds	r3, #4
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4313      	orrs	r3, r2
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
	int temp = (buf[2] << 4) | buf[3];
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	3308      	adds	r3, #8
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	011a      	lsls	r2, r3, #4
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	330c      	adds	r3, #12
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4313      	orrs	r3, r2
 800195a:	623b      	str	r3, [r7, #32]
	int power = (buf[4] << 4) | buf[5];
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	3310      	adds	r3, #16
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	011a      	lsls	r2, r3, #4
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	3314      	adds	r3, #20
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4313      	orrs	r3, r2
 800196c:	61fb      	str	r3, [r7, #28]
	char var1[3];
	char var2[3];
	char var3[3];
	itoa(accel,var1,10);
 800196e:	f107 0318 	add.w	r3, r7, #24
 8001972:	220a      	movs	r2, #10
 8001974:	4619      	mov	r1, r3
 8001976:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001978:	f003 fd5c 	bl	8005434 <itoa>
	itoa(temp,var2,10);
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	220a      	movs	r2, #10
 8001982:	4619      	mov	r1, r3
 8001984:	6a38      	ldr	r0, [r7, #32]
 8001986:	f003 fd55 	bl	8005434 <itoa>
	itoa(power,var3,10);
 800198a:	f107 0310 	add.w	r3, r7, #16
 800198e:	220a      	movs	r2, #10
 8001990:	4619      	mov	r1, r3
 8001992:	69f8      	ldr	r0, [r7, #28]
 8001994:	f003 fd4e 	bl	8005434 <itoa>
	LCD_drawString(spi,146,30 + 80*1,var1,3,color,4);
 8001998:	f107 0218 	add.w	r2, r7, #24
 800199c:	2304      	movs	r3, #4
 800199e:	9302      	str	r3, [sp, #8]
 80019a0:	88fb      	ldrh	r3, [r7, #6]
 80019a2:	9301      	str	r3, [sp, #4]
 80019a4:	2303      	movs	r3, #3
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	4613      	mov	r3, r2
 80019aa:	226e      	movs	r2, #110	; 0x6e
 80019ac:	2192      	movs	r1, #146	; 0x92
 80019ae:	68f8      	ldr	r0, [r7, #12]
 80019b0:	f7ff faf2 	bl	8000f98 <LCD_drawString>
	LCD_drawString(spi,146,30 + 80*2,var2,3,color,4);
 80019b4:	f107 0214 	add.w	r2, r7, #20
 80019b8:	2304      	movs	r3, #4
 80019ba:	9302      	str	r3, [sp, #8]
 80019bc:	88fb      	ldrh	r3, [r7, #6]
 80019be:	9301      	str	r3, [sp, #4]
 80019c0:	2303      	movs	r3, #3
 80019c2:	9300      	str	r3, [sp, #0]
 80019c4:	4613      	mov	r3, r2
 80019c6:	22be      	movs	r2, #190	; 0xbe
 80019c8:	2192      	movs	r1, #146	; 0x92
 80019ca:	68f8      	ldr	r0, [r7, #12]
 80019cc:	f7ff fae4 	bl	8000f98 <LCD_drawString>
	LCD_drawString(spi,146,30 + 80*3,var3,3,color,4);
 80019d0:	f107 0210 	add.w	r2, r7, #16
 80019d4:	2304      	movs	r3, #4
 80019d6:	9302      	str	r3, [sp, #8]
 80019d8:	88fb      	ldrh	r3, [r7, #6]
 80019da:	9301      	str	r3, [sp, #4]
 80019dc:	2303      	movs	r3, #3
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	4613      	mov	r3, r2
 80019e2:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80019e6:	2192      	movs	r1, #146	; 0x92
 80019e8:	68f8      	ldr	r0, [r7, #12]
 80019ea:	f7ff fad5 	bl	8000f98 <LCD_drawString>
}
 80019ee:	bf00      	nop
 80019f0:	3728      	adds	r7, #40	; 0x28
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <LCD_warnings>:

void LCD_warnings(SPI_HandleTypeDef* spi, int temp, int level, int *warning) {
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b088      	sub	sp, #32
 80019fc:	af04      	add	r7, sp, #16
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
 8001a04:	603b      	str	r3, [r7, #0]
	if ((temp > 50 | level < 30) & *warning == 0) {
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	2b32      	cmp	r3, #50	; 0x32
 8001a0a:	bfcc      	ite	gt
 8001a0c:	2301      	movgt	r3, #1
 8001a0e:	2300      	movle	r3, #0
 8001a10:	b2da      	uxtb	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2b1d      	cmp	r3, #29
 8001a16:	bfd4      	ite	le
 8001a18:	2301      	movle	r3, #1
 8001a1a:	2300      	movgt	r3, #0
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	461a      	mov	r2, r3
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	bf0c      	ite	eq
 8001a2c:	2301      	moveq	r3, #1
 8001a2e:	2300      	movne	r3, #0
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	4013      	ands	r3, r2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d00b      	beq.n	8001a50 <LCD_warnings+0x58>
			LCD_writePixels(spi,HX8357_WHITE,0,0,359,79);
 8001a38:	234f      	movs	r3, #79	; 0x4f
 8001a3a:	9301      	str	r3, [sp, #4]
 8001a3c:	f240 1367 	movw	r3, #359	; 0x167
 8001a40:	9300      	str	r3, [sp, #0]
 8001a42:	2300      	movs	r3, #0
 8001a44:	2200      	movs	r2, #0
 8001a46:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001a4a:	68f8      	ldr	r0, [r7, #12]
 8001a4c:	f7ff f990 	bl	8000d70 <LCD_writePixels>
	}
	if (temp > 50) {
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	2b32      	cmp	r3, #50	; 0x32
 8001a54:	dd1e      	ble.n	8001a94 <LCD_warnings+0x9c>
		LCD_fillTriangle(spi,15,55,45,55,30,25,HX8357_YELLOW);
 8001a56:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001a5a:	9303      	str	r3, [sp, #12]
 8001a5c:	2319      	movs	r3, #25
 8001a5e:	9302      	str	r3, [sp, #8]
 8001a60:	231e      	movs	r3, #30
 8001a62:	9301      	str	r3, [sp, #4]
 8001a64:	2337      	movs	r3, #55	; 0x37
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	232d      	movs	r3, #45	; 0x2d
 8001a6a:	2237      	movs	r2, #55	; 0x37
 8001a6c:	210f      	movs	r1, #15
 8001a6e:	68f8      	ldr	r0, [r7, #12]
 8001a70:	f7ff fb80 	bl	8001174 <LCD_fillTriangle>
		LCD_drawString(spi,55,30 + 80*0,"HIGH TEMP",9,HX8357_RED,2);
 8001a74:	2302      	movs	r3, #2
 8001a76:	9302      	str	r3, [sp, #8]
 8001a78:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001a7c:	9301      	str	r3, [sp, #4]
 8001a7e:	2309      	movs	r3, #9
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	4b2f      	ldr	r3, [pc, #188]	; (8001b40 <LCD_warnings+0x148>)
 8001a84:	221e      	movs	r2, #30
 8001a86:	2137      	movs	r1, #55	; 0x37
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	f7ff fa85 	bl	8000f98 <LCD_drawString>
		*warning = 1;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	2201      	movs	r2, #1
 8001a92:	601a      	str	r2, [r3, #0]
	}
	if (level < 30) {
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2b1d      	cmp	r3, #29
 8001a98:	dc1e      	bgt.n	8001ad8 <LCD_warnings+0xe0>
		LCD_fillTriangle(spi,180,55,210,55,195,25,HX8357_YELLOW);
 8001a9a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001a9e:	9303      	str	r3, [sp, #12]
 8001aa0:	2319      	movs	r3, #25
 8001aa2:	9302      	str	r3, [sp, #8]
 8001aa4:	23c3      	movs	r3, #195	; 0xc3
 8001aa6:	9301      	str	r3, [sp, #4]
 8001aa8:	2337      	movs	r3, #55	; 0x37
 8001aaa:	9300      	str	r3, [sp, #0]
 8001aac:	23d2      	movs	r3, #210	; 0xd2
 8001aae:	2237      	movs	r2, #55	; 0x37
 8001ab0:	21b4      	movs	r1, #180	; 0xb4
 8001ab2:	68f8      	ldr	r0, [r7, #12]
 8001ab4:	f7ff fb5e 	bl	8001174 <LCD_fillTriangle>
		LCD_drawString(spi,220,30 + 80*0,"LOW VOLT",8,HX8357_RED,2);
 8001ab8:	2302      	movs	r3, #2
 8001aba:	9302      	str	r3, [sp, #8]
 8001abc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001ac0:	9301      	str	r3, [sp, #4]
 8001ac2:	2308      	movs	r3, #8
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	4b1f      	ldr	r3, [pc, #124]	; (8001b44 <LCD_warnings+0x14c>)
 8001ac8:	221e      	movs	r2, #30
 8001aca:	21dc      	movs	r1, #220	; 0xdc
 8001acc:	68f8      	ldr	r0, [r7, #12]
 8001ace:	f7ff fa63 	bl	8000f98 <LCD_drawString>
		*warning = 1;
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	601a      	str	r2, [r3, #0]
	}
	if (*warning == 1) {
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d12a      	bne.n	8001b36 <LCD_warnings+0x13e>
		if (temp < 50 & level > 30) {
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	2b31      	cmp	r3, #49	; 0x31
 8001ae4:	bfd4      	ite	le
 8001ae6:	2301      	movle	r3, #1
 8001ae8:	2300      	movgt	r3, #0
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b1e      	cmp	r3, #30
 8001af0:	bfcc      	ite	gt
 8001af2:	2301      	movgt	r3, #1
 8001af4:	2300      	movle	r3, #0
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	4013      	ands	r3, r2
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d01a      	beq.n	8001b36 <LCD_warnings+0x13e>
			LCD_writePixels(spi,HX8357_WHITE,0,0,359,79);
 8001b00:	234f      	movs	r3, #79	; 0x4f
 8001b02:	9301      	str	r3, [sp, #4]
 8001b04:	f240 1367 	movw	r3, #359	; 0x167
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b12:	68f8      	ldr	r0, [r7, #12]
 8001b14:	f7ff f92c 	bl	8000d70 <LCD_writePixels>
			LCD_drawString(spi,20,30 + 80*0,"TADAMHESPEV | UMSM",18,HX8357_BLACK,3);
 8001b18:	2303      	movs	r3, #3
 8001b1a:	9302      	str	r3, [sp, #8]
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	9301      	str	r3, [sp, #4]
 8001b20:	2312      	movs	r3, #18
 8001b22:	9300      	str	r3, [sp, #0]
 8001b24:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <LCD_warnings+0x150>)
 8001b26:	221e      	movs	r2, #30
 8001b28:	2114      	movs	r1, #20
 8001b2a:	68f8      	ldr	r0, [r7, #12]
 8001b2c:	f7ff fa34 	bl	8000f98 <LCD_drawString>
			*warning = 0;
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001b36:	bf00      	nop
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	0800552c 	.word	0x0800552c
 8001b44:	08005538 	.word	0x08005538
 8001b48:	08005544 	.word	0x08005544

08001b4c <LCD_updateBattery>:

void LCD_updateBattery(SPI_HandleTypeDef* spi, int level) {
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b088      	sub	sp, #32
 8001b50:	af04      	add	r7, sp, #16
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
	char lev[3];
	itoa(level,lev,10);
 8001b56:	f107 030c 	add.w	r3, r7, #12
 8001b5a:	220a      	movs	r2, #10
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	6838      	ldr	r0, [r7, #0]
 8001b60:	f003 fc68 	bl	8005434 <itoa>

	LCD_fillBattery(spi,380,120,8,level);
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	2308      	movs	r3, #8
 8001b6a:	2278      	movs	r2, #120	; 0x78
 8001b6c:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff fdcb 	bl	800170c <LCD_fillBattery>
	if (level > 0) {
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	dd0e      	ble.n	8001b9a <LCD_updateBattery+0x4e>
		LCD_drawString(spi,370,50,lev,3,HX8357_BLACK,4);
 8001b7c:	f107 030c 	add.w	r3, r7, #12
 8001b80:	2204      	movs	r2, #4
 8001b82:	9202      	str	r2, [sp, #8]
 8001b84:	2200      	movs	r2, #0
 8001b86:	9201      	str	r2, [sp, #4]
 8001b88:	2203      	movs	r2, #3
 8001b8a:	9200      	str	r2, [sp, #0]
 8001b8c:	2232      	movs	r2, #50	; 0x32
 8001b8e:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7ff fa00 	bl	8000f98 <LCD_drawString>
	} else {
		LCD_drawString(spi,370,50,"0",1,HX8357_BLACK,4);
	}
}
 8001b98:	e00c      	b.n	8001bb4 <LCD_updateBattery+0x68>
		LCD_drawString(spi,370,50,"0",1,HX8357_BLACK,4);
 8001b9a:	2304      	movs	r3, #4
 8001b9c:	9302      	str	r3, [sp, #8]
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	9301      	str	r3, [sp, #4]
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	4b05      	ldr	r3, [pc, #20]	; (8001bbc <LCD_updateBattery+0x70>)
 8001ba8:	2232      	movs	r2, #50	; 0x32
 8001baa:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7ff f9f2 	bl	8000f98 <LCD_drawString>
}
 8001bb4:	bf00      	nop
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	08005558 	.word	0x08005558

08001bc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08c      	sub	sp, #48	; 0x30
 8001bc4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bc6:	f000 fcbe 	bl	8002546 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bca:	f000 f8d1 	bl	8001d70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bce:	f000 fa11 	bl	8001ff4 <MX_GPIO_Init>
  MX_RTC_Init();
 8001bd2:	f000 f92f 	bl	8001e34 <MX_RTC_Init>
  MX_SPI1_Init();
 8001bd6:	f000 f955 	bl	8001e84 <MX_SPI1_Init>
  MX_TIM15_Init();
 8001bda:	f000 f991 	bl	8001f00 <MX_TIM15_Init>
  MX_TIM16_Init();
 8001bde:	f000 f9e1 	bl	8001fa4 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  	LCD_begin(&hspi1);
 8001be2:	4855      	ldr	r0, [pc, #340]	; (8001d38 <main+0x178>)
 8001be4:	f7fe ff5a 	bl	8000a9c <LCD_begin>
  	//LCD_fillRect(&hspi1, 0, 0, 480, 320, HX8357_WHITE);
  	LCD_writePixels(&hspi1,HX8357_WHITE,0,0,480,320);
 8001be8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001bec:	9301      	str	r3, [sp, #4]
 8001bee:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001bfc:	484e      	ldr	r0, [pc, #312]	; (8001d38 <main+0x178>)
 8001bfe:	f7ff f8b7 	bl	8000d70 <LCD_writePixels>
    LCD_drawBattery(&hspi1,380,120,HX8357_BLACK,8);
 8001c02:	2308      	movs	r3, #8
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	2300      	movs	r3, #0
 8001c08:	2278      	movs	r2, #120	; 0x78
 8001c0a:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001c0e:	484a      	ldr	r0, [pc, #296]	; (8001d38 <main+0x178>)
 8001c10:	f7ff fc20 	bl	8001454 <LCD_drawBattery>
    LCD_drawFrame(&hspi1,HX8357_BLACK);
 8001c14:	2100      	movs	r1, #0
 8001c16:	4848      	ldr	r0, [pc, #288]	; (8001d38 <main+0x178>)
 8001c18:	f7ff fd40 	bl	800169c <LCD_drawFrame>


    char * name = "TADAMHESPEV | UMSM";
 8001c1c:	4b47      	ldr	r3, [pc, #284]	; (8001d3c <main+0x17c>)
 8001c1e:	61fb      	str	r3, [r7, #28]
    char * speed = "SPEED:";
 8001c20:	4b47      	ldr	r3, [pc, #284]	; (8001d40 <main+0x180>)
 8001c22:	61bb      	str	r3, [r7, #24]
    char * temp = "TEMP:";
 8001c24:	4b47      	ldr	r3, [pc, #284]	; (8001d44 <main+0x184>)
 8001c26:	617b      	str	r3, [r7, #20]
    char * power = "POWER:";
 8001c28:	4b47      	ldr	r3, [pc, #284]	; (8001d48 <main+0x188>)
 8001c2a:	613b      	str	r3, [r7, #16]

    char * mph = "mph";
 8001c2c:	4b47      	ldr	r3, [pc, #284]	; (8001d4c <main+0x18c>)
 8001c2e:	60fb      	str	r3, [r7, #12]
    char * deg = "C";
 8001c30:	4b47      	ldr	r3, [pc, #284]	; (8001d50 <main+0x190>)
 8001c32:	60bb      	str	r3, [r7, #8]
    char * watt = "W";
 8001c34:	4b47      	ldr	r3, [pc, #284]	; (8001d54 <main+0x194>)
 8001c36:	607b      	str	r3, [r7, #4]
    LCD_drawString(&hspi1,20,30 + 80*0,name,18,HX8357_BLACK,3);
 8001c38:	2303      	movs	r3, #3
 8001c3a:	9302      	str	r3, [sp, #8]
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	9301      	str	r3, [sp, #4]
 8001c40:	2312      	movs	r3, #18
 8001c42:	9300      	str	r3, [sp, #0]
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	221e      	movs	r2, #30
 8001c48:	2114      	movs	r1, #20
 8001c4a:	483b      	ldr	r0, [pc, #236]	; (8001d38 <main+0x178>)
 8001c4c:	f7ff f9a4 	bl	8000f98 <LCD_drawString>
    LCD_drawString(&hspi1,5,30 + 80*1,speed,6,HX8357_BLACK,3);
 8001c50:	2303      	movs	r3, #3
 8001c52:	9302      	str	r3, [sp, #8]
 8001c54:	2300      	movs	r3, #0
 8001c56:	9301      	str	r3, [sp, #4]
 8001c58:	2306      	movs	r3, #6
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	226e      	movs	r2, #110	; 0x6e
 8001c60:	2105      	movs	r1, #5
 8001c62:	4835      	ldr	r0, [pc, #212]	; (8001d38 <main+0x178>)
 8001c64:	f7ff f998 	bl	8000f98 <LCD_drawString>
    LCD_drawString(&hspi1,5,30 + 80*2,temp,5,HX8357_BLACK,3);
 8001c68:	2303      	movs	r3, #3
 8001c6a:	9302      	str	r3, [sp, #8]
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	9301      	str	r3, [sp, #4]
 8001c70:	2305      	movs	r3, #5
 8001c72:	9300      	str	r3, [sp, #0]
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	22be      	movs	r2, #190	; 0xbe
 8001c78:	2105      	movs	r1, #5
 8001c7a:	482f      	ldr	r0, [pc, #188]	; (8001d38 <main+0x178>)
 8001c7c:	f7ff f98c 	bl	8000f98 <LCD_drawString>
    LCD_drawString(&hspi1,5,30 + 80*3,power,6,HX8357_BLACK,3);
 8001c80:	2303      	movs	r3, #3
 8001c82:	9302      	str	r3, [sp, #8]
 8001c84:	2300      	movs	r3, #0
 8001c86:	9301      	str	r3, [sp, #4]
 8001c88:	2306      	movs	r3, #6
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8001c92:	2105      	movs	r1, #5
 8001c94:	4828      	ldr	r0, [pc, #160]	; (8001d38 <main+0x178>)
 8001c96:	f7ff f97f 	bl	8000f98 <LCD_drawString>

    LCD_drawString(&hspi1,280,30 + 80*1,mph,3,HX8357_BLACK,3);
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	9302      	str	r3, [sp, #8]
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	9301      	str	r3, [sp, #4]
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	9300      	str	r3, [sp, #0]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	226e      	movs	r2, #110	; 0x6e
 8001caa:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001cae:	4822      	ldr	r0, [pc, #136]	; (8001d38 <main+0x178>)
 8001cb0:	f7ff f972 	bl	8000f98 <LCD_drawString>
    LCD_drawString(&hspi1,306,30 + 80*2,deg,1,HX8357_BLACK,3);
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	9302      	str	r3, [sp, #8]
 8001cb8:	2300      	movs	r3, #0
 8001cba:	9301      	str	r3, [sp, #4]
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	22be      	movs	r2, #190	; 0xbe
 8001cc4:	f44f 7199 	mov.w	r1, #306	; 0x132
 8001cc8:	481b      	ldr	r0, [pc, #108]	; (8001d38 <main+0x178>)
 8001cca:	f7ff f965 	bl	8000f98 <LCD_drawString>
    LCD_drawString(&hspi1,306,30 + 80*3,watt,1,HX8357_BLACK,3);
 8001cce:	2303      	movs	r3, #3
 8001cd0:	9302      	str	r3, [sp, #8]
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	9301      	str	r3, [sp, #4]
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	9300      	str	r3, [sp, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8001ce0:	f44f 7199 	mov.w	r1, #306	; 0x132
 8001ce4:	4814      	ldr	r0, [pc, #80]	; (8001d38 <main+0x178>)
 8001ce6:	f7ff f957 	bl	8000f98 <LCD_drawString>
    int volt_percent = (voltage*10) - 440;
 8001cea:	4b1b      	ldr	r3, [pc, #108]	; (8001d58 <main+0x198>)
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	4413      	add	r3, r2
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001cfa:	603b      	str	r3, [r7, #0]
    LCD_updateBattery(&hspi1,volt_percent);
 8001cfc:	6839      	ldr	r1, [r7, #0]
 8001cfe:	480e      	ldr	r0, [pc, #56]	; (8001d38 <main+0x178>)
 8001d00:	f7ff ff24 	bl	8001b4c <LCD_updateBattery>
    LCD_drawString(&hspi1,442,50,"%",1,HX8357_BLACK,4);
 8001d04:	2304      	movs	r3, #4
 8001d06:	9302      	str	r3, [sp, #8]
 8001d08:	2300      	movs	r3, #0
 8001d0a:	9301      	str	r3, [sp, #4]
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <main+0x19c>)
 8001d12:	2232      	movs	r2, #50	; 0x32
 8001d14:	f44f 71dd 	mov.w	r1, #442	; 0x1ba
 8001d18:	4807      	ldr	r0, [pc, #28]	; (8001d38 <main+0x178>)
 8001d1a:	f7ff f93d 	bl	8000f98 <LCD_drawString>


    TIM15->CNT = 1;
 8001d1e:	4b10      	ldr	r3, [pc, #64]	; (8001d60 <main+0x1a0>)
 8001d20:	2201      	movs	r2, #1
 8001d22:	625a      	str	r2, [r3, #36]	; 0x24
    TIM16->CNT = 1;
 8001d24:	4b0f      	ldr	r3, [pc, #60]	; (8001d64 <main+0x1a4>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_TIM_Base_Start_IT(&htim15);
 8001d2a:	480f      	ldr	r0, [pc, #60]	; (8001d68 <main+0x1a8>)
 8001d2c:	f002 ffa0 	bl	8004c70 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim16);
 8001d30:	480e      	ldr	r0, [pc, #56]	; (8001d6c <main+0x1ac>)
 8001d32:	f002 ff9d 	bl	8004c70 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d36:	e7fe      	b.n	8001d36 <main+0x176>
 8001d38:	200000e0 	.word	0x200000e0
 8001d3c:	0800555c 	.word	0x0800555c
 8001d40:	08005570 	.word	0x08005570
 8001d44:	08005578 	.word	0x08005578
 8001d48:	08005580 	.word	0x08005580
 8001d4c:	08005588 	.word	0x08005588
 8001d50:	0800558c 	.word	0x0800558c
 8001d54:	08005590 	.word	0x08005590
 8001d58:	20000090 	.word	0x20000090
 8001d5c:	08005594 	.word	0x08005594
 8001d60:	40014000 	.word	0x40014000
 8001d64:	40014400 	.word	0x40014400
 8001d68:	20000144 	.word	0x20000144
 8001d6c:	20000190 	.word	0x20000190

08001d70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b096      	sub	sp, #88	; 0x58
 8001d74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d76:	f107 0314 	add.w	r3, r7, #20
 8001d7a:	2244      	movs	r2, #68	; 0x44
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f003 fb9c 	bl	80054bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d84:	463b      	mov	r3, r7
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	605a      	str	r2, [r3, #4]
 8001d8c:	609a      	str	r2, [r3, #8]
 8001d8e:	60da      	str	r2, [r3, #12]
 8001d90:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001d92:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001d96:	f000 feb5 	bl	8002b04 <HAL_PWREx_ControlVoltageScaling>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001da0:	f000 f9f6 	bl	8002190 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001da4:	f000 fe90 	bl	8002ac8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001da8:	4b21      	ldr	r3, [pc, #132]	; (8001e30 <SystemClock_Config+0xc0>)
 8001daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dae:	4a20      	ldr	r2, [pc, #128]	; (8001e30 <SystemClock_Config+0xc0>)
 8001db0:	f023 0318 	bic.w	r3, r3, #24
 8001db4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001db8:	2314      	movs	r3, #20
 8001dba:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001dc8:	2360      	movs	r3, #96	; 0x60
 8001dca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dcc:	2302      	movs	r3, #2
 8001dce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001dd8:	2328      	movs	r3, #40	; 0x28
 8001dda:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001ddc:	2307      	movs	r3, #7
 8001dde:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001de0:	2302      	movs	r3, #2
 8001de2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001de4:	2302      	movs	r3, #2
 8001de6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001de8:	f107 0314 	add.w	r3, r7, #20
 8001dec:	4618      	mov	r0, r3
 8001dee:	f000 fedf 	bl	8002bb0 <HAL_RCC_OscConfig>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001df8:	f000 f9ca 	bl	8002190 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dfc:	230f      	movs	r3, #15
 8001dfe:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e00:	2303      	movs	r3, #3
 8001e02:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e04:	2300      	movs	r3, #0
 8001e06:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001e10:	463b      	mov	r3, r7
 8001e12:	2104      	movs	r1, #4
 8001e14:	4618      	mov	r0, r3
 8001e16:	f001 fadf 	bl	80033d8 <HAL_RCC_ClockConfig>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001e20:	f000 f9b6 	bl	8002190 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001e24:	f001 ff0e 	bl	8003c44 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001e28:	bf00      	nop
 8001e2a:	3758      	adds	r7, #88	; 0x58
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40021000 	.word	0x40021000

08001e34 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001e38:	4b10      	ldr	r3, [pc, #64]	; (8001e7c <MX_RTC_Init+0x48>)
 8001e3a:	4a11      	ldr	r2, [pc, #68]	; (8001e80 <MX_RTC_Init+0x4c>)
 8001e3c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001e3e:	4b0f      	ldr	r3, [pc, #60]	; (8001e7c <MX_RTC_Init+0x48>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001e44:	4b0d      	ldr	r3, [pc, #52]	; (8001e7c <MX_RTC_Init+0x48>)
 8001e46:	227f      	movs	r2, #127	; 0x7f
 8001e48:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001e4a:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <MX_RTC_Init+0x48>)
 8001e4c:	22ff      	movs	r2, #255	; 0xff
 8001e4e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001e50:	4b0a      	ldr	r3, [pc, #40]	; (8001e7c <MX_RTC_Init+0x48>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001e56:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <MX_RTC_Init+0x48>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001e5c:	4b07      	ldr	r3, [pc, #28]	; (8001e7c <MX_RTC_Init+0x48>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001e62:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <MX_RTC_Init+0x48>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001e68:	4804      	ldr	r0, [pc, #16]	; (8001e7c <MX_RTC_Init+0x48>)
 8001e6a:	f001 ffed 	bl	8003e48 <HAL_RTC_Init>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001e74:	f000 f98c 	bl	8002190 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001e78:	bf00      	nop
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	200000bc 	.word	0x200000bc
 8001e80:	40002800 	.word	0x40002800

08001e84 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001e88:	4b1b      	ldr	r3, [pc, #108]	; (8001ef8 <MX_SPI1_Init+0x74>)
 8001e8a:	4a1c      	ldr	r2, [pc, #112]	; (8001efc <MX_SPI1_Init+0x78>)
 8001e8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e8e:	4b1a      	ldr	r3, [pc, #104]	; (8001ef8 <MX_SPI1_Init+0x74>)
 8001e90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e96:	4b18      	ldr	r3, [pc, #96]	; (8001ef8 <MX_SPI1_Init+0x74>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e9c:	4b16      	ldr	r3, [pc, #88]	; (8001ef8 <MX_SPI1_Init+0x74>)
 8001e9e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001ea2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ea4:	4b14      	ldr	r3, [pc, #80]	; (8001ef8 <MX_SPI1_Init+0x74>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001eaa:	4b13      	ldr	r3, [pc, #76]	; (8001ef8 <MX_SPI1_Init+0x74>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001eb0:	4b11      	ldr	r3, [pc, #68]	; (8001ef8 <MX_SPI1_Init+0x74>)
 8001eb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eb6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001eb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ef8 <MX_SPI1_Init+0x74>)
 8001eba:	2208      	movs	r2, #8
 8001ebc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ebe:	4b0e      	ldr	r3, [pc, #56]	; (8001ef8 <MX_SPI1_Init+0x74>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ec4:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <MX_SPI1_Init+0x74>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001eca:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <MX_SPI1_Init+0x74>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001ed0:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <MX_SPI1_Init+0x74>)
 8001ed2:	2207      	movs	r2, #7
 8001ed4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ed6:	4b08      	ldr	r3, [pc, #32]	; (8001ef8 <MX_SPI1_Init+0x74>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001edc:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <MX_SPI1_Init+0x74>)
 8001ede:	2208      	movs	r2, #8
 8001ee0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ee2:	4805      	ldr	r0, [pc, #20]	; (8001ef8 <MX_SPI1_Init+0x74>)
 8001ee4:	f002 f8ce 	bl	8004084 <HAL_SPI_Init>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001eee:	f000 f94f 	bl	8002190 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	200000e0 	.word	0x200000e0
 8001efc:	40013000 	.word	0x40013000

08001f00 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b088      	sub	sp, #32
 8001f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f06:	f107 0310 	add.w	r3, r7, #16
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	605a      	str	r2, [r3, #4]
 8001f10:	609a      	str	r2, [r3, #8]
 8001f12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f14:	1d3b      	adds	r3, r7, #4
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	605a      	str	r2, [r3, #4]
 8001f1c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001f1e:	4b1f      	ldr	r3, [pc, #124]	; (8001f9c <MX_TIM15_Init+0x9c>)
 8001f20:	4a1f      	ldr	r2, [pc, #124]	; (8001fa0 <MX_TIM15_Init+0xa0>)
 8001f22:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 7999;
 8001f24:	4b1d      	ldr	r3, [pc, #116]	; (8001f9c <MX_TIM15_Init+0x9c>)
 8001f26:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001f2a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f2c:	4b1b      	ldr	r3, [pc, #108]	; (8001f9c <MX_TIM15_Init+0x9c>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 9999;
 8001f32:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <MX_TIM15_Init+0x9c>)
 8001f34:	f242 720f 	movw	r2, #9999	; 0x270f
 8001f38:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f3a:	4b18      	ldr	r3, [pc, #96]	; (8001f9c <MX_TIM15_Init+0x9c>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001f40:	4b16      	ldr	r3, [pc, #88]	; (8001f9c <MX_TIM15_Init+0x9c>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f46:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <MX_TIM15_Init+0x9c>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001f4c:	4813      	ldr	r0, [pc, #76]	; (8001f9c <MX_TIM15_Init+0x9c>)
 8001f4e:	f002 fe37 	bl	8004bc0 <HAL_TIM_Base_Init>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8001f58:	f000 f91a 	bl	8002190 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f60:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001f62:	f107 0310 	add.w	r3, r7, #16
 8001f66:	4619      	mov	r1, r3
 8001f68:	480c      	ldr	r0, [pc, #48]	; (8001f9c <MX_TIM15_Init+0x9c>)
 8001f6a:	f002 ffd7 	bl	8004f1c <HAL_TIM_ConfigClockSource>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8001f74:	f000 f90c 	bl	8002190 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001f80:	1d3b      	adds	r3, r7, #4
 8001f82:	4619      	mov	r1, r3
 8001f84:	4805      	ldr	r0, [pc, #20]	; (8001f9c <MX_TIM15_Init+0x9c>)
 8001f86:	f003 f9b9 	bl	80052fc <HAL_TIMEx_MasterConfigSynchronization>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8001f90:	f000 f8fe 	bl	8002190 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001f94:	bf00      	nop
 8001f96:	3720      	adds	r7, #32
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	20000144 	.word	0x20000144
 8001fa0:	40014000 	.word	0x40014000

08001fa4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001fa8:	4b10      	ldr	r3, [pc, #64]	; (8001fec <MX_TIM16_Init+0x48>)
 8001faa:	4a11      	ldr	r2, [pc, #68]	; (8001ff0 <MX_TIM16_Init+0x4c>)
 8001fac:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7999;
 8001fae:	4b0f      	ldr	r3, [pc, #60]	; (8001fec <MX_TIM16_Init+0x48>)
 8001fb0:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001fb4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fb6:	4b0d      	ldr	r3, [pc, #52]	; (8001fec <MX_TIM16_Init+0x48>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 49999;
 8001fbc:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <MX_TIM16_Init+0x48>)
 8001fbe:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001fc2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fc4:	4b09      	ldr	r3, [pc, #36]	; (8001fec <MX_TIM16_Init+0x48>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001fca:	4b08      	ldr	r3, [pc, #32]	; (8001fec <MX_TIM16_Init+0x48>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fd0:	4b06      	ldr	r3, [pc, #24]	; (8001fec <MX_TIM16_Init+0x48>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001fd6:	4805      	ldr	r0, [pc, #20]	; (8001fec <MX_TIM16_Init+0x48>)
 8001fd8:	f002 fdf2 	bl	8004bc0 <HAL_TIM_Base_Init>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001fe2:	f000 f8d5 	bl	8002190 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20000190 	.word	0x20000190
 8001ff0:	40014400 	.word	0x40014400

08001ff4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b088      	sub	sp, #32
 8001ff8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ffa:	f107 030c 	add.w	r3, r7, #12
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	605a      	str	r2, [r3, #4]
 8002004:	609a      	str	r2, [r3, #8]
 8002006:	60da      	str	r2, [r3, #12]
 8002008:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800200a:	4b2f      	ldr	r3, [pc, #188]	; (80020c8 <MX_GPIO_Init+0xd4>)
 800200c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800200e:	4a2e      	ldr	r2, [pc, #184]	; (80020c8 <MX_GPIO_Init+0xd4>)
 8002010:	f043 0304 	orr.w	r3, r3, #4
 8002014:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002016:	4b2c      	ldr	r3, [pc, #176]	; (80020c8 <MX_GPIO_Init+0xd4>)
 8002018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800201a:	f003 0304 	and.w	r3, r3, #4
 800201e:	60bb      	str	r3, [r7, #8]
 8002020:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002022:	4b29      	ldr	r3, [pc, #164]	; (80020c8 <MX_GPIO_Init+0xd4>)
 8002024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002026:	4a28      	ldr	r2, [pc, #160]	; (80020c8 <MX_GPIO_Init+0xd4>)
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800202e:	4b26      	ldr	r3, [pc, #152]	; (80020c8 <MX_GPIO_Init+0xd4>)
 8002030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	607b      	str	r3, [r7, #4]
 8002038:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800203a:	4b23      	ldr	r3, [pc, #140]	; (80020c8 <MX_GPIO_Init+0xd4>)
 800203c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203e:	4a22      	ldr	r2, [pc, #136]	; (80020c8 <MX_GPIO_Init+0xd4>)
 8002040:	f043 0302 	orr.w	r3, r3, #2
 8002044:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002046:	4b20      	ldr	r3, [pc, #128]	; (80020c8 <MX_GPIO_Init+0xd4>)
 8002048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	603b      	str	r3, [r7, #0]
 8002050:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8002052:	2200      	movs	r2, #0
 8002054:	2170      	movs	r1, #112	; 0x70
 8002056:	481d      	ldr	r0, [pc, #116]	; (80020cc <MX_GPIO_Init+0xd8>)
 8002058:	f000 fd1e 	bl	8002a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 800205c:	2304      	movs	r3, #4
 800205e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002060:	2302      	movs	r3, #2
 8002062:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002064:	2300      	movs	r3, #0
 8002066:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002068:	2303      	movs	r3, #3
 800206a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800206c:	2307      	movs	r3, #7
 800206e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002070:	f107 030c 	add.w	r3, r7, #12
 8002074:	4619      	mov	r1, r3
 8002076:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800207a:	f000 fba3 	bl	80027c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 800207e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002082:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002084:	2302      	movs	r3, #2
 8002086:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002088:	2300      	movs	r3, #0
 800208a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800208c:	2303      	movs	r3, #3
 800208e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002090:	2303      	movs	r3, #3
 8002092:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002094:	f107 030c 	add.w	r3, r7, #12
 8002098:	4619      	mov	r1, r3
 800209a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800209e:	f000 fb91 	bl	80027c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80020a2:	2370      	movs	r3, #112	; 0x70
 80020a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020a6:	2301      	movs	r3, #1
 80020a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020aa:	2300      	movs	r3, #0
 80020ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ae:	2300      	movs	r3, #0
 80020b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b2:	f107 030c 	add.w	r3, r7, #12
 80020b6:	4619      	mov	r1, r3
 80020b8:	4804      	ldr	r0, [pc, #16]	; (80020cc <MX_GPIO_Init+0xd8>)
 80020ba:	f000 fb83 	bl	80027c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80020be:	bf00      	nop
 80020c0:	3720      	adds	r7, #32
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40021000 	.word	0x40021000
 80020cc:	48000400 	.word	0x48000400

080020d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020e0:	d101      	bne.n	80020e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80020e2:	f000 fa49 	bl	8002578 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM15) {
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a23      	ldr	r2, [pc, #140]	; (8002178 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d109      	bne.n	8002104 <HAL_TIM_PeriodElapsedCallback+0x34>
	  buf[3]+=1;
 80020f0:	4b22      	ldr	r3, [pc, #136]	; (800217c <HAL_TIM_PeriodElapsedCallback+0xac>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	3301      	adds	r3, #1
 80020f6:	4a21      	ldr	r2, [pc, #132]	; (800217c <HAL_TIM_PeriodElapsedCallback+0xac>)
 80020f8:	60d3      	str	r3, [r2, #12]
	  LCD_updateVals(&hspi1,buf,HX8357_BLACK);
 80020fa:	2200      	movs	r2, #0
 80020fc:	491f      	ldr	r1, [pc, #124]	; (800217c <HAL_TIM_PeriodElapsedCallback+0xac>)
 80020fe:	4820      	ldr	r0, [pc, #128]	; (8002180 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002100:	f7ff fc14 	bl	800192c <LCD_updateVals>
  }
  if (htim->Instance == TIM16) {
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a1e      	ldr	r2, [pc, #120]	; (8002184 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d12b      	bne.n	8002166 <HAL_TIM_PeriodElapsedCallback+0x96>
	  voltage -= 0.1;
 800210e:	4b1e      	ldr	r3, [pc, #120]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe f9ae 	bl	8000474 <__aeabi_i2d>
 8002118:	a315      	add	r3, pc, #84	; (adr r3, 8002170 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800211a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800211e:	f7fe f85b 	bl	80001d8 <__aeabi_dsub>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4610      	mov	r0, r2
 8002128:	4619      	mov	r1, r3
 800212a:	f7fe fc1f 	bl	800096c <__aeabi_d2iz>
 800212e:	4603      	mov	r3, r0
 8002130:	4a15      	ldr	r2, [pc, #84]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002132:	6013      	str	r3, [r2, #0]
	  int volt_percent = voltage*10 - 440;
 8002134:	4b14      	ldr	r3, [pc, #80]	; (8002188 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	4613      	mov	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002144:	60fb      	str	r3, [r7, #12]
	  LCD_updateBattery(&hspi1,volt_percent);
 8002146:	68f9      	ldr	r1, [r7, #12]
 8002148:	480d      	ldr	r0, [pc, #52]	; (8002180 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800214a:	f7ff fcff 	bl	8001b4c <LCD_updateBattery>
	  LCD_warnings(&hspi1, (buf[2] << 4) | buf[3],volt_percent,&warning);
 800214e:	4b0b      	ldr	r3, [pc, #44]	; (800217c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	011a      	lsls	r2, r3, #4
 8002154:	4b09      	ldr	r3, [pc, #36]	; (800217c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	ea42 0103 	orr.w	r1, r2, r3
 800215c:	4b0b      	ldr	r3, [pc, #44]	; (800218c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	4807      	ldr	r0, [pc, #28]	; (8002180 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002162:	f7ff fc49 	bl	80019f8 <LCD_warnings>
  }
  /* USER CODE END Callback 1 */
}
 8002166:	bf00      	nop
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	9999999a 	.word	0x9999999a
 8002174:	3fb99999 	.word	0x3fb99999
 8002178:	40014000 	.word	0x40014000
 800217c:	20000068 	.word	0x20000068
 8002180:	200000e0 	.word	0x200000e0
 8002184:	40014400 	.word	0x40014400
 8002188:	20000090 	.word	0x20000090
 800218c:	200001dc 	.word	0x200001dc

08002190 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002194:	b672      	cpsid	i
}
 8002196:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002198:	e7fe      	b.n	8002198 <Error_Handler+0x8>
	...

0800219c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021a2:	4b0f      	ldr	r3, [pc, #60]	; (80021e0 <HAL_MspInit+0x44>)
 80021a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021a6:	4a0e      	ldr	r2, [pc, #56]	; (80021e0 <HAL_MspInit+0x44>)
 80021a8:	f043 0301 	orr.w	r3, r3, #1
 80021ac:	6613      	str	r3, [r2, #96]	; 0x60
 80021ae:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <HAL_MspInit+0x44>)
 80021b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	607b      	str	r3, [r7, #4]
 80021b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021ba:	4b09      	ldr	r3, [pc, #36]	; (80021e0 <HAL_MspInit+0x44>)
 80021bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021be:	4a08      	ldr	r2, [pc, #32]	; (80021e0 <HAL_MspInit+0x44>)
 80021c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c4:	6593      	str	r3, [r2, #88]	; 0x58
 80021c6:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <HAL_MspInit+0x44>)
 80021c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ce:	603b      	str	r3, [r7, #0]
 80021d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80021d2:	2004      	movs	r0, #4
 80021d4:	f000 fac1 	bl	800275a <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021d8:	bf00      	nop
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40021000 	.word	0x40021000

080021e4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b098      	sub	sp, #96	; 0x60
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021ec:	f107 030c 	add.w	r3, r7, #12
 80021f0:	2254      	movs	r2, #84	; 0x54
 80021f2:	2100      	movs	r1, #0
 80021f4:	4618      	mov	r0, r3
 80021f6:	f003 f961 	bl	80054bc <memset>
  if(hrtc->Instance==RTC)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a0f      	ldr	r2, [pc, #60]	; (800223c <HAL_RTC_MspInit+0x58>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d117      	bne.n	8002234 <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002204:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002208:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800220a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800220e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002210:	f107 030c 	add.w	r3, r7, #12
 8002214:	4618      	mov	r0, r3
 8002216:	f001 fb1f 	bl	8003858 <HAL_RCCEx_PeriphCLKConfig>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002220:	f7ff ffb6 	bl	8002190 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002224:	4b06      	ldr	r3, [pc, #24]	; (8002240 <HAL_RTC_MspInit+0x5c>)
 8002226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800222a:	4a05      	ldr	r2, [pc, #20]	; (8002240 <HAL_RTC_MspInit+0x5c>)
 800222c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002230:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002234:	bf00      	nop
 8002236:	3760      	adds	r7, #96	; 0x60
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40002800 	.word	0x40002800
 8002240:	40021000 	.word	0x40021000

08002244 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b08a      	sub	sp, #40	; 0x28
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224c:	f107 0314 	add.w	r3, r7, #20
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	609a      	str	r2, [r3, #8]
 8002258:	60da      	str	r2, [r3, #12]
 800225a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a17      	ldr	r2, [pc, #92]	; (80022c0 <HAL_SPI_MspInit+0x7c>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d128      	bne.n	80022b8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002266:	4b17      	ldr	r3, [pc, #92]	; (80022c4 <HAL_SPI_MspInit+0x80>)
 8002268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800226a:	4a16      	ldr	r2, [pc, #88]	; (80022c4 <HAL_SPI_MspInit+0x80>)
 800226c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002270:	6613      	str	r3, [r2, #96]	; 0x60
 8002272:	4b14      	ldr	r3, [pc, #80]	; (80022c4 <HAL_SPI_MspInit+0x80>)
 8002274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002276:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800227a:	613b      	str	r3, [r7, #16]
 800227c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800227e:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <HAL_SPI_MspInit+0x80>)
 8002280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002282:	4a10      	ldr	r2, [pc, #64]	; (80022c4 <HAL_SPI_MspInit+0x80>)
 8002284:	f043 0301 	orr.w	r3, r3, #1
 8002288:	64d3      	str	r3, [r2, #76]	; 0x4c
 800228a:	4b0e      	ldr	r3, [pc, #56]	; (80022c4 <HAL_SPI_MspInit+0x80>)
 800228c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002296:	23e0      	movs	r3, #224	; 0xe0
 8002298:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229a:	2302      	movs	r3, #2
 800229c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229e:	2300      	movs	r3, #0
 80022a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a2:	2303      	movs	r3, #3
 80022a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022a6:	2305      	movs	r3, #5
 80022a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022aa:	f107 0314 	add.w	r3, r7, #20
 80022ae:	4619      	mov	r1, r3
 80022b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022b4:	f000 fa86 	bl	80027c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80022b8:	bf00      	nop
 80022ba:	3728      	adds	r7, #40	; 0x28
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	40013000 	.word	0x40013000
 80022c4:	40021000 	.word	0x40021000

080022c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a1a      	ldr	r2, [pc, #104]	; (8002340 <HAL_TIM_Base_MspInit+0x78>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d114      	bne.n	8002304 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80022da:	4b1a      	ldr	r3, [pc, #104]	; (8002344 <HAL_TIM_Base_MspInit+0x7c>)
 80022dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022de:	4a19      	ldr	r2, [pc, #100]	; (8002344 <HAL_TIM_Base_MspInit+0x7c>)
 80022e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e4:	6613      	str	r3, [r2, #96]	; 0x60
 80022e6:	4b17      	ldr	r3, [pc, #92]	; (8002344 <HAL_TIM_Base_MspInit+0x7c>)
 80022e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80022f2:	2200      	movs	r2, #0
 80022f4:	2100      	movs	r1, #0
 80022f6:	2018      	movs	r0, #24
 80022f8:	f000 fa3a 	bl	8002770 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80022fc:	2018      	movs	r0, #24
 80022fe:	f000 fa53 	bl	80027a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002302:	e018      	b.n	8002336 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM16)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a0f      	ldr	r2, [pc, #60]	; (8002348 <HAL_TIM_Base_MspInit+0x80>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d113      	bne.n	8002336 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800230e:	4b0d      	ldr	r3, [pc, #52]	; (8002344 <HAL_TIM_Base_MspInit+0x7c>)
 8002310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002312:	4a0c      	ldr	r2, [pc, #48]	; (8002344 <HAL_TIM_Base_MspInit+0x7c>)
 8002314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002318:	6613      	str	r3, [r2, #96]	; 0x60
 800231a:	4b0a      	ldr	r3, [pc, #40]	; (8002344 <HAL_TIM_Base_MspInit+0x7c>)
 800231c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800231e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002322:	60bb      	str	r3, [r7, #8]
 8002324:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8002326:	2200      	movs	r2, #0
 8002328:	2101      	movs	r1, #1
 800232a:	2019      	movs	r0, #25
 800232c:	f000 fa20 	bl	8002770 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002330:	2019      	movs	r0, #25
 8002332:	f000 fa39 	bl	80027a8 <HAL_NVIC_EnableIRQ>
}
 8002336:	bf00      	nop
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40014000 	.word	0x40014000
 8002344:	40021000 	.word	0x40021000
 8002348:	40014400 	.word	0x40014400

0800234c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b08e      	sub	sp, #56	; 0x38
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002354:	2300      	movs	r3, #0
 8002356:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800235a:	4b34      	ldr	r3, [pc, #208]	; (800242c <HAL_InitTick+0xe0>)
 800235c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235e:	4a33      	ldr	r2, [pc, #204]	; (800242c <HAL_InitTick+0xe0>)
 8002360:	f043 0301 	orr.w	r3, r3, #1
 8002364:	6593      	str	r3, [r2, #88]	; 0x58
 8002366:	4b31      	ldr	r3, [pc, #196]	; (800242c <HAL_InitTick+0xe0>)
 8002368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002372:	f107 0210 	add.w	r2, r7, #16
 8002376:	f107 0314 	add.w	r3, r7, #20
 800237a:	4611      	mov	r1, r2
 800237c:	4618      	mov	r0, r3
 800237e:	f001 f9d9 	bl	8003734 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002382:	6a3b      	ldr	r3, [r7, #32]
 8002384:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002388:	2b00      	cmp	r3, #0
 800238a:	d103      	bne.n	8002394 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800238c:	f001 f9bc 	bl	8003708 <HAL_RCC_GetPCLK1Freq>
 8002390:	6378      	str	r0, [r7, #52]	; 0x34
 8002392:	e004      	b.n	800239e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002394:	f001 f9b8 	bl	8003708 <HAL_RCC_GetPCLK1Freq>
 8002398:	4603      	mov	r3, r0
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800239e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023a0:	4a23      	ldr	r2, [pc, #140]	; (8002430 <HAL_InitTick+0xe4>)
 80023a2:	fba2 2303 	umull	r2, r3, r2, r3
 80023a6:	0c9b      	lsrs	r3, r3, #18
 80023a8:	3b01      	subs	r3, #1
 80023aa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80023ac:	4b21      	ldr	r3, [pc, #132]	; (8002434 <HAL_InitTick+0xe8>)
 80023ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023b2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80023b4:	4b1f      	ldr	r3, [pc, #124]	; (8002434 <HAL_InitTick+0xe8>)
 80023b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80023ba:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80023bc:	4a1d      	ldr	r2, [pc, #116]	; (8002434 <HAL_InitTick+0xe8>)
 80023be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c0:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80023c2:	4b1c      	ldr	r3, [pc, #112]	; (8002434 <HAL_InitTick+0xe8>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023c8:	4b1a      	ldr	r3, [pc, #104]	; (8002434 <HAL_InitTick+0xe8>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ce:	4b19      	ldr	r3, [pc, #100]	; (8002434 <HAL_InitTick+0xe8>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80023d4:	4817      	ldr	r0, [pc, #92]	; (8002434 <HAL_InitTick+0xe8>)
 80023d6:	f002 fbf3 	bl	8004bc0 <HAL_TIM_Base_Init>
 80023da:	4603      	mov	r3, r0
 80023dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80023e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d11b      	bne.n	8002420 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80023e8:	4812      	ldr	r0, [pc, #72]	; (8002434 <HAL_InitTick+0xe8>)
 80023ea:	f002 fc41 	bl	8004c70 <HAL_TIM_Base_Start_IT>
 80023ee:	4603      	mov	r3, r0
 80023f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80023f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d111      	bne.n	8002420 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80023fc:	201c      	movs	r0, #28
 80023fe:	f000 f9d3 	bl	80027a8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2b0f      	cmp	r3, #15
 8002406:	d808      	bhi.n	800241a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8002408:	2200      	movs	r2, #0
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	201c      	movs	r0, #28
 800240e:	f000 f9af 	bl	8002770 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002412:	4a09      	ldr	r2, [pc, #36]	; (8002438 <HAL_InitTick+0xec>)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6013      	str	r3, [r2, #0]
 8002418:	e002      	b.n	8002420 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002420:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002424:	4618      	mov	r0, r3
 8002426:	3738      	adds	r7, #56	; 0x38
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40021000 	.word	0x40021000
 8002430:	431bde83 	.word	0x431bde83
 8002434:	200001e0 	.word	0x200001e0
 8002438:	20000098 	.word	0x20000098

0800243c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002440:	e7fe      	b.n	8002440 <NMI_Handler+0x4>

08002442 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002442:	b480      	push	{r7}
 8002444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002446:	e7fe      	b.n	8002446 <HardFault_Handler+0x4>

08002448 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800244c:	e7fe      	b.n	800244c <MemManage_Handler+0x4>

0800244e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800244e:	b480      	push	{r7}
 8002450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002452:	e7fe      	b.n	8002452 <BusFault_Handler+0x4>

08002454 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002458:	e7fe      	b.n	8002458 <UsageFault_Handler+0x4>

0800245a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800245a:	b480      	push	{r7}
 800245c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800246c:	bf00      	nop
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002476:	b480      	push	{r7}
 8002478:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800247a:	bf00      	nop
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002488:	bf00      	nop
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
	...

08002494 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8002498:	4802      	ldr	r0, [pc, #8]	; (80024a4 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800249a:	f002 fc3d 	bl	8004d18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800249e:	bf00      	nop
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20000144 	.word	0x20000144

080024a8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80024ac:	4802      	ldr	r0, [pc, #8]	; (80024b8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80024ae:	f002 fc33 	bl	8004d18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80024b2:	bf00      	nop
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	20000190 	.word	0x20000190

080024bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80024c0:	4802      	ldr	r0, [pc, #8]	; (80024cc <TIM2_IRQHandler+0x10>)
 80024c2:	f002 fc29 	bl	8004d18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80024c6:	bf00      	nop
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	200001e0 	.word	0x200001e0

080024d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80024d4:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <SystemInit+0x20>)
 80024d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024da:	4a05      	ldr	r2, [pc, #20]	; (80024f0 <SystemInit+0x20>)
 80024dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80024e4:	bf00      	nop
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	e000ed00 	.word	0xe000ed00

080024f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80024f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800252c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80024f8:	f7ff ffea 	bl	80024d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024fc:	480c      	ldr	r0, [pc, #48]	; (8002530 <LoopForever+0x6>)
  ldr r1, =_edata
 80024fe:	490d      	ldr	r1, [pc, #52]	; (8002534 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002500:	4a0d      	ldr	r2, [pc, #52]	; (8002538 <LoopForever+0xe>)
  movs r3, #0
 8002502:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002504:	e002      	b.n	800250c <LoopCopyDataInit>

08002506 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002506:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002508:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800250a:	3304      	adds	r3, #4

0800250c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800250c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800250e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002510:	d3f9      	bcc.n	8002506 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002512:	4a0a      	ldr	r2, [pc, #40]	; (800253c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002514:	4c0a      	ldr	r4, [pc, #40]	; (8002540 <LoopForever+0x16>)
  movs r3, #0
 8002516:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002518:	e001      	b.n	800251e <LoopFillZerobss>

0800251a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800251a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800251c:	3204      	adds	r2, #4

0800251e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800251e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002520:	d3fb      	bcc.n	800251a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002522:	f002 ffd3 	bl	80054cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002526:	f7ff fb4b 	bl	8001bc0 <main>

0800252a <LoopForever>:

LoopForever:
    b LoopForever
 800252a:	e7fe      	b.n	800252a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800252c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002534:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8002538:	08005b10 	.word	0x08005b10
  ldr r2, =_sbss
 800253c:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8002540:	20000230 	.word	0x20000230

08002544 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002544:	e7fe      	b.n	8002544 <ADC1_IRQHandler>

08002546 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b082      	sub	sp, #8
 800254a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800254c:	2300      	movs	r3, #0
 800254e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002550:	2003      	movs	r0, #3
 8002552:	f000 f902 	bl	800275a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002556:	2007      	movs	r0, #7
 8002558:	f7ff fef8 	bl	800234c <HAL_InitTick>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d002      	beq.n	8002568 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	71fb      	strb	r3, [r7, #7]
 8002566:	e001      	b.n	800256c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002568:	f7ff fe18 	bl	800219c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800256c:	79fb      	ldrb	r3, [r7, #7]
}
 800256e:	4618      	mov	r0, r3
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
	...

08002578 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800257c:	4b06      	ldr	r3, [pc, #24]	; (8002598 <HAL_IncTick+0x20>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	461a      	mov	r2, r3
 8002582:	4b06      	ldr	r3, [pc, #24]	; (800259c <HAL_IncTick+0x24>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4413      	add	r3, r2
 8002588:	4a04      	ldr	r2, [pc, #16]	; (800259c <HAL_IncTick+0x24>)
 800258a:	6013      	str	r3, [r2, #0]
}
 800258c:	bf00      	nop
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	2000009c 	.word	0x2000009c
 800259c:	2000022c 	.word	0x2000022c

080025a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  return uwTick;
 80025a4:	4b03      	ldr	r3, [pc, #12]	; (80025b4 <HAL_GetTick+0x14>)
 80025a6:	681b      	ldr	r3, [r3, #0]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	2000022c 	.word	0x2000022c

080025b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025c0:	f7ff ffee 	bl	80025a0 <HAL_GetTick>
 80025c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d0:	d005      	beq.n	80025de <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80025d2:	4b0a      	ldr	r3, [pc, #40]	; (80025fc <HAL_Delay+0x44>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	461a      	mov	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	4413      	add	r3, r2
 80025dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025de:	bf00      	nop
 80025e0:	f7ff ffde 	bl	80025a0 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d8f7      	bhi.n	80025e0 <HAL_Delay+0x28>
  {
  }
}
 80025f0:	bf00      	nop
 80025f2:	bf00      	nop
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	2000009c 	.word	0x2000009c

08002600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002610:	4b0c      	ldr	r3, [pc, #48]	; (8002644 <__NVIC_SetPriorityGrouping+0x44>)
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002616:	68ba      	ldr	r2, [r7, #8]
 8002618:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800261c:	4013      	ands	r3, r2
 800261e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002628:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800262c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002632:	4a04      	ldr	r2, [pc, #16]	; (8002644 <__NVIC_SetPriorityGrouping+0x44>)
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	60d3      	str	r3, [r2, #12]
}
 8002638:	bf00      	nop
 800263a:	3714      	adds	r7, #20
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	e000ed00 	.word	0xe000ed00

08002648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800264c:	4b04      	ldr	r3, [pc, #16]	; (8002660 <__NVIC_GetPriorityGrouping+0x18>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	0a1b      	lsrs	r3, r3, #8
 8002652:	f003 0307 	and.w	r3, r3, #7
}
 8002656:	4618      	mov	r0, r3
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	e000ed00 	.word	0xe000ed00

08002664 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	4603      	mov	r3, r0
 800266c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800266e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002672:	2b00      	cmp	r3, #0
 8002674:	db0b      	blt.n	800268e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002676:	79fb      	ldrb	r3, [r7, #7]
 8002678:	f003 021f 	and.w	r2, r3, #31
 800267c:	4907      	ldr	r1, [pc, #28]	; (800269c <__NVIC_EnableIRQ+0x38>)
 800267e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002682:	095b      	lsrs	r3, r3, #5
 8002684:	2001      	movs	r0, #1
 8002686:	fa00 f202 	lsl.w	r2, r0, r2
 800268a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800268e:	bf00      	nop
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	e000e100 	.word	0xe000e100

080026a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	4603      	mov	r3, r0
 80026a8:	6039      	str	r1, [r7, #0]
 80026aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	db0a      	blt.n	80026ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	b2da      	uxtb	r2, r3
 80026b8:	490c      	ldr	r1, [pc, #48]	; (80026ec <__NVIC_SetPriority+0x4c>)
 80026ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026be:	0112      	lsls	r2, r2, #4
 80026c0:	b2d2      	uxtb	r2, r2
 80026c2:	440b      	add	r3, r1
 80026c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026c8:	e00a      	b.n	80026e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	b2da      	uxtb	r2, r3
 80026ce:	4908      	ldr	r1, [pc, #32]	; (80026f0 <__NVIC_SetPriority+0x50>)
 80026d0:	79fb      	ldrb	r3, [r7, #7]
 80026d2:	f003 030f 	and.w	r3, r3, #15
 80026d6:	3b04      	subs	r3, #4
 80026d8:	0112      	lsls	r2, r2, #4
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	440b      	add	r3, r1
 80026de:	761a      	strb	r2, [r3, #24]
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr
 80026ec:	e000e100 	.word	0xe000e100
 80026f0:	e000ed00 	.word	0xe000ed00

080026f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b089      	sub	sp, #36	; 0x24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f1c3 0307 	rsb	r3, r3, #7
 800270e:	2b04      	cmp	r3, #4
 8002710:	bf28      	it	cs
 8002712:	2304      	movcs	r3, #4
 8002714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	3304      	adds	r3, #4
 800271a:	2b06      	cmp	r3, #6
 800271c:	d902      	bls.n	8002724 <NVIC_EncodePriority+0x30>
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	3b03      	subs	r3, #3
 8002722:	e000      	b.n	8002726 <NVIC_EncodePriority+0x32>
 8002724:	2300      	movs	r3, #0
 8002726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002728:	f04f 32ff 	mov.w	r2, #4294967295
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	43da      	mvns	r2, r3
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	401a      	ands	r2, r3
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800273c:	f04f 31ff 	mov.w	r1, #4294967295
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	fa01 f303 	lsl.w	r3, r1, r3
 8002746:	43d9      	mvns	r1, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800274c:	4313      	orrs	r3, r2
         );
}
 800274e:	4618      	mov	r0, r3
 8002750:	3724      	adds	r7, #36	; 0x24
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7ff ff4c 	bl	8002600 <__NVIC_SetPriorityGrouping>
}
 8002768:	bf00      	nop
 800276a:	3708      	adds	r7, #8
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
 800277c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800277e:	2300      	movs	r3, #0
 8002780:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002782:	f7ff ff61 	bl	8002648 <__NVIC_GetPriorityGrouping>
 8002786:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	68b9      	ldr	r1, [r7, #8]
 800278c:	6978      	ldr	r0, [r7, #20]
 800278e:	f7ff ffb1 	bl	80026f4 <NVIC_EncodePriority>
 8002792:	4602      	mov	r2, r0
 8002794:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002798:	4611      	mov	r1, r2
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff ff80 	bl	80026a0 <__NVIC_SetPriority>
}
 80027a0:	bf00      	nop
 80027a2:	3718      	adds	r7, #24
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff ff54 	bl	8002664 <__NVIC_EnableIRQ>
}
 80027bc:	bf00      	nop
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b087      	sub	sp, #28
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027ce:	2300      	movs	r3, #0
 80027d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027d2:	e148      	b.n	8002a66 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	2101      	movs	r1, #1
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	fa01 f303 	lsl.w	r3, r1, r3
 80027e0:	4013      	ands	r3, r2
 80027e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f000 813a 	beq.w	8002a60 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f003 0303 	and.w	r3, r3, #3
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d005      	beq.n	8002804 <HAL_GPIO_Init+0x40>
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f003 0303 	and.w	r3, r3, #3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d130      	bne.n	8002866 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	2203      	movs	r2, #3
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	43db      	mvns	r3, r3
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	4013      	ands	r3, r2
 800281a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	68da      	ldr	r2, [r3, #12]
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	4313      	orrs	r3, r2
 800282c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800283a:	2201      	movs	r2, #1
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	fa02 f303 	lsl.w	r3, r2, r3
 8002842:	43db      	mvns	r3, r3
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	4013      	ands	r3, r2
 8002848:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	091b      	lsrs	r3, r3, #4
 8002850:	f003 0201 	and.w	r2, r3, #1
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	4313      	orrs	r3, r2
 800285e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f003 0303 	and.w	r3, r3, #3
 800286e:	2b03      	cmp	r3, #3
 8002870:	d017      	beq.n	80028a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	2203      	movs	r2, #3
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	43db      	mvns	r3, r3
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	4013      	ands	r3, r2
 8002888:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	689a      	ldr	r2, [r3, #8]
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	4313      	orrs	r3, r2
 800289a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f003 0303 	and.w	r3, r3, #3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d123      	bne.n	80028f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	08da      	lsrs	r2, r3, #3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	3208      	adds	r2, #8
 80028b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	f003 0307 	and.w	r3, r3, #7
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	220f      	movs	r2, #15
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	43db      	mvns	r3, r3
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	4013      	ands	r3, r2
 80028d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	691a      	ldr	r2, [r3, #16]
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	f003 0307 	and.w	r3, r3, #7
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	08da      	lsrs	r2, r3, #3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	3208      	adds	r2, #8
 80028f0:	6939      	ldr	r1, [r7, #16]
 80028f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	2203      	movs	r2, #3
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	43db      	mvns	r3, r3
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	4013      	ands	r3, r2
 800290c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f003 0203 	and.w	r2, r3, #3
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	4313      	orrs	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002932:	2b00      	cmp	r3, #0
 8002934:	f000 8094 	beq.w	8002a60 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002938:	4b52      	ldr	r3, [pc, #328]	; (8002a84 <HAL_GPIO_Init+0x2c0>)
 800293a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800293c:	4a51      	ldr	r2, [pc, #324]	; (8002a84 <HAL_GPIO_Init+0x2c0>)
 800293e:	f043 0301 	orr.w	r3, r3, #1
 8002942:	6613      	str	r3, [r2, #96]	; 0x60
 8002944:	4b4f      	ldr	r3, [pc, #316]	; (8002a84 <HAL_GPIO_Init+0x2c0>)
 8002946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	60bb      	str	r3, [r7, #8]
 800294e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002950:	4a4d      	ldr	r2, [pc, #308]	; (8002a88 <HAL_GPIO_Init+0x2c4>)
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	089b      	lsrs	r3, r3, #2
 8002956:	3302      	adds	r3, #2
 8002958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800295c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f003 0303 	and.w	r3, r3, #3
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	220f      	movs	r2, #15
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	43db      	mvns	r3, r3
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	4013      	ands	r3, r2
 8002972:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800297a:	d00d      	beq.n	8002998 <HAL_GPIO_Init+0x1d4>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a43      	ldr	r2, [pc, #268]	; (8002a8c <HAL_GPIO_Init+0x2c8>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d007      	beq.n	8002994 <HAL_GPIO_Init+0x1d0>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4a42      	ldr	r2, [pc, #264]	; (8002a90 <HAL_GPIO_Init+0x2cc>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d101      	bne.n	8002990 <HAL_GPIO_Init+0x1cc>
 800298c:	2302      	movs	r3, #2
 800298e:	e004      	b.n	800299a <HAL_GPIO_Init+0x1d6>
 8002990:	2307      	movs	r3, #7
 8002992:	e002      	b.n	800299a <HAL_GPIO_Init+0x1d6>
 8002994:	2301      	movs	r3, #1
 8002996:	e000      	b.n	800299a <HAL_GPIO_Init+0x1d6>
 8002998:	2300      	movs	r3, #0
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	f002 0203 	and.w	r2, r2, #3
 80029a0:	0092      	lsls	r2, r2, #2
 80029a2:	4093      	lsls	r3, r2
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80029aa:	4937      	ldr	r1, [pc, #220]	; (8002a88 <HAL_GPIO_Init+0x2c4>)
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	089b      	lsrs	r3, r3, #2
 80029b0:	3302      	adds	r3, #2
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029b8:	4b36      	ldr	r3, [pc, #216]	; (8002a94 <HAL_GPIO_Init+0x2d0>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	43db      	mvns	r3, r3
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	4013      	ands	r3, r2
 80029c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d003      	beq.n	80029dc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	4313      	orrs	r3, r2
 80029da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029dc:	4a2d      	ldr	r2, [pc, #180]	; (8002a94 <HAL_GPIO_Init+0x2d0>)
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80029e2:	4b2c      	ldr	r3, [pc, #176]	; (8002a94 <HAL_GPIO_Init+0x2d0>)
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	43db      	mvns	r3, r3
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	4013      	ands	r3, r2
 80029f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d003      	beq.n	8002a06 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a06:	4a23      	ldr	r2, [pc, #140]	; (8002a94 <HAL_GPIO_Init+0x2d0>)
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002a0c:	4b21      	ldr	r3, [pc, #132]	; (8002a94 <HAL_GPIO_Init+0x2d0>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	43db      	mvns	r3, r3
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d003      	beq.n	8002a30 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a30:	4a18      	ldr	r2, [pc, #96]	; (8002a94 <HAL_GPIO_Init+0x2d0>)
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002a36:	4b17      	ldr	r3, [pc, #92]	; (8002a94 <HAL_GPIO_Init+0x2d0>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	4013      	ands	r3, r2
 8002a44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a5a:	4a0e      	ldr	r2, [pc, #56]	; (8002a94 <HAL_GPIO_Init+0x2d0>)
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	3301      	adds	r3, #1
 8002a64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f47f aeaf 	bne.w	80027d4 <HAL_GPIO_Init+0x10>
  }
}
 8002a76:	bf00      	nop
 8002a78:	bf00      	nop
 8002a7a:	371c      	adds	r7, #28
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr
 8002a84:	40021000 	.word	0x40021000
 8002a88:	40010000 	.word	0x40010000
 8002a8c:	48000400 	.word	0x48000400
 8002a90:	48000800 	.word	0x48000800
 8002a94:	40010400 	.word	0x40010400

08002a98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	807b      	strh	r3, [r7, #2]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002aa8:	787b      	ldrb	r3, [r7, #1]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002aae:	887a      	ldrh	r2, [r7, #2]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ab4:	e002      	b.n	8002abc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ab6:	887a      	ldrh	r2, [r7, #2]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002acc:	4b05      	ldr	r3, [pc, #20]	; (8002ae4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a04      	ldr	r2, [pc, #16]	; (8002ae4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad6:	6013      	str	r3, [r2, #0]
}
 8002ad8:	bf00      	nop
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	40007000 	.word	0x40007000

08002ae8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002aec:	4b04      	ldr	r3, [pc, #16]	; (8002b00 <HAL_PWREx_GetVoltageRange+0x18>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	40007000 	.word	0x40007000

08002b04 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b12:	d130      	bne.n	8002b76 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b14:	4b23      	ldr	r3, [pc, #140]	; (8002ba4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b20:	d038      	beq.n	8002b94 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b22:	4b20      	ldr	r3, [pc, #128]	; (8002ba4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b2a:	4a1e      	ldr	r2, [pc, #120]	; (8002ba4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b30:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b32:	4b1d      	ldr	r3, [pc, #116]	; (8002ba8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2232      	movs	r2, #50	; 0x32
 8002b38:	fb02 f303 	mul.w	r3, r2, r3
 8002b3c:	4a1b      	ldr	r2, [pc, #108]	; (8002bac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b42:	0c9b      	lsrs	r3, r3, #18
 8002b44:	3301      	adds	r3, #1
 8002b46:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b48:	e002      	b.n	8002b50 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	3b01      	subs	r3, #1
 8002b4e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b50:	4b14      	ldr	r3, [pc, #80]	; (8002ba4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b5c:	d102      	bne.n	8002b64 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1f2      	bne.n	8002b4a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b64:	4b0f      	ldr	r3, [pc, #60]	; (8002ba4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b70:	d110      	bne.n	8002b94 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e00f      	b.n	8002b96 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b76:	4b0b      	ldr	r3, [pc, #44]	; (8002ba4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b82:	d007      	beq.n	8002b94 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b84:	4b07      	ldr	r3, [pc, #28]	; (8002ba4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b8c:	4a05      	ldr	r2, [pc, #20]	; (8002ba4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b92:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3714      	adds	r7, #20
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	40007000 	.word	0x40007000
 8002ba8:	20000094 	.word	0x20000094
 8002bac:	431bde83 	.word	0x431bde83

08002bb0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b088      	sub	sp, #32
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d102      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	f000 bc02 	b.w	80033c8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bc4:	4b96      	ldr	r3, [pc, #600]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f003 030c 	and.w	r3, r3, #12
 8002bcc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bce:	4b94      	ldr	r3, [pc, #592]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	f003 0303 	and.w	r3, r3, #3
 8002bd6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0310 	and.w	r3, r3, #16
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 80e4 	beq.w	8002dae <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d007      	beq.n	8002bfc <HAL_RCC_OscConfig+0x4c>
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	2b0c      	cmp	r3, #12
 8002bf0:	f040 808b 	bne.w	8002d0a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	f040 8087 	bne.w	8002d0a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bfc:	4b88      	ldr	r3, [pc, #544]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d005      	beq.n	8002c14 <HAL_RCC_OscConfig+0x64>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d101      	bne.n	8002c14 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e3d9      	b.n	80033c8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a1a      	ldr	r2, [r3, #32]
 8002c18:	4b81      	ldr	r3, [pc, #516]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0308 	and.w	r3, r3, #8
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d004      	beq.n	8002c2e <HAL_RCC_OscConfig+0x7e>
 8002c24:	4b7e      	ldr	r3, [pc, #504]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c2c:	e005      	b.n	8002c3a <HAL_RCC_OscConfig+0x8a>
 8002c2e:	4b7c      	ldr	r3, [pc, #496]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002c30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c34:	091b      	lsrs	r3, r3, #4
 8002c36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d223      	bcs.n	8002c86 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f000 fda8 	bl	8003798 <RCC_SetFlashLatencyFromMSIRange>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e3ba      	b.n	80033c8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c52:	4b73      	ldr	r3, [pc, #460]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a72      	ldr	r2, [pc, #456]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002c58:	f043 0308 	orr.w	r3, r3, #8
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	4b70      	ldr	r3, [pc, #448]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	496d      	ldr	r1, [pc, #436]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c70:	4b6b      	ldr	r3, [pc, #428]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	69db      	ldr	r3, [r3, #28]
 8002c7c:	021b      	lsls	r3, r3, #8
 8002c7e:	4968      	ldr	r1, [pc, #416]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	604b      	str	r3, [r1, #4]
 8002c84:	e025      	b.n	8002cd2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c86:	4b66      	ldr	r3, [pc, #408]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a65      	ldr	r2, [pc, #404]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002c8c:	f043 0308 	orr.w	r3, r3, #8
 8002c90:	6013      	str	r3, [r2, #0]
 8002c92:	4b63      	ldr	r3, [pc, #396]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	4960      	ldr	r1, [pc, #384]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ca4:	4b5e      	ldr	r3, [pc, #376]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	69db      	ldr	r3, [r3, #28]
 8002cb0:	021b      	lsls	r3, r3, #8
 8002cb2:	495b      	ldr	r1, [pc, #364]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d109      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f000 fd68 	bl	8003798 <RCC_SetFlashLatencyFromMSIRange>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e37a      	b.n	80033c8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cd2:	f000 fc81 	bl	80035d8 <HAL_RCC_GetSysClockFreq>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	4b51      	ldr	r3, [pc, #324]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	091b      	lsrs	r3, r3, #4
 8002cde:	f003 030f 	and.w	r3, r3, #15
 8002ce2:	4950      	ldr	r1, [pc, #320]	; (8002e24 <HAL_RCC_OscConfig+0x274>)
 8002ce4:	5ccb      	ldrb	r3, [r1, r3]
 8002ce6:	f003 031f 	and.w	r3, r3, #31
 8002cea:	fa22 f303 	lsr.w	r3, r2, r3
 8002cee:	4a4e      	ldr	r2, [pc, #312]	; (8002e28 <HAL_RCC_OscConfig+0x278>)
 8002cf0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002cf2:	4b4e      	ldr	r3, [pc, #312]	; (8002e2c <HAL_RCC_OscConfig+0x27c>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff fb28 	bl	800234c <HAL_InitTick>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d052      	beq.n	8002dac <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002d06:	7bfb      	ldrb	r3, [r7, #15]
 8002d08:	e35e      	b.n	80033c8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d032      	beq.n	8002d78 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d12:	4b43      	ldr	r3, [pc, #268]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a42      	ldr	r2, [pc, #264]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002d18:	f043 0301 	orr.w	r3, r3, #1
 8002d1c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d1e:	f7ff fc3f 	bl	80025a0 <HAL_GetTick>
 8002d22:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d24:	e008      	b.n	8002d38 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d26:	f7ff fc3b 	bl	80025a0 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e347      	b.n	80033c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d38:	4b39      	ldr	r3, [pc, #228]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d0f0      	beq.n	8002d26 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d44:	4b36      	ldr	r3, [pc, #216]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a35      	ldr	r2, [pc, #212]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002d4a:	f043 0308 	orr.w	r3, r3, #8
 8002d4e:	6013      	str	r3, [r2, #0]
 8002d50:	4b33      	ldr	r3, [pc, #204]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	4930      	ldr	r1, [pc, #192]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d62:	4b2f      	ldr	r3, [pc, #188]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	021b      	lsls	r3, r3, #8
 8002d70:	492b      	ldr	r1, [pc, #172]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	604b      	str	r3, [r1, #4]
 8002d76:	e01a      	b.n	8002dae <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d78:	4b29      	ldr	r3, [pc, #164]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a28      	ldr	r2, [pc, #160]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002d7e:	f023 0301 	bic.w	r3, r3, #1
 8002d82:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d84:	f7ff fc0c 	bl	80025a0 <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d8c:	f7ff fc08 	bl	80025a0 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e314      	b.n	80033c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d9e:	4b20      	ldr	r3, [pc, #128]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1f0      	bne.n	8002d8c <HAL_RCC_OscConfig+0x1dc>
 8002daa:	e000      	b.n	8002dae <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002dac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d073      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	2b08      	cmp	r3, #8
 8002dbe:	d005      	beq.n	8002dcc <HAL_RCC_OscConfig+0x21c>
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	2b0c      	cmp	r3, #12
 8002dc4:	d10e      	bne.n	8002de4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	2b03      	cmp	r3, #3
 8002dca:	d10b      	bne.n	8002de4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dcc:	4b14      	ldr	r3, [pc, #80]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d063      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x2f0>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d15f      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e2f1      	b.n	80033c8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dec:	d106      	bne.n	8002dfc <HAL_RCC_OscConfig+0x24c>
 8002dee:	4b0c      	ldr	r3, [pc, #48]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a0b      	ldr	r2, [pc, #44]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df8:	6013      	str	r3, [r2, #0]
 8002dfa:	e025      	b.n	8002e48 <HAL_RCC_OscConfig+0x298>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e04:	d114      	bne.n	8002e30 <HAL_RCC_OscConfig+0x280>
 8002e06:	4b06      	ldr	r3, [pc, #24]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a05      	ldr	r2, [pc, #20]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002e0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e10:	6013      	str	r3, [r2, #0]
 8002e12:	4b03      	ldr	r3, [pc, #12]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a02      	ldr	r2, [pc, #8]	; (8002e20 <HAL_RCC_OscConfig+0x270>)
 8002e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e1c:	6013      	str	r3, [r2, #0]
 8002e1e:	e013      	b.n	8002e48 <HAL_RCC_OscConfig+0x298>
 8002e20:	40021000 	.word	0x40021000
 8002e24:	08005a98 	.word	0x08005a98
 8002e28:	20000094 	.word	0x20000094
 8002e2c:	20000098 	.word	0x20000098
 8002e30:	4ba0      	ldr	r3, [pc, #640]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a9f      	ldr	r2, [pc, #636]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 8002e36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e3a:	6013      	str	r3, [r2, #0]
 8002e3c:	4b9d      	ldr	r3, [pc, #628]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a9c      	ldr	r2, [pc, #624]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 8002e42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d013      	beq.n	8002e78 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e50:	f7ff fba6 	bl	80025a0 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e58:	f7ff fba2 	bl	80025a0 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b64      	cmp	r3, #100	; 0x64
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e2ae      	b.n	80033c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e6a:	4b92      	ldr	r3, [pc, #584]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d0f0      	beq.n	8002e58 <HAL_RCC_OscConfig+0x2a8>
 8002e76:	e014      	b.n	8002ea2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e78:	f7ff fb92 	bl	80025a0 <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e80:	f7ff fb8e 	bl	80025a0 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b64      	cmp	r3, #100	; 0x64
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e29a      	b.n	80033c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e92:	4b88      	ldr	r3, [pc, #544]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1f0      	bne.n	8002e80 <HAL_RCC_OscConfig+0x2d0>
 8002e9e:	e000      	b.n	8002ea2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ea0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d060      	beq.n	8002f70 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	2b04      	cmp	r3, #4
 8002eb2:	d005      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x310>
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	2b0c      	cmp	r3, #12
 8002eb8:	d119      	bne.n	8002eee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d116      	bne.n	8002eee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ec0:	4b7c      	ldr	r3, [pc, #496]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d005      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x328>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d101      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e277      	b.n	80033c8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed8:	4b76      	ldr	r3, [pc, #472]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	061b      	lsls	r3, r3, #24
 8002ee6:	4973      	ldr	r1, [pc, #460]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002eec:	e040      	b.n	8002f70 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d023      	beq.n	8002f3e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ef6:	4b6f      	ldr	r3, [pc, #444]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a6e      	ldr	r2, [pc, #440]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 8002efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f02:	f7ff fb4d 	bl	80025a0 <HAL_GetTick>
 8002f06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f08:	e008      	b.n	8002f1c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f0a:	f7ff fb49 	bl	80025a0 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d901      	bls.n	8002f1c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e255      	b.n	80033c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f1c:	4b65      	ldr	r3, [pc, #404]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d0f0      	beq.n	8002f0a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f28:	4b62      	ldr	r3, [pc, #392]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	061b      	lsls	r3, r3, #24
 8002f36:	495f      	ldr	r1, [pc, #380]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	604b      	str	r3, [r1, #4]
 8002f3c:	e018      	b.n	8002f70 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f3e:	4b5d      	ldr	r3, [pc, #372]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a5c      	ldr	r2, [pc, #368]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 8002f44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f4a:	f7ff fb29 	bl	80025a0 <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f50:	e008      	b.n	8002f64 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f52:	f7ff fb25 	bl	80025a0 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e231      	b.n	80033c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f64:	4b53      	ldr	r3, [pc, #332]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1f0      	bne.n	8002f52 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0308 	and.w	r3, r3, #8
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d03c      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d01c      	beq.n	8002fbe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f84:	4b4b      	ldr	r3, [pc, #300]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 8002f86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f8a:	4a4a      	ldr	r2, [pc, #296]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 8002f8c:	f043 0301 	orr.w	r3, r3, #1
 8002f90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f94:	f7ff fb04 	bl	80025a0 <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f9c:	f7ff fb00 	bl	80025a0 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e20c      	b.n	80033c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fae:	4b41      	ldr	r3, [pc, #260]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 8002fb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d0ef      	beq.n	8002f9c <HAL_RCC_OscConfig+0x3ec>
 8002fbc:	e01b      	b.n	8002ff6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fbe:	4b3d      	ldr	r3, [pc, #244]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 8002fc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fc4:	4a3b      	ldr	r2, [pc, #236]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 8002fc6:	f023 0301 	bic.w	r3, r3, #1
 8002fca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fce:	f7ff fae7 	bl	80025a0 <HAL_GetTick>
 8002fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fd4:	e008      	b.n	8002fe8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fd6:	f7ff fae3 	bl	80025a0 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e1ef      	b.n	80033c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fe8:	4b32      	ldr	r3, [pc, #200]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 8002fea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1ef      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0304 	and.w	r3, r3, #4
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f000 80a6 	beq.w	8003150 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003004:	2300      	movs	r3, #0
 8003006:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003008:	4b2a      	ldr	r3, [pc, #168]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 800300a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800300c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d10d      	bne.n	8003030 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003014:	4b27      	ldr	r3, [pc, #156]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 8003016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003018:	4a26      	ldr	r2, [pc, #152]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 800301a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800301e:	6593      	str	r3, [r2, #88]	; 0x58
 8003020:	4b24      	ldr	r3, [pc, #144]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 8003022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003028:	60bb      	str	r3, [r7, #8]
 800302a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800302c:	2301      	movs	r3, #1
 800302e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003030:	4b21      	ldr	r3, [pc, #132]	; (80030b8 <HAL_RCC_OscConfig+0x508>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003038:	2b00      	cmp	r3, #0
 800303a:	d118      	bne.n	800306e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800303c:	4b1e      	ldr	r3, [pc, #120]	; (80030b8 <HAL_RCC_OscConfig+0x508>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a1d      	ldr	r2, [pc, #116]	; (80030b8 <HAL_RCC_OscConfig+0x508>)
 8003042:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003046:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003048:	f7ff faaa 	bl	80025a0 <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800304e:	e008      	b.n	8003062 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003050:	f7ff faa6 	bl	80025a0 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e1b2      	b.n	80033c8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003062:	4b15      	ldr	r3, [pc, #84]	; (80030b8 <HAL_RCC_OscConfig+0x508>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800306a:	2b00      	cmp	r3, #0
 800306c:	d0f0      	beq.n	8003050 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d108      	bne.n	8003088 <HAL_RCC_OscConfig+0x4d8>
 8003076:	4b0f      	ldr	r3, [pc, #60]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 8003078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800307c:	4a0d      	ldr	r2, [pc, #52]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 800307e:	f043 0301 	orr.w	r3, r3, #1
 8003082:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003086:	e029      	b.n	80030dc <HAL_RCC_OscConfig+0x52c>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	2b05      	cmp	r3, #5
 800308e:	d115      	bne.n	80030bc <HAL_RCC_OscConfig+0x50c>
 8003090:	4b08      	ldr	r3, [pc, #32]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 8003092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003096:	4a07      	ldr	r2, [pc, #28]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 8003098:	f043 0304 	orr.w	r3, r3, #4
 800309c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030a0:	4b04      	ldr	r3, [pc, #16]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 80030a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a6:	4a03      	ldr	r2, [pc, #12]	; (80030b4 <HAL_RCC_OscConfig+0x504>)
 80030a8:	f043 0301 	orr.w	r3, r3, #1
 80030ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030b0:	e014      	b.n	80030dc <HAL_RCC_OscConfig+0x52c>
 80030b2:	bf00      	nop
 80030b4:	40021000 	.word	0x40021000
 80030b8:	40007000 	.word	0x40007000
 80030bc:	4b9a      	ldr	r3, [pc, #616]	; (8003328 <HAL_RCC_OscConfig+0x778>)
 80030be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c2:	4a99      	ldr	r2, [pc, #612]	; (8003328 <HAL_RCC_OscConfig+0x778>)
 80030c4:	f023 0301 	bic.w	r3, r3, #1
 80030c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030cc:	4b96      	ldr	r3, [pc, #600]	; (8003328 <HAL_RCC_OscConfig+0x778>)
 80030ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d2:	4a95      	ldr	r2, [pc, #596]	; (8003328 <HAL_RCC_OscConfig+0x778>)
 80030d4:	f023 0304 	bic.w	r3, r3, #4
 80030d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d016      	beq.n	8003112 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e4:	f7ff fa5c 	bl	80025a0 <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030ea:	e00a      	b.n	8003102 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ec:	f7ff fa58 	bl	80025a0 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e162      	b.n	80033c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003102:	4b89      	ldr	r3, [pc, #548]	; (8003328 <HAL_RCC_OscConfig+0x778>)
 8003104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d0ed      	beq.n	80030ec <HAL_RCC_OscConfig+0x53c>
 8003110:	e015      	b.n	800313e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003112:	f7ff fa45 	bl	80025a0 <HAL_GetTick>
 8003116:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003118:	e00a      	b.n	8003130 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800311a:	f7ff fa41 	bl	80025a0 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	f241 3288 	movw	r2, #5000	; 0x1388
 8003128:	4293      	cmp	r3, r2
 800312a:	d901      	bls.n	8003130 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e14b      	b.n	80033c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003130:	4b7d      	ldr	r3, [pc, #500]	; (8003328 <HAL_RCC_OscConfig+0x778>)
 8003132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1ed      	bne.n	800311a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800313e:	7ffb      	ldrb	r3, [r7, #31]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d105      	bne.n	8003150 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003144:	4b78      	ldr	r3, [pc, #480]	; (8003328 <HAL_RCC_OscConfig+0x778>)
 8003146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003148:	4a77      	ldr	r2, [pc, #476]	; (8003328 <HAL_RCC_OscConfig+0x778>)
 800314a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800314e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0320 	and.w	r3, r3, #32
 8003158:	2b00      	cmp	r3, #0
 800315a:	d03c      	beq.n	80031d6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003160:	2b00      	cmp	r3, #0
 8003162:	d01c      	beq.n	800319e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003164:	4b70      	ldr	r3, [pc, #448]	; (8003328 <HAL_RCC_OscConfig+0x778>)
 8003166:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800316a:	4a6f      	ldr	r2, [pc, #444]	; (8003328 <HAL_RCC_OscConfig+0x778>)
 800316c:	f043 0301 	orr.w	r3, r3, #1
 8003170:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003174:	f7ff fa14 	bl	80025a0 <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800317c:	f7ff fa10 	bl	80025a0 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e11c      	b.n	80033c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800318e:	4b66      	ldr	r3, [pc, #408]	; (8003328 <HAL_RCC_OscConfig+0x778>)
 8003190:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0ef      	beq.n	800317c <HAL_RCC_OscConfig+0x5cc>
 800319c:	e01b      	b.n	80031d6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800319e:	4b62      	ldr	r3, [pc, #392]	; (8003328 <HAL_RCC_OscConfig+0x778>)
 80031a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031a4:	4a60      	ldr	r2, [pc, #384]	; (8003328 <HAL_RCC_OscConfig+0x778>)
 80031a6:	f023 0301 	bic.w	r3, r3, #1
 80031aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ae:	f7ff f9f7 	bl	80025a0 <HAL_GetTick>
 80031b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031b4:	e008      	b.n	80031c8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031b6:	f7ff f9f3 	bl	80025a0 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e0ff      	b.n	80033c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80031c8:	4b57      	ldr	r3, [pc, #348]	; (8003328 <HAL_RCC_OscConfig+0x778>)
 80031ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1ef      	bne.n	80031b6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 80f3 	beq.w	80033c6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	f040 80c9 	bne.w	800337c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80031ea:	4b4f      	ldr	r3, [pc, #316]	; (8003328 <HAL_RCC_OscConfig+0x778>)
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	f003 0203 	and.w	r2, r3, #3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d12c      	bne.n	8003258 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003208:	3b01      	subs	r3, #1
 800320a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800320c:	429a      	cmp	r2, r3
 800320e:	d123      	bne.n	8003258 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800321a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800321c:	429a      	cmp	r2, r3
 800321e:	d11b      	bne.n	8003258 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800322c:	429a      	cmp	r2, r3
 800322e:	d113      	bne.n	8003258 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323a:	085b      	lsrs	r3, r3, #1
 800323c:	3b01      	subs	r3, #1
 800323e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003240:	429a      	cmp	r2, r3
 8003242:	d109      	bne.n	8003258 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	085b      	lsrs	r3, r3, #1
 8003250:	3b01      	subs	r3, #1
 8003252:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003254:	429a      	cmp	r2, r3
 8003256:	d06b      	beq.n	8003330 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	2b0c      	cmp	r3, #12
 800325c:	d062      	beq.n	8003324 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800325e:	4b32      	ldr	r3, [pc, #200]	; (8003328 <HAL_RCC_OscConfig+0x778>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e0ac      	b.n	80033c8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800326e:	4b2e      	ldr	r3, [pc, #184]	; (8003328 <HAL_RCC_OscConfig+0x778>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a2d      	ldr	r2, [pc, #180]	; (8003328 <HAL_RCC_OscConfig+0x778>)
 8003274:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003278:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800327a:	f7ff f991 	bl	80025a0 <HAL_GetTick>
 800327e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003280:	e008      	b.n	8003294 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003282:	f7ff f98d 	bl	80025a0 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d901      	bls.n	8003294 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e099      	b.n	80033c8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003294:	4b24      	ldr	r3, [pc, #144]	; (8003328 <HAL_RCC_OscConfig+0x778>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1f0      	bne.n	8003282 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032a0:	4b21      	ldr	r3, [pc, #132]	; (8003328 <HAL_RCC_OscConfig+0x778>)
 80032a2:	68da      	ldr	r2, [r3, #12]
 80032a4:	4b21      	ldr	r3, [pc, #132]	; (800332c <HAL_RCC_OscConfig+0x77c>)
 80032a6:	4013      	ands	r3, r2
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80032b0:	3a01      	subs	r2, #1
 80032b2:	0112      	lsls	r2, r2, #4
 80032b4:	4311      	orrs	r1, r2
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032ba:	0212      	lsls	r2, r2, #8
 80032bc:	4311      	orrs	r1, r2
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80032c2:	0852      	lsrs	r2, r2, #1
 80032c4:	3a01      	subs	r2, #1
 80032c6:	0552      	lsls	r2, r2, #21
 80032c8:	4311      	orrs	r1, r2
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80032ce:	0852      	lsrs	r2, r2, #1
 80032d0:	3a01      	subs	r2, #1
 80032d2:	0652      	lsls	r2, r2, #25
 80032d4:	4311      	orrs	r1, r2
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032da:	06d2      	lsls	r2, r2, #27
 80032dc:	430a      	orrs	r2, r1
 80032de:	4912      	ldr	r1, [pc, #72]	; (8003328 <HAL_RCC_OscConfig+0x778>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80032e4:	4b10      	ldr	r3, [pc, #64]	; (8003328 <HAL_RCC_OscConfig+0x778>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a0f      	ldr	r2, [pc, #60]	; (8003328 <HAL_RCC_OscConfig+0x778>)
 80032ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032ee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032f0:	4b0d      	ldr	r3, [pc, #52]	; (8003328 <HAL_RCC_OscConfig+0x778>)
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	4a0c      	ldr	r2, [pc, #48]	; (8003328 <HAL_RCC_OscConfig+0x778>)
 80032f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032fc:	f7ff f950 	bl	80025a0 <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003304:	f7ff f94c 	bl	80025a0 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e058      	b.n	80033c8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003316:	4b04      	ldr	r3, [pc, #16]	; (8003328 <HAL_RCC_OscConfig+0x778>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d0f0      	beq.n	8003304 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003322:	e050      	b.n	80033c6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e04f      	b.n	80033c8 <HAL_RCC_OscConfig+0x818>
 8003328:	40021000 	.word	0x40021000
 800332c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003330:	4b27      	ldr	r3, [pc, #156]	; (80033d0 <HAL_RCC_OscConfig+0x820>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d144      	bne.n	80033c6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800333c:	4b24      	ldr	r3, [pc, #144]	; (80033d0 <HAL_RCC_OscConfig+0x820>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a23      	ldr	r2, [pc, #140]	; (80033d0 <HAL_RCC_OscConfig+0x820>)
 8003342:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003346:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003348:	4b21      	ldr	r3, [pc, #132]	; (80033d0 <HAL_RCC_OscConfig+0x820>)
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	4a20      	ldr	r2, [pc, #128]	; (80033d0 <HAL_RCC_OscConfig+0x820>)
 800334e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003352:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003354:	f7ff f924 	bl	80025a0 <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800335c:	f7ff f920 	bl	80025a0 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b02      	cmp	r3, #2
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e02c      	b.n	80033c8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800336e:	4b18      	ldr	r3, [pc, #96]	; (80033d0 <HAL_RCC_OscConfig+0x820>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d0f0      	beq.n	800335c <HAL_RCC_OscConfig+0x7ac>
 800337a:	e024      	b.n	80033c6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	2b0c      	cmp	r3, #12
 8003380:	d01f      	beq.n	80033c2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003382:	4b13      	ldr	r3, [pc, #76]	; (80033d0 <HAL_RCC_OscConfig+0x820>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a12      	ldr	r2, [pc, #72]	; (80033d0 <HAL_RCC_OscConfig+0x820>)
 8003388:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800338c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800338e:	f7ff f907 	bl	80025a0 <HAL_GetTick>
 8003392:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003394:	e008      	b.n	80033a8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003396:	f7ff f903 	bl	80025a0 <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d901      	bls.n	80033a8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e00f      	b.n	80033c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033a8:	4b09      	ldr	r3, [pc, #36]	; (80033d0 <HAL_RCC_OscConfig+0x820>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1f0      	bne.n	8003396 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80033b4:	4b06      	ldr	r3, [pc, #24]	; (80033d0 <HAL_RCC_OscConfig+0x820>)
 80033b6:	68da      	ldr	r2, [r3, #12]
 80033b8:	4905      	ldr	r1, [pc, #20]	; (80033d0 <HAL_RCC_OscConfig+0x820>)
 80033ba:	4b06      	ldr	r3, [pc, #24]	; (80033d4 <HAL_RCC_OscConfig+0x824>)
 80033bc:	4013      	ands	r3, r2
 80033be:	60cb      	str	r3, [r1, #12]
 80033c0:	e001      	b.n	80033c6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e000      	b.n	80033c8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3720      	adds	r7, #32
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	40021000 	.word	0x40021000
 80033d4:	feeefffc 	.word	0xfeeefffc

080033d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d101      	bne.n	80033ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e0e7      	b.n	80035bc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033ec:	4b75      	ldr	r3, [pc, #468]	; (80035c4 <HAL_RCC_ClockConfig+0x1ec>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0307 	and.w	r3, r3, #7
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d910      	bls.n	800341c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033fa:	4b72      	ldr	r3, [pc, #456]	; (80035c4 <HAL_RCC_ClockConfig+0x1ec>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f023 0207 	bic.w	r2, r3, #7
 8003402:	4970      	ldr	r1, [pc, #448]	; (80035c4 <HAL_RCC_ClockConfig+0x1ec>)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	4313      	orrs	r3, r2
 8003408:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800340a:	4b6e      	ldr	r3, [pc, #440]	; (80035c4 <HAL_RCC_ClockConfig+0x1ec>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0307 	and.w	r3, r3, #7
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	429a      	cmp	r2, r3
 8003416:	d001      	beq.n	800341c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e0cf      	b.n	80035bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d010      	beq.n	800344a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	4b66      	ldr	r3, [pc, #408]	; (80035c8 <HAL_RCC_ClockConfig+0x1f0>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003434:	429a      	cmp	r2, r3
 8003436:	d908      	bls.n	800344a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003438:	4b63      	ldr	r3, [pc, #396]	; (80035c8 <HAL_RCC_ClockConfig+0x1f0>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	4960      	ldr	r1, [pc, #384]	; (80035c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003446:	4313      	orrs	r3, r2
 8003448:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d04c      	beq.n	80034f0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	2b03      	cmp	r3, #3
 800345c:	d107      	bne.n	800346e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800345e:	4b5a      	ldr	r3, [pc, #360]	; (80035c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d121      	bne.n	80034ae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e0a6      	b.n	80035bc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	2b02      	cmp	r3, #2
 8003474:	d107      	bne.n	8003486 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003476:	4b54      	ldr	r3, [pc, #336]	; (80035c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d115      	bne.n	80034ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e09a      	b.n	80035bc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d107      	bne.n	800349e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800348e:	4b4e      	ldr	r3, [pc, #312]	; (80035c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d109      	bne.n	80034ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e08e      	b.n	80035bc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800349e:	4b4a      	ldr	r3, [pc, #296]	; (80035c8 <HAL_RCC_ClockConfig+0x1f0>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e086      	b.n	80035bc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034ae:	4b46      	ldr	r3, [pc, #280]	; (80035c8 <HAL_RCC_ClockConfig+0x1f0>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f023 0203 	bic.w	r2, r3, #3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	4943      	ldr	r1, [pc, #268]	; (80035c8 <HAL_RCC_ClockConfig+0x1f0>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034c0:	f7ff f86e 	bl	80025a0 <HAL_GetTick>
 80034c4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034c6:	e00a      	b.n	80034de <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034c8:	f7ff f86a 	bl	80025a0 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e06e      	b.n	80035bc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034de:	4b3a      	ldr	r3, [pc, #232]	; (80035c8 <HAL_RCC_ClockConfig+0x1f0>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f003 020c 	and.w	r2, r3, #12
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d1eb      	bne.n	80034c8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d010      	beq.n	800351e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	4b31      	ldr	r3, [pc, #196]	; (80035c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003508:	429a      	cmp	r2, r3
 800350a:	d208      	bcs.n	800351e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800350c:	4b2e      	ldr	r3, [pc, #184]	; (80035c8 <HAL_RCC_ClockConfig+0x1f0>)
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	492b      	ldr	r1, [pc, #172]	; (80035c8 <HAL_RCC_ClockConfig+0x1f0>)
 800351a:	4313      	orrs	r3, r2
 800351c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800351e:	4b29      	ldr	r3, [pc, #164]	; (80035c4 <HAL_RCC_ClockConfig+0x1ec>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0307 	and.w	r3, r3, #7
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	429a      	cmp	r2, r3
 800352a:	d210      	bcs.n	800354e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800352c:	4b25      	ldr	r3, [pc, #148]	; (80035c4 <HAL_RCC_ClockConfig+0x1ec>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f023 0207 	bic.w	r2, r3, #7
 8003534:	4923      	ldr	r1, [pc, #140]	; (80035c4 <HAL_RCC_ClockConfig+0x1ec>)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	4313      	orrs	r3, r2
 800353a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800353c:	4b21      	ldr	r3, [pc, #132]	; (80035c4 <HAL_RCC_ClockConfig+0x1ec>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0307 	and.w	r3, r3, #7
 8003544:	683a      	ldr	r2, [r7, #0]
 8003546:	429a      	cmp	r2, r3
 8003548:	d001      	beq.n	800354e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e036      	b.n	80035bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0304 	and.w	r3, r3, #4
 8003556:	2b00      	cmp	r3, #0
 8003558:	d008      	beq.n	800356c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800355a:	4b1b      	ldr	r3, [pc, #108]	; (80035c8 <HAL_RCC_ClockConfig+0x1f0>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	4918      	ldr	r1, [pc, #96]	; (80035c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003568:	4313      	orrs	r3, r2
 800356a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0308 	and.w	r3, r3, #8
 8003574:	2b00      	cmp	r3, #0
 8003576:	d009      	beq.n	800358c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003578:	4b13      	ldr	r3, [pc, #76]	; (80035c8 <HAL_RCC_ClockConfig+0x1f0>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	4910      	ldr	r1, [pc, #64]	; (80035c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003588:	4313      	orrs	r3, r2
 800358a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800358c:	f000 f824 	bl	80035d8 <HAL_RCC_GetSysClockFreq>
 8003590:	4602      	mov	r2, r0
 8003592:	4b0d      	ldr	r3, [pc, #52]	; (80035c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	091b      	lsrs	r3, r3, #4
 8003598:	f003 030f 	and.w	r3, r3, #15
 800359c:	490b      	ldr	r1, [pc, #44]	; (80035cc <HAL_RCC_ClockConfig+0x1f4>)
 800359e:	5ccb      	ldrb	r3, [r1, r3]
 80035a0:	f003 031f 	and.w	r3, r3, #31
 80035a4:	fa22 f303 	lsr.w	r3, r2, r3
 80035a8:	4a09      	ldr	r2, [pc, #36]	; (80035d0 <HAL_RCC_ClockConfig+0x1f8>)
 80035aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80035ac:	4b09      	ldr	r3, [pc, #36]	; (80035d4 <HAL_RCC_ClockConfig+0x1fc>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7fe fecb 	bl	800234c <HAL_InitTick>
 80035b6:	4603      	mov	r3, r0
 80035b8:	72fb      	strb	r3, [r7, #11]

  return status;
 80035ba:	7afb      	ldrb	r3, [r7, #11]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	40022000 	.word	0x40022000
 80035c8:	40021000 	.word	0x40021000
 80035cc:	08005a98 	.word	0x08005a98
 80035d0:	20000094 	.word	0x20000094
 80035d4:	20000098 	.word	0x20000098

080035d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	b089      	sub	sp, #36	; 0x24
 80035dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80035de:	2300      	movs	r3, #0
 80035e0:	61fb      	str	r3, [r7, #28]
 80035e2:	2300      	movs	r3, #0
 80035e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035e6:	4b3e      	ldr	r3, [pc, #248]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f003 030c 	and.w	r3, r3, #12
 80035ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035f0:	4b3b      	ldr	r3, [pc, #236]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	f003 0303 	and.w	r3, r3, #3
 80035f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d005      	beq.n	800360c <HAL_RCC_GetSysClockFreq+0x34>
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	2b0c      	cmp	r3, #12
 8003604:	d121      	bne.n	800364a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d11e      	bne.n	800364a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800360c:	4b34      	ldr	r3, [pc, #208]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0308 	and.w	r3, r3, #8
 8003614:	2b00      	cmp	r3, #0
 8003616:	d107      	bne.n	8003628 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003618:	4b31      	ldr	r3, [pc, #196]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800361a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800361e:	0a1b      	lsrs	r3, r3, #8
 8003620:	f003 030f 	and.w	r3, r3, #15
 8003624:	61fb      	str	r3, [r7, #28]
 8003626:	e005      	b.n	8003634 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003628:	4b2d      	ldr	r3, [pc, #180]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	091b      	lsrs	r3, r3, #4
 800362e:	f003 030f 	and.w	r3, r3, #15
 8003632:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003634:	4a2b      	ldr	r2, [pc, #172]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800363c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10d      	bne.n	8003660 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003648:	e00a      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	2b04      	cmp	r3, #4
 800364e:	d102      	bne.n	8003656 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003650:	4b25      	ldr	r3, [pc, #148]	; (80036e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003652:	61bb      	str	r3, [r7, #24]
 8003654:	e004      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	2b08      	cmp	r3, #8
 800365a:	d101      	bne.n	8003660 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800365c:	4b23      	ldr	r3, [pc, #140]	; (80036ec <HAL_RCC_GetSysClockFreq+0x114>)
 800365e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	2b0c      	cmp	r3, #12
 8003664:	d134      	bne.n	80036d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003666:	4b1e      	ldr	r3, [pc, #120]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	f003 0303 	and.w	r3, r3, #3
 800366e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	2b02      	cmp	r3, #2
 8003674:	d003      	beq.n	800367e <HAL_RCC_GetSysClockFreq+0xa6>
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	2b03      	cmp	r3, #3
 800367a:	d003      	beq.n	8003684 <HAL_RCC_GetSysClockFreq+0xac>
 800367c:	e005      	b.n	800368a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800367e:	4b1a      	ldr	r3, [pc, #104]	; (80036e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003680:	617b      	str	r3, [r7, #20]
      break;
 8003682:	e005      	b.n	8003690 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003684:	4b19      	ldr	r3, [pc, #100]	; (80036ec <HAL_RCC_GetSysClockFreq+0x114>)
 8003686:	617b      	str	r3, [r7, #20]
      break;
 8003688:	e002      	b.n	8003690 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	617b      	str	r3, [r7, #20]
      break;
 800368e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003690:	4b13      	ldr	r3, [pc, #76]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	091b      	lsrs	r3, r3, #4
 8003696:	f003 0307 	and.w	r3, r3, #7
 800369a:	3301      	adds	r3, #1
 800369c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800369e:	4b10      	ldr	r3, [pc, #64]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	0a1b      	lsrs	r3, r3, #8
 80036a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	fb03 f202 	mul.w	r2, r3, r2
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036b6:	4b0a      	ldr	r3, [pc, #40]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	0e5b      	lsrs	r3, r3, #25
 80036bc:	f003 0303 	and.w	r3, r3, #3
 80036c0:	3301      	adds	r3, #1
 80036c2:	005b      	lsls	r3, r3, #1
 80036c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80036d0:	69bb      	ldr	r3, [r7, #24]
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3724      	adds	r7, #36	; 0x24
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	40021000 	.word	0x40021000
 80036e4:	08005ab0 	.word	0x08005ab0
 80036e8:	00f42400 	.word	0x00f42400
 80036ec:	007a1200 	.word	0x007a1200

080036f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036f4:	4b03      	ldr	r3, [pc, #12]	; (8003704 <HAL_RCC_GetHCLKFreq+0x14>)
 80036f6:	681b      	ldr	r3, [r3, #0]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	20000094 	.word	0x20000094

08003708 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800370c:	f7ff fff0 	bl	80036f0 <HAL_RCC_GetHCLKFreq>
 8003710:	4602      	mov	r2, r0
 8003712:	4b06      	ldr	r3, [pc, #24]	; (800372c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	0a1b      	lsrs	r3, r3, #8
 8003718:	f003 0307 	and.w	r3, r3, #7
 800371c:	4904      	ldr	r1, [pc, #16]	; (8003730 <HAL_RCC_GetPCLK1Freq+0x28>)
 800371e:	5ccb      	ldrb	r3, [r1, r3]
 8003720:	f003 031f 	and.w	r3, r3, #31
 8003724:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003728:	4618      	mov	r0, r3
 800372a:	bd80      	pop	{r7, pc}
 800372c:	40021000 	.word	0x40021000
 8003730:	08005aa8 	.word	0x08005aa8

08003734 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	220f      	movs	r2, #15
 8003742:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003744:	4b12      	ldr	r3, [pc, #72]	; (8003790 <HAL_RCC_GetClockConfig+0x5c>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f003 0203 	and.w	r2, r3, #3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003750:	4b0f      	ldr	r3, [pc, #60]	; (8003790 <HAL_RCC_GetClockConfig+0x5c>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800375c:	4b0c      	ldr	r3, [pc, #48]	; (8003790 <HAL_RCC_GetClockConfig+0x5c>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003768:	4b09      	ldr	r3, [pc, #36]	; (8003790 <HAL_RCC_GetClockConfig+0x5c>)
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	08db      	lsrs	r3, r3, #3
 800376e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003776:	4b07      	ldr	r3, [pc, #28]	; (8003794 <HAL_RCC_GetClockConfig+0x60>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0207 	and.w	r2, r3, #7
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	601a      	str	r2, [r3, #0]
}
 8003782:	bf00      	nop
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	40021000 	.word	0x40021000
 8003794:	40022000 	.word	0x40022000

08003798 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80037a0:	2300      	movs	r3, #0
 80037a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80037a4:	4b2a      	ldr	r3, [pc, #168]	; (8003850 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d003      	beq.n	80037b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80037b0:	f7ff f99a 	bl	8002ae8 <HAL_PWREx_GetVoltageRange>
 80037b4:	6178      	str	r0, [r7, #20]
 80037b6:	e014      	b.n	80037e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80037b8:	4b25      	ldr	r3, [pc, #148]	; (8003850 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037bc:	4a24      	ldr	r2, [pc, #144]	; (8003850 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037c2:	6593      	str	r3, [r2, #88]	; 0x58
 80037c4:	4b22      	ldr	r3, [pc, #136]	; (8003850 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037cc:	60fb      	str	r3, [r7, #12]
 80037ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80037d0:	f7ff f98a 	bl	8002ae8 <HAL_PWREx_GetVoltageRange>
 80037d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80037d6:	4b1e      	ldr	r3, [pc, #120]	; (8003850 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037da:	4a1d      	ldr	r2, [pc, #116]	; (8003850 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037e0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037e8:	d10b      	bne.n	8003802 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2b80      	cmp	r3, #128	; 0x80
 80037ee:	d919      	bls.n	8003824 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2ba0      	cmp	r3, #160	; 0xa0
 80037f4:	d902      	bls.n	80037fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80037f6:	2302      	movs	r3, #2
 80037f8:	613b      	str	r3, [r7, #16]
 80037fa:	e013      	b.n	8003824 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80037fc:	2301      	movs	r3, #1
 80037fe:	613b      	str	r3, [r7, #16]
 8003800:	e010      	b.n	8003824 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2b80      	cmp	r3, #128	; 0x80
 8003806:	d902      	bls.n	800380e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003808:	2303      	movs	r3, #3
 800380a:	613b      	str	r3, [r7, #16]
 800380c:	e00a      	b.n	8003824 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2b80      	cmp	r3, #128	; 0x80
 8003812:	d102      	bne.n	800381a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003814:	2302      	movs	r3, #2
 8003816:	613b      	str	r3, [r7, #16]
 8003818:	e004      	b.n	8003824 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2b70      	cmp	r3, #112	; 0x70
 800381e:	d101      	bne.n	8003824 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003820:	2301      	movs	r3, #1
 8003822:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003824:	4b0b      	ldr	r3, [pc, #44]	; (8003854 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f023 0207 	bic.w	r2, r3, #7
 800382c:	4909      	ldr	r1, [pc, #36]	; (8003854 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	4313      	orrs	r3, r2
 8003832:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003834:	4b07      	ldr	r3, [pc, #28]	; (8003854 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	429a      	cmp	r2, r3
 8003840:	d001      	beq.n	8003846 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e000      	b.n	8003848 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3718      	adds	r7, #24
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	40021000 	.word	0x40021000
 8003854:	40022000 	.word	0x40022000

08003858 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003860:	2300      	movs	r3, #0
 8003862:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003864:	2300      	movs	r3, #0
 8003866:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003870:	2b00      	cmp	r3, #0
 8003872:	d031      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003878:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800387c:	d01a      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800387e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003882:	d814      	bhi.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003884:	2b00      	cmp	r3, #0
 8003886:	d009      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003888:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800388c:	d10f      	bne.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800388e:	4b5d      	ldr	r3, [pc, #372]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	4a5c      	ldr	r2, [pc, #368]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003898:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800389a:	e00c      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	3304      	adds	r3, #4
 80038a0:	2100      	movs	r1, #0
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 f9de 	bl	8003c64 <RCCEx_PLLSAI1_Config>
 80038a8:	4603      	mov	r3, r0
 80038aa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038ac:	e003      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	74fb      	strb	r3, [r7, #19]
      break;
 80038b2:	e000      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80038b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038b6:	7cfb      	ldrb	r3, [r7, #19]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10b      	bne.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038bc:	4b51      	ldr	r3, [pc, #324]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ca:	494e      	ldr	r1, [pc, #312]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80038d2:	e001      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d4:	7cfb      	ldrb	r3, [r7, #19]
 80038d6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 809e 	beq.w	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038e6:	2300      	movs	r3, #0
 80038e8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80038ea:	4b46      	ldr	r3, [pc, #280]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80038ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80038f6:	2301      	movs	r3, #1
 80038f8:	e000      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80038fa:	2300      	movs	r3, #0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00d      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003900:	4b40      	ldr	r3, [pc, #256]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003904:	4a3f      	ldr	r2, [pc, #252]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800390a:	6593      	str	r3, [r2, #88]	; 0x58
 800390c:	4b3d      	ldr	r3, [pc, #244]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800390e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003914:	60bb      	str	r3, [r7, #8]
 8003916:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003918:	2301      	movs	r3, #1
 800391a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800391c:	4b3a      	ldr	r3, [pc, #232]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a39      	ldr	r2, [pc, #228]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003926:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003928:	f7fe fe3a 	bl	80025a0 <HAL_GetTick>
 800392c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800392e:	e009      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003930:	f7fe fe36 	bl	80025a0 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b02      	cmp	r3, #2
 800393c:	d902      	bls.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	74fb      	strb	r3, [r7, #19]
        break;
 8003942:	e005      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003944:	4b30      	ldr	r3, [pc, #192]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800394c:	2b00      	cmp	r3, #0
 800394e:	d0ef      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003950:	7cfb      	ldrb	r3, [r7, #19]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d15a      	bne.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003956:	4b2b      	ldr	r3, [pc, #172]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003960:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d01e      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	429a      	cmp	r2, r3
 8003970:	d019      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003972:	4b24      	ldr	r3, [pc, #144]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003978:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800397c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800397e:	4b21      	ldr	r3, [pc, #132]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003984:	4a1f      	ldr	r2, [pc, #124]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003986:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800398a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800398e:	4b1d      	ldr	r3, [pc, #116]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003994:	4a1b      	ldr	r2, [pc, #108]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003996:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800399a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800399e:	4a19      	ldr	r2, [pc, #100]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d016      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b0:	f7fe fdf6 	bl	80025a0 <HAL_GetTick>
 80039b4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039b6:	e00b      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039b8:	f7fe fdf2 	bl	80025a0 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d902      	bls.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	74fb      	strb	r3, [r7, #19]
            break;
 80039ce:	e006      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039d0:	4b0c      	ldr	r3, [pc, #48]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d0ec      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80039de:	7cfb      	ldrb	r3, [r7, #19]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10b      	bne.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039e4:	4b07      	ldr	r3, [pc, #28]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039f2:	4904      	ldr	r1, [pc, #16]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80039fa:	e009      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039fc:	7cfb      	ldrb	r3, [r7, #19]
 80039fe:	74bb      	strb	r3, [r7, #18]
 8003a00:	e006      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003a02:	bf00      	nop
 8003a04:	40021000 	.word	0x40021000
 8003a08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a0c:	7cfb      	ldrb	r3, [r7, #19]
 8003a0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a10:	7c7b      	ldrb	r3, [r7, #17]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d105      	bne.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a16:	4b8a      	ldr	r3, [pc, #552]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1a:	4a89      	ldr	r2, [pc, #548]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a20:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00a      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a2e:	4b84      	ldr	r3, [pc, #528]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a34:	f023 0203 	bic.w	r2, r3, #3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	4980      	ldr	r1, [pc, #512]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d00a      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a50:	4b7b      	ldr	r3, [pc, #492]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a56:	f023 020c 	bic.w	r2, r3, #12
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5e:	4978      	ldr	r1, [pc, #480]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0320 	and.w	r3, r3, #32
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00a      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a72:	4b73      	ldr	r3, [pc, #460]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a78:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a80:	496f      	ldr	r1, [pc, #444]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00a      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a94:	4b6a      	ldr	r3, [pc, #424]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a9a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aa2:	4967      	ldr	r1, [pc, #412]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00a      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ab6:	4b62      	ldr	r3, [pc, #392]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003abc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac4:	495e      	ldr	r1, [pc, #376]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00a      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ad8:	4b59      	ldr	r3, [pc, #356]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ade:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae6:	4956      	ldr	r1, [pc, #344]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00a      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003afa:	4b51      	ldr	r3, [pc, #324]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b08:	494d      	ldr	r1, [pc, #308]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d028      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b1c:	4b48      	ldr	r3, [pc, #288]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b22:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	4945      	ldr	r1, [pc, #276]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b3a:	d106      	bne.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b3c:	4b40      	ldr	r3, [pc, #256]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	4a3f      	ldr	r2, [pc, #252]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b46:	60d3      	str	r3, [r2, #12]
 8003b48:	e011      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b52:	d10c      	bne.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	3304      	adds	r3, #4
 8003b58:	2101      	movs	r1, #1
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 f882 	bl	8003c64 <RCCEx_PLLSAI1_Config>
 8003b60:	4603      	mov	r3, r0
 8003b62:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003b64:	7cfb      	ldrb	r3, [r7, #19]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003b6a:	7cfb      	ldrb	r3, [r7, #19]
 8003b6c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d028      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b7a:	4b31      	ldr	r3, [pc, #196]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b80:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b88:	492d      	ldr	r1, [pc, #180]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b98:	d106      	bne.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b9a:	4b29      	ldr	r3, [pc, #164]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	4a28      	ldr	r2, [pc, #160]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ba0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ba4:	60d3      	str	r3, [r2, #12]
 8003ba6:	e011      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bb0:	d10c      	bne.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	3304      	adds	r3, #4
 8003bb6:	2101      	movs	r1, #1
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f000 f853 	bl	8003c64 <RCCEx_PLLSAI1_Config>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bc2:	7cfb      	ldrb	r3, [r7, #19]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003bc8:	7cfb      	ldrb	r3, [r7, #19]
 8003bca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d01c      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bd8:	4b19      	ldr	r3, [pc, #100]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bde:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003be6:	4916      	ldr	r1, [pc, #88]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bf6:	d10c      	bne.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	3304      	adds	r3, #4
 8003bfc:	2102      	movs	r1, #2
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f000 f830 	bl	8003c64 <RCCEx_PLLSAI1_Config>
 8003c04:	4603      	mov	r3, r0
 8003c06:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c08:	7cfb      	ldrb	r3, [r7, #19]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003c0e:	7cfb      	ldrb	r3, [r7, #19]
 8003c10:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00a      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c1e:	4b08      	ldr	r3, [pc, #32]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c24:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c2c:	4904      	ldr	r1, [pc, #16]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003c34:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3718      	adds	r7, #24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	40021000 	.word	0x40021000

08003c44 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003c44:	b480      	push	{r7}
 8003c46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003c48:	4b05      	ldr	r3, [pc, #20]	; (8003c60 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a04      	ldr	r2, [pc, #16]	; (8003c60 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003c4e:	f043 0304 	orr.w	r3, r3, #4
 8003c52:	6013      	str	r3, [r2, #0]
}
 8003c54:	bf00      	nop
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	40021000 	.word	0x40021000

08003c64 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c72:	4b74      	ldr	r3, [pc, #464]	; (8003e44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	f003 0303 	and.w	r3, r3, #3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d018      	beq.n	8003cb0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003c7e:	4b71      	ldr	r3, [pc, #452]	; (8003e44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	f003 0203 	and.w	r2, r3, #3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d10d      	bne.n	8003caa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
       ||
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d009      	beq.n	8003caa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003c96:	4b6b      	ldr	r3, [pc, #428]	; (8003e44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	091b      	lsrs	r3, r3, #4
 8003c9c:	f003 0307 	and.w	r3, r3, #7
 8003ca0:	1c5a      	adds	r2, r3, #1
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
       ||
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d047      	beq.n	8003d3a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	73fb      	strb	r3, [r7, #15]
 8003cae:	e044      	b.n	8003d3a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2b03      	cmp	r3, #3
 8003cb6:	d018      	beq.n	8003cea <RCCEx_PLLSAI1_Config+0x86>
 8003cb8:	2b03      	cmp	r3, #3
 8003cba:	d825      	bhi.n	8003d08 <RCCEx_PLLSAI1_Config+0xa4>
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d002      	beq.n	8003cc6 <RCCEx_PLLSAI1_Config+0x62>
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d009      	beq.n	8003cd8 <RCCEx_PLLSAI1_Config+0x74>
 8003cc4:	e020      	b.n	8003d08 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003cc6:	4b5f      	ldr	r3, [pc, #380]	; (8003e44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d11d      	bne.n	8003d0e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cd6:	e01a      	b.n	8003d0e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003cd8:	4b5a      	ldr	r3, [pc, #360]	; (8003e44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d116      	bne.n	8003d12 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ce8:	e013      	b.n	8003d12 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003cea:	4b56      	ldr	r3, [pc, #344]	; (8003e44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10f      	bne.n	8003d16 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003cf6:	4b53      	ldr	r3, [pc, #332]	; (8003e44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d109      	bne.n	8003d16 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d06:	e006      	b.n	8003d16 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d0c:	e004      	b.n	8003d18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d0e:	bf00      	nop
 8003d10:	e002      	b.n	8003d18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d12:	bf00      	nop
 8003d14:	e000      	b.n	8003d18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d16:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d18:	7bfb      	ldrb	r3, [r7, #15]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10d      	bne.n	8003d3a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d1e:	4b49      	ldr	r3, [pc, #292]	; (8003e44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6819      	ldr	r1, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	011b      	lsls	r3, r3, #4
 8003d32:	430b      	orrs	r3, r1
 8003d34:	4943      	ldr	r1, [pc, #268]	; (8003e44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d3a:	7bfb      	ldrb	r3, [r7, #15]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d17c      	bne.n	8003e3a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003d40:	4b40      	ldr	r3, [pc, #256]	; (8003e44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a3f      	ldr	r2, [pc, #252]	; (8003e44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d46:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d4c:	f7fe fc28 	bl	80025a0 <HAL_GetTick>
 8003d50:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d52:	e009      	b.n	8003d68 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d54:	f7fe fc24 	bl	80025a0 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d902      	bls.n	8003d68 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	73fb      	strb	r3, [r7, #15]
        break;
 8003d66:	e005      	b.n	8003d74 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d68:	4b36      	ldr	r3, [pc, #216]	; (8003e44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1ef      	bne.n	8003d54 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d74:	7bfb      	ldrb	r3, [r7, #15]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d15f      	bne.n	8003e3a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d110      	bne.n	8003da2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d80:	4b30      	ldr	r3, [pc, #192]	; (8003e44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003d88:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	6892      	ldr	r2, [r2, #8]
 8003d90:	0211      	lsls	r1, r2, #8
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	68d2      	ldr	r2, [r2, #12]
 8003d96:	06d2      	lsls	r2, r2, #27
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	492a      	ldr	r1, [pc, #168]	; (8003e44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	610b      	str	r3, [r1, #16]
 8003da0:	e027      	b.n	8003df2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d112      	bne.n	8003dce <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003da8:	4b26      	ldr	r3, [pc, #152]	; (8003e44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003db0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	6892      	ldr	r2, [r2, #8]
 8003db8:	0211      	lsls	r1, r2, #8
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	6912      	ldr	r2, [r2, #16]
 8003dbe:	0852      	lsrs	r2, r2, #1
 8003dc0:	3a01      	subs	r2, #1
 8003dc2:	0552      	lsls	r2, r2, #21
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	491f      	ldr	r1, [pc, #124]	; (8003e44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	610b      	str	r3, [r1, #16]
 8003dcc:	e011      	b.n	8003df2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003dce:	4b1d      	ldr	r3, [pc, #116]	; (8003e44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003dd6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	6892      	ldr	r2, [r2, #8]
 8003dde:	0211      	lsls	r1, r2, #8
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	6952      	ldr	r2, [r2, #20]
 8003de4:	0852      	lsrs	r2, r2, #1
 8003de6:	3a01      	subs	r2, #1
 8003de8:	0652      	lsls	r2, r2, #25
 8003dea:	430a      	orrs	r2, r1
 8003dec:	4915      	ldr	r1, [pc, #84]	; (8003e44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003df2:	4b14      	ldr	r3, [pc, #80]	; (8003e44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a13      	ldr	r2, [pc, #76]	; (8003e44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003df8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003dfc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dfe:	f7fe fbcf 	bl	80025a0 <HAL_GetTick>
 8003e02:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e04:	e009      	b.n	8003e1a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e06:	f7fe fbcb 	bl	80025a0 <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d902      	bls.n	8003e1a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	73fb      	strb	r3, [r7, #15]
          break;
 8003e18:	e005      	b.n	8003e26 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e1a:	4b0a      	ldr	r3, [pc, #40]	; (8003e44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d0ef      	beq.n	8003e06 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003e26:	7bfb      	ldrb	r3, [r7, #15]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d106      	bne.n	8003e3a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003e2c:	4b05      	ldr	r3, [pc, #20]	; (8003e44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e2e:	691a      	ldr	r2, [r3, #16]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	4903      	ldr	r1, [pc, #12]	; (8003e44 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3710      	adds	r7, #16
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	40021000 	.word	0x40021000

08003e48 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d079      	beq.n	8003f4e <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d106      	bne.n	8003e74 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f7fe f9b8 	bl	80021e4 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2202      	movs	r2, #2
 8003e78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	f003 0310 	and.w	r3, r3, #16
 8003e86:	2b10      	cmp	r3, #16
 8003e88:	d058      	beq.n	8003f3c <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	22ca      	movs	r2, #202	; 0xca
 8003e90:	625a      	str	r2, [r3, #36]	; 0x24
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2253      	movs	r2, #83	; 0x53
 8003e98:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 f880 	bl	8003fa0 <RTC_EnterInitMode>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d127      	bne.n	8003efa <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	6812      	ldr	r2, [r2, #0]
 8003eb4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003eb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ebc:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	6899      	ldr	r1, [r3, #8]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685a      	ldr	r2, [r3, #4]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	431a      	orrs	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	68d2      	ldr	r2, [r2, #12]
 8003ee4:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	6919      	ldr	r1, [r3, #16]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	041a      	lsls	r2, r3, #16
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f884 	bl	8004008 <RTC_ExitInitMode>
 8003f00:	4603      	mov	r3, r0
 8003f02:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003f04:	7bfb      	ldrb	r3, [r7, #15]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d113      	bne.n	8003f32 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f022 0203 	bic.w	r2, r2, #3
 8003f18:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	69da      	ldr	r2, [r3, #28]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	22ff      	movs	r2, #255	; 0xff
 8003f38:	625a      	str	r2, [r3, #36]	; 0x24
 8003f3a:	e001      	b.n	8003f40 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003f40:	7bfb      	ldrb	r3, [r7, #15]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d103      	bne.n	8003f4e <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 8003f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a0d      	ldr	r2, [pc, #52]	; (8003f9c <HAL_RTC_WaitForSynchro+0x44>)
 8003f66:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8003f68:	f7fe fb1a 	bl	80025a0 <HAL_GetTick>
 8003f6c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003f6e:	e009      	b.n	8003f84 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003f70:	f7fe fb16 	bl	80025a0 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f7e:	d901      	bls.n	8003f84 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e007      	b.n	8003f94 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	f003 0320 	and.w	r3, r3, #32
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d0ee      	beq.n	8003f70 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	0003ff5f 	.word	0x0003ff5f

08003fa0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d120      	bne.n	8003ffc <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8003fc2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003fc4:	f7fe faec 	bl	80025a0 <HAL_GetTick>
 8003fc8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003fca:	e00d      	b.n	8003fe8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003fcc:	f7fe fae8 	bl	80025a0 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fda:	d905      	bls.n	8003fe8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2203      	movs	r2, #3
 8003fe4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d102      	bne.n	8003ffc <RTC_EnterInitMode+0x5c>
 8003ff6:	7bfb      	ldrb	r3, [r7, #15]
 8003ff8:	2b03      	cmp	r3, #3
 8003ffa:	d1e7      	bne.n	8003fcc <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8003ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
	...

08004008 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004010:	2300      	movs	r3, #0
 8004012:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004014:	4b1a      	ldr	r3, [pc, #104]	; (8004080 <RTC_ExitInitMode+0x78>)
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	4a19      	ldr	r2, [pc, #100]	; (8004080 <RTC_ExitInitMode+0x78>)
 800401a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800401e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004020:	4b17      	ldr	r3, [pc, #92]	; (8004080 <RTC_ExitInitMode+0x78>)
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f003 0320 	and.w	r3, r3, #32
 8004028:	2b00      	cmp	r3, #0
 800402a:	d10c      	bne.n	8004046 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f7ff ff93 	bl	8003f58 <HAL_RTC_WaitForSynchro>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d01e      	beq.n	8004076 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2203      	movs	r2, #3
 800403c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	73fb      	strb	r3, [r7, #15]
 8004044:	e017      	b.n	8004076 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004046:	4b0e      	ldr	r3, [pc, #56]	; (8004080 <RTC_ExitInitMode+0x78>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	4a0d      	ldr	r2, [pc, #52]	; (8004080 <RTC_ExitInitMode+0x78>)
 800404c:	f023 0320 	bic.w	r3, r3, #32
 8004050:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f7ff ff80 	bl	8003f58 <HAL_RTC_WaitForSynchro>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d005      	beq.n	800406a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2203      	movs	r2, #3
 8004062:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800406a:	4b05      	ldr	r3, [pc, #20]	; (8004080 <RTC_ExitInitMode+0x78>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	4a04      	ldr	r2, [pc, #16]	; (8004080 <RTC_ExitInitMode+0x78>)
 8004070:	f043 0320 	orr.w	r3, r3, #32
 8004074:	6093      	str	r3, [r2, #8]
  }

  return status;
 8004076:	7bfb      	ldrb	r3, [r7, #15]
}
 8004078:	4618      	mov	r0, r3
 800407a:	3710      	adds	r7, #16
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	40002800 	.word	0x40002800

08004084 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e095      	b.n	80041c2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409a:	2b00      	cmp	r3, #0
 800409c:	d108      	bne.n	80040b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040a6:	d009      	beq.n	80040bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	61da      	str	r2, [r3, #28]
 80040ae:	e005      	b.n	80040bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d106      	bne.n	80040dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7fe f8b4 	bl	8002244 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2202      	movs	r2, #2
 80040e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040f2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040fc:	d902      	bls.n	8004104 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80040fe:	2300      	movs	r3, #0
 8004100:	60fb      	str	r3, [r7, #12]
 8004102:	e002      	b.n	800410a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004104:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004108:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004112:	d007      	beq.n	8004124 <HAL_SPI_Init+0xa0>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800411c:	d002      	beq.n	8004124 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004134:	431a      	orrs	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	431a      	orrs	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	431a      	orrs	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004152:	431a      	orrs	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	69db      	ldr	r3, [r3, #28]
 8004158:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800415c:	431a      	orrs	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004166:	ea42 0103 	orr.w	r1, r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800416e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	430a      	orrs	r2, r1
 8004178:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	0c1b      	lsrs	r3, r3, #16
 8004180:	f003 0204 	and.w	r2, r3, #4
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	f003 0310 	and.w	r3, r3, #16
 800418c:	431a      	orrs	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004192:	f003 0308 	and.w	r3, r3, #8
 8004196:	431a      	orrs	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80041a0:	ea42 0103 	orr.w	r1, r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b088      	sub	sp, #32
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	60f8      	str	r0, [r7, #12]
 80041d2:	60b9      	str	r1, [r7, #8]
 80041d4:	603b      	str	r3, [r7, #0]
 80041d6:	4613      	mov	r3, r2
 80041d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80041da:	2300      	movs	r3, #0
 80041dc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d101      	bne.n	80041ec <HAL_SPI_Transmit+0x22>
 80041e8:	2302      	movs	r3, #2
 80041ea:	e15f      	b.n	80044ac <HAL_SPI_Transmit+0x2e2>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041f4:	f7fe f9d4 	bl	80025a0 <HAL_GetTick>
 80041f8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80041fa:	88fb      	ldrh	r3, [r7, #6]
 80041fc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b01      	cmp	r3, #1
 8004208:	d002      	beq.n	8004210 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800420a:	2302      	movs	r3, #2
 800420c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800420e:	e148      	b.n	80044a2 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d002      	beq.n	800421c <HAL_SPI_Transmit+0x52>
 8004216:	88fb      	ldrh	r3, [r7, #6]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d102      	bne.n	8004222 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004220:	e13f      	b.n	80044a2 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2203      	movs	r2, #3
 8004226:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	68ba      	ldr	r2, [r7, #8]
 8004234:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	88fa      	ldrh	r2, [r7, #6]
 800423a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	88fa      	ldrh	r2, [r7, #6]
 8004240:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800426c:	d10f      	bne.n	800428e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800427c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800428c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004298:	2b40      	cmp	r3, #64	; 0x40
 800429a:	d007      	beq.n	80042ac <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042b4:	d94f      	bls.n	8004356 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d002      	beq.n	80042c4 <HAL_SPI_Transmit+0xfa>
 80042be:	8afb      	ldrh	r3, [r7, #22]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d142      	bne.n	800434a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c8:	881a      	ldrh	r2, [r3, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d4:	1c9a      	adds	r2, r3, #2
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042de:	b29b      	uxth	r3, r3
 80042e0:	3b01      	subs	r3, #1
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80042e8:	e02f      	b.n	800434a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d112      	bne.n	800431e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fc:	881a      	ldrh	r2, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004308:	1c9a      	adds	r2, r3, #2
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004312:	b29b      	uxth	r3, r3
 8004314:	3b01      	subs	r3, #1
 8004316:	b29a      	uxth	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800431c:	e015      	b.n	800434a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800431e:	f7fe f93f 	bl	80025a0 <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	683a      	ldr	r2, [r7, #0]
 800432a:	429a      	cmp	r2, r3
 800432c:	d803      	bhi.n	8004336 <HAL_SPI_Transmit+0x16c>
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004334:	d102      	bne.n	800433c <HAL_SPI_Transmit+0x172>
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d106      	bne.n	800434a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004348:	e0ab      	b.n	80044a2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800434e:	b29b      	uxth	r3, r3
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1ca      	bne.n	80042ea <HAL_SPI_Transmit+0x120>
 8004354:	e080      	b.n	8004458 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d002      	beq.n	8004364 <HAL_SPI_Transmit+0x19a>
 800435e:	8afb      	ldrh	r3, [r7, #22]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d174      	bne.n	800444e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004368:	b29b      	uxth	r3, r3
 800436a:	2b01      	cmp	r3, #1
 800436c:	d912      	bls.n	8004394 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004372:	881a      	ldrh	r2, [r3, #0]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437e:	1c9a      	adds	r2, r3, #2
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004388:	b29b      	uxth	r3, r3
 800438a:	3b02      	subs	r3, #2
 800438c:	b29a      	uxth	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004392:	e05c      	b.n	800444e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	330c      	adds	r3, #12
 800439e:	7812      	ldrb	r2, [r2, #0]
 80043a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a6:	1c5a      	adds	r2, r3, #1
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	3b01      	subs	r3, #1
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80043ba:	e048      	b.n	800444e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d12b      	bne.n	8004422 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d912      	bls.n	80043fa <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d8:	881a      	ldrh	r2, [r3, #0]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e4:	1c9a      	adds	r2, r3, #2
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	3b02      	subs	r3, #2
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043f8:	e029      	b.n	800444e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	330c      	adds	r3, #12
 8004404:	7812      	ldrb	r2, [r2, #0]
 8004406:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440c:	1c5a      	adds	r2, r3, #1
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004416:	b29b      	uxth	r3, r3
 8004418:	3b01      	subs	r3, #1
 800441a:	b29a      	uxth	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004420:	e015      	b.n	800444e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004422:	f7fe f8bd 	bl	80025a0 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	429a      	cmp	r2, r3
 8004430:	d803      	bhi.n	800443a <HAL_SPI_Transmit+0x270>
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004438:	d102      	bne.n	8004440 <HAL_SPI_Transmit+0x276>
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d106      	bne.n	800444e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800444c:	e029      	b.n	80044a2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004452:	b29b      	uxth	r3, r3
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1b1      	bne.n	80043bc <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004458:	69ba      	ldr	r2, [r7, #24]
 800445a:	6839      	ldr	r1, [r7, #0]
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f000 fb69 	bl	8004b34 <SPI_EndRxTxTransaction>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d002      	beq.n	800446e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2220      	movs	r2, #32
 800446c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10a      	bne.n	800448c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004476:	2300      	movs	r3, #0
 8004478:	613b      	str	r3, [r7, #16]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	613b      	str	r3, [r7, #16]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	613b      	str	r3, [r7, #16]
 800448a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004490:	2b00      	cmp	r3, #0
 8004492:	d002      	beq.n	800449a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	77fb      	strb	r3, [r7, #31]
 8004498:	e003      	b.n	80044a2 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2201      	movs	r2, #1
 800449e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80044aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3720      	adds	r7, #32
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b08a      	sub	sp, #40	; 0x28
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
 80044c0:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80044c2:	2301      	movs	r3, #1
 80044c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80044c6:	2300      	movs	r3, #0
 80044c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d101      	bne.n	80044da <HAL_SPI_TransmitReceive+0x26>
 80044d6:	2302      	movs	r3, #2
 80044d8:	e20a      	b.n	80048f0 <HAL_SPI_TransmitReceive+0x43c>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044e2:	f7fe f85d 	bl	80025a0 <HAL_GetTick>
 80044e6:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80044ee:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80044f6:	887b      	ldrh	r3, [r7, #2]
 80044f8:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80044fa:	887b      	ldrh	r3, [r7, #2]
 80044fc:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80044fe:	7efb      	ldrb	r3, [r7, #27]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d00e      	beq.n	8004522 <HAL_SPI_TransmitReceive+0x6e>
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800450a:	d106      	bne.n	800451a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d102      	bne.n	800451a <HAL_SPI_TransmitReceive+0x66>
 8004514:	7efb      	ldrb	r3, [r7, #27]
 8004516:	2b04      	cmp	r3, #4
 8004518:	d003      	beq.n	8004522 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800451a:	2302      	movs	r3, #2
 800451c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004520:	e1e0      	b.n	80048e4 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d005      	beq.n	8004534 <HAL_SPI_TransmitReceive+0x80>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d002      	beq.n	8004534 <HAL_SPI_TransmitReceive+0x80>
 800452e:	887b      	ldrh	r3, [r7, #2]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d103      	bne.n	800453c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800453a:	e1d3      	b.n	80048e4 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004542:	b2db      	uxtb	r3, r3
 8004544:	2b04      	cmp	r3, #4
 8004546:	d003      	beq.n	8004550 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2205      	movs	r2, #5
 800454c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	887a      	ldrh	r2, [r7, #2]
 8004560:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	887a      	ldrh	r2, [r7, #2]
 8004568:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	68ba      	ldr	r2, [r7, #8]
 8004570:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	887a      	ldrh	r2, [r7, #2]
 8004576:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	887a      	ldrh	r2, [r7, #2]
 800457c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004592:	d802      	bhi.n	800459a <HAL_SPI_TransmitReceive+0xe6>
 8004594:	8a3b      	ldrh	r3, [r7, #16]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d908      	bls.n	80045ac <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80045a8:	605a      	str	r2, [r3, #4]
 80045aa:	e007      	b.n	80045bc <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	685a      	ldr	r2, [r3, #4]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80045ba:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c6:	2b40      	cmp	r3, #64	; 0x40
 80045c8:	d007      	beq.n	80045da <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045e2:	f240 8081 	bls.w	80046e8 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d002      	beq.n	80045f4 <HAL_SPI_TransmitReceive+0x140>
 80045ee:	8a7b      	ldrh	r3, [r7, #18]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d16d      	bne.n	80046d0 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f8:	881a      	ldrh	r2, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004604:	1c9a      	adds	r2, r3, #2
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800460e:	b29b      	uxth	r3, r3
 8004610:	3b01      	subs	r3, #1
 8004612:	b29a      	uxth	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004618:	e05a      	b.n	80046d0 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f003 0302 	and.w	r3, r3, #2
 8004624:	2b02      	cmp	r3, #2
 8004626:	d11b      	bne.n	8004660 <HAL_SPI_TransmitReceive+0x1ac>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800462c:	b29b      	uxth	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d016      	beq.n	8004660 <HAL_SPI_TransmitReceive+0x1ac>
 8004632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004634:	2b01      	cmp	r3, #1
 8004636:	d113      	bne.n	8004660 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463c:	881a      	ldrh	r2, [r3, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004648:	1c9a      	adds	r2, r3, #2
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004652:	b29b      	uxth	r3, r3
 8004654:	3b01      	subs	r3, #1
 8004656:	b29a      	uxth	r2, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800465c:	2300      	movs	r3, #0
 800465e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b01      	cmp	r3, #1
 800466c:	d11c      	bne.n	80046a8 <HAL_SPI_TransmitReceive+0x1f4>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004674:	b29b      	uxth	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d016      	beq.n	80046a8 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68da      	ldr	r2, [r3, #12]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004684:	b292      	uxth	r2, r2
 8004686:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468c:	1c9a      	adds	r2, r3, #2
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004698:	b29b      	uxth	r3, r3
 800469a:	3b01      	subs	r3, #1
 800469c:	b29a      	uxth	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80046a4:	2301      	movs	r3, #1
 80046a6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80046a8:	f7fd ff7a 	bl	80025a0 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d80b      	bhi.n	80046d0 <HAL_SPI_TransmitReceive+0x21c>
 80046b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046be:	d007      	beq.n	80046d0 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80046ce:	e109      	b.n	80048e4 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d19f      	bne.n	800461a <HAL_SPI_TransmitReceive+0x166>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d199      	bne.n	800461a <HAL_SPI_TransmitReceive+0x166>
 80046e6:	e0e3      	b.n	80048b0 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d003      	beq.n	80046f8 <HAL_SPI_TransmitReceive+0x244>
 80046f0:	8a7b      	ldrh	r3, [r7, #18]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	f040 80cf 	bne.w	8004896 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d912      	bls.n	8004728 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004706:	881a      	ldrh	r2, [r3, #0]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004712:	1c9a      	adds	r2, r3, #2
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800471c:	b29b      	uxth	r3, r3
 800471e:	3b02      	subs	r3, #2
 8004720:	b29a      	uxth	r2, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004726:	e0b6      	b.n	8004896 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	330c      	adds	r3, #12
 8004732:	7812      	ldrb	r2, [r2, #0]
 8004734:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473a:	1c5a      	adds	r2, r3, #1
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004744:	b29b      	uxth	r3, r3
 8004746:	3b01      	subs	r3, #1
 8004748:	b29a      	uxth	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800474e:	e0a2      	b.n	8004896 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b02      	cmp	r3, #2
 800475c:	d134      	bne.n	80047c8 <HAL_SPI_TransmitReceive+0x314>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004762:	b29b      	uxth	r3, r3
 8004764:	2b00      	cmp	r3, #0
 8004766:	d02f      	beq.n	80047c8 <HAL_SPI_TransmitReceive+0x314>
 8004768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476a:	2b01      	cmp	r3, #1
 800476c:	d12c      	bne.n	80047c8 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004772:	b29b      	uxth	r3, r3
 8004774:	2b01      	cmp	r3, #1
 8004776:	d912      	bls.n	800479e <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477c:	881a      	ldrh	r2, [r3, #0]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004788:	1c9a      	adds	r2, r3, #2
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004792:	b29b      	uxth	r3, r3
 8004794:	3b02      	subs	r3, #2
 8004796:	b29a      	uxth	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800479c:	e012      	b.n	80047c4 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	330c      	adds	r3, #12
 80047a8:	7812      	ldrb	r2, [r2, #0]
 80047aa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b0:	1c5a      	adds	r2, r3, #1
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	3b01      	subs	r3, #1
 80047be:	b29a      	uxth	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80047c4:	2300      	movs	r3, #0
 80047c6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d148      	bne.n	8004868 <HAL_SPI_TransmitReceive+0x3b4>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047dc:	b29b      	uxth	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d042      	beq.n	8004868 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d923      	bls.n	8004836 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68da      	ldr	r2, [r3, #12]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f8:	b292      	uxth	r2, r2
 80047fa:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004800:	1c9a      	adds	r2, r3, #2
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800480c:	b29b      	uxth	r3, r3
 800480e:	3b02      	subs	r3, #2
 8004810:	b29a      	uxth	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800481e:	b29b      	uxth	r3, r3
 8004820:	2b01      	cmp	r3, #1
 8004822:	d81f      	bhi.n	8004864 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004832:	605a      	str	r2, [r3, #4]
 8004834:	e016      	b.n	8004864 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f103 020c 	add.w	r2, r3, #12
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004842:	7812      	ldrb	r2, [r2, #0]
 8004844:	b2d2      	uxtb	r2, r2
 8004846:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484c:	1c5a      	adds	r2, r3, #1
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004858:	b29b      	uxth	r3, r3
 800485a:	3b01      	subs	r3, #1
 800485c:	b29a      	uxth	r2, r3
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004864:	2301      	movs	r3, #1
 8004866:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004868:	f7fd fe9a 	bl	80025a0 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004874:	429a      	cmp	r2, r3
 8004876:	d803      	bhi.n	8004880 <HAL_SPI_TransmitReceive+0x3cc>
 8004878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800487a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800487e:	d102      	bne.n	8004886 <HAL_SPI_TransmitReceive+0x3d2>
 8004880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004882:	2b00      	cmp	r3, #0
 8004884:	d107      	bne.n	8004896 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004894:	e026      	b.n	80048e4 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800489a:	b29b      	uxth	r3, r3
 800489c:	2b00      	cmp	r3, #0
 800489e:	f47f af57 	bne.w	8004750 <HAL_SPI_TransmitReceive+0x29c>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	f47f af50 	bne.w	8004750 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048b0:	69fa      	ldr	r2, [r7, #28]
 80048b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048b4:	68f8      	ldr	r0, [r7, #12]
 80048b6:	f000 f93d 	bl	8004b34 <SPI_EndRxTxTransaction>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d005      	beq.n	80048cc <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2220      	movs	r2, #32
 80048ca:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d003      	beq.n	80048dc <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048da:	e003      	b.n	80048e4 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80048ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3728      	adds	r7, #40	; 0x28
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b088      	sub	sp, #32
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	603b      	str	r3, [r7, #0]
 8004904:	4613      	mov	r3, r2
 8004906:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004908:	f7fd fe4a 	bl	80025a0 <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004910:	1a9b      	subs	r3, r3, r2
 8004912:	683a      	ldr	r2, [r7, #0]
 8004914:	4413      	add	r3, r2
 8004916:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004918:	f7fd fe42 	bl	80025a0 <HAL_GetTick>
 800491c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800491e:	4b39      	ldr	r3, [pc, #228]	; (8004a04 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	015b      	lsls	r3, r3, #5
 8004924:	0d1b      	lsrs	r3, r3, #20
 8004926:	69fa      	ldr	r2, [r7, #28]
 8004928:	fb02 f303 	mul.w	r3, r2, r3
 800492c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800492e:	e054      	b.n	80049da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004936:	d050      	beq.n	80049da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004938:	f7fd fe32 	bl	80025a0 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	69fa      	ldr	r2, [r7, #28]
 8004944:	429a      	cmp	r2, r3
 8004946:	d902      	bls.n	800494e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d13d      	bne.n	80049ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800495c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004966:	d111      	bne.n	800498c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004970:	d004      	beq.n	800497c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800497a:	d107      	bne.n	800498c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800498a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004990:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004994:	d10f      	bne.n	80049b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049a4:	601a      	str	r2, [r3, #0]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2201      	movs	r2, #1
 80049ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e017      	b.n	80049fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d101      	bne.n	80049d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80049d0:	2300      	movs	r3, #0
 80049d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	3b01      	subs	r3, #1
 80049d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	689a      	ldr	r2, [r3, #8]
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	4013      	ands	r3, r2
 80049e4:	68ba      	ldr	r2, [r7, #8]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	bf0c      	ite	eq
 80049ea:	2301      	moveq	r3, #1
 80049ec:	2300      	movne	r3, #0
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	461a      	mov	r2, r3
 80049f2:	79fb      	ldrb	r3, [r7, #7]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d19b      	bne.n	8004930 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3720      	adds	r7, #32
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	20000094 	.word	0x20000094

08004a08 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b08a      	sub	sp, #40	; 0x28
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
 8004a14:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004a16:	2300      	movs	r3, #0
 8004a18:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004a1a:	f7fd fdc1 	bl	80025a0 <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a22:	1a9b      	subs	r3, r3, r2
 8004a24:	683a      	ldr	r2, [r7, #0]
 8004a26:	4413      	add	r3, r2
 8004a28:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004a2a:	f7fd fdb9 	bl	80025a0 <HAL_GetTick>
 8004a2e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	330c      	adds	r3, #12
 8004a36:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004a38:	4b3d      	ldr	r3, [pc, #244]	; (8004b30 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	4413      	add	r3, r2
 8004a42:	00da      	lsls	r2, r3, #3
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	0d1b      	lsrs	r3, r3, #20
 8004a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a4a:	fb02 f303 	mul.w	r3, r2, r3
 8004a4e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004a50:	e060      	b.n	8004b14 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004a58:	d107      	bne.n	8004a6a <SPI_WaitFifoStateUntilTimeout+0x62>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d104      	bne.n	8004a6a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004a68:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a70:	d050      	beq.n	8004b14 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a72:	f7fd fd95 	bl	80025a0 <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	6a3b      	ldr	r3, [r7, #32]
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d902      	bls.n	8004a88 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d13d      	bne.n	8004b04 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	685a      	ldr	r2, [r3, #4]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a96:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004aa0:	d111      	bne.n	8004ac6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aaa:	d004      	beq.n	8004ab6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ab4:	d107      	bne.n	8004ac6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ac4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ace:	d10f      	bne.n	8004af0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ade:	601a      	str	r2, [r3, #0]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004aee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e010      	b.n	8004b26 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	3b01      	subs	r3, #1
 8004b12:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689a      	ldr	r2, [r3, #8]
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d196      	bne.n	8004a52 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3728      	adds	r7, #40	; 0x28
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	20000094 	.word	0x20000094

08004b34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b086      	sub	sp, #24
 8004b38:	af02      	add	r7, sp, #8
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	9300      	str	r3, [sp, #0]
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004b4c:	68f8      	ldr	r0, [r7, #12]
 8004b4e:	f7ff ff5b 	bl	8004a08 <SPI_WaitFifoStateUntilTimeout>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d007      	beq.n	8004b68 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b5c:	f043 0220 	orr.w	r2, r3, #32
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e027      	b.n	8004bb8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	9300      	str	r3, [sp, #0]
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	2180      	movs	r1, #128	; 0x80
 8004b72:	68f8      	ldr	r0, [r7, #12]
 8004b74:	f7ff fec0 	bl	80048f8 <SPI_WaitFlagStateUntilTimeout>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d007      	beq.n	8004b8e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b82:	f043 0220 	orr.w	r2, r3, #32
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e014      	b.n	8004bb8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	9300      	str	r3, [sp, #0]
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004b9a:	68f8      	ldr	r0, [r7, #12]
 8004b9c:	f7ff ff34 	bl	8004a08 <SPI_WaitFifoStateUntilTimeout>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d007      	beq.n	8004bb6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004baa:	f043 0220 	orr.w	r2, r3, #32
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e000      	b.n	8004bb8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3710      	adds	r7, #16
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d101      	bne.n	8004bd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e049      	b.n	8004c66 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d106      	bne.n	8004bec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f7fd fb6e 	bl	80022c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2202      	movs	r2, #2
 8004bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	3304      	adds	r3, #4
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	4610      	mov	r0, r2
 8004c00:	f000 fa7e 	bl	8005100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3708      	adds	r7, #8
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
	...

08004c70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d001      	beq.n	8004c88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e03b      	b.n	8004d00 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68da      	ldr	r2, [r3, #12]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f042 0201 	orr.w	r2, r2, #1
 8004c9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a19      	ldr	r2, [pc, #100]	; (8004d0c <HAL_TIM_Base_Start_IT+0x9c>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d009      	beq.n	8004cbe <HAL_TIM_Base_Start_IT+0x4e>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cb2:	d004      	beq.n	8004cbe <HAL_TIM_Base_Start_IT+0x4e>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a15      	ldr	r2, [pc, #84]	; (8004d10 <HAL_TIM_Base_Start_IT+0xa0>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d115      	bne.n	8004cea <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	689a      	ldr	r2, [r3, #8]
 8004cc4:	4b13      	ldr	r3, [pc, #76]	; (8004d14 <HAL_TIM_Base_Start_IT+0xa4>)
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2b06      	cmp	r3, #6
 8004cce:	d015      	beq.n	8004cfc <HAL_TIM_Base_Start_IT+0x8c>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cd6:	d011      	beq.n	8004cfc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f042 0201 	orr.w	r2, r2, #1
 8004ce6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ce8:	e008      	b.n	8004cfc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f042 0201 	orr.w	r2, r2, #1
 8004cf8:	601a      	str	r2, [r3, #0]
 8004cfa:	e000      	b.n	8004cfe <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cfc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3714      	adds	r7, #20
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr
 8004d0c:	40012c00 	.word	0x40012c00
 8004d10:	40014000 	.word	0x40014000
 8004d14:	00010007 	.word	0x00010007

08004d18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d020      	beq.n	8004d7c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f003 0302 	and.w	r3, r3, #2
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d01b      	beq.n	8004d7c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f06f 0202 	mvn.w	r2, #2
 8004d4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	f003 0303 	and.w	r3, r3, #3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d003      	beq.n	8004d6a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f9ad 	bl	80050c2 <HAL_TIM_IC_CaptureCallback>
 8004d68:	e005      	b.n	8004d76 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 f99f 	bl	80050ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 f9b0 	bl	80050d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	f003 0304 	and.w	r3, r3, #4
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d020      	beq.n	8004dc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f003 0304 	and.w	r3, r3, #4
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d01b      	beq.n	8004dc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f06f 0204 	mvn.w	r2, #4
 8004d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2202      	movs	r2, #2
 8004d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d003      	beq.n	8004db6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f987 	bl	80050c2 <HAL_TIM_IC_CaptureCallback>
 8004db4:	e005      	b.n	8004dc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f979 	bl	80050ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 f98a 	bl	80050d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	f003 0308 	and.w	r3, r3, #8
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d020      	beq.n	8004e14 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f003 0308 	and.w	r3, r3, #8
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d01b      	beq.n	8004e14 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f06f 0208 	mvn.w	r2, #8
 8004de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2204      	movs	r2, #4
 8004dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	69db      	ldr	r3, [r3, #28]
 8004df2:	f003 0303 	and.w	r3, r3, #3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f961 	bl	80050c2 <HAL_TIM_IC_CaptureCallback>
 8004e00:	e005      	b.n	8004e0e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 f953 	bl	80050ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 f964 	bl	80050d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	f003 0310 	and.w	r3, r3, #16
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d020      	beq.n	8004e60 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f003 0310 	and.w	r3, r3, #16
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d01b      	beq.n	8004e60 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f06f 0210 	mvn.w	r2, #16
 8004e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2208      	movs	r2, #8
 8004e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	69db      	ldr	r3, [r3, #28]
 8004e3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d003      	beq.n	8004e4e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f93b 	bl	80050c2 <HAL_TIM_IC_CaptureCallback>
 8004e4c:	e005      	b.n	8004e5a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 f92d 	bl	80050ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 f93e 	bl	80050d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00c      	beq.n	8004e84 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f003 0301 	and.w	r3, r3, #1
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d007      	beq.n	8004e84 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f06f 0201 	mvn.w	r2, #1
 8004e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f7fd f926 	bl	80020d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00c      	beq.n	8004ea8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d007      	beq.n	8004ea8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 fa9a 	bl	80053dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00c      	beq.n	8004ecc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d007      	beq.n	8004ecc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 fa92 	bl	80053f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00c      	beq.n	8004ef0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d007      	beq.n	8004ef0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 f8fd 	bl	80050ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	f003 0320 	and.w	r3, r3, #32
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00c      	beq.n	8004f14 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f003 0320 	and.w	r3, r3, #32
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d007      	beq.n	8004f14 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f06f 0220 	mvn.w	r2, #32
 8004f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 fa5a 	bl	80053c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f14:	bf00      	nop
 8004f16:	3710      	adds	r7, #16
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f26:	2300      	movs	r3, #0
 8004f28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d101      	bne.n	8004f38 <HAL_TIM_ConfigClockSource+0x1c>
 8004f34:	2302      	movs	r3, #2
 8004f36:	e0b6      	b.n	80050a6 <HAL_TIM_ConfigClockSource+0x18a>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2202      	movs	r2, #2
 8004f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f74:	d03e      	beq.n	8004ff4 <HAL_TIM_ConfigClockSource+0xd8>
 8004f76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f7a:	f200 8087 	bhi.w	800508c <HAL_TIM_ConfigClockSource+0x170>
 8004f7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f82:	f000 8086 	beq.w	8005092 <HAL_TIM_ConfigClockSource+0x176>
 8004f86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f8a:	d87f      	bhi.n	800508c <HAL_TIM_ConfigClockSource+0x170>
 8004f8c:	2b70      	cmp	r3, #112	; 0x70
 8004f8e:	d01a      	beq.n	8004fc6 <HAL_TIM_ConfigClockSource+0xaa>
 8004f90:	2b70      	cmp	r3, #112	; 0x70
 8004f92:	d87b      	bhi.n	800508c <HAL_TIM_ConfigClockSource+0x170>
 8004f94:	2b60      	cmp	r3, #96	; 0x60
 8004f96:	d050      	beq.n	800503a <HAL_TIM_ConfigClockSource+0x11e>
 8004f98:	2b60      	cmp	r3, #96	; 0x60
 8004f9a:	d877      	bhi.n	800508c <HAL_TIM_ConfigClockSource+0x170>
 8004f9c:	2b50      	cmp	r3, #80	; 0x50
 8004f9e:	d03c      	beq.n	800501a <HAL_TIM_ConfigClockSource+0xfe>
 8004fa0:	2b50      	cmp	r3, #80	; 0x50
 8004fa2:	d873      	bhi.n	800508c <HAL_TIM_ConfigClockSource+0x170>
 8004fa4:	2b40      	cmp	r3, #64	; 0x40
 8004fa6:	d058      	beq.n	800505a <HAL_TIM_ConfigClockSource+0x13e>
 8004fa8:	2b40      	cmp	r3, #64	; 0x40
 8004faa:	d86f      	bhi.n	800508c <HAL_TIM_ConfigClockSource+0x170>
 8004fac:	2b30      	cmp	r3, #48	; 0x30
 8004fae:	d064      	beq.n	800507a <HAL_TIM_ConfigClockSource+0x15e>
 8004fb0:	2b30      	cmp	r3, #48	; 0x30
 8004fb2:	d86b      	bhi.n	800508c <HAL_TIM_ConfigClockSource+0x170>
 8004fb4:	2b20      	cmp	r3, #32
 8004fb6:	d060      	beq.n	800507a <HAL_TIM_ConfigClockSource+0x15e>
 8004fb8:	2b20      	cmp	r3, #32
 8004fba:	d867      	bhi.n	800508c <HAL_TIM_ConfigClockSource+0x170>
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d05c      	beq.n	800507a <HAL_TIM_ConfigClockSource+0x15e>
 8004fc0:	2b10      	cmp	r3, #16
 8004fc2:	d05a      	beq.n	800507a <HAL_TIM_ConfigClockSource+0x15e>
 8004fc4:	e062      	b.n	800508c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004fd6:	f000 f971 	bl	80052bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004fe8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	609a      	str	r2, [r3, #8]
      break;
 8004ff2:	e04f      	b.n	8005094 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005004:	f000 f95a 	bl	80052bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	689a      	ldr	r2, [r3, #8]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005016:	609a      	str	r2, [r3, #8]
      break;
 8005018:	e03c      	b.n	8005094 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005026:	461a      	mov	r2, r3
 8005028:	f000 f8ce 	bl	80051c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2150      	movs	r1, #80	; 0x50
 8005032:	4618      	mov	r0, r3
 8005034:	f000 f927 	bl	8005286 <TIM_ITRx_SetConfig>
      break;
 8005038:	e02c      	b.n	8005094 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005046:	461a      	mov	r2, r3
 8005048:	f000 f8ed 	bl	8005226 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2160      	movs	r1, #96	; 0x60
 8005052:	4618      	mov	r0, r3
 8005054:	f000 f917 	bl	8005286 <TIM_ITRx_SetConfig>
      break;
 8005058:	e01c      	b.n	8005094 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005066:	461a      	mov	r2, r3
 8005068:	f000 f8ae 	bl	80051c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2140      	movs	r1, #64	; 0x40
 8005072:	4618      	mov	r0, r3
 8005074:	f000 f907 	bl	8005286 <TIM_ITRx_SetConfig>
      break;
 8005078:	e00c      	b.n	8005094 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4619      	mov	r1, r3
 8005084:	4610      	mov	r0, r2
 8005086:	f000 f8fe 	bl	8005286 <TIM_ITRx_SetConfig>
      break;
 800508a:	e003      	b.n	8005094 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	73fb      	strb	r3, [r7, #15]
      break;
 8005090:	e000      	b.n	8005094 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005092:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3710      	adds	r7, #16
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}

080050ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050ae:	b480      	push	{r7}
 80050b0:	b083      	sub	sp, #12
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050b6:	bf00      	nop
 80050b8:	370c      	adds	r7, #12
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr

080050c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050c2:	b480      	push	{r7}
 80050c4:	b083      	sub	sp, #12
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050ca:	bf00      	nop
 80050cc:	370c      	adds	r7, #12
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr

080050d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050d6:	b480      	push	{r7}
 80050d8:	b083      	sub	sp, #12
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050de:	bf00      	nop
 80050e0:	370c      	adds	r7, #12
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr

080050ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050ea:	b480      	push	{r7}
 80050ec:	b083      	sub	sp, #12
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050f2:	bf00      	nop
 80050f4:	370c      	adds	r7, #12
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
	...

08005100 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a2a      	ldr	r2, [pc, #168]	; (80051bc <TIM_Base_SetConfig+0xbc>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d003      	beq.n	8005120 <TIM_Base_SetConfig+0x20>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800511e:	d108      	bne.n	8005132 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005126:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	4313      	orrs	r3, r2
 8005130:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a21      	ldr	r2, [pc, #132]	; (80051bc <TIM_Base_SetConfig+0xbc>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d00b      	beq.n	8005152 <TIM_Base_SetConfig+0x52>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005140:	d007      	beq.n	8005152 <TIM_Base_SetConfig+0x52>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a1e      	ldr	r2, [pc, #120]	; (80051c0 <TIM_Base_SetConfig+0xc0>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d003      	beq.n	8005152 <TIM_Base_SetConfig+0x52>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a1d      	ldr	r2, [pc, #116]	; (80051c4 <TIM_Base_SetConfig+0xc4>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d108      	bne.n	8005164 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005158:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	4313      	orrs	r3, r2
 8005162:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	4313      	orrs	r3, r2
 8005170:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	689a      	ldr	r2, [r3, #8]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a0c      	ldr	r2, [pc, #48]	; (80051bc <TIM_Base_SetConfig+0xbc>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d007      	beq.n	80051a0 <TIM_Base_SetConfig+0xa0>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a0b      	ldr	r2, [pc, #44]	; (80051c0 <TIM_Base_SetConfig+0xc0>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d003      	beq.n	80051a0 <TIM_Base_SetConfig+0xa0>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a0a      	ldr	r2, [pc, #40]	; (80051c4 <TIM_Base_SetConfig+0xc4>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d103      	bne.n	80051a8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	691a      	ldr	r2, [r3, #16]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	615a      	str	r2, [r3, #20]
}
 80051ae:	bf00      	nop
 80051b0:	3714      	adds	r7, #20
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	40012c00 	.word	0x40012c00
 80051c0:	40014000 	.word	0x40014000
 80051c4:	40014400 	.word	0x40014400

080051c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b087      	sub	sp, #28
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6a1b      	ldr	r3, [r3, #32]
 80051d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	f023 0201 	bic.w	r2, r3, #1
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	699b      	ldr	r3, [r3, #24]
 80051ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	011b      	lsls	r3, r3, #4
 80051f8:	693a      	ldr	r2, [r7, #16]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	f023 030a 	bic.w	r3, r3, #10
 8005204:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	4313      	orrs	r3, r2
 800520c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	693a      	ldr	r2, [r7, #16]
 8005212:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	621a      	str	r2, [r3, #32]
}
 800521a:	bf00      	nop
 800521c:	371c      	adds	r7, #28
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr

08005226 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005226:	b480      	push	{r7}
 8005228:	b087      	sub	sp, #28
 800522a:	af00      	add	r7, sp, #0
 800522c:	60f8      	str	r0, [r7, #12]
 800522e:	60b9      	str	r1, [r7, #8]
 8005230:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6a1b      	ldr	r3, [r3, #32]
 8005236:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6a1b      	ldr	r3, [r3, #32]
 800523c:	f023 0210 	bic.w	r2, r3, #16
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005250:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	031b      	lsls	r3, r3, #12
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	4313      	orrs	r3, r2
 800525a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005262:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	011b      	lsls	r3, r3, #4
 8005268:	697a      	ldr	r2, [r7, #20]
 800526a:	4313      	orrs	r3, r2
 800526c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	621a      	str	r2, [r3, #32]
}
 800527a:	bf00      	nop
 800527c:	371c      	adds	r7, #28
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr

08005286 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005286:	b480      	push	{r7}
 8005288:	b085      	sub	sp, #20
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
 800528e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800529c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800529e:	683a      	ldr	r2, [r7, #0]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	f043 0307 	orr.w	r3, r3, #7
 80052a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	609a      	str	r2, [r3, #8]
}
 80052b0:	bf00      	nop
 80052b2:	3714      	adds	r7, #20
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052bc:	b480      	push	{r7}
 80052be:	b087      	sub	sp, #28
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	607a      	str	r2, [r7, #4]
 80052c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	021a      	lsls	r2, r3, #8
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	431a      	orrs	r2, r3
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	697a      	ldr	r2, [r7, #20]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	697a      	ldr	r2, [r7, #20]
 80052ee:	609a      	str	r2, [r3, #8]
}
 80052f0:	bf00      	nop
 80052f2:	371c      	adds	r7, #28
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800530c:	2b01      	cmp	r3, #1
 800530e:	d101      	bne.n	8005314 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005310:	2302      	movs	r3, #2
 8005312:	e04f      	b.n	80053b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2202      	movs	r2, #2
 8005320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a21      	ldr	r2, [pc, #132]	; (80053c0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d108      	bne.n	8005350 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005344:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	4313      	orrs	r3, r2
 800534e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005356:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	4313      	orrs	r3, r2
 8005360:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a14      	ldr	r2, [pc, #80]	; (80053c0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d009      	beq.n	8005388 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800537c:	d004      	beq.n	8005388 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a10      	ldr	r2, [pc, #64]	; (80053c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d10c      	bne.n	80053a2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800538e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	68ba      	ldr	r2, [r7, #8]
 8005396:	4313      	orrs	r3, r2
 8005398:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68ba      	ldr	r2, [r7, #8]
 80053a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2201      	movs	r2, #1
 80053a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053b2:	2300      	movs	r3, #0
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3714      	adds	r7, #20
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr
 80053c0:	40012c00 	.word	0x40012c00
 80053c4:	40014000 	.word	0x40014000

080053c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053d0:	bf00      	nop
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053e4:	bf00      	nop
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80053f8:	bf00      	nop
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <__itoa>:
 8005404:	1e93      	subs	r3, r2, #2
 8005406:	2b22      	cmp	r3, #34	; 0x22
 8005408:	b510      	push	{r4, lr}
 800540a:	460c      	mov	r4, r1
 800540c:	d904      	bls.n	8005418 <__itoa+0x14>
 800540e:	2300      	movs	r3, #0
 8005410:	700b      	strb	r3, [r1, #0]
 8005412:	461c      	mov	r4, r3
 8005414:	4620      	mov	r0, r4
 8005416:	bd10      	pop	{r4, pc}
 8005418:	2a0a      	cmp	r2, #10
 800541a:	d109      	bne.n	8005430 <__itoa+0x2c>
 800541c:	2800      	cmp	r0, #0
 800541e:	da07      	bge.n	8005430 <__itoa+0x2c>
 8005420:	232d      	movs	r3, #45	; 0x2d
 8005422:	700b      	strb	r3, [r1, #0]
 8005424:	4240      	negs	r0, r0
 8005426:	2101      	movs	r1, #1
 8005428:	4421      	add	r1, r4
 800542a:	f000 f805 	bl	8005438 <__utoa>
 800542e:	e7f1      	b.n	8005414 <__itoa+0x10>
 8005430:	2100      	movs	r1, #0
 8005432:	e7f9      	b.n	8005428 <__itoa+0x24>

08005434 <itoa>:
 8005434:	f7ff bfe6 	b.w	8005404 <__itoa>

08005438 <__utoa>:
 8005438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800543a:	4c1f      	ldr	r4, [pc, #124]	; (80054b8 <__utoa+0x80>)
 800543c:	b08b      	sub	sp, #44	; 0x2c
 800543e:	4605      	mov	r5, r0
 8005440:	460b      	mov	r3, r1
 8005442:	466e      	mov	r6, sp
 8005444:	f104 0c20 	add.w	ip, r4, #32
 8005448:	6820      	ldr	r0, [r4, #0]
 800544a:	6861      	ldr	r1, [r4, #4]
 800544c:	4637      	mov	r7, r6
 800544e:	c703      	stmia	r7!, {r0, r1}
 8005450:	3408      	adds	r4, #8
 8005452:	4564      	cmp	r4, ip
 8005454:	463e      	mov	r6, r7
 8005456:	d1f7      	bne.n	8005448 <__utoa+0x10>
 8005458:	7921      	ldrb	r1, [r4, #4]
 800545a:	7139      	strb	r1, [r7, #4]
 800545c:	1e91      	subs	r1, r2, #2
 800545e:	6820      	ldr	r0, [r4, #0]
 8005460:	6038      	str	r0, [r7, #0]
 8005462:	2922      	cmp	r1, #34	; 0x22
 8005464:	f04f 0100 	mov.w	r1, #0
 8005468:	d904      	bls.n	8005474 <__utoa+0x3c>
 800546a:	7019      	strb	r1, [r3, #0]
 800546c:	460b      	mov	r3, r1
 800546e:	4618      	mov	r0, r3
 8005470:	b00b      	add	sp, #44	; 0x2c
 8005472:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005474:	1e58      	subs	r0, r3, #1
 8005476:	4684      	mov	ip, r0
 8005478:	fbb5 f7f2 	udiv	r7, r5, r2
 800547c:	fb02 5617 	mls	r6, r2, r7, r5
 8005480:	3628      	adds	r6, #40	; 0x28
 8005482:	446e      	add	r6, sp
 8005484:	460c      	mov	r4, r1
 8005486:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800548a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800548e:	462e      	mov	r6, r5
 8005490:	42b2      	cmp	r2, r6
 8005492:	f101 0101 	add.w	r1, r1, #1
 8005496:	463d      	mov	r5, r7
 8005498:	d9ee      	bls.n	8005478 <__utoa+0x40>
 800549a:	2200      	movs	r2, #0
 800549c:	545a      	strb	r2, [r3, r1]
 800549e:	1919      	adds	r1, r3, r4
 80054a0:	1aa5      	subs	r5, r4, r2
 80054a2:	42aa      	cmp	r2, r5
 80054a4:	dae3      	bge.n	800546e <__utoa+0x36>
 80054a6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80054aa:	780e      	ldrb	r6, [r1, #0]
 80054ac:	7006      	strb	r6, [r0, #0]
 80054ae:	3201      	adds	r2, #1
 80054b0:	f801 5901 	strb.w	r5, [r1], #-1
 80054b4:	e7f4      	b.n	80054a0 <__utoa+0x68>
 80054b6:	bf00      	nop
 80054b8:	08005ae0 	.word	0x08005ae0

080054bc <memset>:
 80054bc:	4402      	add	r2, r0
 80054be:	4603      	mov	r3, r0
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d100      	bne.n	80054c6 <memset+0xa>
 80054c4:	4770      	bx	lr
 80054c6:	f803 1b01 	strb.w	r1, [r3], #1
 80054ca:	e7f9      	b.n	80054c0 <memset+0x4>

080054cc <__libc_init_array>:
 80054cc:	b570      	push	{r4, r5, r6, lr}
 80054ce:	4d0d      	ldr	r5, [pc, #52]	; (8005504 <__libc_init_array+0x38>)
 80054d0:	4c0d      	ldr	r4, [pc, #52]	; (8005508 <__libc_init_array+0x3c>)
 80054d2:	1b64      	subs	r4, r4, r5
 80054d4:	10a4      	asrs	r4, r4, #2
 80054d6:	2600      	movs	r6, #0
 80054d8:	42a6      	cmp	r6, r4
 80054da:	d109      	bne.n	80054f0 <__libc_init_array+0x24>
 80054dc:	4d0b      	ldr	r5, [pc, #44]	; (800550c <__libc_init_array+0x40>)
 80054de:	4c0c      	ldr	r4, [pc, #48]	; (8005510 <__libc_init_array+0x44>)
 80054e0:	f000 f818 	bl	8005514 <_init>
 80054e4:	1b64      	subs	r4, r4, r5
 80054e6:	10a4      	asrs	r4, r4, #2
 80054e8:	2600      	movs	r6, #0
 80054ea:	42a6      	cmp	r6, r4
 80054ec:	d105      	bne.n	80054fa <__libc_init_array+0x2e>
 80054ee:	bd70      	pop	{r4, r5, r6, pc}
 80054f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80054f4:	4798      	blx	r3
 80054f6:	3601      	adds	r6, #1
 80054f8:	e7ee      	b.n	80054d8 <__libc_init_array+0xc>
 80054fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80054fe:	4798      	blx	r3
 8005500:	3601      	adds	r6, #1
 8005502:	e7f2      	b.n	80054ea <__libc_init_array+0x1e>
 8005504:	08005b08 	.word	0x08005b08
 8005508:	08005b08 	.word	0x08005b08
 800550c:	08005b08 	.word	0x08005b08
 8005510:	08005b0c 	.word	0x08005b0c

08005514 <_init>:
 8005514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005516:	bf00      	nop
 8005518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800551a:	bc08      	pop	{r3}
 800551c:	469e      	mov	lr, r3
 800551e:	4770      	bx	lr

08005520 <_fini>:
 8005520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005522:	bf00      	nop
 8005524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005526:	bc08      	pop	{r3}
 8005528:	469e      	mov	lr, r3
 800552a:	4770      	bx	lr
