
lcd_smol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e28  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000934  08009fb8  08009fb8  00019fb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8ec  0800a8ec  00020250  2**0
                  CONTENTS
  4 .ARM          00000008  0800a8ec  0800a8ec  0001a8ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a8f4  0800a8f4  00020250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8f4  0800a8f4  0001a8f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8f8  0800a8f8  0001a8f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000250  20000000  0800a8fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003fc  20000250  0800ab4c  00020250  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000064c  0800ab4c  0002064c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020280  2**0
                  CONTENTS, READONLY
 13 .debug_info   000163ce  00000000  00000000  000202c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002dfb  00000000  00000000  00036691  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001450  00000000  00000000  00039490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fd6  00000000  00000000  0003a8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023464  00000000  00000000  0003b8b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001792c  00000000  00000000  0005ed1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d411a  00000000  00000000  00076646  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006780  00000000  00000000  0014a760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  00150ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000250 	.word	0x20000250
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009fa0 	.word	0x08009fa0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000254 	.word	0x20000254
 80001cc:	08009fa0 	.word	0x08009fa0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <uint16_to_bytes>:
  }
#endif

// Probably going to move these to a different file, but for now
void uint16_to_bytes(uint16_t in, uint8_t *out)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	6039      	str	r1, [r7, #0]
 8000eae:	80fb      	strh	r3, [r7, #6]
	out[0] = (in >> 8) & 0xFF;
 8000eb0:	88fb      	ldrh	r3, [r7, #6]
 8000eb2:	0a1b      	lsrs	r3, r3, #8
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	b2da      	uxtb	r2, r3
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	701a      	strb	r2, [r3, #0]
	out[1] = in & 0xFF;
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	88fa      	ldrh	r2, [r7, #6]
 8000ec2:	b2d2      	uxtb	r2, r2
 8000ec4:	701a      	strb	r2, [r3, #0]
}
 8000ec6:	bf00      	nop
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <LCD_reset>:
	HX8357_DISPON, 0x80 +  50/5, // Main screen turn on, delay 50 ms
	0,                           // END OF COMMAND LIST
  };

void LCD_reset()
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	2102      	movs	r1, #2
 8000eda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ede:	f002 fafb 	bl	80034d8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000ee2:	2064      	movs	r0, #100	; 0x64
 8000ee4:	f002 f846 	bl	8002f74 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2102      	movs	r1, #2
 8000eec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef0:	f002 faf2 	bl	80034d8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000ef4:	2064      	movs	r0, #100	; 0x64
 8000ef6:	f002 f83d 	bl	8002f74 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8000efa:	2201      	movs	r2, #1
 8000efc:	2102      	movs	r1, #2
 8000efe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f02:	f002 fae9 	bl	80034d8 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000f06:	20c8      	movs	r0, #200	; 0xc8
 8000f08:	f002 f834 	bl	8002f74 <HAL_Delay>
}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <LCD_writeCommand>:

HAL_StatusTypeDef LCD_writeCommand(SPI_HandleTypeDef* spi, uint8_t cmd)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af02      	add	r7, sp, #8
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	460b      	mov	r3, r1
 8000f1a:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef result;
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2108      	movs	r1, #8
 8000f20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f24:	f002 fad8 	bl	80034d8 <HAL_GPIO_WritePin>
	uint8_t buf[1];
	result = HAL_SPI_TransmitReceive(spi, &cmd, &buf[0], 1, 100);
 8000f28:	f107 020c 	add.w	r2, r7, #12
 8000f2c:	1cf9      	adds	r1, r7, #3
 8000f2e:	2364      	movs	r3, #100	; 0x64
 8000f30:	9300      	str	r3, [sp, #0]
 8000f32:	2301      	movs	r3, #1
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f003 fff3 	bl	8004f20 <HAL_SPI_TransmitReceive>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000f3e:	2201      	movs	r2, #1
 8000f40:	2108      	movs	r1, #8
 8000f42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f46:	f002 fac7 	bl	80034d8 <HAL_GPIO_WritePin>
	return result;
 8000f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <LCD_startWrite>:

void LCD_startWrite()
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2140      	movs	r1, #64	; 0x40
 8000f5c:	4802      	ldr	r0, [pc, #8]	; (8000f68 <LCD_startWrite+0x14>)
 8000f5e:	f002 fabb 	bl	80034d8 <HAL_GPIO_WritePin>
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	48000400 	.word	0x48000400

08000f6c <LCD_endWrite>:

void LCD_endWrite()
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000f70:	2201      	movs	r2, #1
 8000f72:	2140      	movs	r1, #64	; 0x40
 8000f74:	4802      	ldr	r0, [pc, #8]	; (8000f80 <LCD_endWrite+0x14>)
 8000f76:	f002 faaf 	bl	80034d8 <HAL_GPIO_WritePin>
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	48000400 	.word	0x48000400

08000f84 <LCD_begin>:

int LCD_begin(SPI_HandleTypeDef* spi)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	LCD_reset();
 8000f8c:	f7ff ffa1 	bl	8000ed2 <LCD_reset>
	LCD_startWrite();
 8000f90:	f7ff ffe0 	bl	8000f54 <LCD_startWrite>
	uint8_t *addr = init;
 8000f94:	4b26      	ldr	r3, [pc, #152]	; (8001030 <LCD_begin+0xac>)
 8000f96:	60fb      	str	r3, [r7, #12]
	uint8_t cmd, x, numArgs;
	HAL_StatusTypeDef result;
	while((cmd = *(addr++)) > 0) // '0' command ends list
 8000f98:	e03b      	b.n	8001012 <LCD_begin+0x8e>
	{
		if (cmd != 0xFF) // '255' is ignored
 8000f9a:	7abb      	ldrb	r3, [r7, #10]
 8000f9c:	2bff      	cmp	r3, #255	; 0xff
 8000f9e:	d00d      	beq.n	8000fbc <LCD_begin+0x38>
		{
			result = LCD_writeCommand(spi, cmd);
 8000fa0:	7abb      	ldrb	r3, [r7, #10]
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff ffb3 	bl	8000f10 <LCD_writeCommand>
 8000faa:	4603      	mov	r3, r0
 8000fac:	727b      	strb	r3, [r7, #9]
			if (result != HAL_OK)
 8000fae:	7a7b      	ldrb	r3, [r7, #9]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d003      	beq.n	8000fbc <LCD_begin+0x38>
			{
				LCD_endWrite();
 8000fb4:	f7ff ffda 	bl	8000f6c <LCD_endWrite>
				return 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	e035      	b.n	8001028 <LCD_begin+0xa4>
			}
		}
		x = *(addr++);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	1c5a      	adds	r2, r3, #1
 8000fc0:	60fa      	str	r2, [r7, #12]
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	723b      	strb	r3, [r7, #8]
		numArgs = x & 0x7F;
 8000fc6:	7a3b      	ldrb	r3, [r7, #8]
 8000fc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000fcc:	72fb      	strb	r3, [r7, #11]
		if (x & 0x80) // If high bit set...
 8000fce:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	da18      	bge.n	8001008 <LCD_begin+0x84>
		{
			HAL_Delay(numArgs * 5); // numArgs is actually a delay time (5ms units)
 8000fd6:	7afa      	ldrb	r2, [r7, #11]
 8000fd8:	4613      	mov	r3, r2
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	4413      	add	r3, r2
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f001 ffc8 	bl	8002f74 <HAL_Delay>
 8000fe4:	e015      	b.n	8001012 <LCD_begin+0x8e>
		}
		else // Otherwise, issue args to command...
		{
			while (numArgs--)
			{
				result = HAL_SPI_Transmit(spi, addr++, 1, 100);
 8000fe6:	68f9      	ldr	r1, [r7, #12]
 8000fe8:	1c4b      	adds	r3, r1, #1
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	2364      	movs	r3, #100	; 0x64
 8000fee:	2201      	movs	r2, #1
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f003 fe20 	bl	8004c36 <HAL_SPI_Transmit>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	727b      	strb	r3, [r7, #9]
				if (result != HAL_OK)
 8000ffa:	7a7b      	ldrb	r3, [r7, #9]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d003      	beq.n	8001008 <LCD_begin+0x84>
				{
					LCD_endWrite();
 8001000:	f7ff ffb4 	bl	8000f6c <LCD_endWrite>
					return 0;
 8001004:	2300      	movs	r3, #0
 8001006:	e00f      	b.n	8001028 <LCD_begin+0xa4>
			while (numArgs--)
 8001008:	7afb      	ldrb	r3, [r7, #11]
 800100a:	1e5a      	subs	r2, r3, #1
 800100c:	72fa      	strb	r2, [r7, #11]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d1e9      	bne.n	8000fe6 <LCD_begin+0x62>
	while((cmd = *(addr++)) > 0) // '0' command ends list
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	1c5a      	adds	r2, r3, #1
 8001016:	60fa      	str	r2, [r7, #12]
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	72bb      	strb	r3, [r7, #10]
 800101c:	7abb      	ldrb	r3, [r7, #10]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1bb      	bne.n	8000f9a <LCD_begin+0x16>
				}
			}
		}
	}
	LCD_endWrite();
 8001022:	f7ff ffa3 	bl	8000f6c <LCD_endWrite>
	return 1;
 8001026:	2301      	movs	r3, #1
}
 8001028:	4618      	mov	r0, r3
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000000 	.word	0x20000000

08001034 <LCD_setAddrWindow>:
	LCD_endWrite();
	return result == HAL_OK;
}

int LCD_setAddrWindow(SPI_HandleTypeDef* spi, uint16_t x1, uint16_t y1, uint16_t w, uint16_t h)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	4608      	mov	r0, r1
 800103e:	4611      	mov	r1, r2
 8001040:	461a      	mov	r2, r3
 8001042:	4603      	mov	r3, r0
 8001044:	817b      	strh	r3, [r7, #10]
 8001046:	460b      	mov	r3, r1
 8001048:	813b      	strh	r3, [r7, #8]
 800104a:	4613      	mov	r3, r2
 800104c:	80fb      	strh	r3, [r7, #6]
	uint16_t x2 = x1 + w - 1;
 800104e:	897a      	ldrh	r2, [r7, #10]
 8001050:	88fb      	ldrh	r3, [r7, #6]
 8001052:	4413      	add	r3, r2
 8001054:	b29b      	uxth	r3, r3
 8001056:	3b01      	subs	r3, #1
 8001058:	82fb      	strh	r3, [r7, #22]
	uint16_t y2 = y1 + h - 1;
 800105a:	893a      	ldrh	r2, [r7, #8]
 800105c:	8c3b      	ldrh	r3, [r7, #32]
 800105e:	4413      	add	r3, r2
 8001060:	b29b      	uxth	r3, r3
 8001062:	3b01      	subs	r3, #1
 8001064:	82bb      	strh	r3, [r7, #20]
	uint8_t buf[2];

	LCD_startWrite();
 8001066:	f7ff ff75 	bl	8000f54 <LCD_startWrite>
	LCD_writeCommand(spi, HX8357_CASET); // Column address set
 800106a:	212a      	movs	r1, #42	; 0x2a
 800106c:	68f8      	ldr	r0, [r7, #12]
 800106e:	f7ff ff4f 	bl	8000f10 <LCD_writeCommand>

	uint16_to_bytes(x1, buf);
 8001072:	f107 0210 	add.w	r2, r7, #16
 8001076:	897b      	ldrh	r3, [r7, #10]
 8001078:	4611      	mov	r1, r2
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff ff12 	bl	8000ea4 <uint16_to_bytes>
	HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 8001080:	f107 0110 	add.w	r1, r7, #16
 8001084:	2364      	movs	r3, #100	; 0x64
 8001086:	2202      	movs	r2, #2
 8001088:	68f8      	ldr	r0, [r7, #12]
 800108a:	f003 fdd4 	bl	8004c36 <HAL_SPI_Transmit>

	uint16_to_bytes(x2, buf);
 800108e:	f107 0210 	add.w	r2, r7, #16
 8001092:	8afb      	ldrh	r3, [r7, #22]
 8001094:	4611      	mov	r1, r2
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff ff04 	bl	8000ea4 <uint16_to_bytes>
	HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 800109c:	f107 0110 	add.w	r1, r7, #16
 80010a0:	2364      	movs	r3, #100	; 0x64
 80010a2:	2202      	movs	r2, #2
 80010a4:	68f8      	ldr	r0, [r7, #12]
 80010a6:	f003 fdc6 	bl	8004c36 <HAL_SPI_Transmit>

	LCD_writeCommand(spi, HX8357_PASET); // Row address set
 80010aa:	212b      	movs	r1, #43	; 0x2b
 80010ac:	68f8      	ldr	r0, [r7, #12]
 80010ae:	f7ff ff2f 	bl	8000f10 <LCD_writeCommand>

	uint16_to_bytes(y1, buf);
 80010b2:	f107 0210 	add.w	r2, r7, #16
 80010b6:	893b      	ldrh	r3, [r7, #8]
 80010b8:	4611      	mov	r1, r2
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fef2 	bl	8000ea4 <uint16_to_bytes>
	HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 80010c0:	f107 0110 	add.w	r1, r7, #16
 80010c4:	2364      	movs	r3, #100	; 0x64
 80010c6:	2202      	movs	r2, #2
 80010c8:	68f8      	ldr	r0, [r7, #12]
 80010ca:	f003 fdb4 	bl	8004c36 <HAL_SPI_Transmit>

	uint16_to_bytes(y2, buf);
 80010ce:	f107 0210 	add.w	r2, r7, #16
 80010d2:	8abb      	ldrh	r3, [r7, #20]
 80010d4:	4611      	mov	r1, r2
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fee4 	bl	8000ea4 <uint16_to_bytes>
	HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 80010dc:	f107 0110 	add.w	r1, r7, #16
 80010e0:	2364      	movs	r3, #100	; 0x64
 80010e2:	2202      	movs	r2, #2
 80010e4:	68f8      	ldr	r0, [r7, #12]
 80010e6:	f003 fda6 	bl	8004c36 <HAL_SPI_Transmit>

	LCD_endWrite();
 80010ea:	f7ff ff3f 	bl	8000f6c <LCD_endWrite>
	return 1;
 80010ee:	2301      	movs	r3, #1
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3718      	adds	r7, #24
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <LCD_color565>:

uint16_t LCD_color565(uint8_t red, uint8_t green, uint8_t blue) {
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
 8001102:	460b      	mov	r3, r1
 8001104:	71bb      	strb	r3, [r7, #6]
 8001106:	4613      	mov	r3, r2
 8001108:	717b      	strb	r3, [r7, #5]
    return ((red & 0xF8) << 8) | ((green & 0xFC) << 3) | ((blue & 0xF8) >> 3);
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	021b      	lsls	r3, r3, #8
 800110e:	b21b      	sxth	r3, r3
 8001110:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001114:	f023 0307 	bic.w	r3, r3, #7
 8001118:	b21a      	sxth	r2, r3
 800111a:	79bb      	ldrb	r3, [r7, #6]
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	b21b      	sxth	r3, r3
 8001120:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8001124:	b21b      	sxth	r3, r3
 8001126:	4313      	orrs	r3, r2
 8001128:	b21a      	sxth	r2, r3
 800112a:	797b      	ldrb	r3, [r7, #5]
 800112c:	08db      	lsrs	r3, r3, #3
 800112e:	b2db      	uxtb	r3, r3
 8001130:	b21b      	sxth	r3, r3
 8001132:	4313      	orrs	r3, r2
 8001134:	b21b      	sxth	r3, r3
 8001136:	b29b      	uxth	r3, r3
}
 8001138:	4618      	mov	r0, r3
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <LCD_pushColor>:

int LCD_pushColor(SPI_HandleTypeDef* spi, uint16_t color) {
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	460b      	mov	r3, r1
 800114e:	807b      	strh	r3, [r7, #2]
	LCD_startWrite();
 8001150:	f7ff ff00 	bl	8000f54 <LCD_startWrite>
	LCD_writeCommand(spi, HX8357_RAMWR); // Write to RAM
 8001154:	212c      	movs	r1, #44	; 0x2c
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff feda 	bl	8000f10 <LCD_writeCommand>
	HAL_SPI_Transmit(spi, (uint8_t*)&color, 2, 100);
 800115c:	1cb9      	adds	r1, r7, #2
 800115e:	2364      	movs	r3, #100	; 0x64
 8001160:	2202      	movs	r2, #2
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f003 fd67 	bl	8004c36 <HAL_SPI_Transmit>
	LCD_writeCommand(spi, HX8357_NOP); // Write command to stop RAMWR
 8001168:	2100      	movs	r1, #0
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f7ff fed0 	bl	8000f10 <LCD_writeCommand>
	LCD_endWrite();
 8001170:	f7ff fefc 	bl	8000f6c <LCD_endWrite>
	return 1;
 8001174:	2301      	movs	r3, #1
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <LCD_pushColorCopy>:

int LCD_pushColorCopy(SPI_HandleTypeDef* spi, uint16_t color, uint32_t count) {
 800117e:	b580      	push	{r7, lr}
 8001180:	b086      	sub	sp, #24
 8001182:	af00      	add	r7, sp, #0
 8001184:	60f8      	str	r0, [r7, #12]
 8001186:	460b      	mov	r3, r1
 8001188:	607a      	str	r2, [r7, #4]
 800118a:	817b      	strh	r3, [r7, #10]
	LCD_startWrite();
 800118c:	f7ff fee2 	bl	8000f54 <LCD_startWrite>

	LCD_writeCommand(spi, HX8357_RAMWR); // Write to RAM
 8001190:	212c      	movs	r1, #44	; 0x2c
 8001192:	68f8      	ldr	r0, [r7, #12]
 8001194:	f7ff febc 	bl	8000f10 <LCD_writeCommand>

	uint8_t buf[2];
	uint16_to_bytes(color, &buf[0]);
 8001198:	f107 0210 	add.w	r2, r7, #16
 800119c:	897b      	ldrh	r3, [r7, #10]
 800119e:	4611      	mov	r1, r2
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff fe7f 	bl	8000ea4 <uint16_to_bytes>
	for (int i = 0; i < count; ++i)
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
 80011aa:	e009      	b.n	80011c0 <LCD_pushColorCopy+0x42>
	{
		HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 80011ac:	f107 0110 	add.w	r1, r7, #16
 80011b0:	2364      	movs	r3, #100	; 0x64
 80011b2:	2202      	movs	r2, #2
 80011b4:	68f8      	ldr	r0, [r7, #12]
 80011b6:	f003 fd3e 	bl	8004c36 <HAL_SPI_Transmit>
	for (int i = 0; i < count; ++i)
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	3301      	adds	r3, #1
 80011be:	617b      	str	r3, [r7, #20]
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d8f1      	bhi.n	80011ac <LCD_pushColorCopy+0x2e>
	}

	LCD_writeCommand(spi, HX8357_NOP); // Write command to stop RAMWR
 80011c8:	2100      	movs	r1, #0
 80011ca:	68f8      	ldr	r0, [r7, #12]
 80011cc:	f7ff fea0 	bl	8000f10 <LCD_writeCommand>

	LCD_endWrite();
 80011d0:	f7ff fecc 	bl	8000f6c <LCD_endWrite>
	return 1;
 80011d4:	2301      	movs	r3, #1
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3718      	adds	r7, #24
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <LCD_writePixel>:

	LCD_endWrite();
	return 1;
}

int LCD_writePixel(SPI_HandleTypeDef* spi, int16_t x, int16_t y, uint16_t color) {
 80011de:	b580      	push	{r7, lr}
 80011e0:	b086      	sub	sp, #24
 80011e2:	af02      	add	r7, sp, #8
 80011e4:	60f8      	str	r0, [r7, #12]
 80011e6:	4608      	mov	r0, r1
 80011e8:	4611      	mov	r1, r2
 80011ea:	461a      	mov	r2, r3
 80011ec:	4603      	mov	r3, r0
 80011ee:	817b      	strh	r3, [r7, #10]
 80011f0:	460b      	mov	r3, r1
 80011f2:	813b      	strh	r3, [r7, #8]
 80011f4:	4613      	mov	r3, r2
 80011f6:	80fb      	strh	r3, [r7, #6]
    if ((x < 0) ||(x >= HX8357_TFTWIDTH) || (y < 0) || (y >= HX8357_TFTHEIGHT)) return 0;
 80011f8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	db0d      	blt.n	800121c <LCD_writePixel+0x3e>
 8001200:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001204:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001208:	da08      	bge.n	800121c <LCD_writePixel+0x3e>
 800120a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800120e:	2b00      	cmp	r3, #0
 8001210:	db04      	blt.n	800121c <LCD_writePixel+0x3e>
 8001212:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001216:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800121a:	db01      	blt.n	8001220 <LCD_writePixel+0x42>
 800121c:	2300      	movs	r3, #0
 800121e:	e017      	b.n	8001250 <LCD_writePixel+0x72>
    if(!LCD_setAddrWindow(spi, x, y, 1, 1)) return 0;
 8001220:	8979      	ldrh	r1, [r7, #10]
 8001222:	893a      	ldrh	r2, [r7, #8]
 8001224:	2301      	movs	r3, #1
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	2301      	movs	r3, #1
 800122a:	68f8      	ldr	r0, [r7, #12]
 800122c:	f7ff ff02 	bl	8001034 <LCD_setAddrWindow>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d101      	bne.n	800123a <LCD_writePixel+0x5c>
 8001236:	2300      	movs	r3, #0
 8001238:	e00a      	b.n	8001250 <LCD_writePixel+0x72>
    if (!LCD_pushColor(spi, color)) return 0;
 800123a:	88fb      	ldrh	r3, [r7, #6]
 800123c:	4619      	mov	r1, r3
 800123e:	68f8      	ldr	r0, [r7, #12]
 8001240:	f7ff ff80 	bl	8001144 <LCD_pushColor>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d101      	bne.n	800124e <LCD_writePixel+0x70>
 800124a:	2300      	movs	r3, #0
 800124c:	e000      	b.n	8001250 <LCD_writePixel+0x72>
    return 1;
 800124e:	2301      	movs	r3, #1
}
 8001250:	4618      	mov	r0, r3
 8001252:	3710      	adds	r7, #16
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <LCD_writePixels>:

// Length of colors array must be w * h
int LCD_writePixels(SPI_HandleTypeDef* spi, uint16_t color,
					int16_t x, int16_t y, int16_t w, int16_t h)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af02      	add	r7, sp, #8
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	4608      	mov	r0, r1
 8001262:	4611      	mov	r1, r2
 8001264:	461a      	mov	r2, r3
 8001266:	4603      	mov	r3, r0
 8001268:	817b      	strh	r3, [r7, #10]
 800126a:	460b      	mov	r3, r1
 800126c:	813b      	strh	r3, [r7, #8]
 800126e:	4613      	mov	r3, r2
 8001270:	80fb      	strh	r3, [r7, #6]
	if ((x < 0) ||(x >= HX8357_TFTWIDTH) || (y < 0) || (y >= HX8357_TFTHEIGHT)) return 0;
 8001272:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001276:	2b00      	cmp	r3, #0
 8001278:	db0d      	blt.n	8001296 <LCD_writePixels+0x3e>
 800127a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800127e:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001282:	da08      	bge.n	8001296 <LCD_writePixels+0x3e>
 8001284:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001288:	2b00      	cmp	r3, #0
 800128a:	db04      	blt.n	8001296 <LCD_writePixels+0x3e>
 800128c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001290:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001294:	db01      	blt.n	800129a <LCD_writePixels+0x42>
 8001296:	2300      	movs	r3, #0
 8001298:	e01f      	b.n	80012da <LCD_writePixels+0x82>
	if(!LCD_setAddrWindow(spi, x, y, w, h)) return 0;
 800129a:	8939      	ldrh	r1, [r7, #8]
 800129c:	88fa      	ldrh	r2, [r7, #6]
 800129e:	8b38      	ldrh	r0, [r7, #24]
 80012a0:	8bbb      	ldrh	r3, [r7, #28]
 80012a2:	9300      	str	r3, [sp, #0]
 80012a4:	4603      	mov	r3, r0
 80012a6:	68f8      	ldr	r0, [r7, #12]
 80012a8:	f7ff fec4 	bl	8001034 <LCD_setAddrWindow>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d101      	bne.n	80012b6 <LCD_writePixels+0x5e>
 80012b2:	2300      	movs	r3, #0
 80012b4:	e011      	b.n	80012da <LCD_writePixels+0x82>
	if (!LCD_pushColorCopy(spi, color, w*h)) return 0;
 80012b6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80012ba:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80012be:	fb02 f303 	mul.w	r3, r2, r3
 80012c2:	461a      	mov	r2, r3
 80012c4:	897b      	ldrh	r3, [r7, #10]
 80012c6:	4619      	mov	r1, r3
 80012c8:	68f8      	ldr	r0, [r7, #12]
 80012ca:	f7ff ff58 	bl	800117e <LCD_pushColorCopy>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d101      	bne.n	80012d8 <LCD_writePixels+0x80>
 80012d4:	2300      	movs	r3, #0
 80012d6:	e000      	b.n	80012da <LCD_writePixels+0x82>
	return 1;
 80012d8:	2301      	movs	r3, #1
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
	...

080012e4 <LCD_drawChar>:
		0x70, 0x1C, 0x07, 0x1C, 0x70,
		0x0E, 0x38, 0xE0, 0x38, 0x0E
};

void LCD_drawChar(SPI_HandleTypeDef* spi, int16_t x, int16_t y, unsigned char c, uint16_t color, uint32_t size)
{
 80012e4:	b590      	push	{r4, r7, lr}
 80012e6:	b089      	sub	sp, #36	; 0x24
 80012e8:	af02      	add	r7, sp, #8
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	4608      	mov	r0, r1
 80012ee:	4611      	mov	r1, r2
 80012f0:	461a      	mov	r2, r3
 80012f2:	4603      	mov	r3, r0
 80012f4:	817b      	strh	r3, [r7, #10]
 80012f6:	460b      	mov	r3, r1
 80012f8:	813b      	strh	r3, [r7, #8]
 80012fa:	4613      	mov	r3, r2
 80012fc:	71fb      	strb	r3, [r7, #7]
	if((x >= HX8357_TFTWIDTH)   || // Clip right
 80012fe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001302:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001306:	f280 80b5 	bge.w	8001474 <LCD_drawChar+0x190>
	   (y >= HX8357_TFTHEIGHT)  || // Clip bottom
	   ((x + 6 * size - 1) < 0) || // Clip left
 800130a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800130e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001312:	f280 80af 	bge.w	8001474 <LCD_drawChar+0x190>
	   ((y + 8 * size - 1) < 0))   // Clip top
		return;

	uint16_t bg = LCD_color565(255, 255, 255);
 8001316:	22ff      	movs	r2, #255	; 0xff
 8001318:	21ff      	movs	r1, #255	; 0xff
 800131a:	20ff      	movs	r0, #255	; 0xff
 800131c:	f7ff feec 	bl	80010f8 <LCD_color565>
 8001320:	4603      	mov	r3, r0
 8001322:	827b      	strh	r3, [r7, #18]
	LCD_startWrite();
 8001324:	f7ff fe16 	bl	8000f54 <LCD_startWrite>
	for(int8_t i = 0; i < 5; i++) // Char bitmap = 5 columns
 8001328:	2300      	movs	r3, #0
 800132a:	75fb      	strb	r3, [r7, #23]
 800132c:	e09a      	b.n	8001464 <LCD_drawChar+0x180>
	{
		uint8_t line = font[c * 5 + i];
 800132e:	79fa      	ldrb	r2, [r7, #7]
 8001330:	4613      	mov	r3, r2
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	441a      	add	r2, r3
 8001336:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800133a:	4413      	add	r3, r2
 800133c:	4a4f      	ldr	r2, [pc, #316]	; (800147c <LCD_drawChar+0x198>)
 800133e:	5cd3      	ldrb	r3, [r2, r3]
 8001340:	75bb      	strb	r3, [r7, #22]
		for(int8_t j = 0; j < 8; j++, line >>= 1)
 8001342:	2300      	movs	r3, #0
 8001344:	757b      	strb	r3, [r7, #21]
 8001346:	e082      	b.n	800144e <LCD_drawChar+0x16a>
		{
			if (line & 1)
 8001348:	7dbb      	ldrb	r3, [r7, #22]
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	2b00      	cmp	r3, #0
 8001350:	d03a      	beq.n	80013c8 <LCD_drawChar+0xe4>
			{
				if (size == 1) LCD_writePixel(spi, x+i, y+j, color);
 8001352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001354:	2b01      	cmp	r3, #1
 8001356:	d112      	bne.n	800137e <LCD_drawChar+0x9a>
 8001358:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800135c:	b29a      	uxth	r2, r3
 800135e:	897b      	ldrh	r3, [r7, #10]
 8001360:	4413      	add	r3, r2
 8001362:	b29b      	uxth	r3, r3
 8001364:	b219      	sxth	r1, r3
 8001366:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800136a:	b29a      	uxth	r2, r3
 800136c:	893b      	ldrh	r3, [r7, #8]
 800136e:	4413      	add	r3, r2
 8001370:	b29b      	uxth	r3, r3
 8001372:	b21a      	sxth	r2, r3
 8001374:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001376:	68f8      	ldr	r0, [r7, #12]
 8001378:	f7ff ff31 	bl	80011de <LCD_writePixel>
 800137c:	e05e      	b.n	800143c <LCD_drawChar+0x158>
				else LCD_writePixels(spi, color, x+i*size, y+j*size, size, size);
 800137e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001382:	b29a      	uxth	r2, r3
 8001384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001386:	b29b      	uxth	r3, r3
 8001388:	fb12 f303 	smulbb	r3, r2, r3
 800138c:	b29a      	uxth	r2, r3
 800138e:	897b      	ldrh	r3, [r7, #10]
 8001390:	4413      	add	r3, r2
 8001392:	b29b      	uxth	r3, r3
 8001394:	b218      	sxth	r0, r3
 8001396:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800139a:	b29a      	uxth	r2, r3
 800139c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800139e:	b29b      	uxth	r3, r3
 80013a0:	fb12 f303 	smulbb	r3, r2, r3
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	893b      	ldrh	r3, [r7, #8]
 80013a8:	4413      	add	r3, r2
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	b21c      	sxth	r4, r3
 80013ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013b0:	b21b      	sxth	r3, r3
 80013b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013b4:	b212      	sxth	r2, r2
 80013b6:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80013b8:	9201      	str	r2, [sp, #4]
 80013ba:	9300      	str	r3, [sp, #0]
 80013bc:	4623      	mov	r3, r4
 80013be:	4602      	mov	r2, r0
 80013c0:	68f8      	ldr	r0, [r7, #12]
 80013c2:	f7ff ff49 	bl	8001258 <LCD_writePixels>
 80013c6:	e039      	b.n	800143c <LCD_drawChar+0x158>
			}
			else
			{
				if (size == 1) LCD_writePixel(spi, x+i, y+j, bg);
 80013c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d112      	bne.n	80013f4 <LCD_drawChar+0x110>
 80013ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80013d2:	b29a      	uxth	r2, r3
 80013d4:	897b      	ldrh	r3, [r7, #10]
 80013d6:	4413      	add	r3, r2
 80013d8:	b29b      	uxth	r3, r3
 80013da:	b219      	sxth	r1, r3
 80013dc:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80013e0:	b29a      	uxth	r2, r3
 80013e2:	893b      	ldrh	r3, [r7, #8]
 80013e4:	4413      	add	r3, r2
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	b21a      	sxth	r2, r3
 80013ea:	8a7b      	ldrh	r3, [r7, #18]
 80013ec:	68f8      	ldr	r0, [r7, #12]
 80013ee:	f7ff fef6 	bl	80011de <LCD_writePixel>
 80013f2:	e023      	b.n	800143c <LCD_drawChar+0x158>
				else LCD_writePixels(spi, bg, x+i*size, y+j*size, size, size);
 80013f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	fb12 f303 	smulbb	r3, r2, r3
 8001402:	b29a      	uxth	r2, r3
 8001404:	897b      	ldrh	r3, [r7, #10]
 8001406:	4413      	add	r3, r2
 8001408:	b29b      	uxth	r3, r3
 800140a:	b218      	sxth	r0, r3
 800140c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001410:	b29a      	uxth	r2, r3
 8001412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001414:	b29b      	uxth	r3, r3
 8001416:	fb12 f303 	smulbb	r3, r2, r3
 800141a:	b29a      	uxth	r2, r3
 800141c:	893b      	ldrh	r3, [r7, #8]
 800141e:	4413      	add	r3, r2
 8001420:	b29b      	uxth	r3, r3
 8001422:	b21c      	sxth	r4, r3
 8001424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001426:	b21b      	sxth	r3, r3
 8001428:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800142a:	b212      	sxth	r2, r2
 800142c:	8a79      	ldrh	r1, [r7, #18]
 800142e:	9201      	str	r2, [sp, #4]
 8001430:	9300      	str	r3, [sp, #0]
 8001432:	4623      	mov	r3, r4
 8001434:	4602      	mov	r2, r0
 8001436:	68f8      	ldr	r0, [r7, #12]
 8001438:	f7ff ff0e 	bl	8001258 <LCD_writePixels>
		for(int8_t j = 0; j < 8; j++, line >>= 1)
 800143c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001440:	b2db      	uxtb	r3, r3
 8001442:	3301      	adds	r3, #1
 8001444:	b2db      	uxtb	r3, r3
 8001446:	757b      	strb	r3, [r7, #21]
 8001448:	7dbb      	ldrb	r3, [r7, #22]
 800144a:	085b      	lsrs	r3, r3, #1
 800144c:	75bb      	strb	r3, [r7, #22]
 800144e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001452:	2b07      	cmp	r3, #7
 8001454:	f77f af78 	ble.w	8001348 <LCD_drawChar+0x64>
	for(int8_t i = 0; i < 5; i++) // Char bitmap = 5 columns
 8001458:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800145c:	b2db      	uxtb	r3, r3
 800145e:	3301      	adds	r3, #1
 8001460:	b2db      	uxtb	r3, r3
 8001462:	75fb      	strb	r3, [r7, #23]
 8001464:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001468:	2b04      	cmp	r3, #4
 800146a:	f77f af60 	ble.w	800132e <LCD_drawChar+0x4a>
			}
		}
	}
	LCD_endWrite();
 800146e:	f7ff fd7d 	bl	8000f6c <LCD_endWrite>
 8001472:	e000      	b.n	8001476 <LCD_drawChar+0x192>
		return;
 8001474:	bf00      	nop
}
 8001476:	371c      	adds	r7, #28
 8001478:	46bd      	mov	sp, r7
 800147a:	bd90      	pop	{r4, r7, pc}
 800147c:	0800a010 	.word	0x0800a010

08001480 <LCD_drawString>:
	}
	LCD_endWrite();
}

void LCD_drawString(SPI_HandleTypeDef* spi, int16_t x, int16_t y, unsigned char* c, uint32_t length, uint16_t color, uint32_t size)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b088      	sub	sp, #32
 8001484:	af02      	add	r7, sp, #8
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	607b      	str	r3, [r7, #4]
 800148a:	460b      	mov	r3, r1
 800148c:	817b      	strh	r3, [r7, #10]
 800148e:	4613      	mov	r3, r2
 8001490:	813b      	strh	r3, [r7, #8]
	for (int i = 0; i < length; ++i) LCD_drawChar(spi, x + i*6*size, y, c[i], color, size);
 8001492:	2300      	movs	r3, #0
 8001494:	617b      	str	r3, [r7, #20]
 8001496:	e020      	b.n	80014da <LCD_drawString+0x5a>
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	b29a      	uxth	r2, r3
 800149c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800149e:	b29b      	uxth	r3, r3
 80014a0:	fb12 f303 	smulbb	r3, r2, r3
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	461a      	mov	r2, r3
 80014a8:	0052      	lsls	r2, r2, #1
 80014aa:	4413      	add	r3, r2
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	897b      	ldrh	r3, [r7, #10]
 80014b2:	4413      	add	r3, r2
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	b219      	sxth	r1, r3
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	4413      	add	r3, r2
 80014be:	7818      	ldrb	r0, [r3, #0]
 80014c0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80014c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c6:	9301      	str	r3, [sp, #4]
 80014c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	4603      	mov	r3, r0
 80014ce:	68f8      	ldr	r0, [r7, #12]
 80014d0:	f7ff ff08 	bl	80012e4 <LCD_drawChar>
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	3301      	adds	r3, #1
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	6a3a      	ldr	r2, [r7, #32]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d8da      	bhi.n	8001498 <LCD_drawString+0x18>
}
 80014e2:	bf00      	nop
 80014e4:	bf00      	nop
 80014e6:	3718      	adds	r7, #24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <LCD_writeLine>:
		}
	}
	LCD_endWrite();
}

void LCD_writeLine(SPI_HandleTypeDef *spi, int x0, int y0, int x1, int y1, int color) {
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08a      	sub	sp, #40	; 0x28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
 80014f8:	603b      	str	r3, [r7, #0]
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80014fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001504:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001508:	6839      	ldr	r1, [r7, #0]
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	1acb      	subs	r3, r1, r3
 800150e:	2b00      	cmp	r3, #0
 8001510:	bfb8      	it	lt
 8001512:	425b      	neglt	r3, r3
 8001514:	429a      	cmp	r2, r3
 8001516:	bfcc      	ite	gt
 8001518:	2301      	movgt	r3, #1
 800151a:	2300      	movle	r3, #0
 800151c:	b2db      	uxtb	r3, r3
 800151e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (steep) {
 8001520:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001524:	2b00      	cmp	r3, #0
 8001526:	d00d      	beq.n	8001544 <LCD_writeLine+0x58>
    _swap_int16_t(x0, y0);
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	843b      	strh	r3, [r7, #32]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001534:	607b      	str	r3, [r7, #4]
    _swap_int16_t(x1, y1);
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	83fb      	strh	r3, [r7, #30]
 800153a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800153c:	603b      	str	r3, [r7, #0]
 800153e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001542:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (x0 > x1) {
 8001544:	68ba      	ldr	r2, [r7, #8]
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	429a      	cmp	r2, r3
 800154a:	dd0d      	ble.n	8001568 <LCD_writeLine+0x7c>
    _swap_int16_t(x0, x1);
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	83bb      	strh	r3, [r7, #28]
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001558:	603b      	str	r3, [r7, #0]
    _swap_int16_t(y0, y1);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	837b      	strh	r3, [r7, #26]
 800155e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001560:	607b      	str	r3, [r7, #4]
 8001562:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001566:	633b      	str	r3, [r7, #48]	; 0x30
  }

  int16_t dx, dy;
  dx = x1 - x0;
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	b29a      	uxth	r2, r3
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	b29b      	uxth	r3, r3
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	b29b      	uxth	r3, r3
 8001574:	833b      	strh	r3, [r7, #24]
  dy = abs(y1 - y0);
 8001576:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b00      	cmp	r3, #0
 800157e:	bfb8      	it	lt
 8001580:	425b      	neglt	r3, r3
 8001582:	82fb      	strh	r3, [r7, #22]

  int16_t err = dx / 2;
 8001584:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001588:	0fda      	lsrs	r2, r3, #31
 800158a:	4413      	add	r3, r2
 800158c:	105b      	asrs	r3, r3, #1
 800158e:	84fb      	strh	r3, [r7, #38]	; 0x26
  int16_t ystep;

  if (y0 < y1) {
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001594:	429a      	cmp	r2, r3
 8001596:	da02      	bge.n	800159e <LCD_writeLine+0xb2>
    ystep = 1;
 8001598:	2301      	movs	r3, #1
 800159a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800159c:	e030      	b.n	8001600 <LCD_writeLine+0x114>
  } else {
    ystep = -1;
 800159e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015a2:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  for (; x0 <= x1; x0++) {
 80015a4:	e02c      	b.n	8001600 <LCD_writeLine+0x114>
    if (steep) {
 80015a6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d009      	beq.n	80015c2 <LCD_writeLine+0xd6>
      LCD_writePixel(spi, y0, x0, color);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	b219      	sxth	r1, r3
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	b21a      	sxth	r2, r3
 80015b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	68f8      	ldr	r0, [r7, #12]
 80015bc:	f7ff fe0f 	bl	80011de <LCD_writePixel>
 80015c0:	e008      	b.n	80015d4 <LCD_writeLine+0xe8>
    } else {
      LCD_writePixel(spi, x0, y0, color);
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	b219      	sxth	r1, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	b21a      	sxth	r2, r3
 80015ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	68f8      	ldr	r0, [r7, #12]
 80015d0:	f7ff fe05 	bl	80011de <LCD_writePixel>
    }
    err -= dy;
 80015d4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80015d6:	8afb      	ldrh	r3, [r7, #22]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	b29b      	uxth	r3, r3
 80015dc:	84fb      	strh	r3, [r7, #38]	; 0x26
    if (err < 0) {
 80015de:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	da09      	bge.n	80015fa <LCD_writeLine+0x10e>
      y0 += ystep;
 80015e6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	4413      	add	r3, r2
 80015ee:	607b      	str	r3, [r7, #4]
      err += dx;
 80015f0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80015f2:	8b3b      	ldrh	r3, [r7, #24]
 80015f4:	4413      	add	r3, r2
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	84fb      	strh	r3, [r7, #38]	; 0x26
  for (; x0 <= x1; x0++) {
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	3301      	adds	r3, #1
 80015fe:	60bb      	str	r3, [r7, #8]
 8001600:	68ba      	ldr	r2, [r7, #8]
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	429a      	cmp	r2, r3
 8001606:	ddce      	ble.n	80015a6 <LCD_writeLine+0xba>
    }
  }
}
 8001608:	bf00      	nop
 800160a:	bf00      	nop
 800160c:	3728      	adds	r7, #40	; 0x28
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <LCD_writeFastHLine>:

void LCD_writeFastVLine(SPI_HandleTypeDef *spi, int16_t x, int16_t y, int16_t h, uint16_t color) {
	LCD_writeLine(spi, x, y, x, y + h - 1, color);
}

void LCD_writeFastHLine(SPI_HandleTypeDef *spi, int16_t x, int16_t y, int16_t w, uint16_t color) {
 8001612:	b590      	push	{r4, r7, lr}
 8001614:	b087      	sub	sp, #28
 8001616:	af02      	add	r7, sp, #8
 8001618:	60f8      	str	r0, [r7, #12]
 800161a:	4608      	mov	r0, r1
 800161c:	4611      	mov	r1, r2
 800161e:	461a      	mov	r2, r3
 8001620:	4603      	mov	r3, r0
 8001622:	817b      	strh	r3, [r7, #10]
 8001624:	460b      	mov	r3, r1
 8001626:	813b      	strh	r3, [r7, #8]
 8001628:	4613      	mov	r3, r2
 800162a:	80fb      	strh	r3, [r7, #6]
	LCD_writeLine(spi, x, y, x + w - 1, y, color);
 800162c:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001630:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 8001634:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001638:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800163c:	4413      	add	r3, r2
 800163e:	1e5c      	subs	r4, r3, #1
 8001640:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001644:	8c3a      	ldrh	r2, [r7, #32]
 8001646:	9201      	str	r2, [sp, #4]
 8001648:	9300      	str	r3, [sp, #0]
 800164a:	4623      	mov	r3, r4
 800164c:	4602      	mov	r2, r0
 800164e:	68f8      	ldr	r0, [r7, #12]
 8001650:	f7ff ff4c 	bl	80014ec <LCD_writeLine>
}
 8001654:	bf00      	nop
 8001656:	3714      	adds	r7, #20
 8001658:	46bd      	mov	sp, r7
 800165a:	bd90      	pop	{r4, r7, pc}

0800165c <LCD_fillTriangle>:
	for (int16_t i = y; i < y + h; i++) {
		LCD_writeFastHLine(spi, x, i, w, color);
	}
}

void LCD_fillTriangle(SPI_HandleTypeDef *spi, int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
 800165c:	b580      	push	{r7, lr}
 800165e:	b092      	sub	sp, #72	; 0x48
 8001660:	af02      	add	r7, sp, #8
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	4608      	mov	r0, r1
 8001666:	4611      	mov	r1, r2
 8001668:	461a      	mov	r2, r3
 800166a:	4603      	mov	r3, r0
 800166c:	817b      	strh	r3, [r7, #10]
 800166e:	460b      	mov	r3, r1
 8001670:	813b      	strh	r3, [r7, #8]
 8001672:	4613      	mov	r3, r2
 8001674:	80fb      	strh	r3, [r7, #6]
	int16_t a, b, y, last;

	  // Sort coordinates by Y order (y2 >= y1 >= y0)
	  if (y0 > y1) {
 8001676:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800167a:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 800167e:	429a      	cmp	r2, r3
 8001680:	dd0d      	ble.n	800169e <LCD_fillTriangle+0x42>
	    _swap_int16_t(y0, y1);
 8001682:	893b      	ldrh	r3, [r7, #8]
 8001684:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001686:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800168a:	813b      	strh	r3, [r7, #8]
 800168c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800168e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	    _swap_int16_t(x0, x1);
 8001692:	897b      	ldrh	r3, [r7, #10]
 8001694:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001696:	88fb      	ldrh	r3, [r7, #6]
 8001698:	817b      	strh	r3, [r7, #10]
 800169a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800169c:	80fb      	strh	r3, [r7, #6]
	  }
	  if (y1 > y2) {
 800169e:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 80016a2:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80016a6:	429a      	cmp	r2, r3
 80016a8:	dd11      	ble.n	80016ce <LCD_fillTriangle+0x72>
	    _swap_int16_t(y2, y1);
 80016aa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80016ae:	857b      	strh	r3, [r7, #42]	; 0x2a
 80016b0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80016b4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80016b8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80016ba:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	    _swap_int16_t(x2, x1);
 80016be:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80016c2:	853b      	strh	r3, [r7, #40]	; 0x28
 80016c4:	88fb      	ldrh	r3, [r7, #6]
 80016c6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80016ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80016cc:	80fb      	strh	r3, [r7, #6]
	  }
	  if (y0 > y1) {
 80016ce:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80016d2:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 80016d6:	429a      	cmp	r2, r3
 80016d8:	dd0d      	ble.n	80016f6 <LCD_fillTriangle+0x9a>
	    _swap_int16_t(y0, y1);
 80016da:	893b      	ldrh	r3, [r7, #8]
 80016dc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80016de:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80016e2:	813b      	strh	r3, [r7, #8]
 80016e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80016e6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	    _swap_int16_t(x0, x1);
 80016ea:	897b      	ldrh	r3, [r7, #10]
 80016ec:	84bb      	strh	r3, [r7, #36]	; 0x24
 80016ee:	88fb      	ldrh	r3, [r7, #6]
 80016f0:	817b      	strh	r3, [r7, #10]
 80016f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80016f4:	80fb      	strh	r3, [r7, #6]
	  }

	  if (y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 80016f6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80016fa:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80016fe:	429a      	cmp	r2, r3
 8001700:	d13a      	bne.n	8001778 <LCD_fillTriangle+0x11c>
	    a = b = x0;
 8001702:	897b      	ldrh	r3, [r7, #10]
 8001704:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8001706:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001708:	87fb      	strh	r3, [r7, #62]	; 0x3e
	    if (x1 < a)
 800170a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800170e:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8001712:	429a      	cmp	r2, r3
 8001714:	da02      	bge.n	800171c <LCD_fillTriangle+0xc0>
	      a = x1;
 8001716:	88fb      	ldrh	r3, [r7, #6]
 8001718:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800171a:	e007      	b.n	800172c <LCD_fillTriangle+0xd0>
	    else if (x1 > b)
 800171c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001720:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8001724:	429a      	cmp	r2, r3
 8001726:	dd01      	ble.n	800172c <LCD_fillTriangle+0xd0>
	      b = x1;
 8001728:	88fb      	ldrh	r3, [r7, #6]
 800172a:	87bb      	strh	r3, [r7, #60]	; 0x3c
	    if (x2 < a)
 800172c:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	; 0x4c
 8001730:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8001734:	429a      	cmp	r2, r3
 8001736:	da03      	bge.n	8001740 <LCD_fillTriangle+0xe4>
	      a = x2;
 8001738:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800173c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800173e:	e008      	b.n	8001752 <LCD_fillTriangle+0xf6>
	    else if (x2 > b)
 8001740:	f9b7 204c 	ldrsh.w	r2, [r7, #76]	; 0x4c
 8001744:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8001748:	429a      	cmp	r2, r3
 800174a:	dd02      	ble.n	8001752 <LCD_fillTriangle+0xf6>
	      b = x2;
 800174c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001750:	87bb      	strh	r3, [r7, #60]	; 0x3c
	    LCD_writeFastHLine(spi, a, y0, b - a + 1, color);
 8001752:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8001754:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	b29b      	uxth	r3, r3
 800175a:	3301      	adds	r3, #1
 800175c:	b29b      	uxth	r3, r3
 800175e:	b218      	sxth	r0, r3
 8001760:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001764:	f9b7 103e 	ldrsh.w	r1, [r7, #62]	; 0x3e
 8001768:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	4603      	mov	r3, r0
 8001770:	68f8      	ldr	r0, [r7, #12]
 8001772:	f7ff ff4e 	bl	8001612 <LCD_writeFastHLine>
	    return;
 8001776:	e0de      	b.n	8001936 <LCD_fillTriangle+0x2da>
	  }

	  int16_t dx01 = x1 - x0, dy01 = y1 - y0, dx02 = x2 - x0, dy02 = y2 - y0,
 8001778:	88fa      	ldrh	r2, [r7, #6]
 800177a:	897b      	ldrh	r3, [r7, #10]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	b29b      	uxth	r3, r3
 8001780:	847b      	strh	r3, [r7, #34]	; 0x22
 8001782:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001786:	893b      	ldrh	r3, [r7, #8]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	b29b      	uxth	r3, r3
 800178c:	843b      	strh	r3, [r7, #32]
 800178e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8001792:	897b      	ldrh	r3, [r7, #10]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	b29b      	uxth	r3, r3
 8001798:	83fb      	strh	r3, [r7, #30]
 800179a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800179e:	893b      	ldrh	r3, [r7, #8]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	83bb      	strh	r3, [r7, #28]
	          dx12 = x2 - x1, dy12 = y2 - y1;
 80017a6:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80017aa:	88fb      	ldrh	r3, [r7, #6]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	837b      	strh	r3, [r7, #26]
 80017b2:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80017b6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	b29b      	uxth	r3, r3
 80017be:	833b      	strh	r3, [r7, #24]
	  int32_t sa = 0, sb = 0;
 80017c0:	2300      	movs	r3, #0
 80017c2:	637b      	str	r3, [r7, #52]	; 0x34
 80017c4:	2300      	movs	r3, #0
 80017c6:	633b      	str	r3, [r7, #48]	; 0x30
	  // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
	  // is included here (and second loop will be skipped, avoiding a /0
	  // error there), otherwise scanline y1 is skipped here and handled
	  // in the second loop...which also avoids a /0 error here if y0=y1
	  // (flat-topped triangle).
	  if (y1 == y2)
 80017c8:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 80017cc:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d103      	bne.n	80017dc <LCD_fillTriangle+0x180>
	    last = y1; // Include y1 scanline
 80017d4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80017d8:	873b      	strh	r3, [r7, #56]	; 0x38
 80017da:	e004      	b.n	80017e6 <LCD_fillTriangle+0x18a>
	  else
	    last = y1 - 1; // Skip it
 80017dc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80017e0:	3b01      	subs	r3, #1
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	873b      	strh	r3, [r7, #56]	; 0x38

	  for (y = y0; y <= last; y++) {
 80017e6:	893b      	ldrh	r3, [r7, #8]
 80017e8:	877b      	strh	r3, [r7, #58]	; 0x3a
 80017ea:	e041      	b.n	8001870 <LCD_fillTriangle+0x214>
	    a = x0 + sa / dy01;
 80017ec:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80017f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	897b      	ldrh	r3, [r7, #10]
 80017fa:	4413      	add	r3, r2
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	87fb      	strh	r3, [r7, #62]	; 0x3e
	    b = x0 + sb / dy02;
 8001800:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001806:	fb92 f3f3 	sdiv	r3, r2, r3
 800180a:	b29a      	uxth	r2, r3
 800180c:	897b      	ldrh	r3, [r7, #10]
 800180e:	4413      	add	r3, r2
 8001810:	b29b      	uxth	r3, r3
 8001812:	87bb      	strh	r3, [r7, #60]	; 0x3c
	    sa += dx01;
 8001814:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001818:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800181a:	4413      	add	r3, r2
 800181c:	637b      	str	r3, [r7, #52]	; 0x34
	    sb += dx02;
 800181e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001822:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001824:	4413      	add	r3, r2
 8001826:	633b      	str	r3, [r7, #48]	; 0x30
	    /* longhand:
	    a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
	    b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
	    */
	    if (a > b)
 8001828:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	; 0x3e
 800182c:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8001830:	429a      	cmp	r2, r3
 8001832:	dd05      	ble.n	8001840 <LCD_fillTriangle+0x1e4>
	      _swap_int16_t(a, b);
 8001834:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001836:	82bb      	strh	r3, [r7, #20]
 8001838:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800183a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800183c:	8abb      	ldrh	r3, [r7, #20]
 800183e:	87bb      	strh	r3, [r7, #60]	; 0x3c
	    LCD_writeFastHLine(spi, a, y, b - a + 1, color);
 8001840:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8001842:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	b29b      	uxth	r3, r3
 8001848:	3301      	adds	r3, #1
 800184a:	b29b      	uxth	r3, r3
 800184c:	b218      	sxth	r0, r3
 800184e:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 8001852:	f9b7 103e 	ldrsh.w	r1, [r7, #62]	; 0x3e
 8001856:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800185a:	9300      	str	r3, [sp, #0]
 800185c:	4603      	mov	r3, r0
 800185e:	68f8      	ldr	r0, [r7, #12]
 8001860:	f7ff fed7 	bl	8001612 <LCD_writeFastHLine>
	  for (y = y0; y <= last; y++) {
 8001864:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8001868:	b29b      	uxth	r3, r3
 800186a:	3301      	adds	r3, #1
 800186c:	b29b      	uxth	r3, r3
 800186e:	877b      	strh	r3, [r7, #58]	; 0x3a
 8001870:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 8001874:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8001878:	429a      	cmp	r2, r3
 800187a:	ddb7      	ble.n	80017ec <LCD_fillTriangle+0x190>
	  }

	  // For lower part of triangle, find scanline crossings for segments
	  // 0-2 and 1-2.  This loop is skipped if y1=y2.
	  sa = (int32_t)dx12 * (y - y1);
 800187c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001880:	f9b7 103a 	ldrsh.w	r1, [r7, #58]	; 0x3a
 8001884:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8001888:	1a8a      	subs	r2, r1, r2
 800188a:	fb02 f303 	mul.w	r3, r2, r3
 800188e:	637b      	str	r3, [r7, #52]	; 0x34
	  sb = (int32_t)dx02 * (y - y0);
 8001890:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001894:	f9b7 103a 	ldrsh.w	r1, [r7, #58]	; 0x3a
 8001898:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800189c:	1a8a      	subs	r2, r1, r2
 800189e:	fb02 f303 	mul.w	r3, r2, r3
 80018a2:	633b      	str	r3, [r7, #48]	; 0x30
	  for (; y <= y2; y++) {
 80018a4:	e041      	b.n	800192a <LCD_fillTriangle+0x2ce>
	    a = x1 + sa / dy12;
 80018a6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80018aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80018ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	88fb      	ldrh	r3, [r7, #6]
 80018b4:	4413      	add	r3, r2
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	87fb      	strh	r3, [r7, #62]	; 0x3e
	    b = x0 + sb / dy02;
 80018ba:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80018be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	897b      	ldrh	r3, [r7, #10]
 80018c8:	4413      	add	r3, r2
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	87bb      	strh	r3, [r7, #60]	; 0x3c
	    sa += dx12;
 80018ce:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80018d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80018d4:	4413      	add	r3, r2
 80018d6:	637b      	str	r3, [r7, #52]	; 0x34
	    sb += dx02;
 80018d8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80018dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018de:	4413      	add	r3, r2
 80018e0:	633b      	str	r3, [r7, #48]	; 0x30
	    /* longhand:
	    a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
	    b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
	    */
	    if (a > b)
 80018e2:	f9b7 203e 	ldrsh.w	r2, [r7, #62]	; 0x3e
 80018e6:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 80018ea:	429a      	cmp	r2, r3
 80018ec:	dd05      	ble.n	80018fa <LCD_fillTriangle+0x29e>
	      _swap_int16_t(a, b);
 80018ee:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80018f0:	82fb      	strh	r3, [r7, #22]
 80018f2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80018f4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80018f6:	8afb      	ldrh	r3, [r7, #22]
 80018f8:	87bb      	strh	r3, [r7, #60]	; 0x3c
	    LCD_writeFastHLine(spi, a, y, b - a + 1, color);
 80018fa:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80018fc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	b29b      	uxth	r3, r3
 8001902:	3301      	adds	r3, #1
 8001904:	b29b      	uxth	r3, r3
 8001906:	b218      	sxth	r0, r3
 8001908:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 800190c:	f9b7 103e 	ldrsh.w	r1, [r7, #62]	; 0x3e
 8001910:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	4603      	mov	r3, r0
 8001918:	68f8      	ldr	r0, [r7, #12]
 800191a:	f7ff fe7a 	bl	8001612 <LCD_writeFastHLine>
	  for (; y <= y2; y++) {
 800191e:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8001922:	b29b      	uxth	r3, r3
 8001924:	3301      	adds	r3, #1
 8001926:	b29b      	uxth	r3, r3
 8001928:	877b      	strh	r3, [r7, #58]	; 0x3a
 800192a:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 800192e:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8001932:	429a      	cmp	r2, r3
 8001934:	ddb7      	ble.n	80018a6 <LCD_fillTriangle+0x24a>
	  }
}
 8001936:	3740      	adds	r7, #64	; 0x40
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <LCD_drawBattery>:

//homemade functions for TADAMHASPEV, move to different file
void LCD_drawBattery(SPI_HandleTypeDef* spi, int16_t x, int16_t y, uint32_t size) {
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af02      	add	r7, sp, #8
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	607b      	str	r3, [r7, #4]
 8001946:	460b      	mov	r3, r1
 8001948:	817b      	strh	r3, [r7, #10]
 800194a:	4613      	mov	r3, r2
 800194c:	813b      	strh	r3, [r7, #8]
	//make battery thicker?
	//left
	if(!LCD_setAddrWindow(spi, x, y + size, 1, 22*size)) return;
 800194e:	8979      	ldrh	r1, [r7, #10]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	b29a      	uxth	r2, r3
 8001954:	893b      	ldrh	r3, [r7, #8]
 8001956:	4413      	add	r3, r2
 8001958:	b29a      	uxth	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	b29b      	uxth	r3, r3
 800195e:	4618      	mov	r0, r3
 8001960:	0080      	lsls	r0, r0, #2
 8001962:	4418      	add	r0, r3
 8001964:	0040      	lsls	r0, r0, #1
 8001966:	4403      	add	r3, r0
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	b29b      	uxth	r3, r3
 800196c:	9300      	str	r3, [sp, #0]
 800196e:	2301      	movs	r3, #1
 8001970:	68f8      	ldr	r0, [r7, #12]
 8001972:	f7ff fb5f 	bl	8001034 <LCD_setAddrWindow>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	f000 80df 	beq.w	8001b3c <LCD_drawBattery+0x200>
	if (!LCD_pushColorCopy(spi, HX8357_BLACK, 22*size)) return;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2216      	movs	r2, #22
 8001982:	fb02 f303 	mul.w	r3, r2, r3
 8001986:	461a      	mov	r2, r3
 8001988:	2100      	movs	r1, #0
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f7ff fbf7 	bl	800117e <LCD_pushColorCopy>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	f000 80d4 	beq.w	8001b40 <LCD_drawBattery+0x204>

	//right
	if(!LCD_setAddrWindow(spi, x + 10*size, y + size, 1, 22*size)) return;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	b29b      	uxth	r3, r3
 800199c:	461a      	mov	r2, r3
 800199e:	0092      	lsls	r2, r2, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	897b      	ldrh	r3, [r7, #10]
 80019a8:	4413      	add	r3, r2
 80019aa:	b299      	uxth	r1, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	893b      	ldrh	r3, [r7, #8]
 80019b2:	4413      	add	r3, r2
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	4618      	mov	r0, r3
 80019bc:	0080      	lsls	r0, r0, #2
 80019be:	4418      	add	r0, r3
 80019c0:	0040      	lsls	r0, r0, #1
 80019c2:	4403      	add	r3, r0
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	9300      	str	r3, [sp, #0]
 80019ca:	2301      	movs	r3, #1
 80019cc:	68f8      	ldr	r0, [r7, #12]
 80019ce:	f7ff fb31 	bl	8001034 <LCD_setAddrWindow>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	f000 80b5 	beq.w	8001b44 <LCD_drawBattery+0x208>
	if (!LCD_pushColorCopy(spi, HX8357_BLACK, 22*size)) return;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2216      	movs	r2, #22
 80019de:	fb02 f303 	mul.w	r3, r2, r3
 80019e2:	461a      	mov	r2, r3
 80019e4:	2100      	movs	r1, #0
 80019e6:	68f8      	ldr	r0, [r7, #12]
 80019e8:	f7ff fbc9 	bl	800117e <LCD_pushColorCopy>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f000 80aa 	beq.w	8001b48 <LCD_drawBattery+0x20c>

	//top
	if(!LCD_setAddrWindow(spi, x, y + size, 10*size, 1)) return;
 80019f4:	8979      	ldrh	r1, [r7, #10]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	893b      	ldrh	r3, [r7, #8]
 80019fc:	4413      	add	r3, r2
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	4618      	mov	r0, r3
 8001a06:	0080      	lsls	r0, r0, #2
 8001a08:	4403      	add	r3, r0
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	2001      	movs	r0, #1
 8001a10:	9000      	str	r0, [sp, #0]
 8001a12:	68f8      	ldr	r0, [r7, #12]
 8001a14:	f7ff fb0e 	bl	8001034 <LCD_setAddrWindow>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f000 8096 	beq.w	8001b4c <LCD_drawBattery+0x210>
	if (!LCD_pushColorCopy(spi, HX8357_BLACK, 10*size)) return;
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	4613      	mov	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	4413      	add	r3, r2
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	68f8      	ldr	r0, [r7, #12]
 8001a30:	f7ff fba5 	bl	800117e <LCD_pushColorCopy>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f000 808a 	beq.w	8001b50 <LCD_drawBattery+0x214>

	//bottom
	if(!LCD_setAddrWindow(spi, x, y + 23*size, 10*size, 1)) return;
 8001a3c:	8979      	ldrh	r1, [r7, #10]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	461a      	mov	r2, r3
 8001a44:	0052      	lsls	r2, r2, #1
 8001a46:	441a      	add	r2, r3
 8001a48:	00d2      	lsls	r2, r2, #3
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	893b      	ldrh	r3, [r7, #8]
 8001a50:	4413      	add	r3, r2
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	4618      	mov	r0, r3
 8001a5a:	0080      	lsls	r0, r0, #2
 8001a5c:	4403      	add	r3, r0
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	2001      	movs	r0, #1
 8001a64:	9000      	str	r0, [sp, #0]
 8001a66:	68f8      	ldr	r0, [r7, #12]
 8001a68:	f7ff fae4 	bl	8001034 <LCD_setAddrWindow>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d070      	beq.n	8001b54 <LCD_drawBattery+0x218>
	if (!LCD_pushColorCopy(spi, HX8357_BLACK, 10*size)) return;
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	4613      	mov	r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4413      	add	r3, r2
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	2100      	movs	r1, #0
 8001a80:	68f8      	ldr	r0, [r7, #12]
 8001a82:	f7ff fb7c 	bl	800117e <LCD_pushColorCopy>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d065      	beq.n	8001b58 <LCD_drawBattery+0x21c>

	//lil cap
	if(!LCD_setAddrWindow(spi, x + 3*size, y, 4*size, 1)) return;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	461a      	mov	r2, r3
 8001a92:	0052      	lsls	r2, r2, #1
 8001a94:	4413      	add	r3, r2
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	897b      	ldrh	r3, [r7, #10]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	b299      	uxth	r1, r3
 8001a9e:	893a      	ldrh	r2, [r7, #8]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	2001      	movs	r0, #1
 8001aaa:	9000      	str	r0, [sp, #0]
 8001aac:	68f8      	ldr	r0, [r7, #12]
 8001aae:	f7ff fac1 	bl	8001034 <LCD_setAddrWindow>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d051      	beq.n	8001b5c <LCD_drawBattery+0x220>
	if (!LCD_pushColorCopy(spi, HX8357_BLACK, 4*size)) return;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	461a      	mov	r2, r3
 8001abe:	2100      	movs	r1, #0
 8001ac0:	68f8      	ldr	r0, [r7, #12]
 8001ac2:	f7ff fb5c 	bl	800117e <LCD_pushColorCopy>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d049      	beq.n	8001b60 <LCD_drawBattery+0x224>

	if(!LCD_setAddrWindow(spi, x + 3*size, y, 1, size)) return;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	0052      	lsls	r2, r2, #1
 8001ad4:	4413      	add	r3, r2
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	897b      	ldrh	r3, [r7, #10]
 8001ada:	4413      	add	r3, r2
 8001adc:	b299      	uxth	r1, r3
 8001ade:	893a      	ldrh	r2, [r7, #8]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	f7ff faa3 	bl	8001034 <LCD_setAddrWindow>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d037      	beq.n	8001b64 <LCD_drawBattery+0x228>
	if (!LCD_pushColorCopy(spi, HX8357_BLACK, size)) return;
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	2100      	movs	r1, #0
 8001af8:	68f8      	ldr	r0, [r7, #12]
 8001afa:	f7ff fb40 	bl	800117e <LCD_pushColorCopy>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d031      	beq.n	8001b68 <LCD_drawBattery+0x22c>

	if(!LCD_setAddrWindow(spi, x + 3*size + 4*size, y, 1, size)) return;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	461a      	mov	r2, r3
 8001b0a:	00d2      	lsls	r2, r2, #3
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	897b      	ldrh	r3, [r7, #10]
 8001b12:	4413      	add	r3, r2
 8001b14:	b299      	uxth	r1, r3
 8001b16:	893a      	ldrh	r2, [r7, #8]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	9300      	str	r3, [sp, #0]
 8001b1e:	2301      	movs	r3, #1
 8001b20:	68f8      	ldr	r0, [r7, #12]
 8001b22:	f7ff fa87 	bl	8001034 <LCD_setAddrWindow>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d01f      	beq.n	8001b6c <LCD_drawBattery+0x230>
	if (!LCD_pushColorCopy(spi, HX8357_BLACK, size)) return;
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	2100      	movs	r1, #0
 8001b30:	68f8      	ldr	r0, [r7, #12]
 8001b32:	f7ff fb24 	bl	800117e <LCD_pushColorCopy>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
	return;
 8001b3a:	e018      	b.n	8001b6e <LCD_drawBattery+0x232>
	if(!LCD_setAddrWindow(spi, x, y + size, 1, 22*size)) return;
 8001b3c:	bf00      	nop
 8001b3e:	e016      	b.n	8001b6e <LCD_drawBattery+0x232>
	if (!LCD_pushColorCopy(spi, HX8357_BLACK, 22*size)) return;
 8001b40:	bf00      	nop
 8001b42:	e014      	b.n	8001b6e <LCD_drawBattery+0x232>
	if(!LCD_setAddrWindow(spi, x + 10*size, y + size, 1, 22*size)) return;
 8001b44:	bf00      	nop
 8001b46:	e012      	b.n	8001b6e <LCD_drawBattery+0x232>
	if (!LCD_pushColorCopy(spi, HX8357_BLACK, 22*size)) return;
 8001b48:	bf00      	nop
 8001b4a:	e010      	b.n	8001b6e <LCD_drawBattery+0x232>
	if(!LCD_setAddrWindow(spi, x, y + size, 10*size, 1)) return;
 8001b4c:	bf00      	nop
 8001b4e:	e00e      	b.n	8001b6e <LCD_drawBattery+0x232>
	if (!LCD_pushColorCopy(spi, HX8357_BLACK, 10*size)) return;
 8001b50:	bf00      	nop
 8001b52:	e00c      	b.n	8001b6e <LCD_drawBattery+0x232>
	if(!LCD_setAddrWindow(spi, x, y + 23*size, 10*size, 1)) return;
 8001b54:	bf00      	nop
 8001b56:	e00a      	b.n	8001b6e <LCD_drawBattery+0x232>
	if (!LCD_pushColorCopy(spi, HX8357_BLACK, 10*size)) return;
 8001b58:	bf00      	nop
 8001b5a:	e008      	b.n	8001b6e <LCD_drawBattery+0x232>
	if(!LCD_setAddrWindow(spi, x + 3*size, y, 4*size, 1)) return;
 8001b5c:	bf00      	nop
 8001b5e:	e006      	b.n	8001b6e <LCD_drawBattery+0x232>
	if (!LCD_pushColorCopy(spi, HX8357_BLACK, 4*size)) return;
 8001b60:	bf00      	nop
 8001b62:	e004      	b.n	8001b6e <LCD_drawBattery+0x232>
	if(!LCD_setAddrWindow(spi, x + 3*size, y, 1, size)) return;
 8001b64:	bf00      	nop
 8001b66:	e002      	b.n	8001b6e <LCD_drawBattery+0x232>
	if (!LCD_pushColorCopy(spi, HX8357_BLACK, size)) return;
 8001b68:	bf00      	nop
 8001b6a:	e000      	b.n	8001b6e <LCD_drawBattery+0x232>
	if(!LCD_setAddrWindow(spi, x + 3*size + 4*size, y, 1, size)) return;
 8001b6c:	bf00      	nop
}
 8001b6e:	3710      	adds	r7, #16
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <LCD_drawFrame>:

void LCD_drawFrame(SPI_HandleTypeDef* spi) {
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af02      	add	r7, sp, #8
 8001b7a:	6078      	str	r0, [r7, #4]
	//rows
	LCD_writeLine(spi,0,80,360,80,HX8357_BLACK);
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	9301      	str	r3, [sp, #4]
 8001b80:	2350      	movs	r3, #80	; 0x50
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001b88:	2250      	movs	r2, #80	; 0x50
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff fcad 	bl	80014ec <LCD_writeLine>
	LCD_writeLine(spi,0,160,360,160,HX8357_BLACK);
 8001b92:	2300      	movs	r3, #0
 8001b94:	9301      	str	r3, [sp, #4]
 8001b96:	23a0      	movs	r3, #160	; 0xa0
 8001b98:	9300      	str	r3, [sp, #0]
 8001b9a:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001b9e:	22a0      	movs	r2, #160	; 0xa0
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7ff fca2 	bl	80014ec <LCD_writeLine>
	LCD_writeLine(spi,0,240,360,240,HX8357_BLACK);
 8001ba8:	2300      	movs	r3, #0
 8001baa:	9301      	str	r3, [sp, #4]
 8001bac:	23f0      	movs	r3, #240	; 0xf0
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001bb4:	22f0      	movs	r2, #240	; 0xf0
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f7ff fc97 	bl	80014ec <LCD_writeLine>

	//column
	LCD_writeLine(spi,360,0,360,320,HX8357_BLACK);
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	9301      	str	r3, [sp, #4]
 8001bc2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7ff fc8a 	bl	80014ec <LCD_writeLine>
	return;
 8001bd8:	bf00      	nop
}
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <LCD_fillBattery>:

int offset = 0;

void LCD_fillBattery(SPI_HandleTypeDef* spi, int16_t x, int16_t y, uint32_t size, int level) {
 8001be0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001be4:	b086      	sub	sp, #24
 8001be6:	af02      	add	r7, sp, #8
 8001be8:	60f8      	str	r0, [r7, #12]
 8001bea:	607b      	str	r3, [r7, #4]
 8001bec:	460b      	mov	r3, r1
 8001bee:	817b      	strh	r3, [r7, #10]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	813b      	strh	r3, [r7, #8]
	LCD_writePixels(spi, HX8357_WHITE, x + 3, ((y + size) + 3), 10*size - 6, (22*size - 6));
 8001bf4:	897b      	ldrh	r3, [r7, #10]
 8001bf6:	3303      	adds	r3, #3
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	b219      	sxth	r1, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	893b      	ldrh	r3, [r7, #8]
 8001c02:	4413      	add	r3, r2
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	3303      	adds	r3, #3
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	b218      	sxth	r0, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	461a      	mov	r2, r3
 8001c12:	0092      	lsls	r2, r2, #2
 8001c14:	4413      	add	r3, r2
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	3b06      	subs	r3, #6
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	b21a      	sxth	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	461c      	mov	r4, r3
 8001c26:	00a4      	lsls	r4, r4, #2
 8001c28:	441c      	add	r4, r3
 8001c2a:	0064      	lsls	r4, r4, #1
 8001c2c:	4423      	add	r3, r4
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	3b06      	subs	r3, #6
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	b21b      	sxth	r3, r3
 8001c38:	9301      	str	r3, [sp, #4]
 8001c3a:	9200      	str	r2, [sp, #0]
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	460a      	mov	r2, r1
 8001c40:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001c44:	68f8      	ldr	r0, [r7, #12]
 8001c46:	f7ff fb07 	bl	8001258 <LCD_writePixels>
	offset = 22*size - (22*size)*(level/100.0);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2216      	movs	r2, #22
 8001c4e:	fb02 f303 	mul.w	r3, r2, r3
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7fe fc56 	bl	8000504 <__aeabi_ui2d>
 8001c58:	4604      	mov	r4, r0
 8001c5a:	460d      	mov	r5, r1
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2216      	movs	r2, #22
 8001c60:	fb02 f303 	mul.w	r3, r2, r3
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7fe fc4d 	bl	8000504 <__aeabi_ui2d>
 8001c6a:	4680      	mov	r8, r0
 8001c6c:	4689      	mov	r9, r1
 8001c6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001c70:	f7fe fc58 	bl	8000524 <__aeabi_i2d>
 8001c74:	f04f 0200 	mov.w	r2, #0
 8001c78:	4b63      	ldr	r3, [pc, #396]	; (8001e08 <LCD_fillBattery+0x228>)
 8001c7a:	f7fe fde7 	bl	800084c <__aeabi_ddiv>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	4640      	mov	r0, r8
 8001c84:	4649      	mov	r1, r9
 8001c86:	f7fe fcb7 	bl	80005f8 <__aeabi_dmul>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	4620      	mov	r0, r4
 8001c90:	4629      	mov	r1, r5
 8001c92:	f7fe faf9 	bl	8000288 <__aeabi_dsub>
 8001c96:	4602      	mov	r2, r0
 8001c98:	460b      	mov	r3, r1
 8001c9a:	4610      	mov	r0, r2
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	f7fe ff5b 	bl	8000b58 <__aeabi_d2iz>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	4a59      	ldr	r2, [pc, #356]	; (8001e0c <LCD_fillBattery+0x22c>)
 8001ca6:	6013      	str	r3, [r2, #0]
	if (level > 0) {
 8001ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f340 80a7 	ble.w	8001dfe <LCD_fillBattery+0x21e>
		if (level < 20) {
 8001cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cb2:	2b13      	cmp	r3, #19
 8001cb4:	dc35      	bgt.n	8001d22 <LCD_fillBattery+0x142>
			LCD_writePixels(spi, HX8357_RED, x + 3, ((y + size) + 3) + offset, 10*size - 6, (22*size - 6) - offset);
 8001cb6:	897b      	ldrh	r3, [r7, #10]
 8001cb8:	3303      	adds	r3, #3
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	b218      	sxth	r0, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	893b      	ldrh	r3, [r7, #8]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	4b50      	ldr	r3, [pc, #320]	; (8001e0c <LCD_fillBattery+0x22c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	4413      	add	r3, r2
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	3303      	adds	r3, #3
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	b21c      	sxth	r4, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	461a      	mov	r2, r3
 8001cde:	0092      	lsls	r2, r2, #2
 8001ce0:	4413      	add	r3, r2
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	3b06      	subs	r3, #6
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	b21a      	sxth	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	0089      	lsls	r1, r1, #2
 8001cf4:	4419      	add	r1, r3
 8001cf6:	0049      	lsls	r1, r1, #1
 8001cf8:	440b      	add	r3, r1
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	b299      	uxth	r1, r3
 8001cfe:	4b43      	ldr	r3, [pc, #268]	; (8001e0c <LCD_fillBattery+0x22c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	1acb      	subs	r3, r1, r3
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	3b06      	subs	r3, #6
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	b21b      	sxth	r3, r3
 8001d0e:	9301      	str	r3, [sp, #4]
 8001d10:	9200      	str	r2, [sp, #0]
 8001d12:	4623      	mov	r3, r4
 8001d14:	4602      	mov	r2, r0
 8001d16:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8001d1a:	68f8      	ldr	r0, [r7, #12]
 8001d1c:	f7ff fa9c 	bl	8001258 <LCD_writePixels>
			LCD_writePixels(spi, HX8357_GREEN, x + 3, ((y + size) + 3) + offset, 10*size - 6, (22*size - 6) - offset);
		}
	}
	//level = 100 --> y offset 0
	//level = 0 --> y offset 22*size
}
 8001d20:	e06d      	b.n	8001dfe <LCD_fillBattery+0x21e>
		} else if (level < 50) {
 8001d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d24:	2b31      	cmp	r3, #49	; 0x31
 8001d26:	dc35      	bgt.n	8001d94 <LCD_fillBattery+0x1b4>
			LCD_writePixels(spi, HX8357_YELLOW, x + 3, ((y + size) + 3) + offset, 10*size - 6, (22*size - 6) - offset);
 8001d28:	897b      	ldrh	r3, [r7, #10]
 8001d2a:	3303      	adds	r3, #3
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	b218      	sxth	r0, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	893b      	ldrh	r3, [r7, #8]
 8001d36:	4413      	add	r3, r2
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	4b34      	ldr	r3, [pc, #208]	; (8001e0c <LCD_fillBattery+0x22c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	4413      	add	r3, r2
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	3303      	adds	r3, #3
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	b21c      	sxth	r4, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	461a      	mov	r2, r3
 8001d50:	0092      	lsls	r2, r2, #2
 8001d52:	4413      	add	r3, r2
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	3b06      	subs	r3, #6
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	b21a      	sxth	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	4619      	mov	r1, r3
 8001d64:	0089      	lsls	r1, r1, #2
 8001d66:	4419      	add	r1, r3
 8001d68:	0049      	lsls	r1, r1, #1
 8001d6a:	440b      	add	r3, r1
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	b299      	uxth	r1, r3
 8001d70:	4b26      	ldr	r3, [pc, #152]	; (8001e0c <LCD_fillBattery+0x22c>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	1acb      	subs	r3, r1, r3
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	3b06      	subs	r3, #6
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	b21b      	sxth	r3, r3
 8001d80:	9301      	str	r3, [sp, #4]
 8001d82:	9200      	str	r2, [sp, #0]
 8001d84:	4623      	mov	r3, r4
 8001d86:	4602      	mov	r2, r0
 8001d88:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f7ff fa63 	bl	8001258 <LCD_writePixels>
}
 8001d92:	e034      	b.n	8001dfe <LCD_fillBattery+0x21e>
			LCD_writePixels(spi, HX8357_GREEN, x + 3, ((y + size) + 3) + offset, 10*size - 6, (22*size - 6) - offset);
 8001d94:	897b      	ldrh	r3, [r7, #10]
 8001d96:	3303      	adds	r3, #3
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	b218      	sxth	r0, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	893b      	ldrh	r3, [r7, #8]
 8001da2:	4413      	add	r3, r2
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	4b19      	ldr	r3, [pc, #100]	; (8001e0c <LCD_fillBattery+0x22c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	4413      	add	r3, r2
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	3303      	adds	r3, #3
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	b21c      	sxth	r4, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	461a      	mov	r2, r3
 8001dbc:	0092      	lsls	r2, r2, #2
 8001dbe:	4413      	add	r3, r2
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	3b06      	subs	r3, #6
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	b21a      	sxth	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	4619      	mov	r1, r3
 8001dd0:	0089      	lsls	r1, r1, #2
 8001dd2:	4419      	add	r1, r3
 8001dd4:	0049      	lsls	r1, r1, #1
 8001dd6:	440b      	add	r3, r1
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	b299      	uxth	r1, r3
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <LCD_fillBattery+0x22c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	1acb      	subs	r3, r1, r3
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	3b06      	subs	r3, #6
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	b21b      	sxth	r3, r3
 8001dec:	9301      	str	r3, [sp, #4]
 8001dee:	9200      	str	r2, [sp, #0]
 8001df0:	4623      	mov	r3, r4
 8001df2:	4602      	mov	r2, r0
 8001df4:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8001df8:	68f8      	ldr	r0, [r7, #12]
 8001dfa:	f7ff fa2d 	bl	8001258 <LCD_writePixels>
}
 8001dfe:	bf00      	nop
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e08:	40590000 	.word	0x40590000
 8001e0c:	2000026c 	.word	0x2000026c

08001e10 <LCD_updateVals>:

char speedString[4];
char tempString[6];
char powerString[6];

void LCD_updateVals(SPI_HandleTypeDef* spi, float buf[]) {
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af04      	add	r7, sp, #16
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
	//buf[0] accel, buf[1] temp, buf[2] speed, buf[3] voltage, buf[4] current
	sprintf(tempString,"%f",buf[1]);
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7fe fb91 	bl	8000548 <__aeabi_f2d>
 8001e26:	4602      	mov	r2, r0
 8001e28:	460b      	mov	r3, r1
 8001e2a:	4926      	ldr	r1, [pc, #152]	; (8001ec4 <LCD_updateVals+0xb4>)
 8001e2c:	4826      	ldr	r0, [pc, #152]	; (8001ec8 <LCD_updateVals+0xb8>)
 8001e2e:	f005 ff59 	bl	8007ce4 <siprintf>
	LCD_drawString(spi,130,30 + 80*2,tempString,6,HX8357_BLACK,4);
 8001e32:	2304      	movs	r3, #4
 8001e34:	9302      	str	r3, [sp, #8]
 8001e36:	2300      	movs	r3, #0
 8001e38:	9301      	str	r3, [sp, #4]
 8001e3a:	2306      	movs	r3, #6
 8001e3c:	9300      	str	r3, [sp, #0]
 8001e3e:	4b22      	ldr	r3, [pc, #136]	; (8001ec8 <LCD_updateVals+0xb8>)
 8001e40:	22be      	movs	r2, #190	; 0xbe
 8001e42:	2182      	movs	r1, #130	; 0x82
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7ff fb1b 	bl	8001480 <LCD_drawString>

	sprintf(speedString,"%f",buf[2]);
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	3308      	adds	r3, #8
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe fb79 	bl	8000548 <__aeabi_f2d>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	491a      	ldr	r1, [pc, #104]	; (8001ec4 <LCD_updateVals+0xb4>)
 8001e5c:	481b      	ldr	r0, [pc, #108]	; (8001ecc <LCD_updateVals+0xbc>)
 8001e5e:	f005 ff41 	bl	8007ce4 <siprintf>
	LCD_drawString(spi,130,30 + 80*1,speedString,4,HX8357_BLACK,4);
 8001e62:	2304      	movs	r3, #4
 8001e64:	9302      	str	r3, [sp, #8]
 8001e66:	2300      	movs	r3, #0
 8001e68:	9301      	str	r3, [sp, #4]
 8001e6a:	2304      	movs	r3, #4
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	4b17      	ldr	r3, [pc, #92]	; (8001ecc <LCD_updateVals+0xbc>)
 8001e70:	226e      	movs	r2, #110	; 0x6e
 8001e72:	2182      	movs	r1, #130	; 0x82
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f7ff fb03 	bl	8001480 <LCD_drawString>

	sprintf(powerString,"%f",buf[3]*buf[4]);
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	330c      	adds	r3, #12
 8001e7e:	ed93 7a00 	vldr	s14, [r3]
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	3310      	adds	r3, #16
 8001e86:	edd3 7a00 	vldr	s15, [r3]
 8001e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e8e:	ee17 0a90 	vmov	r0, s15
 8001e92:	f7fe fb59 	bl	8000548 <__aeabi_f2d>
 8001e96:	4602      	mov	r2, r0
 8001e98:	460b      	mov	r3, r1
 8001e9a:	490a      	ldr	r1, [pc, #40]	; (8001ec4 <LCD_updateVals+0xb4>)
 8001e9c:	480c      	ldr	r0, [pc, #48]	; (8001ed0 <LCD_updateVals+0xc0>)
 8001e9e:	f005 ff21 	bl	8007ce4 <siprintf>
	LCD_drawString(spi,130,30 + 80*3,powerString,6,HX8357_BLACK,4);
 8001ea2:	2304      	movs	r3, #4
 8001ea4:	9302      	str	r3, [sp, #8]
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	9301      	str	r3, [sp, #4]
 8001eaa:	2306      	movs	r3, #6
 8001eac:	9300      	str	r3, [sp, #0]
 8001eae:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <LCD_updateVals+0xc0>)
 8001eb0:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8001eb4:	2182      	movs	r1, #130	; 0x82
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff fae2 	bl	8001480 <LCD_drawString>
}
 8001ebc:	bf00      	nop
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	08009fb8 	.word	0x08009fb8
 8001ec8:	20000274 	.word	0x20000274
 8001ecc:	20000270 	.word	0x20000270
 8001ed0:	2000027c 	.word	0x2000027c

08001ed4 <LCD_warnings>:
//}

int tempWarn = 0;
int voltWarn = 0;

void LCD_warnings(SPI_HandleTypeDef* spi, int temp, int level, int *warning) {
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b088      	sub	sp, #32
 8001ed8:	af04      	add	r7, sp, #16
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
 8001ee0:	603b      	str	r3, [r7, #0]
	if ((temp >= 50 | level <= 30) & *warning == 0) {
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	2b31      	cmp	r3, #49	; 0x31
 8001ee6:	bfcc      	ite	gt
 8001ee8:	2301      	movgt	r3, #1
 8001eea:	2300      	movle	r3, #0
 8001eec:	b2da      	uxtb	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b1e      	cmp	r3, #30
 8001ef2:	bfd4      	ite	le
 8001ef4:	2301      	movle	r3, #1
 8001ef6:	2300      	movgt	r3, #0
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	4313      	orrs	r3, r2
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	461a      	mov	r2, r3
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	bf0c      	ite	eq
 8001f08:	2301      	moveq	r3, #1
 8001f0a:	2300      	movne	r3, #0
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	4013      	ands	r3, r2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d00e      	beq.n	8001f32 <LCD_warnings+0x5e>
		LCD_writePixels(spi,HX8357_WHITE,0,0,359,79);
 8001f14:	234f      	movs	r3, #79	; 0x4f
 8001f16:	9301      	str	r3, [sp, #4]
 8001f18:	f240 1367 	movw	r3, #359	; 0x167
 8001f1c:	9300      	str	r3, [sp, #0]
 8001f1e:	2300      	movs	r3, #0
 8001f20:	2200      	movs	r2, #0
 8001f22:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f7ff f996 	bl	8001258 <LCD_writePixels>
		*warning = 1;
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	601a      	str	r2, [r3, #0]
	}
	if (temp >= 50 & tempWarn == 0) {
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	2b31      	cmp	r3, #49	; 0x31
 8001f36:	bfcc      	ite	gt
 8001f38:	2301      	movgt	r3, #1
 8001f3a:	2300      	movle	r3, #0
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	4b69      	ldr	r3, [pc, #420]	; (80020e4 <LCD_warnings+0x210>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	bf0c      	ite	eq
 8001f46:	2301      	moveq	r3, #1
 8001f48:	2300      	movne	r3, #0
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d01e      	beq.n	8001f92 <LCD_warnings+0xbe>
		LCD_fillTriangle(spi,15,55,45,55,30,25,HX8357_GREEN);
 8001f54:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001f58:	9303      	str	r3, [sp, #12]
 8001f5a:	2319      	movs	r3, #25
 8001f5c:	9302      	str	r3, [sp, #8]
 8001f5e:	231e      	movs	r3, #30
 8001f60:	9301      	str	r3, [sp, #4]
 8001f62:	2337      	movs	r3, #55	; 0x37
 8001f64:	9300      	str	r3, [sp, #0]
 8001f66:	232d      	movs	r3, #45	; 0x2d
 8001f68:	2237      	movs	r2, #55	; 0x37
 8001f6a:	210f      	movs	r1, #15
 8001f6c:	68f8      	ldr	r0, [r7, #12]
 8001f6e:	f7ff fb75 	bl	800165c <LCD_fillTriangle>
		LCD_drawString(spi,55,30 + 80*0,"HIGH TEMP",9,HX8357_RED,2);
 8001f72:	2302      	movs	r3, #2
 8001f74:	9302      	str	r3, [sp, #8]
 8001f76:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001f7a:	9301      	str	r3, [sp, #4]
 8001f7c:	2309      	movs	r3, #9
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	4b59      	ldr	r3, [pc, #356]	; (80020e8 <LCD_warnings+0x214>)
 8001f82:	221e      	movs	r2, #30
 8001f84:	2137      	movs	r1, #55	; 0x37
 8001f86:	68f8      	ldr	r0, [r7, #12]
 8001f88:	f7ff fa7a 	bl	8001480 <LCD_drawString>
		tempWarn = 1;
 8001f8c:	4b55      	ldr	r3, [pc, #340]	; (80020e4 <LCD_warnings+0x210>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	601a      	str	r2, [r3, #0]
	}
	if (level <= 30 & voltWarn == 0) {
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b1e      	cmp	r3, #30
 8001f96:	bfd4      	ite	le
 8001f98:	2301      	movle	r3, #1
 8001f9a:	2300      	movgt	r3, #0
 8001f9c:	b2da      	uxtb	r2, r3
 8001f9e:	4b53      	ldr	r3, [pc, #332]	; (80020ec <LCD_warnings+0x218>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	bf0c      	ite	eq
 8001fa6:	2301      	moveq	r3, #1
 8001fa8:	2300      	movne	r3, #0
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	4013      	ands	r3, r2
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d01e      	beq.n	8001ff2 <LCD_warnings+0x11e>
		LCD_fillTriangle(spi,180,55,210,55,195,25,HX8357_GREEN);
 8001fb4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001fb8:	9303      	str	r3, [sp, #12]
 8001fba:	2319      	movs	r3, #25
 8001fbc:	9302      	str	r3, [sp, #8]
 8001fbe:	23c3      	movs	r3, #195	; 0xc3
 8001fc0:	9301      	str	r3, [sp, #4]
 8001fc2:	2337      	movs	r3, #55	; 0x37
 8001fc4:	9300      	str	r3, [sp, #0]
 8001fc6:	23d2      	movs	r3, #210	; 0xd2
 8001fc8:	2237      	movs	r2, #55	; 0x37
 8001fca:	21b4      	movs	r1, #180	; 0xb4
 8001fcc:	68f8      	ldr	r0, [r7, #12]
 8001fce:	f7ff fb45 	bl	800165c <LCD_fillTriangle>
		LCD_drawString(spi,220,30 + 80*0,"LOW VOLT",8,HX8357_RED,2);
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	9302      	str	r3, [sp, #8]
 8001fd6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001fda:	9301      	str	r3, [sp, #4]
 8001fdc:	2308      	movs	r3, #8
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	4b43      	ldr	r3, [pc, #268]	; (80020f0 <LCD_warnings+0x21c>)
 8001fe2:	221e      	movs	r2, #30
 8001fe4:	21dc      	movs	r1, #220	; 0xdc
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f7ff fa4a 	bl	8001480 <LCD_drawString>
		voltWarn = 1;
 8001fec:	4b3f      	ldr	r3, [pc, #252]	; (80020ec <LCD_warnings+0x218>)
 8001fee:	2201      	movs	r2, #1
 8001ff0:	601a      	str	r2, [r3, #0]
	}
	if (temp < 50 & tempWarn == 1) {
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	2b31      	cmp	r3, #49	; 0x31
 8001ff6:	bfd4      	ite	le
 8001ff8:	2301      	movle	r3, #1
 8001ffa:	2300      	movgt	r3, #0
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	4b39      	ldr	r3, [pc, #228]	; (80020e4 <LCD_warnings+0x210>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2b01      	cmp	r3, #1
 8002004:	bf0c      	ite	eq
 8002006:	2301      	moveq	r3, #1
 8002008:	2300      	movne	r3, #0
 800200a:	b2db      	uxtb	r3, r3
 800200c:	4013      	ands	r3, r2
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00d      	beq.n	8002030 <LCD_warnings+0x15c>
		LCD_writePixels(spi,HX8357_WHITE,0,0,179,79);
 8002014:	234f      	movs	r3, #79	; 0x4f
 8002016:	9301      	str	r3, [sp, #4]
 8002018:	23b3      	movs	r3, #179	; 0xb3
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	2300      	movs	r3, #0
 800201e:	2200      	movs	r2, #0
 8002020:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002024:	68f8      	ldr	r0, [r7, #12]
 8002026:	f7ff f917 	bl	8001258 <LCD_writePixels>
		tempWarn = 0;
 800202a:	4b2e      	ldr	r3, [pc, #184]	; (80020e4 <LCD_warnings+0x210>)
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
	}
	if (level > 30 & voltWarn == 1) {
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b1e      	cmp	r3, #30
 8002034:	bfcc      	ite	gt
 8002036:	2301      	movgt	r3, #1
 8002038:	2300      	movle	r3, #0
 800203a:	b2da      	uxtb	r2, r3
 800203c:	4b2b      	ldr	r3, [pc, #172]	; (80020ec <LCD_warnings+0x218>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2b01      	cmp	r3, #1
 8002042:	bf0c      	ite	eq
 8002044:	2301      	moveq	r3, #1
 8002046:	2300      	movne	r3, #0
 8002048:	b2db      	uxtb	r3, r3
 800204a:	4013      	ands	r3, r2
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00d      	beq.n	800206e <LCD_warnings+0x19a>
		LCD_writePixels(spi,HX8357_WHITE,180,0,179,79);
 8002052:	234f      	movs	r3, #79	; 0x4f
 8002054:	9301      	str	r3, [sp, #4]
 8002056:	23b3      	movs	r3, #179	; 0xb3
 8002058:	9300      	str	r3, [sp, #0]
 800205a:	2300      	movs	r3, #0
 800205c:	22b4      	movs	r2, #180	; 0xb4
 800205e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f7ff f8f8 	bl	8001258 <LCD_writePixels>
		voltWarn = 0;
 8002068:	4b20      	ldr	r3, [pc, #128]	; (80020ec <LCD_warnings+0x218>)
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]
	}
	if (*warning == 1 & voltWarn == 0 & tempWarn == 0) {
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2b01      	cmp	r3, #1
 8002074:	bf0c      	ite	eq
 8002076:	2301      	moveq	r3, #1
 8002078:	2300      	movne	r3, #0
 800207a:	b2da      	uxtb	r2, r3
 800207c:	4b1b      	ldr	r3, [pc, #108]	; (80020ec <LCD_warnings+0x218>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	bf0c      	ite	eq
 8002084:	2301      	moveq	r3, #1
 8002086:	2300      	movne	r3, #0
 8002088:	b2db      	uxtb	r3, r3
 800208a:	4013      	ands	r3, r2
 800208c:	b2db      	uxtb	r3, r3
 800208e:	461a      	mov	r2, r3
 8002090:	4b14      	ldr	r3, [pc, #80]	; (80020e4 <LCD_warnings+0x210>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	bf0c      	ite	eq
 8002098:	2301      	moveq	r3, #1
 800209a:	2300      	movne	r3, #0
 800209c:	b2db      	uxtb	r3, r3
 800209e:	4013      	ands	r3, r2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d01a      	beq.n	80020da <LCD_warnings+0x206>
		LCD_writePixels(spi,HX8357_WHITE,0,0,359,79);
 80020a4:	234f      	movs	r3, #79	; 0x4f
 80020a6:	9301      	str	r3, [sp, #4]
 80020a8:	f240 1367 	movw	r3, #359	; 0x167
 80020ac:	9300      	str	r3, [sp, #0]
 80020ae:	2300      	movs	r3, #0
 80020b0:	2200      	movs	r2, #0
 80020b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f7ff f8ce 	bl	8001258 <LCD_writePixels>
		LCD_drawString(spi,20,30 + 80*0,"TADAMHESPEV | UMSM",18,HX8357_BLACK,3);
 80020bc:	2303      	movs	r3, #3
 80020be:	9302      	str	r3, [sp, #8]
 80020c0:	2300      	movs	r3, #0
 80020c2:	9301      	str	r3, [sp, #4]
 80020c4:	2312      	movs	r3, #18
 80020c6:	9300      	str	r3, [sp, #0]
 80020c8:	4b0a      	ldr	r3, [pc, #40]	; (80020f4 <LCD_warnings+0x220>)
 80020ca:	221e      	movs	r2, #30
 80020cc:	2114      	movs	r1, #20
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	f7ff f9d6 	bl	8001480 <LCD_drawString>
		*warning = 0;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
	}
}
 80020da:	bf00      	nop
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	20000284 	.word	0x20000284
 80020e8:	08009fbc 	.word	0x08009fbc
 80020ec:	20000288 	.word	0x20000288
 80020f0:	08009fc8 	.word	0x08009fc8
 80020f4:	08009fd4 	.word	0x08009fd4

080020f8 <LCD_updateBattery>:

void LCD_updateBattery(SPI_HandleTypeDef* spi, int level) {
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b088      	sub	sp, #32
 80020fc:	af04      	add	r7, sp, #16
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
	if (level < 0) level = 0;
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	da01      	bge.n	800210c <LCD_updateBattery+0x14>
 8002108:	2300      	movs	r3, #0
 800210a:	603b      	str	r3, [r7, #0]
	if (level > 100) level = 100;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	2b64      	cmp	r3, #100	; 0x64
 8002110:	dd01      	ble.n	8002116 <LCD_updateBattery+0x1e>
 8002112:	2364      	movs	r3, #100	; 0x64
 8002114:	603b      	str	r3, [r7, #0]
	char lev[3];
	itoa(level,lev,10);
 8002116:	f107 030c 	add.w	r3, r7, #12
 800211a:	220a      	movs	r2, #10
 800211c:	4619      	mov	r1, r3
 800211e:	6838      	ldr	r0, [r7, #0]
 8002120:	f005 f873 	bl	800720a <itoa>

	LCD_fillBattery(spi,380,120,8,level);
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	9300      	str	r3, [sp, #0]
 8002128:	2308      	movs	r3, #8
 800212a:	2278      	movs	r2, #120	; 0x78
 800212c:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f7ff fd55 	bl	8001be0 <LCD_fillBattery>
	LCD_drawString(spi,370,50,lev,3,HX8357_BLACK,4);
 8002136:	f107 030c 	add.w	r3, r7, #12
 800213a:	2204      	movs	r2, #4
 800213c:	9202      	str	r2, [sp, #8]
 800213e:	2200      	movs	r2, #0
 8002140:	9201      	str	r2, [sp, #4]
 8002142:	2203      	movs	r2, #3
 8002144:	9200      	str	r2, [sp, #0]
 8002146:	2232      	movs	r2, #50	; 0x32
 8002148:	f44f 71b9 	mov.w	r1, #370	; 0x172
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f7ff f997 	bl	8001480 <LCD_drawString>
}
 8002152:	bf00      	nop
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
	...

0800215c <LCD_TADAMHASPEV>:

void LCD_TADAMHASPEV(SPI_HandleTypeDef* spi) {
 800215c:	b580      	push	{r7, lr}
 800215e:	b08e      	sub	sp, #56	; 0x38
 8002160:	af04      	add	r7, sp, #16
 8002162:	6078      	str	r0, [r7, #4]
	LCD_begin(spi);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f7fe ff0d 	bl	8000f84 <LCD_begin>
	LCD_writePixels(spi,HX8357_WHITE,0,0,480,320);
 800216a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800216e:	9301      	str	r3, [sp, #4]
 8002170:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002174:	9300      	str	r3, [sp, #0]
 8002176:	2300      	movs	r3, #0
 8002178:	2200      	movs	r2, #0
 800217a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7ff f86a 	bl	8001258 <LCD_writePixels>
	LCD_drawBattery(spi,380,120,8);
 8002184:	2308      	movs	r3, #8
 8002186:	2278      	movs	r2, #120	; 0x78
 8002188:	f44f 71be 	mov.w	r1, #380	; 0x17c
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f7ff fbd5 	bl	800193c <LCD_drawBattery>
    LCD_drawFrame(spi);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff fcee 	bl	8001b74 <LCD_drawFrame>


    char * name = "TADAMHESPEV | UMSM";
 8002198:	4b3b      	ldr	r3, [pc, #236]	; (8002288 <LCD_TADAMHASPEV+0x12c>)
 800219a:	627b      	str	r3, [r7, #36]	; 0x24
    char * speed = "SPEED:";
 800219c:	4b3b      	ldr	r3, [pc, #236]	; (800228c <LCD_TADAMHASPEV+0x130>)
 800219e:	623b      	str	r3, [r7, #32]
    char * temp = "TEMP:";
 80021a0:	4b3b      	ldr	r3, [pc, #236]	; (8002290 <LCD_TADAMHASPEV+0x134>)
 80021a2:	61fb      	str	r3, [r7, #28]
    char * power = "POWER:";
 80021a4:	4b3b      	ldr	r3, [pc, #236]	; (8002294 <LCD_TADAMHASPEV+0x138>)
 80021a6:	61bb      	str	r3, [r7, #24]
    char * mph = "mph";
 80021a8:	4b3b      	ldr	r3, [pc, #236]	; (8002298 <LCD_TADAMHASPEV+0x13c>)
 80021aa:	617b      	str	r3, [r7, #20]
    char * deg = "C";
 80021ac:	4b3b      	ldr	r3, [pc, #236]	; (800229c <LCD_TADAMHASPEV+0x140>)
 80021ae:	613b      	str	r3, [r7, #16]
    char * watt = "W";
 80021b0:	4b3b      	ldr	r3, [pc, #236]	; (80022a0 <LCD_TADAMHASPEV+0x144>)
 80021b2:	60fb      	str	r3, [r7, #12]

    LCD_drawString(spi,20,30 + 80*0,name,18,HX8357_BLACK,3);
 80021b4:	2303      	movs	r3, #3
 80021b6:	9302      	str	r3, [sp, #8]
 80021b8:	2300      	movs	r3, #0
 80021ba:	9301      	str	r3, [sp, #4]
 80021bc:	2312      	movs	r3, #18
 80021be:	9300      	str	r3, [sp, #0]
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	221e      	movs	r2, #30
 80021c4:	2114      	movs	r1, #20
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f7ff f95a 	bl	8001480 <LCD_drawString>
    LCD_drawString(spi,5,30 + 80*1,speed,6,HX8357_BLACK,3);
 80021cc:	2303      	movs	r3, #3
 80021ce:	9302      	str	r3, [sp, #8]
 80021d0:	2300      	movs	r3, #0
 80021d2:	9301      	str	r3, [sp, #4]
 80021d4:	2306      	movs	r3, #6
 80021d6:	9300      	str	r3, [sp, #0]
 80021d8:	6a3b      	ldr	r3, [r7, #32]
 80021da:	226e      	movs	r2, #110	; 0x6e
 80021dc:	2105      	movs	r1, #5
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7ff f94e 	bl	8001480 <LCD_drawString>
    LCD_drawString(spi,5,30 + 80*2,temp,5,HX8357_BLACK,3);
 80021e4:	2303      	movs	r3, #3
 80021e6:	9302      	str	r3, [sp, #8]
 80021e8:	2300      	movs	r3, #0
 80021ea:	9301      	str	r3, [sp, #4]
 80021ec:	2305      	movs	r3, #5
 80021ee:	9300      	str	r3, [sp, #0]
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	22be      	movs	r2, #190	; 0xbe
 80021f4:	2105      	movs	r1, #5
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7ff f942 	bl	8001480 <LCD_drawString>
    LCD_drawString(spi,5,30 + 80*3,power,6,HX8357_BLACK,3);
 80021fc:	2303      	movs	r3, #3
 80021fe:	9302      	str	r3, [sp, #8]
 8002200:	2300      	movs	r3, #0
 8002202:	9301      	str	r3, [sp, #4]
 8002204:	2306      	movs	r3, #6
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800220e:	2105      	movs	r1, #5
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7ff f935 	bl	8001480 <LCD_drawString>

    LCD_drawString(spi,280,30 + 80*1,mph,3,HX8357_BLACK,3);
 8002216:	2303      	movs	r3, #3
 8002218:	9302      	str	r3, [sp, #8]
 800221a:	2300      	movs	r3, #0
 800221c:	9301      	str	r3, [sp, #4]
 800221e:	2303      	movs	r3, #3
 8002220:	9300      	str	r3, [sp, #0]
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	226e      	movs	r2, #110	; 0x6e
 8002226:	f44f 718c 	mov.w	r1, #280	; 0x118
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f7ff f928 	bl	8001480 <LCD_drawString>
    LCD_drawString(spi,306,30 + 80*2,deg,1,HX8357_BLACK,3);
 8002230:	2303      	movs	r3, #3
 8002232:	9302      	str	r3, [sp, #8]
 8002234:	2300      	movs	r3, #0
 8002236:	9301      	str	r3, [sp, #4]
 8002238:	2301      	movs	r3, #1
 800223a:	9300      	str	r3, [sp, #0]
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	22be      	movs	r2, #190	; 0xbe
 8002240:	f44f 7199 	mov.w	r1, #306	; 0x132
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f7ff f91b 	bl	8001480 <LCD_drawString>
    LCD_drawString(spi,306,30 + 80*3,watt,1,HX8357_BLACK,3);
 800224a:	2303      	movs	r3, #3
 800224c:	9302      	str	r3, [sp, #8]
 800224e:	2300      	movs	r3, #0
 8002250:	9301      	str	r3, [sp, #4]
 8002252:	2301      	movs	r3, #1
 8002254:	9300      	str	r3, [sp, #0]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800225c:	f44f 7199 	mov.w	r1, #306	; 0x132
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f7ff f90d 	bl	8001480 <LCD_drawString>
    LCD_drawString(spi,442,50,"%",1,HX8357_BLACK,4);
 8002266:	2304      	movs	r3, #4
 8002268:	9302      	str	r3, [sp, #8]
 800226a:	2300      	movs	r3, #0
 800226c:	9301      	str	r3, [sp, #4]
 800226e:	2301      	movs	r3, #1
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	4b0c      	ldr	r3, [pc, #48]	; (80022a4 <LCD_TADAMHASPEV+0x148>)
 8002274:	2232      	movs	r2, #50	; 0x32
 8002276:	f44f 71dd 	mov.w	r1, #442	; 0x1ba
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7ff f900 	bl	8001480 <LCD_drawString>
}
 8002280:	bf00      	nop
 8002282:	3728      	adds	r7, #40	; 0x28
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	08009fd4 	.word	0x08009fd4
 800228c:	08009fe8 	.word	0x08009fe8
 8002290:	08009ff0 	.word	0x08009ff0
 8002294:	08009ff8 	.word	0x08009ff8
 8002298:	0800a000 	.word	0x0800a000
 800229c:	0800a004 	.word	0x0800a004
 80022a0:	0800a008 	.word	0x0800a008
 80022a4:	0800a00c 	.word	0x0800a00c

080022a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022ac:	f000 fe29 	bl	8002f02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022b0:	f000 f87a 	bl	80023a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022b4:	f000 fa24 	bl	8002700 <MX_GPIO_Init>
  MX_RTC_Init();
 80022b8:	f000 f8d8 	bl	800246c <MX_RTC_Init>
  MX_SPI1_Init();
 80022bc:	f000 f8fe 	bl	80024bc <MX_SPI1_Init>
  MX_TIM15_Init();
 80022c0:	f000 f974 	bl	80025ac <MX_TIM15_Init>
  MX_TIM16_Init();
 80022c4:	f000 f9c4 	bl	8002650 <MX_TIM16_Init>
  MX_USART1_UART_Init();
 80022c8:	f000 f9ea 	bl	80026a0 <MX_USART1_UART_Init>
  MX_SPI3_Init();
 80022cc:	f000 f934 	bl	8002538 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  LCD_TADAMHASPEV(&hspi1);
 80022d0:	482a      	ldr	r0, [pc, #168]	; (800237c <main+0xd4>)
 80022d2:	f7ff ff43 	bl	800215c <LCD_TADAMHASPEV>

    if (HAL_TIM_Base_Start_IT(&htim15) != HAL_OK) Error_Handler();
 80022d6:	482a      	ldr	r0, [pc, #168]	; (8002380 <main+0xd8>)
 80022d8:	f003 fe9c 	bl	8006014 <HAL_TIM_Base_Start_IT>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <main+0x3e>
 80022e2:	f000 fad2 	bl	800288a <Error_Handler>
    if (HAL_TIM_Base_Start_IT(&htim16) != HAL_OK) Error_Handler();
 80022e6:	4827      	ldr	r0, [pc, #156]	; (8002384 <main+0xdc>)
 80022e8:	f003 fe94 	bl	8006014 <HAL_TIM_Base_Start_IT>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <main+0x4e>
 80022f2:	f000 faca 	bl	800288a <Error_Handler>
    HAL_SPI_Receive_IT(&hspi3,(uint8_t*)buf,sizeof(buf));
 80022f6:	2214      	movs	r2, #20
 80022f8:	4923      	ldr	r1, [pc, #140]	; (8002388 <main+0xe0>)
 80022fa:	4824      	ldr	r0, [pc, #144]	; (800238c <main+0xe4>)
 80022fc:	f003 f832 	bl	8005364 <HAL_SPI_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (refresh == 1) {
 8002300:	4b23      	ldr	r3, [pc, #140]	; (8002390 <main+0xe8>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d10c      	bne.n	8002322 <main+0x7a>
		  LCD_updateVals(&hspi1,buf);
 8002308:	491f      	ldr	r1, [pc, #124]	; (8002388 <main+0xe0>)
 800230a:	481c      	ldr	r0, [pc, #112]	; (800237c <main+0xd4>)
 800230c:	f7ff fd80 	bl	8001e10 <LCD_updateVals>
		  refresh = 0;
 8002310:	4b1f      	ldr	r3, [pc, #124]	; (8002390 <main+0xe8>)
 8002312:	2200      	movs	r2, #0
 8002314:	601a      	str	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1,(uint8_t*)buf,sizeof(buf),10);
 8002316:	230a      	movs	r3, #10
 8002318:	2214      	movs	r2, #20
 800231a:	491b      	ldr	r1, [pc, #108]	; (8002388 <main+0xe0>)
 800231c:	481d      	ldr	r0, [pc, #116]	; (8002394 <main+0xec>)
 800231e:	f004 fa91 	bl	8006844 <HAL_UART_Transmit>
	  }
	  if (batRefresh == 1) {
 8002322:	4b1d      	ldr	r3, [pc, #116]	; (8002398 <main+0xf0>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d1ea      	bne.n	8002300 <main+0x58>
		  volt_percent = (int)(buf[3]*10 - 440);
 800232a:	4b17      	ldr	r3, [pc, #92]	; (8002388 <main+0xe0>)
 800232c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002330:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002334:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002338:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800239c <main+0xf4>
 800233c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002340:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002344:	ee17 2a90 	vmov	r2, s15
 8002348:	4b15      	ldr	r3, [pc, #84]	; (80023a0 <main+0xf8>)
 800234a:	601a      	str	r2, [r3, #0]
		  LCD_updateBattery(&hspi1,volt_percent);
 800234c:	4b14      	ldr	r3, [pc, #80]	; (80023a0 <main+0xf8>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4619      	mov	r1, r3
 8002352:	480a      	ldr	r0, [pc, #40]	; (800237c <main+0xd4>)
 8002354:	f7ff fed0 	bl	80020f8 <LCD_updateBattery>
		  LCD_warnings(&hspi1,buf[1],volt_percent,&warning);
 8002358:	4b0b      	ldr	r3, [pc, #44]	; (8002388 <main+0xe0>)
 800235a:	edd3 7a01 	vldr	s15, [r3, #4]
 800235e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002362:	4b0f      	ldr	r3, [pc, #60]	; (80023a0 <main+0xf8>)
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	4b0f      	ldr	r3, [pc, #60]	; (80023a4 <main+0xfc>)
 8002368:	ee17 1a90 	vmov	r1, s15
 800236c:	4803      	ldr	r0, [pc, #12]	; (800237c <main+0xd4>)
 800236e:	f7ff fdb1 	bl	8001ed4 <LCD_warnings>
		  batRefresh = 0;
 8002372:	4b09      	ldr	r3, [pc, #36]	; (8002398 <main+0xf0>)
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
	  if (refresh == 1) {
 8002378:	e7c2      	b.n	8002300 <main+0x58>
 800237a:	bf00      	nop
 800237c:	200002b0 	.word	0x200002b0
 8002380:	20000378 	.word	0x20000378
 8002384:	200003c4 	.word	0x200003c4
 8002388:	20000068 	.word	0x20000068
 800238c:	20000314 	.word	0x20000314
 8002390:	200004f4 	.word	0x200004f4
 8002394:	20000410 	.word	0x20000410
 8002398:	20000498 	.word	0x20000498
 800239c:	43dc0000 	.word	0x43dc0000
 80023a0:	200004f0 	.word	0x200004f0
 80023a4:	200004ec 	.word	0x200004ec

080023a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b096      	sub	sp, #88	; 0x58
 80023ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023ae:	f107 0314 	add.w	r3, r7, #20
 80023b2:	2244      	movs	r2, #68	; 0x44
 80023b4:	2100      	movs	r1, #0
 80023b6:	4618      	mov	r0, r3
 80023b8:	f005 fcf7 	bl	8007daa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023bc:	463b      	mov	r3, r7
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	605a      	str	r2, [r3, #4]
 80023c4:	609a      	str	r2, [r3, #8]
 80023c6:	60da      	str	r2, [r3, #12]
 80023c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80023ca:	f44f 7000 	mov.w	r0, #512	; 0x200
 80023ce:	f001 f8b9 	bl	8003544 <HAL_PWREx_ControlVoltageScaling>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80023d8:	f000 fa57 	bl	800288a <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80023dc:	f001 f894 	bl	8003508 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80023e0:	4b21      	ldr	r3, [pc, #132]	; (8002468 <SystemClock_Config+0xc0>)
 80023e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e6:	4a20      	ldr	r2, [pc, #128]	; (8002468 <SystemClock_Config+0xc0>)
 80023e8:	f023 0318 	bic.w	r3, r3, #24
 80023ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80023f0:	2314      	movs	r3, #20
 80023f2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80023f4:	2301      	movs	r3, #1
 80023f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80023f8:	2301      	movs	r3, #1
 80023fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80023fc:	2300      	movs	r3, #0
 80023fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002400:	2360      	movs	r3, #96	; 0x60
 8002402:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002404:	2302      	movs	r3, #2
 8002406:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002408:	2301      	movs	r3, #1
 800240a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800240c:	2301      	movs	r3, #1
 800240e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002410:	2328      	movs	r3, #40	; 0x28
 8002412:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002414:	2307      	movs	r3, #7
 8002416:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002418:	2302      	movs	r3, #2
 800241a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800241c:	2302      	movs	r3, #2
 800241e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002420:	f107 0314 	add.w	r3, r7, #20
 8002424:	4618      	mov	r0, r3
 8002426:	f001 f8e3 	bl	80035f0 <HAL_RCC_OscConfig>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002430:	f000 fa2b 	bl	800288a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002434:	230f      	movs	r3, #15
 8002436:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002438:	2303      	movs	r3, #3
 800243a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800243c:	2300      	movs	r3, #0
 800243e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002440:	2300      	movs	r3, #0
 8002442:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002444:	2300      	movs	r3, #0
 8002446:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002448:	463b      	mov	r3, r7
 800244a:	2104      	movs	r1, #4
 800244c:	4618      	mov	r0, r3
 800244e:	f001 fce3 	bl	8003e18 <HAL_RCC_ClockConfig>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002458:	f000 fa17 	bl	800288a <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800245c:	f002 f928 	bl	80046b0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002460:	bf00      	nop
 8002462:	3758      	adds	r7, #88	; 0x58
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40021000 	.word	0x40021000

0800246c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002470:	4b10      	ldr	r3, [pc, #64]	; (80024b4 <MX_RTC_Init+0x48>)
 8002472:	4a11      	ldr	r2, [pc, #68]	; (80024b8 <MX_RTC_Init+0x4c>)
 8002474:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002476:	4b0f      	ldr	r3, [pc, #60]	; (80024b4 <MX_RTC_Init+0x48>)
 8002478:	2200      	movs	r2, #0
 800247a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800247c:	4b0d      	ldr	r3, [pc, #52]	; (80024b4 <MX_RTC_Init+0x48>)
 800247e:	227f      	movs	r2, #127	; 0x7f
 8002480:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002482:	4b0c      	ldr	r3, [pc, #48]	; (80024b4 <MX_RTC_Init+0x48>)
 8002484:	22ff      	movs	r2, #255	; 0xff
 8002486:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002488:	4b0a      	ldr	r3, [pc, #40]	; (80024b4 <MX_RTC_Init+0x48>)
 800248a:	2200      	movs	r2, #0
 800248c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800248e:	4b09      	ldr	r3, [pc, #36]	; (80024b4 <MX_RTC_Init+0x48>)
 8002490:	2200      	movs	r2, #0
 8002492:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002494:	4b07      	ldr	r3, [pc, #28]	; (80024b4 <MX_RTC_Init+0x48>)
 8002496:	2200      	movs	r2, #0
 8002498:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800249a:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <MX_RTC_Init+0x48>)
 800249c:	2200      	movs	r2, #0
 800249e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80024a0:	4804      	ldr	r0, [pc, #16]	; (80024b4 <MX_RTC_Init+0x48>)
 80024a2:	f002 fa07 	bl	80048b4 <HAL_RTC_Init>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80024ac:	f000 f9ed 	bl	800288a <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80024b0:	bf00      	nop
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	2000028c 	.word	0x2000028c
 80024b8:	40002800 	.word	0x40002800

080024bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80024c0:	4b1b      	ldr	r3, [pc, #108]	; (8002530 <MX_SPI1_Init+0x74>)
 80024c2:	4a1c      	ldr	r2, [pc, #112]	; (8002534 <MX_SPI1_Init+0x78>)
 80024c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80024c6:	4b1a      	ldr	r3, [pc, #104]	; (8002530 <MX_SPI1_Init+0x74>)
 80024c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80024cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80024ce:	4b18      	ldr	r3, [pc, #96]	; (8002530 <MX_SPI1_Init+0x74>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80024d4:	4b16      	ldr	r3, [pc, #88]	; (8002530 <MX_SPI1_Init+0x74>)
 80024d6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80024da:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024dc:	4b14      	ldr	r3, [pc, #80]	; (8002530 <MX_SPI1_Init+0x74>)
 80024de:	2200      	movs	r2, #0
 80024e0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024e2:	4b13      	ldr	r3, [pc, #76]	; (8002530 <MX_SPI1_Init+0x74>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80024e8:	4b11      	ldr	r3, [pc, #68]	; (8002530 <MX_SPI1_Init+0x74>)
 80024ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024ee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80024f0:	4b0f      	ldr	r3, [pc, #60]	; (8002530 <MX_SPI1_Init+0x74>)
 80024f2:	2208      	movs	r2, #8
 80024f4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024f6:	4b0e      	ldr	r3, [pc, #56]	; (8002530 <MX_SPI1_Init+0x74>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80024fc:	4b0c      	ldr	r3, [pc, #48]	; (8002530 <MX_SPI1_Init+0x74>)
 80024fe:	2200      	movs	r2, #0
 8002500:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002502:	4b0b      	ldr	r3, [pc, #44]	; (8002530 <MX_SPI1_Init+0x74>)
 8002504:	2200      	movs	r2, #0
 8002506:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002508:	4b09      	ldr	r3, [pc, #36]	; (8002530 <MX_SPI1_Init+0x74>)
 800250a:	2207      	movs	r2, #7
 800250c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800250e:	4b08      	ldr	r3, [pc, #32]	; (8002530 <MX_SPI1_Init+0x74>)
 8002510:	2200      	movs	r2, #0
 8002512:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002514:	4b06      	ldr	r3, [pc, #24]	; (8002530 <MX_SPI1_Init+0x74>)
 8002516:	2208      	movs	r2, #8
 8002518:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800251a:	4805      	ldr	r0, [pc, #20]	; (8002530 <MX_SPI1_Init+0x74>)
 800251c:	f002 fae8 	bl	8004af0 <HAL_SPI_Init>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002526:	f000 f9b0 	bl	800288a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800252a:	bf00      	nop
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	200002b0 	.word	0x200002b0
 8002534:	40013000 	.word	0x40013000

08002538 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800253c:	4b19      	ldr	r3, [pc, #100]	; (80025a4 <MX_SPI3_Init+0x6c>)
 800253e:	4a1a      	ldr	r2, [pc, #104]	; (80025a8 <MX_SPI3_Init+0x70>)
 8002540:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8002542:	4b18      	ldr	r3, [pc, #96]	; (80025a4 <MX_SPI3_Init+0x6c>)
 8002544:	2200      	movs	r2, #0
 8002546:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8002548:	4b16      	ldr	r3, [pc, #88]	; (80025a4 <MX_SPI3_Init+0x6c>)
 800254a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800254e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002550:	4b14      	ldr	r3, [pc, #80]	; (80025a4 <MX_SPI3_Init+0x6c>)
 8002552:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002556:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002558:	4b12      	ldr	r3, [pc, #72]	; (80025a4 <MX_SPI3_Init+0x6c>)
 800255a:	2200      	movs	r2, #0
 800255c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800255e:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <MX_SPI3_Init+0x6c>)
 8002560:	2200      	movs	r2, #0
 8002562:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002564:	4b0f      	ldr	r3, [pc, #60]	; (80025a4 <MX_SPI3_Init+0x6c>)
 8002566:	f44f 7200 	mov.w	r2, #512	; 0x200
 800256a:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800256c:	4b0d      	ldr	r3, [pc, #52]	; (80025a4 <MX_SPI3_Init+0x6c>)
 800256e:	2200      	movs	r2, #0
 8002570:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002572:	4b0c      	ldr	r3, [pc, #48]	; (80025a4 <MX_SPI3_Init+0x6c>)
 8002574:	2200      	movs	r2, #0
 8002576:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002578:	4b0a      	ldr	r3, [pc, #40]	; (80025a4 <MX_SPI3_Init+0x6c>)
 800257a:	2200      	movs	r2, #0
 800257c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800257e:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <MX_SPI3_Init+0x6c>)
 8002580:	2207      	movs	r2, #7
 8002582:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002584:	4b07      	ldr	r3, [pc, #28]	; (80025a4 <MX_SPI3_Init+0x6c>)
 8002586:	2200      	movs	r2, #0
 8002588:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800258a:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <MX_SPI3_Init+0x6c>)
 800258c:	2200      	movs	r2, #0
 800258e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002590:	4804      	ldr	r0, [pc, #16]	; (80025a4 <MX_SPI3_Init+0x6c>)
 8002592:	f002 faad 	bl	8004af0 <HAL_SPI_Init>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <MX_SPI3_Init+0x68>
  {
    Error_Handler();
 800259c:	f000 f975 	bl	800288a <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80025a0:	bf00      	nop
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	20000314 	.word	0x20000314
 80025a8:	40003c00 	.word	0x40003c00

080025ac <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b088      	sub	sp, #32
 80025b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025b2:	f107 0310 	add.w	r3, r7, #16
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	605a      	str	r2, [r3, #4]
 80025bc:	609a      	str	r2, [r3, #8]
 80025be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025c0:	1d3b      	adds	r3, r7, #4
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	605a      	str	r2, [r3, #4]
 80025c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80025ca:	4b1f      	ldr	r3, [pc, #124]	; (8002648 <MX_TIM15_Init+0x9c>)
 80025cc:	4a1f      	ldr	r2, [pc, #124]	; (800264c <MX_TIM15_Init+0xa0>)
 80025ce:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 7999;
 80025d0:	4b1d      	ldr	r3, [pc, #116]	; (8002648 <MX_TIM15_Init+0x9c>)
 80025d2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80025d6:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d8:	4b1b      	ldr	r3, [pc, #108]	; (8002648 <MX_TIM15_Init+0x9c>)
 80025da:	2200      	movs	r2, #0
 80025dc:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 4999;
 80025de:	4b1a      	ldr	r3, [pc, #104]	; (8002648 <MX_TIM15_Init+0x9c>)
 80025e0:	f241 3287 	movw	r2, #4999	; 0x1387
 80025e4:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025e6:	4b18      	ldr	r3, [pc, #96]	; (8002648 <MX_TIM15_Init+0x9c>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80025ec:	4b16      	ldr	r3, [pc, #88]	; (8002648 <MX_TIM15_Init+0x9c>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025f2:	4b15      	ldr	r3, [pc, #84]	; (8002648 <MX_TIM15_Init+0x9c>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80025f8:	4813      	ldr	r0, [pc, #76]	; (8002648 <MX_TIM15_Init+0x9c>)
 80025fa:	f003 fcb3 	bl	8005f64 <HAL_TIM_Base_Init>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8002604:	f000 f941 	bl	800288a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002608:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800260c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800260e:	f107 0310 	add.w	r3, r7, #16
 8002612:	4619      	mov	r1, r3
 8002614:	480c      	ldr	r0, [pc, #48]	; (8002648 <MX_TIM15_Init+0x9c>)
 8002616:	f003 fe53 	bl	80062c0 <HAL_TIM_ConfigClockSource>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8002620:	f000 f933 	bl	800288a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002624:	2300      	movs	r3, #0
 8002626:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002628:	2300      	movs	r3, #0
 800262a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800262c:	1d3b      	adds	r3, r7, #4
 800262e:	4619      	mov	r1, r3
 8002630:	4805      	ldr	r0, [pc, #20]	; (8002648 <MX_TIM15_Init+0x9c>)
 8002632:	f004 f835 	bl	80066a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 800263c:	f000 f925 	bl	800288a <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8002640:	bf00      	nop
 8002642:	3720      	adds	r7, #32
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	20000378 	.word	0x20000378
 800264c:	40014000 	.word	0x40014000

08002650 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002654:	4b10      	ldr	r3, [pc, #64]	; (8002698 <MX_TIM16_Init+0x48>)
 8002656:	4a11      	ldr	r2, [pc, #68]	; (800269c <MX_TIM16_Init+0x4c>)
 8002658:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 39999;
 800265a:	4b0f      	ldr	r3, [pc, #60]	; (8002698 <MX_TIM16_Init+0x48>)
 800265c:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8002660:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002662:	4b0d      	ldr	r3, [pc, #52]	; (8002698 <MX_TIM16_Init+0x48>)
 8002664:	2200      	movs	r2, #0
 8002666:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 29999;
 8002668:	4b0b      	ldr	r3, [pc, #44]	; (8002698 <MX_TIM16_Init+0x48>)
 800266a:	f247 522f 	movw	r2, #29999	; 0x752f
 800266e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002670:	4b09      	ldr	r3, [pc, #36]	; (8002698 <MX_TIM16_Init+0x48>)
 8002672:	2200      	movs	r2, #0
 8002674:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002676:	4b08      	ldr	r3, [pc, #32]	; (8002698 <MX_TIM16_Init+0x48>)
 8002678:	2200      	movs	r2, #0
 800267a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800267c:	4b06      	ldr	r3, [pc, #24]	; (8002698 <MX_TIM16_Init+0x48>)
 800267e:	2200      	movs	r2, #0
 8002680:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002682:	4805      	ldr	r0, [pc, #20]	; (8002698 <MX_TIM16_Init+0x48>)
 8002684:	f003 fc6e 	bl	8005f64 <HAL_TIM_Base_Init>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800268e:	f000 f8fc 	bl	800288a <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002692:	bf00      	nop
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	200003c4 	.word	0x200003c4
 800269c:	40014400 	.word	0x40014400

080026a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026a4:	4b14      	ldr	r3, [pc, #80]	; (80026f8 <MX_USART1_UART_Init+0x58>)
 80026a6:	4a15      	ldr	r2, [pc, #84]	; (80026fc <MX_USART1_UART_Init+0x5c>)
 80026a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80026aa:	4b13      	ldr	r3, [pc, #76]	; (80026f8 <MX_USART1_UART_Init+0x58>)
 80026ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026b2:	4b11      	ldr	r3, [pc, #68]	; (80026f8 <MX_USART1_UART_Init+0x58>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026b8:	4b0f      	ldr	r3, [pc, #60]	; (80026f8 <MX_USART1_UART_Init+0x58>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026be:	4b0e      	ldr	r3, [pc, #56]	; (80026f8 <MX_USART1_UART_Init+0x58>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026c4:	4b0c      	ldr	r3, [pc, #48]	; (80026f8 <MX_USART1_UART_Init+0x58>)
 80026c6:	220c      	movs	r2, #12
 80026c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026ca:	4b0b      	ldr	r3, [pc, #44]	; (80026f8 <MX_USART1_UART_Init+0x58>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026d0:	4b09      	ldr	r3, [pc, #36]	; (80026f8 <MX_USART1_UART_Init+0x58>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026d6:	4b08      	ldr	r3, [pc, #32]	; (80026f8 <MX_USART1_UART_Init+0x58>)
 80026d8:	2200      	movs	r2, #0
 80026da:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026dc:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <MX_USART1_UART_Init+0x58>)
 80026de:	2200      	movs	r2, #0
 80026e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026e2:	4805      	ldr	r0, [pc, #20]	; (80026f8 <MX_USART1_UART_Init+0x58>)
 80026e4:	f004 f860 	bl	80067a8 <HAL_UART_Init>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80026ee:	f000 f8cc 	bl	800288a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80026f2:	bf00      	nop
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	20000410 	.word	0x20000410
 80026fc:	40013800 	.word	0x40013800

08002700 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b088      	sub	sp, #32
 8002704:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002706:	f107 030c 	add.w	r3, r7, #12
 800270a:	2200      	movs	r2, #0
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	605a      	str	r2, [r3, #4]
 8002710:	609a      	str	r2, [r3, #8]
 8002712:	60da      	str	r2, [r3, #12]
 8002714:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002716:	4b39      	ldr	r3, [pc, #228]	; (80027fc <MX_GPIO_Init+0xfc>)
 8002718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800271a:	4a38      	ldr	r2, [pc, #224]	; (80027fc <MX_GPIO_Init+0xfc>)
 800271c:	f043 0304 	orr.w	r3, r3, #4
 8002720:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002722:	4b36      	ldr	r3, [pc, #216]	; (80027fc <MX_GPIO_Init+0xfc>)
 8002724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002726:	f003 0304 	and.w	r3, r3, #4
 800272a:	60bb      	str	r3, [r7, #8]
 800272c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800272e:	4b33      	ldr	r3, [pc, #204]	; (80027fc <MX_GPIO_Init+0xfc>)
 8002730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002732:	4a32      	ldr	r2, [pc, #200]	; (80027fc <MX_GPIO_Init+0xfc>)
 8002734:	f043 0301 	orr.w	r3, r3, #1
 8002738:	64d3      	str	r3, [r2, #76]	; 0x4c
 800273a:	4b30      	ldr	r3, [pc, #192]	; (80027fc <MX_GPIO_Init+0xfc>)
 800273c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	607b      	str	r3, [r7, #4]
 8002744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002746:	4b2d      	ldr	r3, [pc, #180]	; (80027fc <MX_GPIO_Init+0xfc>)
 8002748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800274a:	4a2c      	ldr	r2, [pc, #176]	; (80027fc <MX_GPIO_Init+0xfc>)
 800274c:	f043 0302 	orr.w	r3, r3, #2
 8002750:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002752:	4b2a      	ldr	r3, [pc, #168]	; (80027fc <MX_GPIO_Init+0xfc>)
 8002754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	603b      	str	r3, [r7, #0]
 800275c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_RESET);
 800275e:	2200      	movs	r2, #0
 8002760:	210a      	movs	r1, #10
 8002762:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002766:	f000 feb7 	bl	80034d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800276a:	2200      	movs	r2, #0
 800276c:	2140      	movs	r1, #64	; 0x40
 800276e:	4824      	ldr	r0, [pc, #144]	; (8002800 <MX_GPIO_Init+0x100>)
 8002770:	f000 feb2 	bl	80034d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8002774:	230a      	movs	r3, #10
 8002776:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002778:	2301      	movs	r3, #1
 800277a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277c:	2300      	movs	r3, #0
 800277e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002780:	2303      	movs	r3, #3
 8002782:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002784:	f107 030c 	add.w	r3, r7, #12
 8002788:	4619      	mov	r1, r3
 800278a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800278e:	f000 fd39 	bl	8003204 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002792:	2304      	movs	r3, #4
 8002794:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002796:	2302      	movs	r3, #2
 8002798:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279a:	2300      	movs	r3, #0
 800279c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800279e:	2303      	movs	r3, #3
 80027a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027a2:	2307      	movs	r3, #7
 80027a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80027a6:	f107 030c 	add.w	r3, r7, #12
 80027aa:	4619      	mov	r1, r3
 80027ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027b0:	f000 fd28 	bl	8003204 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 80027b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ba:	2302      	movs	r3, #2
 80027bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027be:	2300      	movs	r3, #0
 80027c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c2:	2303      	movs	r3, #3
 80027c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80027c6:	2303      	movs	r3, #3
 80027c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80027ca:	f107 030c 	add.w	r3, r7, #12
 80027ce:	4619      	mov	r1, r3
 80027d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027d4:	f000 fd16 	bl	8003204 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80027d8:	2340      	movs	r3, #64	; 0x40
 80027da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027dc:	2301      	movs	r3, #1
 80027de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e0:	2300      	movs	r3, #0
 80027e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027e4:	2303      	movs	r3, #3
 80027e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027e8:	f107 030c 	add.w	r3, r7, #12
 80027ec:	4619      	mov	r1, r3
 80027ee:	4804      	ldr	r0, [pc, #16]	; (8002800 <MX_GPIO_Init+0x100>)
 80027f0:	f000 fd08 	bl	8003204 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80027f4:	bf00      	nop
 80027f6:	3720      	adds	r7, #32
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40021000 	.word	0x40021000
 8002800:	48000400 	.word	0x48000400

08002804 <HAL_SPI_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
	refresh = 1;
 800280c:	4b12      	ldr	r3, [pc, #72]	; (8002858 <HAL_SPI_RxCpltCallback+0x54>)
 800280e:	2201      	movs	r2, #1
 8002810:	601a      	str	r2, [r3, #0]
	HAL_SPI_Receive_IT(&hspi3,(uint8_t*)buf,sizeof(buf));
 8002812:	2214      	movs	r2, #20
 8002814:	4911      	ldr	r1, [pc, #68]	; (800285c <HAL_SPI_RxCpltCallback+0x58>)
 8002816:	4812      	ldr	r0, [pc, #72]	; (8002860 <HAL_SPI_RxCpltCallback+0x5c>)
 8002818:	f002 fda4 	bl	8005364 <HAL_SPI_Receive_IT>
	if (buf[3] != prevVolt) {
 800281c:	4b0f      	ldr	r3, [pc, #60]	; (800285c <HAL_SPI_RxCpltCallback+0x58>)
 800281e:	ed93 7a03 	vldr	s14, [r3, #12]
 8002822:	4b10      	ldr	r3, [pc, #64]	; (8002864 <HAL_SPI_RxCpltCallback+0x60>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	ee07 3a90 	vmov	s15, r3
 800282a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800282e:	eeb4 7a67 	vcmp.f32	s14, s15
 8002832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002836:	d00b      	beq.n	8002850 <HAL_SPI_RxCpltCallback+0x4c>
		batRefresh = 1;
 8002838:	4b0b      	ldr	r3, [pc, #44]	; (8002868 <HAL_SPI_RxCpltCallback+0x64>)
 800283a:	2201      	movs	r2, #1
 800283c:	601a      	str	r2, [r3, #0]
		prevVolt = buf[3];
 800283e:	4b07      	ldr	r3, [pc, #28]	; (800285c <HAL_SPI_RxCpltCallback+0x58>)
 8002840:	edd3 7a03 	vldr	s15, [r3, #12]
 8002844:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002848:	ee17 2a90 	vmov	r2, s15
 800284c:	4b05      	ldr	r3, [pc, #20]	; (8002864 <HAL_SPI_RxCpltCallback+0x60>)
 800284e:	601a      	str	r2, [r3, #0]
	}
}
 8002850:	bf00      	nop
 8002852:	3708      	adds	r7, #8
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	200004f4 	.word	0x200004f4
 800285c:	20000068 	.word	0x20000068
 8002860:	20000314 	.word	0x20000314
 8002864:	2000049c 	.word	0x2000049c
 8002868:	20000498 	.word	0x20000498

0800286c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800287c:	d101      	bne.n	8002882 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800287e:	f000 fb59 	bl	8002f34 <HAL_IncTick>
////	  LCD_warnings(&hspi1, (buf[2] << 4) | buf[3],volt_percent,&Twarning,&Vwarning);
//	  LCD_warnings(&hspi1, (buf[2] << 4) | buf[3],volt_percent,&warning);
//	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_3);
//  }
  /* USER CODE END Callback 1 */
}
 8002882:	bf00      	nop
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800288a:	b480      	push	{r7}
 800288c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800288e:	b672      	cpsid	i
}
 8002890:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002892:	e7fe      	b.n	8002892 <Error_Handler+0x8>

08002894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800289a:	4b0f      	ldr	r3, [pc, #60]	; (80028d8 <HAL_MspInit+0x44>)
 800289c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800289e:	4a0e      	ldr	r2, [pc, #56]	; (80028d8 <HAL_MspInit+0x44>)
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	6613      	str	r3, [r2, #96]	; 0x60
 80028a6:	4b0c      	ldr	r3, [pc, #48]	; (80028d8 <HAL_MspInit+0x44>)
 80028a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	607b      	str	r3, [r7, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028b2:	4b09      	ldr	r3, [pc, #36]	; (80028d8 <HAL_MspInit+0x44>)
 80028b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b6:	4a08      	ldr	r2, [pc, #32]	; (80028d8 <HAL_MspInit+0x44>)
 80028b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028bc:	6593      	str	r3, [r2, #88]	; 0x58
 80028be:	4b06      	ldr	r3, [pc, #24]	; (80028d8 <HAL_MspInit+0x44>)
 80028c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c6:	603b      	str	r3, [r7, #0]
 80028c8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80028ca:	2004      	movs	r0, #4
 80028cc:	f000 fc23 	bl	8003116 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028d0:	bf00      	nop
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40021000 	.word	0x40021000

080028dc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b098      	sub	sp, #96	; 0x60
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028e4:	f107 030c 	add.w	r3, r7, #12
 80028e8:	2254      	movs	r2, #84	; 0x54
 80028ea:	2100      	movs	r1, #0
 80028ec:	4618      	mov	r0, r3
 80028ee:	f005 fa5c 	bl	8007daa <memset>
  if(hrtc->Instance==RTC)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a0f      	ldr	r2, [pc, #60]	; (8002934 <HAL_RTC_MspInit+0x58>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d117      	bne.n	800292c <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80028fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002900:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002902:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002906:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002908:	f107 030c 	add.w	r3, r7, #12
 800290c:	4618      	mov	r0, r3
 800290e:	f001 fcd9 	bl	80042c4 <HAL_RCCEx_PeriphCLKConfig>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002918:	f7ff ffb7 	bl	800288a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800291c:	4b06      	ldr	r3, [pc, #24]	; (8002938 <HAL_RTC_MspInit+0x5c>)
 800291e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002922:	4a05      	ldr	r2, [pc, #20]	; (8002938 <HAL_RTC_MspInit+0x5c>)
 8002924:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002928:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800292c:	bf00      	nop
 800292e:	3760      	adds	r7, #96	; 0x60
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40002800 	.word	0x40002800
 8002938:	40021000 	.word	0x40021000

0800293c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b08c      	sub	sp, #48	; 0x30
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002944:	f107 031c 	add.w	r3, r7, #28
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	605a      	str	r2, [r3, #4]
 800294e:	609a      	str	r2, [r3, #8]
 8002950:	60da      	str	r2, [r3, #12]
 8002952:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a32      	ldr	r2, [pc, #200]	; (8002a24 <HAL_SPI_MspInit+0xe8>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d129      	bne.n	80029b2 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800295e:	4b32      	ldr	r3, [pc, #200]	; (8002a28 <HAL_SPI_MspInit+0xec>)
 8002960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002962:	4a31      	ldr	r2, [pc, #196]	; (8002a28 <HAL_SPI_MspInit+0xec>)
 8002964:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002968:	6613      	str	r3, [r2, #96]	; 0x60
 800296a:	4b2f      	ldr	r3, [pc, #188]	; (8002a28 <HAL_SPI_MspInit+0xec>)
 800296c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800296e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002972:	61bb      	str	r3, [r7, #24]
 8002974:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002976:	4b2c      	ldr	r3, [pc, #176]	; (8002a28 <HAL_SPI_MspInit+0xec>)
 8002978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800297a:	4a2b      	ldr	r2, [pc, #172]	; (8002a28 <HAL_SPI_MspInit+0xec>)
 800297c:	f043 0301 	orr.w	r3, r3, #1
 8002980:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002982:	4b29      	ldr	r3, [pc, #164]	; (8002a28 <HAL_SPI_MspInit+0xec>)
 8002984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	617b      	str	r3, [r7, #20]
 800298c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800298e:	23a0      	movs	r3, #160	; 0xa0
 8002990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002992:	2302      	movs	r3, #2
 8002994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002996:	2300      	movs	r3, #0
 8002998:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800299a:	2303      	movs	r3, #3
 800299c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800299e:	2305      	movs	r3, #5
 80029a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a2:	f107 031c 	add.w	r3, r7, #28
 80029a6:	4619      	mov	r1, r3
 80029a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029ac:	f000 fc2a 	bl	8003204 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80029b0:	e034      	b.n	8002a1c <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI3)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a1d      	ldr	r2, [pc, #116]	; (8002a2c <HAL_SPI_MspInit+0xf0>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d12f      	bne.n	8002a1c <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80029bc:	4b1a      	ldr	r3, [pc, #104]	; (8002a28 <HAL_SPI_MspInit+0xec>)
 80029be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c0:	4a19      	ldr	r2, [pc, #100]	; (8002a28 <HAL_SPI_MspInit+0xec>)
 80029c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029c6:	6593      	str	r3, [r2, #88]	; 0x58
 80029c8:	4b17      	ldr	r3, [pc, #92]	; (8002a28 <HAL_SPI_MspInit+0xec>)
 80029ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029d0:	613b      	str	r3, [r7, #16]
 80029d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029d4:	4b14      	ldr	r3, [pc, #80]	; (8002a28 <HAL_SPI_MspInit+0xec>)
 80029d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d8:	4a13      	ldr	r2, [pc, #76]	; (8002a28 <HAL_SPI_MspInit+0xec>)
 80029da:	f043 0302 	orr.w	r3, r3, #2
 80029de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029e0:	4b11      	ldr	r3, [pc, #68]	; (8002a28 <HAL_SPI_MspInit+0xec>)
 80029e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80029ec:	2328      	movs	r3, #40	; 0x28
 80029ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f0:	2302      	movs	r3, #2
 80029f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f4:	2300      	movs	r3, #0
 80029f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f8:	2303      	movs	r3, #3
 80029fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80029fc:	2306      	movs	r3, #6
 80029fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a00:	f107 031c 	add.w	r3, r7, #28
 8002a04:	4619      	mov	r1, r3
 8002a06:	480a      	ldr	r0, [pc, #40]	; (8002a30 <HAL_SPI_MspInit+0xf4>)
 8002a08:	f000 fbfc 	bl	8003204 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	2100      	movs	r1, #0
 8002a10:	2033      	movs	r0, #51	; 0x33
 8002a12:	f000 fb8b 	bl	800312c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8002a16:	2033      	movs	r0, #51	; 0x33
 8002a18:	f000 fba4 	bl	8003164 <HAL_NVIC_EnableIRQ>
}
 8002a1c:	bf00      	nop
 8002a1e:	3730      	adds	r7, #48	; 0x30
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40013000 	.word	0x40013000
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	40003c00 	.word	0x40003c00
 8002a30:	48000400 	.word	0x48000400

08002a34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a1a      	ldr	r2, [pc, #104]	; (8002aac <HAL_TIM_Base_MspInit+0x78>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d114      	bne.n	8002a70 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002a46:	4b1a      	ldr	r3, [pc, #104]	; (8002ab0 <HAL_TIM_Base_MspInit+0x7c>)
 8002a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a4a:	4a19      	ldr	r2, [pc, #100]	; (8002ab0 <HAL_TIM_Base_MspInit+0x7c>)
 8002a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a50:	6613      	str	r3, [r2, #96]	; 0x60
 8002a52:	4b17      	ldr	r3, [pc, #92]	; (8002ab0 <HAL_TIM_Base_MspInit+0x7c>)
 8002a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002a5e:	2200      	movs	r2, #0
 8002a60:	2100      	movs	r1, #0
 8002a62:	2018      	movs	r0, #24
 8002a64:	f000 fb62 	bl	800312c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002a68:	2018      	movs	r0, #24
 8002a6a:	f000 fb7b 	bl	8003164 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002a6e:	e018      	b.n	8002aa2 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM16)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a0f      	ldr	r2, [pc, #60]	; (8002ab4 <HAL_TIM_Base_MspInit+0x80>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d113      	bne.n	8002aa2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002a7a:	4b0d      	ldr	r3, [pc, #52]	; (8002ab0 <HAL_TIM_Base_MspInit+0x7c>)
 8002a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a7e:	4a0c      	ldr	r2, [pc, #48]	; (8002ab0 <HAL_TIM_Base_MspInit+0x7c>)
 8002a80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a84:	6613      	str	r3, [r2, #96]	; 0x60
 8002a86:	4b0a      	ldr	r3, [pc, #40]	; (8002ab0 <HAL_TIM_Base_MspInit+0x7c>)
 8002a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8e:	60bb      	str	r3, [r7, #8]
 8002a90:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 1);
 8002a92:	2201      	movs	r2, #1
 8002a94:	2100      	movs	r1, #0
 8002a96:	2019      	movs	r0, #25
 8002a98:	f000 fb48 	bl	800312c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002a9c:	2019      	movs	r0, #25
 8002a9e:	f000 fb61 	bl	8003164 <HAL_NVIC_EnableIRQ>
}
 8002aa2:	bf00      	nop
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40014000 	.word	0x40014000
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	40014400 	.word	0x40014400

08002ab8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b09e      	sub	sp, #120	; 0x78
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	605a      	str	r2, [r3, #4]
 8002aca:	609a      	str	r2, [r3, #8]
 8002acc:	60da      	str	r2, [r3, #12]
 8002ace:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ad0:	f107 0310 	add.w	r3, r7, #16
 8002ad4:	2254      	movs	r2, #84	; 0x54
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f005 f966 	bl	8007daa <memset>
  if(huart->Instance==USART1)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a1f      	ldr	r2, [pc, #124]	; (8002b60 <HAL_UART_MspInit+0xa8>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d137      	bne.n	8002b58 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002aec:	2300      	movs	r3, #0
 8002aee:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002af0:	f107 0310 	add.w	r3, r7, #16
 8002af4:	4618      	mov	r0, r3
 8002af6:	f001 fbe5 	bl	80042c4 <HAL_RCCEx_PeriphCLKConfig>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002b00:	f7ff fec3 	bl	800288a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b04:	4b17      	ldr	r3, [pc, #92]	; (8002b64 <HAL_UART_MspInit+0xac>)
 8002b06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b08:	4a16      	ldr	r2, [pc, #88]	; (8002b64 <HAL_UART_MspInit+0xac>)
 8002b0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b0e:	6613      	str	r3, [r2, #96]	; 0x60
 8002b10:	4b14      	ldr	r3, [pc, #80]	; (8002b64 <HAL_UART_MspInit+0xac>)
 8002b12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b1c:	4b11      	ldr	r3, [pc, #68]	; (8002b64 <HAL_UART_MspInit+0xac>)
 8002b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b20:	4a10      	ldr	r2, [pc, #64]	; (8002b64 <HAL_UART_MspInit+0xac>)
 8002b22:	f043 0301 	orr.w	r3, r3, #1
 8002b26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b28:	4b0e      	ldr	r3, [pc, #56]	; (8002b64 <HAL_UART_MspInit+0xac>)
 8002b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	60bb      	str	r3, [r7, #8]
 8002b32:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002b34:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002b38:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b42:	2303      	movs	r3, #3
 8002b44:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b46:	2307      	movs	r3, #7
 8002b48:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b4a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002b4e:	4619      	mov	r1, r3
 8002b50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b54:	f000 fb56 	bl	8003204 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002b58:	bf00      	nop
 8002b5a:	3778      	adds	r7, #120	; 0x78
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40013800 	.word	0x40013800
 8002b64:	40021000 	.word	0x40021000

08002b68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b08e      	sub	sp, #56	; 0x38
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002b70:	2300      	movs	r3, #0
 8002b72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002b76:	4b34      	ldr	r3, [pc, #208]	; (8002c48 <HAL_InitTick+0xe0>)
 8002b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b7a:	4a33      	ldr	r2, [pc, #204]	; (8002c48 <HAL_InitTick+0xe0>)
 8002b7c:	f043 0301 	orr.w	r3, r3, #1
 8002b80:	6593      	str	r3, [r2, #88]	; 0x58
 8002b82:	4b31      	ldr	r3, [pc, #196]	; (8002c48 <HAL_InitTick+0xe0>)
 8002b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b8e:	f107 0210 	add.w	r2, r7, #16
 8002b92:	f107 0314 	add.w	r3, r7, #20
 8002b96:	4611      	mov	r1, r2
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f001 fb01 	bl	80041a0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002b9e:	6a3b      	ldr	r3, [r7, #32]
 8002ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d103      	bne.n	8002bb0 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002ba8:	f001 face 	bl	8004148 <HAL_RCC_GetPCLK1Freq>
 8002bac:	6378      	str	r0, [r7, #52]	; 0x34
 8002bae:	e004      	b.n	8002bba <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002bb0:	f001 faca 	bl	8004148 <HAL_RCC_GetPCLK1Freq>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bbc:	4a23      	ldr	r2, [pc, #140]	; (8002c4c <HAL_InitTick+0xe4>)
 8002bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc2:	0c9b      	lsrs	r3, r3, #18
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8002bc8:	4b21      	ldr	r3, [pc, #132]	; (8002c50 <HAL_InitTick+0xe8>)
 8002bca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002bce:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8002bd0:	4b1f      	ldr	r3, [pc, #124]	; (8002c50 <HAL_InitTick+0xe8>)
 8002bd2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002bd6:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8002bd8:	4a1d      	ldr	r2, [pc, #116]	; (8002c50 <HAL_InitTick+0xe8>)
 8002bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bdc:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8002bde:	4b1c      	ldr	r3, [pc, #112]	; (8002c50 <HAL_InitTick+0xe8>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002be4:	4b1a      	ldr	r3, [pc, #104]	; (8002c50 <HAL_InitTick+0xe8>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bea:	4b19      	ldr	r3, [pc, #100]	; (8002c50 <HAL_InitTick+0xe8>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8002bf0:	4817      	ldr	r0, [pc, #92]	; (8002c50 <HAL_InitTick+0xe8>)
 8002bf2:	f003 f9b7 	bl	8005f64 <HAL_TIM_Base_Init>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002bfc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d11b      	bne.n	8002c3c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8002c04:	4812      	ldr	r0, [pc, #72]	; (8002c50 <HAL_InitTick+0xe8>)
 8002c06:	f003 fa05 	bl	8006014 <HAL_TIM_Base_Start_IT>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002c10:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d111      	bne.n	8002c3c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002c18:	201c      	movs	r0, #28
 8002c1a:	f000 faa3 	bl	8003164 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2b0f      	cmp	r3, #15
 8002c22:	d808      	bhi.n	8002c36 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8002c24:	2200      	movs	r2, #0
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	201c      	movs	r0, #28
 8002c2a:	f000 fa7f 	bl	800312c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c2e:	4a09      	ldr	r2, [pc, #36]	; (8002c54 <HAL_InitTick+0xec>)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6013      	str	r3, [r2, #0]
 8002c34:	e002      	b.n	8002c3c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002c3c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3738      	adds	r7, #56	; 0x38
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	431bde83 	.word	0x431bde83
 8002c50:	200004a0 	.word	0x200004a0
 8002c54:	20000080 	.word	0x20000080

08002c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c5c:	e7fe      	b.n	8002c5c <NMI_Handler+0x4>

08002c5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c62:	e7fe      	b.n	8002c62 <HardFault_Handler+0x4>

08002c64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c68:	e7fe      	b.n	8002c68 <MemManage_Handler+0x4>

08002c6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c6e:	e7fe      	b.n	8002c6e <BusFault_Handler+0x4>

08002c70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c74:	e7fe      	b.n	8002c74 <UsageFault_Handler+0x4>

08002c76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c76:	b480      	push	{r7}
 8002c78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c7a:	bf00      	nop
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c88:	bf00      	nop
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr

08002c92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c92:	b480      	push	{r7}
 8002c94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c96:	bf00      	nop
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ca4:	bf00      	nop
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
	...

08002cb0 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8002cb4:	4802      	ldr	r0, [pc, #8]	; (8002cc0 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8002cb6:	f003 fa01 	bl	80060bc <HAL_TIM_IRQHandler>
//  LCD_updateVals(&hspi1,buf);
//  HAL_UART_Transmit(&huart1,buf,sizeof(buf),10);
//  refresh = 1;
//  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_1);
  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002cba:	bf00      	nop
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	20000378 	.word	0x20000378

08002cc4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002cc8:	4802      	ldr	r0, [pc, #8]	; (8002cd4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002cca:	f003 f9f7 	bl	80060bc <HAL_TIM_IRQHandler>
////  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_3);
////	  LCD_warnings(&hspi1, (buf[2] << 4) | buf[3],volt_percent,&Twarning,&Vwarning);
//  LCD_warnings(&hspi1,buf[1],volt_percent,&warning);
//  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_3);
  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002cce:	bf00      	nop
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	200003c4 	.word	0x200003c4

08002cd8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002cdc:	4802      	ldr	r0, [pc, #8]	; (8002ce8 <TIM2_IRQHandler+0x10>)
 8002cde:	f003 f9ed 	bl	80060bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002ce2:	bf00      	nop
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	200004a0 	.word	0x200004a0

08002cec <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8002cf0:	4802      	ldr	r0, [pc, #8]	; (8002cfc <SPI3_IRQHandler+0x10>)
 8002cf2:	f002 fc93 	bl	800561c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */
//  HAL_SPI_Receive_IT(&hspi3,buf,sizeof(buf),10);
//  HAL_UART_Transmit(&huart1,buf,sizeof(buf),10);
//  refresh = 1;
  /* USER CODE END SPI3_IRQn 1 */
}
 8002cf6:	bf00      	nop
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	20000314 	.word	0x20000314

08002d00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  return 1;
 8002d04:	2301      	movs	r3, #1
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <_kill>:

int _kill(int pid, int sig)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d1a:	f005 f899 	bl	8007e50 <__errno>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2216      	movs	r2, #22
 8002d22:	601a      	str	r2, [r3, #0]
  return -1;
 8002d24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <_exit>:

void _exit (int status)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d38:	f04f 31ff 	mov.w	r1, #4294967295
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f7ff ffe7 	bl	8002d10 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d42:	e7fe      	b.n	8002d42 <_exit+0x12>

08002d44 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d50:	2300      	movs	r3, #0
 8002d52:	617b      	str	r3, [r7, #20]
 8002d54:	e00a      	b.n	8002d6c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d56:	f3af 8000 	nop.w
 8002d5a:	4601      	mov	r1, r0
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	1c5a      	adds	r2, r3, #1
 8002d60:	60ba      	str	r2, [r7, #8]
 8002d62:	b2ca      	uxtb	r2, r1
 8002d64:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	3301      	adds	r3, #1
 8002d6a:	617b      	str	r3, [r7, #20]
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	dbf0      	blt.n	8002d56 <_read+0x12>
  }

  return len;
 8002d74:	687b      	ldr	r3, [r7, #4]
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3718      	adds	r7, #24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b086      	sub	sp, #24
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	60f8      	str	r0, [r7, #12]
 8002d86:	60b9      	str	r1, [r7, #8]
 8002d88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	617b      	str	r3, [r7, #20]
 8002d8e:	e009      	b.n	8002da4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	1c5a      	adds	r2, r3, #1
 8002d94:	60ba      	str	r2, [r7, #8]
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	3301      	adds	r3, #1
 8002da2:	617b      	str	r3, [r7, #20]
 8002da4:	697a      	ldr	r2, [r7, #20]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	dbf1      	blt.n	8002d90 <_write+0x12>
  }
  return len;
 8002dac:	687b      	ldr	r3, [r7, #4]
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3718      	adds	r7, #24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <_close>:

int _close(int file)
{
 8002db6:	b480      	push	{r7}
 8002db8:	b083      	sub	sp, #12
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002dbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b083      	sub	sp, #12
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
 8002dd6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dde:	605a      	str	r2, [r3, #4]
  return 0;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <_isatty>:

int _isatty(int file)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b083      	sub	sp, #12
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002df6:	2301      	movs	r3, #1
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3714      	adds	r7, #20
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
	...

08002e20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e28:	4a14      	ldr	r2, [pc, #80]	; (8002e7c <_sbrk+0x5c>)
 8002e2a:	4b15      	ldr	r3, [pc, #84]	; (8002e80 <_sbrk+0x60>)
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e34:	4b13      	ldr	r3, [pc, #76]	; (8002e84 <_sbrk+0x64>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d102      	bne.n	8002e42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e3c:	4b11      	ldr	r3, [pc, #68]	; (8002e84 <_sbrk+0x64>)
 8002e3e:	4a12      	ldr	r2, [pc, #72]	; (8002e88 <_sbrk+0x68>)
 8002e40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e42:	4b10      	ldr	r3, [pc, #64]	; (8002e84 <_sbrk+0x64>)
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4413      	add	r3, r2
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d207      	bcs.n	8002e60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e50:	f004 fffe 	bl	8007e50 <__errno>
 8002e54:	4603      	mov	r3, r0
 8002e56:	220c      	movs	r2, #12
 8002e58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e5e:	e009      	b.n	8002e74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e60:	4b08      	ldr	r3, [pc, #32]	; (8002e84 <_sbrk+0x64>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e66:	4b07      	ldr	r3, [pc, #28]	; (8002e84 <_sbrk+0x64>)
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	4a05      	ldr	r2, [pc, #20]	; (8002e84 <_sbrk+0x64>)
 8002e70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e72:	68fb      	ldr	r3, [r7, #12]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3718      	adds	r7, #24
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	20010000 	.word	0x20010000
 8002e80:	00000400 	.word	0x00000400
 8002e84:	200004f8 	.word	0x200004f8
 8002e88:	20000650 	.word	0x20000650

08002e8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002e90:	4b06      	ldr	r3, [pc, #24]	; (8002eac <SystemInit+0x20>)
 8002e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e96:	4a05      	ldr	r2, [pc, #20]	; (8002eac <SystemInit+0x20>)
 8002e98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002ea0:	bf00      	nop
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	e000ed00 	.word	0xe000ed00

08002eb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002eb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ee8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002eb4:	f7ff ffea 	bl	8002e8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002eb8:	480c      	ldr	r0, [pc, #48]	; (8002eec <LoopForever+0x6>)
  ldr r1, =_edata
 8002eba:	490d      	ldr	r1, [pc, #52]	; (8002ef0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ebc:	4a0d      	ldr	r2, [pc, #52]	; (8002ef4 <LoopForever+0xe>)
  movs r3, #0
 8002ebe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ec0:	e002      	b.n	8002ec8 <LoopCopyDataInit>

08002ec2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ec2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ec4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ec6:	3304      	adds	r3, #4

08002ec8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ec8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002eca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ecc:	d3f9      	bcc.n	8002ec2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ece:	4a0a      	ldr	r2, [pc, #40]	; (8002ef8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ed0:	4c0a      	ldr	r4, [pc, #40]	; (8002efc <LoopForever+0x16>)
  movs r3, #0
 8002ed2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ed4:	e001      	b.n	8002eda <LoopFillZerobss>

08002ed6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ed6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ed8:	3204      	adds	r2, #4

08002eda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002edc:	d3fb      	bcc.n	8002ed6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ede:	f004 ffbd 	bl	8007e5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002ee2:	f7ff f9e1 	bl	80022a8 <main>

08002ee6 <LoopForever>:

LoopForever:
    b LoopForever
 8002ee6:	e7fe      	b.n	8002ee6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002ee8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002eec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ef0:	20000250 	.word	0x20000250
  ldr r2, =_sidata
 8002ef4:	0800a8fc 	.word	0x0800a8fc
  ldr r2, =_sbss
 8002ef8:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 8002efc:	2000064c 	.word	0x2000064c

08002f00 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f00:	e7fe      	b.n	8002f00 <ADC1_IRQHandler>

08002f02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b082      	sub	sp, #8
 8002f06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f0c:	2003      	movs	r0, #3
 8002f0e:	f000 f902 	bl	8003116 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f12:	2007      	movs	r0, #7
 8002f14:	f7ff fe28 	bl	8002b68 <HAL_InitTick>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d002      	beq.n	8002f24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	71fb      	strb	r3, [r7, #7]
 8002f22:	e001      	b.n	8002f28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f24:	f7ff fcb6 	bl	8002894 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f28:	79fb      	ldrb	r3, [r7, #7]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
	...

08002f34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f38:	4b06      	ldr	r3, [pc, #24]	; (8002f54 <HAL_IncTick+0x20>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	4b06      	ldr	r3, [pc, #24]	; (8002f58 <HAL_IncTick+0x24>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4413      	add	r3, r2
 8002f44:	4a04      	ldr	r2, [pc, #16]	; (8002f58 <HAL_IncTick+0x24>)
 8002f46:	6013      	str	r3, [r2, #0]
}
 8002f48:	bf00      	nop
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	20000084 	.word	0x20000084
 8002f58:	200004fc 	.word	0x200004fc

08002f5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f60:	4b03      	ldr	r3, [pc, #12]	; (8002f70 <HAL_GetTick+0x14>)
 8002f62:	681b      	ldr	r3, [r3, #0]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	200004fc 	.word	0x200004fc

08002f74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f7c:	f7ff ffee 	bl	8002f5c <HAL_GetTick>
 8002f80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f8c:	d005      	beq.n	8002f9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002f8e:	4b0a      	ldr	r3, [pc, #40]	; (8002fb8 <HAL_Delay+0x44>)
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	461a      	mov	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	4413      	add	r3, r2
 8002f98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f9a:	bf00      	nop
 8002f9c:	f7ff ffde 	bl	8002f5c <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d8f7      	bhi.n	8002f9c <HAL_Delay+0x28>
  {
  }
}
 8002fac:	bf00      	nop
 8002fae:	bf00      	nop
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	20000084 	.word	0x20000084

08002fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f003 0307 	and.w	r3, r3, #7
 8002fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fcc:	4b0c      	ldr	r3, [pc, #48]	; (8003000 <__NVIC_SetPriorityGrouping+0x44>)
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fd2:	68ba      	ldr	r2, [r7, #8]
 8002fd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fd8:	4013      	ands	r3, r2
 8002fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fe4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fee:	4a04      	ldr	r2, [pc, #16]	; (8003000 <__NVIC_SetPriorityGrouping+0x44>)
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	60d3      	str	r3, [r2, #12]
}
 8002ff4:	bf00      	nop
 8002ff6:	3714      	adds	r7, #20
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr
 8003000:	e000ed00 	.word	0xe000ed00

08003004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003008:	4b04      	ldr	r3, [pc, #16]	; (800301c <__NVIC_GetPriorityGrouping+0x18>)
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	0a1b      	lsrs	r3, r3, #8
 800300e:	f003 0307 	and.w	r3, r3, #7
}
 8003012:	4618      	mov	r0, r3
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr
 800301c:	e000ed00 	.word	0xe000ed00

08003020 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	4603      	mov	r3, r0
 8003028:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800302a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302e:	2b00      	cmp	r3, #0
 8003030:	db0b      	blt.n	800304a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003032:	79fb      	ldrb	r3, [r7, #7]
 8003034:	f003 021f 	and.w	r2, r3, #31
 8003038:	4907      	ldr	r1, [pc, #28]	; (8003058 <__NVIC_EnableIRQ+0x38>)
 800303a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303e:	095b      	lsrs	r3, r3, #5
 8003040:	2001      	movs	r0, #1
 8003042:	fa00 f202 	lsl.w	r2, r0, r2
 8003046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800304a:	bf00      	nop
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	e000e100 	.word	0xe000e100

0800305c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	4603      	mov	r3, r0
 8003064:	6039      	str	r1, [r7, #0]
 8003066:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306c:	2b00      	cmp	r3, #0
 800306e:	db0a      	blt.n	8003086 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	b2da      	uxtb	r2, r3
 8003074:	490c      	ldr	r1, [pc, #48]	; (80030a8 <__NVIC_SetPriority+0x4c>)
 8003076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800307a:	0112      	lsls	r2, r2, #4
 800307c:	b2d2      	uxtb	r2, r2
 800307e:	440b      	add	r3, r1
 8003080:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003084:	e00a      	b.n	800309c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	b2da      	uxtb	r2, r3
 800308a:	4908      	ldr	r1, [pc, #32]	; (80030ac <__NVIC_SetPriority+0x50>)
 800308c:	79fb      	ldrb	r3, [r7, #7]
 800308e:	f003 030f 	and.w	r3, r3, #15
 8003092:	3b04      	subs	r3, #4
 8003094:	0112      	lsls	r2, r2, #4
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	440b      	add	r3, r1
 800309a:	761a      	strb	r2, [r3, #24]
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	e000e100 	.word	0xe000e100
 80030ac:	e000ed00 	.word	0xe000ed00

080030b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b089      	sub	sp, #36	; 0x24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f003 0307 	and.w	r3, r3, #7
 80030c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	f1c3 0307 	rsb	r3, r3, #7
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	bf28      	it	cs
 80030ce:	2304      	movcs	r3, #4
 80030d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	3304      	adds	r3, #4
 80030d6:	2b06      	cmp	r3, #6
 80030d8:	d902      	bls.n	80030e0 <NVIC_EncodePriority+0x30>
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	3b03      	subs	r3, #3
 80030de:	e000      	b.n	80030e2 <NVIC_EncodePriority+0x32>
 80030e0:	2300      	movs	r3, #0
 80030e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030e4:	f04f 32ff 	mov.w	r2, #4294967295
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	fa02 f303 	lsl.w	r3, r2, r3
 80030ee:	43da      	mvns	r2, r3
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	401a      	ands	r2, r3
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030f8:	f04f 31ff 	mov.w	r1, #4294967295
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003102:	43d9      	mvns	r1, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003108:	4313      	orrs	r3, r2
         );
}
 800310a:	4618      	mov	r0, r3
 800310c:	3724      	adds	r7, #36	; 0x24
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr

08003116 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b082      	sub	sp, #8
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f7ff ff4c 	bl	8002fbc <__NVIC_SetPriorityGrouping>
}
 8003124:	bf00      	nop
 8003126:	3708      	adds	r7, #8
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	4603      	mov	r3, r0
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
 8003138:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800313a:	2300      	movs	r3, #0
 800313c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800313e:	f7ff ff61 	bl	8003004 <__NVIC_GetPriorityGrouping>
 8003142:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	68b9      	ldr	r1, [r7, #8]
 8003148:	6978      	ldr	r0, [r7, #20]
 800314a:	f7ff ffb1 	bl	80030b0 <NVIC_EncodePriority>
 800314e:	4602      	mov	r2, r0
 8003150:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003154:	4611      	mov	r1, r2
 8003156:	4618      	mov	r0, r3
 8003158:	f7ff ff80 	bl	800305c <__NVIC_SetPriority>
}
 800315c:	bf00      	nop
 800315e:	3718      	adds	r7, #24
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	4603      	mov	r3, r0
 800316c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800316e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff ff54 	bl	8003020 <__NVIC_EnableIRQ>
}
 8003178:	bf00      	nop
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003188:	2300      	movs	r3, #0
 800318a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d005      	beq.n	80031a4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2204      	movs	r2, #4
 800319c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	73fb      	strb	r3, [r7, #15]
 80031a2:	e029      	b.n	80031f8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 020e 	bic.w	r2, r2, #14
 80031b2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f022 0201 	bic.w	r2, r2, #1
 80031c2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c8:	f003 021c 	and.w	r2, r3, #28
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d0:	2101      	movs	r1, #1
 80031d2:	fa01 f202 	lsl.w	r2, r1, r2
 80031d6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d003      	beq.n	80031f8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	4798      	blx	r3
    }
  }
  return status;
 80031f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
	...

08003204 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003204:	b480      	push	{r7}
 8003206:	b087      	sub	sp, #28
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800320e:	2300      	movs	r3, #0
 8003210:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003212:	e148      	b.n	80034a6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	2101      	movs	r1, #1
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	fa01 f303 	lsl.w	r3, r1, r3
 8003220:	4013      	ands	r3, r2
 8003222:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2b00      	cmp	r3, #0
 8003228:	f000 813a 	beq.w	80034a0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f003 0303 	and.w	r3, r3, #3
 8003234:	2b01      	cmp	r3, #1
 8003236:	d005      	beq.n	8003244 <HAL_GPIO_Init+0x40>
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f003 0303 	and.w	r3, r3, #3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d130      	bne.n	80032a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	2203      	movs	r2, #3
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	43db      	mvns	r3, r3
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	4013      	ands	r3, r2
 800325a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	68da      	ldr	r2, [r3, #12]
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	4313      	orrs	r3, r2
 800326c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800327a:	2201      	movs	r2, #1
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	fa02 f303 	lsl.w	r3, r2, r3
 8003282:	43db      	mvns	r3, r3
 8003284:	693a      	ldr	r2, [r7, #16]
 8003286:	4013      	ands	r3, r2
 8003288:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	091b      	lsrs	r3, r3, #4
 8003290:	f003 0201 	and.w	r2, r3, #1
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	4313      	orrs	r3, r2
 800329e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f003 0303 	and.w	r3, r3, #3
 80032ae:	2b03      	cmp	r3, #3
 80032b0:	d017      	beq.n	80032e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	2203      	movs	r2, #3
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	43db      	mvns	r3, r3
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	4013      	ands	r3, r2
 80032c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	689a      	ldr	r2, [r3, #8]
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	fa02 f303 	lsl.w	r3, r2, r3
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	4313      	orrs	r3, r2
 80032da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f003 0303 	and.w	r3, r3, #3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d123      	bne.n	8003336 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	08da      	lsrs	r2, r3, #3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	3208      	adds	r2, #8
 80032f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	f003 0307 	and.w	r3, r3, #7
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	220f      	movs	r2, #15
 8003306:	fa02 f303 	lsl.w	r3, r2, r3
 800330a:	43db      	mvns	r3, r3
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	4013      	ands	r3, r2
 8003310:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	691a      	ldr	r2, [r3, #16]
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	fa02 f303 	lsl.w	r3, r2, r3
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	4313      	orrs	r3, r2
 8003326:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	08da      	lsrs	r2, r3, #3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	3208      	adds	r2, #8
 8003330:	6939      	ldr	r1, [r7, #16]
 8003332:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	2203      	movs	r2, #3
 8003342:	fa02 f303 	lsl.w	r3, r2, r3
 8003346:	43db      	mvns	r3, r3
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	4013      	ands	r3, r2
 800334c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f003 0203 	and.w	r2, r3, #3
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	4313      	orrs	r3, r2
 8003362:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 8094 	beq.w	80034a0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003378:	4b52      	ldr	r3, [pc, #328]	; (80034c4 <HAL_GPIO_Init+0x2c0>)
 800337a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800337c:	4a51      	ldr	r2, [pc, #324]	; (80034c4 <HAL_GPIO_Init+0x2c0>)
 800337e:	f043 0301 	orr.w	r3, r3, #1
 8003382:	6613      	str	r3, [r2, #96]	; 0x60
 8003384:	4b4f      	ldr	r3, [pc, #316]	; (80034c4 <HAL_GPIO_Init+0x2c0>)
 8003386:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	60bb      	str	r3, [r7, #8]
 800338e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003390:	4a4d      	ldr	r2, [pc, #308]	; (80034c8 <HAL_GPIO_Init+0x2c4>)
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	089b      	lsrs	r3, r3, #2
 8003396:	3302      	adds	r3, #2
 8003398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800339c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	f003 0303 	and.w	r3, r3, #3
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	220f      	movs	r2, #15
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	43db      	mvns	r3, r3
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	4013      	ands	r3, r2
 80033b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80033ba:	d00d      	beq.n	80033d8 <HAL_GPIO_Init+0x1d4>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a43      	ldr	r2, [pc, #268]	; (80034cc <HAL_GPIO_Init+0x2c8>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d007      	beq.n	80033d4 <HAL_GPIO_Init+0x1d0>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a42      	ldr	r2, [pc, #264]	; (80034d0 <HAL_GPIO_Init+0x2cc>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d101      	bne.n	80033d0 <HAL_GPIO_Init+0x1cc>
 80033cc:	2302      	movs	r3, #2
 80033ce:	e004      	b.n	80033da <HAL_GPIO_Init+0x1d6>
 80033d0:	2307      	movs	r3, #7
 80033d2:	e002      	b.n	80033da <HAL_GPIO_Init+0x1d6>
 80033d4:	2301      	movs	r3, #1
 80033d6:	e000      	b.n	80033da <HAL_GPIO_Init+0x1d6>
 80033d8:	2300      	movs	r3, #0
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	f002 0203 	and.w	r2, r2, #3
 80033e0:	0092      	lsls	r2, r2, #2
 80033e2:	4093      	lsls	r3, r2
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80033ea:	4937      	ldr	r1, [pc, #220]	; (80034c8 <HAL_GPIO_Init+0x2c4>)
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	089b      	lsrs	r3, r3, #2
 80033f0:	3302      	adds	r3, #2
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033f8:	4b36      	ldr	r3, [pc, #216]	; (80034d4 <HAL_GPIO_Init+0x2d0>)
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	43db      	mvns	r3, r3
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	4013      	ands	r3, r2
 8003406:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d003      	beq.n	800341c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	4313      	orrs	r3, r2
 800341a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800341c:	4a2d      	ldr	r2, [pc, #180]	; (80034d4 <HAL_GPIO_Init+0x2d0>)
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003422:	4b2c      	ldr	r3, [pc, #176]	; (80034d4 <HAL_GPIO_Init+0x2d0>)
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	43db      	mvns	r3, r3
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	4013      	ands	r3, r2
 8003430:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d003      	beq.n	8003446 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	4313      	orrs	r3, r2
 8003444:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003446:	4a23      	ldr	r2, [pc, #140]	; (80034d4 <HAL_GPIO_Init+0x2d0>)
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800344c:	4b21      	ldr	r3, [pc, #132]	; (80034d4 <HAL_GPIO_Init+0x2d0>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	43db      	mvns	r3, r3
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	4013      	ands	r3, r2
 800345a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d003      	beq.n	8003470 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	4313      	orrs	r3, r2
 800346e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003470:	4a18      	ldr	r2, [pc, #96]	; (80034d4 <HAL_GPIO_Init+0x2d0>)
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003476:	4b17      	ldr	r3, [pc, #92]	; (80034d4 <HAL_GPIO_Init+0x2d0>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	43db      	mvns	r3, r3
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	4013      	ands	r3, r2
 8003484:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d003      	beq.n	800349a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	4313      	orrs	r3, r2
 8003498:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800349a:	4a0e      	ldr	r2, [pc, #56]	; (80034d4 <HAL_GPIO_Init+0x2d0>)
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	3301      	adds	r3, #1
 80034a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	fa22 f303 	lsr.w	r3, r2, r3
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f47f aeaf 	bne.w	8003214 <HAL_GPIO_Init+0x10>
  }
}
 80034b6:	bf00      	nop
 80034b8:	bf00      	nop
 80034ba:	371c      	adds	r7, #28
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr
 80034c4:	40021000 	.word	0x40021000
 80034c8:	40010000 	.word	0x40010000
 80034cc:	48000400 	.word	0x48000400
 80034d0:	48000800 	.word	0x48000800
 80034d4:	40010400 	.word	0x40010400

080034d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	460b      	mov	r3, r1
 80034e2:	807b      	strh	r3, [r7, #2]
 80034e4:	4613      	mov	r3, r2
 80034e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034e8:	787b      	ldrb	r3, [r7, #1]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034ee:	887a      	ldrh	r2, [r7, #2]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034f4:	e002      	b.n	80034fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034f6:	887a      	ldrh	r2, [r7, #2]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800350c:	4b05      	ldr	r3, [pc, #20]	; (8003524 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a04      	ldr	r2, [pc, #16]	; (8003524 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003516:	6013      	str	r3, [r2, #0]
}
 8003518:	bf00      	nop
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	40007000 	.word	0x40007000

08003528 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800352c:	4b04      	ldr	r3, [pc, #16]	; (8003540 <HAL_PWREx_GetVoltageRange+0x18>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003534:	4618      	mov	r0, r3
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	40007000 	.word	0x40007000

08003544 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003552:	d130      	bne.n	80035b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003554:	4b23      	ldr	r3, [pc, #140]	; (80035e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800355c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003560:	d038      	beq.n	80035d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003562:	4b20      	ldr	r3, [pc, #128]	; (80035e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800356a:	4a1e      	ldr	r2, [pc, #120]	; (80035e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800356c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003570:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003572:	4b1d      	ldr	r3, [pc, #116]	; (80035e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2232      	movs	r2, #50	; 0x32
 8003578:	fb02 f303 	mul.w	r3, r2, r3
 800357c:	4a1b      	ldr	r2, [pc, #108]	; (80035ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800357e:	fba2 2303 	umull	r2, r3, r2, r3
 8003582:	0c9b      	lsrs	r3, r3, #18
 8003584:	3301      	adds	r3, #1
 8003586:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003588:	e002      	b.n	8003590 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	3b01      	subs	r3, #1
 800358e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003590:	4b14      	ldr	r3, [pc, #80]	; (80035e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003598:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800359c:	d102      	bne.n	80035a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d1f2      	bne.n	800358a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80035a4:	4b0f      	ldr	r3, [pc, #60]	; (80035e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035a6:	695b      	ldr	r3, [r3, #20]
 80035a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035b0:	d110      	bne.n	80035d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e00f      	b.n	80035d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80035b6:	4b0b      	ldr	r3, [pc, #44]	; (80035e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80035be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035c2:	d007      	beq.n	80035d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80035c4:	4b07      	ldr	r3, [pc, #28]	; (80035e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80035cc:	4a05      	ldr	r2, [pc, #20]	; (80035e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3714      	adds	r7, #20
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	40007000 	.word	0x40007000
 80035e8:	2000007c 	.word	0x2000007c
 80035ec:	431bde83 	.word	0x431bde83

080035f0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b088      	sub	sp, #32
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d102      	bne.n	8003604 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	f000 bc02 	b.w	8003e08 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003604:	4b96      	ldr	r3, [pc, #600]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f003 030c 	and.w	r3, r3, #12
 800360c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800360e:	4b94      	ldr	r3, [pc, #592]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	f003 0303 	and.w	r3, r3, #3
 8003616:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0310 	and.w	r3, r3, #16
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 80e4 	beq.w	80037ee <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d007      	beq.n	800363c <HAL_RCC_OscConfig+0x4c>
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	2b0c      	cmp	r3, #12
 8003630:	f040 808b 	bne.w	800374a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	2b01      	cmp	r3, #1
 8003638:	f040 8087 	bne.w	800374a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800363c:	4b88      	ldr	r3, [pc, #544]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0302 	and.w	r3, r3, #2
 8003644:	2b00      	cmp	r3, #0
 8003646:	d005      	beq.n	8003654 <HAL_RCC_OscConfig+0x64>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e3d9      	b.n	8003e08 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a1a      	ldr	r2, [r3, #32]
 8003658:	4b81      	ldr	r3, [pc, #516]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0308 	and.w	r3, r3, #8
 8003660:	2b00      	cmp	r3, #0
 8003662:	d004      	beq.n	800366e <HAL_RCC_OscConfig+0x7e>
 8003664:	4b7e      	ldr	r3, [pc, #504]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800366c:	e005      	b.n	800367a <HAL_RCC_OscConfig+0x8a>
 800366e:	4b7c      	ldr	r3, [pc, #496]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 8003670:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003674:	091b      	lsrs	r3, r3, #4
 8003676:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800367a:	4293      	cmp	r3, r2
 800367c:	d223      	bcs.n	80036c6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	4618      	mov	r0, r3
 8003684:	f000 fdbe 	bl	8004204 <RCC_SetFlashLatencyFromMSIRange>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e3ba      	b.n	8003e08 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003692:	4b73      	ldr	r3, [pc, #460]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a72      	ldr	r2, [pc, #456]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 8003698:	f043 0308 	orr.w	r3, r3, #8
 800369c:	6013      	str	r3, [r2, #0]
 800369e:	4b70      	ldr	r3, [pc, #448]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	496d      	ldr	r1, [pc, #436]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036b0:	4b6b      	ldr	r3, [pc, #428]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	69db      	ldr	r3, [r3, #28]
 80036bc:	021b      	lsls	r3, r3, #8
 80036be:	4968      	ldr	r1, [pc, #416]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	604b      	str	r3, [r1, #4]
 80036c4:	e025      	b.n	8003712 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036c6:	4b66      	ldr	r3, [pc, #408]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a65      	ldr	r2, [pc, #404]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 80036cc:	f043 0308 	orr.w	r3, r3, #8
 80036d0:	6013      	str	r3, [r2, #0]
 80036d2:	4b63      	ldr	r3, [pc, #396]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	4960      	ldr	r1, [pc, #384]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036e4:	4b5e      	ldr	r3, [pc, #376]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	69db      	ldr	r3, [r3, #28]
 80036f0:	021b      	lsls	r3, r3, #8
 80036f2:	495b      	ldr	r1, [pc, #364]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d109      	bne.n	8003712 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	4618      	mov	r0, r3
 8003704:	f000 fd7e 	bl	8004204 <RCC_SetFlashLatencyFromMSIRange>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d001      	beq.n	8003712 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e37a      	b.n	8003e08 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003712:	f000 fc81 	bl	8004018 <HAL_RCC_GetSysClockFreq>
 8003716:	4602      	mov	r2, r0
 8003718:	4b51      	ldr	r3, [pc, #324]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	091b      	lsrs	r3, r3, #4
 800371e:	f003 030f 	and.w	r3, r3, #15
 8003722:	4950      	ldr	r1, [pc, #320]	; (8003864 <HAL_RCC_OscConfig+0x274>)
 8003724:	5ccb      	ldrb	r3, [r1, r3]
 8003726:	f003 031f 	and.w	r3, r3, #31
 800372a:	fa22 f303 	lsr.w	r3, r2, r3
 800372e:	4a4e      	ldr	r2, [pc, #312]	; (8003868 <HAL_RCC_OscConfig+0x278>)
 8003730:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003732:	4b4e      	ldr	r3, [pc, #312]	; (800386c <HAL_RCC_OscConfig+0x27c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f7ff fa16 	bl	8002b68 <HAL_InitTick>
 800373c:	4603      	mov	r3, r0
 800373e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003740:	7bfb      	ldrb	r3, [r7, #15]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d052      	beq.n	80037ec <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003746:	7bfb      	ldrb	r3, [r7, #15]
 8003748:	e35e      	b.n	8003e08 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d032      	beq.n	80037b8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003752:	4b43      	ldr	r3, [pc, #268]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a42      	ldr	r2, [pc, #264]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 8003758:	f043 0301 	orr.w	r3, r3, #1
 800375c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800375e:	f7ff fbfd 	bl	8002f5c <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003764:	e008      	b.n	8003778 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003766:	f7ff fbf9 	bl	8002f5c <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e347      	b.n	8003e08 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003778:	4b39      	ldr	r3, [pc, #228]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0f0      	beq.n	8003766 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003784:	4b36      	ldr	r3, [pc, #216]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a35      	ldr	r2, [pc, #212]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 800378a:	f043 0308 	orr.w	r3, r3, #8
 800378e:	6013      	str	r3, [r2, #0]
 8003790:	4b33      	ldr	r3, [pc, #204]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a1b      	ldr	r3, [r3, #32]
 800379c:	4930      	ldr	r1, [pc, #192]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037a2:	4b2f      	ldr	r3, [pc, #188]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	69db      	ldr	r3, [r3, #28]
 80037ae:	021b      	lsls	r3, r3, #8
 80037b0:	492b      	ldr	r1, [pc, #172]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	604b      	str	r3, [r1, #4]
 80037b6:	e01a      	b.n	80037ee <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80037b8:	4b29      	ldr	r3, [pc, #164]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a28      	ldr	r2, [pc, #160]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 80037be:	f023 0301 	bic.w	r3, r3, #1
 80037c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80037c4:	f7ff fbca 	bl	8002f5c <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037cc:	f7ff fbc6 	bl	8002f5c <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e314      	b.n	8003e08 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80037de:	4b20      	ldr	r3, [pc, #128]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1f0      	bne.n	80037cc <HAL_RCC_OscConfig+0x1dc>
 80037ea:	e000      	b.n	80037ee <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037ec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d073      	beq.n	80038e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	2b08      	cmp	r3, #8
 80037fe:	d005      	beq.n	800380c <HAL_RCC_OscConfig+0x21c>
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	2b0c      	cmp	r3, #12
 8003804:	d10e      	bne.n	8003824 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	2b03      	cmp	r3, #3
 800380a:	d10b      	bne.n	8003824 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800380c:	4b14      	ldr	r3, [pc, #80]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d063      	beq.n	80038e0 <HAL_RCC_OscConfig+0x2f0>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d15f      	bne.n	80038e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e2f1      	b.n	8003e08 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800382c:	d106      	bne.n	800383c <HAL_RCC_OscConfig+0x24c>
 800382e:	4b0c      	ldr	r3, [pc, #48]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a0b      	ldr	r2, [pc, #44]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 8003834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003838:	6013      	str	r3, [r2, #0]
 800383a:	e025      	b.n	8003888 <HAL_RCC_OscConfig+0x298>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003844:	d114      	bne.n	8003870 <HAL_RCC_OscConfig+0x280>
 8003846:	4b06      	ldr	r3, [pc, #24]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a05      	ldr	r2, [pc, #20]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 800384c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003850:	6013      	str	r3, [r2, #0]
 8003852:	4b03      	ldr	r3, [pc, #12]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a02      	ldr	r2, [pc, #8]	; (8003860 <HAL_RCC_OscConfig+0x270>)
 8003858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	e013      	b.n	8003888 <HAL_RCC_OscConfig+0x298>
 8003860:	40021000 	.word	0x40021000
 8003864:	0800a510 	.word	0x0800a510
 8003868:	2000007c 	.word	0x2000007c
 800386c:	20000080 	.word	0x20000080
 8003870:	4ba0      	ldr	r3, [pc, #640]	; (8003af4 <HAL_RCC_OscConfig+0x504>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a9f      	ldr	r2, [pc, #636]	; (8003af4 <HAL_RCC_OscConfig+0x504>)
 8003876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800387a:	6013      	str	r3, [r2, #0]
 800387c:	4b9d      	ldr	r3, [pc, #628]	; (8003af4 <HAL_RCC_OscConfig+0x504>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a9c      	ldr	r2, [pc, #624]	; (8003af4 <HAL_RCC_OscConfig+0x504>)
 8003882:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003886:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d013      	beq.n	80038b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003890:	f7ff fb64 	bl	8002f5c <HAL_GetTick>
 8003894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003896:	e008      	b.n	80038aa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003898:	f7ff fb60 	bl	8002f5c <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b64      	cmp	r3, #100	; 0x64
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e2ae      	b.n	8003e08 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038aa:	4b92      	ldr	r3, [pc, #584]	; (8003af4 <HAL_RCC_OscConfig+0x504>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d0f0      	beq.n	8003898 <HAL_RCC_OscConfig+0x2a8>
 80038b6:	e014      	b.n	80038e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b8:	f7ff fb50 	bl	8002f5c <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038be:	e008      	b.n	80038d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038c0:	f7ff fb4c 	bl	8002f5c <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b64      	cmp	r3, #100	; 0x64
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e29a      	b.n	8003e08 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038d2:	4b88      	ldr	r3, [pc, #544]	; (8003af4 <HAL_RCC_OscConfig+0x504>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1f0      	bne.n	80038c0 <HAL_RCC_OscConfig+0x2d0>
 80038de:	e000      	b.n	80038e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d060      	beq.n	80039b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	2b04      	cmp	r3, #4
 80038f2:	d005      	beq.n	8003900 <HAL_RCC_OscConfig+0x310>
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	2b0c      	cmp	r3, #12
 80038f8:	d119      	bne.n	800392e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d116      	bne.n	800392e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003900:	4b7c      	ldr	r3, [pc, #496]	; (8003af4 <HAL_RCC_OscConfig+0x504>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003908:	2b00      	cmp	r3, #0
 800390a:	d005      	beq.n	8003918 <HAL_RCC_OscConfig+0x328>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d101      	bne.n	8003918 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e277      	b.n	8003e08 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003918:	4b76      	ldr	r3, [pc, #472]	; (8003af4 <HAL_RCC_OscConfig+0x504>)
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	061b      	lsls	r3, r3, #24
 8003926:	4973      	ldr	r1, [pc, #460]	; (8003af4 <HAL_RCC_OscConfig+0x504>)
 8003928:	4313      	orrs	r3, r2
 800392a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800392c:	e040      	b.n	80039b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d023      	beq.n	800397e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003936:	4b6f      	ldr	r3, [pc, #444]	; (8003af4 <HAL_RCC_OscConfig+0x504>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a6e      	ldr	r2, [pc, #440]	; (8003af4 <HAL_RCC_OscConfig+0x504>)
 800393c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003940:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003942:	f7ff fb0b 	bl	8002f5c <HAL_GetTick>
 8003946:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003948:	e008      	b.n	800395c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800394a:	f7ff fb07 	bl	8002f5c <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d901      	bls.n	800395c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e255      	b.n	8003e08 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800395c:	4b65      	ldr	r3, [pc, #404]	; (8003af4 <HAL_RCC_OscConfig+0x504>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003964:	2b00      	cmp	r3, #0
 8003966:	d0f0      	beq.n	800394a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003968:	4b62      	ldr	r3, [pc, #392]	; (8003af4 <HAL_RCC_OscConfig+0x504>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	061b      	lsls	r3, r3, #24
 8003976:	495f      	ldr	r1, [pc, #380]	; (8003af4 <HAL_RCC_OscConfig+0x504>)
 8003978:	4313      	orrs	r3, r2
 800397a:	604b      	str	r3, [r1, #4]
 800397c:	e018      	b.n	80039b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800397e:	4b5d      	ldr	r3, [pc, #372]	; (8003af4 <HAL_RCC_OscConfig+0x504>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a5c      	ldr	r2, [pc, #368]	; (8003af4 <HAL_RCC_OscConfig+0x504>)
 8003984:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003988:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800398a:	f7ff fae7 	bl	8002f5c <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003990:	e008      	b.n	80039a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003992:	f7ff fae3 	bl	8002f5c <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e231      	b.n	8003e08 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039a4:	4b53      	ldr	r3, [pc, #332]	; (8003af4 <HAL_RCC_OscConfig+0x504>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1f0      	bne.n	8003992 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0308 	and.w	r3, r3, #8
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d03c      	beq.n	8003a36 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	695b      	ldr	r3, [r3, #20]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d01c      	beq.n	80039fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039c4:	4b4b      	ldr	r3, [pc, #300]	; (8003af4 <HAL_RCC_OscConfig+0x504>)
 80039c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039ca:	4a4a      	ldr	r2, [pc, #296]	; (8003af4 <HAL_RCC_OscConfig+0x504>)
 80039cc:	f043 0301 	orr.w	r3, r3, #1
 80039d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d4:	f7ff fac2 	bl	8002f5c <HAL_GetTick>
 80039d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039da:	e008      	b.n	80039ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039dc:	f7ff fabe 	bl	8002f5c <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e20c      	b.n	8003e08 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039ee:	4b41      	ldr	r3, [pc, #260]	; (8003af4 <HAL_RCC_OscConfig+0x504>)
 80039f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039f4:	f003 0302 	and.w	r3, r3, #2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d0ef      	beq.n	80039dc <HAL_RCC_OscConfig+0x3ec>
 80039fc:	e01b      	b.n	8003a36 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039fe:	4b3d      	ldr	r3, [pc, #244]	; (8003af4 <HAL_RCC_OscConfig+0x504>)
 8003a00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a04:	4a3b      	ldr	r2, [pc, #236]	; (8003af4 <HAL_RCC_OscConfig+0x504>)
 8003a06:	f023 0301 	bic.w	r3, r3, #1
 8003a0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a0e:	f7ff faa5 	bl	8002f5c <HAL_GetTick>
 8003a12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a14:	e008      	b.n	8003a28 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a16:	f7ff faa1 	bl	8002f5c <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d901      	bls.n	8003a28 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e1ef      	b.n	8003e08 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a28:	4b32      	ldr	r3, [pc, #200]	; (8003af4 <HAL_RCC_OscConfig+0x504>)
 8003a2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1ef      	bne.n	8003a16 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0304 	and.w	r3, r3, #4
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f000 80a6 	beq.w	8003b90 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a44:	2300      	movs	r3, #0
 8003a46:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003a48:	4b2a      	ldr	r3, [pc, #168]	; (8003af4 <HAL_RCC_OscConfig+0x504>)
 8003a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d10d      	bne.n	8003a70 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a54:	4b27      	ldr	r3, [pc, #156]	; (8003af4 <HAL_RCC_OscConfig+0x504>)
 8003a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a58:	4a26      	ldr	r2, [pc, #152]	; (8003af4 <HAL_RCC_OscConfig+0x504>)
 8003a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a5e:	6593      	str	r3, [r2, #88]	; 0x58
 8003a60:	4b24      	ldr	r3, [pc, #144]	; (8003af4 <HAL_RCC_OscConfig+0x504>)
 8003a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a68:	60bb      	str	r3, [r7, #8]
 8003a6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a70:	4b21      	ldr	r3, [pc, #132]	; (8003af8 <HAL_RCC_OscConfig+0x508>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d118      	bne.n	8003aae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a7c:	4b1e      	ldr	r3, [pc, #120]	; (8003af8 <HAL_RCC_OscConfig+0x508>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a1d      	ldr	r2, [pc, #116]	; (8003af8 <HAL_RCC_OscConfig+0x508>)
 8003a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a88:	f7ff fa68 	bl	8002f5c <HAL_GetTick>
 8003a8c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a8e:	e008      	b.n	8003aa2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a90:	f7ff fa64 	bl	8002f5c <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e1b2      	b.n	8003e08 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003aa2:	4b15      	ldr	r3, [pc, #84]	; (8003af8 <HAL_RCC_OscConfig+0x508>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d0f0      	beq.n	8003a90 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d108      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x4d8>
 8003ab6:	4b0f      	ldr	r3, [pc, #60]	; (8003af4 <HAL_RCC_OscConfig+0x504>)
 8003ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003abc:	4a0d      	ldr	r2, [pc, #52]	; (8003af4 <HAL_RCC_OscConfig+0x504>)
 8003abe:	f043 0301 	orr.w	r3, r3, #1
 8003ac2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ac6:	e029      	b.n	8003b1c <HAL_RCC_OscConfig+0x52c>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	2b05      	cmp	r3, #5
 8003ace:	d115      	bne.n	8003afc <HAL_RCC_OscConfig+0x50c>
 8003ad0:	4b08      	ldr	r3, [pc, #32]	; (8003af4 <HAL_RCC_OscConfig+0x504>)
 8003ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad6:	4a07      	ldr	r2, [pc, #28]	; (8003af4 <HAL_RCC_OscConfig+0x504>)
 8003ad8:	f043 0304 	orr.w	r3, r3, #4
 8003adc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ae0:	4b04      	ldr	r3, [pc, #16]	; (8003af4 <HAL_RCC_OscConfig+0x504>)
 8003ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae6:	4a03      	ldr	r2, [pc, #12]	; (8003af4 <HAL_RCC_OscConfig+0x504>)
 8003ae8:	f043 0301 	orr.w	r3, r3, #1
 8003aec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003af0:	e014      	b.n	8003b1c <HAL_RCC_OscConfig+0x52c>
 8003af2:	bf00      	nop
 8003af4:	40021000 	.word	0x40021000
 8003af8:	40007000 	.word	0x40007000
 8003afc:	4b9a      	ldr	r3, [pc, #616]	; (8003d68 <HAL_RCC_OscConfig+0x778>)
 8003afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b02:	4a99      	ldr	r2, [pc, #612]	; (8003d68 <HAL_RCC_OscConfig+0x778>)
 8003b04:	f023 0301 	bic.w	r3, r3, #1
 8003b08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b0c:	4b96      	ldr	r3, [pc, #600]	; (8003d68 <HAL_RCC_OscConfig+0x778>)
 8003b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b12:	4a95      	ldr	r2, [pc, #596]	; (8003d68 <HAL_RCC_OscConfig+0x778>)
 8003b14:	f023 0304 	bic.w	r3, r3, #4
 8003b18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d016      	beq.n	8003b52 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b24:	f7ff fa1a 	bl	8002f5c <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b2a:	e00a      	b.n	8003b42 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b2c:	f7ff fa16 	bl	8002f5c <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e162      	b.n	8003e08 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b42:	4b89      	ldr	r3, [pc, #548]	; (8003d68 <HAL_RCC_OscConfig+0x778>)
 8003b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d0ed      	beq.n	8003b2c <HAL_RCC_OscConfig+0x53c>
 8003b50:	e015      	b.n	8003b7e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b52:	f7ff fa03 	bl	8002f5c <HAL_GetTick>
 8003b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b58:	e00a      	b.n	8003b70 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b5a:	f7ff f9ff 	bl	8002f5c <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d901      	bls.n	8003b70 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e14b      	b.n	8003e08 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b70:	4b7d      	ldr	r3, [pc, #500]	; (8003d68 <HAL_RCC_OscConfig+0x778>)
 8003b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1ed      	bne.n	8003b5a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b7e:	7ffb      	ldrb	r3, [r7, #31]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d105      	bne.n	8003b90 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b84:	4b78      	ldr	r3, [pc, #480]	; (8003d68 <HAL_RCC_OscConfig+0x778>)
 8003b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b88:	4a77      	ldr	r2, [pc, #476]	; (8003d68 <HAL_RCC_OscConfig+0x778>)
 8003b8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b8e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0320 	and.w	r3, r3, #32
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d03c      	beq.n	8003c16 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d01c      	beq.n	8003bde <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ba4:	4b70      	ldr	r3, [pc, #448]	; (8003d68 <HAL_RCC_OscConfig+0x778>)
 8003ba6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003baa:	4a6f      	ldr	r2, [pc, #444]	; (8003d68 <HAL_RCC_OscConfig+0x778>)
 8003bac:	f043 0301 	orr.w	r3, r3, #1
 8003bb0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bb4:	f7ff f9d2 	bl	8002f5c <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bbc:	f7ff f9ce 	bl	8002f5c <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e11c      	b.n	8003e08 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003bce:	4b66      	ldr	r3, [pc, #408]	; (8003d68 <HAL_RCC_OscConfig+0x778>)
 8003bd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d0ef      	beq.n	8003bbc <HAL_RCC_OscConfig+0x5cc>
 8003bdc:	e01b      	b.n	8003c16 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003bde:	4b62      	ldr	r3, [pc, #392]	; (8003d68 <HAL_RCC_OscConfig+0x778>)
 8003be0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003be4:	4a60      	ldr	r2, [pc, #384]	; (8003d68 <HAL_RCC_OscConfig+0x778>)
 8003be6:	f023 0301 	bic.w	r3, r3, #1
 8003bea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bee:	f7ff f9b5 	bl	8002f5c <HAL_GetTick>
 8003bf2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003bf4:	e008      	b.n	8003c08 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bf6:	f7ff f9b1 	bl	8002f5c <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d901      	bls.n	8003c08 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e0ff      	b.n	8003e08 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c08:	4b57      	ldr	r3, [pc, #348]	; (8003d68 <HAL_RCC_OscConfig+0x778>)
 8003c0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1ef      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f000 80f3 	beq.w	8003e06 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	f040 80c9 	bne.w	8003dbc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003c2a:	4b4f      	ldr	r3, [pc, #316]	; (8003d68 <HAL_RCC_OscConfig+0x778>)
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	f003 0203 	and.w	r2, r3, #3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d12c      	bne.n	8003c98 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d123      	bne.n	8003c98 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c5a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d11b      	bne.n	8003c98 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d113      	bne.n	8003c98 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c7a:	085b      	lsrs	r3, r3, #1
 8003c7c:	3b01      	subs	r3, #1
 8003c7e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d109      	bne.n	8003c98 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	085b      	lsrs	r3, r3, #1
 8003c90:	3b01      	subs	r3, #1
 8003c92:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d06b      	beq.n	8003d70 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	2b0c      	cmp	r3, #12
 8003c9c:	d062      	beq.n	8003d64 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003c9e:	4b32      	ldr	r3, [pc, #200]	; (8003d68 <HAL_RCC_OscConfig+0x778>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e0ac      	b.n	8003e08 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003cae:	4b2e      	ldr	r3, [pc, #184]	; (8003d68 <HAL_RCC_OscConfig+0x778>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a2d      	ldr	r2, [pc, #180]	; (8003d68 <HAL_RCC_OscConfig+0x778>)
 8003cb4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cb8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003cba:	f7ff f94f 	bl	8002f5c <HAL_GetTick>
 8003cbe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cc0:	e008      	b.n	8003cd4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cc2:	f7ff f94b 	bl	8002f5c <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d901      	bls.n	8003cd4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e099      	b.n	8003e08 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cd4:	4b24      	ldr	r3, [pc, #144]	; (8003d68 <HAL_RCC_OscConfig+0x778>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1f0      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ce0:	4b21      	ldr	r3, [pc, #132]	; (8003d68 <HAL_RCC_OscConfig+0x778>)
 8003ce2:	68da      	ldr	r2, [r3, #12]
 8003ce4:	4b21      	ldr	r3, [pc, #132]	; (8003d6c <HAL_RCC_OscConfig+0x77c>)
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003cf0:	3a01      	subs	r2, #1
 8003cf2:	0112      	lsls	r2, r2, #4
 8003cf4:	4311      	orrs	r1, r2
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003cfa:	0212      	lsls	r2, r2, #8
 8003cfc:	4311      	orrs	r1, r2
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003d02:	0852      	lsrs	r2, r2, #1
 8003d04:	3a01      	subs	r2, #1
 8003d06:	0552      	lsls	r2, r2, #21
 8003d08:	4311      	orrs	r1, r2
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003d0e:	0852      	lsrs	r2, r2, #1
 8003d10:	3a01      	subs	r2, #1
 8003d12:	0652      	lsls	r2, r2, #25
 8003d14:	4311      	orrs	r1, r2
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d1a:	06d2      	lsls	r2, r2, #27
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	4912      	ldr	r1, [pc, #72]	; (8003d68 <HAL_RCC_OscConfig+0x778>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003d24:	4b10      	ldr	r3, [pc, #64]	; (8003d68 <HAL_RCC_OscConfig+0x778>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a0f      	ldr	r2, [pc, #60]	; (8003d68 <HAL_RCC_OscConfig+0x778>)
 8003d2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d2e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d30:	4b0d      	ldr	r3, [pc, #52]	; (8003d68 <HAL_RCC_OscConfig+0x778>)
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	4a0c      	ldr	r2, [pc, #48]	; (8003d68 <HAL_RCC_OscConfig+0x778>)
 8003d36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d3a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d3c:	f7ff f90e 	bl	8002f5c <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d42:	e008      	b.n	8003d56 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d44:	f7ff f90a 	bl	8002f5c <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e058      	b.n	8003e08 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d56:	4b04      	ldr	r3, [pc, #16]	; (8003d68 <HAL_RCC_OscConfig+0x778>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d0f0      	beq.n	8003d44 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d62:	e050      	b.n	8003e06 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e04f      	b.n	8003e08 <HAL_RCC_OscConfig+0x818>
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d70:	4b27      	ldr	r3, [pc, #156]	; (8003e10 <HAL_RCC_OscConfig+0x820>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d144      	bne.n	8003e06 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003d7c:	4b24      	ldr	r3, [pc, #144]	; (8003e10 <HAL_RCC_OscConfig+0x820>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a23      	ldr	r2, [pc, #140]	; (8003e10 <HAL_RCC_OscConfig+0x820>)
 8003d82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d86:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d88:	4b21      	ldr	r3, [pc, #132]	; (8003e10 <HAL_RCC_OscConfig+0x820>)
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	4a20      	ldr	r2, [pc, #128]	; (8003e10 <HAL_RCC_OscConfig+0x820>)
 8003d8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d92:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d94:	f7ff f8e2 	bl	8002f5c <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d9c:	f7ff f8de 	bl	8002f5c <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e02c      	b.n	8003e08 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dae:	4b18      	ldr	r3, [pc, #96]	; (8003e10 <HAL_RCC_OscConfig+0x820>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d0f0      	beq.n	8003d9c <HAL_RCC_OscConfig+0x7ac>
 8003dba:	e024      	b.n	8003e06 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	2b0c      	cmp	r3, #12
 8003dc0:	d01f      	beq.n	8003e02 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dc2:	4b13      	ldr	r3, [pc, #76]	; (8003e10 <HAL_RCC_OscConfig+0x820>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a12      	ldr	r2, [pc, #72]	; (8003e10 <HAL_RCC_OscConfig+0x820>)
 8003dc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dce:	f7ff f8c5 	bl	8002f5c <HAL_GetTick>
 8003dd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dd4:	e008      	b.n	8003de8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dd6:	f7ff f8c1 	bl	8002f5c <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d901      	bls.n	8003de8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e00f      	b.n	8003e08 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003de8:	4b09      	ldr	r3, [pc, #36]	; (8003e10 <HAL_RCC_OscConfig+0x820>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1f0      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003df4:	4b06      	ldr	r3, [pc, #24]	; (8003e10 <HAL_RCC_OscConfig+0x820>)
 8003df6:	68da      	ldr	r2, [r3, #12]
 8003df8:	4905      	ldr	r1, [pc, #20]	; (8003e10 <HAL_RCC_OscConfig+0x820>)
 8003dfa:	4b06      	ldr	r3, [pc, #24]	; (8003e14 <HAL_RCC_OscConfig+0x824>)
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	60cb      	str	r3, [r1, #12]
 8003e00:	e001      	b.n	8003e06 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e000      	b.n	8003e08 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3720      	adds	r7, #32
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	40021000 	.word	0x40021000
 8003e14:	feeefffc 	.word	0xfeeefffc

08003e18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d101      	bne.n	8003e2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e0e7      	b.n	8003ffc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e2c:	4b75      	ldr	r3, [pc, #468]	; (8004004 <HAL_RCC_ClockConfig+0x1ec>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0307 	and.w	r3, r3, #7
 8003e34:	683a      	ldr	r2, [r7, #0]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d910      	bls.n	8003e5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e3a:	4b72      	ldr	r3, [pc, #456]	; (8004004 <HAL_RCC_ClockConfig+0x1ec>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f023 0207 	bic.w	r2, r3, #7
 8003e42:	4970      	ldr	r1, [pc, #448]	; (8004004 <HAL_RCC_ClockConfig+0x1ec>)
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e4a:	4b6e      	ldr	r3, [pc, #440]	; (8004004 <HAL_RCC_ClockConfig+0x1ec>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0307 	and.w	r3, r3, #7
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d001      	beq.n	8003e5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e0cf      	b.n	8003ffc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0302 	and.w	r3, r3, #2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d010      	beq.n	8003e8a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689a      	ldr	r2, [r3, #8]
 8003e6c:	4b66      	ldr	r3, [pc, #408]	; (8004008 <HAL_RCC_ClockConfig+0x1f0>)
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d908      	bls.n	8003e8a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e78:	4b63      	ldr	r3, [pc, #396]	; (8004008 <HAL_RCC_ClockConfig+0x1f0>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	4960      	ldr	r1, [pc, #384]	; (8004008 <HAL_RCC_ClockConfig+0x1f0>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d04c      	beq.n	8003f30 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	2b03      	cmp	r3, #3
 8003e9c:	d107      	bne.n	8003eae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e9e:	4b5a      	ldr	r3, [pc, #360]	; (8004008 <HAL_RCC_ClockConfig+0x1f0>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d121      	bne.n	8003eee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e0a6      	b.n	8003ffc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d107      	bne.n	8003ec6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003eb6:	4b54      	ldr	r3, [pc, #336]	; (8004008 <HAL_RCC_ClockConfig+0x1f0>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d115      	bne.n	8003eee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e09a      	b.n	8003ffc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d107      	bne.n	8003ede <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ece:	4b4e      	ldr	r3, [pc, #312]	; (8004008 <HAL_RCC_ClockConfig+0x1f0>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d109      	bne.n	8003eee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e08e      	b.n	8003ffc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ede:	4b4a      	ldr	r3, [pc, #296]	; (8004008 <HAL_RCC_ClockConfig+0x1f0>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e086      	b.n	8003ffc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003eee:	4b46      	ldr	r3, [pc, #280]	; (8004008 <HAL_RCC_ClockConfig+0x1f0>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f023 0203 	bic.w	r2, r3, #3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	4943      	ldr	r1, [pc, #268]	; (8004008 <HAL_RCC_ClockConfig+0x1f0>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f00:	f7ff f82c 	bl	8002f5c <HAL_GetTick>
 8003f04:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f06:	e00a      	b.n	8003f1e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f08:	f7ff f828 	bl	8002f5c <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e06e      	b.n	8003ffc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f1e:	4b3a      	ldr	r3, [pc, #232]	; (8004008 <HAL_RCC_ClockConfig+0x1f0>)
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f003 020c 	and.w	r2, r3, #12
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d1eb      	bne.n	8003f08 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d010      	beq.n	8003f5e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689a      	ldr	r2, [r3, #8]
 8003f40:	4b31      	ldr	r3, [pc, #196]	; (8004008 <HAL_RCC_ClockConfig+0x1f0>)
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d208      	bcs.n	8003f5e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f4c:	4b2e      	ldr	r3, [pc, #184]	; (8004008 <HAL_RCC_ClockConfig+0x1f0>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	492b      	ldr	r1, [pc, #172]	; (8004008 <HAL_RCC_ClockConfig+0x1f0>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f5e:	4b29      	ldr	r3, [pc, #164]	; (8004004 <HAL_RCC_ClockConfig+0x1ec>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0307 	and.w	r3, r3, #7
 8003f66:	683a      	ldr	r2, [r7, #0]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d210      	bcs.n	8003f8e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f6c:	4b25      	ldr	r3, [pc, #148]	; (8004004 <HAL_RCC_ClockConfig+0x1ec>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f023 0207 	bic.w	r2, r3, #7
 8003f74:	4923      	ldr	r1, [pc, #140]	; (8004004 <HAL_RCC_ClockConfig+0x1ec>)
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f7c:	4b21      	ldr	r3, [pc, #132]	; (8004004 <HAL_RCC_ClockConfig+0x1ec>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0307 	and.w	r3, r3, #7
 8003f84:	683a      	ldr	r2, [r7, #0]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d001      	beq.n	8003f8e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e036      	b.n	8003ffc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0304 	and.w	r3, r3, #4
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d008      	beq.n	8003fac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f9a:	4b1b      	ldr	r3, [pc, #108]	; (8004008 <HAL_RCC_ClockConfig+0x1f0>)
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	4918      	ldr	r1, [pc, #96]	; (8004008 <HAL_RCC_ClockConfig+0x1f0>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0308 	and.w	r3, r3, #8
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d009      	beq.n	8003fcc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fb8:	4b13      	ldr	r3, [pc, #76]	; (8004008 <HAL_RCC_ClockConfig+0x1f0>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	00db      	lsls	r3, r3, #3
 8003fc6:	4910      	ldr	r1, [pc, #64]	; (8004008 <HAL_RCC_ClockConfig+0x1f0>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fcc:	f000 f824 	bl	8004018 <HAL_RCC_GetSysClockFreq>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	4b0d      	ldr	r3, [pc, #52]	; (8004008 <HAL_RCC_ClockConfig+0x1f0>)
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	091b      	lsrs	r3, r3, #4
 8003fd8:	f003 030f 	and.w	r3, r3, #15
 8003fdc:	490b      	ldr	r1, [pc, #44]	; (800400c <HAL_RCC_ClockConfig+0x1f4>)
 8003fde:	5ccb      	ldrb	r3, [r1, r3]
 8003fe0:	f003 031f 	and.w	r3, r3, #31
 8003fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8003fe8:	4a09      	ldr	r2, [pc, #36]	; (8004010 <HAL_RCC_ClockConfig+0x1f8>)
 8003fea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003fec:	4b09      	ldr	r3, [pc, #36]	; (8004014 <HAL_RCC_ClockConfig+0x1fc>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7fe fdb9 	bl	8002b68 <HAL_InitTick>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	72fb      	strb	r3, [r7, #11]

  return status;
 8003ffa:	7afb      	ldrb	r3, [r7, #11]
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	40022000 	.word	0x40022000
 8004008:	40021000 	.word	0x40021000
 800400c:	0800a510 	.word	0x0800a510
 8004010:	2000007c 	.word	0x2000007c
 8004014:	20000080 	.word	0x20000080

08004018 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004018:	b480      	push	{r7}
 800401a:	b089      	sub	sp, #36	; 0x24
 800401c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800401e:	2300      	movs	r3, #0
 8004020:	61fb      	str	r3, [r7, #28]
 8004022:	2300      	movs	r3, #0
 8004024:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004026:	4b3e      	ldr	r3, [pc, #248]	; (8004120 <HAL_RCC_GetSysClockFreq+0x108>)
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f003 030c 	and.w	r3, r3, #12
 800402e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004030:	4b3b      	ldr	r3, [pc, #236]	; (8004120 <HAL_RCC_GetSysClockFreq+0x108>)
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	f003 0303 	and.w	r3, r3, #3
 8004038:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d005      	beq.n	800404c <HAL_RCC_GetSysClockFreq+0x34>
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	2b0c      	cmp	r3, #12
 8004044:	d121      	bne.n	800408a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d11e      	bne.n	800408a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800404c:	4b34      	ldr	r3, [pc, #208]	; (8004120 <HAL_RCC_GetSysClockFreq+0x108>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0308 	and.w	r3, r3, #8
 8004054:	2b00      	cmp	r3, #0
 8004056:	d107      	bne.n	8004068 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004058:	4b31      	ldr	r3, [pc, #196]	; (8004120 <HAL_RCC_GetSysClockFreq+0x108>)
 800405a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800405e:	0a1b      	lsrs	r3, r3, #8
 8004060:	f003 030f 	and.w	r3, r3, #15
 8004064:	61fb      	str	r3, [r7, #28]
 8004066:	e005      	b.n	8004074 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004068:	4b2d      	ldr	r3, [pc, #180]	; (8004120 <HAL_RCC_GetSysClockFreq+0x108>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	091b      	lsrs	r3, r3, #4
 800406e:	f003 030f 	and.w	r3, r3, #15
 8004072:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004074:	4a2b      	ldr	r2, [pc, #172]	; (8004124 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800407c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d10d      	bne.n	80040a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004088:	e00a      	b.n	80040a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	2b04      	cmp	r3, #4
 800408e:	d102      	bne.n	8004096 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004090:	4b25      	ldr	r3, [pc, #148]	; (8004128 <HAL_RCC_GetSysClockFreq+0x110>)
 8004092:	61bb      	str	r3, [r7, #24]
 8004094:	e004      	b.n	80040a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	2b08      	cmp	r3, #8
 800409a:	d101      	bne.n	80040a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800409c:	4b23      	ldr	r3, [pc, #140]	; (800412c <HAL_RCC_GetSysClockFreq+0x114>)
 800409e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	2b0c      	cmp	r3, #12
 80040a4:	d134      	bne.n	8004110 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80040a6:	4b1e      	ldr	r3, [pc, #120]	; (8004120 <HAL_RCC_GetSysClockFreq+0x108>)
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	f003 0303 	and.w	r3, r3, #3
 80040ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d003      	beq.n	80040be <HAL_RCC_GetSysClockFreq+0xa6>
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	2b03      	cmp	r3, #3
 80040ba:	d003      	beq.n	80040c4 <HAL_RCC_GetSysClockFreq+0xac>
 80040bc:	e005      	b.n	80040ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80040be:	4b1a      	ldr	r3, [pc, #104]	; (8004128 <HAL_RCC_GetSysClockFreq+0x110>)
 80040c0:	617b      	str	r3, [r7, #20]
      break;
 80040c2:	e005      	b.n	80040d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80040c4:	4b19      	ldr	r3, [pc, #100]	; (800412c <HAL_RCC_GetSysClockFreq+0x114>)
 80040c6:	617b      	str	r3, [r7, #20]
      break;
 80040c8:	e002      	b.n	80040d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	617b      	str	r3, [r7, #20]
      break;
 80040ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040d0:	4b13      	ldr	r3, [pc, #76]	; (8004120 <HAL_RCC_GetSysClockFreq+0x108>)
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	091b      	lsrs	r3, r3, #4
 80040d6:	f003 0307 	and.w	r3, r3, #7
 80040da:	3301      	adds	r3, #1
 80040dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80040de:	4b10      	ldr	r3, [pc, #64]	; (8004120 <HAL_RCC_GetSysClockFreq+0x108>)
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	0a1b      	lsrs	r3, r3, #8
 80040e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	fb03 f202 	mul.w	r2, r3, r2
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040f6:	4b0a      	ldr	r3, [pc, #40]	; (8004120 <HAL_RCC_GetSysClockFreq+0x108>)
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	0e5b      	lsrs	r3, r3, #25
 80040fc:	f003 0303 	and.w	r3, r3, #3
 8004100:	3301      	adds	r3, #1
 8004102:	005b      	lsls	r3, r3, #1
 8004104:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	fbb2 f3f3 	udiv	r3, r2, r3
 800410e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004110:	69bb      	ldr	r3, [r7, #24]
}
 8004112:	4618      	mov	r0, r3
 8004114:	3724      	adds	r7, #36	; 0x24
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	40021000 	.word	0x40021000
 8004124:	0800a528 	.word	0x0800a528
 8004128:	00f42400 	.word	0x00f42400
 800412c:	007a1200 	.word	0x007a1200

08004130 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004134:	4b03      	ldr	r3, [pc, #12]	; (8004144 <HAL_RCC_GetHCLKFreq+0x14>)
 8004136:	681b      	ldr	r3, [r3, #0]
}
 8004138:	4618      	mov	r0, r3
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	2000007c 	.word	0x2000007c

08004148 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800414c:	f7ff fff0 	bl	8004130 <HAL_RCC_GetHCLKFreq>
 8004150:	4602      	mov	r2, r0
 8004152:	4b06      	ldr	r3, [pc, #24]	; (800416c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	0a1b      	lsrs	r3, r3, #8
 8004158:	f003 0307 	and.w	r3, r3, #7
 800415c:	4904      	ldr	r1, [pc, #16]	; (8004170 <HAL_RCC_GetPCLK1Freq+0x28>)
 800415e:	5ccb      	ldrb	r3, [r1, r3]
 8004160:	f003 031f 	and.w	r3, r3, #31
 8004164:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004168:	4618      	mov	r0, r3
 800416a:	bd80      	pop	{r7, pc}
 800416c:	40021000 	.word	0x40021000
 8004170:	0800a520 	.word	0x0800a520

08004174 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004178:	f7ff ffda 	bl	8004130 <HAL_RCC_GetHCLKFreq>
 800417c:	4602      	mov	r2, r0
 800417e:	4b06      	ldr	r3, [pc, #24]	; (8004198 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	0adb      	lsrs	r3, r3, #11
 8004184:	f003 0307 	and.w	r3, r3, #7
 8004188:	4904      	ldr	r1, [pc, #16]	; (800419c <HAL_RCC_GetPCLK2Freq+0x28>)
 800418a:	5ccb      	ldrb	r3, [r1, r3]
 800418c:	f003 031f 	and.w	r3, r3, #31
 8004190:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004194:	4618      	mov	r0, r3
 8004196:	bd80      	pop	{r7, pc}
 8004198:	40021000 	.word	0x40021000
 800419c:	0800a520 	.word	0x0800a520

080041a0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	220f      	movs	r2, #15
 80041ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80041b0:	4b12      	ldr	r3, [pc, #72]	; (80041fc <HAL_RCC_GetClockConfig+0x5c>)
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f003 0203 	and.w	r2, r3, #3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80041bc:	4b0f      	ldr	r3, [pc, #60]	; (80041fc <HAL_RCC_GetClockConfig+0x5c>)
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80041c8:	4b0c      	ldr	r3, [pc, #48]	; (80041fc <HAL_RCC_GetClockConfig+0x5c>)
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80041d4:	4b09      	ldr	r3, [pc, #36]	; (80041fc <HAL_RCC_GetClockConfig+0x5c>)
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	08db      	lsrs	r3, r3, #3
 80041da:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80041e2:	4b07      	ldr	r3, [pc, #28]	; (8004200 <HAL_RCC_GetClockConfig+0x60>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0207 	and.w	r2, r3, #7
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	601a      	str	r2, [r3, #0]
}
 80041ee:	bf00      	nop
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	40021000 	.word	0x40021000
 8004200:	40022000 	.word	0x40022000

08004204 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800420c:	2300      	movs	r3, #0
 800420e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004210:	4b2a      	ldr	r3, [pc, #168]	; (80042bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d003      	beq.n	8004224 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800421c:	f7ff f984 	bl	8003528 <HAL_PWREx_GetVoltageRange>
 8004220:	6178      	str	r0, [r7, #20]
 8004222:	e014      	b.n	800424e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004224:	4b25      	ldr	r3, [pc, #148]	; (80042bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004228:	4a24      	ldr	r2, [pc, #144]	; (80042bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800422a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800422e:	6593      	str	r3, [r2, #88]	; 0x58
 8004230:	4b22      	ldr	r3, [pc, #136]	; (80042bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004238:	60fb      	str	r3, [r7, #12]
 800423a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800423c:	f7ff f974 	bl	8003528 <HAL_PWREx_GetVoltageRange>
 8004240:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004242:	4b1e      	ldr	r3, [pc, #120]	; (80042bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004246:	4a1d      	ldr	r2, [pc, #116]	; (80042bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004248:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800424c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004254:	d10b      	bne.n	800426e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2b80      	cmp	r3, #128	; 0x80
 800425a:	d919      	bls.n	8004290 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2ba0      	cmp	r3, #160	; 0xa0
 8004260:	d902      	bls.n	8004268 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004262:	2302      	movs	r3, #2
 8004264:	613b      	str	r3, [r7, #16]
 8004266:	e013      	b.n	8004290 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004268:	2301      	movs	r3, #1
 800426a:	613b      	str	r3, [r7, #16]
 800426c:	e010      	b.n	8004290 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2b80      	cmp	r3, #128	; 0x80
 8004272:	d902      	bls.n	800427a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004274:	2303      	movs	r3, #3
 8004276:	613b      	str	r3, [r7, #16]
 8004278:	e00a      	b.n	8004290 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2b80      	cmp	r3, #128	; 0x80
 800427e:	d102      	bne.n	8004286 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004280:	2302      	movs	r3, #2
 8004282:	613b      	str	r3, [r7, #16]
 8004284:	e004      	b.n	8004290 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2b70      	cmp	r3, #112	; 0x70
 800428a:	d101      	bne.n	8004290 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800428c:	2301      	movs	r3, #1
 800428e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004290:	4b0b      	ldr	r3, [pc, #44]	; (80042c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f023 0207 	bic.w	r2, r3, #7
 8004298:	4909      	ldr	r1, [pc, #36]	; (80042c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	4313      	orrs	r3, r2
 800429e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80042a0:	4b07      	ldr	r3, [pc, #28]	; (80042c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0307 	and.w	r3, r3, #7
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d001      	beq.n	80042b2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e000      	b.n	80042b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3718      	adds	r7, #24
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	40021000 	.word	0x40021000
 80042c0:	40022000 	.word	0x40022000

080042c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80042cc:	2300      	movs	r3, #0
 80042ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80042d0:	2300      	movs	r3, #0
 80042d2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d031      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042e8:	d01a      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80042ea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042ee:	d814      	bhi.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x56>
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d009      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80042f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042f8:	d10f      	bne.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80042fa:	4b5d      	ldr	r3, [pc, #372]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	4a5c      	ldr	r2, [pc, #368]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004304:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004306:	e00c      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	3304      	adds	r3, #4
 800430c:	2100      	movs	r1, #0
 800430e:	4618      	mov	r0, r3
 8004310:	f000 f9de 	bl	80046d0 <RCCEx_PLLSAI1_Config>
 8004314:	4603      	mov	r3, r0
 8004316:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004318:	e003      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	74fb      	strb	r3, [r7, #19]
      break;
 800431e:	e000      	b.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004320:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004322:	7cfb      	ldrb	r3, [r7, #19]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10b      	bne.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004328:	4b51      	ldr	r3, [pc, #324]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800432a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800432e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004336:	494e      	ldr	r1, [pc, #312]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004338:	4313      	orrs	r3, r2
 800433a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800433e:	e001      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004340:	7cfb      	ldrb	r3, [r7, #19]
 8004342:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800434c:	2b00      	cmp	r3, #0
 800434e:	f000 809e 	beq.w	800448e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004352:	2300      	movs	r3, #0
 8004354:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004356:	4b46      	ldr	r3, [pc, #280]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800435a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004362:	2301      	movs	r3, #1
 8004364:	e000      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004366:	2300      	movs	r3, #0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00d      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800436c:	4b40      	ldr	r3, [pc, #256]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800436e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004370:	4a3f      	ldr	r2, [pc, #252]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004376:	6593      	str	r3, [r2, #88]	; 0x58
 8004378:	4b3d      	ldr	r3, [pc, #244]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800437a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800437c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004380:	60bb      	str	r3, [r7, #8]
 8004382:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004384:	2301      	movs	r3, #1
 8004386:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004388:	4b3a      	ldr	r3, [pc, #232]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a39      	ldr	r2, [pc, #228]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800438e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004392:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004394:	f7fe fde2 	bl	8002f5c <HAL_GetTick>
 8004398:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800439a:	e009      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800439c:	f7fe fdde 	bl	8002f5c <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d902      	bls.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	74fb      	strb	r3, [r7, #19]
        break;
 80043ae:	e005      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80043b0:	4b30      	ldr	r3, [pc, #192]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d0ef      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80043bc:	7cfb      	ldrb	r3, [r7, #19]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d15a      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80043c2:	4b2b      	ldr	r3, [pc, #172]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043cc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d01e      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043d8:	697a      	ldr	r2, [r7, #20]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d019      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80043de:	4b24      	ldr	r3, [pc, #144]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043e8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043ea:	4b21      	ldr	r3, [pc, #132]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f0:	4a1f      	ldr	r2, [pc, #124]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043fa:	4b1d      	ldr	r3, [pc, #116]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004400:	4a1b      	ldr	r2, [pc, #108]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004402:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004406:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800440a:	4a19      	ldr	r2, [pc, #100]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	f003 0301 	and.w	r3, r3, #1
 8004418:	2b00      	cmp	r3, #0
 800441a:	d016      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800441c:	f7fe fd9e 	bl	8002f5c <HAL_GetTick>
 8004420:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004422:	e00b      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004424:	f7fe fd9a 	bl	8002f5c <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004432:	4293      	cmp	r3, r2
 8004434:	d902      	bls.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	74fb      	strb	r3, [r7, #19]
            break;
 800443a:	e006      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800443c:	4b0c      	ldr	r3, [pc, #48]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800443e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d0ec      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800444a:	7cfb      	ldrb	r3, [r7, #19]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d10b      	bne.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004450:	4b07      	ldr	r3, [pc, #28]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004456:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800445e:	4904      	ldr	r1, [pc, #16]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004460:	4313      	orrs	r3, r2
 8004462:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004466:	e009      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004468:	7cfb      	ldrb	r3, [r7, #19]
 800446a:	74bb      	strb	r3, [r7, #18]
 800446c:	e006      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800446e:	bf00      	nop
 8004470:	40021000 	.word	0x40021000
 8004474:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004478:	7cfb      	ldrb	r3, [r7, #19]
 800447a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800447c:	7c7b      	ldrb	r3, [r7, #17]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d105      	bne.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004482:	4b8a      	ldr	r3, [pc, #552]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004486:	4a89      	ldr	r2, [pc, #548]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004488:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800448c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00a      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800449a:	4b84      	ldr	r3, [pc, #528]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800449c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a0:	f023 0203 	bic.w	r2, r3, #3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a1b      	ldr	r3, [r3, #32]
 80044a8:	4980      	ldr	r1, [pc, #512]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d00a      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044bc:	4b7b      	ldr	r3, [pc, #492]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c2:	f023 020c 	bic.w	r2, r3, #12
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ca:	4978      	ldr	r1, [pc, #480]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0320 	and.w	r3, r3, #32
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00a      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044de:	4b73      	ldr	r3, [pc, #460]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ec:	496f      	ldr	r1, [pc, #444]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d00a      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004500:	4b6a      	ldr	r3, [pc, #424]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004506:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800450e:	4967      	ldr	r1, [pc, #412]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004510:	4313      	orrs	r3, r2
 8004512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00a      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004522:	4b62      	ldr	r3, [pc, #392]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004528:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004530:	495e      	ldr	r1, [pc, #376]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004532:	4313      	orrs	r3, r2
 8004534:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00a      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004544:	4b59      	ldr	r3, [pc, #356]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800454a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004552:	4956      	ldr	r1, [pc, #344]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004554:	4313      	orrs	r3, r2
 8004556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00a      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004566:	4b51      	ldr	r3, [pc, #324]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800456c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004574:	494d      	ldr	r1, [pc, #308]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004576:	4313      	orrs	r3, r2
 8004578:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d028      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004588:	4b48      	ldr	r3, [pc, #288]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800458a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800458e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004596:	4945      	ldr	r1, [pc, #276]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004598:	4313      	orrs	r3, r2
 800459a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045a6:	d106      	bne.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045a8:	4b40      	ldr	r3, [pc, #256]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	4a3f      	ldr	r2, [pc, #252]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045b2:	60d3      	str	r3, [r2, #12]
 80045b4:	e011      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045be:	d10c      	bne.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	3304      	adds	r3, #4
 80045c4:	2101      	movs	r1, #1
 80045c6:	4618      	mov	r0, r3
 80045c8:	f000 f882 	bl	80046d0 <RCCEx_PLLSAI1_Config>
 80045cc:	4603      	mov	r3, r0
 80045ce:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80045d0:	7cfb      	ldrb	r3, [r7, #19]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80045d6:	7cfb      	ldrb	r3, [r7, #19]
 80045d8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d028      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045e6:	4b31      	ldr	r3, [pc, #196]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f4:	492d      	ldr	r1, [pc, #180]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004600:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004604:	d106      	bne.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004606:	4b29      	ldr	r3, [pc, #164]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	4a28      	ldr	r2, [pc, #160]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800460c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004610:	60d3      	str	r3, [r2, #12]
 8004612:	e011      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004618:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800461c:	d10c      	bne.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	3304      	adds	r3, #4
 8004622:	2101      	movs	r1, #1
 8004624:	4618      	mov	r0, r3
 8004626:	f000 f853 	bl	80046d0 <RCCEx_PLLSAI1_Config>
 800462a:	4603      	mov	r3, r0
 800462c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800462e:	7cfb      	ldrb	r3, [r7, #19]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d001      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004634:	7cfb      	ldrb	r3, [r7, #19]
 8004636:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d01c      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004644:	4b19      	ldr	r3, [pc, #100]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004652:	4916      	ldr	r1, [pc, #88]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004654:	4313      	orrs	r3, r2
 8004656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800465e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004662:	d10c      	bne.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	3304      	adds	r3, #4
 8004668:	2102      	movs	r1, #2
 800466a:	4618      	mov	r0, r3
 800466c:	f000 f830 	bl	80046d0 <RCCEx_PLLSAI1_Config>
 8004670:	4603      	mov	r3, r0
 8004672:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004674:	7cfb      	ldrb	r3, [r7, #19]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800467a:	7cfb      	ldrb	r3, [r7, #19]
 800467c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00a      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800468a:	4b08      	ldr	r3, [pc, #32]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800468c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004690:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004698:	4904      	ldr	r1, [pc, #16]	; (80046ac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800469a:	4313      	orrs	r3, r2
 800469c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80046a0:	7cbb      	ldrb	r3, [r7, #18]
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3718      	adds	r7, #24
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	40021000 	.word	0x40021000

080046b0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80046b0:	b480      	push	{r7}
 80046b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80046b4:	4b05      	ldr	r3, [pc, #20]	; (80046cc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a04      	ldr	r2, [pc, #16]	; (80046cc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80046ba:	f043 0304 	orr.w	r3, r3, #4
 80046be:	6013      	str	r3, [r2, #0]
}
 80046c0:	bf00      	nop
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	40021000 	.word	0x40021000

080046d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046da:	2300      	movs	r3, #0
 80046dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80046de:	4b74      	ldr	r3, [pc, #464]	; (80048b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	f003 0303 	and.w	r3, r3, #3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d018      	beq.n	800471c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80046ea:	4b71      	ldr	r3, [pc, #452]	; (80048b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	f003 0203 	and.w	r2, r3, #3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d10d      	bne.n	8004716 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
       ||
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d009      	beq.n	8004716 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004702:	4b6b      	ldr	r3, [pc, #428]	; (80048b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	091b      	lsrs	r3, r3, #4
 8004708:	f003 0307 	and.w	r3, r3, #7
 800470c:	1c5a      	adds	r2, r3, #1
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
       ||
 8004712:	429a      	cmp	r2, r3
 8004714:	d047      	beq.n	80047a6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	73fb      	strb	r3, [r7, #15]
 800471a:	e044      	b.n	80047a6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2b03      	cmp	r3, #3
 8004722:	d018      	beq.n	8004756 <RCCEx_PLLSAI1_Config+0x86>
 8004724:	2b03      	cmp	r3, #3
 8004726:	d825      	bhi.n	8004774 <RCCEx_PLLSAI1_Config+0xa4>
 8004728:	2b01      	cmp	r3, #1
 800472a:	d002      	beq.n	8004732 <RCCEx_PLLSAI1_Config+0x62>
 800472c:	2b02      	cmp	r3, #2
 800472e:	d009      	beq.n	8004744 <RCCEx_PLLSAI1_Config+0x74>
 8004730:	e020      	b.n	8004774 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004732:	4b5f      	ldr	r3, [pc, #380]	; (80048b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d11d      	bne.n	800477a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004742:	e01a      	b.n	800477a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004744:	4b5a      	ldr	r3, [pc, #360]	; (80048b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800474c:	2b00      	cmp	r3, #0
 800474e:	d116      	bne.n	800477e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004754:	e013      	b.n	800477e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004756:	4b56      	ldr	r3, [pc, #344]	; (80048b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d10f      	bne.n	8004782 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004762:	4b53      	ldr	r3, [pc, #332]	; (80048b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d109      	bne.n	8004782 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004772:	e006      	b.n	8004782 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	73fb      	strb	r3, [r7, #15]
      break;
 8004778:	e004      	b.n	8004784 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800477a:	bf00      	nop
 800477c:	e002      	b.n	8004784 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800477e:	bf00      	nop
 8004780:	e000      	b.n	8004784 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004782:	bf00      	nop
    }

    if(status == HAL_OK)
 8004784:	7bfb      	ldrb	r3, [r7, #15]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10d      	bne.n	80047a6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800478a:	4b49      	ldr	r3, [pc, #292]	; (80048b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6819      	ldr	r1, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	3b01      	subs	r3, #1
 800479c:	011b      	lsls	r3, r3, #4
 800479e:	430b      	orrs	r3, r1
 80047a0:	4943      	ldr	r1, [pc, #268]	; (80048b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80047a6:	7bfb      	ldrb	r3, [r7, #15]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d17c      	bne.n	80048a6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80047ac:	4b40      	ldr	r3, [pc, #256]	; (80048b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a3f      	ldr	r2, [pc, #252]	; (80048b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047b8:	f7fe fbd0 	bl	8002f5c <HAL_GetTick>
 80047bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047be:	e009      	b.n	80047d4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047c0:	f7fe fbcc 	bl	8002f5c <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d902      	bls.n	80047d4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	73fb      	strb	r3, [r7, #15]
        break;
 80047d2:	e005      	b.n	80047e0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047d4:	4b36      	ldr	r3, [pc, #216]	; (80048b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1ef      	bne.n	80047c0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80047e0:	7bfb      	ldrb	r3, [r7, #15]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d15f      	bne.n	80048a6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d110      	bne.n	800480e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047ec:	4b30      	ldr	r3, [pc, #192]	; (80048b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80047f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	6892      	ldr	r2, [r2, #8]
 80047fc:	0211      	lsls	r1, r2, #8
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	68d2      	ldr	r2, [r2, #12]
 8004802:	06d2      	lsls	r2, r2, #27
 8004804:	430a      	orrs	r2, r1
 8004806:	492a      	ldr	r1, [pc, #168]	; (80048b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004808:	4313      	orrs	r3, r2
 800480a:	610b      	str	r3, [r1, #16]
 800480c:	e027      	b.n	800485e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d112      	bne.n	800483a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004814:	4b26      	ldr	r3, [pc, #152]	; (80048b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800481c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	6892      	ldr	r2, [r2, #8]
 8004824:	0211      	lsls	r1, r2, #8
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	6912      	ldr	r2, [r2, #16]
 800482a:	0852      	lsrs	r2, r2, #1
 800482c:	3a01      	subs	r2, #1
 800482e:	0552      	lsls	r2, r2, #21
 8004830:	430a      	orrs	r2, r1
 8004832:	491f      	ldr	r1, [pc, #124]	; (80048b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004834:	4313      	orrs	r3, r2
 8004836:	610b      	str	r3, [r1, #16]
 8004838:	e011      	b.n	800485e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800483a:	4b1d      	ldr	r3, [pc, #116]	; (80048b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004842:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	6892      	ldr	r2, [r2, #8]
 800484a:	0211      	lsls	r1, r2, #8
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	6952      	ldr	r2, [r2, #20]
 8004850:	0852      	lsrs	r2, r2, #1
 8004852:	3a01      	subs	r2, #1
 8004854:	0652      	lsls	r2, r2, #25
 8004856:	430a      	orrs	r2, r1
 8004858:	4915      	ldr	r1, [pc, #84]	; (80048b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800485a:	4313      	orrs	r3, r2
 800485c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800485e:	4b14      	ldr	r3, [pc, #80]	; (80048b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a13      	ldr	r2, [pc, #76]	; (80048b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004864:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004868:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800486a:	f7fe fb77 	bl	8002f5c <HAL_GetTick>
 800486e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004870:	e009      	b.n	8004886 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004872:	f7fe fb73 	bl	8002f5c <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	2b02      	cmp	r3, #2
 800487e:	d902      	bls.n	8004886 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	73fb      	strb	r3, [r7, #15]
          break;
 8004884:	e005      	b.n	8004892 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004886:	4b0a      	ldr	r3, [pc, #40]	; (80048b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d0ef      	beq.n	8004872 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004892:	7bfb      	ldrb	r3, [r7, #15]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d106      	bne.n	80048a6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004898:	4b05      	ldr	r3, [pc, #20]	; (80048b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800489a:	691a      	ldr	r2, [r3, #16]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	4903      	ldr	r1, [pc, #12]	; (80048b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80048a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3710      	adds	r7, #16
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	40021000 	.word	0x40021000

080048b4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d079      	beq.n	80049ba <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d106      	bne.n	80048e0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f7fd fffe 	bl	80028dc <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2202      	movs	r2, #2
 80048e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	f003 0310 	and.w	r3, r3, #16
 80048f2:	2b10      	cmp	r3, #16
 80048f4:	d058      	beq.n	80049a8 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	22ca      	movs	r2, #202	; 0xca
 80048fc:	625a      	str	r2, [r3, #36]	; 0x24
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2253      	movs	r2, #83	; 0x53
 8004904:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 f880 	bl	8004a0c <RTC_EnterInitMode>
 800490c:	4603      	mov	r3, r0
 800490e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004910:	7bfb      	ldrb	r3, [r7, #15]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d127      	bne.n	8004966 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	6812      	ldr	r2, [r2, #0]
 8004920:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004924:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004928:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	6899      	ldr	r1, [r3, #8]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685a      	ldr	r2, [r3, #4]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	431a      	orrs	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	431a      	orrs	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	430a      	orrs	r2, r1
 8004946:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	68d2      	ldr	r2, [r2, #12]
 8004950:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	6919      	ldr	r1, [r3, #16]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	041a      	lsls	r2, r3, #16
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	430a      	orrs	r2, r1
 8004964:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 f884 	bl	8004a74 <RTC_ExitInitMode>
 800496c:	4603      	mov	r3, r0
 800496e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004970:	7bfb      	ldrb	r3, [r7, #15]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d113      	bne.n	800499e <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f022 0203 	bic.w	r2, r2, #3
 8004984:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	69da      	ldr	r2, [r3, #28]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	695b      	ldr	r3, [r3, #20]
 8004994:	431a      	orrs	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	430a      	orrs	r2, r1
 800499c:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	22ff      	movs	r2, #255	; 0xff
 80049a4:	625a      	str	r2, [r3, #36]	; 0x24
 80049a6:	e001      	b.n	80049ac <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80049a8:	2300      	movs	r3, #0
 80049aa:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80049ac:	7bfb      	ldrb	r3, [r7, #15]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d103      	bne.n	80049ba <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 80049ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3710      	adds	r7, #16
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a0d      	ldr	r2, [pc, #52]	; (8004a08 <HAL_RTC_WaitForSynchro+0x44>)
 80049d2:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80049d4:	f7fe fac2 	bl	8002f5c <HAL_GetTick>
 80049d8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80049da:	e009      	b.n	80049f0 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80049dc:	f7fe fabe 	bl	8002f5c <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049ea:	d901      	bls.n	80049f0 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e007      	b.n	8004a00 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	f003 0320 	and.w	r3, r3, #32
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d0ee      	beq.n	80049dc <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3710      	adds	r7, #16
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	0003ff5f 	.word	0x0003ff5f

08004a0c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a14:	2300      	movs	r3, #0
 8004a16:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d120      	bne.n	8004a68 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a2e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004a30:	f7fe fa94 	bl	8002f5c <HAL_GetTick>
 8004a34:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004a36:	e00d      	b.n	8004a54 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004a38:	f7fe fa90 	bl	8002f5c <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a46:	d905      	bls.n	8004a54 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2203      	movs	r2, #3
 8004a50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d102      	bne.n	8004a68 <RTC_EnterInitMode+0x5c>
 8004a62:	7bfb      	ldrb	r3, [r7, #15]
 8004a64:	2b03      	cmp	r3, #3
 8004a66:	d1e7      	bne.n	8004a38 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8004a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
	...

08004a74 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004a80:	4b1a      	ldr	r3, [pc, #104]	; (8004aec <RTC_ExitInitMode+0x78>)
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	4a19      	ldr	r2, [pc, #100]	; (8004aec <RTC_ExitInitMode+0x78>)
 8004a86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a8a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004a8c:	4b17      	ldr	r3, [pc, #92]	; (8004aec <RTC_ExitInitMode+0x78>)
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f003 0320 	and.w	r3, r3, #32
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10c      	bne.n	8004ab2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f7ff ff93 	bl	80049c4 <HAL_RTC_WaitForSynchro>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d01e      	beq.n	8004ae2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2203      	movs	r2, #3
 8004aa8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	73fb      	strb	r3, [r7, #15]
 8004ab0:	e017      	b.n	8004ae2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004ab2:	4b0e      	ldr	r3, [pc, #56]	; (8004aec <RTC_ExitInitMode+0x78>)
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	4a0d      	ldr	r2, [pc, #52]	; (8004aec <RTC_ExitInitMode+0x78>)
 8004ab8:	f023 0320 	bic.w	r3, r3, #32
 8004abc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f7ff ff80 	bl	80049c4 <HAL_RTC_WaitForSynchro>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d005      	beq.n	8004ad6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2203      	movs	r2, #3
 8004ace:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004ad6:	4b05      	ldr	r3, [pc, #20]	; (8004aec <RTC_ExitInitMode+0x78>)
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	4a04      	ldr	r2, [pc, #16]	; (8004aec <RTC_ExitInitMode+0x78>)
 8004adc:	f043 0320 	orr.w	r3, r3, #32
 8004ae0:	6093      	str	r3, [r2, #8]
  }

  return status;
 8004ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3710      	adds	r7, #16
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	40002800 	.word	0x40002800

08004af0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d101      	bne.n	8004b02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e095      	b.n	8004c2e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d108      	bne.n	8004b1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b12:	d009      	beq.n	8004b28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	61da      	str	r2, [r3, #28]
 8004b1a:	e005      	b.n	8004b28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d106      	bne.n	8004b48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f7fd fefa 	bl	800293c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b5e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b68:	d902      	bls.n	8004b70 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	60fb      	str	r3, [r7, #12]
 8004b6e:	e002      	b.n	8004b76 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b74:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004b7e:	d007      	beq.n	8004b90 <HAL_SPI_Init+0xa0>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b88:	d002      	beq.n	8004b90 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ba0:	431a      	orrs	r2, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	f003 0302 	and.w	r3, r3, #2
 8004baa:	431a      	orrs	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	695b      	ldr	r3, [r3, #20]
 8004bb0:	f003 0301 	and.w	r3, r3, #1
 8004bb4:	431a      	orrs	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bbe:	431a      	orrs	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	69db      	ldr	r3, [r3, #28]
 8004bc4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bc8:	431a      	orrs	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a1b      	ldr	r3, [r3, #32]
 8004bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd2:	ea42 0103 	orr.w	r1, r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bda:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	430a      	orrs	r2, r1
 8004be4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	0c1b      	lsrs	r3, r3, #16
 8004bec:	f003 0204 	and.w	r2, r3, #4
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf4:	f003 0310 	and.w	r3, r3, #16
 8004bf8:	431a      	orrs	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bfe:	f003 0308 	and.w	r3, r3, #8
 8004c02:	431a      	orrs	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004c0c:	ea42 0103 	orr.w	r1, r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b088      	sub	sp, #32
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	60f8      	str	r0, [r7, #12]
 8004c3e:	60b9      	str	r1, [r7, #8]
 8004c40:	603b      	str	r3, [r7, #0]
 8004c42:	4613      	mov	r3, r2
 8004c44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c46:	2300      	movs	r3, #0
 8004c48:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d101      	bne.n	8004c58 <HAL_SPI_Transmit+0x22>
 8004c54:	2302      	movs	r3, #2
 8004c56:	e15f      	b.n	8004f18 <HAL_SPI_Transmit+0x2e2>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c60:	f7fe f97c 	bl	8002f5c <HAL_GetTick>
 8004c64:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004c66:	88fb      	ldrh	r3, [r7, #6]
 8004c68:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d002      	beq.n	8004c7c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004c76:	2302      	movs	r3, #2
 8004c78:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c7a:	e148      	b.n	8004f0e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d002      	beq.n	8004c88 <HAL_SPI_Transmit+0x52>
 8004c82:	88fb      	ldrh	r3, [r7, #6]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d102      	bne.n	8004c8e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c8c:	e13f      	b.n	8004f0e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2203      	movs	r2, #3
 8004c92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	68ba      	ldr	r2, [r7, #8]
 8004ca0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	88fa      	ldrh	r2, [r7, #6]
 8004ca6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	88fa      	ldrh	r2, [r7, #6]
 8004cac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cd8:	d10f      	bne.n	8004cfa <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ce8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cf8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d04:	2b40      	cmp	r3, #64	; 0x40
 8004d06:	d007      	beq.n	8004d18 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d20:	d94f      	bls.n	8004dc2 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d002      	beq.n	8004d30 <HAL_SPI_Transmit+0xfa>
 8004d2a:	8afb      	ldrh	r3, [r7, #22]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d142      	bne.n	8004db6 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d34:	881a      	ldrh	r2, [r3, #0]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d40:	1c9a      	adds	r2, r3, #2
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004d54:	e02f      	b.n	8004db6 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d112      	bne.n	8004d8a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d68:	881a      	ldrh	r2, [r3, #0]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d74:	1c9a      	adds	r2, r3, #2
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	3b01      	subs	r3, #1
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d88:	e015      	b.n	8004db6 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d8a:	f7fe f8e7 	bl	8002f5c <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	683a      	ldr	r2, [r7, #0]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d803      	bhi.n	8004da2 <HAL_SPI_Transmit+0x16c>
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da0:	d102      	bne.n	8004da8 <HAL_SPI_Transmit+0x172>
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d106      	bne.n	8004db6 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004db4:	e0ab      	b.n	8004f0e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1ca      	bne.n	8004d56 <HAL_SPI_Transmit+0x120>
 8004dc0:	e080      	b.n	8004ec4 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d002      	beq.n	8004dd0 <HAL_SPI_Transmit+0x19a>
 8004dca:	8afb      	ldrh	r3, [r7, #22]
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d174      	bne.n	8004eba <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d912      	bls.n	8004e00 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dde:	881a      	ldrh	r2, [r3, #0]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dea:	1c9a      	adds	r2, r3, #2
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	3b02      	subs	r3, #2
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004dfe:	e05c      	b.n	8004eba <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	330c      	adds	r3, #12
 8004e0a:	7812      	ldrb	r2, [r2, #0]
 8004e0c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e12:	1c5a      	adds	r2, r3, #1
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004e26:	e048      	b.n	8004eba <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f003 0302 	and.w	r3, r3, #2
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d12b      	bne.n	8004e8e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d912      	bls.n	8004e66 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e44:	881a      	ldrh	r2, [r3, #0]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e50:	1c9a      	adds	r2, r3, #2
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	3b02      	subs	r3, #2
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e64:	e029      	b.n	8004eba <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	330c      	adds	r3, #12
 8004e70:	7812      	ldrb	r2, [r2, #0]
 8004e72:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e78:	1c5a      	adds	r2, r3, #1
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	3b01      	subs	r3, #1
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e8c:	e015      	b.n	8004eba <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e8e:	f7fe f865 	bl	8002f5c <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	683a      	ldr	r2, [r7, #0]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d803      	bhi.n	8004ea6 <HAL_SPI_Transmit+0x270>
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea4:	d102      	bne.n	8004eac <HAL_SPI_Transmit+0x276>
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d106      	bne.n	8004eba <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004eb8:	e029      	b.n	8004f0e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1b1      	bne.n	8004e28 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ec4:	69ba      	ldr	r2, [r7, #24]
 8004ec6:	6839      	ldr	r1, [r7, #0]
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	f000 ff93 	bl	8005df4 <SPI_EndRxTxTransaction>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d002      	beq.n	8004eda <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2220      	movs	r2, #32
 8004ed8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10a      	bne.n	8004ef8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	613b      	str	r3, [r7, #16]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	613b      	str	r3, [r7, #16]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	613b      	str	r3, [r7, #16]
 8004ef6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d002      	beq.n	8004f06 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	77fb      	strb	r3, [r7, #31]
 8004f04:	e003      	b.n	8004f0e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004f16:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3720      	adds	r7, #32
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b08a      	sub	sp, #40	; 0x28
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
 8004f2c:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004f32:	2300      	movs	r3, #0
 8004f34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d101      	bne.n	8004f46 <HAL_SPI_TransmitReceive+0x26>
 8004f42:	2302      	movs	r3, #2
 8004f44:	e20a      	b.n	800535c <HAL_SPI_TransmitReceive+0x43c>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f4e:	f7fe f805 	bl	8002f5c <HAL_GetTick>
 8004f52:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f5a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004f62:	887b      	ldrh	r3, [r7, #2]
 8004f64:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004f66:	887b      	ldrh	r3, [r7, #2]
 8004f68:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f6a:	7efb      	ldrb	r3, [r7, #27]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d00e      	beq.n	8004f8e <HAL_SPI_TransmitReceive+0x6e>
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f76:	d106      	bne.n	8004f86 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d102      	bne.n	8004f86 <HAL_SPI_TransmitReceive+0x66>
 8004f80:	7efb      	ldrb	r3, [r7, #27]
 8004f82:	2b04      	cmp	r3, #4
 8004f84:	d003      	beq.n	8004f8e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004f86:	2302      	movs	r3, #2
 8004f88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004f8c:	e1e0      	b.n	8005350 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d005      	beq.n	8004fa0 <HAL_SPI_TransmitReceive+0x80>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d002      	beq.n	8004fa0 <HAL_SPI_TransmitReceive+0x80>
 8004f9a:	887b      	ldrh	r3, [r7, #2]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d103      	bne.n	8004fa8 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004fa6:	e1d3      	b.n	8005350 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	2b04      	cmp	r3, #4
 8004fb2:	d003      	beq.n	8004fbc <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2205      	movs	r2, #5
 8004fb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	887a      	ldrh	r2, [r7, #2]
 8004fcc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	887a      	ldrh	r2, [r7, #2]
 8004fd4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	68ba      	ldr	r2, [r7, #8]
 8004fdc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	887a      	ldrh	r2, [r7, #2]
 8004fe2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	887a      	ldrh	r2, [r7, #2]
 8004fe8:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2200      	movs	r2, #0
 8004fee:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ffe:	d802      	bhi.n	8005006 <HAL_SPI_TransmitReceive+0xe6>
 8005000:	8a3b      	ldrh	r3, [r7, #16]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d908      	bls.n	8005018 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	685a      	ldr	r2, [r3, #4]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005014:	605a      	str	r2, [r3, #4]
 8005016:	e007      	b.n	8005028 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	685a      	ldr	r2, [r3, #4]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005026:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005032:	2b40      	cmp	r3, #64	; 0x40
 8005034:	d007      	beq.n	8005046 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005044:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800504e:	f240 8081 	bls.w	8005154 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d002      	beq.n	8005060 <HAL_SPI_TransmitReceive+0x140>
 800505a:	8a7b      	ldrh	r3, [r7, #18]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d16d      	bne.n	800513c <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005064:	881a      	ldrh	r2, [r3, #0]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005070:	1c9a      	adds	r2, r3, #2
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800507a:	b29b      	uxth	r3, r3
 800507c:	3b01      	subs	r3, #1
 800507e:	b29a      	uxth	r2, r3
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005084:	e05a      	b.n	800513c <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f003 0302 	and.w	r3, r3, #2
 8005090:	2b02      	cmp	r3, #2
 8005092:	d11b      	bne.n	80050cc <HAL_SPI_TransmitReceive+0x1ac>
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005098:	b29b      	uxth	r3, r3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d016      	beq.n	80050cc <HAL_SPI_TransmitReceive+0x1ac>
 800509e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d113      	bne.n	80050cc <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a8:	881a      	ldrh	r2, [r3, #0]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b4:	1c9a      	adds	r2, r3, #2
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050be:	b29b      	uxth	r3, r3
 80050c0:	3b01      	subs	r3, #1
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050c8:	2300      	movs	r3, #0
 80050ca:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f003 0301 	and.w	r3, r3, #1
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d11c      	bne.n	8005114 <HAL_SPI_TransmitReceive+0x1f4>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d016      	beq.n	8005114 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68da      	ldr	r2, [r3, #12]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f0:	b292      	uxth	r2, r2
 80050f2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f8:	1c9a      	adds	r2, r3, #2
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005104:	b29b      	uxth	r3, r3
 8005106:	3b01      	subs	r3, #1
 8005108:	b29a      	uxth	r2, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005110:	2301      	movs	r3, #1
 8005112:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005114:	f7fd ff22 	bl	8002f5c <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005120:	429a      	cmp	r2, r3
 8005122:	d80b      	bhi.n	800513c <HAL_SPI_TransmitReceive+0x21c>
 8005124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800512a:	d007      	beq.n	800513c <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2201      	movs	r2, #1
 8005136:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800513a:	e109      	b.n	8005350 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005140:	b29b      	uxth	r3, r3
 8005142:	2b00      	cmp	r3, #0
 8005144:	d19f      	bne.n	8005086 <HAL_SPI_TransmitReceive+0x166>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800514c:	b29b      	uxth	r3, r3
 800514e:	2b00      	cmp	r3, #0
 8005150:	d199      	bne.n	8005086 <HAL_SPI_TransmitReceive+0x166>
 8005152:	e0e3      	b.n	800531c <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d003      	beq.n	8005164 <HAL_SPI_TransmitReceive+0x244>
 800515c:	8a7b      	ldrh	r3, [r7, #18]
 800515e:	2b01      	cmp	r3, #1
 8005160:	f040 80cf 	bne.w	8005302 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005168:	b29b      	uxth	r3, r3
 800516a:	2b01      	cmp	r3, #1
 800516c:	d912      	bls.n	8005194 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005172:	881a      	ldrh	r2, [r3, #0]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517e:	1c9a      	adds	r2, r3, #2
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005188:	b29b      	uxth	r3, r3
 800518a:	3b02      	subs	r3, #2
 800518c:	b29a      	uxth	r2, r3
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005192:	e0b6      	b.n	8005302 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	330c      	adds	r3, #12
 800519e:	7812      	ldrb	r2, [r2, #0]
 80051a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a6:	1c5a      	adds	r2, r3, #1
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	3b01      	subs	r3, #1
 80051b4:	b29a      	uxth	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051ba:	e0a2      	b.n	8005302 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f003 0302 	and.w	r3, r3, #2
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d134      	bne.n	8005234 <HAL_SPI_TransmitReceive+0x314>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d02f      	beq.n	8005234 <HAL_SPI_TransmitReceive+0x314>
 80051d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d12c      	bne.n	8005234 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051de:	b29b      	uxth	r3, r3
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d912      	bls.n	800520a <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e8:	881a      	ldrh	r2, [r3, #0]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f4:	1c9a      	adds	r2, r3, #2
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051fe:	b29b      	uxth	r3, r3
 8005200:	3b02      	subs	r3, #2
 8005202:	b29a      	uxth	r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005208:	e012      	b.n	8005230 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	330c      	adds	r3, #12
 8005214:	7812      	ldrb	r2, [r2, #0]
 8005216:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521c:	1c5a      	adds	r2, r3, #1
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005226:	b29b      	uxth	r3, r3
 8005228:	3b01      	subs	r3, #1
 800522a:	b29a      	uxth	r2, r3
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005230:	2300      	movs	r3, #0
 8005232:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f003 0301 	and.w	r3, r3, #1
 800523e:	2b01      	cmp	r3, #1
 8005240:	d148      	bne.n	80052d4 <HAL_SPI_TransmitReceive+0x3b4>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005248:	b29b      	uxth	r3, r3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d042      	beq.n	80052d4 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005254:	b29b      	uxth	r3, r3
 8005256:	2b01      	cmp	r3, #1
 8005258:	d923      	bls.n	80052a2 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68da      	ldr	r2, [r3, #12]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005264:	b292      	uxth	r2, r2
 8005266:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526c:	1c9a      	adds	r2, r3, #2
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005278:	b29b      	uxth	r3, r3
 800527a:	3b02      	subs	r3, #2
 800527c:	b29a      	uxth	r2, r3
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800528a:	b29b      	uxth	r3, r3
 800528c:	2b01      	cmp	r3, #1
 800528e:	d81f      	bhi.n	80052d0 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	685a      	ldr	r2, [r3, #4]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800529e:	605a      	str	r2, [r3, #4]
 80052a0:	e016      	b.n	80052d0 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f103 020c 	add.w	r2, r3, #12
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ae:	7812      	ldrb	r2, [r2, #0]
 80052b0:	b2d2      	uxtb	r2, r2
 80052b2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b8:	1c5a      	adds	r2, r3, #1
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	3b01      	subs	r3, #1
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80052d0:	2301      	movs	r3, #1
 80052d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80052d4:	f7fd fe42 	bl	8002f5c <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d803      	bhi.n	80052ec <HAL_SPI_TransmitReceive+0x3cc>
 80052e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ea:	d102      	bne.n	80052f2 <HAL_SPI_TransmitReceive+0x3d2>
 80052ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d107      	bne.n	8005302 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8005300:	e026      	b.n	8005350 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005306:	b29b      	uxth	r3, r3
 8005308:	2b00      	cmp	r3, #0
 800530a:	f47f af57 	bne.w	80051bc <HAL_SPI_TransmitReceive+0x29c>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005314:	b29b      	uxth	r3, r3
 8005316:	2b00      	cmp	r3, #0
 8005318:	f47f af50 	bne.w	80051bc <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800531c:	69fa      	ldr	r2, [r7, #28]
 800531e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f000 fd67 	bl	8005df4 <SPI_EndRxTxTransaction>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d005      	beq.n	8005338 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2220      	movs	r2, #32
 8005336:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800533c:	2b00      	cmp	r3, #0
 800533e:	d003      	beq.n	8005348 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005346:	e003      	b.n	8005350 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005358:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800535c:	4618      	mov	r0, r3
 800535e:	3728      	adds	r7, #40	; 0x28
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b086      	sub	sp, #24
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	4613      	mov	r3, r2
 8005370:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005372:	2300      	movs	r3, #0
 8005374:	75fb      	strb	r3, [r7, #23]


  if (hspi->State != HAL_SPI_STATE_READY)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800537c:	b2db      	uxtb	r3, r3
 800537e:	2b01      	cmp	r3, #1
 8005380:	d002      	beq.n	8005388 <HAL_SPI_Receive_IT+0x24>
  {
    errorcode = HAL_BUSY;
 8005382:	2302      	movs	r3, #2
 8005384:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005386:	e092      	b.n	80054ae <HAL_SPI_Receive_IT+0x14a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d110      	bne.n	80053b2 <HAL_SPI_Receive_IT+0x4e>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005398:	d10b      	bne.n	80053b2 <HAL_SPI_Receive_IT+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2204      	movs	r2, #4
 800539e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80053a2:	88fb      	ldrh	r3, [r7, #6]
 80053a4:	68ba      	ldr	r2, [r7, #8]
 80053a6:	68b9      	ldr	r1, [r7, #8]
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	f000 f889 	bl	80054c0 <HAL_SPI_TransmitReceive_IT>
 80053ae:	4603      	mov	r3, r0
 80053b0:	e07e      	b.n	80054b0 <HAL_SPI_Receive_IT+0x14c>
  }


  if ((pData == NULL) || (Size == 0U))
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d002      	beq.n	80053be <HAL_SPI_Receive_IT+0x5a>
 80053b8:	88fb      	ldrh	r3, [r7, #6]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d102      	bne.n	80053c4 <HAL_SPI_Receive_IT+0x60>
  {
    errorcode = HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80053c2:	e074      	b.n	80054ae <HAL_SPI_Receive_IT+0x14a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d101      	bne.n	80053d2 <HAL_SPI_Receive_IT+0x6e>
 80053ce:	2302      	movs	r3, #2
 80053d0:	e06e      	b.n	80054b0 <HAL_SPI_Receive_IT+0x14c>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2204      	movs	r2, #4
 80053de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	68ba      	ldr	r2, [r7, #8]
 80053ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	88fa      	ldrh	r2, [r7, #6]
 80053f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	88fa      	ldrh	r2, [r7, #6]
 80053fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2200      	movs	r2, #0
 800540e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800541e:	d90b      	bls.n	8005438 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	685a      	ldr	r2, [r3, #4]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800542e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	4a21      	ldr	r2, [pc, #132]	; (80054b8 <HAL_SPI_Receive_IT+0x154>)
 8005434:	64da      	str	r2, [r3, #76]	; 0x4c
 8005436:	e00a      	b.n	800544e <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	685a      	ldr	r2, [r3, #4]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005446:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	4a1c      	ldr	r2, [pc, #112]	; (80054bc <HAL_SPI_Receive_IT+0x158>)
 800544c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005456:	d10f      	bne.n	8005478 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005466:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005476:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005482:	2b40      	cmp	r3, #64	; 0x40
 8005484:	d007      	beq.n	8005496 <HAL_SPI_Receive_IT+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005494:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	685a      	ldr	r2, [r3, #4]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80054ac:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 80054ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3718      	adds	r7, #24
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	08005abd 	.word	0x08005abd
 80054bc:	08005a6d 	.word	0x08005a6d

080054c0 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b087      	sub	sp, #28
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	607a      	str	r2, [r7, #4]
 80054cc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80054ce:	2300      	movs	r3, #0
 80054d0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80054d8:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80054e0:	7dbb      	ldrb	r3, [r7, #22]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d00d      	beq.n	8005502 <HAL_SPI_TransmitReceive_IT+0x42>
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054ec:	d106      	bne.n	80054fc <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d102      	bne.n	80054fc <HAL_SPI_TransmitReceive_IT+0x3c>
 80054f6:	7dbb      	ldrb	r3, [r7, #22]
 80054f8:	2b04      	cmp	r3, #4
 80054fa:	d002      	beq.n	8005502 <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 80054fc:	2302      	movs	r3, #2
 80054fe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005500:	e07d      	b.n	80055fe <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d005      	beq.n	8005514 <HAL_SPI_TransmitReceive_IT+0x54>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d002      	beq.n	8005514 <HAL_SPI_TransmitReceive_IT+0x54>
 800550e:	887b      	ldrh	r3, [r7, #2]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d102      	bne.n	800551a <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005518:	e071      	b.n	80055fe <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005520:	2b01      	cmp	r3, #1
 8005522:	d101      	bne.n	8005528 <HAL_SPI_TransmitReceive_IT+0x68>
 8005524:	2302      	movs	r3, #2
 8005526:	e06b      	b.n	8005600 <HAL_SPI_TransmitReceive_IT+0x140>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005536:	b2db      	uxtb	r3, r3
 8005538:	2b04      	cmp	r3, #4
 800553a:	d003      	beq.n	8005544 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2205      	movs	r2, #5
 8005540:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	68ba      	ldr	r2, [r7, #8]
 800554e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	887a      	ldrh	r2, [r7, #2]
 8005554:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	887a      	ldrh	r2, [r7, #2]
 800555a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	887a      	ldrh	r2, [r7, #2]
 8005566:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	887a      	ldrh	r2, [r7, #2]
 800556e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800557a:	d906      	bls.n	800558a <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	4a23      	ldr	r2, [pc, #140]	; (800560c <HAL_SPI_TransmitReceive_IT+0x14c>)
 8005580:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	4a22      	ldr	r2, [pc, #136]	; (8005610 <HAL_SPI_TransmitReceive_IT+0x150>)
 8005586:	651a      	str	r2, [r3, #80]	; 0x50
 8005588:	e005      	b.n	8005596 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	4a21      	ldr	r2, [pc, #132]	; (8005614 <HAL_SPI_TransmitReceive_IT+0x154>)
 800558e:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	4a21      	ldr	r2, [pc, #132]	; (8005618 <HAL_SPI_TransmitReceive_IT+0x158>)
 8005594:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800559e:	d802      	bhi.n	80055a6 <HAL_SPI_TransmitReceive_IT+0xe6>
 80055a0:	887b      	ldrh	r3, [r7, #2]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d908      	bls.n	80055b8 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	685a      	ldr	r2, [r3, #4]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80055b4:	605a      	str	r2, [r3, #4]
 80055b6:	e007      	b.n	80055c8 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	685a      	ldr	r2, [r3, #4]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80055c6:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055d2:	2b40      	cmp	r3, #64	; 0x40
 80055d4:	d007      	beq.n	80055e6 <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055e4:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	685a      	ldr	r2, [r3, #4]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80055fc:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 80055fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005600:	4618      	mov	r0, r3
 8005602:	371c      	adds	r7, #28
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr
 800560c:	080059a7 	.word	0x080059a7
 8005610:	08005a0d 	.word	0x08005a0d
 8005614:	08005857 	.word	0x08005857
 8005618:	08005915 	.word	0x08005915

0800561c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b088      	sub	sp, #32
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005634:	69bb      	ldr	r3, [r7, #24]
 8005636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800563a:	2b00      	cmp	r3, #0
 800563c:	d10e      	bne.n	800565c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005644:	2b00      	cmp	r3, #0
 8005646:	d009      	beq.n	800565c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800564e:	2b00      	cmp	r3, #0
 8005650:	d004      	beq.n	800565c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	4798      	blx	r3
    return;
 800565a:	e0ce      	b.n	80057fa <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	f003 0302 	and.w	r3, r3, #2
 8005662:	2b00      	cmp	r3, #0
 8005664:	d009      	beq.n	800567a <HAL_SPI_IRQHandler+0x5e>
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800566c:	2b00      	cmp	r3, #0
 800566e:	d004      	beq.n	800567a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	4798      	blx	r3
    return;
 8005678:	e0bf      	b.n	80057fa <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	f003 0320 	and.w	r3, r3, #32
 8005680:	2b00      	cmp	r3, #0
 8005682:	d10a      	bne.n	800569a <HAL_SPI_IRQHandler+0x7e>
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800568a:	2b00      	cmp	r3, #0
 800568c:	d105      	bne.n	800569a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005694:	2b00      	cmp	r3, #0
 8005696:	f000 80b0 	beq.w	80057fa <HAL_SPI_IRQHandler+0x1de>
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	f003 0320 	and.w	r3, r3, #32
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f000 80aa 	beq.w	80057fa <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d023      	beq.n	80056f8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	2b03      	cmp	r3, #3
 80056ba:	d011      	beq.n	80056e0 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056c0:	f043 0204 	orr.w	r2, r3, #4
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056c8:	2300      	movs	r3, #0
 80056ca:	617b      	str	r3, [r7, #20]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	617b      	str	r3, [r7, #20]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	617b      	str	r3, [r7, #20]
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	e00b      	b.n	80056f8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056e0:	2300      	movs	r3, #0
 80056e2:	613b      	str	r3, [r7, #16]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	613b      	str	r3, [r7, #16]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	613b      	str	r3, [r7, #16]
 80056f4:	693b      	ldr	r3, [r7, #16]
        return;
 80056f6:	e080      	b.n	80057fa <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	f003 0320 	and.w	r3, r3, #32
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d014      	beq.n	800572c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005706:	f043 0201 	orr.w	r2, r3, #1
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800570e:	2300      	movs	r3, #0
 8005710:	60fb      	str	r3, [r7, #12]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	60fb      	str	r3, [r7, #12]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005728:	601a      	str	r2, [r3, #0]
 800572a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00c      	beq.n	8005750 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800573a:	f043 0208 	orr.w	r2, r3, #8
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005742:	2300      	movs	r3, #0
 8005744:	60bb      	str	r3, [r7, #8]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	60bb      	str	r3, [r7, #8]
 800574e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005754:	2b00      	cmp	r3, #0
 8005756:	d04f      	beq.n	80057f8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	685a      	ldr	r2, [r3, #4]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005766:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	f003 0302 	and.w	r3, r3, #2
 8005776:	2b00      	cmp	r3, #0
 8005778:	d104      	bne.n	8005784 <HAL_SPI_IRQHandler+0x168>
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	f003 0301 	and.w	r3, r3, #1
 8005780:	2b00      	cmp	r3, #0
 8005782:	d034      	beq.n	80057ee <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f022 0203 	bic.w	r2, r2, #3
 8005792:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005798:	2b00      	cmp	r3, #0
 800579a:	d011      	beq.n	80057c0 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057a0:	4a17      	ldr	r2, [pc, #92]	; (8005800 <HAL_SPI_IRQHandler+0x1e4>)
 80057a2:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057a8:	4618      	mov	r0, r3
 80057aa:	f7fd fce9 	bl	8003180 <HAL_DMA_Abort_IT>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d005      	beq.n	80057c0 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d016      	beq.n	80057f6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057cc:	4a0c      	ldr	r2, [pc, #48]	; (8005800 <HAL_SPI_IRQHandler+0x1e4>)
 80057ce:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7fd fcd3 	bl	8003180 <HAL_DMA_Abort_IT>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00a      	beq.n	80057f6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80057ec:	e003      	b.n	80057f6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f812 	bl	8005818 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80057f4:	e000      	b.n	80057f8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80057f6:	bf00      	nop
    return;
 80057f8:	bf00      	nop
  }
}
 80057fa:	3720      	adds	r7, #32
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	0800582d 	.word	0x0800582d

08005804 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800580c:	bf00      	nop
 800580e:	370c      	adds	r7, #12
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005820:	bf00      	nop
 8005822:	370c      	adds	r7, #12
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005838:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f7ff ffe5 	bl	8005818 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800584e:	bf00      	nop
 8005850:	3710      	adds	r7, #16
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}

08005856 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005856:	b580      	push	{r7, lr}
 8005858:	b082      	sub	sp, #8
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005864:	b29b      	uxth	r3, r3
 8005866:	2b01      	cmp	r3, #1
 8005868:	d923      	bls.n	80058b2 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68da      	ldr	r2, [r3, #12]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005874:	b292      	uxth	r2, r2
 8005876:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587c:	1c9a      	adds	r2, r3, #2
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005888:	b29b      	uxth	r3, r3
 800588a:	3b02      	subs	r3, #2
 800588c:	b29a      	uxth	r2, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800589a:	b29b      	uxth	r3, r3
 800589c:	2b01      	cmp	r3, #1
 800589e:	d11f      	bne.n	80058e0 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	685a      	ldr	r2, [r3, #4]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80058ae:	605a      	str	r2, [r3, #4]
 80058b0:	e016      	b.n	80058e0 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f103 020c 	add.w	r2, r3, #12
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058be:	7812      	ldrb	r2, [r2, #0]
 80058c0:	b2d2      	uxtb	r2, r2
 80058c2:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c8:	1c5a      	adds	r2, r3, #1
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	3b01      	subs	r3, #1
 80058d8:	b29a      	uxth	r2, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d10f      	bne.n	800590c <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	685a      	ldr	r2, [r3, #4]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80058fa:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005900:	b29b      	uxth	r3, r3
 8005902:	2b00      	cmp	r3, #0
 8005904:	d102      	bne.n	800590c <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 faba 	bl	8005e80 <SPI_CloseRxTx_ISR>
    }
  }
}
 800590c:	bf00      	nop
 800590e:	3708      	adds	r7, #8
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005920:	b29b      	uxth	r3, r3
 8005922:	2b01      	cmp	r3, #1
 8005924:	d912      	bls.n	800594c <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592a:	881a      	ldrh	r2, [r3, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005936:	1c9a      	adds	r2, r3, #2
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005940:	b29b      	uxth	r3, r3
 8005942:	3b02      	subs	r3, #2
 8005944:	b29a      	uxth	r2, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	87da      	strh	r2, [r3, #62]	; 0x3e
 800594a:	e012      	b.n	8005972 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	330c      	adds	r3, #12
 8005956:	7812      	ldrb	r2, [r2, #0]
 8005958:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595e:	1c5a      	adds	r2, r3, #1
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005968:	b29b      	uxth	r3, r3
 800596a:	3b01      	subs	r3, #1
 800596c:	b29a      	uxth	r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005976:	b29b      	uxth	r3, r3
 8005978:	2b00      	cmp	r3, #0
 800597a:	d110      	bne.n	800599e <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	685a      	ldr	r2, [r3, #4]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800598a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005992:	b29b      	uxth	r3, r3
 8005994:	2b00      	cmp	r3, #0
 8005996:	d102      	bne.n	800599e <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 fa71 	bl	8005e80 <SPI_CloseRxTx_ISR>
    }
  }
}
 800599e:	bf00      	nop
 80059a0:	3708      	adds	r7, #8
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b082      	sub	sp, #8
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68da      	ldr	r2, [r3, #12]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b8:	b292      	uxth	r2, r2
 80059ba:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c0:	1c9a      	adds	r2, r3, #2
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	3b01      	subs	r3, #1
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059de:	b29b      	uxth	r3, r3
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d10f      	bne.n	8005a04 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	685a      	ldr	r2, [r3, #4]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059f2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d102      	bne.n	8005a04 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 fa3e 	bl	8005e80 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005a04:	bf00      	nop
 8005a06:	3708      	adds	r7, #8
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a18:	881a      	ldrh	r2, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a24:	1c9a      	adds	r2, r3, #2
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	3b01      	subs	r3, #1
 8005a32:	b29a      	uxth	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d110      	bne.n	8005a64 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	685a      	ldr	r2, [r3, #4]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a50:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d102      	bne.n	8005a64 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 fa0e 	bl	8005e80 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005a64:	bf00      	nop
 8005a66:	3708      	adds	r7, #8
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f103 020c 	add.w	r2, r3, #12
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a80:	7812      	ldrb	r2, [r2, #0]
 8005a82:	b2d2      	uxtb	r2, r2
 8005a84:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8a:	1c5a      	adds	r2, r3, #1
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	b29a      	uxth	r2, r3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d102      	bne.n	8005ab4 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 fa28 	bl	8005f04 <SPI_CloseRx_ISR>
  }
}
 8005ab4:	bf00      	nop
 8005ab6:	3708      	adds	r7, #8
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68da      	ldr	r2, [r3, #12]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ace:	b292      	uxth	r2, r2
 8005ad0:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad6:	1c9a      	adds	r2, r3, #2
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d102      	bne.n	8005b00 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 fa02 	bl	8005f04 <SPI_CloseRx_ISR>
  }
}
 8005b00:	bf00      	nop
 8005b02:	3708      	adds	r7, #8
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b088      	sub	sp, #32
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	603b      	str	r3, [r7, #0]
 8005b14:	4613      	mov	r3, r2
 8005b16:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005b18:	f7fd fa20 	bl	8002f5c <HAL_GetTick>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b20:	1a9b      	subs	r3, r3, r2
 8005b22:	683a      	ldr	r2, [r7, #0]
 8005b24:	4413      	add	r3, r2
 8005b26:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005b28:	f7fd fa18 	bl	8002f5c <HAL_GetTick>
 8005b2c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005b2e:	4b39      	ldr	r3, [pc, #228]	; (8005c14 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	015b      	lsls	r3, r3, #5
 8005b34:	0d1b      	lsrs	r3, r3, #20
 8005b36:	69fa      	ldr	r2, [r7, #28]
 8005b38:	fb02 f303 	mul.w	r3, r2, r3
 8005b3c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b3e:	e054      	b.n	8005bea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b46:	d050      	beq.n	8005bea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005b48:	f7fd fa08 	bl	8002f5c <HAL_GetTick>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	69fa      	ldr	r2, [r7, #28]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d902      	bls.n	8005b5e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d13d      	bne.n	8005bda <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	685a      	ldr	r2, [r3, #4]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005b6c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b76:	d111      	bne.n	8005b9c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b80:	d004      	beq.n	8005b8c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b8a:	d107      	bne.n	8005b9c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b9a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ba4:	d10f      	bne.n	8005bc6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005bb4:	601a      	str	r2, [r3, #0]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005bc4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	e017      	b.n	8005c0a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d101      	bne.n	8005be4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005be0:	2300      	movs	r3, #0
 8005be2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	3b01      	subs	r3, #1
 8005be8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	689a      	ldr	r2, [r3, #8]
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	68ba      	ldr	r2, [r7, #8]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	bf0c      	ite	eq
 8005bfa:	2301      	moveq	r3, #1
 8005bfc:	2300      	movne	r3, #0
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	461a      	mov	r2, r3
 8005c02:	79fb      	ldrb	r3, [r7, #7]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d19b      	bne.n	8005b40 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3720      	adds	r7, #32
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	2000007c 	.word	0x2000007c

08005c18 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b08a      	sub	sp, #40	; 0x28
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]
 8005c24:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005c26:	2300      	movs	r3, #0
 8005c28:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005c2a:	f7fd f997 	bl	8002f5c <HAL_GetTick>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c32:	1a9b      	subs	r3, r3, r2
 8005c34:	683a      	ldr	r2, [r7, #0]
 8005c36:	4413      	add	r3, r2
 8005c38:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005c3a:	f7fd f98f 	bl	8002f5c <HAL_GetTick>
 8005c3e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	330c      	adds	r3, #12
 8005c46:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005c48:	4b3d      	ldr	r3, [pc, #244]	; (8005d40 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4413      	add	r3, r2
 8005c52:	00da      	lsls	r2, r3, #3
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	0d1b      	lsrs	r3, r3, #20
 8005c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c5a:	fb02 f303 	mul.w	r3, r2, r3
 8005c5e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005c60:	e060      	b.n	8005d24 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005c68:	d107      	bne.n	8005c7a <SPI_WaitFifoStateUntilTimeout+0x62>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d104      	bne.n	8005c7a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005c78:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c80:	d050      	beq.n	8005d24 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c82:	f7fd f96b 	bl	8002f5c <HAL_GetTick>
 8005c86:	4602      	mov	r2, r0
 8005c88:	6a3b      	ldr	r3, [r7, #32]
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d902      	bls.n	8005c98 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d13d      	bne.n	8005d14 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	685a      	ldr	r2, [r3, #4]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ca6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cb0:	d111      	bne.n	8005cd6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cba:	d004      	beq.n	8005cc6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cc4:	d107      	bne.n	8005cd6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cd4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cde:	d10f      	bne.n	8005d00 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005cee:	601a      	str	r2, [r3, #0]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cfe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005d10:	2303      	movs	r3, #3
 8005d12:	e010      	b.n	8005d36 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d101      	bne.n	8005d1e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	3b01      	subs	r3, #1
 8005d22:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	689a      	ldr	r2, [r3, #8]
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d196      	bne.n	8005c62 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3728      	adds	r7, #40	; 0x28
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	2000007c 	.word	0x2000007c

08005d44 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b086      	sub	sp, #24
 8005d48:	af02      	add	r7, sp, #8
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d58:	d111      	bne.n	8005d7e <SPI_EndRxTransaction+0x3a>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d62:	d004      	beq.n	8005d6e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d6c:	d107      	bne.n	8005d7e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d7c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	9300      	str	r3, [sp, #0]
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	2200      	movs	r2, #0
 8005d86:	2180      	movs	r1, #128	; 0x80
 8005d88:	68f8      	ldr	r0, [r7, #12]
 8005d8a:	f7ff febd 	bl	8005b08 <SPI_WaitFlagStateUntilTimeout>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d007      	beq.n	8005da4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d98:	f043 0220 	orr.w	r2, r3, #32
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005da0:	2303      	movs	r3, #3
 8005da2:	e023      	b.n	8005dec <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dac:	d11d      	bne.n	8005dea <SPI_EndRxTransaction+0xa6>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005db6:	d004      	beq.n	8005dc2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dc0:	d113      	bne.n	8005dea <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	9300      	str	r3, [sp, #0]
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f7ff ff22 	bl	8005c18 <SPI_WaitFifoStateUntilTimeout>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d007      	beq.n	8005dea <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dde:	f043 0220 	orr.w	r2, r3, #32
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e000      	b.n	8005dec <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3710      	adds	r7, #16
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b086      	sub	sp, #24
 8005df8:	af02      	add	r7, sp, #8
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	9300      	str	r3, [sp, #0]
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f7ff ff03 	bl	8005c18 <SPI_WaitFifoStateUntilTimeout>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d007      	beq.n	8005e28 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e1c:	f043 0220 	orr.w	r2, r3, #32
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005e24:	2303      	movs	r3, #3
 8005e26:	e027      	b.n	8005e78 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	9300      	str	r3, [sp, #0]
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	2180      	movs	r1, #128	; 0x80
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	f7ff fe68 	bl	8005b08 <SPI_WaitFlagStateUntilTimeout>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d007      	beq.n	8005e4e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e42:	f043 0220 	orr.w	r2, r3, #32
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e014      	b.n	8005e78 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	9300      	str	r3, [sp, #0]
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005e5a:	68f8      	ldr	r0, [r7, #12]
 8005e5c:	f7ff fedc 	bl	8005c18 <SPI_WaitFifoStateUntilTimeout>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d007      	beq.n	8005e76 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e6a:	f043 0220 	orr.w	r2, r3, #32
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e000      	b.n	8005e78 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3710      	adds	r7, #16
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e88:	f7fd f868 	bl	8002f5c <HAL_GetTick>
 8005e8c:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	685a      	ldr	r2, [r3, #4]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f022 0220 	bic.w	r2, r2, #32
 8005e9c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	2164      	movs	r1, #100	; 0x64
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f7ff ffa6 	bl	8005df4 <SPI_EndRxTxTransaction>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d005      	beq.n	8005eba <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eb2:	f043 0220 	orr.w	r2, r3, #32
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d115      	bne.n	8005eee <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	2b04      	cmp	r3, #4
 8005ecc:	d107      	bne.n	8005ede <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f7fc fc94 	bl	8002804 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8005edc:	e00e      	b.n	8005efc <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f7ff fc8c 	bl	8005804 <HAL_SPI_TxRxCpltCallback>
}
 8005eec:	e006      	b.n	8005efc <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f7ff fc8e 	bl	8005818 <HAL_SPI_ErrorCallback>
}
 8005efc:	bf00      	nop
 8005efe:	3710      	adds	r7, #16
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	685a      	ldr	r2, [r3, #4]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005f1a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8005f1c:	f7fd f81e 	bl	8002f5c <HAL_GetTick>
 8005f20:	4603      	mov	r3, r0
 8005f22:	461a      	mov	r2, r3
 8005f24:	2164      	movs	r1, #100	; 0x64
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f7ff ff0c 	bl	8005d44 <SPI_EndRxTransaction>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d005      	beq.n	8005f3e <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f36:	f043 0220 	orr.w	r2, r3, #32
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2201      	movs	r2, #1
 8005f42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d103      	bne.n	8005f56 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f7fc fc58 	bl	8002804 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8005f54:	e002      	b.n	8005f5c <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f7ff fc5e 	bl	8005818 <HAL_SPI_ErrorCallback>
}
 8005f5c:	bf00      	nop
 8005f5e:	3708      	adds	r7, #8
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d101      	bne.n	8005f76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e049      	b.n	800600a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d106      	bne.n	8005f90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f7fc fd52 	bl	8002a34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2202      	movs	r2, #2
 8005f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	3304      	adds	r3, #4
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	4610      	mov	r0, r2
 8005fa4:	f000 fa7e 	bl	80064a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3708      	adds	r7, #8
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
	...

08006014 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006014:	b480      	push	{r7}
 8006016:	b085      	sub	sp, #20
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006022:	b2db      	uxtb	r3, r3
 8006024:	2b01      	cmp	r3, #1
 8006026:	d001      	beq.n	800602c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e03b      	b.n	80060a4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2202      	movs	r2, #2
 8006030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68da      	ldr	r2, [r3, #12]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f042 0201 	orr.w	r2, r2, #1
 8006042:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a19      	ldr	r2, [pc, #100]	; (80060b0 <HAL_TIM_Base_Start_IT+0x9c>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d009      	beq.n	8006062 <HAL_TIM_Base_Start_IT+0x4e>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006056:	d004      	beq.n	8006062 <HAL_TIM_Base_Start_IT+0x4e>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a15      	ldr	r2, [pc, #84]	; (80060b4 <HAL_TIM_Base_Start_IT+0xa0>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d115      	bne.n	800608e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	689a      	ldr	r2, [r3, #8]
 8006068:	4b13      	ldr	r3, [pc, #76]	; (80060b8 <HAL_TIM_Base_Start_IT+0xa4>)
 800606a:	4013      	ands	r3, r2
 800606c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2b06      	cmp	r3, #6
 8006072:	d015      	beq.n	80060a0 <HAL_TIM_Base_Start_IT+0x8c>
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800607a:	d011      	beq.n	80060a0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f042 0201 	orr.w	r2, r2, #1
 800608a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800608c:	e008      	b.n	80060a0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f042 0201 	orr.w	r2, r2, #1
 800609c:	601a      	str	r2, [r3, #0]
 800609e:	e000      	b.n	80060a2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3714      	adds	r7, #20
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr
 80060b0:	40012c00 	.word	0x40012c00
 80060b4:	40014000 	.word	0x40014000
 80060b8:	00010007 	.word	0x00010007

080060bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	f003 0302 	and.w	r3, r3, #2
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d020      	beq.n	8006120 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f003 0302 	and.w	r3, r3, #2
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d01b      	beq.n	8006120 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f06f 0202 	mvn.w	r2, #2
 80060f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2201      	movs	r2, #1
 80060f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	699b      	ldr	r3, [r3, #24]
 80060fe:	f003 0303 	and.w	r3, r3, #3
 8006102:	2b00      	cmp	r3, #0
 8006104:	d003      	beq.n	800610e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 f9ad 	bl	8006466 <HAL_TIM_IC_CaptureCallback>
 800610c:	e005      	b.n	800611a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 f99f 	bl	8006452 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 f9b0 	bl	800647a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	f003 0304 	and.w	r3, r3, #4
 8006126:	2b00      	cmp	r3, #0
 8006128:	d020      	beq.n	800616c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f003 0304 	and.w	r3, r3, #4
 8006130:	2b00      	cmp	r3, #0
 8006132:	d01b      	beq.n	800616c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f06f 0204 	mvn.w	r2, #4
 800613c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2202      	movs	r2, #2
 8006142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	699b      	ldr	r3, [r3, #24]
 800614a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800614e:	2b00      	cmp	r3, #0
 8006150:	d003      	beq.n	800615a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 f987 	bl	8006466 <HAL_TIM_IC_CaptureCallback>
 8006158:	e005      	b.n	8006166 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 f979 	bl	8006452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 f98a 	bl	800647a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	f003 0308 	and.w	r3, r3, #8
 8006172:	2b00      	cmp	r3, #0
 8006174:	d020      	beq.n	80061b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f003 0308 	and.w	r3, r3, #8
 800617c:	2b00      	cmp	r3, #0
 800617e:	d01b      	beq.n	80061b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f06f 0208 	mvn.w	r2, #8
 8006188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2204      	movs	r2, #4
 800618e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	69db      	ldr	r3, [r3, #28]
 8006196:	f003 0303 	and.w	r3, r3, #3
 800619a:	2b00      	cmp	r3, #0
 800619c:	d003      	beq.n	80061a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 f961 	bl	8006466 <HAL_TIM_IC_CaptureCallback>
 80061a4:	e005      	b.n	80061b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 f953 	bl	8006452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 f964 	bl	800647a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	f003 0310 	and.w	r3, r3, #16
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d020      	beq.n	8006204 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f003 0310 	and.w	r3, r3, #16
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d01b      	beq.n	8006204 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f06f 0210 	mvn.w	r2, #16
 80061d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2208      	movs	r2, #8
 80061da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	69db      	ldr	r3, [r3, #28]
 80061e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d003      	beq.n	80061f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 f93b 	bl	8006466 <HAL_TIM_IC_CaptureCallback>
 80061f0:	e005      	b.n	80061fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 f92d 	bl	8006452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 f93e 	bl	800647a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	f003 0301 	and.w	r3, r3, #1
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00c      	beq.n	8006228 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f003 0301 	and.w	r3, r3, #1
 8006214:	2b00      	cmp	r3, #0
 8006216:	d007      	beq.n	8006228 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f06f 0201 	mvn.w	r2, #1
 8006220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f7fc fb22 	bl	800286c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00c      	beq.n	800624c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006238:	2b00      	cmp	r3, #0
 800623a:	d007      	beq.n	800624c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 fa9a 	bl	8006780 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00c      	beq.n	8006270 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800625c:	2b00      	cmp	r3, #0
 800625e:	d007      	beq.n	8006270 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 fa92 	bl	8006794 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006276:	2b00      	cmp	r3, #0
 8006278:	d00c      	beq.n	8006294 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006280:	2b00      	cmp	r3, #0
 8006282:	d007      	beq.n	8006294 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800628c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 f8fd 	bl	800648e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	f003 0320 	and.w	r3, r3, #32
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00c      	beq.n	80062b8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f003 0320 	and.w	r3, r3, #32
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d007      	beq.n	80062b8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f06f 0220 	mvn.w	r2, #32
 80062b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 fa5a 	bl	800676c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062b8:	bf00      	nop
 80062ba:	3710      	adds	r7, #16
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062ca:	2300      	movs	r3, #0
 80062cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d101      	bne.n	80062dc <HAL_TIM_ConfigClockSource+0x1c>
 80062d8:	2302      	movs	r3, #2
 80062da:	e0b6      	b.n	800644a <HAL_TIM_ConfigClockSource+0x18a>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2202      	movs	r2, #2
 80062e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80062fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006306:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68ba      	ldr	r2, [r7, #8]
 800630e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006318:	d03e      	beq.n	8006398 <HAL_TIM_ConfigClockSource+0xd8>
 800631a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800631e:	f200 8087 	bhi.w	8006430 <HAL_TIM_ConfigClockSource+0x170>
 8006322:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006326:	f000 8086 	beq.w	8006436 <HAL_TIM_ConfigClockSource+0x176>
 800632a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800632e:	d87f      	bhi.n	8006430 <HAL_TIM_ConfigClockSource+0x170>
 8006330:	2b70      	cmp	r3, #112	; 0x70
 8006332:	d01a      	beq.n	800636a <HAL_TIM_ConfigClockSource+0xaa>
 8006334:	2b70      	cmp	r3, #112	; 0x70
 8006336:	d87b      	bhi.n	8006430 <HAL_TIM_ConfigClockSource+0x170>
 8006338:	2b60      	cmp	r3, #96	; 0x60
 800633a:	d050      	beq.n	80063de <HAL_TIM_ConfigClockSource+0x11e>
 800633c:	2b60      	cmp	r3, #96	; 0x60
 800633e:	d877      	bhi.n	8006430 <HAL_TIM_ConfigClockSource+0x170>
 8006340:	2b50      	cmp	r3, #80	; 0x50
 8006342:	d03c      	beq.n	80063be <HAL_TIM_ConfigClockSource+0xfe>
 8006344:	2b50      	cmp	r3, #80	; 0x50
 8006346:	d873      	bhi.n	8006430 <HAL_TIM_ConfigClockSource+0x170>
 8006348:	2b40      	cmp	r3, #64	; 0x40
 800634a:	d058      	beq.n	80063fe <HAL_TIM_ConfigClockSource+0x13e>
 800634c:	2b40      	cmp	r3, #64	; 0x40
 800634e:	d86f      	bhi.n	8006430 <HAL_TIM_ConfigClockSource+0x170>
 8006350:	2b30      	cmp	r3, #48	; 0x30
 8006352:	d064      	beq.n	800641e <HAL_TIM_ConfigClockSource+0x15e>
 8006354:	2b30      	cmp	r3, #48	; 0x30
 8006356:	d86b      	bhi.n	8006430 <HAL_TIM_ConfigClockSource+0x170>
 8006358:	2b20      	cmp	r3, #32
 800635a:	d060      	beq.n	800641e <HAL_TIM_ConfigClockSource+0x15e>
 800635c:	2b20      	cmp	r3, #32
 800635e:	d867      	bhi.n	8006430 <HAL_TIM_ConfigClockSource+0x170>
 8006360:	2b00      	cmp	r3, #0
 8006362:	d05c      	beq.n	800641e <HAL_TIM_ConfigClockSource+0x15e>
 8006364:	2b10      	cmp	r3, #16
 8006366:	d05a      	beq.n	800641e <HAL_TIM_ConfigClockSource+0x15e>
 8006368:	e062      	b.n	8006430 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800637a:	f000 f971 	bl	8006660 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800638c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68ba      	ldr	r2, [r7, #8]
 8006394:	609a      	str	r2, [r3, #8]
      break;
 8006396:	e04f      	b.n	8006438 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80063a8:	f000 f95a 	bl	8006660 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	689a      	ldr	r2, [r3, #8]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063ba:	609a      	str	r2, [r3, #8]
      break;
 80063bc:	e03c      	b.n	8006438 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063ca:	461a      	mov	r2, r3
 80063cc:	f000 f8ce 	bl	800656c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2150      	movs	r1, #80	; 0x50
 80063d6:	4618      	mov	r0, r3
 80063d8:	f000 f927 	bl	800662a <TIM_ITRx_SetConfig>
      break;
 80063dc:	e02c      	b.n	8006438 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80063ea:	461a      	mov	r2, r3
 80063ec:	f000 f8ed 	bl	80065ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2160      	movs	r1, #96	; 0x60
 80063f6:	4618      	mov	r0, r3
 80063f8:	f000 f917 	bl	800662a <TIM_ITRx_SetConfig>
      break;
 80063fc:	e01c      	b.n	8006438 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800640a:	461a      	mov	r2, r3
 800640c:	f000 f8ae 	bl	800656c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2140      	movs	r1, #64	; 0x40
 8006416:	4618      	mov	r0, r3
 8006418:	f000 f907 	bl	800662a <TIM_ITRx_SetConfig>
      break;
 800641c:	e00c      	b.n	8006438 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4619      	mov	r1, r3
 8006428:	4610      	mov	r0, r2
 800642a:	f000 f8fe 	bl	800662a <TIM_ITRx_SetConfig>
      break;
 800642e:	e003      	b.n	8006438 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	73fb      	strb	r3, [r7, #15]
      break;
 8006434:	e000      	b.n	8006438 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006436:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006448:	7bfb      	ldrb	r3, [r7, #15]
}
 800644a:	4618      	mov	r0, r3
 800644c:	3710      	adds	r7, #16
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}

08006452 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006452:	b480      	push	{r7}
 8006454:	b083      	sub	sp, #12
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800645a:	bf00      	nop
 800645c:	370c      	adds	r7, #12
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr

08006466 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006466:	b480      	push	{r7}
 8006468:	b083      	sub	sp, #12
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800646e:	bf00      	nop
 8006470:	370c      	adds	r7, #12
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr

0800647a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800647a:	b480      	push	{r7}
 800647c:	b083      	sub	sp, #12
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006482:	bf00      	nop
 8006484:	370c      	adds	r7, #12
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr

0800648e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800648e:	b480      	push	{r7}
 8006490:	b083      	sub	sp, #12
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006496:	bf00      	nop
 8006498:	370c      	adds	r7, #12
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
	...

080064a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b085      	sub	sp, #20
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a2a      	ldr	r2, [pc, #168]	; (8006560 <TIM_Base_SetConfig+0xbc>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d003      	beq.n	80064c4 <TIM_Base_SetConfig+0x20>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064c2:	d108      	bne.n	80064d6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a21      	ldr	r2, [pc, #132]	; (8006560 <TIM_Base_SetConfig+0xbc>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d00b      	beq.n	80064f6 <TIM_Base_SetConfig+0x52>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064e4:	d007      	beq.n	80064f6 <TIM_Base_SetConfig+0x52>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a1e      	ldr	r2, [pc, #120]	; (8006564 <TIM_Base_SetConfig+0xc0>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d003      	beq.n	80064f6 <TIM_Base_SetConfig+0x52>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a1d      	ldr	r2, [pc, #116]	; (8006568 <TIM_Base_SetConfig+0xc4>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d108      	bne.n	8006508 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	4313      	orrs	r3, r2
 8006506:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	4313      	orrs	r3, r2
 8006514:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	689a      	ldr	r2, [r3, #8]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a0c      	ldr	r2, [pc, #48]	; (8006560 <TIM_Base_SetConfig+0xbc>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d007      	beq.n	8006544 <TIM_Base_SetConfig+0xa0>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4a0b      	ldr	r2, [pc, #44]	; (8006564 <TIM_Base_SetConfig+0xc0>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d003      	beq.n	8006544 <TIM_Base_SetConfig+0xa0>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a0a      	ldr	r2, [pc, #40]	; (8006568 <TIM_Base_SetConfig+0xc4>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d103      	bne.n	800654c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	691a      	ldr	r2, [r3, #16]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	615a      	str	r2, [r3, #20]
}
 8006552:	bf00      	nop
 8006554:	3714      	adds	r7, #20
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop
 8006560:	40012c00 	.word	0x40012c00
 8006564:	40014000 	.word	0x40014000
 8006568:	40014400 	.word	0x40014400

0800656c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800656c:	b480      	push	{r7}
 800656e:	b087      	sub	sp, #28
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6a1b      	ldr	r3, [r3, #32]
 800657c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	6a1b      	ldr	r3, [r3, #32]
 8006582:	f023 0201 	bic.w	r2, r3, #1
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	699b      	ldr	r3, [r3, #24]
 800658e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006596:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	011b      	lsls	r3, r3, #4
 800659c:	693a      	ldr	r2, [r7, #16]
 800659e:	4313      	orrs	r3, r2
 80065a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	f023 030a 	bic.w	r3, r3, #10
 80065a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065aa:	697a      	ldr	r2, [r7, #20]
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	621a      	str	r2, [r3, #32]
}
 80065be:	bf00      	nop
 80065c0:	371c      	adds	r7, #28
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr

080065ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065ca:	b480      	push	{r7}
 80065cc:	b087      	sub	sp, #28
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	60f8      	str	r0, [r7, #12]
 80065d2:	60b9      	str	r1, [r7, #8]
 80065d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6a1b      	ldr	r3, [r3, #32]
 80065da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6a1b      	ldr	r3, [r3, #32]
 80065e0:	f023 0210 	bic.w	r2, r3, #16
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	031b      	lsls	r3, r3, #12
 80065fa:	693a      	ldr	r2, [r7, #16]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006606:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	011b      	lsls	r3, r3, #4
 800660c:	697a      	ldr	r2, [r7, #20]
 800660e:	4313      	orrs	r3, r2
 8006610:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	693a      	ldr	r2, [r7, #16]
 8006616:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	697a      	ldr	r2, [r7, #20]
 800661c:	621a      	str	r2, [r3, #32]
}
 800661e:	bf00      	nop
 8006620:	371c      	adds	r7, #28
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr

0800662a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800662a:	b480      	push	{r7}
 800662c:	b085      	sub	sp, #20
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
 8006632:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006640:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006642:	683a      	ldr	r2, [r7, #0]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	4313      	orrs	r3, r2
 8006648:	f043 0307 	orr.w	r3, r3, #7
 800664c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	68fa      	ldr	r2, [r7, #12]
 8006652:	609a      	str	r2, [r3, #8]
}
 8006654:	bf00      	nop
 8006656:	3714      	adds	r7, #20
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006660:	b480      	push	{r7}
 8006662:	b087      	sub	sp, #28
 8006664:	af00      	add	r7, sp, #0
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	607a      	str	r2, [r7, #4]
 800666c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800667a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	021a      	lsls	r2, r3, #8
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	431a      	orrs	r2, r3
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	4313      	orrs	r3, r2
 8006688:	697a      	ldr	r2, [r7, #20]
 800668a:	4313      	orrs	r3, r2
 800668c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	697a      	ldr	r2, [r7, #20]
 8006692:	609a      	str	r2, [r3, #8]
}
 8006694:	bf00      	nop
 8006696:	371c      	adds	r7, #28
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b085      	sub	sp, #20
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d101      	bne.n	80066b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066b4:	2302      	movs	r3, #2
 80066b6:	e04f      	b.n	8006758 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2202      	movs	r2, #2
 80066c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a21      	ldr	r2, [pc, #132]	; (8006764 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d108      	bne.n	80066f4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80066e8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	4313      	orrs	r3, r2
 8006704:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a14      	ldr	r2, [pc, #80]	; (8006764 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d009      	beq.n	800672c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006720:	d004      	beq.n	800672c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a10      	ldr	r2, [pc, #64]	; (8006768 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d10c      	bne.n	8006746 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006732:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	68ba      	ldr	r2, [r7, #8]
 800673a:	4313      	orrs	r3, r2
 800673c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	68ba      	ldr	r2, [r7, #8]
 8006744:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2201      	movs	r2, #1
 800674a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006756:	2300      	movs	r3, #0
}
 8006758:	4618      	mov	r0, r3
 800675a:	3714      	adds	r7, #20
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr
 8006764:	40012c00 	.word	0x40012c00
 8006768:	40014000 	.word	0x40014000

0800676c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006774:	bf00      	nop
 8006776:	370c      	adds	r7, #12
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006788:	bf00      	nop
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800679c:	bf00      	nop
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d101      	bne.n	80067ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e040      	b.n	800683c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d106      	bne.n	80067d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f7fc f974 	bl	8002ab8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2224      	movs	r2, #36	; 0x24
 80067d4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f022 0201 	bic.w	r2, r2, #1
 80067e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d002      	beq.n	80067f4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 fade 	bl	8006db0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 f8af 	bl	8006958 <UART_SetConfig>
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d101      	bne.n	8006804 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	e01b      	b.n	800683c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	685a      	ldr	r2, [r3, #4]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006812:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	689a      	ldr	r2, [r3, #8]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006822:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f042 0201 	orr.w	r2, r2, #1
 8006832:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 fb5d 	bl	8006ef4 <UART_CheckIdleState>
 800683a:	4603      	mov	r3, r0
}
 800683c:	4618      	mov	r0, r3
 800683e:	3708      	adds	r7, #8
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b08a      	sub	sp, #40	; 0x28
 8006848:	af02      	add	r7, sp, #8
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	603b      	str	r3, [r7, #0]
 8006850:	4613      	mov	r3, r2
 8006852:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006858:	2b20      	cmp	r3, #32
 800685a:	d178      	bne.n	800694e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d002      	beq.n	8006868 <HAL_UART_Transmit+0x24>
 8006862:	88fb      	ldrh	r3, [r7, #6]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d101      	bne.n	800686c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e071      	b.n	8006950 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2200      	movs	r2, #0
 8006870:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2221      	movs	r2, #33	; 0x21
 8006878:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800687a:	f7fc fb6f 	bl	8002f5c <HAL_GetTick>
 800687e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	88fa      	ldrh	r2, [r7, #6]
 8006884:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	88fa      	ldrh	r2, [r7, #6]
 800688c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006898:	d108      	bne.n	80068ac <HAL_UART_Transmit+0x68>
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d104      	bne.n	80068ac <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80068a2:	2300      	movs	r3, #0
 80068a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	61bb      	str	r3, [r7, #24]
 80068aa:	e003      	b.n	80068b4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80068b0:	2300      	movs	r3, #0
 80068b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80068b4:	e030      	b.n	8006918 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	9300      	str	r3, [sp, #0]
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	2200      	movs	r2, #0
 80068be:	2180      	movs	r1, #128	; 0x80
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f000 fbbf 	bl	8007044 <UART_WaitOnFlagUntilTimeout>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d004      	beq.n	80068d6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2220      	movs	r2, #32
 80068d0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80068d2:	2303      	movs	r3, #3
 80068d4:	e03c      	b.n	8006950 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80068d6:	69fb      	ldr	r3, [r7, #28]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d10b      	bne.n	80068f4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80068dc:	69bb      	ldr	r3, [r7, #24]
 80068de:	881a      	ldrh	r2, [r3, #0]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068e8:	b292      	uxth	r2, r2
 80068ea:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	3302      	adds	r3, #2
 80068f0:	61bb      	str	r3, [r7, #24]
 80068f2:	e008      	b.n	8006906 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	781a      	ldrb	r2, [r3, #0]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	b292      	uxth	r2, r2
 80068fe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	3301      	adds	r3, #1
 8006904:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800690c:	b29b      	uxth	r3, r3
 800690e:	3b01      	subs	r3, #1
 8006910:	b29a      	uxth	r2, r3
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800691e:	b29b      	uxth	r3, r3
 8006920:	2b00      	cmp	r3, #0
 8006922:	d1c8      	bne.n	80068b6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	9300      	str	r3, [sp, #0]
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	2200      	movs	r2, #0
 800692c:	2140      	movs	r1, #64	; 0x40
 800692e:	68f8      	ldr	r0, [r7, #12]
 8006930:	f000 fb88 	bl	8007044 <UART_WaitOnFlagUntilTimeout>
 8006934:	4603      	mov	r3, r0
 8006936:	2b00      	cmp	r3, #0
 8006938:	d004      	beq.n	8006944 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2220      	movs	r2, #32
 800693e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006940:	2303      	movs	r3, #3
 8006942:	e005      	b.n	8006950 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2220      	movs	r2, #32
 8006948:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800694a:	2300      	movs	r3, #0
 800694c:	e000      	b.n	8006950 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800694e:	2302      	movs	r3, #2
  }
}
 8006950:	4618      	mov	r0, r3
 8006952:	3720      	adds	r7, #32
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006958:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800695c:	b08a      	sub	sp, #40	; 0x28
 800695e:	af00      	add	r7, sp, #0
 8006960:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006962:	2300      	movs	r3, #0
 8006964:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	689a      	ldr	r2, [r3, #8]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	431a      	orrs	r2, r3
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	695b      	ldr	r3, [r3, #20]
 8006976:	431a      	orrs	r2, r3
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	69db      	ldr	r3, [r3, #28]
 800697c:	4313      	orrs	r3, r2
 800697e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	4bb4      	ldr	r3, [pc, #720]	; (8006c58 <UART_SetConfig+0x300>)
 8006988:	4013      	ands	r3, r2
 800698a:	68fa      	ldr	r2, [r7, #12]
 800698c:	6812      	ldr	r2, [r2, #0]
 800698e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006990:	430b      	orrs	r3, r1
 8006992:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	68da      	ldr	r2, [r3, #12]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	430a      	orrs	r2, r1
 80069a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4aa9      	ldr	r2, [pc, #676]	; (8006c5c <UART_SetConfig+0x304>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d004      	beq.n	80069c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6a1b      	ldr	r3, [r3, #32]
 80069be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069c0:	4313      	orrs	r3, r2
 80069c2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069d4:	430a      	orrs	r2, r1
 80069d6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4aa0      	ldr	r2, [pc, #640]	; (8006c60 <UART_SetConfig+0x308>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d126      	bne.n	8006a30 <UART_SetConfig+0xd8>
 80069e2:	4ba0      	ldr	r3, [pc, #640]	; (8006c64 <UART_SetConfig+0x30c>)
 80069e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069e8:	f003 0303 	and.w	r3, r3, #3
 80069ec:	2b03      	cmp	r3, #3
 80069ee:	d81b      	bhi.n	8006a28 <UART_SetConfig+0xd0>
 80069f0:	a201      	add	r2, pc, #4	; (adr r2, 80069f8 <UART_SetConfig+0xa0>)
 80069f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f6:	bf00      	nop
 80069f8:	08006a09 	.word	0x08006a09
 80069fc:	08006a19 	.word	0x08006a19
 8006a00:	08006a11 	.word	0x08006a11
 8006a04:	08006a21 	.word	0x08006a21
 8006a08:	2301      	movs	r3, #1
 8006a0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a0e:	e080      	b.n	8006b12 <UART_SetConfig+0x1ba>
 8006a10:	2302      	movs	r3, #2
 8006a12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a16:	e07c      	b.n	8006b12 <UART_SetConfig+0x1ba>
 8006a18:	2304      	movs	r3, #4
 8006a1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a1e:	e078      	b.n	8006b12 <UART_SetConfig+0x1ba>
 8006a20:	2308      	movs	r3, #8
 8006a22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a26:	e074      	b.n	8006b12 <UART_SetConfig+0x1ba>
 8006a28:	2310      	movs	r3, #16
 8006a2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a2e:	e070      	b.n	8006b12 <UART_SetConfig+0x1ba>
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a8c      	ldr	r2, [pc, #560]	; (8006c68 <UART_SetConfig+0x310>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d138      	bne.n	8006aac <UART_SetConfig+0x154>
 8006a3a:	4b8a      	ldr	r3, [pc, #552]	; (8006c64 <UART_SetConfig+0x30c>)
 8006a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a40:	f003 030c 	and.w	r3, r3, #12
 8006a44:	2b0c      	cmp	r3, #12
 8006a46:	d82d      	bhi.n	8006aa4 <UART_SetConfig+0x14c>
 8006a48:	a201      	add	r2, pc, #4	; (adr r2, 8006a50 <UART_SetConfig+0xf8>)
 8006a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a4e:	bf00      	nop
 8006a50:	08006a85 	.word	0x08006a85
 8006a54:	08006aa5 	.word	0x08006aa5
 8006a58:	08006aa5 	.word	0x08006aa5
 8006a5c:	08006aa5 	.word	0x08006aa5
 8006a60:	08006a95 	.word	0x08006a95
 8006a64:	08006aa5 	.word	0x08006aa5
 8006a68:	08006aa5 	.word	0x08006aa5
 8006a6c:	08006aa5 	.word	0x08006aa5
 8006a70:	08006a8d 	.word	0x08006a8d
 8006a74:	08006aa5 	.word	0x08006aa5
 8006a78:	08006aa5 	.word	0x08006aa5
 8006a7c:	08006aa5 	.word	0x08006aa5
 8006a80:	08006a9d 	.word	0x08006a9d
 8006a84:	2300      	movs	r3, #0
 8006a86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a8a:	e042      	b.n	8006b12 <UART_SetConfig+0x1ba>
 8006a8c:	2302      	movs	r3, #2
 8006a8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a92:	e03e      	b.n	8006b12 <UART_SetConfig+0x1ba>
 8006a94:	2304      	movs	r3, #4
 8006a96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a9a:	e03a      	b.n	8006b12 <UART_SetConfig+0x1ba>
 8006a9c:	2308      	movs	r3, #8
 8006a9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aa2:	e036      	b.n	8006b12 <UART_SetConfig+0x1ba>
 8006aa4:	2310      	movs	r3, #16
 8006aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aaa:	e032      	b.n	8006b12 <UART_SetConfig+0x1ba>
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a6a      	ldr	r2, [pc, #424]	; (8006c5c <UART_SetConfig+0x304>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d12a      	bne.n	8006b0c <UART_SetConfig+0x1b4>
 8006ab6:	4b6b      	ldr	r3, [pc, #428]	; (8006c64 <UART_SetConfig+0x30c>)
 8006ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006abc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006ac0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ac4:	d01a      	beq.n	8006afc <UART_SetConfig+0x1a4>
 8006ac6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006aca:	d81b      	bhi.n	8006b04 <UART_SetConfig+0x1ac>
 8006acc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ad0:	d00c      	beq.n	8006aec <UART_SetConfig+0x194>
 8006ad2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ad6:	d815      	bhi.n	8006b04 <UART_SetConfig+0x1ac>
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d003      	beq.n	8006ae4 <UART_SetConfig+0x18c>
 8006adc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ae0:	d008      	beq.n	8006af4 <UART_SetConfig+0x19c>
 8006ae2:	e00f      	b.n	8006b04 <UART_SetConfig+0x1ac>
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aea:	e012      	b.n	8006b12 <UART_SetConfig+0x1ba>
 8006aec:	2302      	movs	r3, #2
 8006aee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006af2:	e00e      	b.n	8006b12 <UART_SetConfig+0x1ba>
 8006af4:	2304      	movs	r3, #4
 8006af6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006afa:	e00a      	b.n	8006b12 <UART_SetConfig+0x1ba>
 8006afc:	2308      	movs	r3, #8
 8006afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b02:	e006      	b.n	8006b12 <UART_SetConfig+0x1ba>
 8006b04:	2310      	movs	r3, #16
 8006b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b0a:	e002      	b.n	8006b12 <UART_SetConfig+0x1ba>
 8006b0c:	2310      	movs	r3, #16
 8006b0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a51      	ldr	r2, [pc, #324]	; (8006c5c <UART_SetConfig+0x304>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d17a      	bne.n	8006c12 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006b1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b20:	2b08      	cmp	r3, #8
 8006b22:	d824      	bhi.n	8006b6e <UART_SetConfig+0x216>
 8006b24:	a201      	add	r2, pc, #4	; (adr r2, 8006b2c <UART_SetConfig+0x1d4>)
 8006b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b2a:	bf00      	nop
 8006b2c:	08006b51 	.word	0x08006b51
 8006b30:	08006b6f 	.word	0x08006b6f
 8006b34:	08006b59 	.word	0x08006b59
 8006b38:	08006b6f 	.word	0x08006b6f
 8006b3c:	08006b5f 	.word	0x08006b5f
 8006b40:	08006b6f 	.word	0x08006b6f
 8006b44:	08006b6f 	.word	0x08006b6f
 8006b48:	08006b6f 	.word	0x08006b6f
 8006b4c:	08006b67 	.word	0x08006b67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b50:	f7fd fafa 	bl	8004148 <HAL_RCC_GetPCLK1Freq>
 8006b54:	61f8      	str	r0, [r7, #28]
        break;
 8006b56:	e010      	b.n	8006b7a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b58:	4b44      	ldr	r3, [pc, #272]	; (8006c6c <UART_SetConfig+0x314>)
 8006b5a:	61fb      	str	r3, [r7, #28]
        break;
 8006b5c:	e00d      	b.n	8006b7a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b5e:	f7fd fa5b 	bl	8004018 <HAL_RCC_GetSysClockFreq>
 8006b62:	61f8      	str	r0, [r7, #28]
        break;
 8006b64:	e009      	b.n	8006b7a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b6a:	61fb      	str	r3, [r7, #28]
        break;
 8006b6c:	e005      	b.n	8006b7a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006b78:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006b7a:	69fb      	ldr	r3, [r7, #28]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	f000 8107 	beq.w	8006d90 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	685a      	ldr	r2, [r3, #4]
 8006b86:	4613      	mov	r3, r2
 8006b88:	005b      	lsls	r3, r3, #1
 8006b8a:	4413      	add	r3, r2
 8006b8c:	69fa      	ldr	r2, [r7, #28]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d305      	bcc.n	8006b9e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006b98:	69fa      	ldr	r2, [r7, #28]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d903      	bls.n	8006ba6 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006ba4:	e0f4      	b.n	8006d90 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	461c      	mov	r4, r3
 8006bac:	4615      	mov	r5, r2
 8006bae:	f04f 0200 	mov.w	r2, #0
 8006bb2:	f04f 0300 	mov.w	r3, #0
 8006bb6:	022b      	lsls	r3, r5, #8
 8006bb8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006bbc:	0222      	lsls	r2, r4, #8
 8006bbe:	68f9      	ldr	r1, [r7, #12]
 8006bc0:	6849      	ldr	r1, [r1, #4]
 8006bc2:	0849      	lsrs	r1, r1, #1
 8006bc4:	2000      	movs	r0, #0
 8006bc6:	4688      	mov	r8, r1
 8006bc8:	4681      	mov	r9, r0
 8006bca:	eb12 0a08 	adds.w	sl, r2, r8
 8006bce:	eb43 0b09 	adc.w	fp, r3, r9
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	603b      	str	r3, [r7, #0]
 8006bda:	607a      	str	r2, [r7, #4]
 8006bdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006be0:	4650      	mov	r0, sl
 8006be2:	4659      	mov	r1, fp
 8006be4:	f7f9 ffe0 	bl	8000ba8 <__aeabi_uldivmod>
 8006be8:	4602      	mov	r2, r0
 8006bea:	460b      	mov	r3, r1
 8006bec:	4613      	mov	r3, r2
 8006bee:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006bf0:	69bb      	ldr	r3, [r7, #24]
 8006bf2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bf6:	d308      	bcc.n	8006c0a <UART_SetConfig+0x2b2>
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bfe:	d204      	bcs.n	8006c0a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	69ba      	ldr	r2, [r7, #24]
 8006c06:	60da      	str	r2, [r3, #12]
 8006c08:	e0c2      	b.n	8006d90 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006c10:	e0be      	b.n	8006d90 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	69db      	ldr	r3, [r3, #28]
 8006c16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c1a:	d16a      	bne.n	8006cf2 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8006c1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c20:	2b08      	cmp	r3, #8
 8006c22:	d834      	bhi.n	8006c8e <UART_SetConfig+0x336>
 8006c24:	a201      	add	r2, pc, #4	; (adr r2, 8006c2c <UART_SetConfig+0x2d4>)
 8006c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c2a:	bf00      	nop
 8006c2c:	08006c51 	.word	0x08006c51
 8006c30:	08006c71 	.word	0x08006c71
 8006c34:	08006c79 	.word	0x08006c79
 8006c38:	08006c8f 	.word	0x08006c8f
 8006c3c:	08006c7f 	.word	0x08006c7f
 8006c40:	08006c8f 	.word	0x08006c8f
 8006c44:	08006c8f 	.word	0x08006c8f
 8006c48:	08006c8f 	.word	0x08006c8f
 8006c4c:	08006c87 	.word	0x08006c87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c50:	f7fd fa7a 	bl	8004148 <HAL_RCC_GetPCLK1Freq>
 8006c54:	61f8      	str	r0, [r7, #28]
        break;
 8006c56:	e020      	b.n	8006c9a <UART_SetConfig+0x342>
 8006c58:	efff69f3 	.word	0xefff69f3
 8006c5c:	40008000 	.word	0x40008000
 8006c60:	40013800 	.word	0x40013800
 8006c64:	40021000 	.word	0x40021000
 8006c68:	40004400 	.word	0x40004400
 8006c6c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c70:	f7fd fa80 	bl	8004174 <HAL_RCC_GetPCLK2Freq>
 8006c74:	61f8      	str	r0, [r7, #28]
        break;
 8006c76:	e010      	b.n	8006c9a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c78:	4b4c      	ldr	r3, [pc, #304]	; (8006dac <UART_SetConfig+0x454>)
 8006c7a:	61fb      	str	r3, [r7, #28]
        break;
 8006c7c:	e00d      	b.n	8006c9a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c7e:	f7fd f9cb 	bl	8004018 <HAL_RCC_GetSysClockFreq>
 8006c82:	61f8      	str	r0, [r7, #28]
        break;
 8006c84:	e009      	b.n	8006c9a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c8a:	61fb      	str	r3, [r7, #28]
        break;
 8006c8c:	e005      	b.n	8006c9a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006c98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d077      	beq.n	8006d90 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	005a      	lsls	r2, r3, #1
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	085b      	lsrs	r3, r3, #1
 8006caa:	441a      	add	r2, r3
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cb4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	2b0f      	cmp	r3, #15
 8006cba:	d916      	bls.n	8006cea <UART_SetConfig+0x392>
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cc2:	d212      	bcs.n	8006cea <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	f023 030f 	bic.w	r3, r3, #15
 8006ccc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006cce:	69bb      	ldr	r3, [r7, #24]
 8006cd0:	085b      	lsrs	r3, r3, #1
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	f003 0307 	and.w	r3, r3, #7
 8006cd8:	b29a      	uxth	r2, r3
 8006cda:	8afb      	ldrh	r3, [r7, #22]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	8afa      	ldrh	r2, [r7, #22]
 8006ce6:	60da      	str	r2, [r3, #12]
 8006ce8:	e052      	b.n	8006d90 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006cf0:	e04e      	b.n	8006d90 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006cf2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006cf6:	2b08      	cmp	r3, #8
 8006cf8:	d827      	bhi.n	8006d4a <UART_SetConfig+0x3f2>
 8006cfa:	a201      	add	r2, pc, #4	; (adr r2, 8006d00 <UART_SetConfig+0x3a8>)
 8006cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d00:	08006d25 	.word	0x08006d25
 8006d04:	08006d2d 	.word	0x08006d2d
 8006d08:	08006d35 	.word	0x08006d35
 8006d0c:	08006d4b 	.word	0x08006d4b
 8006d10:	08006d3b 	.word	0x08006d3b
 8006d14:	08006d4b 	.word	0x08006d4b
 8006d18:	08006d4b 	.word	0x08006d4b
 8006d1c:	08006d4b 	.word	0x08006d4b
 8006d20:	08006d43 	.word	0x08006d43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d24:	f7fd fa10 	bl	8004148 <HAL_RCC_GetPCLK1Freq>
 8006d28:	61f8      	str	r0, [r7, #28]
        break;
 8006d2a:	e014      	b.n	8006d56 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d2c:	f7fd fa22 	bl	8004174 <HAL_RCC_GetPCLK2Freq>
 8006d30:	61f8      	str	r0, [r7, #28]
        break;
 8006d32:	e010      	b.n	8006d56 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d34:	4b1d      	ldr	r3, [pc, #116]	; (8006dac <UART_SetConfig+0x454>)
 8006d36:	61fb      	str	r3, [r7, #28]
        break;
 8006d38:	e00d      	b.n	8006d56 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d3a:	f7fd f96d 	bl	8004018 <HAL_RCC_GetSysClockFreq>
 8006d3e:	61f8      	str	r0, [r7, #28]
        break;
 8006d40:	e009      	b.n	8006d56 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d46:	61fb      	str	r3, [r7, #28]
        break;
 8006d48:	e005      	b.n	8006d56 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006d54:	bf00      	nop
    }

    if (pclk != 0U)
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d019      	beq.n	8006d90 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	085a      	lsrs	r2, r3, #1
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	441a      	add	r2, r3
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d6e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	2b0f      	cmp	r3, #15
 8006d74:	d909      	bls.n	8006d8a <UART_SetConfig+0x432>
 8006d76:	69bb      	ldr	r3, [r7, #24]
 8006d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d7c:	d205      	bcs.n	8006d8a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	b29a      	uxth	r2, r3
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	60da      	str	r2, [r3, #12]
 8006d88:	e002      	b.n	8006d90 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006d9c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3728      	adds	r7, #40	; 0x28
 8006da4:	46bd      	mov	sp, r7
 8006da6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006daa:	bf00      	nop
 8006dac:	00f42400 	.word	0x00f42400

08006db0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dbc:	f003 0308 	and.w	r3, r3, #8
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d00a      	beq.n	8006dda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	430a      	orrs	r2, r1
 8006dd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dde:	f003 0301 	and.w	r3, r3, #1
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d00a      	beq.n	8006dfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	430a      	orrs	r2, r1
 8006dfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e00:	f003 0302 	and.w	r3, r3, #2
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d00a      	beq.n	8006e1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	430a      	orrs	r2, r1
 8006e1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e22:	f003 0304 	and.w	r3, r3, #4
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00a      	beq.n	8006e40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	430a      	orrs	r2, r1
 8006e3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e44:	f003 0310 	and.w	r3, r3, #16
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d00a      	beq.n	8006e62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	430a      	orrs	r2, r1
 8006e60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e66:	f003 0320 	and.w	r3, r3, #32
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00a      	beq.n	8006e84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	430a      	orrs	r2, r1
 8006e82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d01a      	beq.n	8006ec6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	430a      	orrs	r2, r1
 8006ea4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006eae:	d10a      	bne.n	8006ec6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	430a      	orrs	r2, r1
 8006ec4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d00a      	beq.n	8006ee8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	430a      	orrs	r2, r1
 8006ee6:	605a      	str	r2, [r3, #4]
  }
}
 8006ee8:	bf00      	nop
 8006eea:	370c      	adds	r7, #12
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr

08006ef4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b098      	sub	sp, #96	; 0x60
 8006ef8:	af02      	add	r7, sp, #8
 8006efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f04:	f7fc f82a 	bl	8002f5c <HAL_GetTick>
 8006f08:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f003 0308 	and.w	r3, r3, #8
 8006f14:	2b08      	cmp	r3, #8
 8006f16:	d12e      	bne.n	8006f76 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f1c:	9300      	str	r3, [sp, #0]
 8006f1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f20:	2200      	movs	r2, #0
 8006f22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 f88c 	bl	8007044 <UART_WaitOnFlagUntilTimeout>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d021      	beq.n	8006f76 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f3a:	e853 3f00 	ldrex	r3, [r3]
 8006f3e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f46:	653b      	str	r3, [r7, #80]	; 0x50
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f50:	647b      	str	r3, [r7, #68]	; 0x44
 8006f52:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f58:	e841 2300 	strex	r3, r2, [r1]
 8006f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d1e6      	bne.n	8006f32 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2220      	movs	r2, #32
 8006f68:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f72:	2303      	movs	r3, #3
 8006f74:	e062      	b.n	800703c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 0304 	and.w	r3, r3, #4
 8006f80:	2b04      	cmp	r3, #4
 8006f82:	d149      	bne.n	8007018 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f88:	9300      	str	r3, [sp, #0]
 8006f8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 f856 	bl	8007044 <UART_WaitOnFlagUntilTimeout>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d03c      	beq.n	8007018 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa6:	e853 3f00 	ldrex	r3, [r3]
 8006faa:	623b      	str	r3, [r7, #32]
   return(result);
 8006fac:	6a3b      	ldr	r3, [r7, #32]
 8006fae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	461a      	mov	r2, r3
 8006fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fbc:	633b      	str	r3, [r7, #48]	; 0x30
 8006fbe:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006fc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fc4:	e841 2300 	strex	r3, r2, [r1]
 8006fc8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d1e6      	bne.n	8006f9e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	3308      	adds	r3, #8
 8006fd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	e853 3f00 	ldrex	r3, [r3]
 8006fde:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f023 0301 	bic.w	r3, r3, #1
 8006fe6:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	3308      	adds	r3, #8
 8006fee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ff0:	61fa      	str	r2, [r7, #28]
 8006ff2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff4:	69b9      	ldr	r1, [r7, #24]
 8006ff6:	69fa      	ldr	r2, [r7, #28]
 8006ff8:	e841 2300 	strex	r3, r2, [r1]
 8006ffc:	617b      	str	r3, [r7, #20]
   return(result);
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d1e5      	bne.n	8006fd0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2220      	movs	r2, #32
 8007008:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007014:	2303      	movs	r3, #3
 8007016:	e011      	b.n	800703c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2220      	movs	r2, #32
 800701c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2220      	movs	r2, #32
 8007022:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800703a:	2300      	movs	r3, #0
}
 800703c:	4618      	mov	r0, r3
 800703e:	3758      	adds	r7, #88	; 0x58
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	603b      	str	r3, [r7, #0]
 8007050:	4613      	mov	r3, r2
 8007052:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007054:	e049      	b.n	80070ea <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800705c:	d045      	beq.n	80070ea <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800705e:	f7fb ff7d 	bl	8002f5c <HAL_GetTick>
 8007062:	4602      	mov	r2, r0
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	1ad3      	subs	r3, r2, r3
 8007068:	69ba      	ldr	r2, [r7, #24]
 800706a:	429a      	cmp	r2, r3
 800706c:	d302      	bcc.n	8007074 <UART_WaitOnFlagUntilTimeout+0x30>
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d101      	bne.n	8007078 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007074:	2303      	movs	r3, #3
 8007076:	e048      	b.n	800710a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0304 	and.w	r3, r3, #4
 8007082:	2b00      	cmp	r3, #0
 8007084:	d031      	beq.n	80070ea <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	69db      	ldr	r3, [r3, #28]
 800708c:	f003 0308 	and.w	r3, r3, #8
 8007090:	2b08      	cmp	r3, #8
 8007092:	d110      	bne.n	80070b6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2208      	movs	r2, #8
 800709a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800709c:	68f8      	ldr	r0, [r7, #12]
 800709e:	f000 f838 	bl	8007112 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2208      	movs	r2, #8
 80070a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	e029      	b.n	800710a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	69db      	ldr	r3, [r3, #28]
 80070bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070c4:	d111      	bne.n	80070ea <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80070d0:	68f8      	ldr	r0, [r7, #12]
 80070d2:	f000 f81e 	bl	8007112 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2220      	movs	r2, #32
 80070da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2200      	movs	r2, #0
 80070e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80070e6:	2303      	movs	r3, #3
 80070e8:	e00f      	b.n	800710a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	69da      	ldr	r2, [r3, #28]
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	4013      	ands	r3, r2
 80070f4:	68ba      	ldr	r2, [r7, #8]
 80070f6:	429a      	cmp	r2, r3
 80070f8:	bf0c      	ite	eq
 80070fa:	2301      	moveq	r3, #1
 80070fc:	2300      	movne	r3, #0
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	461a      	mov	r2, r3
 8007102:	79fb      	ldrb	r3, [r7, #7]
 8007104:	429a      	cmp	r2, r3
 8007106:	d0a6      	beq.n	8007056 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	3710      	adds	r7, #16
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007112:	b480      	push	{r7}
 8007114:	b095      	sub	sp, #84	; 0x54
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007122:	e853 3f00 	ldrex	r3, [r3]
 8007126:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800712a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800712e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	461a      	mov	r2, r3
 8007136:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007138:	643b      	str	r3, [r7, #64]	; 0x40
 800713a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800713c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800713e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007140:	e841 2300 	strex	r3, r2, [r1]
 8007144:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007148:	2b00      	cmp	r3, #0
 800714a:	d1e6      	bne.n	800711a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	3308      	adds	r3, #8
 8007152:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007154:	6a3b      	ldr	r3, [r7, #32]
 8007156:	e853 3f00 	ldrex	r3, [r3]
 800715a:	61fb      	str	r3, [r7, #28]
   return(result);
 800715c:	69fb      	ldr	r3, [r7, #28]
 800715e:	f023 0301 	bic.w	r3, r3, #1
 8007162:	64bb      	str	r3, [r7, #72]	; 0x48
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	3308      	adds	r3, #8
 800716a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800716c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800716e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007170:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007172:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007174:	e841 2300 	strex	r3, r2, [r1]
 8007178:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800717a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717c:	2b00      	cmp	r3, #0
 800717e:	d1e5      	bne.n	800714c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007184:	2b01      	cmp	r3, #1
 8007186:	d118      	bne.n	80071ba <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	e853 3f00 	ldrex	r3, [r3]
 8007194:	60bb      	str	r3, [r7, #8]
   return(result);
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	f023 0310 	bic.w	r3, r3, #16
 800719c:	647b      	str	r3, [r7, #68]	; 0x44
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	461a      	mov	r2, r3
 80071a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071a6:	61bb      	str	r3, [r7, #24]
 80071a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071aa:	6979      	ldr	r1, [r7, #20]
 80071ac:	69ba      	ldr	r2, [r7, #24]
 80071ae:	e841 2300 	strex	r3, r2, [r1]
 80071b2:	613b      	str	r3, [r7, #16]
   return(result);
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d1e6      	bne.n	8007188 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2220      	movs	r2, #32
 80071be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	669a      	str	r2, [r3, #104]	; 0x68
}
 80071ce:	bf00      	nop
 80071d0:	3754      	adds	r7, #84	; 0x54
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr

080071da <__itoa>:
 80071da:	1e93      	subs	r3, r2, #2
 80071dc:	2b22      	cmp	r3, #34	; 0x22
 80071de:	b510      	push	{r4, lr}
 80071e0:	460c      	mov	r4, r1
 80071e2:	d904      	bls.n	80071ee <__itoa+0x14>
 80071e4:	2300      	movs	r3, #0
 80071e6:	700b      	strb	r3, [r1, #0]
 80071e8:	461c      	mov	r4, r3
 80071ea:	4620      	mov	r0, r4
 80071ec:	bd10      	pop	{r4, pc}
 80071ee:	2a0a      	cmp	r2, #10
 80071f0:	d109      	bne.n	8007206 <__itoa+0x2c>
 80071f2:	2800      	cmp	r0, #0
 80071f4:	da07      	bge.n	8007206 <__itoa+0x2c>
 80071f6:	232d      	movs	r3, #45	; 0x2d
 80071f8:	700b      	strb	r3, [r1, #0]
 80071fa:	4240      	negs	r0, r0
 80071fc:	2101      	movs	r1, #1
 80071fe:	4421      	add	r1, r4
 8007200:	f000 f806 	bl	8007210 <__utoa>
 8007204:	e7f1      	b.n	80071ea <__itoa+0x10>
 8007206:	2100      	movs	r1, #0
 8007208:	e7f9      	b.n	80071fe <__itoa+0x24>

0800720a <itoa>:
 800720a:	f7ff bfe6 	b.w	80071da <__itoa>
	...

08007210 <__utoa>:
 8007210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007212:	4c1f      	ldr	r4, [pc, #124]	; (8007290 <__utoa+0x80>)
 8007214:	b08b      	sub	sp, #44	; 0x2c
 8007216:	4605      	mov	r5, r0
 8007218:	460b      	mov	r3, r1
 800721a:	466e      	mov	r6, sp
 800721c:	f104 0c20 	add.w	ip, r4, #32
 8007220:	6820      	ldr	r0, [r4, #0]
 8007222:	6861      	ldr	r1, [r4, #4]
 8007224:	4637      	mov	r7, r6
 8007226:	c703      	stmia	r7!, {r0, r1}
 8007228:	3408      	adds	r4, #8
 800722a:	4564      	cmp	r4, ip
 800722c:	463e      	mov	r6, r7
 800722e:	d1f7      	bne.n	8007220 <__utoa+0x10>
 8007230:	7921      	ldrb	r1, [r4, #4]
 8007232:	7139      	strb	r1, [r7, #4]
 8007234:	1e91      	subs	r1, r2, #2
 8007236:	6820      	ldr	r0, [r4, #0]
 8007238:	6038      	str	r0, [r7, #0]
 800723a:	2922      	cmp	r1, #34	; 0x22
 800723c:	f04f 0100 	mov.w	r1, #0
 8007240:	d904      	bls.n	800724c <__utoa+0x3c>
 8007242:	7019      	strb	r1, [r3, #0]
 8007244:	460b      	mov	r3, r1
 8007246:	4618      	mov	r0, r3
 8007248:	b00b      	add	sp, #44	; 0x2c
 800724a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800724c:	1e58      	subs	r0, r3, #1
 800724e:	4684      	mov	ip, r0
 8007250:	fbb5 f7f2 	udiv	r7, r5, r2
 8007254:	fb02 5617 	mls	r6, r2, r7, r5
 8007258:	3628      	adds	r6, #40	; 0x28
 800725a:	446e      	add	r6, sp
 800725c:	460c      	mov	r4, r1
 800725e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8007262:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8007266:	462e      	mov	r6, r5
 8007268:	42b2      	cmp	r2, r6
 800726a:	f101 0101 	add.w	r1, r1, #1
 800726e:	463d      	mov	r5, r7
 8007270:	d9ee      	bls.n	8007250 <__utoa+0x40>
 8007272:	2200      	movs	r2, #0
 8007274:	545a      	strb	r2, [r3, r1]
 8007276:	1919      	adds	r1, r3, r4
 8007278:	1aa5      	subs	r5, r4, r2
 800727a:	42aa      	cmp	r2, r5
 800727c:	dae3      	bge.n	8007246 <__utoa+0x36>
 800727e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8007282:	780e      	ldrb	r6, [r1, #0]
 8007284:	7006      	strb	r6, [r0, #0]
 8007286:	3201      	adds	r2, #1
 8007288:	f801 5901 	strb.w	r5, [r1], #-1
 800728c:	e7f4      	b.n	8007278 <__utoa+0x68>
 800728e:	bf00      	nop
 8007290:	0800a558 	.word	0x0800a558

08007294 <__cvt>:
 8007294:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007298:	ec55 4b10 	vmov	r4, r5, d0
 800729c:	2d00      	cmp	r5, #0
 800729e:	460e      	mov	r6, r1
 80072a0:	4619      	mov	r1, r3
 80072a2:	462b      	mov	r3, r5
 80072a4:	bfbb      	ittet	lt
 80072a6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80072aa:	461d      	movlt	r5, r3
 80072ac:	2300      	movge	r3, #0
 80072ae:	232d      	movlt	r3, #45	; 0x2d
 80072b0:	700b      	strb	r3, [r1, #0]
 80072b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072b4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80072b8:	4691      	mov	r9, r2
 80072ba:	f023 0820 	bic.w	r8, r3, #32
 80072be:	bfbc      	itt	lt
 80072c0:	4622      	movlt	r2, r4
 80072c2:	4614      	movlt	r4, r2
 80072c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80072c8:	d005      	beq.n	80072d6 <__cvt+0x42>
 80072ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80072ce:	d100      	bne.n	80072d2 <__cvt+0x3e>
 80072d0:	3601      	adds	r6, #1
 80072d2:	2102      	movs	r1, #2
 80072d4:	e000      	b.n	80072d8 <__cvt+0x44>
 80072d6:	2103      	movs	r1, #3
 80072d8:	ab03      	add	r3, sp, #12
 80072da:	9301      	str	r3, [sp, #4]
 80072dc:	ab02      	add	r3, sp, #8
 80072de:	9300      	str	r3, [sp, #0]
 80072e0:	ec45 4b10 	vmov	d0, r4, r5
 80072e4:	4653      	mov	r3, sl
 80072e6:	4632      	mov	r2, r6
 80072e8:	f000 fe6a 	bl	8007fc0 <_dtoa_r>
 80072ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80072f0:	4607      	mov	r7, r0
 80072f2:	d102      	bne.n	80072fa <__cvt+0x66>
 80072f4:	f019 0f01 	tst.w	r9, #1
 80072f8:	d022      	beq.n	8007340 <__cvt+0xac>
 80072fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80072fe:	eb07 0906 	add.w	r9, r7, r6
 8007302:	d110      	bne.n	8007326 <__cvt+0x92>
 8007304:	783b      	ldrb	r3, [r7, #0]
 8007306:	2b30      	cmp	r3, #48	; 0x30
 8007308:	d10a      	bne.n	8007320 <__cvt+0x8c>
 800730a:	2200      	movs	r2, #0
 800730c:	2300      	movs	r3, #0
 800730e:	4620      	mov	r0, r4
 8007310:	4629      	mov	r1, r5
 8007312:	f7f9 fbd9 	bl	8000ac8 <__aeabi_dcmpeq>
 8007316:	b918      	cbnz	r0, 8007320 <__cvt+0x8c>
 8007318:	f1c6 0601 	rsb	r6, r6, #1
 800731c:	f8ca 6000 	str.w	r6, [sl]
 8007320:	f8da 3000 	ldr.w	r3, [sl]
 8007324:	4499      	add	r9, r3
 8007326:	2200      	movs	r2, #0
 8007328:	2300      	movs	r3, #0
 800732a:	4620      	mov	r0, r4
 800732c:	4629      	mov	r1, r5
 800732e:	f7f9 fbcb 	bl	8000ac8 <__aeabi_dcmpeq>
 8007332:	b108      	cbz	r0, 8007338 <__cvt+0xa4>
 8007334:	f8cd 900c 	str.w	r9, [sp, #12]
 8007338:	2230      	movs	r2, #48	; 0x30
 800733a:	9b03      	ldr	r3, [sp, #12]
 800733c:	454b      	cmp	r3, r9
 800733e:	d307      	bcc.n	8007350 <__cvt+0xbc>
 8007340:	9b03      	ldr	r3, [sp, #12]
 8007342:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007344:	1bdb      	subs	r3, r3, r7
 8007346:	4638      	mov	r0, r7
 8007348:	6013      	str	r3, [r2, #0]
 800734a:	b004      	add	sp, #16
 800734c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007350:	1c59      	adds	r1, r3, #1
 8007352:	9103      	str	r1, [sp, #12]
 8007354:	701a      	strb	r2, [r3, #0]
 8007356:	e7f0      	b.n	800733a <__cvt+0xa6>

08007358 <__exponent>:
 8007358:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800735a:	4603      	mov	r3, r0
 800735c:	2900      	cmp	r1, #0
 800735e:	bfb8      	it	lt
 8007360:	4249      	neglt	r1, r1
 8007362:	f803 2b02 	strb.w	r2, [r3], #2
 8007366:	bfb4      	ite	lt
 8007368:	222d      	movlt	r2, #45	; 0x2d
 800736a:	222b      	movge	r2, #43	; 0x2b
 800736c:	2909      	cmp	r1, #9
 800736e:	7042      	strb	r2, [r0, #1]
 8007370:	dd2a      	ble.n	80073c8 <__exponent+0x70>
 8007372:	f10d 0207 	add.w	r2, sp, #7
 8007376:	4617      	mov	r7, r2
 8007378:	260a      	movs	r6, #10
 800737a:	4694      	mov	ip, r2
 800737c:	fb91 f5f6 	sdiv	r5, r1, r6
 8007380:	fb06 1415 	mls	r4, r6, r5, r1
 8007384:	3430      	adds	r4, #48	; 0x30
 8007386:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800738a:	460c      	mov	r4, r1
 800738c:	2c63      	cmp	r4, #99	; 0x63
 800738e:	f102 32ff 	add.w	r2, r2, #4294967295
 8007392:	4629      	mov	r1, r5
 8007394:	dcf1      	bgt.n	800737a <__exponent+0x22>
 8007396:	3130      	adds	r1, #48	; 0x30
 8007398:	f1ac 0402 	sub.w	r4, ip, #2
 800739c:	f802 1c01 	strb.w	r1, [r2, #-1]
 80073a0:	1c41      	adds	r1, r0, #1
 80073a2:	4622      	mov	r2, r4
 80073a4:	42ba      	cmp	r2, r7
 80073a6:	d30a      	bcc.n	80073be <__exponent+0x66>
 80073a8:	f10d 0209 	add.w	r2, sp, #9
 80073ac:	eba2 020c 	sub.w	r2, r2, ip
 80073b0:	42bc      	cmp	r4, r7
 80073b2:	bf88      	it	hi
 80073b4:	2200      	movhi	r2, #0
 80073b6:	4413      	add	r3, r2
 80073b8:	1a18      	subs	r0, r3, r0
 80073ba:	b003      	add	sp, #12
 80073bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073be:	f812 5b01 	ldrb.w	r5, [r2], #1
 80073c2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80073c6:	e7ed      	b.n	80073a4 <__exponent+0x4c>
 80073c8:	2330      	movs	r3, #48	; 0x30
 80073ca:	3130      	adds	r1, #48	; 0x30
 80073cc:	7083      	strb	r3, [r0, #2]
 80073ce:	70c1      	strb	r1, [r0, #3]
 80073d0:	1d03      	adds	r3, r0, #4
 80073d2:	e7f1      	b.n	80073b8 <__exponent+0x60>

080073d4 <_printf_float>:
 80073d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073d8:	ed2d 8b02 	vpush	{d8}
 80073dc:	b08d      	sub	sp, #52	; 0x34
 80073de:	460c      	mov	r4, r1
 80073e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80073e4:	4616      	mov	r6, r2
 80073e6:	461f      	mov	r7, r3
 80073e8:	4605      	mov	r5, r0
 80073ea:	f000 fce7 	bl	8007dbc <_localeconv_r>
 80073ee:	f8d0 a000 	ldr.w	sl, [r0]
 80073f2:	4650      	mov	r0, sl
 80073f4:	f7f8 ff3c 	bl	8000270 <strlen>
 80073f8:	2300      	movs	r3, #0
 80073fa:	930a      	str	r3, [sp, #40]	; 0x28
 80073fc:	6823      	ldr	r3, [r4, #0]
 80073fe:	9305      	str	r3, [sp, #20]
 8007400:	f8d8 3000 	ldr.w	r3, [r8]
 8007404:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007408:	3307      	adds	r3, #7
 800740a:	f023 0307 	bic.w	r3, r3, #7
 800740e:	f103 0208 	add.w	r2, r3, #8
 8007412:	f8c8 2000 	str.w	r2, [r8]
 8007416:	e9d3 8900 	ldrd	r8, r9, [r3]
 800741a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800741e:	9307      	str	r3, [sp, #28]
 8007420:	f8cd 8018 	str.w	r8, [sp, #24]
 8007424:	ee08 0a10 	vmov	s16, r0
 8007428:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800742c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007430:	4b9e      	ldr	r3, [pc, #632]	; (80076ac <_printf_float+0x2d8>)
 8007432:	f04f 32ff 	mov.w	r2, #4294967295
 8007436:	f7f9 fb79 	bl	8000b2c <__aeabi_dcmpun>
 800743a:	bb88      	cbnz	r0, 80074a0 <_printf_float+0xcc>
 800743c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007440:	4b9a      	ldr	r3, [pc, #616]	; (80076ac <_printf_float+0x2d8>)
 8007442:	f04f 32ff 	mov.w	r2, #4294967295
 8007446:	f7f9 fb53 	bl	8000af0 <__aeabi_dcmple>
 800744a:	bb48      	cbnz	r0, 80074a0 <_printf_float+0xcc>
 800744c:	2200      	movs	r2, #0
 800744e:	2300      	movs	r3, #0
 8007450:	4640      	mov	r0, r8
 8007452:	4649      	mov	r1, r9
 8007454:	f7f9 fb42 	bl	8000adc <__aeabi_dcmplt>
 8007458:	b110      	cbz	r0, 8007460 <_printf_float+0x8c>
 800745a:	232d      	movs	r3, #45	; 0x2d
 800745c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007460:	4a93      	ldr	r2, [pc, #588]	; (80076b0 <_printf_float+0x2dc>)
 8007462:	4b94      	ldr	r3, [pc, #592]	; (80076b4 <_printf_float+0x2e0>)
 8007464:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007468:	bf94      	ite	ls
 800746a:	4690      	movls	r8, r2
 800746c:	4698      	movhi	r8, r3
 800746e:	2303      	movs	r3, #3
 8007470:	6123      	str	r3, [r4, #16]
 8007472:	9b05      	ldr	r3, [sp, #20]
 8007474:	f023 0304 	bic.w	r3, r3, #4
 8007478:	6023      	str	r3, [r4, #0]
 800747a:	f04f 0900 	mov.w	r9, #0
 800747e:	9700      	str	r7, [sp, #0]
 8007480:	4633      	mov	r3, r6
 8007482:	aa0b      	add	r2, sp, #44	; 0x2c
 8007484:	4621      	mov	r1, r4
 8007486:	4628      	mov	r0, r5
 8007488:	f000 f9da 	bl	8007840 <_printf_common>
 800748c:	3001      	adds	r0, #1
 800748e:	f040 8090 	bne.w	80075b2 <_printf_float+0x1de>
 8007492:	f04f 30ff 	mov.w	r0, #4294967295
 8007496:	b00d      	add	sp, #52	; 0x34
 8007498:	ecbd 8b02 	vpop	{d8}
 800749c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074a0:	4642      	mov	r2, r8
 80074a2:	464b      	mov	r3, r9
 80074a4:	4640      	mov	r0, r8
 80074a6:	4649      	mov	r1, r9
 80074a8:	f7f9 fb40 	bl	8000b2c <__aeabi_dcmpun>
 80074ac:	b140      	cbz	r0, 80074c0 <_printf_float+0xec>
 80074ae:	464b      	mov	r3, r9
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	bfbc      	itt	lt
 80074b4:	232d      	movlt	r3, #45	; 0x2d
 80074b6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80074ba:	4a7f      	ldr	r2, [pc, #508]	; (80076b8 <_printf_float+0x2e4>)
 80074bc:	4b7f      	ldr	r3, [pc, #508]	; (80076bc <_printf_float+0x2e8>)
 80074be:	e7d1      	b.n	8007464 <_printf_float+0x90>
 80074c0:	6863      	ldr	r3, [r4, #4]
 80074c2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80074c6:	9206      	str	r2, [sp, #24]
 80074c8:	1c5a      	adds	r2, r3, #1
 80074ca:	d13f      	bne.n	800754c <_printf_float+0x178>
 80074cc:	2306      	movs	r3, #6
 80074ce:	6063      	str	r3, [r4, #4]
 80074d0:	9b05      	ldr	r3, [sp, #20]
 80074d2:	6861      	ldr	r1, [r4, #4]
 80074d4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80074d8:	2300      	movs	r3, #0
 80074da:	9303      	str	r3, [sp, #12]
 80074dc:	ab0a      	add	r3, sp, #40	; 0x28
 80074de:	e9cd b301 	strd	fp, r3, [sp, #4]
 80074e2:	ab09      	add	r3, sp, #36	; 0x24
 80074e4:	ec49 8b10 	vmov	d0, r8, r9
 80074e8:	9300      	str	r3, [sp, #0]
 80074ea:	6022      	str	r2, [r4, #0]
 80074ec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80074f0:	4628      	mov	r0, r5
 80074f2:	f7ff fecf 	bl	8007294 <__cvt>
 80074f6:	9b06      	ldr	r3, [sp, #24]
 80074f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074fa:	2b47      	cmp	r3, #71	; 0x47
 80074fc:	4680      	mov	r8, r0
 80074fe:	d108      	bne.n	8007512 <_printf_float+0x13e>
 8007500:	1cc8      	adds	r0, r1, #3
 8007502:	db02      	blt.n	800750a <_printf_float+0x136>
 8007504:	6863      	ldr	r3, [r4, #4]
 8007506:	4299      	cmp	r1, r3
 8007508:	dd41      	ble.n	800758e <_printf_float+0x1ba>
 800750a:	f1ab 0302 	sub.w	r3, fp, #2
 800750e:	fa5f fb83 	uxtb.w	fp, r3
 8007512:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007516:	d820      	bhi.n	800755a <_printf_float+0x186>
 8007518:	3901      	subs	r1, #1
 800751a:	465a      	mov	r2, fp
 800751c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007520:	9109      	str	r1, [sp, #36]	; 0x24
 8007522:	f7ff ff19 	bl	8007358 <__exponent>
 8007526:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007528:	1813      	adds	r3, r2, r0
 800752a:	2a01      	cmp	r2, #1
 800752c:	4681      	mov	r9, r0
 800752e:	6123      	str	r3, [r4, #16]
 8007530:	dc02      	bgt.n	8007538 <_printf_float+0x164>
 8007532:	6822      	ldr	r2, [r4, #0]
 8007534:	07d2      	lsls	r2, r2, #31
 8007536:	d501      	bpl.n	800753c <_printf_float+0x168>
 8007538:	3301      	adds	r3, #1
 800753a:	6123      	str	r3, [r4, #16]
 800753c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007540:	2b00      	cmp	r3, #0
 8007542:	d09c      	beq.n	800747e <_printf_float+0xaa>
 8007544:	232d      	movs	r3, #45	; 0x2d
 8007546:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800754a:	e798      	b.n	800747e <_printf_float+0xaa>
 800754c:	9a06      	ldr	r2, [sp, #24]
 800754e:	2a47      	cmp	r2, #71	; 0x47
 8007550:	d1be      	bne.n	80074d0 <_printf_float+0xfc>
 8007552:	2b00      	cmp	r3, #0
 8007554:	d1bc      	bne.n	80074d0 <_printf_float+0xfc>
 8007556:	2301      	movs	r3, #1
 8007558:	e7b9      	b.n	80074ce <_printf_float+0xfa>
 800755a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800755e:	d118      	bne.n	8007592 <_printf_float+0x1be>
 8007560:	2900      	cmp	r1, #0
 8007562:	6863      	ldr	r3, [r4, #4]
 8007564:	dd0b      	ble.n	800757e <_printf_float+0x1aa>
 8007566:	6121      	str	r1, [r4, #16]
 8007568:	b913      	cbnz	r3, 8007570 <_printf_float+0x19c>
 800756a:	6822      	ldr	r2, [r4, #0]
 800756c:	07d0      	lsls	r0, r2, #31
 800756e:	d502      	bpl.n	8007576 <_printf_float+0x1a2>
 8007570:	3301      	adds	r3, #1
 8007572:	440b      	add	r3, r1
 8007574:	6123      	str	r3, [r4, #16]
 8007576:	65a1      	str	r1, [r4, #88]	; 0x58
 8007578:	f04f 0900 	mov.w	r9, #0
 800757c:	e7de      	b.n	800753c <_printf_float+0x168>
 800757e:	b913      	cbnz	r3, 8007586 <_printf_float+0x1b2>
 8007580:	6822      	ldr	r2, [r4, #0]
 8007582:	07d2      	lsls	r2, r2, #31
 8007584:	d501      	bpl.n	800758a <_printf_float+0x1b6>
 8007586:	3302      	adds	r3, #2
 8007588:	e7f4      	b.n	8007574 <_printf_float+0x1a0>
 800758a:	2301      	movs	r3, #1
 800758c:	e7f2      	b.n	8007574 <_printf_float+0x1a0>
 800758e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007592:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007594:	4299      	cmp	r1, r3
 8007596:	db05      	blt.n	80075a4 <_printf_float+0x1d0>
 8007598:	6823      	ldr	r3, [r4, #0]
 800759a:	6121      	str	r1, [r4, #16]
 800759c:	07d8      	lsls	r0, r3, #31
 800759e:	d5ea      	bpl.n	8007576 <_printf_float+0x1a2>
 80075a0:	1c4b      	adds	r3, r1, #1
 80075a2:	e7e7      	b.n	8007574 <_printf_float+0x1a0>
 80075a4:	2900      	cmp	r1, #0
 80075a6:	bfd4      	ite	le
 80075a8:	f1c1 0202 	rsble	r2, r1, #2
 80075ac:	2201      	movgt	r2, #1
 80075ae:	4413      	add	r3, r2
 80075b0:	e7e0      	b.n	8007574 <_printf_float+0x1a0>
 80075b2:	6823      	ldr	r3, [r4, #0]
 80075b4:	055a      	lsls	r2, r3, #21
 80075b6:	d407      	bmi.n	80075c8 <_printf_float+0x1f4>
 80075b8:	6923      	ldr	r3, [r4, #16]
 80075ba:	4642      	mov	r2, r8
 80075bc:	4631      	mov	r1, r6
 80075be:	4628      	mov	r0, r5
 80075c0:	47b8      	blx	r7
 80075c2:	3001      	adds	r0, #1
 80075c4:	d12c      	bne.n	8007620 <_printf_float+0x24c>
 80075c6:	e764      	b.n	8007492 <_printf_float+0xbe>
 80075c8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80075cc:	f240 80e0 	bls.w	8007790 <_printf_float+0x3bc>
 80075d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80075d4:	2200      	movs	r2, #0
 80075d6:	2300      	movs	r3, #0
 80075d8:	f7f9 fa76 	bl	8000ac8 <__aeabi_dcmpeq>
 80075dc:	2800      	cmp	r0, #0
 80075de:	d034      	beq.n	800764a <_printf_float+0x276>
 80075e0:	4a37      	ldr	r2, [pc, #220]	; (80076c0 <_printf_float+0x2ec>)
 80075e2:	2301      	movs	r3, #1
 80075e4:	4631      	mov	r1, r6
 80075e6:	4628      	mov	r0, r5
 80075e8:	47b8      	blx	r7
 80075ea:	3001      	adds	r0, #1
 80075ec:	f43f af51 	beq.w	8007492 <_printf_float+0xbe>
 80075f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075f4:	429a      	cmp	r2, r3
 80075f6:	db02      	blt.n	80075fe <_printf_float+0x22a>
 80075f8:	6823      	ldr	r3, [r4, #0]
 80075fa:	07d8      	lsls	r0, r3, #31
 80075fc:	d510      	bpl.n	8007620 <_printf_float+0x24c>
 80075fe:	ee18 3a10 	vmov	r3, s16
 8007602:	4652      	mov	r2, sl
 8007604:	4631      	mov	r1, r6
 8007606:	4628      	mov	r0, r5
 8007608:	47b8      	blx	r7
 800760a:	3001      	adds	r0, #1
 800760c:	f43f af41 	beq.w	8007492 <_printf_float+0xbe>
 8007610:	f04f 0800 	mov.w	r8, #0
 8007614:	f104 091a 	add.w	r9, r4, #26
 8007618:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800761a:	3b01      	subs	r3, #1
 800761c:	4543      	cmp	r3, r8
 800761e:	dc09      	bgt.n	8007634 <_printf_float+0x260>
 8007620:	6823      	ldr	r3, [r4, #0]
 8007622:	079b      	lsls	r3, r3, #30
 8007624:	f100 8107 	bmi.w	8007836 <_printf_float+0x462>
 8007628:	68e0      	ldr	r0, [r4, #12]
 800762a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800762c:	4298      	cmp	r0, r3
 800762e:	bfb8      	it	lt
 8007630:	4618      	movlt	r0, r3
 8007632:	e730      	b.n	8007496 <_printf_float+0xc2>
 8007634:	2301      	movs	r3, #1
 8007636:	464a      	mov	r2, r9
 8007638:	4631      	mov	r1, r6
 800763a:	4628      	mov	r0, r5
 800763c:	47b8      	blx	r7
 800763e:	3001      	adds	r0, #1
 8007640:	f43f af27 	beq.w	8007492 <_printf_float+0xbe>
 8007644:	f108 0801 	add.w	r8, r8, #1
 8007648:	e7e6      	b.n	8007618 <_printf_float+0x244>
 800764a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800764c:	2b00      	cmp	r3, #0
 800764e:	dc39      	bgt.n	80076c4 <_printf_float+0x2f0>
 8007650:	4a1b      	ldr	r2, [pc, #108]	; (80076c0 <_printf_float+0x2ec>)
 8007652:	2301      	movs	r3, #1
 8007654:	4631      	mov	r1, r6
 8007656:	4628      	mov	r0, r5
 8007658:	47b8      	blx	r7
 800765a:	3001      	adds	r0, #1
 800765c:	f43f af19 	beq.w	8007492 <_printf_float+0xbe>
 8007660:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007664:	4313      	orrs	r3, r2
 8007666:	d102      	bne.n	800766e <_printf_float+0x29a>
 8007668:	6823      	ldr	r3, [r4, #0]
 800766a:	07d9      	lsls	r1, r3, #31
 800766c:	d5d8      	bpl.n	8007620 <_printf_float+0x24c>
 800766e:	ee18 3a10 	vmov	r3, s16
 8007672:	4652      	mov	r2, sl
 8007674:	4631      	mov	r1, r6
 8007676:	4628      	mov	r0, r5
 8007678:	47b8      	blx	r7
 800767a:	3001      	adds	r0, #1
 800767c:	f43f af09 	beq.w	8007492 <_printf_float+0xbe>
 8007680:	f04f 0900 	mov.w	r9, #0
 8007684:	f104 0a1a 	add.w	sl, r4, #26
 8007688:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800768a:	425b      	negs	r3, r3
 800768c:	454b      	cmp	r3, r9
 800768e:	dc01      	bgt.n	8007694 <_printf_float+0x2c0>
 8007690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007692:	e792      	b.n	80075ba <_printf_float+0x1e6>
 8007694:	2301      	movs	r3, #1
 8007696:	4652      	mov	r2, sl
 8007698:	4631      	mov	r1, r6
 800769a:	4628      	mov	r0, r5
 800769c:	47b8      	blx	r7
 800769e:	3001      	adds	r0, #1
 80076a0:	f43f aef7 	beq.w	8007492 <_printf_float+0xbe>
 80076a4:	f109 0901 	add.w	r9, r9, #1
 80076a8:	e7ee      	b.n	8007688 <_printf_float+0x2b4>
 80076aa:	bf00      	nop
 80076ac:	7fefffff 	.word	0x7fefffff
 80076b0:	0800a57d 	.word	0x0800a57d
 80076b4:	0800a581 	.word	0x0800a581
 80076b8:	0800a585 	.word	0x0800a585
 80076bc:	0800a589 	.word	0x0800a589
 80076c0:	0800a58d 	.word	0x0800a58d
 80076c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80076c8:	429a      	cmp	r2, r3
 80076ca:	bfa8      	it	ge
 80076cc:	461a      	movge	r2, r3
 80076ce:	2a00      	cmp	r2, #0
 80076d0:	4691      	mov	r9, r2
 80076d2:	dc37      	bgt.n	8007744 <_printf_float+0x370>
 80076d4:	f04f 0b00 	mov.w	fp, #0
 80076d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80076dc:	f104 021a 	add.w	r2, r4, #26
 80076e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80076e2:	9305      	str	r3, [sp, #20]
 80076e4:	eba3 0309 	sub.w	r3, r3, r9
 80076e8:	455b      	cmp	r3, fp
 80076ea:	dc33      	bgt.n	8007754 <_printf_float+0x380>
 80076ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076f0:	429a      	cmp	r2, r3
 80076f2:	db3b      	blt.n	800776c <_printf_float+0x398>
 80076f4:	6823      	ldr	r3, [r4, #0]
 80076f6:	07da      	lsls	r2, r3, #31
 80076f8:	d438      	bmi.n	800776c <_printf_float+0x398>
 80076fa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80076fe:	eba2 0903 	sub.w	r9, r2, r3
 8007702:	9b05      	ldr	r3, [sp, #20]
 8007704:	1ad2      	subs	r2, r2, r3
 8007706:	4591      	cmp	r9, r2
 8007708:	bfa8      	it	ge
 800770a:	4691      	movge	r9, r2
 800770c:	f1b9 0f00 	cmp.w	r9, #0
 8007710:	dc35      	bgt.n	800777e <_printf_float+0x3aa>
 8007712:	f04f 0800 	mov.w	r8, #0
 8007716:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800771a:	f104 0a1a 	add.w	sl, r4, #26
 800771e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007722:	1a9b      	subs	r3, r3, r2
 8007724:	eba3 0309 	sub.w	r3, r3, r9
 8007728:	4543      	cmp	r3, r8
 800772a:	f77f af79 	ble.w	8007620 <_printf_float+0x24c>
 800772e:	2301      	movs	r3, #1
 8007730:	4652      	mov	r2, sl
 8007732:	4631      	mov	r1, r6
 8007734:	4628      	mov	r0, r5
 8007736:	47b8      	blx	r7
 8007738:	3001      	adds	r0, #1
 800773a:	f43f aeaa 	beq.w	8007492 <_printf_float+0xbe>
 800773e:	f108 0801 	add.w	r8, r8, #1
 8007742:	e7ec      	b.n	800771e <_printf_float+0x34a>
 8007744:	4613      	mov	r3, r2
 8007746:	4631      	mov	r1, r6
 8007748:	4642      	mov	r2, r8
 800774a:	4628      	mov	r0, r5
 800774c:	47b8      	blx	r7
 800774e:	3001      	adds	r0, #1
 8007750:	d1c0      	bne.n	80076d4 <_printf_float+0x300>
 8007752:	e69e      	b.n	8007492 <_printf_float+0xbe>
 8007754:	2301      	movs	r3, #1
 8007756:	4631      	mov	r1, r6
 8007758:	4628      	mov	r0, r5
 800775a:	9205      	str	r2, [sp, #20]
 800775c:	47b8      	blx	r7
 800775e:	3001      	adds	r0, #1
 8007760:	f43f ae97 	beq.w	8007492 <_printf_float+0xbe>
 8007764:	9a05      	ldr	r2, [sp, #20]
 8007766:	f10b 0b01 	add.w	fp, fp, #1
 800776a:	e7b9      	b.n	80076e0 <_printf_float+0x30c>
 800776c:	ee18 3a10 	vmov	r3, s16
 8007770:	4652      	mov	r2, sl
 8007772:	4631      	mov	r1, r6
 8007774:	4628      	mov	r0, r5
 8007776:	47b8      	blx	r7
 8007778:	3001      	adds	r0, #1
 800777a:	d1be      	bne.n	80076fa <_printf_float+0x326>
 800777c:	e689      	b.n	8007492 <_printf_float+0xbe>
 800777e:	9a05      	ldr	r2, [sp, #20]
 8007780:	464b      	mov	r3, r9
 8007782:	4442      	add	r2, r8
 8007784:	4631      	mov	r1, r6
 8007786:	4628      	mov	r0, r5
 8007788:	47b8      	blx	r7
 800778a:	3001      	adds	r0, #1
 800778c:	d1c1      	bne.n	8007712 <_printf_float+0x33e>
 800778e:	e680      	b.n	8007492 <_printf_float+0xbe>
 8007790:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007792:	2a01      	cmp	r2, #1
 8007794:	dc01      	bgt.n	800779a <_printf_float+0x3c6>
 8007796:	07db      	lsls	r3, r3, #31
 8007798:	d53a      	bpl.n	8007810 <_printf_float+0x43c>
 800779a:	2301      	movs	r3, #1
 800779c:	4642      	mov	r2, r8
 800779e:	4631      	mov	r1, r6
 80077a0:	4628      	mov	r0, r5
 80077a2:	47b8      	blx	r7
 80077a4:	3001      	adds	r0, #1
 80077a6:	f43f ae74 	beq.w	8007492 <_printf_float+0xbe>
 80077aa:	ee18 3a10 	vmov	r3, s16
 80077ae:	4652      	mov	r2, sl
 80077b0:	4631      	mov	r1, r6
 80077b2:	4628      	mov	r0, r5
 80077b4:	47b8      	blx	r7
 80077b6:	3001      	adds	r0, #1
 80077b8:	f43f ae6b 	beq.w	8007492 <_printf_float+0xbe>
 80077bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80077c0:	2200      	movs	r2, #0
 80077c2:	2300      	movs	r3, #0
 80077c4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80077c8:	f7f9 f97e 	bl	8000ac8 <__aeabi_dcmpeq>
 80077cc:	b9d8      	cbnz	r0, 8007806 <_printf_float+0x432>
 80077ce:	f10a 33ff 	add.w	r3, sl, #4294967295
 80077d2:	f108 0201 	add.w	r2, r8, #1
 80077d6:	4631      	mov	r1, r6
 80077d8:	4628      	mov	r0, r5
 80077da:	47b8      	blx	r7
 80077dc:	3001      	adds	r0, #1
 80077de:	d10e      	bne.n	80077fe <_printf_float+0x42a>
 80077e0:	e657      	b.n	8007492 <_printf_float+0xbe>
 80077e2:	2301      	movs	r3, #1
 80077e4:	4652      	mov	r2, sl
 80077e6:	4631      	mov	r1, r6
 80077e8:	4628      	mov	r0, r5
 80077ea:	47b8      	blx	r7
 80077ec:	3001      	adds	r0, #1
 80077ee:	f43f ae50 	beq.w	8007492 <_printf_float+0xbe>
 80077f2:	f108 0801 	add.w	r8, r8, #1
 80077f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077f8:	3b01      	subs	r3, #1
 80077fa:	4543      	cmp	r3, r8
 80077fc:	dcf1      	bgt.n	80077e2 <_printf_float+0x40e>
 80077fe:	464b      	mov	r3, r9
 8007800:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007804:	e6da      	b.n	80075bc <_printf_float+0x1e8>
 8007806:	f04f 0800 	mov.w	r8, #0
 800780a:	f104 0a1a 	add.w	sl, r4, #26
 800780e:	e7f2      	b.n	80077f6 <_printf_float+0x422>
 8007810:	2301      	movs	r3, #1
 8007812:	4642      	mov	r2, r8
 8007814:	e7df      	b.n	80077d6 <_printf_float+0x402>
 8007816:	2301      	movs	r3, #1
 8007818:	464a      	mov	r2, r9
 800781a:	4631      	mov	r1, r6
 800781c:	4628      	mov	r0, r5
 800781e:	47b8      	blx	r7
 8007820:	3001      	adds	r0, #1
 8007822:	f43f ae36 	beq.w	8007492 <_printf_float+0xbe>
 8007826:	f108 0801 	add.w	r8, r8, #1
 800782a:	68e3      	ldr	r3, [r4, #12]
 800782c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800782e:	1a5b      	subs	r3, r3, r1
 8007830:	4543      	cmp	r3, r8
 8007832:	dcf0      	bgt.n	8007816 <_printf_float+0x442>
 8007834:	e6f8      	b.n	8007628 <_printf_float+0x254>
 8007836:	f04f 0800 	mov.w	r8, #0
 800783a:	f104 0919 	add.w	r9, r4, #25
 800783e:	e7f4      	b.n	800782a <_printf_float+0x456>

08007840 <_printf_common>:
 8007840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007844:	4616      	mov	r6, r2
 8007846:	4699      	mov	r9, r3
 8007848:	688a      	ldr	r2, [r1, #8]
 800784a:	690b      	ldr	r3, [r1, #16]
 800784c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007850:	4293      	cmp	r3, r2
 8007852:	bfb8      	it	lt
 8007854:	4613      	movlt	r3, r2
 8007856:	6033      	str	r3, [r6, #0]
 8007858:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800785c:	4607      	mov	r7, r0
 800785e:	460c      	mov	r4, r1
 8007860:	b10a      	cbz	r2, 8007866 <_printf_common+0x26>
 8007862:	3301      	adds	r3, #1
 8007864:	6033      	str	r3, [r6, #0]
 8007866:	6823      	ldr	r3, [r4, #0]
 8007868:	0699      	lsls	r1, r3, #26
 800786a:	bf42      	ittt	mi
 800786c:	6833      	ldrmi	r3, [r6, #0]
 800786e:	3302      	addmi	r3, #2
 8007870:	6033      	strmi	r3, [r6, #0]
 8007872:	6825      	ldr	r5, [r4, #0]
 8007874:	f015 0506 	ands.w	r5, r5, #6
 8007878:	d106      	bne.n	8007888 <_printf_common+0x48>
 800787a:	f104 0a19 	add.w	sl, r4, #25
 800787e:	68e3      	ldr	r3, [r4, #12]
 8007880:	6832      	ldr	r2, [r6, #0]
 8007882:	1a9b      	subs	r3, r3, r2
 8007884:	42ab      	cmp	r3, r5
 8007886:	dc26      	bgt.n	80078d6 <_printf_common+0x96>
 8007888:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800788c:	1e13      	subs	r3, r2, #0
 800788e:	6822      	ldr	r2, [r4, #0]
 8007890:	bf18      	it	ne
 8007892:	2301      	movne	r3, #1
 8007894:	0692      	lsls	r2, r2, #26
 8007896:	d42b      	bmi.n	80078f0 <_printf_common+0xb0>
 8007898:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800789c:	4649      	mov	r1, r9
 800789e:	4638      	mov	r0, r7
 80078a0:	47c0      	blx	r8
 80078a2:	3001      	adds	r0, #1
 80078a4:	d01e      	beq.n	80078e4 <_printf_common+0xa4>
 80078a6:	6823      	ldr	r3, [r4, #0]
 80078a8:	6922      	ldr	r2, [r4, #16]
 80078aa:	f003 0306 	and.w	r3, r3, #6
 80078ae:	2b04      	cmp	r3, #4
 80078b0:	bf02      	ittt	eq
 80078b2:	68e5      	ldreq	r5, [r4, #12]
 80078b4:	6833      	ldreq	r3, [r6, #0]
 80078b6:	1aed      	subeq	r5, r5, r3
 80078b8:	68a3      	ldr	r3, [r4, #8]
 80078ba:	bf0c      	ite	eq
 80078bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078c0:	2500      	movne	r5, #0
 80078c2:	4293      	cmp	r3, r2
 80078c4:	bfc4      	itt	gt
 80078c6:	1a9b      	subgt	r3, r3, r2
 80078c8:	18ed      	addgt	r5, r5, r3
 80078ca:	2600      	movs	r6, #0
 80078cc:	341a      	adds	r4, #26
 80078ce:	42b5      	cmp	r5, r6
 80078d0:	d11a      	bne.n	8007908 <_printf_common+0xc8>
 80078d2:	2000      	movs	r0, #0
 80078d4:	e008      	b.n	80078e8 <_printf_common+0xa8>
 80078d6:	2301      	movs	r3, #1
 80078d8:	4652      	mov	r2, sl
 80078da:	4649      	mov	r1, r9
 80078dc:	4638      	mov	r0, r7
 80078de:	47c0      	blx	r8
 80078e0:	3001      	adds	r0, #1
 80078e2:	d103      	bne.n	80078ec <_printf_common+0xac>
 80078e4:	f04f 30ff 	mov.w	r0, #4294967295
 80078e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078ec:	3501      	adds	r5, #1
 80078ee:	e7c6      	b.n	800787e <_printf_common+0x3e>
 80078f0:	18e1      	adds	r1, r4, r3
 80078f2:	1c5a      	adds	r2, r3, #1
 80078f4:	2030      	movs	r0, #48	; 0x30
 80078f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80078fa:	4422      	add	r2, r4
 80078fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007900:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007904:	3302      	adds	r3, #2
 8007906:	e7c7      	b.n	8007898 <_printf_common+0x58>
 8007908:	2301      	movs	r3, #1
 800790a:	4622      	mov	r2, r4
 800790c:	4649      	mov	r1, r9
 800790e:	4638      	mov	r0, r7
 8007910:	47c0      	blx	r8
 8007912:	3001      	adds	r0, #1
 8007914:	d0e6      	beq.n	80078e4 <_printf_common+0xa4>
 8007916:	3601      	adds	r6, #1
 8007918:	e7d9      	b.n	80078ce <_printf_common+0x8e>
	...

0800791c <_printf_i>:
 800791c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007920:	7e0f      	ldrb	r7, [r1, #24]
 8007922:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007924:	2f78      	cmp	r7, #120	; 0x78
 8007926:	4691      	mov	r9, r2
 8007928:	4680      	mov	r8, r0
 800792a:	460c      	mov	r4, r1
 800792c:	469a      	mov	sl, r3
 800792e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007932:	d807      	bhi.n	8007944 <_printf_i+0x28>
 8007934:	2f62      	cmp	r7, #98	; 0x62
 8007936:	d80a      	bhi.n	800794e <_printf_i+0x32>
 8007938:	2f00      	cmp	r7, #0
 800793a:	f000 80d4 	beq.w	8007ae6 <_printf_i+0x1ca>
 800793e:	2f58      	cmp	r7, #88	; 0x58
 8007940:	f000 80c0 	beq.w	8007ac4 <_printf_i+0x1a8>
 8007944:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007948:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800794c:	e03a      	b.n	80079c4 <_printf_i+0xa8>
 800794e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007952:	2b15      	cmp	r3, #21
 8007954:	d8f6      	bhi.n	8007944 <_printf_i+0x28>
 8007956:	a101      	add	r1, pc, #4	; (adr r1, 800795c <_printf_i+0x40>)
 8007958:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800795c:	080079b5 	.word	0x080079b5
 8007960:	080079c9 	.word	0x080079c9
 8007964:	08007945 	.word	0x08007945
 8007968:	08007945 	.word	0x08007945
 800796c:	08007945 	.word	0x08007945
 8007970:	08007945 	.word	0x08007945
 8007974:	080079c9 	.word	0x080079c9
 8007978:	08007945 	.word	0x08007945
 800797c:	08007945 	.word	0x08007945
 8007980:	08007945 	.word	0x08007945
 8007984:	08007945 	.word	0x08007945
 8007988:	08007acd 	.word	0x08007acd
 800798c:	080079f5 	.word	0x080079f5
 8007990:	08007a87 	.word	0x08007a87
 8007994:	08007945 	.word	0x08007945
 8007998:	08007945 	.word	0x08007945
 800799c:	08007aef 	.word	0x08007aef
 80079a0:	08007945 	.word	0x08007945
 80079a4:	080079f5 	.word	0x080079f5
 80079a8:	08007945 	.word	0x08007945
 80079ac:	08007945 	.word	0x08007945
 80079b0:	08007a8f 	.word	0x08007a8f
 80079b4:	682b      	ldr	r3, [r5, #0]
 80079b6:	1d1a      	adds	r2, r3, #4
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	602a      	str	r2, [r5, #0]
 80079bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80079c4:	2301      	movs	r3, #1
 80079c6:	e09f      	b.n	8007b08 <_printf_i+0x1ec>
 80079c8:	6820      	ldr	r0, [r4, #0]
 80079ca:	682b      	ldr	r3, [r5, #0]
 80079cc:	0607      	lsls	r7, r0, #24
 80079ce:	f103 0104 	add.w	r1, r3, #4
 80079d2:	6029      	str	r1, [r5, #0]
 80079d4:	d501      	bpl.n	80079da <_printf_i+0xbe>
 80079d6:	681e      	ldr	r6, [r3, #0]
 80079d8:	e003      	b.n	80079e2 <_printf_i+0xc6>
 80079da:	0646      	lsls	r6, r0, #25
 80079dc:	d5fb      	bpl.n	80079d6 <_printf_i+0xba>
 80079de:	f9b3 6000 	ldrsh.w	r6, [r3]
 80079e2:	2e00      	cmp	r6, #0
 80079e4:	da03      	bge.n	80079ee <_printf_i+0xd2>
 80079e6:	232d      	movs	r3, #45	; 0x2d
 80079e8:	4276      	negs	r6, r6
 80079ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079ee:	485a      	ldr	r0, [pc, #360]	; (8007b58 <_printf_i+0x23c>)
 80079f0:	230a      	movs	r3, #10
 80079f2:	e012      	b.n	8007a1a <_printf_i+0xfe>
 80079f4:	682b      	ldr	r3, [r5, #0]
 80079f6:	6820      	ldr	r0, [r4, #0]
 80079f8:	1d19      	adds	r1, r3, #4
 80079fa:	6029      	str	r1, [r5, #0]
 80079fc:	0605      	lsls	r5, r0, #24
 80079fe:	d501      	bpl.n	8007a04 <_printf_i+0xe8>
 8007a00:	681e      	ldr	r6, [r3, #0]
 8007a02:	e002      	b.n	8007a0a <_printf_i+0xee>
 8007a04:	0641      	lsls	r1, r0, #25
 8007a06:	d5fb      	bpl.n	8007a00 <_printf_i+0xe4>
 8007a08:	881e      	ldrh	r6, [r3, #0]
 8007a0a:	4853      	ldr	r0, [pc, #332]	; (8007b58 <_printf_i+0x23c>)
 8007a0c:	2f6f      	cmp	r7, #111	; 0x6f
 8007a0e:	bf0c      	ite	eq
 8007a10:	2308      	moveq	r3, #8
 8007a12:	230a      	movne	r3, #10
 8007a14:	2100      	movs	r1, #0
 8007a16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a1a:	6865      	ldr	r5, [r4, #4]
 8007a1c:	60a5      	str	r5, [r4, #8]
 8007a1e:	2d00      	cmp	r5, #0
 8007a20:	bfa2      	ittt	ge
 8007a22:	6821      	ldrge	r1, [r4, #0]
 8007a24:	f021 0104 	bicge.w	r1, r1, #4
 8007a28:	6021      	strge	r1, [r4, #0]
 8007a2a:	b90e      	cbnz	r6, 8007a30 <_printf_i+0x114>
 8007a2c:	2d00      	cmp	r5, #0
 8007a2e:	d04b      	beq.n	8007ac8 <_printf_i+0x1ac>
 8007a30:	4615      	mov	r5, r2
 8007a32:	fbb6 f1f3 	udiv	r1, r6, r3
 8007a36:	fb03 6711 	mls	r7, r3, r1, r6
 8007a3a:	5dc7      	ldrb	r7, [r0, r7]
 8007a3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007a40:	4637      	mov	r7, r6
 8007a42:	42bb      	cmp	r3, r7
 8007a44:	460e      	mov	r6, r1
 8007a46:	d9f4      	bls.n	8007a32 <_printf_i+0x116>
 8007a48:	2b08      	cmp	r3, #8
 8007a4a:	d10b      	bne.n	8007a64 <_printf_i+0x148>
 8007a4c:	6823      	ldr	r3, [r4, #0]
 8007a4e:	07de      	lsls	r6, r3, #31
 8007a50:	d508      	bpl.n	8007a64 <_printf_i+0x148>
 8007a52:	6923      	ldr	r3, [r4, #16]
 8007a54:	6861      	ldr	r1, [r4, #4]
 8007a56:	4299      	cmp	r1, r3
 8007a58:	bfde      	ittt	le
 8007a5a:	2330      	movle	r3, #48	; 0x30
 8007a5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007a60:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007a64:	1b52      	subs	r2, r2, r5
 8007a66:	6122      	str	r2, [r4, #16]
 8007a68:	f8cd a000 	str.w	sl, [sp]
 8007a6c:	464b      	mov	r3, r9
 8007a6e:	aa03      	add	r2, sp, #12
 8007a70:	4621      	mov	r1, r4
 8007a72:	4640      	mov	r0, r8
 8007a74:	f7ff fee4 	bl	8007840 <_printf_common>
 8007a78:	3001      	adds	r0, #1
 8007a7a:	d14a      	bne.n	8007b12 <_printf_i+0x1f6>
 8007a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a80:	b004      	add	sp, #16
 8007a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a86:	6823      	ldr	r3, [r4, #0]
 8007a88:	f043 0320 	orr.w	r3, r3, #32
 8007a8c:	6023      	str	r3, [r4, #0]
 8007a8e:	4833      	ldr	r0, [pc, #204]	; (8007b5c <_printf_i+0x240>)
 8007a90:	2778      	movs	r7, #120	; 0x78
 8007a92:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007a96:	6823      	ldr	r3, [r4, #0]
 8007a98:	6829      	ldr	r1, [r5, #0]
 8007a9a:	061f      	lsls	r7, r3, #24
 8007a9c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007aa0:	d402      	bmi.n	8007aa8 <_printf_i+0x18c>
 8007aa2:	065f      	lsls	r7, r3, #25
 8007aa4:	bf48      	it	mi
 8007aa6:	b2b6      	uxthmi	r6, r6
 8007aa8:	07df      	lsls	r7, r3, #31
 8007aaa:	bf48      	it	mi
 8007aac:	f043 0320 	orrmi.w	r3, r3, #32
 8007ab0:	6029      	str	r1, [r5, #0]
 8007ab2:	bf48      	it	mi
 8007ab4:	6023      	strmi	r3, [r4, #0]
 8007ab6:	b91e      	cbnz	r6, 8007ac0 <_printf_i+0x1a4>
 8007ab8:	6823      	ldr	r3, [r4, #0]
 8007aba:	f023 0320 	bic.w	r3, r3, #32
 8007abe:	6023      	str	r3, [r4, #0]
 8007ac0:	2310      	movs	r3, #16
 8007ac2:	e7a7      	b.n	8007a14 <_printf_i+0xf8>
 8007ac4:	4824      	ldr	r0, [pc, #144]	; (8007b58 <_printf_i+0x23c>)
 8007ac6:	e7e4      	b.n	8007a92 <_printf_i+0x176>
 8007ac8:	4615      	mov	r5, r2
 8007aca:	e7bd      	b.n	8007a48 <_printf_i+0x12c>
 8007acc:	682b      	ldr	r3, [r5, #0]
 8007ace:	6826      	ldr	r6, [r4, #0]
 8007ad0:	6961      	ldr	r1, [r4, #20]
 8007ad2:	1d18      	adds	r0, r3, #4
 8007ad4:	6028      	str	r0, [r5, #0]
 8007ad6:	0635      	lsls	r5, r6, #24
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	d501      	bpl.n	8007ae0 <_printf_i+0x1c4>
 8007adc:	6019      	str	r1, [r3, #0]
 8007ade:	e002      	b.n	8007ae6 <_printf_i+0x1ca>
 8007ae0:	0670      	lsls	r0, r6, #25
 8007ae2:	d5fb      	bpl.n	8007adc <_printf_i+0x1c0>
 8007ae4:	8019      	strh	r1, [r3, #0]
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	6123      	str	r3, [r4, #16]
 8007aea:	4615      	mov	r5, r2
 8007aec:	e7bc      	b.n	8007a68 <_printf_i+0x14c>
 8007aee:	682b      	ldr	r3, [r5, #0]
 8007af0:	1d1a      	adds	r2, r3, #4
 8007af2:	602a      	str	r2, [r5, #0]
 8007af4:	681d      	ldr	r5, [r3, #0]
 8007af6:	6862      	ldr	r2, [r4, #4]
 8007af8:	2100      	movs	r1, #0
 8007afa:	4628      	mov	r0, r5
 8007afc:	f7f8 fb68 	bl	80001d0 <memchr>
 8007b00:	b108      	cbz	r0, 8007b06 <_printf_i+0x1ea>
 8007b02:	1b40      	subs	r0, r0, r5
 8007b04:	6060      	str	r0, [r4, #4]
 8007b06:	6863      	ldr	r3, [r4, #4]
 8007b08:	6123      	str	r3, [r4, #16]
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b10:	e7aa      	b.n	8007a68 <_printf_i+0x14c>
 8007b12:	6923      	ldr	r3, [r4, #16]
 8007b14:	462a      	mov	r2, r5
 8007b16:	4649      	mov	r1, r9
 8007b18:	4640      	mov	r0, r8
 8007b1a:	47d0      	blx	sl
 8007b1c:	3001      	adds	r0, #1
 8007b1e:	d0ad      	beq.n	8007a7c <_printf_i+0x160>
 8007b20:	6823      	ldr	r3, [r4, #0]
 8007b22:	079b      	lsls	r3, r3, #30
 8007b24:	d413      	bmi.n	8007b4e <_printf_i+0x232>
 8007b26:	68e0      	ldr	r0, [r4, #12]
 8007b28:	9b03      	ldr	r3, [sp, #12]
 8007b2a:	4298      	cmp	r0, r3
 8007b2c:	bfb8      	it	lt
 8007b2e:	4618      	movlt	r0, r3
 8007b30:	e7a6      	b.n	8007a80 <_printf_i+0x164>
 8007b32:	2301      	movs	r3, #1
 8007b34:	4632      	mov	r2, r6
 8007b36:	4649      	mov	r1, r9
 8007b38:	4640      	mov	r0, r8
 8007b3a:	47d0      	blx	sl
 8007b3c:	3001      	adds	r0, #1
 8007b3e:	d09d      	beq.n	8007a7c <_printf_i+0x160>
 8007b40:	3501      	adds	r5, #1
 8007b42:	68e3      	ldr	r3, [r4, #12]
 8007b44:	9903      	ldr	r1, [sp, #12]
 8007b46:	1a5b      	subs	r3, r3, r1
 8007b48:	42ab      	cmp	r3, r5
 8007b4a:	dcf2      	bgt.n	8007b32 <_printf_i+0x216>
 8007b4c:	e7eb      	b.n	8007b26 <_printf_i+0x20a>
 8007b4e:	2500      	movs	r5, #0
 8007b50:	f104 0619 	add.w	r6, r4, #25
 8007b54:	e7f5      	b.n	8007b42 <_printf_i+0x226>
 8007b56:	bf00      	nop
 8007b58:	0800a58f 	.word	0x0800a58f
 8007b5c:	0800a5a0 	.word	0x0800a5a0

08007b60 <std>:
 8007b60:	2300      	movs	r3, #0
 8007b62:	b510      	push	{r4, lr}
 8007b64:	4604      	mov	r4, r0
 8007b66:	e9c0 3300 	strd	r3, r3, [r0]
 8007b6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b6e:	6083      	str	r3, [r0, #8]
 8007b70:	8181      	strh	r1, [r0, #12]
 8007b72:	6643      	str	r3, [r0, #100]	; 0x64
 8007b74:	81c2      	strh	r2, [r0, #14]
 8007b76:	6183      	str	r3, [r0, #24]
 8007b78:	4619      	mov	r1, r3
 8007b7a:	2208      	movs	r2, #8
 8007b7c:	305c      	adds	r0, #92	; 0x5c
 8007b7e:	f000 f914 	bl	8007daa <memset>
 8007b82:	4b0d      	ldr	r3, [pc, #52]	; (8007bb8 <std+0x58>)
 8007b84:	6263      	str	r3, [r4, #36]	; 0x24
 8007b86:	4b0d      	ldr	r3, [pc, #52]	; (8007bbc <std+0x5c>)
 8007b88:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b8a:	4b0d      	ldr	r3, [pc, #52]	; (8007bc0 <std+0x60>)
 8007b8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007b8e:	4b0d      	ldr	r3, [pc, #52]	; (8007bc4 <std+0x64>)
 8007b90:	6323      	str	r3, [r4, #48]	; 0x30
 8007b92:	4b0d      	ldr	r3, [pc, #52]	; (8007bc8 <std+0x68>)
 8007b94:	6224      	str	r4, [r4, #32]
 8007b96:	429c      	cmp	r4, r3
 8007b98:	d006      	beq.n	8007ba8 <std+0x48>
 8007b9a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007b9e:	4294      	cmp	r4, r2
 8007ba0:	d002      	beq.n	8007ba8 <std+0x48>
 8007ba2:	33d0      	adds	r3, #208	; 0xd0
 8007ba4:	429c      	cmp	r4, r3
 8007ba6:	d105      	bne.n	8007bb4 <std+0x54>
 8007ba8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bb0:	f000 b978 	b.w	8007ea4 <__retarget_lock_init_recursive>
 8007bb4:	bd10      	pop	{r4, pc}
 8007bb6:	bf00      	nop
 8007bb8:	08007d25 	.word	0x08007d25
 8007bbc:	08007d47 	.word	0x08007d47
 8007bc0:	08007d7f 	.word	0x08007d7f
 8007bc4:	08007da3 	.word	0x08007da3
 8007bc8:	20000500 	.word	0x20000500

08007bcc <stdio_exit_handler>:
 8007bcc:	4a02      	ldr	r2, [pc, #8]	; (8007bd8 <stdio_exit_handler+0xc>)
 8007bce:	4903      	ldr	r1, [pc, #12]	; (8007bdc <stdio_exit_handler+0x10>)
 8007bd0:	4803      	ldr	r0, [pc, #12]	; (8007be0 <stdio_exit_handler+0x14>)
 8007bd2:	f000 b869 	b.w	8007ca8 <_fwalk_sglue>
 8007bd6:	bf00      	nop
 8007bd8:	20000088 	.word	0x20000088
 8007bdc:	08009859 	.word	0x08009859
 8007be0:	20000094 	.word	0x20000094

08007be4 <cleanup_stdio>:
 8007be4:	6841      	ldr	r1, [r0, #4]
 8007be6:	4b0c      	ldr	r3, [pc, #48]	; (8007c18 <cleanup_stdio+0x34>)
 8007be8:	4299      	cmp	r1, r3
 8007bea:	b510      	push	{r4, lr}
 8007bec:	4604      	mov	r4, r0
 8007bee:	d001      	beq.n	8007bf4 <cleanup_stdio+0x10>
 8007bf0:	f001 fe32 	bl	8009858 <_fflush_r>
 8007bf4:	68a1      	ldr	r1, [r4, #8]
 8007bf6:	4b09      	ldr	r3, [pc, #36]	; (8007c1c <cleanup_stdio+0x38>)
 8007bf8:	4299      	cmp	r1, r3
 8007bfa:	d002      	beq.n	8007c02 <cleanup_stdio+0x1e>
 8007bfc:	4620      	mov	r0, r4
 8007bfe:	f001 fe2b 	bl	8009858 <_fflush_r>
 8007c02:	68e1      	ldr	r1, [r4, #12]
 8007c04:	4b06      	ldr	r3, [pc, #24]	; (8007c20 <cleanup_stdio+0x3c>)
 8007c06:	4299      	cmp	r1, r3
 8007c08:	d004      	beq.n	8007c14 <cleanup_stdio+0x30>
 8007c0a:	4620      	mov	r0, r4
 8007c0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c10:	f001 be22 	b.w	8009858 <_fflush_r>
 8007c14:	bd10      	pop	{r4, pc}
 8007c16:	bf00      	nop
 8007c18:	20000500 	.word	0x20000500
 8007c1c:	20000568 	.word	0x20000568
 8007c20:	200005d0 	.word	0x200005d0

08007c24 <global_stdio_init.part.0>:
 8007c24:	b510      	push	{r4, lr}
 8007c26:	4b0b      	ldr	r3, [pc, #44]	; (8007c54 <global_stdio_init.part.0+0x30>)
 8007c28:	4c0b      	ldr	r4, [pc, #44]	; (8007c58 <global_stdio_init.part.0+0x34>)
 8007c2a:	4a0c      	ldr	r2, [pc, #48]	; (8007c5c <global_stdio_init.part.0+0x38>)
 8007c2c:	601a      	str	r2, [r3, #0]
 8007c2e:	4620      	mov	r0, r4
 8007c30:	2200      	movs	r2, #0
 8007c32:	2104      	movs	r1, #4
 8007c34:	f7ff ff94 	bl	8007b60 <std>
 8007c38:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	2109      	movs	r1, #9
 8007c40:	f7ff ff8e 	bl	8007b60 <std>
 8007c44:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007c48:	2202      	movs	r2, #2
 8007c4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c4e:	2112      	movs	r1, #18
 8007c50:	f7ff bf86 	b.w	8007b60 <std>
 8007c54:	20000638 	.word	0x20000638
 8007c58:	20000500 	.word	0x20000500
 8007c5c:	08007bcd 	.word	0x08007bcd

08007c60 <__sfp_lock_acquire>:
 8007c60:	4801      	ldr	r0, [pc, #4]	; (8007c68 <__sfp_lock_acquire+0x8>)
 8007c62:	f000 b920 	b.w	8007ea6 <__retarget_lock_acquire_recursive>
 8007c66:	bf00      	nop
 8007c68:	20000641 	.word	0x20000641

08007c6c <__sfp_lock_release>:
 8007c6c:	4801      	ldr	r0, [pc, #4]	; (8007c74 <__sfp_lock_release+0x8>)
 8007c6e:	f000 b91b 	b.w	8007ea8 <__retarget_lock_release_recursive>
 8007c72:	bf00      	nop
 8007c74:	20000641 	.word	0x20000641

08007c78 <__sinit>:
 8007c78:	b510      	push	{r4, lr}
 8007c7a:	4604      	mov	r4, r0
 8007c7c:	f7ff fff0 	bl	8007c60 <__sfp_lock_acquire>
 8007c80:	6a23      	ldr	r3, [r4, #32]
 8007c82:	b11b      	cbz	r3, 8007c8c <__sinit+0x14>
 8007c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c88:	f7ff bff0 	b.w	8007c6c <__sfp_lock_release>
 8007c8c:	4b04      	ldr	r3, [pc, #16]	; (8007ca0 <__sinit+0x28>)
 8007c8e:	6223      	str	r3, [r4, #32]
 8007c90:	4b04      	ldr	r3, [pc, #16]	; (8007ca4 <__sinit+0x2c>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d1f5      	bne.n	8007c84 <__sinit+0xc>
 8007c98:	f7ff ffc4 	bl	8007c24 <global_stdio_init.part.0>
 8007c9c:	e7f2      	b.n	8007c84 <__sinit+0xc>
 8007c9e:	bf00      	nop
 8007ca0:	08007be5 	.word	0x08007be5
 8007ca4:	20000638 	.word	0x20000638

08007ca8 <_fwalk_sglue>:
 8007ca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cac:	4607      	mov	r7, r0
 8007cae:	4688      	mov	r8, r1
 8007cb0:	4614      	mov	r4, r2
 8007cb2:	2600      	movs	r6, #0
 8007cb4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007cb8:	f1b9 0901 	subs.w	r9, r9, #1
 8007cbc:	d505      	bpl.n	8007cca <_fwalk_sglue+0x22>
 8007cbe:	6824      	ldr	r4, [r4, #0]
 8007cc0:	2c00      	cmp	r4, #0
 8007cc2:	d1f7      	bne.n	8007cb4 <_fwalk_sglue+0xc>
 8007cc4:	4630      	mov	r0, r6
 8007cc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cca:	89ab      	ldrh	r3, [r5, #12]
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d907      	bls.n	8007ce0 <_fwalk_sglue+0x38>
 8007cd0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	d003      	beq.n	8007ce0 <_fwalk_sglue+0x38>
 8007cd8:	4629      	mov	r1, r5
 8007cda:	4638      	mov	r0, r7
 8007cdc:	47c0      	blx	r8
 8007cde:	4306      	orrs	r6, r0
 8007ce0:	3568      	adds	r5, #104	; 0x68
 8007ce2:	e7e9      	b.n	8007cb8 <_fwalk_sglue+0x10>

08007ce4 <siprintf>:
 8007ce4:	b40e      	push	{r1, r2, r3}
 8007ce6:	b500      	push	{lr}
 8007ce8:	b09c      	sub	sp, #112	; 0x70
 8007cea:	ab1d      	add	r3, sp, #116	; 0x74
 8007cec:	9002      	str	r0, [sp, #8]
 8007cee:	9006      	str	r0, [sp, #24]
 8007cf0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007cf4:	4809      	ldr	r0, [pc, #36]	; (8007d1c <siprintf+0x38>)
 8007cf6:	9107      	str	r1, [sp, #28]
 8007cf8:	9104      	str	r1, [sp, #16]
 8007cfa:	4909      	ldr	r1, [pc, #36]	; (8007d20 <siprintf+0x3c>)
 8007cfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d00:	9105      	str	r1, [sp, #20]
 8007d02:	6800      	ldr	r0, [r0, #0]
 8007d04:	9301      	str	r3, [sp, #4]
 8007d06:	a902      	add	r1, sp, #8
 8007d08:	f001 fc22 	bl	8009550 <_svfiprintf_r>
 8007d0c:	9b02      	ldr	r3, [sp, #8]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	701a      	strb	r2, [r3, #0]
 8007d12:	b01c      	add	sp, #112	; 0x70
 8007d14:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d18:	b003      	add	sp, #12
 8007d1a:	4770      	bx	lr
 8007d1c:	200000e0 	.word	0x200000e0
 8007d20:	ffff0208 	.word	0xffff0208

08007d24 <__sread>:
 8007d24:	b510      	push	{r4, lr}
 8007d26:	460c      	mov	r4, r1
 8007d28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d2c:	f000 f86c 	bl	8007e08 <_read_r>
 8007d30:	2800      	cmp	r0, #0
 8007d32:	bfab      	itete	ge
 8007d34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007d36:	89a3      	ldrhlt	r3, [r4, #12]
 8007d38:	181b      	addge	r3, r3, r0
 8007d3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007d3e:	bfac      	ite	ge
 8007d40:	6563      	strge	r3, [r4, #84]	; 0x54
 8007d42:	81a3      	strhlt	r3, [r4, #12]
 8007d44:	bd10      	pop	{r4, pc}

08007d46 <__swrite>:
 8007d46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d4a:	461f      	mov	r7, r3
 8007d4c:	898b      	ldrh	r3, [r1, #12]
 8007d4e:	05db      	lsls	r3, r3, #23
 8007d50:	4605      	mov	r5, r0
 8007d52:	460c      	mov	r4, r1
 8007d54:	4616      	mov	r6, r2
 8007d56:	d505      	bpl.n	8007d64 <__swrite+0x1e>
 8007d58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d5c:	2302      	movs	r3, #2
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f000 f840 	bl	8007de4 <_lseek_r>
 8007d64:	89a3      	ldrh	r3, [r4, #12]
 8007d66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d6e:	81a3      	strh	r3, [r4, #12]
 8007d70:	4632      	mov	r2, r6
 8007d72:	463b      	mov	r3, r7
 8007d74:	4628      	mov	r0, r5
 8007d76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d7a:	f000 b857 	b.w	8007e2c <_write_r>

08007d7e <__sseek>:
 8007d7e:	b510      	push	{r4, lr}
 8007d80:	460c      	mov	r4, r1
 8007d82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d86:	f000 f82d 	bl	8007de4 <_lseek_r>
 8007d8a:	1c43      	adds	r3, r0, #1
 8007d8c:	89a3      	ldrh	r3, [r4, #12]
 8007d8e:	bf15      	itete	ne
 8007d90:	6560      	strne	r0, [r4, #84]	; 0x54
 8007d92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007d96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007d9a:	81a3      	strheq	r3, [r4, #12]
 8007d9c:	bf18      	it	ne
 8007d9e:	81a3      	strhne	r3, [r4, #12]
 8007da0:	bd10      	pop	{r4, pc}

08007da2 <__sclose>:
 8007da2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007da6:	f000 b80d 	b.w	8007dc4 <_close_r>

08007daa <memset>:
 8007daa:	4402      	add	r2, r0
 8007dac:	4603      	mov	r3, r0
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d100      	bne.n	8007db4 <memset+0xa>
 8007db2:	4770      	bx	lr
 8007db4:	f803 1b01 	strb.w	r1, [r3], #1
 8007db8:	e7f9      	b.n	8007dae <memset+0x4>
	...

08007dbc <_localeconv_r>:
 8007dbc:	4800      	ldr	r0, [pc, #0]	; (8007dc0 <_localeconv_r+0x4>)
 8007dbe:	4770      	bx	lr
 8007dc0:	200001d4 	.word	0x200001d4

08007dc4 <_close_r>:
 8007dc4:	b538      	push	{r3, r4, r5, lr}
 8007dc6:	4d06      	ldr	r5, [pc, #24]	; (8007de0 <_close_r+0x1c>)
 8007dc8:	2300      	movs	r3, #0
 8007dca:	4604      	mov	r4, r0
 8007dcc:	4608      	mov	r0, r1
 8007dce:	602b      	str	r3, [r5, #0]
 8007dd0:	f7fa fff1 	bl	8002db6 <_close>
 8007dd4:	1c43      	adds	r3, r0, #1
 8007dd6:	d102      	bne.n	8007dde <_close_r+0x1a>
 8007dd8:	682b      	ldr	r3, [r5, #0]
 8007dda:	b103      	cbz	r3, 8007dde <_close_r+0x1a>
 8007ddc:	6023      	str	r3, [r4, #0]
 8007dde:	bd38      	pop	{r3, r4, r5, pc}
 8007de0:	2000063c 	.word	0x2000063c

08007de4 <_lseek_r>:
 8007de4:	b538      	push	{r3, r4, r5, lr}
 8007de6:	4d07      	ldr	r5, [pc, #28]	; (8007e04 <_lseek_r+0x20>)
 8007de8:	4604      	mov	r4, r0
 8007dea:	4608      	mov	r0, r1
 8007dec:	4611      	mov	r1, r2
 8007dee:	2200      	movs	r2, #0
 8007df0:	602a      	str	r2, [r5, #0]
 8007df2:	461a      	mov	r2, r3
 8007df4:	f7fb f806 	bl	8002e04 <_lseek>
 8007df8:	1c43      	adds	r3, r0, #1
 8007dfa:	d102      	bne.n	8007e02 <_lseek_r+0x1e>
 8007dfc:	682b      	ldr	r3, [r5, #0]
 8007dfe:	b103      	cbz	r3, 8007e02 <_lseek_r+0x1e>
 8007e00:	6023      	str	r3, [r4, #0]
 8007e02:	bd38      	pop	{r3, r4, r5, pc}
 8007e04:	2000063c 	.word	0x2000063c

08007e08 <_read_r>:
 8007e08:	b538      	push	{r3, r4, r5, lr}
 8007e0a:	4d07      	ldr	r5, [pc, #28]	; (8007e28 <_read_r+0x20>)
 8007e0c:	4604      	mov	r4, r0
 8007e0e:	4608      	mov	r0, r1
 8007e10:	4611      	mov	r1, r2
 8007e12:	2200      	movs	r2, #0
 8007e14:	602a      	str	r2, [r5, #0]
 8007e16:	461a      	mov	r2, r3
 8007e18:	f7fa ff94 	bl	8002d44 <_read>
 8007e1c:	1c43      	adds	r3, r0, #1
 8007e1e:	d102      	bne.n	8007e26 <_read_r+0x1e>
 8007e20:	682b      	ldr	r3, [r5, #0]
 8007e22:	b103      	cbz	r3, 8007e26 <_read_r+0x1e>
 8007e24:	6023      	str	r3, [r4, #0]
 8007e26:	bd38      	pop	{r3, r4, r5, pc}
 8007e28:	2000063c 	.word	0x2000063c

08007e2c <_write_r>:
 8007e2c:	b538      	push	{r3, r4, r5, lr}
 8007e2e:	4d07      	ldr	r5, [pc, #28]	; (8007e4c <_write_r+0x20>)
 8007e30:	4604      	mov	r4, r0
 8007e32:	4608      	mov	r0, r1
 8007e34:	4611      	mov	r1, r2
 8007e36:	2200      	movs	r2, #0
 8007e38:	602a      	str	r2, [r5, #0]
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	f7fa ff9f 	bl	8002d7e <_write>
 8007e40:	1c43      	adds	r3, r0, #1
 8007e42:	d102      	bne.n	8007e4a <_write_r+0x1e>
 8007e44:	682b      	ldr	r3, [r5, #0]
 8007e46:	b103      	cbz	r3, 8007e4a <_write_r+0x1e>
 8007e48:	6023      	str	r3, [r4, #0]
 8007e4a:	bd38      	pop	{r3, r4, r5, pc}
 8007e4c:	2000063c 	.word	0x2000063c

08007e50 <__errno>:
 8007e50:	4b01      	ldr	r3, [pc, #4]	; (8007e58 <__errno+0x8>)
 8007e52:	6818      	ldr	r0, [r3, #0]
 8007e54:	4770      	bx	lr
 8007e56:	bf00      	nop
 8007e58:	200000e0 	.word	0x200000e0

08007e5c <__libc_init_array>:
 8007e5c:	b570      	push	{r4, r5, r6, lr}
 8007e5e:	4d0d      	ldr	r5, [pc, #52]	; (8007e94 <__libc_init_array+0x38>)
 8007e60:	4c0d      	ldr	r4, [pc, #52]	; (8007e98 <__libc_init_array+0x3c>)
 8007e62:	1b64      	subs	r4, r4, r5
 8007e64:	10a4      	asrs	r4, r4, #2
 8007e66:	2600      	movs	r6, #0
 8007e68:	42a6      	cmp	r6, r4
 8007e6a:	d109      	bne.n	8007e80 <__libc_init_array+0x24>
 8007e6c:	4d0b      	ldr	r5, [pc, #44]	; (8007e9c <__libc_init_array+0x40>)
 8007e6e:	4c0c      	ldr	r4, [pc, #48]	; (8007ea0 <__libc_init_array+0x44>)
 8007e70:	f002 f896 	bl	8009fa0 <_init>
 8007e74:	1b64      	subs	r4, r4, r5
 8007e76:	10a4      	asrs	r4, r4, #2
 8007e78:	2600      	movs	r6, #0
 8007e7a:	42a6      	cmp	r6, r4
 8007e7c:	d105      	bne.n	8007e8a <__libc_init_array+0x2e>
 8007e7e:	bd70      	pop	{r4, r5, r6, pc}
 8007e80:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e84:	4798      	blx	r3
 8007e86:	3601      	adds	r6, #1
 8007e88:	e7ee      	b.n	8007e68 <__libc_init_array+0xc>
 8007e8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e8e:	4798      	blx	r3
 8007e90:	3601      	adds	r6, #1
 8007e92:	e7f2      	b.n	8007e7a <__libc_init_array+0x1e>
 8007e94:	0800a8f4 	.word	0x0800a8f4
 8007e98:	0800a8f4 	.word	0x0800a8f4
 8007e9c:	0800a8f4 	.word	0x0800a8f4
 8007ea0:	0800a8f8 	.word	0x0800a8f8

08007ea4 <__retarget_lock_init_recursive>:
 8007ea4:	4770      	bx	lr

08007ea6 <__retarget_lock_acquire_recursive>:
 8007ea6:	4770      	bx	lr

08007ea8 <__retarget_lock_release_recursive>:
 8007ea8:	4770      	bx	lr

08007eaa <quorem>:
 8007eaa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eae:	6903      	ldr	r3, [r0, #16]
 8007eb0:	690c      	ldr	r4, [r1, #16]
 8007eb2:	42a3      	cmp	r3, r4
 8007eb4:	4607      	mov	r7, r0
 8007eb6:	db7e      	blt.n	8007fb6 <quorem+0x10c>
 8007eb8:	3c01      	subs	r4, #1
 8007eba:	f101 0814 	add.w	r8, r1, #20
 8007ebe:	f100 0514 	add.w	r5, r0, #20
 8007ec2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ec6:	9301      	str	r3, [sp, #4]
 8007ec8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007ecc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007ed8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007edc:	fbb2 f6f3 	udiv	r6, r2, r3
 8007ee0:	d331      	bcc.n	8007f46 <quorem+0x9c>
 8007ee2:	f04f 0e00 	mov.w	lr, #0
 8007ee6:	4640      	mov	r0, r8
 8007ee8:	46ac      	mov	ip, r5
 8007eea:	46f2      	mov	sl, lr
 8007eec:	f850 2b04 	ldr.w	r2, [r0], #4
 8007ef0:	b293      	uxth	r3, r2
 8007ef2:	fb06 e303 	mla	r3, r6, r3, lr
 8007ef6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007efa:	0c1a      	lsrs	r2, r3, #16
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	ebaa 0303 	sub.w	r3, sl, r3
 8007f02:	f8dc a000 	ldr.w	sl, [ip]
 8007f06:	fa13 f38a 	uxtah	r3, r3, sl
 8007f0a:	fb06 220e 	mla	r2, r6, lr, r2
 8007f0e:	9300      	str	r3, [sp, #0]
 8007f10:	9b00      	ldr	r3, [sp, #0]
 8007f12:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007f16:	b292      	uxth	r2, r2
 8007f18:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007f1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f20:	f8bd 3000 	ldrh.w	r3, [sp]
 8007f24:	4581      	cmp	r9, r0
 8007f26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f2a:	f84c 3b04 	str.w	r3, [ip], #4
 8007f2e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007f32:	d2db      	bcs.n	8007eec <quorem+0x42>
 8007f34:	f855 300b 	ldr.w	r3, [r5, fp]
 8007f38:	b92b      	cbnz	r3, 8007f46 <quorem+0x9c>
 8007f3a:	9b01      	ldr	r3, [sp, #4]
 8007f3c:	3b04      	subs	r3, #4
 8007f3e:	429d      	cmp	r5, r3
 8007f40:	461a      	mov	r2, r3
 8007f42:	d32c      	bcc.n	8007f9e <quorem+0xf4>
 8007f44:	613c      	str	r4, [r7, #16]
 8007f46:	4638      	mov	r0, r7
 8007f48:	f001 f9a8 	bl	800929c <__mcmp>
 8007f4c:	2800      	cmp	r0, #0
 8007f4e:	db22      	blt.n	8007f96 <quorem+0xec>
 8007f50:	3601      	adds	r6, #1
 8007f52:	4629      	mov	r1, r5
 8007f54:	2000      	movs	r0, #0
 8007f56:	f858 2b04 	ldr.w	r2, [r8], #4
 8007f5a:	f8d1 c000 	ldr.w	ip, [r1]
 8007f5e:	b293      	uxth	r3, r2
 8007f60:	1ac3      	subs	r3, r0, r3
 8007f62:	0c12      	lsrs	r2, r2, #16
 8007f64:	fa13 f38c 	uxtah	r3, r3, ip
 8007f68:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007f6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f76:	45c1      	cmp	r9, r8
 8007f78:	f841 3b04 	str.w	r3, [r1], #4
 8007f7c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007f80:	d2e9      	bcs.n	8007f56 <quorem+0xac>
 8007f82:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f8a:	b922      	cbnz	r2, 8007f96 <quorem+0xec>
 8007f8c:	3b04      	subs	r3, #4
 8007f8e:	429d      	cmp	r5, r3
 8007f90:	461a      	mov	r2, r3
 8007f92:	d30a      	bcc.n	8007faa <quorem+0x100>
 8007f94:	613c      	str	r4, [r7, #16]
 8007f96:	4630      	mov	r0, r6
 8007f98:	b003      	add	sp, #12
 8007f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f9e:	6812      	ldr	r2, [r2, #0]
 8007fa0:	3b04      	subs	r3, #4
 8007fa2:	2a00      	cmp	r2, #0
 8007fa4:	d1ce      	bne.n	8007f44 <quorem+0x9a>
 8007fa6:	3c01      	subs	r4, #1
 8007fa8:	e7c9      	b.n	8007f3e <quorem+0x94>
 8007faa:	6812      	ldr	r2, [r2, #0]
 8007fac:	3b04      	subs	r3, #4
 8007fae:	2a00      	cmp	r2, #0
 8007fb0:	d1f0      	bne.n	8007f94 <quorem+0xea>
 8007fb2:	3c01      	subs	r4, #1
 8007fb4:	e7eb      	b.n	8007f8e <quorem+0xe4>
 8007fb6:	2000      	movs	r0, #0
 8007fb8:	e7ee      	b.n	8007f98 <quorem+0xee>
 8007fba:	0000      	movs	r0, r0
 8007fbc:	0000      	movs	r0, r0
	...

08007fc0 <_dtoa_r>:
 8007fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fc4:	ed2d 8b04 	vpush	{d8-d9}
 8007fc8:	69c5      	ldr	r5, [r0, #28]
 8007fca:	b093      	sub	sp, #76	; 0x4c
 8007fcc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007fd0:	ec57 6b10 	vmov	r6, r7, d0
 8007fd4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007fd8:	9107      	str	r1, [sp, #28]
 8007fda:	4604      	mov	r4, r0
 8007fdc:	920a      	str	r2, [sp, #40]	; 0x28
 8007fde:	930d      	str	r3, [sp, #52]	; 0x34
 8007fe0:	b975      	cbnz	r5, 8008000 <_dtoa_r+0x40>
 8007fe2:	2010      	movs	r0, #16
 8007fe4:	f000 fe2a 	bl	8008c3c <malloc>
 8007fe8:	4602      	mov	r2, r0
 8007fea:	61e0      	str	r0, [r4, #28]
 8007fec:	b920      	cbnz	r0, 8007ff8 <_dtoa_r+0x38>
 8007fee:	4bae      	ldr	r3, [pc, #696]	; (80082a8 <_dtoa_r+0x2e8>)
 8007ff0:	21ef      	movs	r1, #239	; 0xef
 8007ff2:	48ae      	ldr	r0, [pc, #696]	; (80082ac <_dtoa_r+0x2ec>)
 8007ff4:	f001 fc90 	bl	8009918 <__assert_func>
 8007ff8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007ffc:	6005      	str	r5, [r0, #0]
 8007ffe:	60c5      	str	r5, [r0, #12]
 8008000:	69e3      	ldr	r3, [r4, #28]
 8008002:	6819      	ldr	r1, [r3, #0]
 8008004:	b151      	cbz	r1, 800801c <_dtoa_r+0x5c>
 8008006:	685a      	ldr	r2, [r3, #4]
 8008008:	604a      	str	r2, [r1, #4]
 800800a:	2301      	movs	r3, #1
 800800c:	4093      	lsls	r3, r2
 800800e:	608b      	str	r3, [r1, #8]
 8008010:	4620      	mov	r0, r4
 8008012:	f000 ff07 	bl	8008e24 <_Bfree>
 8008016:	69e3      	ldr	r3, [r4, #28]
 8008018:	2200      	movs	r2, #0
 800801a:	601a      	str	r2, [r3, #0]
 800801c:	1e3b      	subs	r3, r7, #0
 800801e:	bfbb      	ittet	lt
 8008020:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008024:	9303      	strlt	r3, [sp, #12]
 8008026:	2300      	movge	r3, #0
 8008028:	2201      	movlt	r2, #1
 800802a:	bfac      	ite	ge
 800802c:	f8c8 3000 	strge.w	r3, [r8]
 8008030:	f8c8 2000 	strlt.w	r2, [r8]
 8008034:	4b9e      	ldr	r3, [pc, #632]	; (80082b0 <_dtoa_r+0x2f0>)
 8008036:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800803a:	ea33 0308 	bics.w	r3, r3, r8
 800803e:	d11b      	bne.n	8008078 <_dtoa_r+0xb8>
 8008040:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008042:	f242 730f 	movw	r3, #9999	; 0x270f
 8008046:	6013      	str	r3, [r2, #0]
 8008048:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800804c:	4333      	orrs	r3, r6
 800804e:	f000 8593 	beq.w	8008b78 <_dtoa_r+0xbb8>
 8008052:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008054:	b963      	cbnz	r3, 8008070 <_dtoa_r+0xb0>
 8008056:	4b97      	ldr	r3, [pc, #604]	; (80082b4 <_dtoa_r+0x2f4>)
 8008058:	e027      	b.n	80080aa <_dtoa_r+0xea>
 800805a:	4b97      	ldr	r3, [pc, #604]	; (80082b8 <_dtoa_r+0x2f8>)
 800805c:	9300      	str	r3, [sp, #0]
 800805e:	3308      	adds	r3, #8
 8008060:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008062:	6013      	str	r3, [r2, #0]
 8008064:	9800      	ldr	r0, [sp, #0]
 8008066:	b013      	add	sp, #76	; 0x4c
 8008068:	ecbd 8b04 	vpop	{d8-d9}
 800806c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008070:	4b90      	ldr	r3, [pc, #576]	; (80082b4 <_dtoa_r+0x2f4>)
 8008072:	9300      	str	r3, [sp, #0]
 8008074:	3303      	adds	r3, #3
 8008076:	e7f3      	b.n	8008060 <_dtoa_r+0xa0>
 8008078:	ed9d 7b02 	vldr	d7, [sp, #8]
 800807c:	2200      	movs	r2, #0
 800807e:	ec51 0b17 	vmov	r0, r1, d7
 8008082:	eeb0 8a47 	vmov.f32	s16, s14
 8008086:	eef0 8a67 	vmov.f32	s17, s15
 800808a:	2300      	movs	r3, #0
 800808c:	f7f8 fd1c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008090:	4681      	mov	r9, r0
 8008092:	b160      	cbz	r0, 80080ae <_dtoa_r+0xee>
 8008094:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008096:	2301      	movs	r3, #1
 8008098:	6013      	str	r3, [r2, #0]
 800809a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800809c:	2b00      	cmp	r3, #0
 800809e:	f000 8568 	beq.w	8008b72 <_dtoa_r+0xbb2>
 80080a2:	4b86      	ldr	r3, [pc, #536]	; (80082bc <_dtoa_r+0x2fc>)
 80080a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80080a6:	6013      	str	r3, [r2, #0]
 80080a8:	3b01      	subs	r3, #1
 80080aa:	9300      	str	r3, [sp, #0]
 80080ac:	e7da      	b.n	8008064 <_dtoa_r+0xa4>
 80080ae:	aa10      	add	r2, sp, #64	; 0x40
 80080b0:	a911      	add	r1, sp, #68	; 0x44
 80080b2:	4620      	mov	r0, r4
 80080b4:	eeb0 0a48 	vmov.f32	s0, s16
 80080b8:	eef0 0a68 	vmov.f32	s1, s17
 80080bc:	f001 f994 	bl	80093e8 <__d2b>
 80080c0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80080c4:	4682      	mov	sl, r0
 80080c6:	2d00      	cmp	r5, #0
 80080c8:	d07f      	beq.n	80081ca <_dtoa_r+0x20a>
 80080ca:	ee18 3a90 	vmov	r3, s17
 80080ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080d2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80080d6:	ec51 0b18 	vmov	r0, r1, d8
 80080da:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80080de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80080e2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80080e6:	4619      	mov	r1, r3
 80080e8:	2200      	movs	r2, #0
 80080ea:	4b75      	ldr	r3, [pc, #468]	; (80082c0 <_dtoa_r+0x300>)
 80080ec:	f7f8 f8cc 	bl	8000288 <__aeabi_dsub>
 80080f0:	a367      	add	r3, pc, #412	; (adr r3, 8008290 <_dtoa_r+0x2d0>)
 80080f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f6:	f7f8 fa7f 	bl	80005f8 <__aeabi_dmul>
 80080fa:	a367      	add	r3, pc, #412	; (adr r3, 8008298 <_dtoa_r+0x2d8>)
 80080fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008100:	f7f8 f8c4 	bl	800028c <__adddf3>
 8008104:	4606      	mov	r6, r0
 8008106:	4628      	mov	r0, r5
 8008108:	460f      	mov	r7, r1
 800810a:	f7f8 fa0b 	bl	8000524 <__aeabi_i2d>
 800810e:	a364      	add	r3, pc, #400	; (adr r3, 80082a0 <_dtoa_r+0x2e0>)
 8008110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008114:	f7f8 fa70 	bl	80005f8 <__aeabi_dmul>
 8008118:	4602      	mov	r2, r0
 800811a:	460b      	mov	r3, r1
 800811c:	4630      	mov	r0, r6
 800811e:	4639      	mov	r1, r7
 8008120:	f7f8 f8b4 	bl	800028c <__adddf3>
 8008124:	4606      	mov	r6, r0
 8008126:	460f      	mov	r7, r1
 8008128:	f7f8 fd16 	bl	8000b58 <__aeabi_d2iz>
 800812c:	2200      	movs	r2, #0
 800812e:	4683      	mov	fp, r0
 8008130:	2300      	movs	r3, #0
 8008132:	4630      	mov	r0, r6
 8008134:	4639      	mov	r1, r7
 8008136:	f7f8 fcd1 	bl	8000adc <__aeabi_dcmplt>
 800813a:	b148      	cbz	r0, 8008150 <_dtoa_r+0x190>
 800813c:	4658      	mov	r0, fp
 800813e:	f7f8 f9f1 	bl	8000524 <__aeabi_i2d>
 8008142:	4632      	mov	r2, r6
 8008144:	463b      	mov	r3, r7
 8008146:	f7f8 fcbf 	bl	8000ac8 <__aeabi_dcmpeq>
 800814a:	b908      	cbnz	r0, 8008150 <_dtoa_r+0x190>
 800814c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008150:	f1bb 0f16 	cmp.w	fp, #22
 8008154:	d857      	bhi.n	8008206 <_dtoa_r+0x246>
 8008156:	4b5b      	ldr	r3, [pc, #364]	; (80082c4 <_dtoa_r+0x304>)
 8008158:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800815c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008160:	ec51 0b18 	vmov	r0, r1, d8
 8008164:	f7f8 fcba 	bl	8000adc <__aeabi_dcmplt>
 8008168:	2800      	cmp	r0, #0
 800816a:	d04e      	beq.n	800820a <_dtoa_r+0x24a>
 800816c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008170:	2300      	movs	r3, #0
 8008172:	930c      	str	r3, [sp, #48]	; 0x30
 8008174:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008176:	1b5b      	subs	r3, r3, r5
 8008178:	1e5a      	subs	r2, r3, #1
 800817a:	bf45      	ittet	mi
 800817c:	f1c3 0301 	rsbmi	r3, r3, #1
 8008180:	9305      	strmi	r3, [sp, #20]
 8008182:	2300      	movpl	r3, #0
 8008184:	2300      	movmi	r3, #0
 8008186:	9206      	str	r2, [sp, #24]
 8008188:	bf54      	ite	pl
 800818a:	9305      	strpl	r3, [sp, #20]
 800818c:	9306      	strmi	r3, [sp, #24]
 800818e:	f1bb 0f00 	cmp.w	fp, #0
 8008192:	db3c      	blt.n	800820e <_dtoa_r+0x24e>
 8008194:	9b06      	ldr	r3, [sp, #24]
 8008196:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800819a:	445b      	add	r3, fp
 800819c:	9306      	str	r3, [sp, #24]
 800819e:	2300      	movs	r3, #0
 80081a0:	9308      	str	r3, [sp, #32]
 80081a2:	9b07      	ldr	r3, [sp, #28]
 80081a4:	2b09      	cmp	r3, #9
 80081a6:	d868      	bhi.n	800827a <_dtoa_r+0x2ba>
 80081a8:	2b05      	cmp	r3, #5
 80081aa:	bfc4      	itt	gt
 80081ac:	3b04      	subgt	r3, #4
 80081ae:	9307      	strgt	r3, [sp, #28]
 80081b0:	9b07      	ldr	r3, [sp, #28]
 80081b2:	f1a3 0302 	sub.w	r3, r3, #2
 80081b6:	bfcc      	ite	gt
 80081b8:	2500      	movgt	r5, #0
 80081ba:	2501      	movle	r5, #1
 80081bc:	2b03      	cmp	r3, #3
 80081be:	f200 8085 	bhi.w	80082cc <_dtoa_r+0x30c>
 80081c2:	e8df f003 	tbb	[pc, r3]
 80081c6:	3b2e      	.short	0x3b2e
 80081c8:	5839      	.short	0x5839
 80081ca:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80081ce:	441d      	add	r5, r3
 80081d0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80081d4:	2b20      	cmp	r3, #32
 80081d6:	bfc1      	itttt	gt
 80081d8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80081dc:	fa08 f803 	lslgt.w	r8, r8, r3
 80081e0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80081e4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80081e8:	bfd6      	itet	le
 80081ea:	f1c3 0320 	rsble	r3, r3, #32
 80081ee:	ea48 0003 	orrgt.w	r0, r8, r3
 80081f2:	fa06 f003 	lslle.w	r0, r6, r3
 80081f6:	f7f8 f985 	bl	8000504 <__aeabi_ui2d>
 80081fa:	2201      	movs	r2, #1
 80081fc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008200:	3d01      	subs	r5, #1
 8008202:	920e      	str	r2, [sp, #56]	; 0x38
 8008204:	e76f      	b.n	80080e6 <_dtoa_r+0x126>
 8008206:	2301      	movs	r3, #1
 8008208:	e7b3      	b.n	8008172 <_dtoa_r+0x1b2>
 800820a:	900c      	str	r0, [sp, #48]	; 0x30
 800820c:	e7b2      	b.n	8008174 <_dtoa_r+0x1b4>
 800820e:	9b05      	ldr	r3, [sp, #20]
 8008210:	eba3 030b 	sub.w	r3, r3, fp
 8008214:	9305      	str	r3, [sp, #20]
 8008216:	f1cb 0300 	rsb	r3, fp, #0
 800821a:	9308      	str	r3, [sp, #32]
 800821c:	2300      	movs	r3, #0
 800821e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008220:	e7bf      	b.n	80081a2 <_dtoa_r+0x1e2>
 8008222:	2300      	movs	r3, #0
 8008224:	9309      	str	r3, [sp, #36]	; 0x24
 8008226:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008228:	2b00      	cmp	r3, #0
 800822a:	dc52      	bgt.n	80082d2 <_dtoa_r+0x312>
 800822c:	2301      	movs	r3, #1
 800822e:	9301      	str	r3, [sp, #4]
 8008230:	9304      	str	r3, [sp, #16]
 8008232:	461a      	mov	r2, r3
 8008234:	920a      	str	r2, [sp, #40]	; 0x28
 8008236:	e00b      	b.n	8008250 <_dtoa_r+0x290>
 8008238:	2301      	movs	r3, #1
 800823a:	e7f3      	b.n	8008224 <_dtoa_r+0x264>
 800823c:	2300      	movs	r3, #0
 800823e:	9309      	str	r3, [sp, #36]	; 0x24
 8008240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008242:	445b      	add	r3, fp
 8008244:	9301      	str	r3, [sp, #4]
 8008246:	3301      	adds	r3, #1
 8008248:	2b01      	cmp	r3, #1
 800824a:	9304      	str	r3, [sp, #16]
 800824c:	bfb8      	it	lt
 800824e:	2301      	movlt	r3, #1
 8008250:	69e0      	ldr	r0, [r4, #28]
 8008252:	2100      	movs	r1, #0
 8008254:	2204      	movs	r2, #4
 8008256:	f102 0614 	add.w	r6, r2, #20
 800825a:	429e      	cmp	r6, r3
 800825c:	d93d      	bls.n	80082da <_dtoa_r+0x31a>
 800825e:	6041      	str	r1, [r0, #4]
 8008260:	4620      	mov	r0, r4
 8008262:	f000 fd9f 	bl	8008da4 <_Balloc>
 8008266:	9000      	str	r0, [sp, #0]
 8008268:	2800      	cmp	r0, #0
 800826a:	d139      	bne.n	80082e0 <_dtoa_r+0x320>
 800826c:	4b16      	ldr	r3, [pc, #88]	; (80082c8 <_dtoa_r+0x308>)
 800826e:	4602      	mov	r2, r0
 8008270:	f240 11af 	movw	r1, #431	; 0x1af
 8008274:	e6bd      	b.n	8007ff2 <_dtoa_r+0x32>
 8008276:	2301      	movs	r3, #1
 8008278:	e7e1      	b.n	800823e <_dtoa_r+0x27e>
 800827a:	2501      	movs	r5, #1
 800827c:	2300      	movs	r3, #0
 800827e:	9307      	str	r3, [sp, #28]
 8008280:	9509      	str	r5, [sp, #36]	; 0x24
 8008282:	f04f 33ff 	mov.w	r3, #4294967295
 8008286:	9301      	str	r3, [sp, #4]
 8008288:	9304      	str	r3, [sp, #16]
 800828a:	2200      	movs	r2, #0
 800828c:	2312      	movs	r3, #18
 800828e:	e7d1      	b.n	8008234 <_dtoa_r+0x274>
 8008290:	636f4361 	.word	0x636f4361
 8008294:	3fd287a7 	.word	0x3fd287a7
 8008298:	8b60c8b3 	.word	0x8b60c8b3
 800829c:	3fc68a28 	.word	0x3fc68a28
 80082a0:	509f79fb 	.word	0x509f79fb
 80082a4:	3fd34413 	.word	0x3fd34413
 80082a8:	0800a5be 	.word	0x0800a5be
 80082ac:	0800a5d5 	.word	0x0800a5d5
 80082b0:	7ff00000 	.word	0x7ff00000
 80082b4:	0800a5ba 	.word	0x0800a5ba
 80082b8:	0800a5b1 	.word	0x0800a5b1
 80082bc:	0800a58e 	.word	0x0800a58e
 80082c0:	3ff80000 	.word	0x3ff80000
 80082c4:	0800a6c0 	.word	0x0800a6c0
 80082c8:	0800a62d 	.word	0x0800a62d
 80082cc:	2301      	movs	r3, #1
 80082ce:	9309      	str	r3, [sp, #36]	; 0x24
 80082d0:	e7d7      	b.n	8008282 <_dtoa_r+0x2c2>
 80082d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082d4:	9301      	str	r3, [sp, #4]
 80082d6:	9304      	str	r3, [sp, #16]
 80082d8:	e7ba      	b.n	8008250 <_dtoa_r+0x290>
 80082da:	3101      	adds	r1, #1
 80082dc:	0052      	lsls	r2, r2, #1
 80082de:	e7ba      	b.n	8008256 <_dtoa_r+0x296>
 80082e0:	69e3      	ldr	r3, [r4, #28]
 80082e2:	9a00      	ldr	r2, [sp, #0]
 80082e4:	601a      	str	r2, [r3, #0]
 80082e6:	9b04      	ldr	r3, [sp, #16]
 80082e8:	2b0e      	cmp	r3, #14
 80082ea:	f200 80a8 	bhi.w	800843e <_dtoa_r+0x47e>
 80082ee:	2d00      	cmp	r5, #0
 80082f0:	f000 80a5 	beq.w	800843e <_dtoa_r+0x47e>
 80082f4:	f1bb 0f00 	cmp.w	fp, #0
 80082f8:	dd38      	ble.n	800836c <_dtoa_r+0x3ac>
 80082fa:	4bc0      	ldr	r3, [pc, #768]	; (80085fc <_dtoa_r+0x63c>)
 80082fc:	f00b 020f 	and.w	r2, fp, #15
 8008300:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008304:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008308:	e9d3 6700 	ldrd	r6, r7, [r3]
 800830c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008310:	d019      	beq.n	8008346 <_dtoa_r+0x386>
 8008312:	4bbb      	ldr	r3, [pc, #748]	; (8008600 <_dtoa_r+0x640>)
 8008314:	ec51 0b18 	vmov	r0, r1, d8
 8008318:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800831c:	f7f8 fa96 	bl	800084c <__aeabi_ddiv>
 8008320:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008324:	f008 080f 	and.w	r8, r8, #15
 8008328:	2503      	movs	r5, #3
 800832a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008600 <_dtoa_r+0x640>
 800832e:	f1b8 0f00 	cmp.w	r8, #0
 8008332:	d10a      	bne.n	800834a <_dtoa_r+0x38a>
 8008334:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008338:	4632      	mov	r2, r6
 800833a:	463b      	mov	r3, r7
 800833c:	f7f8 fa86 	bl	800084c <__aeabi_ddiv>
 8008340:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008344:	e02b      	b.n	800839e <_dtoa_r+0x3de>
 8008346:	2502      	movs	r5, #2
 8008348:	e7ef      	b.n	800832a <_dtoa_r+0x36a>
 800834a:	f018 0f01 	tst.w	r8, #1
 800834e:	d008      	beq.n	8008362 <_dtoa_r+0x3a2>
 8008350:	4630      	mov	r0, r6
 8008352:	4639      	mov	r1, r7
 8008354:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008358:	f7f8 f94e 	bl	80005f8 <__aeabi_dmul>
 800835c:	3501      	adds	r5, #1
 800835e:	4606      	mov	r6, r0
 8008360:	460f      	mov	r7, r1
 8008362:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008366:	f109 0908 	add.w	r9, r9, #8
 800836a:	e7e0      	b.n	800832e <_dtoa_r+0x36e>
 800836c:	f000 809f 	beq.w	80084ae <_dtoa_r+0x4ee>
 8008370:	f1cb 0600 	rsb	r6, fp, #0
 8008374:	4ba1      	ldr	r3, [pc, #644]	; (80085fc <_dtoa_r+0x63c>)
 8008376:	4fa2      	ldr	r7, [pc, #648]	; (8008600 <_dtoa_r+0x640>)
 8008378:	f006 020f 	and.w	r2, r6, #15
 800837c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008384:	ec51 0b18 	vmov	r0, r1, d8
 8008388:	f7f8 f936 	bl	80005f8 <__aeabi_dmul>
 800838c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008390:	1136      	asrs	r6, r6, #4
 8008392:	2300      	movs	r3, #0
 8008394:	2502      	movs	r5, #2
 8008396:	2e00      	cmp	r6, #0
 8008398:	d17e      	bne.n	8008498 <_dtoa_r+0x4d8>
 800839a:	2b00      	cmp	r3, #0
 800839c:	d1d0      	bne.n	8008340 <_dtoa_r+0x380>
 800839e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083a0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	f000 8084 	beq.w	80084b2 <_dtoa_r+0x4f2>
 80083aa:	4b96      	ldr	r3, [pc, #600]	; (8008604 <_dtoa_r+0x644>)
 80083ac:	2200      	movs	r2, #0
 80083ae:	4640      	mov	r0, r8
 80083b0:	4649      	mov	r1, r9
 80083b2:	f7f8 fb93 	bl	8000adc <__aeabi_dcmplt>
 80083b6:	2800      	cmp	r0, #0
 80083b8:	d07b      	beq.n	80084b2 <_dtoa_r+0x4f2>
 80083ba:	9b04      	ldr	r3, [sp, #16]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d078      	beq.n	80084b2 <_dtoa_r+0x4f2>
 80083c0:	9b01      	ldr	r3, [sp, #4]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	dd39      	ble.n	800843a <_dtoa_r+0x47a>
 80083c6:	4b90      	ldr	r3, [pc, #576]	; (8008608 <_dtoa_r+0x648>)
 80083c8:	2200      	movs	r2, #0
 80083ca:	4640      	mov	r0, r8
 80083cc:	4649      	mov	r1, r9
 80083ce:	f7f8 f913 	bl	80005f8 <__aeabi_dmul>
 80083d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083d6:	9e01      	ldr	r6, [sp, #4]
 80083d8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80083dc:	3501      	adds	r5, #1
 80083de:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80083e2:	4628      	mov	r0, r5
 80083e4:	f7f8 f89e 	bl	8000524 <__aeabi_i2d>
 80083e8:	4642      	mov	r2, r8
 80083ea:	464b      	mov	r3, r9
 80083ec:	f7f8 f904 	bl	80005f8 <__aeabi_dmul>
 80083f0:	4b86      	ldr	r3, [pc, #536]	; (800860c <_dtoa_r+0x64c>)
 80083f2:	2200      	movs	r2, #0
 80083f4:	f7f7 ff4a 	bl	800028c <__adddf3>
 80083f8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80083fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008400:	9303      	str	r3, [sp, #12]
 8008402:	2e00      	cmp	r6, #0
 8008404:	d158      	bne.n	80084b8 <_dtoa_r+0x4f8>
 8008406:	4b82      	ldr	r3, [pc, #520]	; (8008610 <_dtoa_r+0x650>)
 8008408:	2200      	movs	r2, #0
 800840a:	4640      	mov	r0, r8
 800840c:	4649      	mov	r1, r9
 800840e:	f7f7 ff3b 	bl	8000288 <__aeabi_dsub>
 8008412:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008416:	4680      	mov	r8, r0
 8008418:	4689      	mov	r9, r1
 800841a:	f7f8 fb7d 	bl	8000b18 <__aeabi_dcmpgt>
 800841e:	2800      	cmp	r0, #0
 8008420:	f040 8296 	bne.w	8008950 <_dtoa_r+0x990>
 8008424:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008428:	4640      	mov	r0, r8
 800842a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800842e:	4649      	mov	r1, r9
 8008430:	f7f8 fb54 	bl	8000adc <__aeabi_dcmplt>
 8008434:	2800      	cmp	r0, #0
 8008436:	f040 8289 	bne.w	800894c <_dtoa_r+0x98c>
 800843a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800843e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008440:	2b00      	cmp	r3, #0
 8008442:	f2c0 814e 	blt.w	80086e2 <_dtoa_r+0x722>
 8008446:	f1bb 0f0e 	cmp.w	fp, #14
 800844a:	f300 814a 	bgt.w	80086e2 <_dtoa_r+0x722>
 800844e:	4b6b      	ldr	r3, [pc, #428]	; (80085fc <_dtoa_r+0x63c>)
 8008450:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008454:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008458:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800845a:	2b00      	cmp	r3, #0
 800845c:	f280 80dc 	bge.w	8008618 <_dtoa_r+0x658>
 8008460:	9b04      	ldr	r3, [sp, #16]
 8008462:	2b00      	cmp	r3, #0
 8008464:	f300 80d8 	bgt.w	8008618 <_dtoa_r+0x658>
 8008468:	f040 826f 	bne.w	800894a <_dtoa_r+0x98a>
 800846c:	4b68      	ldr	r3, [pc, #416]	; (8008610 <_dtoa_r+0x650>)
 800846e:	2200      	movs	r2, #0
 8008470:	4640      	mov	r0, r8
 8008472:	4649      	mov	r1, r9
 8008474:	f7f8 f8c0 	bl	80005f8 <__aeabi_dmul>
 8008478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800847c:	f7f8 fb42 	bl	8000b04 <__aeabi_dcmpge>
 8008480:	9e04      	ldr	r6, [sp, #16]
 8008482:	4637      	mov	r7, r6
 8008484:	2800      	cmp	r0, #0
 8008486:	f040 8245 	bne.w	8008914 <_dtoa_r+0x954>
 800848a:	9d00      	ldr	r5, [sp, #0]
 800848c:	2331      	movs	r3, #49	; 0x31
 800848e:	f805 3b01 	strb.w	r3, [r5], #1
 8008492:	f10b 0b01 	add.w	fp, fp, #1
 8008496:	e241      	b.n	800891c <_dtoa_r+0x95c>
 8008498:	07f2      	lsls	r2, r6, #31
 800849a:	d505      	bpl.n	80084a8 <_dtoa_r+0x4e8>
 800849c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084a0:	f7f8 f8aa 	bl	80005f8 <__aeabi_dmul>
 80084a4:	3501      	adds	r5, #1
 80084a6:	2301      	movs	r3, #1
 80084a8:	1076      	asrs	r6, r6, #1
 80084aa:	3708      	adds	r7, #8
 80084ac:	e773      	b.n	8008396 <_dtoa_r+0x3d6>
 80084ae:	2502      	movs	r5, #2
 80084b0:	e775      	b.n	800839e <_dtoa_r+0x3de>
 80084b2:	9e04      	ldr	r6, [sp, #16]
 80084b4:	465f      	mov	r7, fp
 80084b6:	e792      	b.n	80083de <_dtoa_r+0x41e>
 80084b8:	9900      	ldr	r1, [sp, #0]
 80084ba:	4b50      	ldr	r3, [pc, #320]	; (80085fc <_dtoa_r+0x63c>)
 80084bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80084c0:	4431      	add	r1, r6
 80084c2:	9102      	str	r1, [sp, #8]
 80084c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80084c6:	eeb0 9a47 	vmov.f32	s18, s14
 80084ca:	eef0 9a67 	vmov.f32	s19, s15
 80084ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80084d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80084d6:	2900      	cmp	r1, #0
 80084d8:	d044      	beq.n	8008564 <_dtoa_r+0x5a4>
 80084da:	494e      	ldr	r1, [pc, #312]	; (8008614 <_dtoa_r+0x654>)
 80084dc:	2000      	movs	r0, #0
 80084de:	f7f8 f9b5 	bl	800084c <__aeabi_ddiv>
 80084e2:	ec53 2b19 	vmov	r2, r3, d9
 80084e6:	f7f7 fecf 	bl	8000288 <__aeabi_dsub>
 80084ea:	9d00      	ldr	r5, [sp, #0]
 80084ec:	ec41 0b19 	vmov	d9, r0, r1
 80084f0:	4649      	mov	r1, r9
 80084f2:	4640      	mov	r0, r8
 80084f4:	f7f8 fb30 	bl	8000b58 <__aeabi_d2iz>
 80084f8:	4606      	mov	r6, r0
 80084fa:	f7f8 f813 	bl	8000524 <__aeabi_i2d>
 80084fe:	4602      	mov	r2, r0
 8008500:	460b      	mov	r3, r1
 8008502:	4640      	mov	r0, r8
 8008504:	4649      	mov	r1, r9
 8008506:	f7f7 febf 	bl	8000288 <__aeabi_dsub>
 800850a:	3630      	adds	r6, #48	; 0x30
 800850c:	f805 6b01 	strb.w	r6, [r5], #1
 8008510:	ec53 2b19 	vmov	r2, r3, d9
 8008514:	4680      	mov	r8, r0
 8008516:	4689      	mov	r9, r1
 8008518:	f7f8 fae0 	bl	8000adc <__aeabi_dcmplt>
 800851c:	2800      	cmp	r0, #0
 800851e:	d164      	bne.n	80085ea <_dtoa_r+0x62a>
 8008520:	4642      	mov	r2, r8
 8008522:	464b      	mov	r3, r9
 8008524:	4937      	ldr	r1, [pc, #220]	; (8008604 <_dtoa_r+0x644>)
 8008526:	2000      	movs	r0, #0
 8008528:	f7f7 feae 	bl	8000288 <__aeabi_dsub>
 800852c:	ec53 2b19 	vmov	r2, r3, d9
 8008530:	f7f8 fad4 	bl	8000adc <__aeabi_dcmplt>
 8008534:	2800      	cmp	r0, #0
 8008536:	f040 80b6 	bne.w	80086a6 <_dtoa_r+0x6e6>
 800853a:	9b02      	ldr	r3, [sp, #8]
 800853c:	429d      	cmp	r5, r3
 800853e:	f43f af7c 	beq.w	800843a <_dtoa_r+0x47a>
 8008542:	4b31      	ldr	r3, [pc, #196]	; (8008608 <_dtoa_r+0x648>)
 8008544:	ec51 0b19 	vmov	r0, r1, d9
 8008548:	2200      	movs	r2, #0
 800854a:	f7f8 f855 	bl	80005f8 <__aeabi_dmul>
 800854e:	4b2e      	ldr	r3, [pc, #184]	; (8008608 <_dtoa_r+0x648>)
 8008550:	ec41 0b19 	vmov	d9, r0, r1
 8008554:	2200      	movs	r2, #0
 8008556:	4640      	mov	r0, r8
 8008558:	4649      	mov	r1, r9
 800855a:	f7f8 f84d 	bl	80005f8 <__aeabi_dmul>
 800855e:	4680      	mov	r8, r0
 8008560:	4689      	mov	r9, r1
 8008562:	e7c5      	b.n	80084f0 <_dtoa_r+0x530>
 8008564:	ec51 0b17 	vmov	r0, r1, d7
 8008568:	f7f8 f846 	bl	80005f8 <__aeabi_dmul>
 800856c:	9b02      	ldr	r3, [sp, #8]
 800856e:	9d00      	ldr	r5, [sp, #0]
 8008570:	930f      	str	r3, [sp, #60]	; 0x3c
 8008572:	ec41 0b19 	vmov	d9, r0, r1
 8008576:	4649      	mov	r1, r9
 8008578:	4640      	mov	r0, r8
 800857a:	f7f8 faed 	bl	8000b58 <__aeabi_d2iz>
 800857e:	4606      	mov	r6, r0
 8008580:	f7f7 ffd0 	bl	8000524 <__aeabi_i2d>
 8008584:	3630      	adds	r6, #48	; 0x30
 8008586:	4602      	mov	r2, r0
 8008588:	460b      	mov	r3, r1
 800858a:	4640      	mov	r0, r8
 800858c:	4649      	mov	r1, r9
 800858e:	f7f7 fe7b 	bl	8000288 <__aeabi_dsub>
 8008592:	f805 6b01 	strb.w	r6, [r5], #1
 8008596:	9b02      	ldr	r3, [sp, #8]
 8008598:	429d      	cmp	r5, r3
 800859a:	4680      	mov	r8, r0
 800859c:	4689      	mov	r9, r1
 800859e:	f04f 0200 	mov.w	r2, #0
 80085a2:	d124      	bne.n	80085ee <_dtoa_r+0x62e>
 80085a4:	4b1b      	ldr	r3, [pc, #108]	; (8008614 <_dtoa_r+0x654>)
 80085a6:	ec51 0b19 	vmov	r0, r1, d9
 80085aa:	f7f7 fe6f 	bl	800028c <__adddf3>
 80085ae:	4602      	mov	r2, r0
 80085b0:	460b      	mov	r3, r1
 80085b2:	4640      	mov	r0, r8
 80085b4:	4649      	mov	r1, r9
 80085b6:	f7f8 faaf 	bl	8000b18 <__aeabi_dcmpgt>
 80085ba:	2800      	cmp	r0, #0
 80085bc:	d173      	bne.n	80086a6 <_dtoa_r+0x6e6>
 80085be:	ec53 2b19 	vmov	r2, r3, d9
 80085c2:	4914      	ldr	r1, [pc, #80]	; (8008614 <_dtoa_r+0x654>)
 80085c4:	2000      	movs	r0, #0
 80085c6:	f7f7 fe5f 	bl	8000288 <__aeabi_dsub>
 80085ca:	4602      	mov	r2, r0
 80085cc:	460b      	mov	r3, r1
 80085ce:	4640      	mov	r0, r8
 80085d0:	4649      	mov	r1, r9
 80085d2:	f7f8 fa83 	bl	8000adc <__aeabi_dcmplt>
 80085d6:	2800      	cmp	r0, #0
 80085d8:	f43f af2f 	beq.w	800843a <_dtoa_r+0x47a>
 80085dc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80085de:	1e6b      	subs	r3, r5, #1
 80085e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80085e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80085e6:	2b30      	cmp	r3, #48	; 0x30
 80085e8:	d0f8      	beq.n	80085dc <_dtoa_r+0x61c>
 80085ea:	46bb      	mov	fp, r7
 80085ec:	e04a      	b.n	8008684 <_dtoa_r+0x6c4>
 80085ee:	4b06      	ldr	r3, [pc, #24]	; (8008608 <_dtoa_r+0x648>)
 80085f0:	f7f8 f802 	bl	80005f8 <__aeabi_dmul>
 80085f4:	4680      	mov	r8, r0
 80085f6:	4689      	mov	r9, r1
 80085f8:	e7bd      	b.n	8008576 <_dtoa_r+0x5b6>
 80085fa:	bf00      	nop
 80085fc:	0800a6c0 	.word	0x0800a6c0
 8008600:	0800a698 	.word	0x0800a698
 8008604:	3ff00000 	.word	0x3ff00000
 8008608:	40240000 	.word	0x40240000
 800860c:	401c0000 	.word	0x401c0000
 8008610:	40140000 	.word	0x40140000
 8008614:	3fe00000 	.word	0x3fe00000
 8008618:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800861c:	9d00      	ldr	r5, [sp, #0]
 800861e:	4642      	mov	r2, r8
 8008620:	464b      	mov	r3, r9
 8008622:	4630      	mov	r0, r6
 8008624:	4639      	mov	r1, r7
 8008626:	f7f8 f911 	bl	800084c <__aeabi_ddiv>
 800862a:	f7f8 fa95 	bl	8000b58 <__aeabi_d2iz>
 800862e:	9001      	str	r0, [sp, #4]
 8008630:	f7f7 ff78 	bl	8000524 <__aeabi_i2d>
 8008634:	4642      	mov	r2, r8
 8008636:	464b      	mov	r3, r9
 8008638:	f7f7 ffde 	bl	80005f8 <__aeabi_dmul>
 800863c:	4602      	mov	r2, r0
 800863e:	460b      	mov	r3, r1
 8008640:	4630      	mov	r0, r6
 8008642:	4639      	mov	r1, r7
 8008644:	f7f7 fe20 	bl	8000288 <__aeabi_dsub>
 8008648:	9e01      	ldr	r6, [sp, #4]
 800864a:	9f04      	ldr	r7, [sp, #16]
 800864c:	3630      	adds	r6, #48	; 0x30
 800864e:	f805 6b01 	strb.w	r6, [r5], #1
 8008652:	9e00      	ldr	r6, [sp, #0]
 8008654:	1bae      	subs	r6, r5, r6
 8008656:	42b7      	cmp	r7, r6
 8008658:	4602      	mov	r2, r0
 800865a:	460b      	mov	r3, r1
 800865c:	d134      	bne.n	80086c8 <_dtoa_r+0x708>
 800865e:	f7f7 fe15 	bl	800028c <__adddf3>
 8008662:	4642      	mov	r2, r8
 8008664:	464b      	mov	r3, r9
 8008666:	4606      	mov	r6, r0
 8008668:	460f      	mov	r7, r1
 800866a:	f7f8 fa55 	bl	8000b18 <__aeabi_dcmpgt>
 800866e:	b9c8      	cbnz	r0, 80086a4 <_dtoa_r+0x6e4>
 8008670:	4642      	mov	r2, r8
 8008672:	464b      	mov	r3, r9
 8008674:	4630      	mov	r0, r6
 8008676:	4639      	mov	r1, r7
 8008678:	f7f8 fa26 	bl	8000ac8 <__aeabi_dcmpeq>
 800867c:	b110      	cbz	r0, 8008684 <_dtoa_r+0x6c4>
 800867e:	9b01      	ldr	r3, [sp, #4]
 8008680:	07db      	lsls	r3, r3, #31
 8008682:	d40f      	bmi.n	80086a4 <_dtoa_r+0x6e4>
 8008684:	4651      	mov	r1, sl
 8008686:	4620      	mov	r0, r4
 8008688:	f000 fbcc 	bl	8008e24 <_Bfree>
 800868c:	2300      	movs	r3, #0
 800868e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008690:	702b      	strb	r3, [r5, #0]
 8008692:	f10b 0301 	add.w	r3, fp, #1
 8008696:	6013      	str	r3, [r2, #0]
 8008698:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800869a:	2b00      	cmp	r3, #0
 800869c:	f43f ace2 	beq.w	8008064 <_dtoa_r+0xa4>
 80086a0:	601d      	str	r5, [r3, #0]
 80086a2:	e4df      	b.n	8008064 <_dtoa_r+0xa4>
 80086a4:	465f      	mov	r7, fp
 80086a6:	462b      	mov	r3, r5
 80086a8:	461d      	mov	r5, r3
 80086aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80086ae:	2a39      	cmp	r2, #57	; 0x39
 80086b0:	d106      	bne.n	80086c0 <_dtoa_r+0x700>
 80086b2:	9a00      	ldr	r2, [sp, #0]
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d1f7      	bne.n	80086a8 <_dtoa_r+0x6e8>
 80086b8:	9900      	ldr	r1, [sp, #0]
 80086ba:	2230      	movs	r2, #48	; 0x30
 80086bc:	3701      	adds	r7, #1
 80086be:	700a      	strb	r2, [r1, #0]
 80086c0:	781a      	ldrb	r2, [r3, #0]
 80086c2:	3201      	adds	r2, #1
 80086c4:	701a      	strb	r2, [r3, #0]
 80086c6:	e790      	b.n	80085ea <_dtoa_r+0x62a>
 80086c8:	4ba3      	ldr	r3, [pc, #652]	; (8008958 <_dtoa_r+0x998>)
 80086ca:	2200      	movs	r2, #0
 80086cc:	f7f7 ff94 	bl	80005f8 <__aeabi_dmul>
 80086d0:	2200      	movs	r2, #0
 80086d2:	2300      	movs	r3, #0
 80086d4:	4606      	mov	r6, r0
 80086d6:	460f      	mov	r7, r1
 80086d8:	f7f8 f9f6 	bl	8000ac8 <__aeabi_dcmpeq>
 80086dc:	2800      	cmp	r0, #0
 80086de:	d09e      	beq.n	800861e <_dtoa_r+0x65e>
 80086e0:	e7d0      	b.n	8008684 <_dtoa_r+0x6c4>
 80086e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086e4:	2a00      	cmp	r2, #0
 80086e6:	f000 80ca 	beq.w	800887e <_dtoa_r+0x8be>
 80086ea:	9a07      	ldr	r2, [sp, #28]
 80086ec:	2a01      	cmp	r2, #1
 80086ee:	f300 80ad 	bgt.w	800884c <_dtoa_r+0x88c>
 80086f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80086f4:	2a00      	cmp	r2, #0
 80086f6:	f000 80a5 	beq.w	8008844 <_dtoa_r+0x884>
 80086fa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80086fe:	9e08      	ldr	r6, [sp, #32]
 8008700:	9d05      	ldr	r5, [sp, #20]
 8008702:	9a05      	ldr	r2, [sp, #20]
 8008704:	441a      	add	r2, r3
 8008706:	9205      	str	r2, [sp, #20]
 8008708:	9a06      	ldr	r2, [sp, #24]
 800870a:	2101      	movs	r1, #1
 800870c:	441a      	add	r2, r3
 800870e:	4620      	mov	r0, r4
 8008710:	9206      	str	r2, [sp, #24]
 8008712:	f000 fc3d 	bl	8008f90 <__i2b>
 8008716:	4607      	mov	r7, r0
 8008718:	b165      	cbz	r5, 8008734 <_dtoa_r+0x774>
 800871a:	9b06      	ldr	r3, [sp, #24]
 800871c:	2b00      	cmp	r3, #0
 800871e:	dd09      	ble.n	8008734 <_dtoa_r+0x774>
 8008720:	42ab      	cmp	r3, r5
 8008722:	9a05      	ldr	r2, [sp, #20]
 8008724:	bfa8      	it	ge
 8008726:	462b      	movge	r3, r5
 8008728:	1ad2      	subs	r2, r2, r3
 800872a:	9205      	str	r2, [sp, #20]
 800872c:	9a06      	ldr	r2, [sp, #24]
 800872e:	1aed      	subs	r5, r5, r3
 8008730:	1ad3      	subs	r3, r2, r3
 8008732:	9306      	str	r3, [sp, #24]
 8008734:	9b08      	ldr	r3, [sp, #32]
 8008736:	b1f3      	cbz	r3, 8008776 <_dtoa_r+0x7b6>
 8008738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800873a:	2b00      	cmp	r3, #0
 800873c:	f000 80a3 	beq.w	8008886 <_dtoa_r+0x8c6>
 8008740:	2e00      	cmp	r6, #0
 8008742:	dd10      	ble.n	8008766 <_dtoa_r+0x7a6>
 8008744:	4639      	mov	r1, r7
 8008746:	4632      	mov	r2, r6
 8008748:	4620      	mov	r0, r4
 800874a:	f000 fce1 	bl	8009110 <__pow5mult>
 800874e:	4652      	mov	r2, sl
 8008750:	4601      	mov	r1, r0
 8008752:	4607      	mov	r7, r0
 8008754:	4620      	mov	r0, r4
 8008756:	f000 fc31 	bl	8008fbc <__multiply>
 800875a:	4651      	mov	r1, sl
 800875c:	4680      	mov	r8, r0
 800875e:	4620      	mov	r0, r4
 8008760:	f000 fb60 	bl	8008e24 <_Bfree>
 8008764:	46c2      	mov	sl, r8
 8008766:	9b08      	ldr	r3, [sp, #32]
 8008768:	1b9a      	subs	r2, r3, r6
 800876a:	d004      	beq.n	8008776 <_dtoa_r+0x7b6>
 800876c:	4651      	mov	r1, sl
 800876e:	4620      	mov	r0, r4
 8008770:	f000 fcce 	bl	8009110 <__pow5mult>
 8008774:	4682      	mov	sl, r0
 8008776:	2101      	movs	r1, #1
 8008778:	4620      	mov	r0, r4
 800877a:	f000 fc09 	bl	8008f90 <__i2b>
 800877e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008780:	2b00      	cmp	r3, #0
 8008782:	4606      	mov	r6, r0
 8008784:	f340 8081 	ble.w	800888a <_dtoa_r+0x8ca>
 8008788:	461a      	mov	r2, r3
 800878a:	4601      	mov	r1, r0
 800878c:	4620      	mov	r0, r4
 800878e:	f000 fcbf 	bl	8009110 <__pow5mult>
 8008792:	9b07      	ldr	r3, [sp, #28]
 8008794:	2b01      	cmp	r3, #1
 8008796:	4606      	mov	r6, r0
 8008798:	dd7a      	ble.n	8008890 <_dtoa_r+0x8d0>
 800879a:	f04f 0800 	mov.w	r8, #0
 800879e:	6933      	ldr	r3, [r6, #16]
 80087a0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80087a4:	6918      	ldr	r0, [r3, #16]
 80087a6:	f000 fba5 	bl	8008ef4 <__hi0bits>
 80087aa:	f1c0 0020 	rsb	r0, r0, #32
 80087ae:	9b06      	ldr	r3, [sp, #24]
 80087b0:	4418      	add	r0, r3
 80087b2:	f010 001f 	ands.w	r0, r0, #31
 80087b6:	f000 8094 	beq.w	80088e2 <_dtoa_r+0x922>
 80087ba:	f1c0 0320 	rsb	r3, r0, #32
 80087be:	2b04      	cmp	r3, #4
 80087c0:	f340 8085 	ble.w	80088ce <_dtoa_r+0x90e>
 80087c4:	9b05      	ldr	r3, [sp, #20]
 80087c6:	f1c0 001c 	rsb	r0, r0, #28
 80087ca:	4403      	add	r3, r0
 80087cc:	9305      	str	r3, [sp, #20]
 80087ce:	9b06      	ldr	r3, [sp, #24]
 80087d0:	4403      	add	r3, r0
 80087d2:	4405      	add	r5, r0
 80087d4:	9306      	str	r3, [sp, #24]
 80087d6:	9b05      	ldr	r3, [sp, #20]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	dd05      	ble.n	80087e8 <_dtoa_r+0x828>
 80087dc:	4651      	mov	r1, sl
 80087de:	461a      	mov	r2, r3
 80087e0:	4620      	mov	r0, r4
 80087e2:	f000 fcef 	bl	80091c4 <__lshift>
 80087e6:	4682      	mov	sl, r0
 80087e8:	9b06      	ldr	r3, [sp, #24]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	dd05      	ble.n	80087fa <_dtoa_r+0x83a>
 80087ee:	4631      	mov	r1, r6
 80087f0:	461a      	mov	r2, r3
 80087f2:	4620      	mov	r0, r4
 80087f4:	f000 fce6 	bl	80091c4 <__lshift>
 80087f8:	4606      	mov	r6, r0
 80087fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d072      	beq.n	80088e6 <_dtoa_r+0x926>
 8008800:	4631      	mov	r1, r6
 8008802:	4650      	mov	r0, sl
 8008804:	f000 fd4a 	bl	800929c <__mcmp>
 8008808:	2800      	cmp	r0, #0
 800880a:	da6c      	bge.n	80088e6 <_dtoa_r+0x926>
 800880c:	2300      	movs	r3, #0
 800880e:	4651      	mov	r1, sl
 8008810:	220a      	movs	r2, #10
 8008812:	4620      	mov	r0, r4
 8008814:	f000 fb28 	bl	8008e68 <__multadd>
 8008818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800881a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800881e:	4682      	mov	sl, r0
 8008820:	2b00      	cmp	r3, #0
 8008822:	f000 81b0 	beq.w	8008b86 <_dtoa_r+0xbc6>
 8008826:	2300      	movs	r3, #0
 8008828:	4639      	mov	r1, r7
 800882a:	220a      	movs	r2, #10
 800882c:	4620      	mov	r0, r4
 800882e:	f000 fb1b 	bl	8008e68 <__multadd>
 8008832:	9b01      	ldr	r3, [sp, #4]
 8008834:	2b00      	cmp	r3, #0
 8008836:	4607      	mov	r7, r0
 8008838:	f300 8096 	bgt.w	8008968 <_dtoa_r+0x9a8>
 800883c:	9b07      	ldr	r3, [sp, #28]
 800883e:	2b02      	cmp	r3, #2
 8008840:	dc59      	bgt.n	80088f6 <_dtoa_r+0x936>
 8008842:	e091      	b.n	8008968 <_dtoa_r+0x9a8>
 8008844:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008846:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800884a:	e758      	b.n	80086fe <_dtoa_r+0x73e>
 800884c:	9b04      	ldr	r3, [sp, #16]
 800884e:	1e5e      	subs	r6, r3, #1
 8008850:	9b08      	ldr	r3, [sp, #32]
 8008852:	42b3      	cmp	r3, r6
 8008854:	bfbf      	itttt	lt
 8008856:	9b08      	ldrlt	r3, [sp, #32]
 8008858:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800885a:	9608      	strlt	r6, [sp, #32]
 800885c:	1af3      	sublt	r3, r6, r3
 800885e:	bfb4      	ite	lt
 8008860:	18d2      	addlt	r2, r2, r3
 8008862:	1b9e      	subge	r6, r3, r6
 8008864:	9b04      	ldr	r3, [sp, #16]
 8008866:	bfbc      	itt	lt
 8008868:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800886a:	2600      	movlt	r6, #0
 800886c:	2b00      	cmp	r3, #0
 800886e:	bfb7      	itett	lt
 8008870:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008874:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008878:	1a9d      	sublt	r5, r3, r2
 800887a:	2300      	movlt	r3, #0
 800887c:	e741      	b.n	8008702 <_dtoa_r+0x742>
 800887e:	9e08      	ldr	r6, [sp, #32]
 8008880:	9d05      	ldr	r5, [sp, #20]
 8008882:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008884:	e748      	b.n	8008718 <_dtoa_r+0x758>
 8008886:	9a08      	ldr	r2, [sp, #32]
 8008888:	e770      	b.n	800876c <_dtoa_r+0x7ac>
 800888a:	9b07      	ldr	r3, [sp, #28]
 800888c:	2b01      	cmp	r3, #1
 800888e:	dc19      	bgt.n	80088c4 <_dtoa_r+0x904>
 8008890:	9b02      	ldr	r3, [sp, #8]
 8008892:	b9bb      	cbnz	r3, 80088c4 <_dtoa_r+0x904>
 8008894:	9b03      	ldr	r3, [sp, #12]
 8008896:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800889a:	b99b      	cbnz	r3, 80088c4 <_dtoa_r+0x904>
 800889c:	9b03      	ldr	r3, [sp, #12]
 800889e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80088a2:	0d1b      	lsrs	r3, r3, #20
 80088a4:	051b      	lsls	r3, r3, #20
 80088a6:	b183      	cbz	r3, 80088ca <_dtoa_r+0x90a>
 80088a8:	9b05      	ldr	r3, [sp, #20]
 80088aa:	3301      	adds	r3, #1
 80088ac:	9305      	str	r3, [sp, #20]
 80088ae:	9b06      	ldr	r3, [sp, #24]
 80088b0:	3301      	adds	r3, #1
 80088b2:	9306      	str	r3, [sp, #24]
 80088b4:	f04f 0801 	mov.w	r8, #1
 80088b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	f47f af6f 	bne.w	800879e <_dtoa_r+0x7de>
 80088c0:	2001      	movs	r0, #1
 80088c2:	e774      	b.n	80087ae <_dtoa_r+0x7ee>
 80088c4:	f04f 0800 	mov.w	r8, #0
 80088c8:	e7f6      	b.n	80088b8 <_dtoa_r+0x8f8>
 80088ca:	4698      	mov	r8, r3
 80088cc:	e7f4      	b.n	80088b8 <_dtoa_r+0x8f8>
 80088ce:	d082      	beq.n	80087d6 <_dtoa_r+0x816>
 80088d0:	9a05      	ldr	r2, [sp, #20]
 80088d2:	331c      	adds	r3, #28
 80088d4:	441a      	add	r2, r3
 80088d6:	9205      	str	r2, [sp, #20]
 80088d8:	9a06      	ldr	r2, [sp, #24]
 80088da:	441a      	add	r2, r3
 80088dc:	441d      	add	r5, r3
 80088de:	9206      	str	r2, [sp, #24]
 80088e0:	e779      	b.n	80087d6 <_dtoa_r+0x816>
 80088e2:	4603      	mov	r3, r0
 80088e4:	e7f4      	b.n	80088d0 <_dtoa_r+0x910>
 80088e6:	9b04      	ldr	r3, [sp, #16]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	dc37      	bgt.n	800895c <_dtoa_r+0x99c>
 80088ec:	9b07      	ldr	r3, [sp, #28]
 80088ee:	2b02      	cmp	r3, #2
 80088f0:	dd34      	ble.n	800895c <_dtoa_r+0x99c>
 80088f2:	9b04      	ldr	r3, [sp, #16]
 80088f4:	9301      	str	r3, [sp, #4]
 80088f6:	9b01      	ldr	r3, [sp, #4]
 80088f8:	b963      	cbnz	r3, 8008914 <_dtoa_r+0x954>
 80088fa:	4631      	mov	r1, r6
 80088fc:	2205      	movs	r2, #5
 80088fe:	4620      	mov	r0, r4
 8008900:	f000 fab2 	bl	8008e68 <__multadd>
 8008904:	4601      	mov	r1, r0
 8008906:	4606      	mov	r6, r0
 8008908:	4650      	mov	r0, sl
 800890a:	f000 fcc7 	bl	800929c <__mcmp>
 800890e:	2800      	cmp	r0, #0
 8008910:	f73f adbb 	bgt.w	800848a <_dtoa_r+0x4ca>
 8008914:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008916:	9d00      	ldr	r5, [sp, #0]
 8008918:	ea6f 0b03 	mvn.w	fp, r3
 800891c:	f04f 0800 	mov.w	r8, #0
 8008920:	4631      	mov	r1, r6
 8008922:	4620      	mov	r0, r4
 8008924:	f000 fa7e 	bl	8008e24 <_Bfree>
 8008928:	2f00      	cmp	r7, #0
 800892a:	f43f aeab 	beq.w	8008684 <_dtoa_r+0x6c4>
 800892e:	f1b8 0f00 	cmp.w	r8, #0
 8008932:	d005      	beq.n	8008940 <_dtoa_r+0x980>
 8008934:	45b8      	cmp	r8, r7
 8008936:	d003      	beq.n	8008940 <_dtoa_r+0x980>
 8008938:	4641      	mov	r1, r8
 800893a:	4620      	mov	r0, r4
 800893c:	f000 fa72 	bl	8008e24 <_Bfree>
 8008940:	4639      	mov	r1, r7
 8008942:	4620      	mov	r0, r4
 8008944:	f000 fa6e 	bl	8008e24 <_Bfree>
 8008948:	e69c      	b.n	8008684 <_dtoa_r+0x6c4>
 800894a:	2600      	movs	r6, #0
 800894c:	4637      	mov	r7, r6
 800894e:	e7e1      	b.n	8008914 <_dtoa_r+0x954>
 8008950:	46bb      	mov	fp, r7
 8008952:	4637      	mov	r7, r6
 8008954:	e599      	b.n	800848a <_dtoa_r+0x4ca>
 8008956:	bf00      	nop
 8008958:	40240000 	.word	0x40240000
 800895c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800895e:	2b00      	cmp	r3, #0
 8008960:	f000 80c8 	beq.w	8008af4 <_dtoa_r+0xb34>
 8008964:	9b04      	ldr	r3, [sp, #16]
 8008966:	9301      	str	r3, [sp, #4]
 8008968:	2d00      	cmp	r5, #0
 800896a:	dd05      	ble.n	8008978 <_dtoa_r+0x9b8>
 800896c:	4639      	mov	r1, r7
 800896e:	462a      	mov	r2, r5
 8008970:	4620      	mov	r0, r4
 8008972:	f000 fc27 	bl	80091c4 <__lshift>
 8008976:	4607      	mov	r7, r0
 8008978:	f1b8 0f00 	cmp.w	r8, #0
 800897c:	d05b      	beq.n	8008a36 <_dtoa_r+0xa76>
 800897e:	6879      	ldr	r1, [r7, #4]
 8008980:	4620      	mov	r0, r4
 8008982:	f000 fa0f 	bl	8008da4 <_Balloc>
 8008986:	4605      	mov	r5, r0
 8008988:	b928      	cbnz	r0, 8008996 <_dtoa_r+0x9d6>
 800898a:	4b83      	ldr	r3, [pc, #524]	; (8008b98 <_dtoa_r+0xbd8>)
 800898c:	4602      	mov	r2, r0
 800898e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008992:	f7ff bb2e 	b.w	8007ff2 <_dtoa_r+0x32>
 8008996:	693a      	ldr	r2, [r7, #16]
 8008998:	3202      	adds	r2, #2
 800899a:	0092      	lsls	r2, r2, #2
 800899c:	f107 010c 	add.w	r1, r7, #12
 80089a0:	300c      	adds	r0, #12
 80089a2:	f000 ffab 	bl	80098fc <memcpy>
 80089a6:	2201      	movs	r2, #1
 80089a8:	4629      	mov	r1, r5
 80089aa:	4620      	mov	r0, r4
 80089ac:	f000 fc0a 	bl	80091c4 <__lshift>
 80089b0:	9b00      	ldr	r3, [sp, #0]
 80089b2:	3301      	adds	r3, #1
 80089b4:	9304      	str	r3, [sp, #16]
 80089b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089ba:	4413      	add	r3, r2
 80089bc:	9308      	str	r3, [sp, #32]
 80089be:	9b02      	ldr	r3, [sp, #8]
 80089c0:	f003 0301 	and.w	r3, r3, #1
 80089c4:	46b8      	mov	r8, r7
 80089c6:	9306      	str	r3, [sp, #24]
 80089c8:	4607      	mov	r7, r0
 80089ca:	9b04      	ldr	r3, [sp, #16]
 80089cc:	4631      	mov	r1, r6
 80089ce:	3b01      	subs	r3, #1
 80089d0:	4650      	mov	r0, sl
 80089d2:	9301      	str	r3, [sp, #4]
 80089d4:	f7ff fa69 	bl	8007eaa <quorem>
 80089d8:	4641      	mov	r1, r8
 80089da:	9002      	str	r0, [sp, #8]
 80089dc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80089e0:	4650      	mov	r0, sl
 80089e2:	f000 fc5b 	bl	800929c <__mcmp>
 80089e6:	463a      	mov	r2, r7
 80089e8:	9005      	str	r0, [sp, #20]
 80089ea:	4631      	mov	r1, r6
 80089ec:	4620      	mov	r0, r4
 80089ee:	f000 fc71 	bl	80092d4 <__mdiff>
 80089f2:	68c2      	ldr	r2, [r0, #12]
 80089f4:	4605      	mov	r5, r0
 80089f6:	bb02      	cbnz	r2, 8008a3a <_dtoa_r+0xa7a>
 80089f8:	4601      	mov	r1, r0
 80089fa:	4650      	mov	r0, sl
 80089fc:	f000 fc4e 	bl	800929c <__mcmp>
 8008a00:	4602      	mov	r2, r0
 8008a02:	4629      	mov	r1, r5
 8008a04:	4620      	mov	r0, r4
 8008a06:	9209      	str	r2, [sp, #36]	; 0x24
 8008a08:	f000 fa0c 	bl	8008e24 <_Bfree>
 8008a0c:	9b07      	ldr	r3, [sp, #28]
 8008a0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a10:	9d04      	ldr	r5, [sp, #16]
 8008a12:	ea43 0102 	orr.w	r1, r3, r2
 8008a16:	9b06      	ldr	r3, [sp, #24]
 8008a18:	4319      	orrs	r1, r3
 8008a1a:	d110      	bne.n	8008a3e <_dtoa_r+0xa7e>
 8008a1c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008a20:	d029      	beq.n	8008a76 <_dtoa_r+0xab6>
 8008a22:	9b05      	ldr	r3, [sp, #20]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	dd02      	ble.n	8008a2e <_dtoa_r+0xa6e>
 8008a28:	9b02      	ldr	r3, [sp, #8]
 8008a2a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008a2e:	9b01      	ldr	r3, [sp, #4]
 8008a30:	f883 9000 	strb.w	r9, [r3]
 8008a34:	e774      	b.n	8008920 <_dtoa_r+0x960>
 8008a36:	4638      	mov	r0, r7
 8008a38:	e7ba      	b.n	80089b0 <_dtoa_r+0x9f0>
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	e7e1      	b.n	8008a02 <_dtoa_r+0xa42>
 8008a3e:	9b05      	ldr	r3, [sp, #20]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	db04      	blt.n	8008a4e <_dtoa_r+0xa8e>
 8008a44:	9907      	ldr	r1, [sp, #28]
 8008a46:	430b      	orrs	r3, r1
 8008a48:	9906      	ldr	r1, [sp, #24]
 8008a4a:	430b      	orrs	r3, r1
 8008a4c:	d120      	bne.n	8008a90 <_dtoa_r+0xad0>
 8008a4e:	2a00      	cmp	r2, #0
 8008a50:	dded      	ble.n	8008a2e <_dtoa_r+0xa6e>
 8008a52:	4651      	mov	r1, sl
 8008a54:	2201      	movs	r2, #1
 8008a56:	4620      	mov	r0, r4
 8008a58:	f000 fbb4 	bl	80091c4 <__lshift>
 8008a5c:	4631      	mov	r1, r6
 8008a5e:	4682      	mov	sl, r0
 8008a60:	f000 fc1c 	bl	800929c <__mcmp>
 8008a64:	2800      	cmp	r0, #0
 8008a66:	dc03      	bgt.n	8008a70 <_dtoa_r+0xab0>
 8008a68:	d1e1      	bne.n	8008a2e <_dtoa_r+0xa6e>
 8008a6a:	f019 0f01 	tst.w	r9, #1
 8008a6e:	d0de      	beq.n	8008a2e <_dtoa_r+0xa6e>
 8008a70:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008a74:	d1d8      	bne.n	8008a28 <_dtoa_r+0xa68>
 8008a76:	9a01      	ldr	r2, [sp, #4]
 8008a78:	2339      	movs	r3, #57	; 0x39
 8008a7a:	7013      	strb	r3, [r2, #0]
 8008a7c:	462b      	mov	r3, r5
 8008a7e:	461d      	mov	r5, r3
 8008a80:	3b01      	subs	r3, #1
 8008a82:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008a86:	2a39      	cmp	r2, #57	; 0x39
 8008a88:	d06c      	beq.n	8008b64 <_dtoa_r+0xba4>
 8008a8a:	3201      	adds	r2, #1
 8008a8c:	701a      	strb	r2, [r3, #0]
 8008a8e:	e747      	b.n	8008920 <_dtoa_r+0x960>
 8008a90:	2a00      	cmp	r2, #0
 8008a92:	dd07      	ble.n	8008aa4 <_dtoa_r+0xae4>
 8008a94:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008a98:	d0ed      	beq.n	8008a76 <_dtoa_r+0xab6>
 8008a9a:	9a01      	ldr	r2, [sp, #4]
 8008a9c:	f109 0301 	add.w	r3, r9, #1
 8008aa0:	7013      	strb	r3, [r2, #0]
 8008aa2:	e73d      	b.n	8008920 <_dtoa_r+0x960>
 8008aa4:	9b04      	ldr	r3, [sp, #16]
 8008aa6:	9a08      	ldr	r2, [sp, #32]
 8008aa8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d043      	beq.n	8008b38 <_dtoa_r+0xb78>
 8008ab0:	4651      	mov	r1, sl
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	220a      	movs	r2, #10
 8008ab6:	4620      	mov	r0, r4
 8008ab8:	f000 f9d6 	bl	8008e68 <__multadd>
 8008abc:	45b8      	cmp	r8, r7
 8008abe:	4682      	mov	sl, r0
 8008ac0:	f04f 0300 	mov.w	r3, #0
 8008ac4:	f04f 020a 	mov.w	r2, #10
 8008ac8:	4641      	mov	r1, r8
 8008aca:	4620      	mov	r0, r4
 8008acc:	d107      	bne.n	8008ade <_dtoa_r+0xb1e>
 8008ace:	f000 f9cb 	bl	8008e68 <__multadd>
 8008ad2:	4680      	mov	r8, r0
 8008ad4:	4607      	mov	r7, r0
 8008ad6:	9b04      	ldr	r3, [sp, #16]
 8008ad8:	3301      	adds	r3, #1
 8008ada:	9304      	str	r3, [sp, #16]
 8008adc:	e775      	b.n	80089ca <_dtoa_r+0xa0a>
 8008ade:	f000 f9c3 	bl	8008e68 <__multadd>
 8008ae2:	4639      	mov	r1, r7
 8008ae4:	4680      	mov	r8, r0
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	220a      	movs	r2, #10
 8008aea:	4620      	mov	r0, r4
 8008aec:	f000 f9bc 	bl	8008e68 <__multadd>
 8008af0:	4607      	mov	r7, r0
 8008af2:	e7f0      	b.n	8008ad6 <_dtoa_r+0xb16>
 8008af4:	9b04      	ldr	r3, [sp, #16]
 8008af6:	9301      	str	r3, [sp, #4]
 8008af8:	9d00      	ldr	r5, [sp, #0]
 8008afa:	4631      	mov	r1, r6
 8008afc:	4650      	mov	r0, sl
 8008afe:	f7ff f9d4 	bl	8007eaa <quorem>
 8008b02:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008b06:	9b00      	ldr	r3, [sp, #0]
 8008b08:	f805 9b01 	strb.w	r9, [r5], #1
 8008b0c:	1aea      	subs	r2, r5, r3
 8008b0e:	9b01      	ldr	r3, [sp, #4]
 8008b10:	4293      	cmp	r3, r2
 8008b12:	dd07      	ble.n	8008b24 <_dtoa_r+0xb64>
 8008b14:	4651      	mov	r1, sl
 8008b16:	2300      	movs	r3, #0
 8008b18:	220a      	movs	r2, #10
 8008b1a:	4620      	mov	r0, r4
 8008b1c:	f000 f9a4 	bl	8008e68 <__multadd>
 8008b20:	4682      	mov	sl, r0
 8008b22:	e7ea      	b.n	8008afa <_dtoa_r+0xb3a>
 8008b24:	9b01      	ldr	r3, [sp, #4]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	bfc8      	it	gt
 8008b2a:	461d      	movgt	r5, r3
 8008b2c:	9b00      	ldr	r3, [sp, #0]
 8008b2e:	bfd8      	it	le
 8008b30:	2501      	movle	r5, #1
 8008b32:	441d      	add	r5, r3
 8008b34:	f04f 0800 	mov.w	r8, #0
 8008b38:	4651      	mov	r1, sl
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	4620      	mov	r0, r4
 8008b3e:	f000 fb41 	bl	80091c4 <__lshift>
 8008b42:	4631      	mov	r1, r6
 8008b44:	4682      	mov	sl, r0
 8008b46:	f000 fba9 	bl	800929c <__mcmp>
 8008b4a:	2800      	cmp	r0, #0
 8008b4c:	dc96      	bgt.n	8008a7c <_dtoa_r+0xabc>
 8008b4e:	d102      	bne.n	8008b56 <_dtoa_r+0xb96>
 8008b50:	f019 0f01 	tst.w	r9, #1
 8008b54:	d192      	bne.n	8008a7c <_dtoa_r+0xabc>
 8008b56:	462b      	mov	r3, r5
 8008b58:	461d      	mov	r5, r3
 8008b5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b5e:	2a30      	cmp	r2, #48	; 0x30
 8008b60:	d0fa      	beq.n	8008b58 <_dtoa_r+0xb98>
 8008b62:	e6dd      	b.n	8008920 <_dtoa_r+0x960>
 8008b64:	9a00      	ldr	r2, [sp, #0]
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d189      	bne.n	8008a7e <_dtoa_r+0xabe>
 8008b6a:	f10b 0b01 	add.w	fp, fp, #1
 8008b6e:	2331      	movs	r3, #49	; 0x31
 8008b70:	e796      	b.n	8008aa0 <_dtoa_r+0xae0>
 8008b72:	4b0a      	ldr	r3, [pc, #40]	; (8008b9c <_dtoa_r+0xbdc>)
 8008b74:	f7ff ba99 	b.w	80080aa <_dtoa_r+0xea>
 8008b78:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	f47f aa6d 	bne.w	800805a <_dtoa_r+0x9a>
 8008b80:	4b07      	ldr	r3, [pc, #28]	; (8008ba0 <_dtoa_r+0xbe0>)
 8008b82:	f7ff ba92 	b.w	80080aa <_dtoa_r+0xea>
 8008b86:	9b01      	ldr	r3, [sp, #4]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	dcb5      	bgt.n	8008af8 <_dtoa_r+0xb38>
 8008b8c:	9b07      	ldr	r3, [sp, #28]
 8008b8e:	2b02      	cmp	r3, #2
 8008b90:	f73f aeb1 	bgt.w	80088f6 <_dtoa_r+0x936>
 8008b94:	e7b0      	b.n	8008af8 <_dtoa_r+0xb38>
 8008b96:	bf00      	nop
 8008b98:	0800a62d 	.word	0x0800a62d
 8008b9c:	0800a58d 	.word	0x0800a58d
 8008ba0:	0800a5b1 	.word	0x0800a5b1

08008ba4 <_free_r>:
 8008ba4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ba6:	2900      	cmp	r1, #0
 8008ba8:	d044      	beq.n	8008c34 <_free_r+0x90>
 8008baa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bae:	9001      	str	r0, [sp, #4]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	f1a1 0404 	sub.w	r4, r1, #4
 8008bb6:	bfb8      	it	lt
 8008bb8:	18e4      	addlt	r4, r4, r3
 8008bba:	f000 f8e7 	bl	8008d8c <__malloc_lock>
 8008bbe:	4a1e      	ldr	r2, [pc, #120]	; (8008c38 <_free_r+0x94>)
 8008bc0:	9801      	ldr	r0, [sp, #4]
 8008bc2:	6813      	ldr	r3, [r2, #0]
 8008bc4:	b933      	cbnz	r3, 8008bd4 <_free_r+0x30>
 8008bc6:	6063      	str	r3, [r4, #4]
 8008bc8:	6014      	str	r4, [r2, #0]
 8008bca:	b003      	add	sp, #12
 8008bcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008bd0:	f000 b8e2 	b.w	8008d98 <__malloc_unlock>
 8008bd4:	42a3      	cmp	r3, r4
 8008bd6:	d908      	bls.n	8008bea <_free_r+0x46>
 8008bd8:	6825      	ldr	r5, [r4, #0]
 8008bda:	1961      	adds	r1, r4, r5
 8008bdc:	428b      	cmp	r3, r1
 8008bde:	bf01      	itttt	eq
 8008be0:	6819      	ldreq	r1, [r3, #0]
 8008be2:	685b      	ldreq	r3, [r3, #4]
 8008be4:	1949      	addeq	r1, r1, r5
 8008be6:	6021      	streq	r1, [r4, #0]
 8008be8:	e7ed      	b.n	8008bc6 <_free_r+0x22>
 8008bea:	461a      	mov	r2, r3
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	b10b      	cbz	r3, 8008bf4 <_free_r+0x50>
 8008bf0:	42a3      	cmp	r3, r4
 8008bf2:	d9fa      	bls.n	8008bea <_free_r+0x46>
 8008bf4:	6811      	ldr	r1, [r2, #0]
 8008bf6:	1855      	adds	r5, r2, r1
 8008bf8:	42a5      	cmp	r5, r4
 8008bfa:	d10b      	bne.n	8008c14 <_free_r+0x70>
 8008bfc:	6824      	ldr	r4, [r4, #0]
 8008bfe:	4421      	add	r1, r4
 8008c00:	1854      	adds	r4, r2, r1
 8008c02:	42a3      	cmp	r3, r4
 8008c04:	6011      	str	r1, [r2, #0]
 8008c06:	d1e0      	bne.n	8008bca <_free_r+0x26>
 8008c08:	681c      	ldr	r4, [r3, #0]
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	6053      	str	r3, [r2, #4]
 8008c0e:	440c      	add	r4, r1
 8008c10:	6014      	str	r4, [r2, #0]
 8008c12:	e7da      	b.n	8008bca <_free_r+0x26>
 8008c14:	d902      	bls.n	8008c1c <_free_r+0x78>
 8008c16:	230c      	movs	r3, #12
 8008c18:	6003      	str	r3, [r0, #0]
 8008c1a:	e7d6      	b.n	8008bca <_free_r+0x26>
 8008c1c:	6825      	ldr	r5, [r4, #0]
 8008c1e:	1961      	adds	r1, r4, r5
 8008c20:	428b      	cmp	r3, r1
 8008c22:	bf04      	itt	eq
 8008c24:	6819      	ldreq	r1, [r3, #0]
 8008c26:	685b      	ldreq	r3, [r3, #4]
 8008c28:	6063      	str	r3, [r4, #4]
 8008c2a:	bf04      	itt	eq
 8008c2c:	1949      	addeq	r1, r1, r5
 8008c2e:	6021      	streq	r1, [r4, #0]
 8008c30:	6054      	str	r4, [r2, #4]
 8008c32:	e7ca      	b.n	8008bca <_free_r+0x26>
 8008c34:	b003      	add	sp, #12
 8008c36:	bd30      	pop	{r4, r5, pc}
 8008c38:	20000644 	.word	0x20000644

08008c3c <malloc>:
 8008c3c:	4b02      	ldr	r3, [pc, #8]	; (8008c48 <malloc+0xc>)
 8008c3e:	4601      	mov	r1, r0
 8008c40:	6818      	ldr	r0, [r3, #0]
 8008c42:	f000 b823 	b.w	8008c8c <_malloc_r>
 8008c46:	bf00      	nop
 8008c48:	200000e0 	.word	0x200000e0

08008c4c <sbrk_aligned>:
 8008c4c:	b570      	push	{r4, r5, r6, lr}
 8008c4e:	4e0e      	ldr	r6, [pc, #56]	; (8008c88 <sbrk_aligned+0x3c>)
 8008c50:	460c      	mov	r4, r1
 8008c52:	6831      	ldr	r1, [r6, #0]
 8008c54:	4605      	mov	r5, r0
 8008c56:	b911      	cbnz	r1, 8008c5e <sbrk_aligned+0x12>
 8008c58:	f000 fe40 	bl	80098dc <_sbrk_r>
 8008c5c:	6030      	str	r0, [r6, #0]
 8008c5e:	4621      	mov	r1, r4
 8008c60:	4628      	mov	r0, r5
 8008c62:	f000 fe3b 	bl	80098dc <_sbrk_r>
 8008c66:	1c43      	adds	r3, r0, #1
 8008c68:	d00a      	beq.n	8008c80 <sbrk_aligned+0x34>
 8008c6a:	1cc4      	adds	r4, r0, #3
 8008c6c:	f024 0403 	bic.w	r4, r4, #3
 8008c70:	42a0      	cmp	r0, r4
 8008c72:	d007      	beq.n	8008c84 <sbrk_aligned+0x38>
 8008c74:	1a21      	subs	r1, r4, r0
 8008c76:	4628      	mov	r0, r5
 8008c78:	f000 fe30 	bl	80098dc <_sbrk_r>
 8008c7c:	3001      	adds	r0, #1
 8008c7e:	d101      	bne.n	8008c84 <sbrk_aligned+0x38>
 8008c80:	f04f 34ff 	mov.w	r4, #4294967295
 8008c84:	4620      	mov	r0, r4
 8008c86:	bd70      	pop	{r4, r5, r6, pc}
 8008c88:	20000648 	.word	0x20000648

08008c8c <_malloc_r>:
 8008c8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c90:	1ccd      	adds	r5, r1, #3
 8008c92:	f025 0503 	bic.w	r5, r5, #3
 8008c96:	3508      	adds	r5, #8
 8008c98:	2d0c      	cmp	r5, #12
 8008c9a:	bf38      	it	cc
 8008c9c:	250c      	movcc	r5, #12
 8008c9e:	2d00      	cmp	r5, #0
 8008ca0:	4607      	mov	r7, r0
 8008ca2:	db01      	blt.n	8008ca8 <_malloc_r+0x1c>
 8008ca4:	42a9      	cmp	r1, r5
 8008ca6:	d905      	bls.n	8008cb4 <_malloc_r+0x28>
 8008ca8:	230c      	movs	r3, #12
 8008caa:	603b      	str	r3, [r7, #0]
 8008cac:	2600      	movs	r6, #0
 8008cae:	4630      	mov	r0, r6
 8008cb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cb4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008d88 <_malloc_r+0xfc>
 8008cb8:	f000 f868 	bl	8008d8c <__malloc_lock>
 8008cbc:	f8d8 3000 	ldr.w	r3, [r8]
 8008cc0:	461c      	mov	r4, r3
 8008cc2:	bb5c      	cbnz	r4, 8008d1c <_malloc_r+0x90>
 8008cc4:	4629      	mov	r1, r5
 8008cc6:	4638      	mov	r0, r7
 8008cc8:	f7ff ffc0 	bl	8008c4c <sbrk_aligned>
 8008ccc:	1c43      	adds	r3, r0, #1
 8008cce:	4604      	mov	r4, r0
 8008cd0:	d155      	bne.n	8008d7e <_malloc_r+0xf2>
 8008cd2:	f8d8 4000 	ldr.w	r4, [r8]
 8008cd6:	4626      	mov	r6, r4
 8008cd8:	2e00      	cmp	r6, #0
 8008cda:	d145      	bne.n	8008d68 <_malloc_r+0xdc>
 8008cdc:	2c00      	cmp	r4, #0
 8008cde:	d048      	beq.n	8008d72 <_malloc_r+0xe6>
 8008ce0:	6823      	ldr	r3, [r4, #0]
 8008ce2:	4631      	mov	r1, r6
 8008ce4:	4638      	mov	r0, r7
 8008ce6:	eb04 0903 	add.w	r9, r4, r3
 8008cea:	f000 fdf7 	bl	80098dc <_sbrk_r>
 8008cee:	4581      	cmp	r9, r0
 8008cf0:	d13f      	bne.n	8008d72 <_malloc_r+0xe6>
 8008cf2:	6821      	ldr	r1, [r4, #0]
 8008cf4:	1a6d      	subs	r5, r5, r1
 8008cf6:	4629      	mov	r1, r5
 8008cf8:	4638      	mov	r0, r7
 8008cfa:	f7ff ffa7 	bl	8008c4c <sbrk_aligned>
 8008cfe:	3001      	adds	r0, #1
 8008d00:	d037      	beq.n	8008d72 <_malloc_r+0xe6>
 8008d02:	6823      	ldr	r3, [r4, #0]
 8008d04:	442b      	add	r3, r5
 8008d06:	6023      	str	r3, [r4, #0]
 8008d08:	f8d8 3000 	ldr.w	r3, [r8]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d038      	beq.n	8008d82 <_malloc_r+0xf6>
 8008d10:	685a      	ldr	r2, [r3, #4]
 8008d12:	42a2      	cmp	r2, r4
 8008d14:	d12b      	bne.n	8008d6e <_malloc_r+0xe2>
 8008d16:	2200      	movs	r2, #0
 8008d18:	605a      	str	r2, [r3, #4]
 8008d1a:	e00f      	b.n	8008d3c <_malloc_r+0xb0>
 8008d1c:	6822      	ldr	r2, [r4, #0]
 8008d1e:	1b52      	subs	r2, r2, r5
 8008d20:	d41f      	bmi.n	8008d62 <_malloc_r+0xd6>
 8008d22:	2a0b      	cmp	r2, #11
 8008d24:	d917      	bls.n	8008d56 <_malloc_r+0xca>
 8008d26:	1961      	adds	r1, r4, r5
 8008d28:	42a3      	cmp	r3, r4
 8008d2a:	6025      	str	r5, [r4, #0]
 8008d2c:	bf18      	it	ne
 8008d2e:	6059      	strne	r1, [r3, #4]
 8008d30:	6863      	ldr	r3, [r4, #4]
 8008d32:	bf08      	it	eq
 8008d34:	f8c8 1000 	streq.w	r1, [r8]
 8008d38:	5162      	str	r2, [r4, r5]
 8008d3a:	604b      	str	r3, [r1, #4]
 8008d3c:	4638      	mov	r0, r7
 8008d3e:	f104 060b 	add.w	r6, r4, #11
 8008d42:	f000 f829 	bl	8008d98 <__malloc_unlock>
 8008d46:	f026 0607 	bic.w	r6, r6, #7
 8008d4a:	1d23      	adds	r3, r4, #4
 8008d4c:	1af2      	subs	r2, r6, r3
 8008d4e:	d0ae      	beq.n	8008cae <_malloc_r+0x22>
 8008d50:	1b9b      	subs	r3, r3, r6
 8008d52:	50a3      	str	r3, [r4, r2]
 8008d54:	e7ab      	b.n	8008cae <_malloc_r+0x22>
 8008d56:	42a3      	cmp	r3, r4
 8008d58:	6862      	ldr	r2, [r4, #4]
 8008d5a:	d1dd      	bne.n	8008d18 <_malloc_r+0x8c>
 8008d5c:	f8c8 2000 	str.w	r2, [r8]
 8008d60:	e7ec      	b.n	8008d3c <_malloc_r+0xb0>
 8008d62:	4623      	mov	r3, r4
 8008d64:	6864      	ldr	r4, [r4, #4]
 8008d66:	e7ac      	b.n	8008cc2 <_malloc_r+0x36>
 8008d68:	4634      	mov	r4, r6
 8008d6a:	6876      	ldr	r6, [r6, #4]
 8008d6c:	e7b4      	b.n	8008cd8 <_malloc_r+0x4c>
 8008d6e:	4613      	mov	r3, r2
 8008d70:	e7cc      	b.n	8008d0c <_malloc_r+0x80>
 8008d72:	230c      	movs	r3, #12
 8008d74:	603b      	str	r3, [r7, #0]
 8008d76:	4638      	mov	r0, r7
 8008d78:	f000 f80e 	bl	8008d98 <__malloc_unlock>
 8008d7c:	e797      	b.n	8008cae <_malloc_r+0x22>
 8008d7e:	6025      	str	r5, [r4, #0]
 8008d80:	e7dc      	b.n	8008d3c <_malloc_r+0xb0>
 8008d82:	605b      	str	r3, [r3, #4]
 8008d84:	deff      	udf	#255	; 0xff
 8008d86:	bf00      	nop
 8008d88:	20000644 	.word	0x20000644

08008d8c <__malloc_lock>:
 8008d8c:	4801      	ldr	r0, [pc, #4]	; (8008d94 <__malloc_lock+0x8>)
 8008d8e:	f7ff b88a 	b.w	8007ea6 <__retarget_lock_acquire_recursive>
 8008d92:	bf00      	nop
 8008d94:	20000640 	.word	0x20000640

08008d98 <__malloc_unlock>:
 8008d98:	4801      	ldr	r0, [pc, #4]	; (8008da0 <__malloc_unlock+0x8>)
 8008d9a:	f7ff b885 	b.w	8007ea8 <__retarget_lock_release_recursive>
 8008d9e:	bf00      	nop
 8008da0:	20000640 	.word	0x20000640

08008da4 <_Balloc>:
 8008da4:	b570      	push	{r4, r5, r6, lr}
 8008da6:	69c6      	ldr	r6, [r0, #28]
 8008da8:	4604      	mov	r4, r0
 8008daa:	460d      	mov	r5, r1
 8008dac:	b976      	cbnz	r6, 8008dcc <_Balloc+0x28>
 8008dae:	2010      	movs	r0, #16
 8008db0:	f7ff ff44 	bl	8008c3c <malloc>
 8008db4:	4602      	mov	r2, r0
 8008db6:	61e0      	str	r0, [r4, #28]
 8008db8:	b920      	cbnz	r0, 8008dc4 <_Balloc+0x20>
 8008dba:	4b18      	ldr	r3, [pc, #96]	; (8008e1c <_Balloc+0x78>)
 8008dbc:	4818      	ldr	r0, [pc, #96]	; (8008e20 <_Balloc+0x7c>)
 8008dbe:	216b      	movs	r1, #107	; 0x6b
 8008dc0:	f000 fdaa 	bl	8009918 <__assert_func>
 8008dc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008dc8:	6006      	str	r6, [r0, #0]
 8008dca:	60c6      	str	r6, [r0, #12]
 8008dcc:	69e6      	ldr	r6, [r4, #28]
 8008dce:	68f3      	ldr	r3, [r6, #12]
 8008dd0:	b183      	cbz	r3, 8008df4 <_Balloc+0x50>
 8008dd2:	69e3      	ldr	r3, [r4, #28]
 8008dd4:	68db      	ldr	r3, [r3, #12]
 8008dd6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008dda:	b9b8      	cbnz	r0, 8008e0c <_Balloc+0x68>
 8008ddc:	2101      	movs	r1, #1
 8008dde:	fa01 f605 	lsl.w	r6, r1, r5
 8008de2:	1d72      	adds	r2, r6, #5
 8008de4:	0092      	lsls	r2, r2, #2
 8008de6:	4620      	mov	r0, r4
 8008de8:	f000 fdb4 	bl	8009954 <_calloc_r>
 8008dec:	b160      	cbz	r0, 8008e08 <_Balloc+0x64>
 8008dee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008df2:	e00e      	b.n	8008e12 <_Balloc+0x6e>
 8008df4:	2221      	movs	r2, #33	; 0x21
 8008df6:	2104      	movs	r1, #4
 8008df8:	4620      	mov	r0, r4
 8008dfa:	f000 fdab 	bl	8009954 <_calloc_r>
 8008dfe:	69e3      	ldr	r3, [r4, #28]
 8008e00:	60f0      	str	r0, [r6, #12]
 8008e02:	68db      	ldr	r3, [r3, #12]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d1e4      	bne.n	8008dd2 <_Balloc+0x2e>
 8008e08:	2000      	movs	r0, #0
 8008e0a:	bd70      	pop	{r4, r5, r6, pc}
 8008e0c:	6802      	ldr	r2, [r0, #0]
 8008e0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008e12:	2300      	movs	r3, #0
 8008e14:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008e18:	e7f7      	b.n	8008e0a <_Balloc+0x66>
 8008e1a:	bf00      	nop
 8008e1c:	0800a5be 	.word	0x0800a5be
 8008e20:	0800a63e 	.word	0x0800a63e

08008e24 <_Bfree>:
 8008e24:	b570      	push	{r4, r5, r6, lr}
 8008e26:	69c6      	ldr	r6, [r0, #28]
 8008e28:	4605      	mov	r5, r0
 8008e2a:	460c      	mov	r4, r1
 8008e2c:	b976      	cbnz	r6, 8008e4c <_Bfree+0x28>
 8008e2e:	2010      	movs	r0, #16
 8008e30:	f7ff ff04 	bl	8008c3c <malloc>
 8008e34:	4602      	mov	r2, r0
 8008e36:	61e8      	str	r0, [r5, #28]
 8008e38:	b920      	cbnz	r0, 8008e44 <_Bfree+0x20>
 8008e3a:	4b09      	ldr	r3, [pc, #36]	; (8008e60 <_Bfree+0x3c>)
 8008e3c:	4809      	ldr	r0, [pc, #36]	; (8008e64 <_Bfree+0x40>)
 8008e3e:	218f      	movs	r1, #143	; 0x8f
 8008e40:	f000 fd6a 	bl	8009918 <__assert_func>
 8008e44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e48:	6006      	str	r6, [r0, #0]
 8008e4a:	60c6      	str	r6, [r0, #12]
 8008e4c:	b13c      	cbz	r4, 8008e5e <_Bfree+0x3a>
 8008e4e:	69eb      	ldr	r3, [r5, #28]
 8008e50:	6862      	ldr	r2, [r4, #4]
 8008e52:	68db      	ldr	r3, [r3, #12]
 8008e54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e58:	6021      	str	r1, [r4, #0]
 8008e5a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008e5e:	bd70      	pop	{r4, r5, r6, pc}
 8008e60:	0800a5be 	.word	0x0800a5be
 8008e64:	0800a63e 	.word	0x0800a63e

08008e68 <__multadd>:
 8008e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e6c:	690d      	ldr	r5, [r1, #16]
 8008e6e:	4607      	mov	r7, r0
 8008e70:	460c      	mov	r4, r1
 8008e72:	461e      	mov	r6, r3
 8008e74:	f101 0c14 	add.w	ip, r1, #20
 8008e78:	2000      	movs	r0, #0
 8008e7a:	f8dc 3000 	ldr.w	r3, [ip]
 8008e7e:	b299      	uxth	r1, r3
 8008e80:	fb02 6101 	mla	r1, r2, r1, r6
 8008e84:	0c1e      	lsrs	r6, r3, #16
 8008e86:	0c0b      	lsrs	r3, r1, #16
 8008e88:	fb02 3306 	mla	r3, r2, r6, r3
 8008e8c:	b289      	uxth	r1, r1
 8008e8e:	3001      	adds	r0, #1
 8008e90:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008e94:	4285      	cmp	r5, r0
 8008e96:	f84c 1b04 	str.w	r1, [ip], #4
 8008e9a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008e9e:	dcec      	bgt.n	8008e7a <__multadd+0x12>
 8008ea0:	b30e      	cbz	r6, 8008ee6 <__multadd+0x7e>
 8008ea2:	68a3      	ldr	r3, [r4, #8]
 8008ea4:	42ab      	cmp	r3, r5
 8008ea6:	dc19      	bgt.n	8008edc <__multadd+0x74>
 8008ea8:	6861      	ldr	r1, [r4, #4]
 8008eaa:	4638      	mov	r0, r7
 8008eac:	3101      	adds	r1, #1
 8008eae:	f7ff ff79 	bl	8008da4 <_Balloc>
 8008eb2:	4680      	mov	r8, r0
 8008eb4:	b928      	cbnz	r0, 8008ec2 <__multadd+0x5a>
 8008eb6:	4602      	mov	r2, r0
 8008eb8:	4b0c      	ldr	r3, [pc, #48]	; (8008eec <__multadd+0x84>)
 8008eba:	480d      	ldr	r0, [pc, #52]	; (8008ef0 <__multadd+0x88>)
 8008ebc:	21ba      	movs	r1, #186	; 0xba
 8008ebe:	f000 fd2b 	bl	8009918 <__assert_func>
 8008ec2:	6922      	ldr	r2, [r4, #16]
 8008ec4:	3202      	adds	r2, #2
 8008ec6:	f104 010c 	add.w	r1, r4, #12
 8008eca:	0092      	lsls	r2, r2, #2
 8008ecc:	300c      	adds	r0, #12
 8008ece:	f000 fd15 	bl	80098fc <memcpy>
 8008ed2:	4621      	mov	r1, r4
 8008ed4:	4638      	mov	r0, r7
 8008ed6:	f7ff ffa5 	bl	8008e24 <_Bfree>
 8008eda:	4644      	mov	r4, r8
 8008edc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008ee0:	3501      	adds	r5, #1
 8008ee2:	615e      	str	r6, [r3, #20]
 8008ee4:	6125      	str	r5, [r4, #16]
 8008ee6:	4620      	mov	r0, r4
 8008ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008eec:	0800a62d 	.word	0x0800a62d
 8008ef0:	0800a63e 	.word	0x0800a63e

08008ef4 <__hi0bits>:
 8008ef4:	0c03      	lsrs	r3, r0, #16
 8008ef6:	041b      	lsls	r3, r3, #16
 8008ef8:	b9d3      	cbnz	r3, 8008f30 <__hi0bits+0x3c>
 8008efa:	0400      	lsls	r0, r0, #16
 8008efc:	2310      	movs	r3, #16
 8008efe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008f02:	bf04      	itt	eq
 8008f04:	0200      	lsleq	r0, r0, #8
 8008f06:	3308      	addeq	r3, #8
 8008f08:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008f0c:	bf04      	itt	eq
 8008f0e:	0100      	lsleq	r0, r0, #4
 8008f10:	3304      	addeq	r3, #4
 8008f12:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008f16:	bf04      	itt	eq
 8008f18:	0080      	lsleq	r0, r0, #2
 8008f1a:	3302      	addeq	r3, #2
 8008f1c:	2800      	cmp	r0, #0
 8008f1e:	db05      	blt.n	8008f2c <__hi0bits+0x38>
 8008f20:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008f24:	f103 0301 	add.w	r3, r3, #1
 8008f28:	bf08      	it	eq
 8008f2a:	2320      	moveq	r3, #32
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	4770      	bx	lr
 8008f30:	2300      	movs	r3, #0
 8008f32:	e7e4      	b.n	8008efe <__hi0bits+0xa>

08008f34 <__lo0bits>:
 8008f34:	6803      	ldr	r3, [r0, #0]
 8008f36:	f013 0207 	ands.w	r2, r3, #7
 8008f3a:	d00c      	beq.n	8008f56 <__lo0bits+0x22>
 8008f3c:	07d9      	lsls	r1, r3, #31
 8008f3e:	d422      	bmi.n	8008f86 <__lo0bits+0x52>
 8008f40:	079a      	lsls	r2, r3, #30
 8008f42:	bf49      	itett	mi
 8008f44:	085b      	lsrmi	r3, r3, #1
 8008f46:	089b      	lsrpl	r3, r3, #2
 8008f48:	6003      	strmi	r3, [r0, #0]
 8008f4a:	2201      	movmi	r2, #1
 8008f4c:	bf5c      	itt	pl
 8008f4e:	6003      	strpl	r3, [r0, #0]
 8008f50:	2202      	movpl	r2, #2
 8008f52:	4610      	mov	r0, r2
 8008f54:	4770      	bx	lr
 8008f56:	b299      	uxth	r1, r3
 8008f58:	b909      	cbnz	r1, 8008f5e <__lo0bits+0x2a>
 8008f5a:	0c1b      	lsrs	r3, r3, #16
 8008f5c:	2210      	movs	r2, #16
 8008f5e:	b2d9      	uxtb	r1, r3
 8008f60:	b909      	cbnz	r1, 8008f66 <__lo0bits+0x32>
 8008f62:	3208      	adds	r2, #8
 8008f64:	0a1b      	lsrs	r3, r3, #8
 8008f66:	0719      	lsls	r1, r3, #28
 8008f68:	bf04      	itt	eq
 8008f6a:	091b      	lsreq	r3, r3, #4
 8008f6c:	3204      	addeq	r2, #4
 8008f6e:	0799      	lsls	r1, r3, #30
 8008f70:	bf04      	itt	eq
 8008f72:	089b      	lsreq	r3, r3, #2
 8008f74:	3202      	addeq	r2, #2
 8008f76:	07d9      	lsls	r1, r3, #31
 8008f78:	d403      	bmi.n	8008f82 <__lo0bits+0x4e>
 8008f7a:	085b      	lsrs	r3, r3, #1
 8008f7c:	f102 0201 	add.w	r2, r2, #1
 8008f80:	d003      	beq.n	8008f8a <__lo0bits+0x56>
 8008f82:	6003      	str	r3, [r0, #0]
 8008f84:	e7e5      	b.n	8008f52 <__lo0bits+0x1e>
 8008f86:	2200      	movs	r2, #0
 8008f88:	e7e3      	b.n	8008f52 <__lo0bits+0x1e>
 8008f8a:	2220      	movs	r2, #32
 8008f8c:	e7e1      	b.n	8008f52 <__lo0bits+0x1e>
	...

08008f90 <__i2b>:
 8008f90:	b510      	push	{r4, lr}
 8008f92:	460c      	mov	r4, r1
 8008f94:	2101      	movs	r1, #1
 8008f96:	f7ff ff05 	bl	8008da4 <_Balloc>
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	b928      	cbnz	r0, 8008faa <__i2b+0x1a>
 8008f9e:	4b05      	ldr	r3, [pc, #20]	; (8008fb4 <__i2b+0x24>)
 8008fa0:	4805      	ldr	r0, [pc, #20]	; (8008fb8 <__i2b+0x28>)
 8008fa2:	f240 1145 	movw	r1, #325	; 0x145
 8008fa6:	f000 fcb7 	bl	8009918 <__assert_func>
 8008faa:	2301      	movs	r3, #1
 8008fac:	6144      	str	r4, [r0, #20]
 8008fae:	6103      	str	r3, [r0, #16]
 8008fb0:	bd10      	pop	{r4, pc}
 8008fb2:	bf00      	nop
 8008fb4:	0800a62d 	.word	0x0800a62d
 8008fb8:	0800a63e 	.word	0x0800a63e

08008fbc <__multiply>:
 8008fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fc0:	4691      	mov	r9, r2
 8008fc2:	690a      	ldr	r2, [r1, #16]
 8008fc4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	bfb8      	it	lt
 8008fcc:	460b      	movlt	r3, r1
 8008fce:	460c      	mov	r4, r1
 8008fd0:	bfbc      	itt	lt
 8008fd2:	464c      	movlt	r4, r9
 8008fd4:	4699      	movlt	r9, r3
 8008fd6:	6927      	ldr	r7, [r4, #16]
 8008fd8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008fdc:	68a3      	ldr	r3, [r4, #8]
 8008fde:	6861      	ldr	r1, [r4, #4]
 8008fe0:	eb07 060a 	add.w	r6, r7, sl
 8008fe4:	42b3      	cmp	r3, r6
 8008fe6:	b085      	sub	sp, #20
 8008fe8:	bfb8      	it	lt
 8008fea:	3101      	addlt	r1, #1
 8008fec:	f7ff feda 	bl	8008da4 <_Balloc>
 8008ff0:	b930      	cbnz	r0, 8009000 <__multiply+0x44>
 8008ff2:	4602      	mov	r2, r0
 8008ff4:	4b44      	ldr	r3, [pc, #272]	; (8009108 <__multiply+0x14c>)
 8008ff6:	4845      	ldr	r0, [pc, #276]	; (800910c <__multiply+0x150>)
 8008ff8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008ffc:	f000 fc8c 	bl	8009918 <__assert_func>
 8009000:	f100 0514 	add.w	r5, r0, #20
 8009004:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009008:	462b      	mov	r3, r5
 800900a:	2200      	movs	r2, #0
 800900c:	4543      	cmp	r3, r8
 800900e:	d321      	bcc.n	8009054 <__multiply+0x98>
 8009010:	f104 0314 	add.w	r3, r4, #20
 8009014:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009018:	f109 0314 	add.w	r3, r9, #20
 800901c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009020:	9202      	str	r2, [sp, #8]
 8009022:	1b3a      	subs	r2, r7, r4
 8009024:	3a15      	subs	r2, #21
 8009026:	f022 0203 	bic.w	r2, r2, #3
 800902a:	3204      	adds	r2, #4
 800902c:	f104 0115 	add.w	r1, r4, #21
 8009030:	428f      	cmp	r7, r1
 8009032:	bf38      	it	cc
 8009034:	2204      	movcc	r2, #4
 8009036:	9201      	str	r2, [sp, #4]
 8009038:	9a02      	ldr	r2, [sp, #8]
 800903a:	9303      	str	r3, [sp, #12]
 800903c:	429a      	cmp	r2, r3
 800903e:	d80c      	bhi.n	800905a <__multiply+0x9e>
 8009040:	2e00      	cmp	r6, #0
 8009042:	dd03      	ble.n	800904c <__multiply+0x90>
 8009044:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009048:	2b00      	cmp	r3, #0
 800904a:	d05b      	beq.n	8009104 <__multiply+0x148>
 800904c:	6106      	str	r6, [r0, #16]
 800904e:	b005      	add	sp, #20
 8009050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009054:	f843 2b04 	str.w	r2, [r3], #4
 8009058:	e7d8      	b.n	800900c <__multiply+0x50>
 800905a:	f8b3 a000 	ldrh.w	sl, [r3]
 800905e:	f1ba 0f00 	cmp.w	sl, #0
 8009062:	d024      	beq.n	80090ae <__multiply+0xf2>
 8009064:	f104 0e14 	add.w	lr, r4, #20
 8009068:	46a9      	mov	r9, r5
 800906a:	f04f 0c00 	mov.w	ip, #0
 800906e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009072:	f8d9 1000 	ldr.w	r1, [r9]
 8009076:	fa1f fb82 	uxth.w	fp, r2
 800907a:	b289      	uxth	r1, r1
 800907c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009080:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009084:	f8d9 2000 	ldr.w	r2, [r9]
 8009088:	4461      	add	r1, ip
 800908a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800908e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009092:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009096:	b289      	uxth	r1, r1
 8009098:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800909c:	4577      	cmp	r7, lr
 800909e:	f849 1b04 	str.w	r1, [r9], #4
 80090a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80090a6:	d8e2      	bhi.n	800906e <__multiply+0xb2>
 80090a8:	9a01      	ldr	r2, [sp, #4]
 80090aa:	f845 c002 	str.w	ip, [r5, r2]
 80090ae:	9a03      	ldr	r2, [sp, #12]
 80090b0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80090b4:	3304      	adds	r3, #4
 80090b6:	f1b9 0f00 	cmp.w	r9, #0
 80090ba:	d021      	beq.n	8009100 <__multiply+0x144>
 80090bc:	6829      	ldr	r1, [r5, #0]
 80090be:	f104 0c14 	add.w	ip, r4, #20
 80090c2:	46ae      	mov	lr, r5
 80090c4:	f04f 0a00 	mov.w	sl, #0
 80090c8:	f8bc b000 	ldrh.w	fp, [ip]
 80090cc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80090d0:	fb09 220b 	mla	r2, r9, fp, r2
 80090d4:	4452      	add	r2, sl
 80090d6:	b289      	uxth	r1, r1
 80090d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80090dc:	f84e 1b04 	str.w	r1, [lr], #4
 80090e0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80090e4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80090e8:	f8be 1000 	ldrh.w	r1, [lr]
 80090ec:	fb09 110a 	mla	r1, r9, sl, r1
 80090f0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80090f4:	4567      	cmp	r7, ip
 80090f6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80090fa:	d8e5      	bhi.n	80090c8 <__multiply+0x10c>
 80090fc:	9a01      	ldr	r2, [sp, #4]
 80090fe:	50a9      	str	r1, [r5, r2]
 8009100:	3504      	adds	r5, #4
 8009102:	e799      	b.n	8009038 <__multiply+0x7c>
 8009104:	3e01      	subs	r6, #1
 8009106:	e79b      	b.n	8009040 <__multiply+0x84>
 8009108:	0800a62d 	.word	0x0800a62d
 800910c:	0800a63e 	.word	0x0800a63e

08009110 <__pow5mult>:
 8009110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009114:	4615      	mov	r5, r2
 8009116:	f012 0203 	ands.w	r2, r2, #3
 800911a:	4606      	mov	r6, r0
 800911c:	460f      	mov	r7, r1
 800911e:	d007      	beq.n	8009130 <__pow5mult+0x20>
 8009120:	4c25      	ldr	r4, [pc, #148]	; (80091b8 <__pow5mult+0xa8>)
 8009122:	3a01      	subs	r2, #1
 8009124:	2300      	movs	r3, #0
 8009126:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800912a:	f7ff fe9d 	bl	8008e68 <__multadd>
 800912e:	4607      	mov	r7, r0
 8009130:	10ad      	asrs	r5, r5, #2
 8009132:	d03d      	beq.n	80091b0 <__pow5mult+0xa0>
 8009134:	69f4      	ldr	r4, [r6, #28]
 8009136:	b97c      	cbnz	r4, 8009158 <__pow5mult+0x48>
 8009138:	2010      	movs	r0, #16
 800913a:	f7ff fd7f 	bl	8008c3c <malloc>
 800913e:	4602      	mov	r2, r0
 8009140:	61f0      	str	r0, [r6, #28]
 8009142:	b928      	cbnz	r0, 8009150 <__pow5mult+0x40>
 8009144:	4b1d      	ldr	r3, [pc, #116]	; (80091bc <__pow5mult+0xac>)
 8009146:	481e      	ldr	r0, [pc, #120]	; (80091c0 <__pow5mult+0xb0>)
 8009148:	f240 11b3 	movw	r1, #435	; 0x1b3
 800914c:	f000 fbe4 	bl	8009918 <__assert_func>
 8009150:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009154:	6004      	str	r4, [r0, #0]
 8009156:	60c4      	str	r4, [r0, #12]
 8009158:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800915c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009160:	b94c      	cbnz	r4, 8009176 <__pow5mult+0x66>
 8009162:	f240 2171 	movw	r1, #625	; 0x271
 8009166:	4630      	mov	r0, r6
 8009168:	f7ff ff12 	bl	8008f90 <__i2b>
 800916c:	2300      	movs	r3, #0
 800916e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009172:	4604      	mov	r4, r0
 8009174:	6003      	str	r3, [r0, #0]
 8009176:	f04f 0900 	mov.w	r9, #0
 800917a:	07eb      	lsls	r3, r5, #31
 800917c:	d50a      	bpl.n	8009194 <__pow5mult+0x84>
 800917e:	4639      	mov	r1, r7
 8009180:	4622      	mov	r2, r4
 8009182:	4630      	mov	r0, r6
 8009184:	f7ff ff1a 	bl	8008fbc <__multiply>
 8009188:	4639      	mov	r1, r7
 800918a:	4680      	mov	r8, r0
 800918c:	4630      	mov	r0, r6
 800918e:	f7ff fe49 	bl	8008e24 <_Bfree>
 8009192:	4647      	mov	r7, r8
 8009194:	106d      	asrs	r5, r5, #1
 8009196:	d00b      	beq.n	80091b0 <__pow5mult+0xa0>
 8009198:	6820      	ldr	r0, [r4, #0]
 800919a:	b938      	cbnz	r0, 80091ac <__pow5mult+0x9c>
 800919c:	4622      	mov	r2, r4
 800919e:	4621      	mov	r1, r4
 80091a0:	4630      	mov	r0, r6
 80091a2:	f7ff ff0b 	bl	8008fbc <__multiply>
 80091a6:	6020      	str	r0, [r4, #0]
 80091a8:	f8c0 9000 	str.w	r9, [r0]
 80091ac:	4604      	mov	r4, r0
 80091ae:	e7e4      	b.n	800917a <__pow5mult+0x6a>
 80091b0:	4638      	mov	r0, r7
 80091b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091b6:	bf00      	nop
 80091b8:	0800a788 	.word	0x0800a788
 80091bc:	0800a5be 	.word	0x0800a5be
 80091c0:	0800a63e 	.word	0x0800a63e

080091c4 <__lshift>:
 80091c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091c8:	460c      	mov	r4, r1
 80091ca:	6849      	ldr	r1, [r1, #4]
 80091cc:	6923      	ldr	r3, [r4, #16]
 80091ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80091d2:	68a3      	ldr	r3, [r4, #8]
 80091d4:	4607      	mov	r7, r0
 80091d6:	4691      	mov	r9, r2
 80091d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80091dc:	f108 0601 	add.w	r6, r8, #1
 80091e0:	42b3      	cmp	r3, r6
 80091e2:	db0b      	blt.n	80091fc <__lshift+0x38>
 80091e4:	4638      	mov	r0, r7
 80091e6:	f7ff fddd 	bl	8008da4 <_Balloc>
 80091ea:	4605      	mov	r5, r0
 80091ec:	b948      	cbnz	r0, 8009202 <__lshift+0x3e>
 80091ee:	4602      	mov	r2, r0
 80091f0:	4b28      	ldr	r3, [pc, #160]	; (8009294 <__lshift+0xd0>)
 80091f2:	4829      	ldr	r0, [pc, #164]	; (8009298 <__lshift+0xd4>)
 80091f4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80091f8:	f000 fb8e 	bl	8009918 <__assert_func>
 80091fc:	3101      	adds	r1, #1
 80091fe:	005b      	lsls	r3, r3, #1
 8009200:	e7ee      	b.n	80091e0 <__lshift+0x1c>
 8009202:	2300      	movs	r3, #0
 8009204:	f100 0114 	add.w	r1, r0, #20
 8009208:	f100 0210 	add.w	r2, r0, #16
 800920c:	4618      	mov	r0, r3
 800920e:	4553      	cmp	r3, sl
 8009210:	db33      	blt.n	800927a <__lshift+0xb6>
 8009212:	6920      	ldr	r0, [r4, #16]
 8009214:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009218:	f104 0314 	add.w	r3, r4, #20
 800921c:	f019 091f 	ands.w	r9, r9, #31
 8009220:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009224:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009228:	d02b      	beq.n	8009282 <__lshift+0xbe>
 800922a:	f1c9 0e20 	rsb	lr, r9, #32
 800922e:	468a      	mov	sl, r1
 8009230:	2200      	movs	r2, #0
 8009232:	6818      	ldr	r0, [r3, #0]
 8009234:	fa00 f009 	lsl.w	r0, r0, r9
 8009238:	4310      	orrs	r0, r2
 800923a:	f84a 0b04 	str.w	r0, [sl], #4
 800923e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009242:	459c      	cmp	ip, r3
 8009244:	fa22 f20e 	lsr.w	r2, r2, lr
 8009248:	d8f3      	bhi.n	8009232 <__lshift+0x6e>
 800924a:	ebac 0304 	sub.w	r3, ip, r4
 800924e:	3b15      	subs	r3, #21
 8009250:	f023 0303 	bic.w	r3, r3, #3
 8009254:	3304      	adds	r3, #4
 8009256:	f104 0015 	add.w	r0, r4, #21
 800925a:	4584      	cmp	ip, r0
 800925c:	bf38      	it	cc
 800925e:	2304      	movcc	r3, #4
 8009260:	50ca      	str	r2, [r1, r3]
 8009262:	b10a      	cbz	r2, 8009268 <__lshift+0xa4>
 8009264:	f108 0602 	add.w	r6, r8, #2
 8009268:	3e01      	subs	r6, #1
 800926a:	4638      	mov	r0, r7
 800926c:	612e      	str	r6, [r5, #16]
 800926e:	4621      	mov	r1, r4
 8009270:	f7ff fdd8 	bl	8008e24 <_Bfree>
 8009274:	4628      	mov	r0, r5
 8009276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800927a:	f842 0f04 	str.w	r0, [r2, #4]!
 800927e:	3301      	adds	r3, #1
 8009280:	e7c5      	b.n	800920e <__lshift+0x4a>
 8009282:	3904      	subs	r1, #4
 8009284:	f853 2b04 	ldr.w	r2, [r3], #4
 8009288:	f841 2f04 	str.w	r2, [r1, #4]!
 800928c:	459c      	cmp	ip, r3
 800928e:	d8f9      	bhi.n	8009284 <__lshift+0xc0>
 8009290:	e7ea      	b.n	8009268 <__lshift+0xa4>
 8009292:	bf00      	nop
 8009294:	0800a62d 	.word	0x0800a62d
 8009298:	0800a63e 	.word	0x0800a63e

0800929c <__mcmp>:
 800929c:	b530      	push	{r4, r5, lr}
 800929e:	6902      	ldr	r2, [r0, #16]
 80092a0:	690c      	ldr	r4, [r1, #16]
 80092a2:	1b12      	subs	r2, r2, r4
 80092a4:	d10e      	bne.n	80092c4 <__mcmp+0x28>
 80092a6:	f100 0314 	add.w	r3, r0, #20
 80092aa:	3114      	adds	r1, #20
 80092ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80092b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80092b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80092b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80092bc:	42a5      	cmp	r5, r4
 80092be:	d003      	beq.n	80092c8 <__mcmp+0x2c>
 80092c0:	d305      	bcc.n	80092ce <__mcmp+0x32>
 80092c2:	2201      	movs	r2, #1
 80092c4:	4610      	mov	r0, r2
 80092c6:	bd30      	pop	{r4, r5, pc}
 80092c8:	4283      	cmp	r3, r0
 80092ca:	d3f3      	bcc.n	80092b4 <__mcmp+0x18>
 80092cc:	e7fa      	b.n	80092c4 <__mcmp+0x28>
 80092ce:	f04f 32ff 	mov.w	r2, #4294967295
 80092d2:	e7f7      	b.n	80092c4 <__mcmp+0x28>

080092d4 <__mdiff>:
 80092d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092d8:	460c      	mov	r4, r1
 80092da:	4606      	mov	r6, r0
 80092dc:	4611      	mov	r1, r2
 80092de:	4620      	mov	r0, r4
 80092e0:	4690      	mov	r8, r2
 80092e2:	f7ff ffdb 	bl	800929c <__mcmp>
 80092e6:	1e05      	subs	r5, r0, #0
 80092e8:	d110      	bne.n	800930c <__mdiff+0x38>
 80092ea:	4629      	mov	r1, r5
 80092ec:	4630      	mov	r0, r6
 80092ee:	f7ff fd59 	bl	8008da4 <_Balloc>
 80092f2:	b930      	cbnz	r0, 8009302 <__mdiff+0x2e>
 80092f4:	4b3a      	ldr	r3, [pc, #232]	; (80093e0 <__mdiff+0x10c>)
 80092f6:	4602      	mov	r2, r0
 80092f8:	f240 2137 	movw	r1, #567	; 0x237
 80092fc:	4839      	ldr	r0, [pc, #228]	; (80093e4 <__mdiff+0x110>)
 80092fe:	f000 fb0b 	bl	8009918 <__assert_func>
 8009302:	2301      	movs	r3, #1
 8009304:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009308:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800930c:	bfa4      	itt	ge
 800930e:	4643      	movge	r3, r8
 8009310:	46a0      	movge	r8, r4
 8009312:	4630      	mov	r0, r6
 8009314:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009318:	bfa6      	itte	ge
 800931a:	461c      	movge	r4, r3
 800931c:	2500      	movge	r5, #0
 800931e:	2501      	movlt	r5, #1
 8009320:	f7ff fd40 	bl	8008da4 <_Balloc>
 8009324:	b920      	cbnz	r0, 8009330 <__mdiff+0x5c>
 8009326:	4b2e      	ldr	r3, [pc, #184]	; (80093e0 <__mdiff+0x10c>)
 8009328:	4602      	mov	r2, r0
 800932a:	f240 2145 	movw	r1, #581	; 0x245
 800932e:	e7e5      	b.n	80092fc <__mdiff+0x28>
 8009330:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009334:	6926      	ldr	r6, [r4, #16]
 8009336:	60c5      	str	r5, [r0, #12]
 8009338:	f104 0914 	add.w	r9, r4, #20
 800933c:	f108 0514 	add.w	r5, r8, #20
 8009340:	f100 0e14 	add.w	lr, r0, #20
 8009344:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009348:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800934c:	f108 0210 	add.w	r2, r8, #16
 8009350:	46f2      	mov	sl, lr
 8009352:	2100      	movs	r1, #0
 8009354:	f859 3b04 	ldr.w	r3, [r9], #4
 8009358:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800935c:	fa11 f88b 	uxtah	r8, r1, fp
 8009360:	b299      	uxth	r1, r3
 8009362:	0c1b      	lsrs	r3, r3, #16
 8009364:	eba8 0801 	sub.w	r8, r8, r1
 8009368:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800936c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009370:	fa1f f888 	uxth.w	r8, r8
 8009374:	1419      	asrs	r1, r3, #16
 8009376:	454e      	cmp	r6, r9
 8009378:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800937c:	f84a 3b04 	str.w	r3, [sl], #4
 8009380:	d8e8      	bhi.n	8009354 <__mdiff+0x80>
 8009382:	1b33      	subs	r3, r6, r4
 8009384:	3b15      	subs	r3, #21
 8009386:	f023 0303 	bic.w	r3, r3, #3
 800938a:	3304      	adds	r3, #4
 800938c:	3415      	adds	r4, #21
 800938e:	42a6      	cmp	r6, r4
 8009390:	bf38      	it	cc
 8009392:	2304      	movcc	r3, #4
 8009394:	441d      	add	r5, r3
 8009396:	4473      	add	r3, lr
 8009398:	469e      	mov	lr, r3
 800939a:	462e      	mov	r6, r5
 800939c:	4566      	cmp	r6, ip
 800939e:	d30e      	bcc.n	80093be <__mdiff+0xea>
 80093a0:	f10c 0203 	add.w	r2, ip, #3
 80093a4:	1b52      	subs	r2, r2, r5
 80093a6:	f022 0203 	bic.w	r2, r2, #3
 80093aa:	3d03      	subs	r5, #3
 80093ac:	45ac      	cmp	ip, r5
 80093ae:	bf38      	it	cc
 80093b0:	2200      	movcc	r2, #0
 80093b2:	4413      	add	r3, r2
 80093b4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80093b8:	b17a      	cbz	r2, 80093da <__mdiff+0x106>
 80093ba:	6107      	str	r7, [r0, #16]
 80093bc:	e7a4      	b.n	8009308 <__mdiff+0x34>
 80093be:	f856 8b04 	ldr.w	r8, [r6], #4
 80093c2:	fa11 f288 	uxtah	r2, r1, r8
 80093c6:	1414      	asrs	r4, r2, #16
 80093c8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80093cc:	b292      	uxth	r2, r2
 80093ce:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80093d2:	f84e 2b04 	str.w	r2, [lr], #4
 80093d6:	1421      	asrs	r1, r4, #16
 80093d8:	e7e0      	b.n	800939c <__mdiff+0xc8>
 80093da:	3f01      	subs	r7, #1
 80093dc:	e7ea      	b.n	80093b4 <__mdiff+0xe0>
 80093de:	bf00      	nop
 80093e0:	0800a62d 	.word	0x0800a62d
 80093e4:	0800a63e 	.word	0x0800a63e

080093e8 <__d2b>:
 80093e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80093ec:	460f      	mov	r7, r1
 80093ee:	2101      	movs	r1, #1
 80093f0:	ec59 8b10 	vmov	r8, r9, d0
 80093f4:	4616      	mov	r6, r2
 80093f6:	f7ff fcd5 	bl	8008da4 <_Balloc>
 80093fa:	4604      	mov	r4, r0
 80093fc:	b930      	cbnz	r0, 800940c <__d2b+0x24>
 80093fe:	4602      	mov	r2, r0
 8009400:	4b24      	ldr	r3, [pc, #144]	; (8009494 <__d2b+0xac>)
 8009402:	4825      	ldr	r0, [pc, #148]	; (8009498 <__d2b+0xb0>)
 8009404:	f240 310f 	movw	r1, #783	; 0x30f
 8009408:	f000 fa86 	bl	8009918 <__assert_func>
 800940c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009410:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009414:	bb2d      	cbnz	r5, 8009462 <__d2b+0x7a>
 8009416:	9301      	str	r3, [sp, #4]
 8009418:	f1b8 0300 	subs.w	r3, r8, #0
 800941c:	d026      	beq.n	800946c <__d2b+0x84>
 800941e:	4668      	mov	r0, sp
 8009420:	9300      	str	r3, [sp, #0]
 8009422:	f7ff fd87 	bl	8008f34 <__lo0bits>
 8009426:	e9dd 1200 	ldrd	r1, r2, [sp]
 800942a:	b1e8      	cbz	r0, 8009468 <__d2b+0x80>
 800942c:	f1c0 0320 	rsb	r3, r0, #32
 8009430:	fa02 f303 	lsl.w	r3, r2, r3
 8009434:	430b      	orrs	r3, r1
 8009436:	40c2      	lsrs	r2, r0
 8009438:	6163      	str	r3, [r4, #20]
 800943a:	9201      	str	r2, [sp, #4]
 800943c:	9b01      	ldr	r3, [sp, #4]
 800943e:	61a3      	str	r3, [r4, #24]
 8009440:	2b00      	cmp	r3, #0
 8009442:	bf14      	ite	ne
 8009444:	2202      	movne	r2, #2
 8009446:	2201      	moveq	r2, #1
 8009448:	6122      	str	r2, [r4, #16]
 800944a:	b1bd      	cbz	r5, 800947c <__d2b+0x94>
 800944c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009450:	4405      	add	r5, r0
 8009452:	603d      	str	r5, [r7, #0]
 8009454:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009458:	6030      	str	r0, [r6, #0]
 800945a:	4620      	mov	r0, r4
 800945c:	b003      	add	sp, #12
 800945e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009462:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009466:	e7d6      	b.n	8009416 <__d2b+0x2e>
 8009468:	6161      	str	r1, [r4, #20]
 800946a:	e7e7      	b.n	800943c <__d2b+0x54>
 800946c:	a801      	add	r0, sp, #4
 800946e:	f7ff fd61 	bl	8008f34 <__lo0bits>
 8009472:	9b01      	ldr	r3, [sp, #4]
 8009474:	6163      	str	r3, [r4, #20]
 8009476:	3020      	adds	r0, #32
 8009478:	2201      	movs	r2, #1
 800947a:	e7e5      	b.n	8009448 <__d2b+0x60>
 800947c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009480:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009484:	6038      	str	r0, [r7, #0]
 8009486:	6918      	ldr	r0, [r3, #16]
 8009488:	f7ff fd34 	bl	8008ef4 <__hi0bits>
 800948c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009490:	e7e2      	b.n	8009458 <__d2b+0x70>
 8009492:	bf00      	nop
 8009494:	0800a62d 	.word	0x0800a62d
 8009498:	0800a63e 	.word	0x0800a63e

0800949c <__ssputs_r>:
 800949c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094a0:	688e      	ldr	r6, [r1, #8]
 80094a2:	461f      	mov	r7, r3
 80094a4:	42be      	cmp	r6, r7
 80094a6:	680b      	ldr	r3, [r1, #0]
 80094a8:	4682      	mov	sl, r0
 80094aa:	460c      	mov	r4, r1
 80094ac:	4690      	mov	r8, r2
 80094ae:	d82c      	bhi.n	800950a <__ssputs_r+0x6e>
 80094b0:	898a      	ldrh	r2, [r1, #12]
 80094b2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80094b6:	d026      	beq.n	8009506 <__ssputs_r+0x6a>
 80094b8:	6965      	ldr	r5, [r4, #20]
 80094ba:	6909      	ldr	r1, [r1, #16]
 80094bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80094c0:	eba3 0901 	sub.w	r9, r3, r1
 80094c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80094c8:	1c7b      	adds	r3, r7, #1
 80094ca:	444b      	add	r3, r9
 80094cc:	106d      	asrs	r5, r5, #1
 80094ce:	429d      	cmp	r5, r3
 80094d0:	bf38      	it	cc
 80094d2:	461d      	movcc	r5, r3
 80094d4:	0553      	lsls	r3, r2, #21
 80094d6:	d527      	bpl.n	8009528 <__ssputs_r+0x8c>
 80094d8:	4629      	mov	r1, r5
 80094da:	f7ff fbd7 	bl	8008c8c <_malloc_r>
 80094de:	4606      	mov	r6, r0
 80094e0:	b360      	cbz	r0, 800953c <__ssputs_r+0xa0>
 80094e2:	6921      	ldr	r1, [r4, #16]
 80094e4:	464a      	mov	r2, r9
 80094e6:	f000 fa09 	bl	80098fc <memcpy>
 80094ea:	89a3      	ldrh	r3, [r4, #12]
 80094ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80094f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094f4:	81a3      	strh	r3, [r4, #12]
 80094f6:	6126      	str	r6, [r4, #16]
 80094f8:	6165      	str	r5, [r4, #20]
 80094fa:	444e      	add	r6, r9
 80094fc:	eba5 0509 	sub.w	r5, r5, r9
 8009500:	6026      	str	r6, [r4, #0]
 8009502:	60a5      	str	r5, [r4, #8]
 8009504:	463e      	mov	r6, r7
 8009506:	42be      	cmp	r6, r7
 8009508:	d900      	bls.n	800950c <__ssputs_r+0x70>
 800950a:	463e      	mov	r6, r7
 800950c:	6820      	ldr	r0, [r4, #0]
 800950e:	4632      	mov	r2, r6
 8009510:	4641      	mov	r1, r8
 8009512:	f000 f9c9 	bl	80098a8 <memmove>
 8009516:	68a3      	ldr	r3, [r4, #8]
 8009518:	1b9b      	subs	r3, r3, r6
 800951a:	60a3      	str	r3, [r4, #8]
 800951c:	6823      	ldr	r3, [r4, #0]
 800951e:	4433      	add	r3, r6
 8009520:	6023      	str	r3, [r4, #0]
 8009522:	2000      	movs	r0, #0
 8009524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009528:	462a      	mov	r2, r5
 800952a:	f000 fa3b 	bl	80099a4 <_realloc_r>
 800952e:	4606      	mov	r6, r0
 8009530:	2800      	cmp	r0, #0
 8009532:	d1e0      	bne.n	80094f6 <__ssputs_r+0x5a>
 8009534:	6921      	ldr	r1, [r4, #16]
 8009536:	4650      	mov	r0, sl
 8009538:	f7ff fb34 	bl	8008ba4 <_free_r>
 800953c:	230c      	movs	r3, #12
 800953e:	f8ca 3000 	str.w	r3, [sl]
 8009542:	89a3      	ldrh	r3, [r4, #12]
 8009544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009548:	81a3      	strh	r3, [r4, #12]
 800954a:	f04f 30ff 	mov.w	r0, #4294967295
 800954e:	e7e9      	b.n	8009524 <__ssputs_r+0x88>

08009550 <_svfiprintf_r>:
 8009550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009554:	4698      	mov	r8, r3
 8009556:	898b      	ldrh	r3, [r1, #12]
 8009558:	061b      	lsls	r3, r3, #24
 800955a:	b09d      	sub	sp, #116	; 0x74
 800955c:	4607      	mov	r7, r0
 800955e:	460d      	mov	r5, r1
 8009560:	4614      	mov	r4, r2
 8009562:	d50e      	bpl.n	8009582 <_svfiprintf_r+0x32>
 8009564:	690b      	ldr	r3, [r1, #16]
 8009566:	b963      	cbnz	r3, 8009582 <_svfiprintf_r+0x32>
 8009568:	2140      	movs	r1, #64	; 0x40
 800956a:	f7ff fb8f 	bl	8008c8c <_malloc_r>
 800956e:	6028      	str	r0, [r5, #0]
 8009570:	6128      	str	r0, [r5, #16]
 8009572:	b920      	cbnz	r0, 800957e <_svfiprintf_r+0x2e>
 8009574:	230c      	movs	r3, #12
 8009576:	603b      	str	r3, [r7, #0]
 8009578:	f04f 30ff 	mov.w	r0, #4294967295
 800957c:	e0d0      	b.n	8009720 <_svfiprintf_r+0x1d0>
 800957e:	2340      	movs	r3, #64	; 0x40
 8009580:	616b      	str	r3, [r5, #20]
 8009582:	2300      	movs	r3, #0
 8009584:	9309      	str	r3, [sp, #36]	; 0x24
 8009586:	2320      	movs	r3, #32
 8009588:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800958c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009590:	2330      	movs	r3, #48	; 0x30
 8009592:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009738 <_svfiprintf_r+0x1e8>
 8009596:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800959a:	f04f 0901 	mov.w	r9, #1
 800959e:	4623      	mov	r3, r4
 80095a0:	469a      	mov	sl, r3
 80095a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095a6:	b10a      	cbz	r2, 80095ac <_svfiprintf_r+0x5c>
 80095a8:	2a25      	cmp	r2, #37	; 0x25
 80095aa:	d1f9      	bne.n	80095a0 <_svfiprintf_r+0x50>
 80095ac:	ebba 0b04 	subs.w	fp, sl, r4
 80095b0:	d00b      	beq.n	80095ca <_svfiprintf_r+0x7a>
 80095b2:	465b      	mov	r3, fp
 80095b4:	4622      	mov	r2, r4
 80095b6:	4629      	mov	r1, r5
 80095b8:	4638      	mov	r0, r7
 80095ba:	f7ff ff6f 	bl	800949c <__ssputs_r>
 80095be:	3001      	adds	r0, #1
 80095c0:	f000 80a9 	beq.w	8009716 <_svfiprintf_r+0x1c6>
 80095c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095c6:	445a      	add	r2, fp
 80095c8:	9209      	str	r2, [sp, #36]	; 0x24
 80095ca:	f89a 3000 	ldrb.w	r3, [sl]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	f000 80a1 	beq.w	8009716 <_svfiprintf_r+0x1c6>
 80095d4:	2300      	movs	r3, #0
 80095d6:	f04f 32ff 	mov.w	r2, #4294967295
 80095da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095de:	f10a 0a01 	add.w	sl, sl, #1
 80095e2:	9304      	str	r3, [sp, #16]
 80095e4:	9307      	str	r3, [sp, #28]
 80095e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80095ea:	931a      	str	r3, [sp, #104]	; 0x68
 80095ec:	4654      	mov	r4, sl
 80095ee:	2205      	movs	r2, #5
 80095f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095f4:	4850      	ldr	r0, [pc, #320]	; (8009738 <_svfiprintf_r+0x1e8>)
 80095f6:	f7f6 fdeb 	bl	80001d0 <memchr>
 80095fa:	9a04      	ldr	r2, [sp, #16]
 80095fc:	b9d8      	cbnz	r0, 8009636 <_svfiprintf_r+0xe6>
 80095fe:	06d0      	lsls	r0, r2, #27
 8009600:	bf44      	itt	mi
 8009602:	2320      	movmi	r3, #32
 8009604:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009608:	0711      	lsls	r1, r2, #28
 800960a:	bf44      	itt	mi
 800960c:	232b      	movmi	r3, #43	; 0x2b
 800960e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009612:	f89a 3000 	ldrb.w	r3, [sl]
 8009616:	2b2a      	cmp	r3, #42	; 0x2a
 8009618:	d015      	beq.n	8009646 <_svfiprintf_r+0xf6>
 800961a:	9a07      	ldr	r2, [sp, #28]
 800961c:	4654      	mov	r4, sl
 800961e:	2000      	movs	r0, #0
 8009620:	f04f 0c0a 	mov.w	ip, #10
 8009624:	4621      	mov	r1, r4
 8009626:	f811 3b01 	ldrb.w	r3, [r1], #1
 800962a:	3b30      	subs	r3, #48	; 0x30
 800962c:	2b09      	cmp	r3, #9
 800962e:	d94d      	bls.n	80096cc <_svfiprintf_r+0x17c>
 8009630:	b1b0      	cbz	r0, 8009660 <_svfiprintf_r+0x110>
 8009632:	9207      	str	r2, [sp, #28]
 8009634:	e014      	b.n	8009660 <_svfiprintf_r+0x110>
 8009636:	eba0 0308 	sub.w	r3, r0, r8
 800963a:	fa09 f303 	lsl.w	r3, r9, r3
 800963e:	4313      	orrs	r3, r2
 8009640:	9304      	str	r3, [sp, #16]
 8009642:	46a2      	mov	sl, r4
 8009644:	e7d2      	b.n	80095ec <_svfiprintf_r+0x9c>
 8009646:	9b03      	ldr	r3, [sp, #12]
 8009648:	1d19      	adds	r1, r3, #4
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	9103      	str	r1, [sp, #12]
 800964e:	2b00      	cmp	r3, #0
 8009650:	bfbb      	ittet	lt
 8009652:	425b      	neglt	r3, r3
 8009654:	f042 0202 	orrlt.w	r2, r2, #2
 8009658:	9307      	strge	r3, [sp, #28]
 800965a:	9307      	strlt	r3, [sp, #28]
 800965c:	bfb8      	it	lt
 800965e:	9204      	strlt	r2, [sp, #16]
 8009660:	7823      	ldrb	r3, [r4, #0]
 8009662:	2b2e      	cmp	r3, #46	; 0x2e
 8009664:	d10c      	bne.n	8009680 <_svfiprintf_r+0x130>
 8009666:	7863      	ldrb	r3, [r4, #1]
 8009668:	2b2a      	cmp	r3, #42	; 0x2a
 800966a:	d134      	bne.n	80096d6 <_svfiprintf_r+0x186>
 800966c:	9b03      	ldr	r3, [sp, #12]
 800966e:	1d1a      	adds	r2, r3, #4
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	9203      	str	r2, [sp, #12]
 8009674:	2b00      	cmp	r3, #0
 8009676:	bfb8      	it	lt
 8009678:	f04f 33ff 	movlt.w	r3, #4294967295
 800967c:	3402      	adds	r4, #2
 800967e:	9305      	str	r3, [sp, #20]
 8009680:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009748 <_svfiprintf_r+0x1f8>
 8009684:	7821      	ldrb	r1, [r4, #0]
 8009686:	2203      	movs	r2, #3
 8009688:	4650      	mov	r0, sl
 800968a:	f7f6 fda1 	bl	80001d0 <memchr>
 800968e:	b138      	cbz	r0, 80096a0 <_svfiprintf_r+0x150>
 8009690:	9b04      	ldr	r3, [sp, #16]
 8009692:	eba0 000a 	sub.w	r0, r0, sl
 8009696:	2240      	movs	r2, #64	; 0x40
 8009698:	4082      	lsls	r2, r0
 800969a:	4313      	orrs	r3, r2
 800969c:	3401      	adds	r4, #1
 800969e:	9304      	str	r3, [sp, #16]
 80096a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096a4:	4825      	ldr	r0, [pc, #148]	; (800973c <_svfiprintf_r+0x1ec>)
 80096a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096aa:	2206      	movs	r2, #6
 80096ac:	f7f6 fd90 	bl	80001d0 <memchr>
 80096b0:	2800      	cmp	r0, #0
 80096b2:	d038      	beq.n	8009726 <_svfiprintf_r+0x1d6>
 80096b4:	4b22      	ldr	r3, [pc, #136]	; (8009740 <_svfiprintf_r+0x1f0>)
 80096b6:	bb1b      	cbnz	r3, 8009700 <_svfiprintf_r+0x1b0>
 80096b8:	9b03      	ldr	r3, [sp, #12]
 80096ba:	3307      	adds	r3, #7
 80096bc:	f023 0307 	bic.w	r3, r3, #7
 80096c0:	3308      	adds	r3, #8
 80096c2:	9303      	str	r3, [sp, #12]
 80096c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096c6:	4433      	add	r3, r6
 80096c8:	9309      	str	r3, [sp, #36]	; 0x24
 80096ca:	e768      	b.n	800959e <_svfiprintf_r+0x4e>
 80096cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80096d0:	460c      	mov	r4, r1
 80096d2:	2001      	movs	r0, #1
 80096d4:	e7a6      	b.n	8009624 <_svfiprintf_r+0xd4>
 80096d6:	2300      	movs	r3, #0
 80096d8:	3401      	adds	r4, #1
 80096da:	9305      	str	r3, [sp, #20]
 80096dc:	4619      	mov	r1, r3
 80096de:	f04f 0c0a 	mov.w	ip, #10
 80096e2:	4620      	mov	r0, r4
 80096e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096e8:	3a30      	subs	r2, #48	; 0x30
 80096ea:	2a09      	cmp	r2, #9
 80096ec:	d903      	bls.n	80096f6 <_svfiprintf_r+0x1a6>
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d0c6      	beq.n	8009680 <_svfiprintf_r+0x130>
 80096f2:	9105      	str	r1, [sp, #20]
 80096f4:	e7c4      	b.n	8009680 <_svfiprintf_r+0x130>
 80096f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80096fa:	4604      	mov	r4, r0
 80096fc:	2301      	movs	r3, #1
 80096fe:	e7f0      	b.n	80096e2 <_svfiprintf_r+0x192>
 8009700:	ab03      	add	r3, sp, #12
 8009702:	9300      	str	r3, [sp, #0]
 8009704:	462a      	mov	r2, r5
 8009706:	4b0f      	ldr	r3, [pc, #60]	; (8009744 <_svfiprintf_r+0x1f4>)
 8009708:	a904      	add	r1, sp, #16
 800970a:	4638      	mov	r0, r7
 800970c:	f7fd fe62 	bl	80073d4 <_printf_float>
 8009710:	1c42      	adds	r2, r0, #1
 8009712:	4606      	mov	r6, r0
 8009714:	d1d6      	bne.n	80096c4 <_svfiprintf_r+0x174>
 8009716:	89ab      	ldrh	r3, [r5, #12]
 8009718:	065b      	lsls	r3, r3, #25
 800971a:	f53f af2d 	bmi.w	8009578 <_svfiprintf_r+0x28>
 800971e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009720:	b01d      	add	sp, #116	; 0x74
 8009722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009726:	ab03      	add	r3, sp, #12
 8009728:	9300      	str	r3, [sp, #0]
 800972a:	462a      	mov	r2, r5
 800972c:	4b05      	ldr	r3, [pc, #20]	; (8009744 <_svfiprintf_r+0x1f4>)
 800972e:	a904      	add	r1, sp, #16
 8009730:	4638      	mov	r0, r7
 8009732:	f7fe f8f3 	bl	800791c <_printf_i>
 8009736:	e7eb      	b.n	8009710 <_svfiprintf_r+0x1c0>
 8009738:	0800a794 	.word	0x0800a794
 800973c:	0800a79e 	.word	0x0800a79e
 8009740:	080073d5 	.word	0x080073d5
 8009744:	0800949d 	.word	0x0800949d
 8009748:	0800a79a 	.word	0x0800a79a

0800974c <__sflush_r>:
 800974c:	898a      	ldrh	r2, [r1, #12]
 800974e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009752:	4605      	mov	r5, r0
 8009754:	0710      	lsls	r0, r2, #28
 8009756:	460c      	mov	r4, r1
 8009758:	d458      	bmi.n	800980c <__sflush_r+0xc0>
 800975a:	684b      	ldr	r3, [r1, #4]
 800975c:	2b00      	cmp	r3, #0
 800975e:	dc05      	bgt.n	800976c <__sflush_r+0x20>
 8009760:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009762:	2b00      	cmp	r3, #0
 8009764:	dc02      	bgt.n	800976c <__sflush_r+0x20>
 8009766:	2000      	movs	r0, #0
 8009768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800976c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800976e:	2e00      	cmp	r6, #0
 8009770:	d0f9      	beq.n	8009766 <__sflush_r+0x1a>
 8009772:	2300      	movs	r3, #0
 8009774:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009778:	682f      	ldr	r7, [r5, #0]
 800977a:	6a21      	ldr	r1, [r4, #32]
 800977c:	602b      	str	r3, [r5, #0]
 800977e:	d032      	beq.n	80097e6 <__sflush_r+0x9a>
 8009780:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009782:	89a3      	ldrh	r3, [r4, #12]
 8009784:	075a      	lsls	r2, r3, #29
 8009786:	d505      	bpl.n	8009794 <__sflush_r+0x48>
 8009788:	6863      	ldr	r3, [r4, #4]
 800978a:	1ac0      	subs	r0, r0, r3
 800978c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800978e:	b10b      	cbz	r3, 8009794 <__sflush_r+0x48>
 8009790:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009792:	1ac0      	subs	r0, r0, r3
 8009794:	2300      	movs	r3, #0
 8009796:	4602      	mov	r2, r0
 8009798:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800979a:	6a21      	ldr	r1, [r4, #32]
 800979c:	4628      	mov	r0, r5
 800979e:	47b0      	blx	r6
 80097a0:	1c43      	adds	r3, r0, #1
 80097a2:	89a3      	ldrh	r3, [r4, #12]
 80097a4:	d106      	bne.n	80097b4 <__sflush_r+0x68>
 80097a6:	6829      	ldr	r1, [r5, #0]
 80097a8:	291d      	cmp	r1, #29
 80097aa:	d82b      	bhi.n	8009804 <__sflush_r+0xb8>
 80097ac:	4a29      	ldr	r2, [pc, #164]	; (8009854 <__sflush_r+0x108>)
 80097ae:	410a      	asrs	r2, r1
 80097b0:	07d6      	lsls	r6, r2, #31
 80097b2:	d427      	bmi.n	8009804 <__sflush_r+0xb8>
 80097b4:	2200      	movs	r2, #0
 80097b6:	6062      	str	r2, [r4, #4]
 80097b8:	04d9      	lsls	r1, r3, #19
 80097ba:	6922      	ldr	r2, [r4, #16]
 80097bc:	6022      	str	r2, [r4, #0]
 80097be:	d504      	bpl.n	80097ca <__sflush_r+0x7e>
 80097c0:	1c42      	adds	r2, r0, #1
 80097c2:	d101      	bne.n	80097c8 <__sflush_r+0x7c>
 80097c4:	682b      	ldr	r3, [r5, #0]
 80097c6:	b903      	cbnz	r3, 80097ca <__sflush_r+0x7e>
 80097c8:	6560      	str	r0, [r4, #84]	; 0x54
 80097ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097cc:	602f      	str	r7, [r5, #0]
 80097ce:	2900      	cmp	r1, #0
 80097d0:	d0c9      	beq.n	8009766 <__sflush_r+0x1a>
 80097d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097d6:	4299      	cmp	r1, r3
 80097d8:	d002      	beq.n	80097e0 <__sflush_r+0x94>
 80097da:	4628      	mov	r0, r5
 80097dc:	f7ff f9e2 	bl	8008ba4 <_free_r>
 80097e0:	2000      	movs	r0, #0
 80097e2:	6360      	str	r0, [r4, #52]	; 0x34
 80097e4:	e7c0      	b.n	8009768 <__sflush_r+0x1c>
 80097e6:	2301      	movs	r3, #1
 80097e8:	4628      	mov	r0, r5
 80097ea:	47b0      	blx	r6
 80097ec:	1c41      	adds	r1, r0, #1
 80097ee:	d1c8      	bne.n	8009782 <__sflush_r+0x36>
 80097f0:	682b      	ldr	r3, [r5, #0]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d0c5      	beq.n	8009782 <__sflush_r+0x36>
 80097f6:	2b1d      	cmp	r3, #29
 80097f8:	d001      	beq.n	80097fe <__sflush_r+0xb2>
 80097fa:	2b16      	cmp	r3, #22
 80097fc:	d101      	bne.n	8009802 <__sflush_r+0xb6>
 80097fe:	602f      	str	r7, [r5, #0]
 8009800:	e7b1      	b.n	8009766 <__sflush_r+0x1a>
 8009802:	89a3      	ldrh	r3, [r4, #12]
 8009804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009808:	81a3      	strh	r3, [r4, #12]
 800980a:	e7ad      	b.n	8009768 <__sflush_r+0x1c>
 800980c:	690f      	ldr	r7, [r1, #16]
 800980e:	2f00      	cmp	r7, #0
 8009810:	d0a9      	beq.n	8009766 <__sflush_r+0x1a>
 8009812:	0793      	lsls	r3, r2, #30
 8009814:	680e      	ldr	r6, [r1, #0]
 8009816:	bf08      	it	eq
 8009818:	694b      	ldreq	r3, [r1, #20]
 800981a:	600f      	str	r7, [r1, #0]
 800981c:	bf18      	it	ne
 800981e:	2300      	movne	r3, #0
 8009820:	eba6 0807 	sub.w	r8, r6, r7
 8009824:	608b      	str	r3, [r1, #8]
 8009826:	f1b8 0f00 	cmp.w	r8, #0
 800982a:	dd9c      	ble.n	8009766 <__sflush_r+0x1a>
 800982c:	6a21      	ldr	r1, [r4, #32]
 800982e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009830:	4643      	mov	r3, r8
 8009832:	463a      	mov	r2, r7
 8009834:	4628      	mov	r0, r5
 8009836:	47b0      	blx	r6
 8009838:	2800      	cmp	r0, #0
 800983a:	dc06      	bgt.n	800984a <__sflush_r+0xfe>
 800983c:	89a3      	ldrh	r3, [r4, #12]
 800983e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009842:	81a3      	strh	r3, [r4, #12]
 8009844:	f04f 30ff 	mov.w	r0, #4294967295
 8009848:	e78e      	b.n	8009768 <__sflush_r+0x1c>
 800984a:	4407      	add	r7, r0
 800984c:	eba8 0800 	sub.w	r8, r8, r0
 8009850:	e7e9      	b.n	8009826 <__sflush_r+0xda>
 8009852:	bf00      	nop
 8009854:	dfbffffe 	.word	0xdfbffffe

08009858 <_fflush_r>:
 8009858:	b538      	push	{r3, r4, r5, lr}
 800985a:	690b      	ldr	r3, [r1, #16]
 800985c:	4605      	mov	r5, r0
 800985e:	460c      	mov	r4, r1
 8009860:	b913      	cbnz	r3, 8009868 <_fflush_r+0x10>
 8009862:	2500      	movs	r5, #0
 8009864:	4628      	mov	r0, r5
 8009866:	bd38      	pop	{r3, r4, r5, pc}
 8009868:	b118      	cbz	r0, 8009872 <_fflush_r+0x1a>
 800986a:	6a03      	ldr	r3, [r0, #32]
 800986c:	b90b      	cbnz	r3, 8009872 <_fflush_r+0x1a>
 800986e:	f7fe fa03 	bl	8007c78 <__sinit>
 8009872:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d0f3      	beq.n	8009862 <_fflush_r+0xa>
 800987a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800987c:	07d0      	lsls	r0, r2, #31
 800987e:	d404      	bmi.n	800988a <_fflush_r+0x32>
 8009880:	0599      	lsls	r1, r3, #22
 8009882:	d402      	bmi.n	800988a <_fflush_r+0x32>
 8009884:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009886:	f7fe fb0e 	bl	8007ea6 <__retarget_lock_acquire_recursive>
 800988a:	4628      	mov	r0, r5
 800988c:	4621      	mov	r1, r4
 800988e:	f7ff ff5d 	bl	800974c <__sflush_r>
 8009892:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009894:	07da      	lsls	r2, r3, #31
 8009896:	4605      	mov	r5, r0
 8009898:	d4e4      	bmi.n	8009864 <_fflush_r+0xc>
 800989a:	89a3      	ldrh	r3, [r4, #12]
 800989c:	059b      	lsls	r3, r3, #22
 800989e:	d4e1      	bmi.n	8009864 <_fflush_r+0xc>
 80098a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098a2:	f7fe fb01 	bl	8007ea8 <__retarget_lock_release_recursive>
 80098a6:	e7dd      	b.n	8009864 <_fflush_r+0xc>

080098a8 <memmove>:
 80098a8:	4288      	cmp	r0, r1
 80098aa:	b510      	push	{r4, lr}
 80098ac:	eb01 0402 	add.w	r4, r1, r2
 80098b0:	d902      	bls.n	80098b8 <memmove+0x10>
 80098b2:	4284      	cmp	r4, r0
 80098b4:	4623      	mov	r3, r4
 80098b6:	d807      	bhi.n	80098c8 <memmove+0x20>
 80098b8:	1e43      	subs	r3, r0, #1
 80098ba:	42a1      	cmp	r1, r4
 80098bc:	d008      	beq.n	80098d0 <memmove+0x28>
 80098be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80098c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80098c6:	e7f8      	b.n	80098ba <memmove+0x12>
 80098c8:	4402      	add	r2, r0
 80098ca:	4601      	mov	r1, r0
 80098cc:	428a      	cmp	r2, r1
 80098ce:	d100      	bne.n	80098d2 <memmove+0x2a>
 80098d0:	bd10      	pop	{r4, pc}
 80098d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80098d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80098da:	e7f7      	b.n	80098cc <memmove+0x24>

080098dc <_sbrk_r>:
 80098dc:	b538      	push	{r3, r4, r5, lr}
 80098de:	4d06      	ldr	r5, [pc, #24]	; (80098f8 <_sbrk_r+0x1c>)
 80098e0:	2300      	movs	r3, #0
 80098e2:	4604      	mov	r4, r0
 80098e4:	4608      	mov	r0, r1
 80098e6:	602b      	str	r3, [r5, #0]
 80098e8:	f7f9 fa9a 	bl	8002e20 <_sbrk>
 80098ec:	1c43      	adds	r3, r0, #1
 80098ee:	d102      	bne.n	80098f6 <_sbrk_r+0x1a>
 80098f0:	682b      	ldr	r3, [r5, #0]
 80098f2:	b103      	cbz	r3, 80098f6 <_sbrk_r+0x1a>
 80098f4:	6023      	str	r3, [r4, #0]
 80098f6:	bd38      	pop	{r3, r4, r5, pc}
 80098f8:	2000063c 	.word	0x2000063c

080098fc <memcpy>:
 80098fc:	440a      	add	r2, r1
 80098fe:	4291      	cmp	r1, r2
 8009900:	f100 33ff 	add.w	r3, r0, #4294967295
 8009904:	d100      	bne.n	8009908 <memcpy+0xc>
 8009906:	4770      	bx	lr
 8009908:	b510      	push	{r4, lr}
 800990a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800990e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009912:	4291      	cmp	r1, r2
 8009914:	d1f9      	bne.n	800990a <memcpy+0xe>
 8009916:	bd10      	pop	{r4, pc}

08009918 <__assert_func>:
 8009918:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800991a:	4614      	mov	r4, r2
 800991c:	461a      	mov	r2, r3
 800991e:	4b09      	ldr	r3, [pc, #36]	; (8009944 <__assert_func+0x2c>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	4605      	mov	r5, r0
 8009924:	68d8      	ldr	r0, [r3, #12]
 8009926:	b14c      	cbz	r4, 800993c <__assert_func+0x24>
 8009928:	4b07      	ldr	r3, [pc, #28]	; (8009948 <__assert_func+0x30>)
 800992a:	9100      	str	r1, [sp, #0]
 800992c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009930:	4906      	ldr	r1, [pc, #24]	; (800994c <__assert_func+0x34>)
 8009932:	462b      	mov	r3, r5
 8009934:	f000 f872 	bl	8009a1c <fiprintf>
 8009938:	f000 f882 	bl	8009a40 <abort>
 800993c:	4b04      	ldr	r3, [pc, #16]	; (8009950 <__assert_func+0x38>)
 800993e:	461c      	mov	r4, r3
 8009940:	e7f3      	b.n	800992a <__assert_func+0x12>
 8009942:	bf00      	nop
 8009944:	200000e0 	.word	0x200000e0
 8009948:	0800a7af 	.word	0x0800a7af
 800994c:	0800a7bc 	.word	0x0800a7bc
 8009950:	0800a7ea 	.word	0x0800a7ea

08009954 <_calloc_r>:
 8009954:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009956:	fba1 2402 	umull	r2, r4, r1, r2
 800995a:	b94c      	cbnz	r4, 8009970 <_calloc_r+0x1c>
 800995c:	4611      	mov	r1, r2
 800995e:	9201      	str	r2, [sp, #4]
 8009960:	f7ff f994 	bl	8008c8c <_malloc_r>
 8009964:	9a01      	ldr	r2, [sp, #4]
 8009966:	4605      	mov	r5, r0
 8009968:	b930      	cbnz	r0, 8009978 <_calloc_r+0x24>
 800996a:	4628      	mov	r0, r5
 800996c:	b003      	add	sp, #12
 800996e:	bd30      	pop	{r4, r5, pc}
 8009970:	220c      	movs	r2, #12
 8009972:	6002      	str	r2, [r0, #0]
 8009974:	2500      	movs	r5, #0
 8009976:	e7f8      	b.n	800996a <_calloc_r+0x16>
 8009978:	4621      	mov	r1, r4
 800997a:	f7fe fa16 	bl	8007daa <memset>
 800997e:	e7f4      	b.n	800996a <_calloc_r+0x16>

08009980 <__ascii_mbtowc>:
 8009980:	b082      	sub	sp, #8
 8009982:	b901      	cbnz	r1, 8009986 <__ascii_mbtowc+0x6>
 8009984:	a901      	add	r1, sp, #4
 8009986:	b142      	cbz	r2, 800999a <__ascii_mbtowc+0x1a>
 8009988:	b14b      	cbz	r3, 800999e <__ascii_mbtowc+0x1e>
 800998a:	7813      	ldrb	r3, [r2, #0]
 800998c:	600b      	str	r3, [r1, #0]
 800998e:	7812      	ldrb	r2, [r2, #0]
 8009990:	1e10      	subs	r0, r2, #0
 8009992:	bf18      	it	ne
 8009994:	2001      	movne	r0, #1
 8009996:	b002      	add	sp, #8
 8009998:	4770      	bx	lr
 800999a:	4610      	mov	r0, r2
 800999c:	e7fb      	b.n	8009996 <__ascii_mbtowc+0x16>
 800999e:	f06f 0001 	mvn.w	r0, #1
 80099a2:	e7f8      	b.n	8009996 <__ascii_mbtowc+0x16>

080099a4 <_realloc_r>:
 80099a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099a8:	4680      	mov	r8, r0
 80099aa:	4614      	mov	r4, r2
 80099ac:	460e      	mov	r6, r1
 80099ae:	b921      	cbnz	r1, 80099ba <_realloc_r+0x16>
 80099b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099b4:	4611      	mov	r1, r2
 80099b6:	f7ff b969 	b.w	8008c8c <_malloc_r>
 80099ba:	b92a      	cbnz	r2, 80099c8 <_realloc_r+0x24>
 80099bc:	f7ff f8f2 	bl	8008ba4 <_free_r>
 80099c0:	4625      	mov	r5, r4
 80099c2:	4628      	mov	r0, r5
 80099c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099c8:	f000 f841 	bl	8009a4e <_malloc_usable_size_r>
 80099cc:	4284      	cmp	r4, r0
 80099ce:	4607      	mov	r7, r0
 80099d0:	d802      	bhi.n	80099d8 <_realloc_r+0x34>
 80099d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80099d6:	d812      	bhi.n	80099fe <_realloc_r+0x5a>
 80099d8:	4621      	mov	r1, r4
 80099da:	4640      	mov	r0, r8
 80099dc:	f7ff f956 	bl	8008c8c <_malloc_r>
 80099e0:	4605      	mov	r5, r0
 80099e2:	2800      	cmp	r0, #0
 80099e4:	d0ed      	beq.n	80099c2 <_realloc_r+0x1e>
 80099e6:	42bc      	cmp	r4, r7
 80099e8:	4622      	mov	r2, r4
 80099ea:	4631      	mov	r1, r6
 80099ec:	bf28      	it	cs
 80099ee:	463a      	movcs	r2, r7
 80099f0:	f7ff ff84 	bl	80098fc <memcpy>
 80099f4:	4631      	mov	r1, r6
 80099f6:	4640      	mov	r0, r8
 80099f8:	f7ff f8d4 	bl	8008ba4 <_free_r>
 80099fc:	e7e1      	b.n	80099c2 <_realloc_r+0x1e>
 80099fe:	4635      	mov	r5, r6
 8009a00:	e7df      	b.n	80099c2 <_realloc_r+0x1e>

08009a02 <__ascii_wctomb>:
 8009a02:	b149      	cbz	r1, 8009a18 <__ascii_wctomb+0x16>
 8009a04:	2aff      	cmp	r2, #255	; 0xff
 8009a06:	bf85      	ittet	hi
 8009a08:	238a      	movhi	r3, #138	; 0x8a
 8009a0a:	6003      	strhi	r3, [r0, #0]
 8009a0c:	700a      	strbls	r2, [r1, #0]
 8009a0e:	f04f 30ff 	movhi.w	r0, #4294967295
 8009a12:	bf98      	it	ls
 8009a14:	2001      	movls	r0, #1
 8009a16:	4770      	bx	lr
 8009a18:	4608      	mov	r0, r1
 8009a1a:	4770      	bx	lr

08009a1c <fiprintf>:
 8009a1c:	b40e      	push	{r1, r2, r3}
 8009a1e:	b503      	push	{r0, r1, lr}
 8009a20:	4601      	mov	r1, r0
 8009a22:	ab03      	add	r3, sp, #12
 8009a24:	4805      	ldr	r0, [pc, #20]	; (8009a3c <fiprintf+0x20>)
 8009a26:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a2a:	6800      	ldr	r0, [r0, #0]
 8009a2c:	9301      	str	r3, [sp, #4]
 8009a2e:	f000 f83f 	bl	8009ab0 <_vfiprintf_r>
 8009a32:	b002      	add	sp, #8
 8009a34:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a38:	b003      	add	sp, #12
 8009a3a:	4770      	bx	lr
 8009a3c:	200000e0 	.word	0x200000e0

08009a40 <abort>:
 8009a40:	b508      	push	{r3, lr}
 8009a42:	2006      	movs	r0, #6
 8009a44:	f000 fa0c 	bl	8009e60 <raise>
 8009a48:	2001      	movs	r0, #1
 8009a4a:	f7f9 f971 	bl	8002d30 <_exit>

08009a4e <_malloc_usable_size_r>:
 8009a4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a52:	1f18      	subs	r0, r3, #4
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	bfbc      	itt	lt
 8009a58:	580b      	ldrlt	r3, [r1, r0]
 8009a5a:	18c0      	addlt	r0, r0, r3
 8009a5c:	4770      	bx	lr

08009a5e <__sfputc_r>:
 8009a5e:	6893      	ldr	r3, [r2, #8]
 8009a60:	3b01      	subs	r3, #1
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	b410      	push	{r4}
 8009a66:	6093      	str	r3, [r2, #8]
 8009a68:	da08      	bge.n	8009a7c <__sfputc_r+0x1e>
 8009a6a:	6994      	ldr	r4, [r2, #24]
 8009a6c:	42a3      	cmp	r3, r4
 8009a6e:	db01      	blt.n	8009a74 <__sfputc_r+0x16>
 8009a70:	290a      	cmp	r1, #10
 8009a72:	d103      	bne.n	8009a7c <__sfputc_r+0x1e>
 8009a74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a78:	f000 b934 	b.w	8009ce4 <__swbuf_r>
 8009a7c:	6813      	ldr	r3, [r2, #0]
 8009a7e:	1c58      	adds	r0, r3, #1
 8009a80:	6010      	str	r0, [r2, #0]
 8009a82:	7019      	strb	r1, [r3, #0]
 8009a84:	4608      	mov	r0, r1
 8009a86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a8a:	4770      	bx	lr

08009a8c <__sfputs_r>:
 8009a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a8e:	4606      	mov	r6, r0
 8009a90:	460f      	mov	r7, r1
 8009a92:	4614      	mov	r4, r2
 8009a94:	18d5      	adds	r5, r2, r3
 8009a96:	42ac      	cmp	r4, r5
 8009a98:	d101      	bne.n	8009a9e <__sfputs_r+0x12>
 8009a9a:	2000      	movs	r0, #0
 8009a9c:	e007      	b.n	8009aae <__sfputs_r+0x22>
 8009a9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aa2:	463a      	mov	r2, r7
 8009aa4:	4630      	mov	r0, r6
 8009aa6:	f7ff ffda 	bl	8009a5e <__sfputc_r>
 8009aaa:	1c43      	adds	r3, r0, #1
 8009aac:	d1f3      	bne.n	8009a96 <__sfputs_r+0xa>
 8009aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009ab0 <_vfiprintf_r>:
 8009ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ab4:	460d      	mov	r5, r1
 8009ab6:	b09d      	sub	sp, #116	; 0x74
 8009ab8:	4614      	mov	r4, r2
 8009aba:	4698      	mov	r8, r3
 8009abc:	4606      	mov	r6, r0
 8009abe:	b118      	cbz	r0, 8009ac8 <_vfiprintf_r+0x18>
 8009ac0:	6a03      	ldr	r3, [r0, #32]
 8009ac2:	b90b      	cbnz	r3, 8009ac8 <_vfiprintf_r+0x18>
 8009ac4:	f7fe f8d8 	bl	8007c78 <__sinit>
 8009ac8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009aca:	07d9      	lsls	r1, r3, #31
 8009acc:	d405      	bmi.n	8009ada <_vfiprintf_r+0x2a>
 8009ace:	89ab      	ldrh	r3, [r5, #12]
 8009ad0:	059a      	lsls	r2, r3, #22
 8009ad2:	d402      	bmi.n	8009ada <_vfiprintf_r+0x2a>
 8009ad4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ad6:	f7fe f9e6 	bl	8007ea6 <__retarget_lock_acquire_recursive>
 8009ada:	89ab      	ldrh	r3, [r5, #12]
 8009adc:	071b      	lsls	r3, r3, #28
 8009ade:	d501      	bpl.n	8009ae4 <_vfiprintf_r+0x34>
 8009ae0:	692b      	ldr	r3, [r5, #16]
 8009ae2:	b99b      	cbnz	r3, 8009b0c <_vfiprintf_r+0x5c>
 8009ae4:	4629      	mov	r1, r5
 8009ae6:	4630      	mov	r0, r6
 8009ae8:	f000 f93a 	bl	8009d60 <__swsetup_r>
 8009aec:	b170      	cbz	r0, 8009b0c <_vfiprintf_r+0x5c>
 8009aee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009af0:	07dc      	lsls	r4, r3, #31
 8009af2:	d504      	bpl.n	8009afe <_vfiprintf_r+0x4e>
 8009af4:	f04f 30ff 	mov.w	r0, #4294967295
 8009af8:	b01d      	add	sp, #116	; 0x74
 8009afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009afe:	89ab      	ldrh	r3, [r5, #12]
 8009b00:	0598      	lsls	r0, r3, #22
 8009b02:	d4f7      	bmi.n	8009af4 <_vfiprintf_r+0x44>
 8009b04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b06:	f7fe f9cf 	bl	8007ea8 <__retarget_lock_release_recursive>
 8009b0a:	e7f3      	b.n	8009af4 <_vfiprintf_r+0x44>
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	9309      	str	r3, [sp, #36]	; 0x24
 8009b10:	2320      	movs	r3, #32
 8009b12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b16:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b1a:	2330      	movs	r3, #48	; 0x30
 8009b1c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009cd0 <_vfiprintf_r+0x220>
 8009b20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b24:	f04f 0901 	mov.w	r9, #1
 8009b28:	4623      	mov	r3, r4
 8009b2a:	469a      	mov	sl, r3
 8009b2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b30:	b10a      	cbz	r2, 8009b36 <_vfiprintf_r+0x86>
 8009b32:	2a25      	cmp	r2, #37	; 0x25
 8009b34:	d1f9      	bne.n	8009b2a <_vfiprintf_r+0x7a>
 8009b36:	ebba 0b04 	subs.w	fp, sl, r4
 8009b3a:	d00b      	beq.n	8009b54 <_vfiprintf_r+0xa4>
 8009b3c:	465b      	mov	r3, fp
 8009b3e:	4622      	mov	r2, r4
 8009b40:	4629      	mov	r1, r5
 8009b42:	4630      	mov	r0, r6
 8009b44:	f7ff ffa2 	bl	8009a8c <__sfputs_r>
 8009b48:	3001      	adds	r0, #1
 8009b4a:	f000 80a9 	beq.w	8009ca0 <_vfiprintf_r+0x1f0>
 8009b4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b50:	445a      	add	r2, fp
 8009b52:	9209      	str	r2, [sp, #36]	; 0x24
 8009b54:	f89a 3000 	ldrb.w	r3, [sl]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	f000 80a1 	beq.w	8009ca0 <_vfiprintf_r+0x1f0>
 8009b5e:	2300      	movs	r3, #0
 8009b60:	f04f 32ff 	mov.w	r2, #4294967295
 8009b64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b68:	f10a 0a01 	add.w	sl, sl, #1
 8009b6c:	9304      	str	r3, [sp, #16]
 8009b6e:	9307      	str	r3, [sp, #28]
 8009b70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b74:	931a      	str	r3, [sp, #104]	; 0x68
 8009b76:	4654      	mov	r4, sl
 8009b78:	2205      	movs	r2, #5
 8009b7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b7e:	4854      	ldr	r0, [pc, #336]	; (8009cd0 <_vfiprintf_r+0x220>)
 8009b80:	f7f6 fb26 	bl	80001d0 <memchr>
 8009b84:	9a04      	ldr	r2, [sp, #16]
 8009b86:	b9d8      	cbnz	r0, 8009bc0 <_vfiprintf_r+0x110>
 8009b88:	06d1      	lsls	r1, r2, #27
 8009b8a:	bf44      	itt	mi
 8009b8c:	2320      	movmi	r3, #32
 8009b8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b92:	0713      	lsls	r3, r2, #28
 8009b94:	bf44      	itt	mi
 8009b96:	232b      	movmi	r3, #43	; 0x2b
 8009b98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b9c:	f89a 3000 	ldrb.w	r3, [sl]
 8009ba0:	2b2a      	cmp	r3, #42	; 0x2a
 8009ba2:	d015      	beq.n	8009bd0 <_vfiprintf_r+0x120>
 8009ba4:	9a07      	ldr	r2, [sp, #28]
 8009ba6:	4654      	mov	r4, sl
 8009ba8:	2000      	movs	r0, #0
 8009baa:	f04f 0c0a 	mov.w	ip, #10
 8009bae:	4621      	mov	r1, r4
 8009bb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bb4:	3b30      	subs	r3, #48	; 0x30
 8009bb6:	2b09      	cmp	r3, #9
 8009bb8:	d94d      	bls.n	8009c56 <_vfiprintf_r+0x1a6>
 8009bba:	b1b0      	cbz	r0, 8009bea <_vfiprintf_r+0x13a>
 8009bbc:	9207      	str	r2, [sp, #28]
 8009bbe:	e014      	b.n	8009bea <_vfiprintf_r+0x13a>
 8009bc0:	eba0 0308 	sub.w	r3, r0, r8
 8009bc4:	fa09 f303 	lsl.w	r3, r9, r3
 8009bc8:	4313      	orrs	r3, r2
 8009bca:	9304      	str	r3, [sp, #16]
 8009bcc:	46a2      	mov	sl, r4
 8009bce:	e7d2      	b.n	8009b76 <_vfiprintf_r+0xc6>
 8009bd0:	9b03      	ldr	r3, [sp, #12]
 8009bd2:	1d19      	adds	r1, r3, #4
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	9103      	str	r1, [sp, #12]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	bfbb      	ittet	lt
 8009bdc:	425b      	neglt	r3, r3
 8009bde:	f042 0202 	orrlt.w	r2, r2, #2
 8009be2:	9307      	strge	r3, [sp, #28]
 8009be4:	9307      	strlt	r3, [sp, #28]
 8009be6:	bfb8      	it	lt
 8009be8:	9204      	strlt	r2, [sp, #16]
 8009bea:	7823      	ldrb	r3, [r4, #0]
 8009bec:	2b2e      	cmp	r3, #46	; 0x2e
 8009bee:	d10c      	bne.n	8009c0a <_vfiprintf_r+0x15a>
 8009bf0:	7863      	ldrb	r3, [r4, #1]
 8009bf2:	2b2a      	cmp	r3, #42	; 0x2a
 8009bf4:	d134      	bne.n	8009c60 <_vfiprintf_r+0x1b0>
 8009bf6:	9b03      	ldr	r3, [sp, #12]
 8009bf8:	1d1a      	adds	r2, r3, #4
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	9203      	str	r2, [sp, #12]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	bfb8      	it	lt
 8009c02:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c06:	3402      	adds	r4, #2
 8009c08:	9305      	str	r3, [sp, #20]
 8009c0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009ce0 <_vfiprintf_r+0x230>
 8009c0e:	7821      	ldrb	r1, [r4, #0]
 8009c10:	2203      	movs	r2, #3
 8009c12:	4650      	mov	r0, sl
 8009c14:	f7f6 fadc 	bl	80001d0 <memchr>
 8009c18:	b138      	cbz	r0, 8009c2a <_vfiprintf_r+0x17a>
 8009c1a:	9b04      	ldr	r3, [sp, #16]
 8009c1c:	eba0 000a 	sub.w	r0, r0, sl
 8009c20:	2240      	movs	r2, #64	; 0x40
 8009c22:	4082      	lsls	r2, r0
 8009c24:	4313      	orrs	r3, r2
 8009c26:	3401      	adds	r4, #1
 8009c28:	9304      	str	r3, [sp, #16]
 8009c2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c2e:	4829      	ldr	r0, [pc, #164]	; (8009cd4 <_vfiprintf_r+0x224>)
 8009c30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c34:	2206      	movs	r2, #6
 8009c36:	f7f6 facb 	bl	80001d0 <memchr>
 8009c3a:	2800      	cmp	r0, #0
 8009c3c:	d03f      	beq.n	8009cbe <_vfiprintf_r+0x20e>
 8009c3e:	4b26      	ldr	r3, [pc, #152]	; (8009cd8 <_vfiprintf_r+0x228>)
 8009c40:	bb1b      	cbnz	r3, 8009c8a <_vfiprintf_r+0x1da>
 8009c42:	9b03      	ldr	r3, [sp, #12]
 8009c44:	3307      	adds	r3, #7
 8009c46:	f023 0307 	bic.w	r3, r3, #7
 8009c4a:	3308      	adds	r3, #8
 8009c4c:	9303      	str	r3, [sp, #12]
 8009c4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c50:	443b      	add	r3, r7
 8009c52:	9309      	str	r3, [sp, #36]	; 0x24
 8009c54:	e768      	b.n	8009b28 <_vfiprintf_r+0x78>
 8009c56:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c5a:	460c      	mov	r4, r1
 8009c5c:	2001      	movs	r0, #1
 8009c5e:	e7a6      	b.n	8009bae <_vfiprintf_r+0xfe>
 8009c60:	2300      	movs	r3, #0
 8009c62:	3401      	adds	r4, #1
 8009c64:	9305      	str	r3, [sp, #20]
 8009c66:	4619      	mov	r1, r3
 8009c68:	f04f 0c0a 	mov.w	ip, #10
 8009c6c:	4620      	mov	r0, r4
 8009c6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c72:	3a30      	subs	r2, #48	; 0x30
 8009c74:	2a09      	cmp	r2, #9
 8009c76:	d903      	bls.n	8009c80 <_vfiprintf_r+0x1d0>
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d0c6      	beq.n	8009c0a <_vfiprintf_r+0x15a>
 8009c7c:	9105      	str	r1, [sp, #20]
 8009c7e:	e7c4      	b.n	8009c0a <_vfiprintf_r+0x15a>
 8009c80:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c84:	4604      	mov	r4, r0
 8009c86:	2301      	movs	r3, #1
 8009c88:	e7f0      	b.n	8009c6c <_vfiprintf_r+0x1bc>
 8009c8a:	ab03      	add	r3, sp, #12
 8009c8c:	9300      	str	r3, [sp, #0]
 8009c8e:	462a      	mov	r2, r5
 8009c90:	4b12      	ldr	r3, [pc, #72]	; (8009cdc <_vfiprintf_r+0x22c>)
 8009c92:	a904      	add	r1, sp, #16
 8009c94:	4630      	mov	r0, r6
 8009c96:	f7fd fb9d 	bl	80073d4 <_printf_float>
 8009c9a:	4607      	mov	r7, r0
 8009c9c:	1c78      	adds	r0, r7, #1
 8009c9e:	d1d6      	bne.n	8009c4e <_vfiprintf_r+0x19e>
 8009ca0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ca2:	07d9      	lsls	r1, r3, #31
 8009ca4:	d405      	bmi.n	8009cb2 <_vfiprintf_r+0x202>
 8009ca6:	89ab      	ldrh	r3, [r5, #12]
 8009ca8:	059a      	lsls	r2, r3, #22
 8009caa:	d402      	bmi.n	8009cb2 <_vfiprintf_r+0x202>
 8009cac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009cae:	f7fe f8fb 	bl	8007ea8 <__retarget_lock_release_recursive>
 8009cb2:	89ab      	ldrh	r3, [r5, #12]
 8009cb4:	065b      	lsls	r3, r3, #25
 8009cb6:	f53f af1d 	bmi.w	8009af4 <_vfiprintf_r+0x44>
 8009cba:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009cbc:	e71c      	b.n	8009af8 <_vfiprintf_r+0x48>
 8009cbe:	ab03      	add	r3, sp, #12
 8009cc0:	9300      	str	r3, [sp, #0]
 8009cc2:	462a      	mov	r2, r5
 8009cc4:	4b05      	ldr	r3, [pc, #20]	; (8009cdc <_vfiprintf_r+0x22c>)
 8009cc6:	a904      	add	r1, sp, #16
 8009cc8:	4630      	mov	r0, r6
 8009cca:	f7fd fe27 	bl	800791c <_printf_i>
 8009cce:	e7e4      	b.n	8009c9a <_vfiprintf_r+0x1ea>
 8009cd0:	0800a794 	.word	0x0800a794
 8009cd4:	0800a79e 	.word	0x0800a79e
 8009cd8:	080073d5 	.word	0x080073d5
 8009cdc:	08009a8d 	.word	0x08009a8d
 8009ce0:	0800a79a 	.word	0x0800a79a

08009ce4 <__swbuf_r>:
 8009ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ce6:	460e      	mov	r6, r1
 8009ce8:	4614      	mov	r4, r2
 8009cea:	4605      	mov	r5, r0
 8009cec:	b118      	cbz	r0, 8009cf6 <__swbuf_r+0x12>
 8009cee:	6a03      	ldr	r3, [r0, #32]
 8009cf0:	b90b      	cbnz	r3, 8009cf6 <__swbuf_r+0x12>
 8009cf2:	f7fd ffc1 	bl	8007c78 <__sinit>
 8009cf6:	69a3      	ldr	r3, [r4, #24]
 8009cf8:	60a3      	str	r3, [r4, #8]
 8009cfa:	89a3      	ldrh	r3, [r4, #12]
 8009cfc:	071a      	lsls	r2, r3, #28
 8009cfe:	d525      	bpl.n	8009d4c <__swbuf_r+0x68>
 8009d00:	6923      	ldr	r3, [r4, #16]
 8009d02:	b31b      	cbz	r3, 8009d4c <__swbuf_r+0x68>
 8009d04:	6823      	ldr	r3, [r4, #0]
 8009d06:	6922      	ldr	r2, [r4, #16]
 8009d08:	1a98      	subs	r0, r3, r2
 8009d0a:	6963      	ldr	r3, [r4, #20]
 8009d0c:	b2f6      	uxtb	r6, r6
 8009d0e:	4283      	cmp	r3, r0
 8009d10:	4637      	mov	r7, r6
 8009d12:	dc04      	bgt.n	8009d1e <__swbuf_r+0x3a>
 8009d14:	4621      	mov	r1, r4
 8009d16:	4628      	mov	r0, r5
 8009d18:	f7ff fd9e 	bl	8009858 <_fflush_r>
 8009d1c:	b9e0      	cbnz	r0, 8009d58 <__swbuf_r+0x74>
 8009d1e:	68a3      	ldr	r3, [r4, #8]
 8009d20:	3b01      	subs	r3, #1
 8009d22:	60a3      	str	r3, [r4, #8]
 8009d24:	6823      	ldr	r3, [r4, #0]
 8009d26:	1c5a      	adds	r2, r3, #1
 8009d28:	6022      	str	r2, [r4, #0]
 8009d2a:	701e      	strb	r6, [r3, #0]
 8009d2c:	6962      	ldr	r2, [r4, #20]
 8009d2e:	1c43      	adds	r3, r0, #1
 8009d30:	429a      	cmp	r2, r3
 8009d32:	d004      	beq.n	8009d3e <__swbuf_r+0x5a>
 8009d34:	89a3      	ldrh	r3, [r4, #12]
 8009d36:	07db      	lsls	r3, r3, #31
 8009d38:	d506      	bpl.n	8009d48 <__swbuf_r+0x64>
 8009d3a:	2e0a      	cmp	r6, #10
 8009d3c:	d104      	bne.n	8009d48 <__swbuf_r+0x64>
 8009d3e:	4621      	mov	r1, r4
 8009d40:	4628      	mov	r0, r5
 8009d42:	f7ff fd89 	bl	8009858 <_fflush_r>
 8009d46:	b938      	cbnz	r0, 8009d58 <__swbuf_r+0x74>
 8009d48:	4638      	mov	r0, r7
 8009d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d4c:	4621      	mov	r1, r4
 8009d4e:	4628      	mov	r0, r5
 8009d50:	f000 f806 	bl	8009d60 <__swsetup_r>
 8009d54:	2800      	cmp	r0, #0
 8009d56:	d0d5      	beq.n	8009d04 <__swbuf_r+0x20>
 8009d58:	f04f 37ff 	mov.w	r7, #4294967295
 8009d5c:	e7f4      	b.n	8009d48 <__swbuf_r+0x64>
	...

08009d60 <__swsetup_r>:
 8009d60:	b538      	push	{r3, r4, r5, lr}
 8009d62:	4b2a      	ldr	r3, [pc, #168]	; (8009e0c <__swsetup_r+0xac>)
 8009d64:	4605      	mov	r5, r0
 8009d66:	6818      	ldr	r0, [r3, #0]
 8009d68:	460c      	mov	r4, r1
 8009d6a:	b118      	cbz	r0, 8009d74 <__swsetup_r+0x14>
 8009d6c:	6a03      	ldr	r3, [r0, #32]
 8009d6e:	b90b      	cbnz	r3, 8009d74 <__swsetup_r+0x14>
 8009d70:	f7fd ff82 	bl	8007c78 <__sinit>
 8009d74:	89a3      	ldrh	r3, [r4, #12]
 8009d76:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d7a:	0718      	lsls	r0, r3, #28
 8009d7c:	d422      	bmi.n	8009dc4 <__swsetup_r+0x64>
 8009d7e:	06d9      	lsls	r1, r3, #27
 8009d80:	d407      	bmi.n	8009d92 <__swsetup_r+0x32>
 8009d82:	2309      	movs	r3, #9
 8009d84:	602b      	str	r3, [r5, #0]
 8009d86:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009d8a:	81a3      	strh	r3, [r4, #12]
 8009d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d90:	e034      	b.n	8009dfc <__swsetup_r+0x9c>
 8009d92:	0758      	lsls	r0, r3, #29
 8009d94:	d512      	bpl.n	8009dbc <__swsetup_r+0x5c>
 8009d96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d98:	b141      	cbz	r1, 8009dac <__swsetup_r+0x4c>
 8009d9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d9e:	4299      	cmp	r1, r3
 8009da0:	d002      	beq.n	8009da8 <__swsetup_r+0x48>
 8009da2:	4628      	mov	r0, r5
 8009da4:	f7fe fefe 	bl	8008ba4 <_free_r>
 8009da8:	2300      	movs	r3, #0
 8009daa:	6363      	str	r3, [r4, #52]	; 0x34
 8009dac:	89a3      	ldrh	r3, [r4, #12]
 8009dae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009db2:	81a3      	strh	r3, [r4, #12]
 8009db4:	2300      	movs	r3, #0
 8009db6:	6063      	str	r3, [r4, #4]
 8009db8:	6923      	ldr	r3, [r4, #16]
 8009dba:	6023      	str	r3, [r4, #0]
 8009dbc:	89a3      	ldrh	r3, [r4, #12]
 8009dbe:	f043 0308 	orr.w	r3, r3, #8
 8009dc2:	81a3      	strh	r3, [r4, #12]
 8009dc4:	6923      	ldr	r3, [r4, #16]
 8009dc6:	b94b      	cbnz	r3, 8009ddc <__swsetup_r+0x7c>
 8009dc8:	89a3      	ldrh	r3, [r4, #12]
 8009dca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009dce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009dd2:	d003      	beq.n	8009ddc <__swsetup_r+0x7c>
 8009dd4:	4621      	mov	r1, r4
 8009dd6:	4628      	mov	r0, r5
 8009dd8:	f000 f884 	bl	8009ee4 <__smakebuf_r>
 8009ddc:	89a0      	ldrh	r0, [r4, #12]
 8009dde:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009de2:	f010 0301 	ands.w	r3, r0, #1
 8009de6:	d00a      	beq.n	8009dfe <__swsetup_r+0x9e>
 8009de8:	2300      	movs	r3, #0
 8009dea:	60a3      	str	r3, [r4, #8]
 8009dec:	6963      	ldr	r3, [r4, #20]
 8009dee:	425b      	negs	r3, r3
 8009df0:	61a3      	str	r3, [r4, #24]
 8009df2:	6923      	ldr	r3, [r4, #16]
 8009df4:	b943      	cbnz	r3, 8009e08 <__swsetup_r+0xa8>
 8009df6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009dfa:	d1c4      	bne.n	8009d86 <__swsetup_r+0x26>
 8009dfc:	bd38      	pop	{r3, r4, r5, pc}
 8009dfe:	0781      	lsls	r1, r0, #30
 8009e00:	bf58      	it	pl
 8009e02:	6963      	ldrpl	r3, [r4, #20]
 8009e04:	60a3      	str	r3, [r4, #8]
 8009e06:	e7f4      	b.n	8009df2 <__swsetup_r+0x92>
 8009e08:	2000      	movs	r0, #0
 8009e0a:	e7f7      	b.n	8009dfc <__swsetup_r+0x9c>
 8009e0c:	200000e0 	.word	0x200000e0

08009e10 <_raise_r>:
 8009e10:	291f      	cmp	r1, #31
 8009e12:	b538      	push	{r3, r4, r5, lr}
 8009e14:	4604      	mov	r4, r0
 8009e16:	460d      	mov	r5, r1
 8009e18:	d904      	bls.n	8009e24 <_raise_r+0x14>
 8009e1a:	2316      	movs	r3, #22
 8009e1c:	6003      	str	r3, [r0, #0]
 8009e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8009e22:	bd38      	pop	{r3, r4, r5, pc}
 8009e24:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009e26:	b112      	cbz	r2, 8009e2e <_raise_r+0x1e>
 8009e28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009e2c:	b94b      	cbnz	r3, 8009e42 <_raise_r+0x32>
 8009e2e:	4620      	mov	r0, r4
 8009e30:	f000 f830 	bl	8009e94 <_getpid_r>
 8009e34:	462a      	mov	r2, r5
 8009e36:	4601      	mov	r1, r0
 8009e38:	4620      	mov	r0, r4
 8009e3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e3e:	f000 b817 	b.w	8009e70 <_kill_r>
 8009e42:	2b01      	cmp	r3, #1
 8009e44:	d00a      	beq.n	8009e5c <_raise_r+0x4c>
 8009e46:	1c59      	adds	r1, r3, #1
 8009e48:	d103      	bne.n	8009e52 <_raise_r+0x42>
 8009e4a:	2316      	movs	r3, #22
 8009e4c:	6003      	str	r3, [r0, #0]
 8009e4e:	2001      	movs	r0, #1
 8009e50:	e7e7      	b.n	8009e22 <_raise_r+0x12>
 8009e52:	2400      	movs	r4, #0
 8009e54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009e58:	4628      	mov	r0, r5
 8009e5a:	4798      	blx	r3
 8009e5c:	2000      	movs	r0, #0
 8009e5e:	e7e0      	b.n	8009e22 <_raise_r+0x12>

08009e60 <raise>:
 8009e60:	4b02      	ldr	r3, [pc, #8]	; (8009e6c <raise+0xc>)
 8009e62:	4601      	mov	r1, r0
 8009e64:	6818      	ldr	r0, [r3, #0]
 8009e66:	f7ff bfd3 	b.w	8009e10 <_raise_r>
 8009e6a:	bf00      	nop
 8009e6c:	200000e0 	.word	0x200000e0

08009e70 <_kill_r>:
 8009e70:	b538      	push	{r3, r4, r5, lr}
 8009e72:	4d07      	ldr	r5, [pc, #28]	; (8009e90 <_kill_r+0x20>)
 8009e74:	2300      	movs	r3, #0
 8009e76:	4604      	mov	r4, r0
 8009e78:	4608      	mov	r0, r1
 8009e7a:	4611      	mov	r1, r2
 8009e7c:	602b      	str	r3, [r5, #0]
 8009e7e:	f7f8 ff47 	bl	8002d10 <_kill>
 8009e82:	1c43      	adds	r3, r0, #1
 8009e84:	d102      	bne.n	8009e8c <_kill_r+0x1c>
 8009e86:	682b      	ldr	r3, [r5, #0]
 8009e88:	b103      	cbz	r3, 8009e8c <_kill_r+0x1c>
 8009e8a:	6023      	str	r3, [r4, #0]
 8009e8c:	bd38      	pop	{r3, r4, r5, pc}
 8009e8e:	bf00      	nop
 8009e90:	2000063c 	.word	0x2000063c

08009e94 <_getpid_r>:
 8009e94:	f7f8 bf34 	b.w	8002d00 <_getpid>

08009e98 <__swhatbuf_r>:
 8009e98:	b570      	push	{r4, r5, r6, lr}
 8009e9a:	460c      	mov	r4, r1
 8009e9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ea0:	2900      	cmp	r1, #0
 8009ea2:	b096      	sub	sp, #88	; 0x58
 8009ea4:	4615      	mov	r5, r2
 8009ea6:	461e      	mov	r6, r3
 8009ea8:	da0d      	bge.n	8009ec6 <__swhatbuf_r+0x2e>
 8009eaa:	89a3      	ldrh	r3, [r4, #12]
 8009eac:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009eb0:	f04f 0100 	mov.w	r1, #0
 8009eb4:	bf0c      	ite	eq
 8009eb6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009eba:	2340      	movne	r3, #64	; 0x40
 8009ebc:	2000      	movs	r0, #0
 8009ebe:	6031      	str	r1, [r6, #0]
 8009ec0:	602b      	str	r3, [r5, #0]
 8009ec2:	b016      	add	sp, #88	; 0x58
 8009ec4:	bd70      	pop	{r4, r5, r6, pc}
 8009ec6:	466a      	mov	r2, sp
 8009ec8:	f000 f848 	bl	8009f5c <_fstat_r>
 8009ecc:	2800      	cmp	r0, #0
 8009ece:	dbec      	blt.n	8009eaa <__swhatbuf_r+0x12>
 8009ed0:	9901      	ldr	r1, [sp, #4]
 8009ed2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009ed6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009eda:	4259      	negs	r1, r3
 8009edc:	4159      	adcs	r1, r3
 8009ede:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ee2:	e7eb      	b.n	8009ebc <__swhatbuf_r+0x24>

08009ee4 <__smakebuf_r>:
 8009ee4:	898b      	ldrh	r3, [r1, #12]
 8009ee6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009ee8:	079d      	lsls	r5, r3, #30
 8009eea:	4606      	mov	r6, r0
 8009eec:	460c      	mov	r4, r1
 8009eee:	d507      	bpl.n	8009f00 <__smakebuf_r+0x1c>
 8009ef0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009ef4:	6023      	str	r3, [r4, #0]
 8009ef6:	6123      	str	r3, [r4, #16]
 8009ef8:	2301      	movs	r3, #1
 8009efa:	6163      	str	r3, [r4, #20]
 8009efc:	b002      	add	sp, #8
 8009efe:	bd70      	pop	{r4, r5, r6, pc}
 8009f00:	ab01      	add	r3, sp, #4
 8009f02:	466a      	mov	r2, sp
 8009f04:	f7ff ffc8 	bl	8009e98 <__swhatbuf_r>
 8009f08:	9900      	ldr	r1, [sp, #0]
 8009f0a:	4605      	mov	r5, r0
 8009f0c:	4630      	mov	r0, r6
 8009f0e:	f7fe febd 	bl	8008c8c <_malloc_r>
 8009f12:	b948      	cbnz	r0, 8009f28 <__smakebuf_r+0x44>
 8009f14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f18:	059a      	lsls	r2, r3, #22
 8009f1a:	d4ef      	bmi.n	8009efc <__smakebuf_r+0x18>
 8009f1c:	f023 0303 	bic.w	r3, r3, #3
 8009f20:	f043 0302 	orr.w	r3, r3, #2
 8009f24:	81a3      	strh	r3, [r4, #12]
 8009f26:	e7e3      	b.n	8009ef0 <__smakebuf_r+0xc>
 8009f28:	89a3      	ldrh	r3, [r4, #12]
 8009f2a:	6020      	str	r0, [r4, #0]
 8009f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f30:	81a3      	strh	r3, [r4, #12]
 8009f32:	9b00      	ldr	r3, [sp, #0]
 8009f34:	6163      	str	r3, [r4, #20]
 8009f36:	9b01      	ldr	r3, [sp, #4]
 8009f38:	6120      	str	r0, [r4, #16]
 8009f3a:	b15b      	cbz	r3, 8009f54 <__smakebuf_r+0x70>
 8009f3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f40:	4630      	mov	r0, r6
 8009f42:	f000 f81d 	bl	8009f80 <_isatty_r>
 8009f46:	b128      	cbz	r0, 8009f54 <__smakebuf_r+0x70>
 8009f48:	89a3      	ldrh	r3, [r4, #12]
 8009f4a:	f023 0303 	bic.w	r3, r3, #3
 8009f4e:	f043 0301 	orr.w	r3, r3, #1
 8009f52:	81a3      	strh	r3, [r4, #12]
 8009f54:	89a3      	ldrh	r3, [r4, #12]
 8009f56:	431d      	orrs	r5, r3
 8009f58:	81a5      	strh	r5, [r4, #12]
 8009f5a:	e7cf      	b.n	8009efc <__smakebuf_r+0x18>

08009f5c <_fstat_r>:
 8009f5c:	b538      	push	{r3, r4, r5, lr}
 8009f5e:	4d07      	ldr	r5, [pc, #28]	; (8009f7c <_fstat_r+0x20>)
 8009f60:	2300      	movs	r3, #0
 8009f62:	4604      	mov	r4, r0
 8009f64:	4608      	mov	r0, r1
 8009f66:	4611      	mov	r1, r2
 8009f68:	602b      	str	r3, [r5, #0]
 8009f6a:	f7f8 ff30 	bl	8002dce <_fstat>
 8009f6e:	1c43      	adds	r3, r0, #1
 8009f70:	d102      	bne.n	8009f78 <_fstat_r+0x1c>
 8009f72:	682b      	ldr	r3, [r5, #0]
 8009f74:	b103      	cbz	r3, 8009f78 <_fstat_r+0x1c>
 8009f76:	6023      	str	r3, [r4, #0]
 8009f78:	bd38      	pop	{r3, r4, r5, pc}
 8009f7a:	bf00      	nop
 8009f7c:	2000063c 	.word	0x2000063c

08009f80 <_isatty_r>:
 8009f80:	b538      	push	{r3, r4, r5, lr}
 8009f82:	4d06      	ldr	r5, [pc, #24]	; (8009f9c <_isatty_r+0x1c>)
 8009f84:	2300      	movs	r3, #0
 8009f86:	4604      	mov	r4, r0
 8009f88:	4608      	mov	r0, r1
 8009f8a:	602b      	str	r3, [r5, #0]
 8009f8c:	f7f8 ff2f 	bl	8002dee <_isatty>
 8009f90:	1c43      	adds	r3, r0, #1
 8009f92:	d102      	bne.n	8009f9a <_isatty_r+0x1a>
 8009f94:	682b      	ldr	r3, [r5, #0]
 8009f96:	b103      	cbz	r3, 8009f9a <_isatty_r+0x1a>
 8009f98:	6023      	str	r3, [r4, #0]
 8009f9a:	bd38      	pop	{r3, r4, r5, pc}
 8009f9c:	2000063c 	.word	0x2000063c

08009fa0 <_init>:
 8009fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fa2:	bf00      	nop
 8009fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fa6:	bc08      	pop	{r3}
 8009fa8:	469e      	mov	lr, r3
 8009faa:	4770      	bx	lr

08009fac <_fini>:
 8009fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fae:	bf00      	nop
 8009fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fb2:	bc08      	pop	{r3}
 8009fb4:	469e      	mov	lr, r3
 8009fb6:	4770      	bx	lr
