
lcd_smol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009918  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000934  08009aa8  08009aa8  00019aa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3dc  0800a3dc  00020240  2**0
                  CONTENTS
  4 .ARM          00000008  0800a3dc  0800a3dc  0001a3dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3e4  0800a3e4  00020240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3e4  0800a3e4  0001a3e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3e8  0800a3e8  0001a3e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  0800a3ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b0  20000240  0800a62c  00020240  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005f0  0800a62c  000205f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016df2  00000000  00000000  000202b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003075  00000000  00000000  000370a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014a8  00000000  00000000  0003a120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001017  00000000  00000000  0003b5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000234a2  00000000  00000000  0003c5df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001867a  00000000  00000000  0005fa81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4356  00000000  00000000  000780fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000068f8  00000000  00000000  0014c454  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  00152d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000240 	.word	0x20000240
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009a90 	.word	0x08009a90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000244 	.word	0x20000244
 80001cc:	08009a90 	.word	0x08009a90

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <uint16_to_bytes>:



// Probably going to move these to a different file, but for now
void uint16_to_bytes(uint16_t in, uint8_t *out)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	6039      	str	r1, [r7, #0]
 8000eae:	80fb      	strh	r3, [r7, #6]
	out[0] = (in >> 8) & 0xFF;
 8000eb0:	88fb      	ldrh	r3, [r7, #6]
 8000eb2:	0a1b      	lsrs	r3, r3, #8
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	b2da      	uxtb	r2, r3
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	701a      	strb	r2, [r3, #0]
	out[1] = in & 0xFF;
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	88fa      	ldrh	r2, [r7, #6]
 8000ec2:	b2d2      	uxtb	r2, r2
 8000ec4:	701a      	strb	r2, [r3, #0]
}
 8000ec6:	bf00      	nop
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <LCD_reset>:
	HX8357_DISPON, 0x80 +  50/5, // Main screen turn on, delay 50 ms
	0,                           // END OF COMMAND LIST
  };

void LCD_reset()
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	2102      	movs	r1, #2
 8000eda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ede:	f002 f939 	bl	8003154 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000ee2:	2064      	movs	r0, #100	; 0x64
 8000ee4:	f001 fe46 	bl	8002b74 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2102      	movs	r1, #2
 8000eec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef0:	f002 f930 	bl	8003154 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000ef4:	2064      	movs	r0, #100	; 0x64
 8000ef6:	f001 fe3d 	bl	8002b74 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8000efa:	2201      	movs	r2, #1
 8000efc:	2102      	movs	r1, #2
 8000efe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f02:	f002 f927 	bl	8003154 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000f06:	20c8      	movs	r0, #200	; 0xc8
 8000f08:	f001 fe34 	bl	8002b74 <HAL_Delay>
}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <LCD_writeCommand>:

HAL_StatusTypeDef LCD_writeCommand(SPI_HandleTypeDef* spi, uint8_t cmd)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af02      	add	r7, sp, #8
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	460b      	mov	r3, r1
 8000f1a:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef result;
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2108      	movs	r1, #8
 8000f20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f24:	f002 f916 	bl	8003154 <HAL_GPIO_WritePin>
	uint8_t buf[1];
	result = HAL_SPI_TransmitReceive(spi, &cmd, &buf[0], 1, 100);
 8000f28:	f107 020c 	add.w	r2, r7, #12
 8000f2c:	1cf9      	adds	r1, r7, #3
 8000f2e:	2364      	movs	r3, #100	; 0x64
 8000f30:	9300      	str	r3, [sp, #0]
 8000f32:	2301      	movs	r3, #1
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f003 fe31 	bl	8004b9c <HAL_SPI_TransmitReceive>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000f3e:	2201      	movs	r2, #1
 8000f40:	2108      	movs	r1, #8
 8000f42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f46:	f002 f905 	bl	8003154 <HAL_GPIO_WritePin>
	return result;
 8000f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <LCD_startWrite>:

void LCD_startWrite()
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2140      	movs	r1, #64	; 0x40
 8000f5c:	4802      	ldr	r0, [pc, #8]	; (8000f68 <LCD_startWrite+0x14>)
 8000f5e:	f002 f8f9 	bl	8003154 <HAL_GPIO_WritePin>
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	48000400 	.word	0x48000400

08000f6c <LCD_endWrite>:

void LCD_endWrite()
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000f70:	2201      	movs	r2, #1
 8000f72:	2140      	movs	r1, #64	; 0x40
 8000f74:	4802      	ldr	r0, [pc, #8]	; (8000f80 <LCD_endWrite+0x14>)
 8000f76:	f002 f8ed 	bl	8003154 <HAL_GPIO_WritePin>
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	48000400 	.word	0x48000400

08000f84 <LCD_begin>:

int LCD_begin(SPI_HandleTypeDef* spi)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	LCD_reset();
 8000f8c:	f7ff ffa1 	bl	8000ed2 <LCD_reset>
	LCD_startWrite();
 8000f90:	f7ff ffe0 	bl	8000f54 <LCD_startWrite>
	uint8_t *addr = init;
 8000f94:	4b26      	ldr	r3, [pc, #152]	; (8001030 <LCD_begin+0xac>)
 8000f96:	60fb      	str	r3, [r7, #12]
	uint8_t cmd, x, numArgs;
	HAL_StatusTypeDef result;
	while((cmd = *(addr++)) > 0) // '0' command ends list
 8000f98:	e03b      	b.n	8001012 <LCD_begin+0x8e>
	{
		if (cmd != 0xFF) // '255' is ignored
 8000f9a:	7abb      	ldrb	r3, [r7, #10]
 8000f9c:	2bff      	cmp	r3, #255	; 0xff
 8000f9e:	d00d      	beq.n	8000fbc <LCD_begin+0x38>
		{
			result = LCD_writeCommand(spi, cmd);
 8000fa0:	7abb      	ldrb	r3, [r7, #10]
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff ffb3 	bl	8000f10 <LCD_writeCommand>
 8000faa:	4603      	mov	r3, r0
 8000fac:	727b      	strb	r3, [r7, #9]
			if (result != HAL_OK)
 8000fae:	7a7b      	ldrb	r3, [r7, #9]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d003      	beq.n	8000fbc <LCD_begin+0x38>
			{
				LCD_endWrite();
 8000fb4:	f7ff ffda 	bl	8000f6c <LCD_endWrite>
				return 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	e035      	b.n	8001028 <LCD_begin+0xa4>
			}
		}
		x = *(addr++);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	1c5a      	adds	r2, r3, #1
 8000fc0:	60fa      	str	r2, [r7, #12]
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	723b      	strb	r3, [r7, #8]
		numArgs = x & 0x7F;
 8000fc6:	7a3b      	ldrb	r3, [r7, #8]
 8000fc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000fcc:	72fb      	strb	r3, [r7, #11]
		if (x & 0x80) // If high bit set...
 8000fce:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	da18      	bge.n	8001008 <LCD_begin+0x84>
		{
			HAL_Delay(numArgs * 5); // numArgs is actually a delay time (5ms units)
 8000fd6:	7afa      	ldrb	r2, [r7, #11]
 8000fd8:	4613      	mov	r3, r2
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	4413      	add	r3, r2
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f001 fdc8 	bl	8002b74 <HAL_Delay>
 8000fe4:	e015      	b.n	8001012 <LCD_begin+0x8e>
		}
		else // Otherwise, issue args to command...
		{
			while (numArgs--)
			{
				result = HAL_SPI_Transmit(spi, addr++, 1, 100);
 8000fe6:	68f9      	ldr	r1, [r7, #12]
 8000fe8:	1c4b      	adds	r3, r1, #1
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	2364      	movs	r3, #100	; 0x64
 8000fee:	2201      	movs	r2, #1
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f003 fc5e 	bl	80048b2 <HAL_SPI_Transmit>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	727b      	strb	r3, [r7, #9]
				if (result != HAL_OK)
 8000ffa:	7a7b      	ldrb	r3, [r7, #9]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d003      	beq.n	8001008 <LCD_begin+0x84>
				{
					LCD_endWrite();
 8001000:	f7ff ffb4 	bl	8000f6c <LCD_endWrite>
					return 0;
 8001004:	2300      	movs	r3, #0
 8001006:	e00f      	b.n	8001028 <LCD_begin+0xa4>
			while (numArgs--)
 8001008:	7afb      	ldrb	r3, [r7, #11]
 800100a:	1e5a      	subs	r2, r3, #1
 800100c:	72fa      	strb	r2, [r7, #11]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d1e9      	bne.n	8000fe6 <LCD_begin+0x62>
	while((cmd = *(addr++)) > 0) // '0' command ends list
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	1c5a      	adds	r2, r3, #1
 8001016:	60fa      	str	r2, [r7, #12]
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	72bb      	strb	r3, [r7, #10]
 800101c:	7abb      	ldrb	r3, [r7, #10]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1bb      	bne.n	8000f9a <LCD_begin+0x16>
				}
			}
		}
	}
	LCD_endWrite();
 8001022:	f7ff ffa3 	bl	8000f6c <LCD_endWrite>
	return 1;
 8001026:	2301      	movs	r3, #1
}
 8001028:	4618      	mov	r0, r3
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000000 	.word	0x20000000

08001034 <LCD_setAddrWindow>:
	LCD_endWrite();
	return result == HAL_OK;
}

int LCD_setAddrWindow(SPI_HandleTypeDef* spi, uint16_t x1, uint16_t y1, uint16_t w, uint16_t h)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	4608      	mov	r0, r1
 800103e:	4611      	mov	r1, r2
 8001040:	461a      	mov	r2, r3
 8001042:	4603      	mov	r3, r0
 8001044:	817b      	strh	r3, [r7, #10]
 8001046:	460b      	mov	r3, r1
 8001048:	813b      	strh	r3, [r7, #8]
 800104a:	4613      	mov	r3, r2
 800104c:	80fb      	strh	r3, [r7, #6]
	uint16_t x2 = x1 + w - 1;
 800104e:	897a      	ldrh	r2, [r7, #10]
 8001050:	88fb      	ldrh	r3, [r7, #6]
 8001052:	4413      	add	r3, r2
 8001054:	b29b      	uxth	r3, r3
 8001056:	3b01      	subs	r3, #1
 8001058:	82fb      	strh	r3, [r7, #22]
	uint16_t y2 = y1 + h - 1;
 800105a:	893a      	ldrh	r2, [r7, #8]
 800105c:	8c3b      	ldrh	r3, [r7, #32]
 800105e:	4413      	add	r3, r2
 8001060:	b29b      	uxth	r3, r3
 8001062:	3b01      	subs	r3, #1
 8001064:	82bb      	strh	r3, [r7, #20]
	uint8_t buf[2];

	LCD_startWrite();
 8001066:	f7ff ff75 	bl	8000f54 <LCD_startWrite>
	LCD_writeCommand(spi, HX8357_CASET); // Column address set
 800106a:	212a      	movs	r1, #42	; 0x2a
 800106c:	68f8      	ldr	r0, [r7, #12]
 800106e:	f7ff ff4f 	bl	8000f10 <LCD_writeCommand>

	uint16_to_bytes(x1, buf);
 8001072:	f107 0210 	add.w	r2, r7, #16
 8001076:	897b      	ldrh	r3, [r7, #10]
 8001078:	4611      	mov	r1, r2
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff ff12 	bl	8000ea4 <uint16_to_bytes>
	HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 8001080:	f107 0110 	add.w	r1, r7, #16
 8001084:	2364      	movs	r3, #100	; 0x64
 8001086:	2202      	movs	r2, #2
 8001088:	68f8      	ldr	r0, [r7, #12]
 800108a:	f003 fc12 	bl	80048b2 <HAL_SPI_Transmit>

	uint16_to_bytes(x2, buf);
 800108e:	f107 0210 	add.w	r2, r7, #16
 8001092:	8afb      	ldrh	r3, [r7, #22]
 8001094:	4611      	mov	r1, r2
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff ff04 	bl	8000ea4 <uint16_to_bytes>
	HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 800109c:	f107 0110 	add.w	r1, r7, #16
 80010a0:	2364      	movs	r3, #100	; 0x64
 80010a2:	2202      	movs	r2, #2
 80010a4:	68f8      	ldr	r0, [r7, #12]
 80010a6:	f003 fc04 	bl	80048b2 <HAL_SPI_Transmit>

	LCD_writeCommand(spi, HX8357_PASET); // Row address set
 80010aa:	212b      	movs	r1, #43	; 0x2b
 80010ac:	68f8      	ldr	r0, [r7, #12]
 80010ae:	f7ff ff2f 	bl	8000f10 <LCD_writeCommand>

	uint16_to_bytes(y1, buf);
 80010b2:	f107 0210 	add.w	r2, r7, #16
 80010b6:	893b      	ldrh	r3, [r7, #8]
 80010b8:	4611      	mov	r1, r2
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fef2 	bl	8000ea4 <uint16_to_bytes>
	HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 80010c0:	f107 0110 	add.w	r1, r7, #16
 80010c4:	2364      	movs	r3, #100	; 0x64
 80010c6:	2202      	movs	r2, #2
 80010c8:	68f8      	ldr	r0, [r7, #12]
 80010ca:	f003 fbf2 	bl	80048b2 <HAL_SPI_Transmit>

	uint16_to_bytes(y2, buf);
 80010ce:	f107 0210 	add.w	r2, r7, #16
 80010d2:	8abb      	ldrh	r3, [r7, #20]
 80010d4:	4611      	mov	r1, r2
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fee4 	bl	8000ea4 <uint16_to_bytes>
	HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 80010dc:	f107 0110 	add.w	r1, r7, #16
 80010e0:	2364      	movs	r3, #100	; 0x64
 80010e2:	2202      	movs	r2, #2
 80010e4:	68f8      	ldr	r0, [r7, #12]
 80010e6:	f003 fbe4 	bl	80048b2 <HAL_SPI_Transmit>

	LCD_endWrite();
 80010ea:	f7ff ff3f 	bl	8000f6c <LCD_endWrite>
	return 1;
 80010ee:	2301      	movs	r3, #1
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3718      	adds	r7, #24
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <LCD_color565>:

uint16_t LCD_color565(uint8_t red, uint8_t green, uint8_t blue) {
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
 8001102:	460b      	mov	r3, r1
 8001104:	71bb      	strb	r3, [r7, #6]
 8001106:	4613      	mov	r3, r2
 8001108:	717b      	strb	r3, [r7, #5]
    return ((red & 0xF8) << 8) | ((green & 0xFC) << 3) | ((blue & 0xF8) >> 3);
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	021b      	lsls	r3, r3, #8
 800110e:	b21b      	sxth	r3, r3
 8001110:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001114:	f023 0307 	bic.w	r3, r3, #7
 8001118:	b21a      	sxth	r2, r3
 800111a:	79bb      	ldrb	r3, [r7, #6]
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	b21b      	sxth	r3, r3
 8001120:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8001124:	b21b      	sxth	r3, r3
 8001126:	4313      	orrs	r3, r2
 8001128:	b21a      	sxth	r2, r3
 800112a:	797b      	ldrb	r3, [r7, #5]
 800112c:	08db      	lsrs	r3, r3, #3
 800112e:	b2db      	uxtb	r3, r3
 8001130:	b21b      	sxth	r3, r3
 8001132:	4313      	orrs	r3, r2
 8001134:	b21b      	sxth	r3, r3
 8001136:	b29b      	uxth	r3, r3
}
 8001138:	4618      	mov	r0, r3
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <LCD_pushColor>:

int LCD_pushColor(SPI_HandleTypeDef* spi, uint16_t color) {
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	460b      	mov	r3, r1
 800114e:	807b      	strh	r3, [r7, #2]
	LCD_startWrite();
 8001150:	f7ff ff00 	bl	8000f54 <LCD_startWrite>
	LCD_writeCommand(spi, HX8357_RAMWR); // Write to RAM
 8001154:	212c      	movs	r1, #44	; 0x2c
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff feda 	bl	8000f10 <LCD_writeCommand>
	HAL_SPI_Transmit(spi, (uint8_t*)&color, 2, 100);
 800115c:	1cb9      	adds	r1, r7, #2
 800115e:	2364      	movs	r3, #100	; 0x64
 8001160:	2202      	movs	r2, #2
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f003 fba5 	bl	80048b2 <HAL_SPI_Transmit>
	LCD_writeCommand(spi, HX8357_NOP); // Write command to stop RAMWR
 8001168:	2100      	movs	r1, #0
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f7ff fed0 	bl	8000f10 <LCD_writeCommand>
	LCD_endWrite();
 8001170:	f7ff fefc 	bl	8000f6c <LCD_endWrite>
	return 1;
 8001174:	2301      	movs	r3, #1
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <LCD_pushColorCopy>:

int LCD_pushColorCopy(SPI_HandleTypeDef* spi, uint16_t color, uint32_t count) {
 800117e:	b580      	push	{r7, lr}
 8001180:	b086      	sub	sp, #24
 8001182:	af00      	add	r7, sp, #0
 8001184:	60f8      	str	r0, [r7, #12]
 8001186:	460b      	mov	r3, r1
 8001188:	607a      	str	r2, [r7, #4]
 800118a:	817b      	strh	r3, [r7, #10]
	LCD_startWrite();
 800118c:	f7ff fee2 	bl	8000f54 <LCD_startWrite>

	LCD_writeCommand(spi, HX8357_RAMWR); // Write to RAM
 8001190:	212c      	movs	r1, #44	; 0x2c
 8001192:	68f8      	ldr	r0, [r7, #12]
 8001194:	f7ff febc 	bl	8000f10 <LCD_writeCommand>

	uint8_t buf[2];
	uint16_to_bytes(color, &buf[0]);
 8001198:	f107 0210 	add.w	r2, r7, #16
 800119c:	897b      	ldrh	r3, [r7, #10]
 800119e:	4611      	mov	r1, r2
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff fe7f 	bl	8000ea4 <uint16_to_bytes>
	for (int i = 0; i < count; ++i)
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
 80011aa:	e009      	b.n	80011c0 <LCD_pushColorCopy+0x42>
	{
		HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 80011ac:	f107 0110 	add.w	r1, r7, #16
 80011b0:	2364      	movs	r3, #100	; 0x64
 80011b2:	2202      	movs	r2, #2
 80011b4:	68f8      	ldr	r0, [r7, #12]
 80011b6:	f003 fb7c 	bl	80048b2 <HAL_SPI_Transmit>
	for (int i = 0; i < count; ++i)
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	3301      	adds	r3, #1
 80011be:	617b      	str	r3, [r7, #20]
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d8f1      	bhi.n	80011ac <LCD_pushColorCopy+0x2e>
	}

	LCD_writeCommand(spi, HX8357_NOP); // Write command to stop RAMWR
 80011c8:	2100      	movs	r1, #0
 80011ca:	68f8      	ldr	r0, [r7, #12]
 80011cc:	f7ff fea0 	bl	8000f10 <LCD_writeCommand>

	LCD_endWrite();
 80011d0:	f7ff fecc 	bl	8000f6c <LCD_endWrite>
	return 1;
 80011d4:	2301      	movs	r3, #1
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3718      	adds	r7, #24
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <LCD_writePixel>:

	LCD_endWrite();
	return 1;
}

int LCD_writePixel(SPI_HandleTypeDef* spi, int16_t x, int16_t y, uint16_t color) {
 80011de:	b580      	push	{r7, lr}
 80011e0:	b086      	sub	sp, #24
 80011e2:	af02      	add	r7, sp, #8
 80011e4:	60f8      	str	r0, [r7, #12]
 80011e6:	4608      	mov	r0, r1
 80011e8:	4611      	mov	r1, r2
 80011ea:	461a      	mov	r2, r3
 80011ec:	4603      	mov	r3, r0
 80011ee:	817b      	strh	r3, [r7, #10]
 80011f0:	460b      	mov	r3, r1
 80011f2:	813b      	strh	r3, [r7, #8]
 80011f4:	4613      	mov	r3, r2
 80011f6:	80fb      	strh	r3, [r7, #6]
    if ((x < 0) ||(x >= HX8357_TFTWIDTH) || (y < 0) || (y >= HX8357_TFTHEIGHT)) return 0;
 80011f8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	db0d      	blt.n	800121c <LCD_writePixel+0x3e>
 8001200:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001204:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001208:	da08      	bge.n	800121c <LCD_writePixel+0x3e>
 800120a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800120e:	2b00      	cmp	r3, #0
 8001210:	db04      	blt.n	800121c <LCD_writePixel+0x3e>
 8001212:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001216:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800121a:	db01      	blt.n	8001220 <LCD_writePixel+0x42>
 800121c:	2300      	movs	r3, #0
 800121e:	e017      	b.n	8001250 <LCD_writePixel+0x72>
    if(!LCD_setAddrWindow(spi, x, y, 1, 1)) return 0;
 8001220:	8979      	ldrh	r1, [r7, #10]
 8001222:	893a      	ldrh	r2, [r7, #8]
 8001224:	2301      	movs	r3, #1
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	2301      	movs	r3, #1
 800122a:	68f8      	ldr	r0, [r7, #12]
 800122c:	f7ff ff02 	bl	8001034 <LCD_setAddrWindow>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d101      	bne.n	800123a <LCD_writePixel+0x5c>
 8001236:	2300      	movs	r3, #0
 8001238:	e00a      	b.n	8001250 <LCD_writePixel+0x72>
    if (!LCD_pushColor(spi, color)) return 0;
 800123a:	88fb      	ldrh	r3, [r7, #6]
 800123c:	4619      	mov	r1, r3
 800123e:	68f8      	ldr	r0, [r7, #12]
 8001240:	f7ff ff80 	bl	8001144 <LCD_pushColor>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d101      	bne.n	800124e <LCD_writePixel+0x70>
 800124a:	2300      	movs	r3, #0
 800124c:	e000      	b.n	8001250 <LCD_writePixel+0x72>
    return 1;
 800124e:	2301      	movs	r3, #1
}
 8001250:	4618      	mov	r0, r3
 8001252:	3710      	adds	r7, #16
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <LCD_writePixels>:

// Length of colors array must be w * h
int LCD_writePixels(SPI_HandleTypeDef* spi, uint16_t color,
					int16_t x, int16_t y, int16_t w, int16_t h)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af02      	add	r7, sp, #8
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	4608      	mov	r0, r1
 8001262:	4611      	mov	r1, r2
 8001264:	461a      	mov	r2, r3
 8001266:	4603      	mov	r3, r0
 8001268:	817b      	strh	r3, [r7, #10]
 800126a:	460b      	mov	r3, r1
 800126c:	813b      	strh	r3, [r7, #8]
 800126e:	4613      	mov	r3, r2
 8001270:	80fb      	strh	r3, [r7, #6]
	if ((x < 0) ||(x >= HX8357_TFTWIDTH) || (y < 0) || (y >= HX8357_TFTHEIGHT)) return 0;
 8001272:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001276:	2b00      	cmp	r3, #0
 8001278:	db0d      	blt.n	8001296 <LCD_writePixels+0x3e>
 800127a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800127e:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001282:	da08      	bge.n	8001296 <LCD_writePixels+0x3e>
 8001284:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001288:	2b00      	cmp	r3, #0
 800128a:	db04      	blt.n	8001296 <LCD_writePixels+0x3e>
 800128c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001290:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001294:	db01      	blt.n	800129a <LCD_writePixels+0x42>
 8001296:	2300      	movs	r3, #0
 8001298:	e01f      	b.n	80012da <LCD_writePixels+0x82>
	if(!LCD_setAddrWindow(spi, x, y, w, h)) return 0;
 800129a:	8939      	ldrh	r1, [r7, #8]
 800129c:	88fa      	ldrh	r2, [r7, #6]
 800129e:	8b38      	ldrh	r0, [r7, #24]
 80012a0:	8bbb      	ldrh	r3, [r7, #28]
 80012a2:	9300      	str	r3, [sp, #0]
 80012a4:	4603      	mov	r3, r0
 80012a6:	68f8      	ldr	r0, [r7, #12]
 80012a8:	f7ff fec4 	bl	8001034 <LCD_setAddrWindow>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d101      	bne.n	80012b6 <LCD_writePixels+0x5e>
 80012b2:	2300      	movs	r3, #0
 80012b4:	e011      	b.n	80012da <LCD_writePixels+0x82>
	if (!LCD_pushColorCopy(spi, color, w*h)) return 0;
 80012b6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80012ba:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80012be:	fb02 f303 	mul.w	r3, r2, r3
 80012c2:	461a      	mov	r2, r3
 80012c4:	897b      	ldrh	r3, [r7, #10]
 80012c6:	4619      	mov	r1, r3
 80012c8:	68f8      	ldr	r0, [r7, #12]
 80012ca:	f7ff ff58 	bl	800117e <LCD_pushColorCopy>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d101      	bne.n	80012d8 <LCD_writePixels+0x80>
 80012d4:	2300      	movs	r3, #0
 80012d6:	e000      	b.n	80012da <LCD_writePixels+0x82>
	return 1;
 80012d8:	2301      	movs	r3, #1
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
	...

080012e4 <LCD_drawChar>:
		0x70, 0x1C, 0x07, 0x1C, 0x70,
		0x0E, 0x38, 0xE0, 0x38, 0x0E
};

void LCD_drawChar(SPI_HandleTypeDef* spi, int16_t x, int16_t y, unsigned char c, uint16_t color, uint32_t size)
{
 80012e4:	b590      	push	{r4, r7, lr}
 80012e6:	b089      	sub	sp, #36	; 0x24
 80012e8:	af02      	add	r7, sp, #8
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	4608      	mov	r0, r1
 80012ee:	4611      	mov	r1, r2
 80012f0:	461a      	mov	r2, r3
 80012f2:	4603      	mov	r3, r0
 80012f4:	817b      	strh	r3, [r7, #10]
 80012f6:	460b      	mov	r3, r1
 80012f8:	813b      	strh	r3, [r7, #8]
 80012fa:	4613      	mov	r3, r2
 80012fc:	71fb      	strb	r3, [r7, #7]
	if((x >= HX8357_TFTWIDTH)   || // Clip right
 80012fe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001302:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001306:	f280 80b5 	bge.w	8001474 <LCD_drawChar+0x190>
	   (y >= HX8357_TFTHEIGHT)  || // Clip bottom
	   ((x + 6 * size - 1) < 0) || // Clip left
 800130a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800130e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001312:	f280 80af 	bge.w	8001474 <LCD_drawChar+0x190>
	   ((y + 8 * size - 1) < 0))   // Clip top
		return;

	uint16_t bg = LCD_color565(255, 255, 255);
 8001316:	22ff      	movs	r2, #255	; 0xff
 8001318:	21ff      	movs	r1, #255	; 0xff
 800131a:	20ff      	movs	r0, #255	; 0xff
 800131c:	f7ff feec 	bl	80010f8 <LCD_color565>
 8001320:	4603      	mov	r3, r0
 8001322:	827b      	strh	r3, [r7, #18]
	LCD_startWrite();
 8001324:	f7ff fe16 	bl	8000f54 <LCD_startWrite>
	for(int8_t i = 0; i < 5; i++) // Char bitmap = 5 columns
 8001328:	2300      	movs	r3, #0
 800132a:	75fb      	strb	r3, [r7, #23]
 800132c:	e09a      	b.n	8001464 <LCD_drawChar+0x180>
	{
		uint8_t line = font[c * 5 + i];
 800132e:	79fa      	ldrb	r2, [r7, #7]
 8001330:	4613      	mov	r3, r2
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	441a      	add	r2, r3
 8001336:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800133a:	4413      	add	r3, r2
 800133c:	4a4f      	ldr	r2, [pc, #316]	; (800147c <LCD_drawChar+0x198>)
 800133e:	5cd3      	ldrb	r3, [r2, r3]
 8001340:	75bb      	strb	r3, [r7, #22]
		for(int8_t j = 0; j < 8; j++, line >>= 1)
 8001342:	2300      	movs	r3, #0
 8001344:	757b      	strb	r3, [r7, #21]
 8001346:	e082      	b.n	800144e <LCD_drawChar+0x16a>
		{
			if (line & 1)
 8001348:	7dbb      	ldrb	r3, [r7, #22]
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	2b00      	cmp	r3, #0
 8001350:	d03a      	beq.n	80013c8 <LCD_drawChar+0xe4>
			{
				if (size == 1) LCD_writePixel(spi, x+i, y+j, color);
 8001352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001354:	2b01      	cmp	r3, #1
 8001356:	d112      	bne.n	800137e <LCD_drawChar+0x9a>
 8001358:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800135c:	b29a      	uxth	r2, r3
 800135e:	897b      	ldrh	r3, [r7, #10]
 8001360:	4413      	add	r3, r2
 8001362:	b29b      	uxth	r3, r3
 8001364:	b219      	sxth	r1, r3
 8001366:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800136a:	b29a      	uxth	r2, r3
 800136c:	893b      	ldrh	r3, [r7, #8]
 800136e:	4413      	add	r3, r2
 8001370:	b29b      	uxth	r3, r3
 8001372:	b21a      	sxth	r2, r3
 8001374:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001376:	68f8      	ldr	r0, [r7, #12]
 8001378:	f7ff ff31 	bl	80011de <LCD_writePixel>
 800137c:	e05e      	b.n	800143c <LCD_drawChar+0x158>
				else LCD_writePixels(spi, color, x+i*size, y+j*size, size, size);
 800137e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001382:	b29a      	uxth	r2, r3
 8001384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001386:	b29b      	uxth	r3, r3
 8001388:	fb12 f303 	smulbb	r3, r2, r3
 800138c:	b29a      	uxth	r2, r3
 800138e:	897b      	ldrh	r3, [r7, #10]
 8001390:	4413      	add	r3, r2
 8001392:	b29b      	uxth	r3, r3
 8001394:	b218      	sxth	r0, r3
 8001396:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800139a:	b29a      	uxth	r2, r3
 800139c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800139e:	b29b      	uxth	r3, r3
 80013a0:	fb12 f303 	smulbb	r3, r2, r3
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	893b      	ldrh	r3, [r7, #8]
 80013a8:	4413      	add	r3, r2
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	b21c      	sxth	r4, r3
 80013ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013b0:	b21b      	sxth	r3, r3
 80013b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013b4:	b212      	sxth	r2, r2
 80013b6:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80013b8:	9201      	str	r2, [sp, #4]
 80013ba:	9300      	str	r3, [sp, #0]
 80013bc:	4623      	mov	r3, r4
 80013be:	4602      	mov	r2, r0
 80013c0:	68f8      	ldr	r0, [r7, #12]
 80013c2:	f7ff ff49 	bl	8001258 <LCD_writePixels>
 80013c6:	e039      	b.n	800143c <LCD_drawChar+0x158>
			}
			else
			{
				if (size == 1) LCD_writePixel(spi, x+i, y+j, bg);
 80013c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d112      	bne.n	80013f4 <LCD_drawChar+0x110>
 80013ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80013d2:	b29a      	uxth	r2, r3
 80013d4:	897b      	ldrh	r3, [r7, #10]
 80013d6:	4413      	add	r3, r2
 80013d8:	b29b      	uxth	r3, r3
 80013da:	b219      	sxth	r1, r3
 80013dc:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80013e0:	b29a      	uxth	r2, r3
 80013e2:	893b      	ldrh	r3, [r7, #8]
 80013e4:	4413      	add	r3, r2
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	b21a      	sxth	r2, r3
 80013ea:	8a7b      	ldrh	r3, [r7, #18]
 80013ec:	68f8      	ldr	r0, [r7, #12]
 80013ee:	f7ff fef6 	bl	80011de <LCD_writePixel>
 80013f2:	e023      	b.n	800143c <LCD_drawChar+0x158>
				else LCD_writePixels(spi, bg, x+i*size, y+j*size, size, size);
 80013f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	fb12 f303 	smulbb	r3, r2, r3
 8001402:	b29a      	uxth	r2, r3
 8001404:	897b      	ldrh	r3, [r7, #10]
 8001406:	4413      	add	r3, r2
 8001408:	b29b      	uxth	r3, r3
 800140a:	b218      	sxth	r0, r3
 800140c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001410:	b29a      	uxth	r2, r3
 8001412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001414:	b29b      	uxth	r3, r3
 8001416:	fb12 f303 	smulbb	r3, r2, r3
 800141a:	b29a      	uxth	r2, r3
 800141c:	893b      	ldrh	r3, [r7, #8]
 800141e:	4413      	add	r3, r2
 8001420:	b29b      	uxth	r3, r3
 8001422:	b21c      	sxth	r4, r3
 8001424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001426:	b21b      	sxth	r3, r3
 8001428:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800142a:	b212      	sxth	r2, r2
 800142c:	8a79      	ldrh	r1, [r7, #18]
 800142e:	9201      	str	r2, [sp, #4]
 8001430:	9300      	str	r3, [sp, #0]
 8001432:	4623      	mov	r3, r4
 8001434:	4602      	mov	r2, r0
 8001436:	68f8      	ldr	r0, [r7, #12]
 8001438:	f7ff ff0e 	bl	8001258 <LCD_writePixels>
		for(int8_t j = 0; j < 8; j++, line >>= 1)
 800143c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001440:	b2db      	uxtb	r3, r3
 8001442:	3301      	adds	r3, #1
 8001444:	b2db      	uxtb	r3, r3
 8001446:	757b      	strb	r3, [r7, #21]
 8001448:	7dbb      	ldrb	r3, [r7, #22]
 800144a:	085b      	lsrs	r3, r3, #1
 800144c:	75bb      	strb	r3, [r7, #22]
 800144e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001452:	2b07      	cmp	r3, #7
 8001454:	f77f af78 	ble.w	8001348 <LCD_drawChar+0x64>
	for(int8_t i = 0; i < 5; i++) // Char bitmap = 5 columns
 8001458:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800145c:	b2db      	uxtb	r3, r3
 800145e:	3301      	adds	r3, #1
 8001460:	b2db      	uxtb	r3, r3
 8001462:	75fb      	strb	r3, [r7, #23]
 8001464:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001468:	2b04      	cmp	r3, #4
 800146a:	f77f af60 	ble.w	800132e <LCD_drawChar+0x4a>
			}
		}
	}
	LCD_endWrite();
 800146e:	f7ff fd7d 	bl	8000f6c <LCD_endWrite>
 8001472:	e000      	b.n	8001476 <LCD_drawChar+0x192>
		return;
 8001474:	bf00      	nop
}
 8001476:	371c      	adds	r7, #28
 8001478:	46bd      	mov	sp, r7
 800147a:	bd90      	pop	{r4, r7, pc}
 800147c:	08009b00 	.word	0x08009b00

08001480 <LCD_drawString>:
	}
	LCD_endWrite();
}

void LCD_drawString(SPI_HandleTypeDef* spi, int16_t x, int16_t y, unsigned char* c, uint32_t length, uint16_t color, uint32_t size)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b088      	sub	sp, #32
 8001484:	af02      	add	r7, sp, #8
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	607b      	str	r3, [r7, #4]
 800148a:	460b      	mov	r3, r1
 800148c:	817b      	strh	r3, [r7, #10]
 800148e:	4613      	mov	r3, r2
 8001490:	813b      	strh	r3, [r7, #8]
	for (int i = 0; i < length; ++i) LCD_drawChar(spi, x + i*6*size, y, c[i], color, size);
 8001492:	2300      	movs	r3, #0
 8001494:	617b      	str	r3, [r7, #20]
 8001496:	e020      	b.n	80014da <LCD_drawString+0x5a>
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	b29a      	uxth	r2, r3
 800149c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800149e:	b29b      	uxth	r3, r3
 80014a0:	fb12 f303 	smulbb	r3, r2, r3
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	461a      	mov	r2, r3
 80014a8:	0052      	lsls	r2, r2, #1
 80014aa:	4413      	add	r3, r2
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	897b      	ldrh	r3, [r7, #10]
 80014b2:	4413      	add	r3, r2
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	b219      	sxth	r1, r3
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	4413      	add	r3, r2
 80014be:	7818      	ldrb	r0, [r3, #0]
 80014c0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80014c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c6:	9301      	str	r3, [sp, #4]
 80014c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	4603      	mov	r3, r0
 80014ce:	68f8      	ldr	r0, [r7, #12]
 80014d0:	f7ff ff08 	bl	80012e4 <LCD_drawChar>
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	3301      	adds	r3, #1
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	6a3a      	ldr	r2, [r7, #32]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d8da      	bhi.n	8001498 <LCD_drawString+0x18>
}
 80014e2:	bf00      	nop
 80014e4:	bf00      	nop
 80014e6:	3718      	adds	r7, #24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <LCD_writeLine>:
		}
	}
	LCD_endWrite();
}

void LCD_writeLine(SPI_HandleTypeDef *spi, int x0, int y0, int x1, int y1, int color) {
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08a      	sub	sp, #40	; 0x28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
 80014f8:	603b      	str	r3, [r7, #0]
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80014fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001504:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001508:	6839      	ldr	r1, [r7, #0]
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	1acb      	subs	r3, r1, r3
 800150e:	2b00      	cmp	r3, #0
 8001510:	bfb8      	it	lt
 8001512:	425b      	neglt	r3, r3
 8001514:	429a      	cmp	r2, r3
 8001516:	bfcc      	ite	gt
 8001518:	2301      	movgt	r3, #1
 800151a:	2300      	movle	r3, #0
 800151c:	b2db      	uxtb	r3, r3
 800151e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (steep) {
 8001520:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001524:	2b00      	cmp	r3, #0
 8001526:	d00d      	beq.n	8001544 <LCD_writeLine+0x58>
    _swap_int16_t(x0, y0);
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	843b      	strh	r3, [r7, #32]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001534:	607b      	str	r3, [r7, #4]
    _swap_int16_t(x1, y1);
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	83fb      	strh	r3, [r7, #30]
 800153a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800153c:	603b      	str	r3, [r7, #0]
 800153e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001542:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (x0 > x1) {
 8001544:	68ba      	ldr	r2, [r7, #8]
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	429a      	cmp	r2, r3
 800154a:	dd0d      	ble.n	8001568 <LCD_writeLine+0x7c>
    _swap_int16_t(x0, x1);
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	83bb      	strh	r3, [r7, #28]
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001558:	603b      	str	r3, [r7, #0]
    _swap_int16_t(y0, y1);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	837b      	strh	r3, [r7, #26]
 800155e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001560:	607b      	str	r3, [r7, #4]
 8001562:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001566:	633b      	str	r3, [r7, #48]	; 0x30
  }

  int16_t dx, dy;
  dx = x1 - x0;
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	b29a      	uxth	r2, r3
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	b29b      	uxth	r3, r3
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	b29b      	uxth	r3, r3
 8001574:	833b      	strh	r3, [r7, #24]
  dy = abs(y1 - y0);
 8001576:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b00      	cmp	r3, #0
 800157e:	bfb8      	it	lt
 8001580:	425b      	neglt	r3, r3
 8001582:	82fb      	strh	r3, [r7, #22]

  int16_t err = dx / 2;
 8001584:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001588:	0fda      	lsrs	r2, r3, #31
 800158a:	4413      	add	r3, r2
 800158c:	105b      	asrs	r3, r3, #1
 800158e:	84fb      	strh	r3, [r7, #38]	; 0x26
  int16_t ystep;

  if (y0 < y1) {
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001594:	429a      	cmp	r2, r3
 8001596:	da02      	bge.n	800159e <LCD_writeLine+0xb2>
    ystep = 1;
 8001598:	2301      	movs	r3, #1
 800159a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800159c:	e030      	b.n	8001600 <LCD_writeLine+0x114>
  } else {
    ystep = -1;
 800159e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015a2:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  for (; x0 <= x1; x0++) {
 80015a4:	e02c      	b.n	8001600 <LCD_writeLine+0x114>
    if (steep) {
 80015a6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d009      	beq.n	80015c2 <LCD_writeLine+0xd6>
      LCD_writePixel(spi, y0, x0, color);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	b219      	sxth	r1, r3
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	b21a      	sxth	r2, r3
 80015b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	68f8      	ldr	r0, [r7, #12]
 80015bc:	f7ff fe0f 	bl	80011de <LCD_writePixel>
 80015c0:	e008      	b.n	80015d4 <LCD_writeLine+0xe8>
    } else {
      LCD_writePixel(spi, x0, y0, color);
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	b219      	sxth	r1, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	b21a      	sxth	r2, r3
 80015ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	68f8      	ldr	r0, [r7, #12]
 80015d0:	f7ff fe05 	bl	80011de <LCD_writePixel>
    }
    err -= dy;
 80015d4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80015d6:	8afb      	ldrh	r3, [r7, #22]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	b29b      	uxth	r3, r3
 80015dc:	84fb      	strh	r3, [r7, #38]	; 0x26
    if (err < 0) {
 80015de:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	da09      	bge.n	80015fa <LCD_writeLine+0x10e>
      y0 += ystep;
 80015e6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	4413      	add	r3, r2
 80015ee:	607b      	str	r3, [r7, #4]
      err += dx;
 80015f0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80015f2:	8b3b      	ldrh	r3, [r7, #24]
 80015f4:	4413      	add	r3, r2
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	84fb      	strh	r3, [r7, #38]	; 0x26
  for (; x0 <= x1; x0++) {
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	3301      	adds	r3, #1
 80015fe:	60bb      	str	r3, [r7, #8]
 8001600:	68ba      	ldr	r2, [r7, #8]
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	429a      	cmp	r2, r3
 8001606:	ddce      	ble.n	80015a6 <LCD_writeLine+0xba>
    }
  }
}
 8001608:	bf00      	nop
 800160a:	bf00      	nop
 800160c:	3728      	adds	r7, #40	; 0x28
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <LCD_drawBattery>:
	    LCD_writeFastHLine(spi, a, y, b - a + 1, color);
	  }
}

//homemade functions for TADAMHASPEV, move to different file
void LCD_drawBattery(SPI_HandleTypeDef* spi, int16_t x, int16_t y, uint32_t size) {
 8001612:	b580      	push	{r7, lr}
 8001614:	b086      	sub	sp, #24
 8001616:	af02      	add	r7, sp, #8
 8001618:	60f8      	str	r0, [r7, #12]
 800161a:	607b      	str	r3, [r7, #4]
 800161c:	460b      	mov	r3, r1
 800161e:	817b      	strh	r3, [r7, #10]
 8001620:	4613      	mov	r3, r2
 8001622:	813b      	strh	r3, [r7, #8]
	//make battery thicker?
	//left
	if(!LCD_setAddrWindow(spi, x, y + size, 1, 22*size)) return;
 8001624:	8979      	ldrh	r1, [r7, #10]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	b29a      	uxth	r2, r3
 800162a:	893b      	ldrh	r3, [r7, #8]
 800162c:	4413      	add	r3, r2
 800162e:	b29a      	uxth	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	b29b      	uxth	r3, r3
 8001634:	4618      	mov	r0, r3
 8001636:	0080      	lsls	r0, r0, #2
 8001638:	4418      	add	r0, r3
 800163a:	0040      	lsls	r0, r0, #1
 800163c:	4403      	add	r3, r0
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	b29b      	uxth	r3, r3
 8001642:	9300      	str	r3, [sp, #0]
 8001644:	2301      	movs	r3, #1
 8001646:	68f8      	ldr	r0, [r7, #12]
 8001648:	f7ff fcf4 	bl	8001034 <LCD_setAddrWindow>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	f000 80df 	beq.w	8001812 <LCD_drawBattery+0x200>
	if (!LCD_pushColorCopy(spi, HX8357_BLACK, 22*size)) return;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2216      	movs	r2, #22
 8001658:	fb02 f303 	mul.w	r3, r2, r3
 800165c:	461a      	mov	r2, r3
 800165e:	2100      	movs	r1, #0
 8001660:	68f8      	ldr	r0, [r7, #12]
 8001662:	f7ff fd8c 	bl	800117e <LCD_pushColorCopy>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	f000 80d4 	beq.w	8001816 <LCD_drawBattery+0x204>

	//right
	if(!LCD_setAddrWindow(spi, x + 10*size, y + size, 1, 22*size)) return;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	b29b      	uxth	r3, r3
 8001672:	461a      	mov	r2, r3
 8001674:	0092      	lsls	r2, r2, #2
 8001676:	4413      	add	r3, r2
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	b29a      	uxth	r2, r3
 800167c:	897b      	ldrh	r3, [r7, #10]
 800167e:	4413      	add	r3, r2
 8001680:	b299      	uxth	r1, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	b29a      	uxth	r2, r3
 8001686:	893b      	ldrh	r3, [r7, #8]
 8001688:	4413      	add	r3, r2
 800168a:	b29a      	uxth	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	b29b      	uxth	r3, r3
 8001690:	4618      	mov	r0, r3
 8001692:	0080      	lsls	r0, r0, #2
 8001694:	4418      	add	r0, r3
 8001696:	0040      	lsls	r0, r0, #1
 8001698:	4403      	add	r3, r0
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	b29b      	uxth	r3, r3
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	2301      	movs	r3, #1
 80016a2:	68f8      	ldr	r0, [r7, #12]
 80016a4:	f7ff fcc6 	bl	8001034 <LCD_setAddrWindow>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f000 80b5 	beq.w	800181a <LCD_drawBattery+0x208>
	if (!LCD_pushColorCopy(spi, HX8357_BLACK, 22*size)) return;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2216      	movs	r2, #22
 80016b4:	fb02 f303 	mul.w	r3, r2, r3
 80016b8:	461a      	mov	r2, r3
 80016ba:	2100      	movs	r1, #0
 80016bc:	68f8      	ldr	r0, [r7, #12]
 80016be:	f7ff fd5e 	bl	800117e <LCD_pushColorCopy>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	f000 80aa 	beq.w	800181e <LCD_drawBattery+0x20c>

	//top
	if(!LCD_setAddrWindow(spi, x, y + size, 10*size, 1)) return;
 80016ca:	8979      	ldrh	r1, [r7, #10]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	893b      	ldrh	r3, [r7, #8]
 80016d2:	4413      	add	r3, r2
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	b29b      	uxth	r3, r3
 80016da:	4618      	mov	r0, r3
 80016dc:	0080      	lsls	r0, r0, #2
 80016de:	4403      	add	r3, r0
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	2001      	movs	r0, #1
 80016e6:	9000      	str	r0, [sp, #0]
 80016e8:	68f8      	ldr	r0, [r7, #12]
 80016ea:	f7ff fca3 	bl	8001034 <LCD_setAddrWindow>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f000 8096 	beq.w	8001822 <LCD_drawBattery+0x210>
	if (!LCD_pushColorCopy(spi, HX8357_BLACK, 10*size)) return;
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	4613      	mov	r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4413      	add	r3, r2
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	461a      	mov	r2, r3
 8001702:	2100      	movs	r1, #0
 8001704:	68f8      	ldr	r0, [r7, #12]
 8001706:	f7ff fd3a 	bl	800117e <LCD_pushColorCopy>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	f000 808a 	beq.w	8001826 <LCD_drawBattery+0x214>

	//bottom
	if(!LCD_setAddrWindow(spi, x, y + 23*size, 10*size, 1)) return;
 8001712:	8979      	ldrh	r1, [r7, #10]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	b29b      	uxth	r3, r3
 8001718:	461a      	mov	r2, r3
 800171a:	0052      	lsls	r2, r2, #1
 800171c:	441a      	add	r2, r3
 800171e:	00d2      	lsls	r2, r2, #3
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	b29a      	uxth	r2, r3
 8001724:	893b      	ldrh	r3, [r7, #8]
 8001726:	4413      	add	r3, r2
 8001728:	b29a      	uxth	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	b29b      	uxth	r3, r3
 800172e:	4618      	mov	r0, r3
 8001730:	0080      	lsls	r0, r0, #2
 8001732:	4403      	add	r3, r0
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	b29b      	uxth	r3, r3
 8001738:	2001      	movs	r0, #1
 800173a:	9000      	str	r0, [sp, #0]
 800173c:	68f8      	ldr	r0, [r7, #12]
 800173e:	f7ff fc79 	bl	8001034 <LCD_setAddrWindow>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d070      	beq.n	800182a <LCD_drawBattery+0x218>
	if (!LCD_pushColorCopy(spi, HX8357_BLACK, 10*size)) return;
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	4613      	mov	r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4413      	add	r3, r2
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	461a      	mov	r2, r3
 8001754:	2100      	movs	r1, #0
 8001756:	68f8      	ldr	r0, [r7, #12]
 8001758:	f7ff fd11 	bl	800117e <LCD_pushColorCopy>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d065      	beq.n	800182e <LCD_drawBattery+0x21c>

	//lil cap
	if(!LCD_setAddrWindow(spi, x + 3*size, y, 4*size, 1)) return;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	b29b      	uxth	r3, r3
 8001766:	461a      	mov	r2, r3
 8001768:	0052      	lsls	r2, r2, #1
 800176a:	4413      	add	r3, r2
 800176c:	b29a      	uxth	r2, r3
 800176e:	897b      	ldrh	r3, [r7, #10]
 8001770:	4413      	add	r3, r2
 8001772:	b299      	uxth	r1, r3
 8001774:	893a      	ldrh	r2, [r7, #8]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	b29b      	uxth	r3, r3
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	b29b      	uxth	r3, r3
 800177e:	2001      	movs	r0, #1
 8001780:	9000      	str	r0, [sp, #0]
 8001782:	68f8      	ldr	r0, [r7, #12]
 8001784:	f7ff fc56 	bl	8001034 <LCD_setAddrWindow>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d051      	beq.n	8001832 <LCD_drawBattery+0x220>
	if (!LCD_pushColorCopy(spi, HX8357_BLACK, 4*size)) return;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	461a      	mov	r2, r3
 8001794:	2100      	movs	r1, #0
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	f7ff fcf1 	bl	800117e <LCD_pushColorCopy>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d049      	beq.n	8001836 <LCD_drawBattery+0x224>

	if(!LCD_setAddrWindow(spi, x + 3*size, y, 1, size)) return;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	461a      	mov	r2, r3
 80017a8:	0052      	lsls	r2, r2, #1
 80017aa:	4413      	add	r3, r2
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	897b      	ldrh	r3, [r7, #10]
 80017b0:	4413      	add	r3, r2
 80017b2:	b299      	uxth	r1, r3
 80017b4:	893a      	ldrh	r2, [r7, #8]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	9300      	str	r3, [sp, #0]
 80017bc:	2301      	movs	r3, #1
 80017be:	68f8      	ldr	r0, [r7, #12]
 80017c0:	f7ff fc38 	bl	8001034 <LCD_setAddrWindow>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d037      	beq.n	800183a <LCD_drawBattery+0x228>
	if (!LCD_pushColorCopy(spi, HX8357_BLACK, size)) return;
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	2100      	movs	r1, #0
 80017ce:	68f8      	ldr	r0, [r7, #12]
 80017d0:	f7ff fcd5 	bl	800117e <LCD_pushColorCopy>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d031      	beq.n	800183e <LCD_drawBattery+0x22c>

	if(!LCD_setAddrWindow(spi, x + 3*size + 4*size, y, 1, size)) return;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	b29b      	uxth	r3, r3
 80017de:	461a      	mov	r2, r3
 80017e0:	00d2      	lsls	r2, r2, #3
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	897b      	ldrh	r3, [r7, #10]
 80017e8:	4413      	add	r3, r2
 80017ea:	b299      	uxth	r1, r3
 80017ec:	893a      	ldrh	r2, [r7, #8]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	2301      	movs	r3, #1
 80017f6:	68f8      	ldr	r0, [r7, #12]
 80017f8:	f7ff fc1c 	bl	8001034 <LCD_setAddrWindow>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d01f      	beq.n	8001842 <LCD_drawBattery+0x230>
	if (!LCD_pushColorCopy(spi, HX8357_BLACK, size)) return;
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	2100      	movs	r1, #0
 8001806:	68f8      	ldr	r0, [r7, #12]
 8001808:	f7ff fcb9 	bl	800117e <LCD_pushColorCopy>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
	return;
 8001810:	e018      	b.n	8001844 <LCD_drawBattery+0x232>
	if(!LCD_setAddrWindow(spi, x, y + size, 1, 22*size)) return;
 8001812:	bf00      	nop
 8001814:	e016      	b.n	8001844 <LCD_drawBattery+0x232>
	if (!LCD_pushColorCopy(spi, HX8357_BLACK, 22*size)) return;
 8001816:	bf00      	nop
 8001818:	e014      	b.n	8001844 <LCD_drawBattery+0x232>
	if(!LCD_setAddrWindow(spi, x + 10*size, y + size, 1, 22*size)) return;
 800181a:	bf00      	nop
 800181c:	e012      	b.n	8001844 <LCD_drawBattery+0x232>
	if (!LCD_pushColorCopy(spi, HX8357_BLACK, 22*size)) return;
 800181e:	bf00      	nop
 8001820:	e010      	b.n	8001844 <LCD_drawBattery+0x232>
	if(!LCD_setAddrWindow(spi, x, y + size, 10*size, 1)) return;
 8001822:	bf00      	nop
 8001824:	e00e      	b.n	8001844 <LCD_drawBattery+0x232>
	if (!LCD_pushColorCopy(spi, HX8357_BLACK, 10*size)) return;
 8001826:	bf00      	nop
 8001828:	e00c      	b.n	8001844 <LCD_drawBattery+0x232>
	if(!LCD_setAddrWindow(spi, x, y + 23*size, 10*size, 1)) return;
 800182a:	bf00      	nop
 800182c:	e00a      	b.n	8001844 <LCD_drawBattery+0x232>
	if (!LCD_pushColorCopy(spi, HX8357_BLACK, 10*size)) return;
 800182e:	bf00      	nop
 8001830:	e008      	b.n	8001844 <LCD_drawBattery+0x232>
	if(!LCD_setAddrWindow(spi, x + 3*size, y, 4*size, 1)) return;
 8001832:	bf00      	nop
 8001834:	e006      	b.n	8001844 <LCD_drawBattery+0x232>
	if (!LCD_pushColorCopy(spi, HX8357_BLACK, 4*size)) return;
 8001836:	bf00      	nop
 8001838:	e004      	b.n	8001844 <LCD_drawBattery+0x232>
	if(!LCD_setAddrWindow(spi, x + 3*size, y, 1, size)) return;
 800183a:	bf00      	nop
 800183c:	e002      	b.n	8001844 <LCD_drawBattery+0x232>
	if (!LCD_pushColorCopy(spi, HX8357_BLACK, size)) return;
 800183e:	bf00      	nop
 8001840:	e000      	b.n	8001844 <LCD_drawBattery+0x232>
	if(!LCD_setAddrWindow(spi, x + 3*size + 4*size, y, 1, size)) return;
 8001842:	bf00      	nop
}
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <LCD_drawFrame>:

void LCD_drawFrame(SPI_HandleTypeDef* spi) {
 800184a:	b580      	push	{r7, lr}
 800184c:	b084      	sub	sp, #16
 800184e:	af02      	add	r7, sp, #8
 8001850:	6078      	str	r0, [r7, #4]
	//rows
	LCD_writeLine(spi,0,80,360,80,HX8357_BLACK);
 8001852:	2300      	movs	r3, #0
 8001854:	9301      	str	r3, [sp, #4]
 8001856:	2350      	movs	r3, #80	; 0x50
 8001858:	9300      	str	r3, [sp, #0]
 800185a:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800185e:	2250      	movs	r2, #80	; 0x50
 8001860:	2100      	movs	r1, #0
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff fe42 	bl	80014ec <LCD_writeLine>
	LCD_writeLine(spi,0,160,360,160,HX8357_BLACK);
 8001868:	2300      	movs	r3, #0
 800186a:	9301      	str	r3, [sp, #4]
 800186c:	23a0      	movs	r3, #160	; 0xa0
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001874:	22a0      	movs	r2, #160	; 0xa0
 8001876:	2100      	movs	r1, #0
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f7ff fe37 	bl	80014ec <LCD_writeLine>
	LCD_writeLine(spi,0,240,360,240,HX8357_BLACK);
 800187e:	2300      	movs	r3, #0
 8001880:	9301      	str	r3, [sp, #4]
 8001882:	23f0      	movs	r3, #240	; 0xf0
 8001884:	9300      	str	r3, [sp, #0]
 8001886:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800188a:	22f0      	movs	r2, #240	; 0xf0
 800188c:	2100      	movs	r1, #0
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f7ff fe2c 	bl	80014ec <LCD_writeLine>

	//column
	LCD_writeLine(spi,360,0,360,320,HX8357_BLACK);
 8001894:	2300      	movs	r3, #0
 8001896:	9301      	str	r3, [sp, #4]
 8001898:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800189c:	9300      	str	r3, [sp, #0]
 800189e:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80018a2:	2200      	movs	r2, #0
 80018a4:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f7ff fe1f 	bl	80014ec <LCD_writeLine>
	return;
 80018ae:	bf00      	nop
}
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
	...

080018b8 <LCD_fillBattery>:

int offset = 0;

void LCD_fillBattery(SPI_HandleTypeDef* spi, int16_t x, int16_t y, uint32_t size, int level) {
 80018b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018bc:	b086      	sub	sp, #24
 80018be:	af02      	add	r7, sp, #8
 80018c0:	60f8      	str	r0, [r7, #12]
 80018c2:	607b      	str	r3, [r7, #4]
 80018c4:	460b      	mov	r3, r1
 80018c6:	817b      	strh	r3, [r7, #10]
 80018c8:	4613      	mov	r3, r2
 80018ca:	813b      	strh	r3, [r7, #8]
	LCD_writePixels(spi, HX8357_WHITE, x + 3, ((y + size) + 3), 10*size - 6, (22*size - 6));
 80018cc:	897b      	ldrh	r3, [r7, #10]
 80018ce:	3303      	adds	r3, #3
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	b219      	sxth	r1, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	893b      	ldrh	r3, [r7, #8]
 80018da:	4413      	add	r3, r2
 80018dc:	b29b      	uxth	r3, r3
 80018de:	3303      	adds	r3, #3
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	b218      	sxth	r0, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	461a      	mov	r2, r3
 80018ea:	0092      	lsls	r2, r2, #2
 80018ec:	4413      	add	r3, r2
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	3b06      	subs	r3, #6
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	b21a      	sxth	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	461c      	mov	r4, r3
 80018fe:	00a4      	lsls	r4, r4, #2
 8001900:	441c      	add	r4, r3
 8001902:	0064      	lsls	r4, r4, #1
 8001904:	4423      	add	r3, r4
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	b29b      	uxth	r3, r3
 800190a:	3b06      	subs	r3, #6
 800190c:	b29b      	uxth	r3, r3
 800190e:	b21b      	sxth	r3, r3
 8001910:	9301      	str	r3, [sp, #4]
 8001912:	9200      	str	r2, [sp, #0]
 8001914:	4603      	mov	r3, r0
 8001916:	460a      	mov	r2, r1
 8001918:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800191c:	68f8      	ldr	r0, [r7, #12]
 800191e:	f7ff fc9b 	bl	8001258 <LCD_writePixels>
	offset = 22*size - (22*size)*(level/100.0);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2216      	movs	r2, #22
 8001926:	fb02 f303 	mul.w	r3, r2, r3
 800192a:	4618      	mov	r0, r3
 800192c:	f7fe fdea 	bl	8000504 <__aeabi_ui2d>
 8001930:	4604      	mov	r4, r0
 8001932:	460d      	mov	r5, r1
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2216      	movs	r2, #22
 8001938:	fb02 f303 	mul.w	r3, r2, r3
 800193c:	4618      	mov	r0, r3
 800193e:	f7fe fde1 	bl	8000504 <__aeabi_ui2d>
 8001942:	4680      	mov	r8, r0
 8001944:	4689      	mov	r9, r1
 8001946:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001948:	f7fe fdec 	bl	8000524 <__aeabi_i2d>
 800194c:	f04f 0200 	mov.w	r2, #0
 8001950:	4b63      	ldr	r3, [pc, #396]	; (8001ae0 <LCD_fillBattery+0x228>)
 8001952:	f7fe ff7b 	bl	800084c <__aeabi_ddiv>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	4640      	mov	r0, r8
 800195c:	4649      	mov	r1, r9
 800195e:	f7fe fe4b 	bl	80005f8 <__aeabi_dmul>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4620      	mov	r0, r4
 8001968:	4629      	mov	r1, r5
 800196a:	f7fe fc8d 	bl	8000288 <__aeabi_dsub>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	4610      	mov	r0, r2
 8001974:	4619      	mov	r1, r3
 8001976:	f7ff f8ef 	bl	8000b58 <__aeabi_d2iz>
 800197a:	4603      	mov	r3, r0
 800197c:	4a59      	ldr	r2, [pc, #356]	; (8001ae4 <LCD_fillBattery+0x22c>)
 800197e:	6013      	str	r3, [r2, #0]
	if (level > 0) {
 8001980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001982:	2b00      	cmp	r3, #0
 8001984:	f340 80a7 	ble.w	8001ad6 <LCD_fillBattery+0x21e>
		if (level < 20) {
 8001988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800198a:	2b13      	cmp	r3, #19
 800198c:	dc35      	bgt.n	80019fa <LCD_fillBattery+0x142>
			LCD_writePixels(spi, HX8357_RED, x + 3, ((y + size) + 3) + offset, 10*size - 6, (22*size - 6) - offset);
 800198e:	897b      	ldrh	r3, [r7, #10]
 8001990:	3303      	adds	r3, #3
 8001992:	b29b      	uxth	r3, r3
 8001994:	b218      	sxth	r0, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	b29a      	uxth	r2, r3
 800199a:	893b      	ldrh	r3, [r7, #8]
 800199c:	4413      	add	r3, r2
 800199e:	b29a      	uxth	r2, r3
 80019a0:	4b50      	ldr	r3, [pc, #320]	; (8001ae4 <LCD_fillBattery+0x22c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	4413      	add	r3, r2
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	3303      	adds	r3, #3
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	b21c      	sxth	r4, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	461a      	mov	r2, r3
 80019b6:	0092      	lsls	r2, r2, #2
 80019b8:	4413      	add	r3, r2
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	b29b      	uxth	r3, r3
 80019be:	3b06      	subs	r3, #6
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	b21a      	sxth	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	4619      	mov	r1, r3
 80019ca:	0089      	lsls	r1, r1, #2
 80019cc:	4419      	add	r1, r3
 80019ce:	0049      	lsls	r1, r1, #1
 80019d0:	440b      	add	r3, r1
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	b299      	uxth	r1, r3
 80019d6:	4b43      	ldr	r3, [pc, #268]	; (8001ae4 <LCD_fillBattery+0x22c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	b29b      	uxth	r3, r3
 80019dc:	1acb      	subs	r3, r1, r3
 80019de:	b29b      	uxth	r3, r3
 80019e0:	3b06      	subs	r3, #6
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	b21b      	sxth	r3, r3
 80019e6:	9301      	str	r3, [sp, #4]
 80019e8:	9200      	str	r2, [sp, #0]
 80019ea:	4623      	mov	r3, r4
 80019ec:	4602      	mov	r2, r0
 80019ee:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 80019f2:	68f8      	ldr	r0, [r7, #12]
 80019f4:	f7ff fc30 	bl	8001258 <LCD_writePixels>
			LCD_writePixels(spi, HX8357_GREEN, x + 3, ((y + size) + 3) + offset, 10*size - 6, (22*size - 6) - offset);
		}
	}
	//level = 100 --> y offset 0
	//level = 0 --> y offset 22*size
}
 80019f8:	e06d      	b.n	8001ad6 <LCD_fillBattery+0x21e>
		} else if (level < 50) {
 80019fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019fc:	2b31      	cmp	r3, #49	; 0x31
 80019fe:	dc35      	bgt.n	8001a6c <LCD_fillBattery+0x1b4>
			LCD_writePixels(spi, HX8357_YELLOW, x + 3, ((y + size) + 3) + offset, 10*size - 6, (22*size - 6) - offset);
 8001a00:	897b      	ldrh	r3, [r7, #10]
 8001a02:	3303      	adds	r3, #3
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	b218      	sxth	r0, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	893b      	ldrh	r3, [r7, #8]
 8001a0e:	4413      	add	r3, r2
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	4b34      	ldr	r3, [pc, #208]	; (8001ae4 <LCD_fillBattery+0x22c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	4413      	add	r3, r2
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	3303      	adds	r3, #3
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	b21c      	sxth	r4, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	461a      	mov	r2, r3
 8001a28:	0092      	lsls	r2, r2, #2
 8001a2a:	4413      	add	r3, r2
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	3b06      	subs	r3, #6
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	b21a      	sxth	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	0089      	lsls	r1, r1, #2
 8001a3e:	4419      	add	r1, r3
 8001a40:	0049      	lsls	r1, r1, #1
 8001a42:	440b      	add	r3, r1
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	b299      	uxth	r1, r3
 8001a48:	4b26      	ldr	r3, [pc, #152]	; (8001ae4 <LCD_fillBattery+0x22c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	1acb      	subs	r3, r1, r3
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	3b06      	subs	r3, #6
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	b21b      	sxth	r3, r3
 8001a58:	9301      	str	r3, [sp, #4]
 8001a5a:	9200      	str	r2, [sp, #0]
 8001a5c:	4623      	mov	r3, r4
 8001a5e:	4602      	mov	r2, r0
 8001a60:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 8001a64:	68f8      	ldr	r0, [r7, #12]
 8001a66:	f7ff fbf7 	bl	8001258 <LCD_writePixels>
}
 8001a6a:	e034      	b.n	8001ad6 <LCD_fillBattery+0x21e>
			LCD_writePixels(spi, HX8357_GREEN, x + 3, ((y + size) + 3) + offset, 10*size - 6, (22*size - 6) - offset);
 8001a6c:	897b      	ldrh	r3, [r7, #10]
 8001a6e:	3303      	adds	r3, #3
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	b218      	sxth	r0, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	b29a      	uxth	r2, r3
 8001a78:	893b      	ldrh	r3, [r7, #8]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	4b19      	ldr	r3, [pc, #100]	; (8001ae4 <LCD_fillBattery+0x22c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	4413      	add	r3, r2
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	3303      	adds	r3, #3
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	b21c      	sxth	r4, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	461a      	mov	r2, r3
 8001a94:	0092      	lsls	r2, r2, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	3b06      	subs	r3, #6
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	b21a      	sxth	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	0089      	lsls	r1, r1, #2
 8001aaa:	4419      	add	r1, r3
 8001aac:	0049      	lsls	r1, r1, #1
 8001aae:	440b      	add	r3, r1
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	b299      	uxth	r1, r3
 8001ab4:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <LCD_fillBattery+0x22c>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	1acb      	subs	r3, r1, r3
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	3b06      	subs	r3, #6
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	b21b      	sxth	r3, r3
 8001ac4:	9301      	str	r3, [sp, #4]
 8001ac6:	9200      	str	r2, [sp, #0]
 8001ac8:	4623      	mov	r3, r4
 8001aca:	4602      	mov	r2, r0
 8001acc:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8001ad0:	68f8      	ldr	r0, [r7, #12]
 8001ad2:	f7ff fbc1 	bl	8001258 <LCD_writePixels>
}
 8001ad6:	bf00      	nop
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ae0:	40590000 	.word	0x40590000
 8001ae4:	2000025c 	.word	0x2000025c

08001ae8 <LCD_updateVals>:

char speedString[20];
char tempString[20];
char powerString[20];

void LCD_updateVals(SPI_HandleTypeDef* spi, struct TelData data) {
 8001ae8:	b084      	sub	sp, #16
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b086      	sub	sp, #24
 8001aee:	af04      	add	r7, sp, #16
 8001af0:	6078      	str	r0, [r7, #4]
 8001af2:	f107 0014 	add.w	r0, r7, #20
 8001af6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//buf[0] accel, buf[1] temp, buf[2] speed, buf[3] voltage, buf[4] current
	sprintf(tempString,"%f", data.temp);//buf[1]);
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7fe fd23 	bl	8000548 <__aeabi_f2d>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	4925      	ldr	r1, [pc, #148]	; (8001b9c <LCD_updateVals+0xb4>)
 8001b08:	4825      	ldr	r0, [pc, #148]	; (8001ba0 <LCD_updateVals+0xb8>)
 8001b0a:	f005 fe65 	bl	80077d8 <siprintf>
	LCD_drawString(spi,130,30 + 80*2,tempString,6,HX8357_BLACK,4);
 8001b0e:	2304      	movs	r3, #4
 8001b10:	9302      	str	r3, [sp, #8]
 8001b12:	2300      	movs	r3, #0
 8001b14:	9301      	str	r3, [sp, #4]
 8001b16:	2306      	movs	r3, #6
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	4b21      	ldr	r3, [pc, #132]	; (8001ba0 <LCD_updateVals+0xb8>)
 8001b1c:	22be      	movs	r2, #190	; 0xbe
 8001b1e:	2182      	movs	r1, #130	; 0x82
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f7ff fcad 	bl	8001480 <LCD_drawString>

	sprintf(speedString,"%f", data.speed);//buf[2]);
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7fe fd0d 	bl	8000548 <__aeabi_f2d>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	491a      	ldr	r1, [pc, #104]	; (8001b9c <LCD_updateVals+0xb4>)
 8001b34:	481b      	ldr	r0, [pc, #108]	; (8001ba4 <LCD_updateVals+0xbc>)
 8001b36:	f005 fe4f 	bl	80077d8 <siprintf>
	LCD_drawString(spi,130,30 + 80*1,speedString,4,HX8357_BLACK,4);
 8001b3a:	2304      	movs	r3, #4
 8001b3c:	9302      	str	r3, [sp, #8]
 8001b3e:	2300      	movs	r3, #0
 8001b40:	9301      	str	r3, [sp, #4]
 8001b42:	2304      	movs	r3, #4
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	4b17      	ldr	r3, [pc, #92]	; (8001ba4 <LCD_updateVals+0xbc>)
 8001b48:	226e      	movs	r2, #110	; 0x6e
 8001b4a:	2182      	movs	r1, #130	; 0x82
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f7ff fc97 	bl	8001480 <LCD_drawString>

	sprintf(powerString,"%f", data.voltage*data.current);//buf[3]*buf[4]);
 8001b52:	ed97 7a08 	vldr	s14, [r7, #32]
 8001b56:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b5e:	ee17 0a90 	vmov	r0, s15
 8001b62:	f7fe fcf1 	bl	8000548 <__aeabi_f2d>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	490c      	ldr	r1, [pc, #48]	; (8001b9c <LCD_updateVals+0xb4>)
 8001b6c:	480e      	ldr	r0, [pc, #56]	; (8001ba8 <LCD_updateVals+0xc0>)
 8001b6e:	f005 fe33 	bl	80077d8 <siprintf>
	LCD_drawString(spi,130,30 + 80*3,powerString,6,HX8357_BLACK,4);
 8001b72:	2304      	movs	r3, #4
 8001b74:	9302      	str	r3, [sp, #8]
 8001b76:	2300      	movs	r3, #0
 8001b78:	9301      	str	r3, [sp, #4]
 8001b7a:	2306      	movs	r3, #6
 8001b7c:	9300      	str	r3, [sp, #0]
 8001b7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ba8 <LCD_updateVals+0xc0>)
 8001b80:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8001b84:	2182      	movs	r1, #130	; 0x82
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7ff fc7a 	bl	8001480 <LCD_drawString>
}
 8001b8c:	bf00      	nop
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001b96:	b004      	add	sp, #16
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	08009aa8 	.word	0x08009aa8
 8001ba0:	20000274 	.word	0x20000274
 8001ba4:	20000260 	.word	0x20000260
 8001ba8:	20000288 	.word	0x20000288

08001bac <LCD_warnings>:

void LCD_warnings(SPI_HandleTypeDef* spi, int temp, int level, int *warning, int *tempWarn, int *voltWarn) {
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b088      	sub	sp, #32
 8001bb0:	af04      	add	r7, sp, #16
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
 8001bb8:	603b      	str	r3, [r7, #0]
	if ((temp >= 24 | level <= 30) & *warning == 0) {
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	2b17      	cmp	r3, #23
 8001bbe:	bfcc      	ite	gt
 8001bc0:	2301      	movgt	r3, #1
 8001bc2:	2300      	movle	r3, #0
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2b1e      	cmp	r3, #30
 8001bca:	bfd4      	ite	le
 8001bcc:	2301      	movle	r3, #1
 8001bce:	2300      	movgt	r3, #0
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	bf0c      	ite	eq
 8001be0:	2301      	moveq	r3, #1
 8001be2:	2300      	movne	r3, #0
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	4013      	ands	r3, r2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d00f      	beq.n	8001c0c <LCD_warnings+0x60>
		LCD_drawString(spi,20,30 + 80*0,"TADAMHESPEV | UMSM",18,HX8357_WHITE,3);
 8001bec:	2303      	movs	r3, #3
 8001bee:	9302      	str	r3, [sp, #8]
 8001bf0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bf4:	9301      	str	r3, [sp, #4]
 8001bf6:	2312      	movs	r3, #18
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	4b5d      	ldr	r3, [pc, #372]	; (8001d70 <LCD_warnings+0x1c4>)
 8001bfc:	221e      	movs	r2, #30
 8001bfe:	2114      	movs	r1, #20
 8001c00:	68f8      	ldr	r0, [r7, #12]
 8001c02:	f7ff fc3d 	bl	8001480 <LCD_drawString>
		*warning = 1;
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	601a      	str	r2, [r3, #0]
	}
	if (temp >= 24 & *tempWarn == 0) {
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	2b17      	cmp	r3, #23
 8001c10:	bfcc      	ite	gt
 8001c12:	2301      	movgt	r3, #1
 8001c14:	2300      	movle	r3, #0
 8001c16:	b2da      	uxtb	r2, r3
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	bf0c      	ite	eq
 8001c20:	2301      	moveq	r3, #1
 8001c22:	2300      	movne	r3, #0
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	4013      	ands	r3, r2
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d00f      	beq.n	8001c4e <LCD_warnings+0xa2>
		//LCD_fillTriangle(spi,15,55,45,55,30,25,HX8357_GREEN);
		LCD_drawString(spi,55,30 + 80*0,"HIGH TEMP",9,HX8357_RED,2);
 8001c2e:	2302      	movs	r3, #2
 8001c30:	9302      	str	r3, [sp, #8]
 8001c32:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001c36:	9301      	str	r3, [sp, #4]
 8001c38:	2309      	movs	r3, #9
 8001c3a:	9300      	str	r3, [sp, #0]
 8001c3c:	4b4d      	ldr	r3, [pc, #308]	; (8001d74 <LCD_warnings+0x1c8>)
 8001c3e:	221e      	movs	r2, #30
 8001c40:	2137      	movs	r1, #55	; 0x37
 8001c42:	68f8      	ldr	r0, [r7, #12]
 8001c44:	f7ff fc1c 	bl	8001480 <LCD_drawString>
		*tempWarn = 1;
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	601a      	str	r2, [r3, #0]
	}
	if (level <= 30 & *voltWarn == 0) {
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b1e      	cmp	r3, #30
 8001c52:	bfd4      	ite	le
 8001c54:	2301      	movle	r3, #1
 8001c56:	2300      	movgt	r3, #0
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	bf0c      	ite	eq
 8001c62:	2301      	moveq	r3, #1
 8001c64:	2300      	movne	r3, #0
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	4013      	ands	r3, r2
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d00f      	beq.n	8001c90 <LCD_warnings+0xe4>
		//LCD_fillTriangle(spi,180,55,210,55,195,25,HX8357_GREEN);
		LCD_drawString(spi,220,30 + 80*0,"LOW VOLT",8,HX8357_RED,2);
 8001c70:	2302      	movs	r3, #2
 8001c72:	9302      	str	r3, [sp, #8]
 8001c74:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001c78:	9301      	str	r3, [sp, #4]
 8001c7a:	2308      	movs	r3, #8
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	4b3e      	ldr	r3, [pc, #248]	; (8001d78 <LCD_warnings+0x1cc>)
 8001c80:	221e      	movs	r2, #30
 8001c82:	21dc      	movs	r1, #220	; 0xdc
 8001c84:	68f8      	ldr	r0, [r7, #12]
 8001c86:	f7ff fbfb 	bl	8001480 <LCD_drawString>
		*voltWarn = 1;
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	601a      	str	r2, [r3, #0]
	}
	if (temp < 24 & *tempWarn == 1) {
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	2b17      	cmp	r3, #23
 8001c94:	bfd4      	ite	le
 8001c96:	2301      	movle	r3, #1
 8001c98:	2300      	movgt	r3, #0
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	bf0c      	ite	eq
 8001ca4:	2301      	moveq	r3, #1
 8001ca6:	2300      	movne	r3, #0
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	4013      	ands	r3, r2
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d00f      	beq.n	8001cd2 <LCD_warnings+0x126>
		LCD_drawString(spi,55,30 + 80*0,"HIGH TEMP",9,HX8357_WHITE,2);
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	9302      	str	r3, [sp, #8]
 8001cb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cba:	9301      	str	r3, [sp, #4]
 8001cbc:	2309      	movs	r3, #9
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	4b2c      	ldr	r3, [pc, #176]	; (8001d74 <LCD_warnings+0x1c8>)
 8001cc2:	221e      	movs	r2, #30
 8001cc4:	2137      	movs	r1, #55	; 0x37
 8001cc6:	68f8      	ldr	r0, [r7, #12]
 8001cc8:	f7ff fbda 	bl	8001480 <LCD_drawString>
		*tempWarn = 0;
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
	}
	if (level > 24 & *voltWarn == 1) {
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2b18      	cmp	r3, #24
 8001cd6:	bfcc      	ite	gt
 8001cd8:	2301      	movgt	r3, #1
 8001cda:	2300      	movle	r3, #0
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	bf0c      	ite	eq
 8001ce6:	2301      	moveq	r3, #1
 8001ce8:	2300      	movne	r3, #0
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	4013      	ands	r3, r2
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d00f      	beq.n	8001d14 <LCD_warnings+0x168>
		LCD_drawString(spi,220,30 + 80*0,"LOW VOLT",8,HX8357_WHITE,2);
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	9302      	str	r3, [sp, #8]
 8001cf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cfc:	9301      	str	r3, [sp, #4]
 8001cfe:	2308      	movs	r3, #8
 8001d00:	9300      	str	r3, [sp, #0]
 8001d02:	4b1d      	ldr	r3, [pc, #116]	; (8001d78 <LCD_warnings+0x1cc>)
 8001d04:	221e      	movs	r2, #30
 8001d06:	21dc      	movs	r1, #220	; 0xdc
 8001d08:	68f8      	ldr	r0, [r7, #12]
 8001d0a:	f7ff fbb9 	bl	8001480 <LCD_drawString>
		*voltWarn = 0;
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
	}
	if (*warning == 1 & *voltWarn == 0 & *tempWarn == 0) {
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	bf0c      	ite	eq
 8001d1c:	2301      	moveq	r3, #1
 8001d1e:	2300      	movne	r3, #0
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	bf0c      	ite	eq
 8001d2a:	2301      	moveq	r3, #1
 8001d2c:	2300      	movne	r3, #0
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	4013      	ands	r3, r2
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	461a      	mov	r2, r3
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	bf0c      	ite	eq
 8001d3e:	2301      	moveq	r3, #1
 8001d40:	2300      	movne	r3, #0
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	4013      	ands	r3, r2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d00e      	beq.n	8001d68 <LCD_warnings+0x1bc>
//		LCD_writePixels(spi,HX8357_WHITE,0,0,359,79);
		LCD_drawString(spi,20,30 + 80*0,"TADAMHESPEV | UMSM",18,HX8357_BLACK,3);
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	9302      	str	r3, [sp, #8]
 8001d4e:	2300      	movs	r3, #0
 8001d50:	9301      	str	r3, [sp, #4]
 8001d52:	2312      	movs	r3, #18
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <LCD_warnings+0x1c4>)
 8001d58:	221e      	movs	r2, #30
 8001d5a:	2114      	movs	r1, #20
 8001d5c:	68f8      	ldr	r0, [r7, #12]
 8001d5e:	f7ff fb8f 	bl	8001480 <LCD_drawString>
		*warning = 0;
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
	}
}
 8001d68:	bf00      	nop
 8001d6a:	3710      	adds	r7, #16
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	08009aac 	.word	0x08009aac
 8001d74:	08009ac0 	.word	0x08009ac0
 8001d78:	08009acc 	.word	0x08009acc

08001d7c <LCD_updateBattery>:

void LCD_updateBattery(SPI_HandleTypeDef* spi, int level) {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b088      	sub	sp, #32
 8001d80:	af04      	add	r7, sp, #16
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
	if (level < 0) level = 0;
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	da01      	bge.n	8001d90 <LCD_updateBattery+0x14>
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	603b      	str	r3, [r7, #0]
	if (level > 100) level = 100;
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	2b64      	cmp	r3, #100	; 0x64
 8001d94:	dd01      	ble.n	8001d9a <LCD_updateBattery+0x1e>
 8001d96:	2364      	movs	r3, #100	; 0x64
 8001d98:	603b      	str	r3, [r7, #0]
	char lev[3];
	itoa(level,lev,10);
 8001d9a:	f107 030c 	add.w	r3, r7, #12
 8001d9e:	220a      	movs	r2, #10
 8001da0:	4619      	mov	r1, r3
 8001da2:	6838      	ldr	r0, [r7, #0]
 8001da4:	f004 ffac 	bl	8006d00 <itoa>

	LCD_fillBattery(spi,380,120,8,level);
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	2308      	movs	r3, #8
 8001dae:	2278      	movs	r2, #120	; 0x78
 8001db0:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f7ff fd7f 	bl	80018b8 <LCD_fillBattery>
	LCD_drawString(spi,370,50,lev,3,HX8357_BLACK,4);
 8001dba:	f107 030c 	add.w	r3, r7, #12
 8001dbe:	2204      	movs	r2, #4
 8001dc0:	9202      	str	r2, [sp, #8]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	9201      	str	r2, [sp, #4]
 8001dc6:	2203      	movs	r2, #3
 8001dc8:	9200      	str	r2, [sp, #0]
 8001dca:	2232      	movs	r2, #50	; 0x32
 8001dcc:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f7ff fb55 	bl	8001480 <LCD_drawString>
}
 8001dd6:	bf00      	nop
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
	...

08001de0 <LCD_TADAMHASPEV>:

void LCD_TADAMHASPEV(SPI_HandleTypeDef* spi) {
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b08e      	sub	sp, #56	; 0x38
 8001de4:	af04      	add	r7, sp, #16
 8001de6:	6078      	str	r0, [r7, #4]
	HAL_Delay(250);
 8001de8:	20fa      	movs	r0, #250	; 0xfa
 8001dea:	f000 fec3 	bl	8002b74 <HAL_Delay>
	LCD_begin(spi);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7ff f8c8 	bl	8000f84 <LCD_begin>
	HAL_Delay(250);
 8001df4:	20fa      	movs	r0, #250	; 0xfa
 8001df6:	f000 febd 	bl	8002b74 <HAL_Delay>
	LCD_writePixels(spi,HX8357_WHITE,0,0,480,320);
 8001dfa:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001dfe:	9301      	str	r3, [sp, #4]
 8001e00:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	2300      	movs	r3, #0
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff fa22 	bl	8001258 <LCD_writePixels>
	LCD_drawBattery(spi,380,120,8);
 8001e14:	2308      	movs	r3, #8
 8001e16:	2278      	movs	r2, #120	; 0x78
 8001e18:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f7ff fbf8 	bl	8001612 <LCD_drawBattery>
    LCD_drawFrame(spi);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7ff fd11 	bl	800184a <LCD_drawFrame>


    char * name = "TADAMHESPEV | UMSM";
 8001e28:	4b3b      	ldr	r3, [pc, #236]	; (8001f18 <LCD_TADAMHASPEV+0x138>)
 8001e2a:	627b      	str	r3, [r7, #36]	; 0x24
    char * speed = "SPEED:";
 8001e2c:	4b3b      	ldr	r3, [pc, #236]	; (8001f1c <LCD_TADAMHASPEV+0x13c>)
 8001e2e:	623b      	str	r3, [r7, #32]
    char * temp = "TEMP:";
 8001e30:	4b3b      	ldr	r3, [pc, #236]	; (8001f20 <LCD_TADAMHASPEV+0x140>)
 8001e32:	61fb      	str	r3, [r7, #28]
    char * power = "POWER:";
 8001e34:	4b3b      	ldr	r3, [pc, #236]	; (8001f24 <LCD_TADAMHASPEV+0x144>)
 8001e36:	61bb      	str	r3, [r7, #24]
    char * mph = "mph";
 8001e38:	4b3b      	ldr	r3, [pc, #236]	; (8001f28 <LCD_TADAMHASPEV+0x148>)
 8001e3a:	617b      	str	r3, [r7, #20]
    char * deg = "C";
 8001e3c:	4b3b      	ldr	r3, [pc, #236]	; (8001f2c <LCD_TADAMHASPEV+0x14c>)
 8001e3e:	613b      	str	r3, [r7, #16]
    char * watt = "W";
 8001e40:	4b3b      	ldr	r3, [pc, #236]	; (8001f30 <LCD_TADAMHASPEV+0x150>)
 8001e42:	60fb      	str	r3, [r7, #12]

    LCD_drawString(spi,20,30 + 80*0,name,18,HX8357_BLACK,3);
 8001e44:	2303      	movs	r3, #3
 8001e46:	9302      	str	r3, [sp, #8]
 8001e48:	2300      	movs	r3, #0
 8001e4a:	9301      	str	r3, [sp, #4]
 8001e4c:	2312      	movs	r3, #18
 8001e4e:	9300      	str	r3, [sp, #0]
 8001e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e52:	221e      	movs	r2, #30
 8001e54:	2114      	movs	r1, #20
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7ff fb12 	bl	8001480 <LCD_drawString>
    LCD_drawString(spi,5,30 + 80*1,speed,6,HX8357_BLACK,3);
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	9302      	str	r3, [sp, #8]
 8001e60:	2300      	movs	r3, #0
 8001e62:	9301      	str	r3, [sp, #4]
 8001e64:	2306      	movs	r3, #6
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	6a3b      	ldr	r3, [r7, #32]
 8001e6a:	226e      	movs	r2, #110	; 0x6e
 8001e6c:	2105      	movs	r1, #5
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7ff fb06 	bl	8001480 <LCD_drawString>
    LCD_drawString(spi,5,30 + 80*2,temp,5,HX8357_BLACK,3);
 8001e74:	2303      	movs	r3, #3
 8001e76:	9302      	str	r3, [sp, #8]
 8001e78:	2300      	movs	r3, #0
 8001e7a:	9301      	str	r3, [sp, #4]
 8001e7c:	2305      	movs	r3, #5
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	22be      	movs	r2, #190	; 0xbe
 8001e84:	2105      	movs	r1, #5
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f7ff fafa 	bl	8001480 <LCD_drawString>
    LCD_drawString(spi,5,30 + 80*3,power,6,HX8357_BLACK,3);
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	9302      	str	r3, [sp, #8]
 8001e90:	2300      	movs	r3, #0
 8001e92:	9301      	str	r3, [sp, #4]
 8001e94:	2306      	movs	r3, #6
 8001e96:	9300      	str	r3, [sp, #0]
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8001e9e:	2105      	movs	r1, #5
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f7ff faed 	bl	8001480 <LCD_drawString>

    LCD_drawString(spi,280,30 + 80*1,mph,3,HX8357_BLACK,3);
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	9302      	str	r3, [sp, #8]
 8001eaa:	2300      	movs	r3, #0
 8001eac:	9301      	str	r3, [sp, #4]
 8001eae:	2303      	movs	r3, #3
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	226e      	movs	r2, #110	; 0x6e
 8001eb6:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7ff fae0 	bl	8001480 <LCD_drawString>
    LCD_drawString(spi,306,30 + 80*2,deg,1,HX8357_BLACK,3);
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	9302      	str	r3, [sp, #8]
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	9301      	str	r3, [sp, #4]
 8001ec8:	2301      	movs	r3, #1
 8001eca:	9300      	str	r3, [sp, #0]
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	22be      	movs	r2, #190	; 0xbe
 8001ed0:	f44f 7199 	mov.w	r1, #306	; 0x132
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f7ff fad3 	bl	8001480 <LCD_drawString>
    LCD_drawString(spi,306,30 + 80*3,watt,1,HX8357_BLACK,3);
 8001eda:	2303      	movs	r3, #3
 8001edc:	9302      	str	r3, [sp, #8]
 8001ede:	2300      	movs	r3, #0
 8001ee0:	9301      	str	r3, [sp, #4]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	9300      	str	r3, [sp, #0]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8001eec:	f44f 7199 	mov.w	r1, #306	; 0x132
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f7ff fac5 	bl	8001480 <LCD_drawString>
    LCD_drawString(spi,442,50,"%",1,HX8357_BLACK,4);
 8001ef6:	2304      	movs	r3, #4
 8001ef8:	9302      	str	r3, [sp, #8]
 8001efa:	2300      	movs	r3, #0
 8001efc:	9301      	str	r3, [sp, #4]
 8001efe:	2301      	movs	r3, #1
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	4b0c      	ldr	r3, [pc, #48]	; (8001f34 <LCD_TADAMHASPEV+0x154>)
 8001f04:	2232      	movs	r2, #50	; 0x32
 8001f06:	f44f 71dd 	mov.w	r1, #442	; 0x1ba
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7ff fab8 	bl	8001480 <LCD_drawString>
}
 8001f10:	bf00      	nop
 8001f12:	3728      	adds	r7, #40	; 0x28
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	08009aac 	.word	0x08009aac
 8001f1c:	08009ad8 	.word	0x08009ad8
 8001f20:	08009ae0 	.word	0x08009ae0
 8001f24:	08009ae8 	.word	0x08009ae8
 8001f28:	08009af0 	.word	0x08009af0
 8001f2c:	08009af4 	.word	0x08009af4
 8001f30:	08009af8 	.word	0x08009af8
 8001f34:	08009afc 	.word	0x08009afc

08001f38 <TADBufferToStruct>:
	float speed;
	float voltage;
	float current;
};
inline void TADBufferToStruct(float*, struct TelData*);
inline void TADBufferToStruct(float buf[], struct TelData *data){
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
	//buf[0] accel, buf[1] temp, buf[2] speed, buf[3] voltage, buf[4] current
	data->accel = buf[0];
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	601a      	str	r2, [r3, #0]
	data->temp = buf[1];
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685a      	ldr	r2, [r3, #4]
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	605a      	str	r2, [r3, #4]
	data->speed = buf[2];
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	689a      	ldr	r2, [r3, #8]
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	609a      	str	r2, [r3, #8]
	data->voltage = buf[3];
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68da      	ldr	r2, [r3, #12]
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	60da      	str	r2, [r3, #12]
	data->current = buf[4];
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	691a      	ldr	r2, [r3, #16]
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	611a      	str	r2, [r3, #16]
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
	...

08001f78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f78:	b590      	push	{r4, r7, lr}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f7e:	f000 fdc0 	bl	8002b02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f82:	f000 f889 	bl	8002098 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f86:	f000 f9bd 	bl	8002304 <MX_GPIO_Init>
  MX_RTC_Init();
 8001f8a:	f000 f8e7 	bl	800215c <MX_RTC_Init>
  MX_SPI1_Init();
 8001f8e:	f000 f90d 	bl	80021ac <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001f92:	f000 f987 	bl	80022a4 <MX_USART1_UART_Init>
  MX_SPI3_Init();
 8001f96:	f000 f947 	bl	8002228 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
//  	HAL_Delay(250);
	LCD_TADAMHASPEV(&hspi1);
 8001f9a:	4834      	ldr	r0, [pc, #208]	; (800206c <main+0xf4>)
 8001f9c:	f7ff ff20 	bl	8001de0 <LCD_TADAMHASPEV>
	int tempWarn = 0;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	607b      	str	r3, [r7, #4]
	int voltWarn = 0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	603b      	str	r3, [r7, #0]
//	HAL_Delay(3500);
	spiRecieveCode = HAL_UART_Receive_IT(&huart1, (uint8_t*) &buf, sizeof(buf));
 8001fa8:	2214      	movs	r2, #20
 8001faa:	4931      	ldr	r1, [pc, #196]	; (8002070 <main+0xf8>)
 8001fac:	4831      	ldr	r0, [pc, #196]	; (8002074 <main+0xfc>)
 8001fae:	f003 fc2b 	bl	8005808 <HAL_UART_Receive_IT>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4b30      	ldr	r3, [pc, #192]	; (8002078 <main+0x100>)
 8001fb8:	701a      	strb	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		//buf[0] accel, buf[1] temp, buf[2] speed, buf[3] voltage, buf[4] current
//		int delay = 0;
		if (huart1.ErrorCode == 8) {
 8001fba:	4b2e      	ldr	r3, [pc, #184]	; (8002074 <main+0xfc>)
 8001fbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fc0:	2b08      	cmp	r3, #8
 8001fc2:	d107      	bne.n	8001fd4 <main+0x5c>
			HAL_UART_Receive_IT(&huart1, (uint8_t*) &buf,
 8001fc4:	2214      	movs	r2, #20
 8001fc6:	492a      	ldr	r1, [pc, #168]	; (8002070 <main+0xf8>)
 8001fc8:	482a      	ldr	r0, [pc, #168]	; (8002074 <main+0xfc>)
 8001fca:	f003 fc1d 	bl	8005808 <HAL_UART_Receive_IT>
								sizeof(buf));
			ignoreData = 1;
 8001fce:	4b2b      	ldr	r3, [pc, #172]	; (800207c <main+0x104>)
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]

		}
		if (refresh == 1) {
 8001fd4:	4b2a      	ldr	r3, [pc, #168]	; (8002080 <main+0x108>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d1ee      	bne.n	8001fba <main+0x42>
			LCD_updateVals(&hspi1, data);
 8001fdc:	4b29      	ldr	r3, [pc, #164]	; (8002084 <main+0x10c>)
 8001fde:	466c      	mov	r4, sp
 8001fe0:	f103 020c 	add.w	r2, r3, #12
 8001fe4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001fe8:	e884 0003 	stmia.w	r4, {r0, r1}
 8001fec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fee:	481f      	ldr	r0, [pc, #124]	; (800206c <main+0xf4>)
 8001ff0:	f7ff fd7a 	bl	8001ae8 <LCD_updateVals>
			LCD_warnings(&hspi1, data.temp, volt_percent, &warning, &tempWarn, &voltWarn);
 8001ff4:	4b23      	ldr	r3, [pc, #140]	; (8002084 <main+0x10c>)
 8001ff6:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ffa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ffe:	4b22      	ldr	r3, [pc, #136]	; (8002088 <main+0x110>)
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	463b      	mov	r3, r7
 8002004:	9301      	str	r3, [sp, #4]
 8002006:	1d3b      	adds	r3, r7, #4
 8002008:	9300      	str	r3, [sp, #0]
 800200a:	4b20      	ldr	r3, [pc, #128]	; (800208c <main+0x114>)
 800200c:	ee17 1a90 	vmov	r1, s15
 8002010:	4816      	ldr	r0, [pc, #88]	; (800206c <main+0xf4>)
 8002012:	f7ff fdcb 	bl	8001bac <LCD_warnings>
			refresh = 0;
 8002016:	4b1a      	ldr	r3, [pc, #104]	; (8002080 <main+0x108>)
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]

			if (batRefresh == 1) {
 800201c:	4b1c      	ldr	r3, [pc, #112]	; (8002090 <main+0x118>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d119      	bne.n	8002058 <main+0xe0>
				volt_percent = (int) (data.voltage * 10 - 440);
 8002024:	4b17      	ldr	r3, [pc, #92]	; (8002084 <main+0x10c>)
 8002026:	edd3 7a03 	vldr	s15, [r3, #12]
 800202a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800202e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002032:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002094 <main+0x11c>
 8002036:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800203a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800203e:	ee17 2a90 	vmov	r2, s15
 8002042:	4b11      	ldr	r3, [pc, #68]	; (8002088 <main+0x110>)
 8002044:	601a      	str	r2, [r3, #0]
				LCD_updateBattery(&hspi1, volt_percent);
 8002046:	4b10      	ldr	r3, [pc, #64]	; (8002088 <main+0x110>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4619      	mov	r1, r3
 800204c:	4807      	ldr	r0, [pc, #28]	; (800206c <main+0xf4>)
 800204e:	f7ff fe95 	bl	8001d7c <LCD_updateBattery>
//				LCD_warnings(&hspi1, data.temp, volt_percent, &warning, &tempWarn, &voltWarn);
				batRefresh = 0;
 8002052:	4b0f      	ldr	r3, [pc, #60]	; (8002090 <main+0x118>)
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
			}
//			if(delay ==1) {
//				HAL_Delay(500);
//				delay = 0;
//			}
			spiRecieveCode = HAL_UART_Receive_IT(&huart1, (uint8_t*) &buf,
 8002058:	2214      	movs	r2, #20
 800205a:	4905      	ldr	r1, [pc, #20]	; (8002070 <main+0xf8>)
 800205c:	4805      	ldr	r0, [pc, #20]	; (8002074 <main+0xfc>)
 800205e:	f003 fbd3 	bl	8005808 <HAL_UART_Receive_IT>
 8002062:	4603      	mov	r3, r0
 8002064:	461a      	mov	r2, r3
 8002066:	4b04      	ldr	r3, [pc, #16]	; (8002078 <main+0x100>)
 8002068:	701a      	strb	r2, [r3, #0]
		if (huart1.ErrorCode == 8) {
 800206a:	e7a6      	b.n	8001fba <main+0x42>
 800206c:	200002c0 	.word	0x200002c0
 8002070:	20000410 	.word	0x20000410
 8002074:	20000388 	.word	0x20000388
 8002078:	20000434 	.word	0x20000434
 800207c:	2000044c 	.word	0x2000044c
 8002080:	2000042c 	.word	0x2000042c
 8002084:	20000438 	.word	0x20000438
 8002088:	20000428 	.word	0x20000428
 800208c:	20000424 	.word	0x20000424
 8002090:	20000068 	.word	0x20000068
 8002094:	43dc0000 	.word	0x43dc0000

08002098 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b096      	sub	sp, #88	; 0x58
 800209c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800209e:	f107 0314 	add.w	r3, r7, #20
 80020a2:	2244      	movs	r2, #68	; 0x44
 80020a4:	2100      	movs	r1, #0
 80020a6:	4618      	mov	r0, r3
 80020a8:	f005 fbf9 	bl	800789e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020ac:	463b      	mov	r3, r7
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	605a      	str	r2, [r3, #4]
 80020b4:	609a      	str	r2, [r3, #8]
 80020b6:	60da      	str	r2, [r3, #12]
 80020b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80020ba:	f44f 7000 	mov.w	r0, #512	; 0x200
 80020be:	f001 f87f 	bl	80031c0 <HAL_PWREx_ControlVoltageScaling>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80020c8:	f000 fa33 	bl	8002532 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80020cc:	f001 f85a 	bl	8003184 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80020d0:	4b21      	ldr	r3, [pc, #132]	; (8002158 <SystemClock_Config+0xc0>)
 80020d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d6:	4a20      	ldr	r2, [pc, #128]	; (8002158 <SystemClock_Config+0xc0>)
 80020d8:	f023 0318 	bic.w	r3, r3, #24
 80020dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80020e0:	2314      	movs	r3, #20
 80020e2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80020e4:	2301      	movs	r3, #1
 80020e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80020e8:	2301      	movs	r3, #1
 80020ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80020ec:	2300      	movs	r3, #0
 80020ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80020f0:	2360      	movs	r3, #96	; 0x60
 80020f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020f4:	2302      	movs	r3, #2
 80020f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80020f8:	2301      	movs	r3, #1
 80020fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80020fc:	2301      	movs	r3, #1
 80020fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002100:	2328      	movs	r3, #40	; 0x28
 8002102:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002104:	2307      	movs	r3, #7
 8002106:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002108:	2302      	movs	r3, #2
 800210a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800210c:	2302      	movs	r3, #2
 800210e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002110:	f107 0314 	add.w	r3, r7, #20
 8002114:	4618      	mov	r0, r3
 8002116:	f001 f8a9 	bl	800326c <HAL_RCC_OscConfig>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002120:	f000 fa07 	bl	8002532 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002124:	230f      	movs	r3, #15
 8002126:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002128:	2303      	movs	r3, #3
 800212a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800212c:	2300      	movs	r3, #0
 800212e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002130:	2300      	movs	r3, #0
 8002132:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002134:	2300      	movs	r3, #0
 8002136:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002138:	463b      	mov	r3, r7
 800213a:	2104      	movs	r1, #4
 800213c:	4618      	mov	r0, r3
 800213e:	f001 fca9 	bl	8003a94 <HAL_RCC_ClockConfig>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002148:	f000 f9f3 	bl	8002532 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800214c:	f002 f8ee 	bl	800432c <HAL_RCCEx_EnableMSIPLLMode>
}
 8002150:	bf00      	nop
 8002152:	3758      	adds	r7, #88	; 0x58
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40021000 	.word	0x40021000

0800215c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002160:	4b10      	ldr	r3, [pc, #64]	; (80021a4 <MX_RTC_Init+0x48>)
 8002162:	4a11      	ldr	r2, [pc, #68]	; (80021a8 <MX_RTC_Init+0x4c>)
 8002164:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002166:	4b0f      	ldr	r3, [pc, #60]	; (80021a4 <MX_RTC_Init+0x48>)
 8002168:	2200      	movs	r2, #0
 800216a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800216c:	4b0d      	ldr	r3, [pc, #52]	; (80021a4 <MX_RTC_Init+0x48>)
 800216e:	227f      	movs	r2, #127	; 0x7f
 8002170:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002172:	4b0c      	ldr	r3, [pc, #48]	; (80021a4 <MX_RTC_Init+0x48>)
 8002174:	22ff      	movs	r2, #255	; 0xff
 8002176:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002178:	4b0a      	ldr	r3, [pc, #40]	; (80021a4 <MX_RTC_Init+0x48>)
 800217a:	2200      	movs	r2, #0
 800217c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800217e:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <MX_RTC_Init+0x48>)
 8002180:	2200      	movs	r2, #0
 8002182:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002184:	4b07      	ldr	r3, [pc, #28]	; (80021a4 <MX_RTC_Init+0x48>)
 8002186:	2200      	movs	r2, #0
 8002188:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800218a:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <MX_RTC_Init+0x48>)
 800218c:	2200      	movs	r2, #0
 800218e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002190:	4804      	ldr	r0, [pc, #16]	; (80021a4 <MX_RTC_Init+0x48>)
 8002192:	f002 f9cd 	bl	8004530 <HAL_RTC_Init>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 800219c:	f000 f9c9 	bl	8002532 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80021a0:	bf00      	nop
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	2000029c 	.word	0x2000029c
 80021a8:	40002800 	.word	0x40002800

080021ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80021b0:	4b1b      	ldr	r3, [pc, #108]	; (8002220 <MX_SPI1_Init+0x74>)
 80021b2:	4a1c      	ldr	r2, [pc, #112]	; (8002224 <MX_SPI1_Init+0x78>)
 80021b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80021b6:	4b1a      	ldr	r3, [pc, #104]	; (8002220 <MX_SPI1_Init+0x74>)
 80021b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80021be:	4b18      	ldr	r3, [pc, #96]	; (8002220 <MX_SPI1_Init+0x74>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80021c4:	4b16      	ldr	r3, [pc, #88]	; (8002220 <MX_SPI1_Init+0x74>)
 80021c6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80021ca:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021cc:	4b14      	ldr	r3, [pc, #80]	; (8002220 <MX_SPI1_Init+0x74>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021d2:	4b13      	ldr	r3, [pc, #76]	; (8002220 <MX_SPI1_Init+0x74>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80021d8:	4b11      	ldr	r3, [pc, #68]	; (8002220 <MX_SPI1_Init+0x74>)
 80021da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021de:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80021e0:	4b0f      	ldr	r3, [pc, #60]	; (8002220 <MX_SPI1_Init+0x74>)
 80021e2:	2208      	movs	r2, #8
 80021e4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021e6:	4b0e      	ldr	r3, [pc, #56]	; (8002220 <MX_SPI1_Init+0x74>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80021ec:	4b0c      	ldr	r3, [pc, #48]	; (8002220 <MX_SPI1_Init+0x74>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021f2:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <MX_SPI1_Init+0x74>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80021f8:	4b09      	ldr	r3, [pc, #36]	; (8002220 <MX_SPI1_Init+0x74>)
 80021fa:	2207      	movs	r2, #7
 80021fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80021fe:	4b08      	ldr	r3, [pc, #32]	; (8002220 <MX_SPI1_Init+0x74>)
 8002200:	2200      	movs	r2, #0
 8002202:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002204:	4b06      	ldr	r3, [pc, #24]	; (8002220 <MX_SPI1_Init+0x74>)
 8002206:	2208      	movs	r2, #8
 8002208:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800220a:	4805      	ldr	r0, [pc, #20]	; (8002220 <MX_SPI1_Init+0x74>)
 800220c:	f002 faae 	bl	800476c <HAL_SPI_Init>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002216:	f000 f98c 	bl	8002532 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	200002c0 	.word	0x200002c0
 8002224:	40013000 	.word	0x40013000

08002228 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800222c:	4b1b      	ldr	r3, [pc, #108]	; (800229c <MX_SPI3_Init+0x74>)
 800222e:	4a1c      	ldr	r2, [pc, #112]	; (80022a0 <MX_SPI3_Init+0x78>)
 8002230:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002232:	4b1a      	ldr	r3, [pc, #104]	; (800229c <MX_SPI3_Init+0x74>)
 8002234:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002238:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800223a:	4b18      	ldr	r3, [pc, #96]	; (800229c <MX_SPI3_Init+0x74>)
 800223c:	2200      	movs	r2, #0
 800223e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002240:	4b16      	ldr	r3, [pc, #88]	; (800229c <MX_SPI3_Init+0x74>)
 8002242:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002246:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002248:	4b14      	ldr	r3, [pc, #80]	; (800229c <MX_SPI3_Init+0x74>)
 800224a:	2200      	movs	r2, #0
 800224c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800224e:	4b13      	ldr	r3, [pc, #76]	; (800229c <MX_SPI3_Init+0x74>)
 8002250:	2200      	movs	r2, #0
 8002252:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002254:	4b11      	ldr	r3, [pc, #68]	; (800229c <MX_SPI3_Init+0x74>)
 8002256:	f44f 7200 	mov.w	r2, #512	; 0x200
 800225a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800225c:	4b0f      	ldr	r3, [pc, #60]	; (800229c <MX_SPI3_Init+0x74>)
 800225e:	2208      	movs	r2, #8
 8002260:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002262:	4b0e      	ldr	r3, [pc, #56]	; (800229c <MX_SPI3_Init+0x74>)
 8002264:	2200      	movs	r2, #0
 8002266:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002268:	4b0c      	ldr	r3, [pc, #48]	; (800229c <MX_SPI3_Init+0x74>)
 800226a:	2200      	movs	r2, #0
 800226c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800226e:	4b0b      	ldr	r3, [pc, #44]	; (800229c <MX_SPI3_Init+0x74>)
 8002270:	2200      	movs	r2, #0
 8002272:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002274:	4b09      	ldr	r3, [pc, #36]	; (800229c <MX_SPI3_Init+0x74>)
 8002276:	2207      	movs	r2, #7
 8002278:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800227a:	4b08      	ldr	r3, [pc, #32]	; (800229c <MX_SPI3_Init+0x74>)
 800227c:	2200      	movs	r2, #0
 800227e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002280:	4b06      	ldr	r3, [pc, #24]	; (800229c <MX_SPI3_Init+0x74>)
 8002282:	2208      	movs	r2, #8
 8002284:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002286:	4805      	ldr	r0, [pc, #20]	; (800229c <MX_SPI3_Init+0x74>)
 8002288:	f002 fa70 	bl	800476c <HAL_SPI_Init>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8002292:	f000 f94e 	bl	8002532 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	20000324 	.word	0x20000324
 80022a0:	40003c00 	.word	0x40003c00

080022a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022a8:	4b14      	ldr	r3, [pc, #80]	; (80022fc <MX_USART1_UART_Init+0x58>)
 80022aa:	4a15      	ldr	r2, [pc, #84]	; (8002300 <MX_USART1_UART_Init+0x5c>)
 80022ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80022ae:	4b13      	ldr	r3, [pc, #76]	; (80022fc <MX_USART1_UART_Init+0x58>)
 80022b0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80022b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022b6:	4b11      	ldr	r3, [pc, #68]	; (80022fc <MX_USART1_UART_Init+0x58>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022bc:	4b0f      	ldr	r3, [pc, #60]	; (80022fc <MX_USART1_UART_Init+0x58>)
 80022be:	2200      	movs	r2, #0
 80022c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022c2:	4b0e      	ldr	r3, [pc, #56]	; (80022fc <MX_USART1_UART_Init+0x58>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022c8:	4b0c      	ldr	r3, [pc, #48]	; (80022fc <MX_USART1_UART_Init+0x58>)
 80022ca:	220c      	movs	r2, #12
 80022cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ce:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <MX_USART1_UART_Init+0x58>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022d4:	4b09      	ldr	r3, [pc, #36]	; (80022fc <MX_USART1_UART_Init+0x58>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022da:	4b08      	ldr	r3, [pc, #32]	; (80022fc <MX_USART1_UART_Init+0x58>)
 80022dc:	2200      	movs	r2, #0
 80022de:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022e0:	4b06      	ldr	r3, [pc, #24]	; (80022fc <MX_USART1_UART_Init+0x58>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022e6:	4805      	ldr	r0, [pc, #20]	; (80022fc <MX_USART1_UART_Init+0x58>)
 80022e8:	f003 fa40 	bl	800576c <HAL_UART_Init>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80022f2:	f000 f91e 	bl	8002532 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	20000388 	.word	0x20000388
 8002300:	40013800 	.word	0x40013800

08002304 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b088      	sub	sp, #32
 8002308:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800230a:	f107 030c 	add.w	r3, r7, #12
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	605a      	str	r2, [r3, #4]
 8002314:	609a      	str	r2, [r3, #8]
 8002316:	60da      	str	r2, [r3, #12]
 8002318:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800231a:	4b39      	ldr	r3, [pc, #228]	; (8002400 <MX_GPIO_Init+0xfc>)
 800231c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800231e:	4a38      	ldr	r2, [pc, #224]	; (8002400 <MX_GPIO_Init+0xfc>)
 8002320:	f043 0304 	orr.w	r3, r3, #4
 8002324:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002326:	4b36      	ldr	r3, [pc, #216]	; (8002400 <MX_GPIO_Init+0xfc>)
 8002328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232a:	f003 0304 	and.w	r3, r3, #4
 800232e:	60bb      	str	r3, [r7, #8]
 8002330:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002332:	4b33      	ldr	r3, [pc, #204]	; (8002400 <MX_GPIO_Init+0xfc>)
 8002334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002336:	4a32      	ldr	r2, [pc, #200]	; (8002400 <MX_GPIO_Init+0xfc>)
 8002338:	f043 0301 	orr.w	r3, r3, #1
 800233c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800233e:	4b30      	ldr	r3, [pc, #192]	; (8002400 <MX_GPIO_Init+0xfc>)
 8002340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	607b      	str	r3, [r7, #4]
 8002348:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800234a:	4b2d      	ldr	r3, [pc, #180]	; (8002400 <MX_GPIO_Init+0xfc>)
 800234c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800234e:	4a2c      	ldr	r2, [pc, #176]	; (8002400 <MX_GPIO_Init+0xfc>)
 8002350:	f043 0302 	orr.w	r3, r3, #2
 8002354:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002356:	4b2a      	ldr	r3, [pc, #168]	; (8002400 <MX_GPIO_Init+0xfc>)
 8002358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	603b      	str	r3, [r7, #0]
 8002360:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_RESET);
 8002362:	2200      	movs	r2, #0
 8002364:	210a      	movs	r1, #10
 8002366:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800236a:	f000 fef3 	bl	8003154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800236e:	2200      	movs	r2, #0
 8002370:	2140      	movs	r1, #64	; 0x40
 8002372:	4824      	ldr	r0, [pc, #144]	; (8002404 <MX_GPIO_Init+0x100>)
 8002374:	f000 feee 	bl	8003154 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8002378:	230a      	movs	r3, #10
 800237a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800237c:	2301      	movs	r3, #1
 800237e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002384:	2303      	movs	r3, #3
 8002386:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002388:	f107 030c 	add.w	r3, r7, #12
 800238c:	4619      	mov	r1, r3
 800238e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002392:	f000 fd75 	bl	8002e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002396:	2304      	movs	r3, #4
 8002398:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239a:	2302      	movs	r3, #2
 800239c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239e:	2300      	movs	r3, #0
 80023a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a2:	2303      	movs	r3, #3
 80023a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023a6:	2307      	movs	r3, #7
 80023a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80023aa:	f107 030c 	add.w	r3, r7, #12
 80023ae:	4619      	mov	r1, r3
 80023b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023b4:	f000 fd64 	bl	8002e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 80023b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023be:	2302      	movs	r3, #2
 80023c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c2:	2300      	movs	r3, #0
 80023c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c6:	2303      	movs	r3, #3
 80023c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80023ca:	2303      	movs	r3, #3
 80023cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80023ce:	f107 030c 	add.w	r3, r7, #12
 80023d2:	4619      	mov	r1, r3
 80023d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023d8:	f000 fd52 	bl	8002e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80023dc:	2340      	movs	r3, #64	; 0x40
 80023de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023e0:	2301      	movs	r3, #1
 80023e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e4:	2300      	movs	r3, #0
 80023e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023e8:	2303      	movs	r3, #3
 80023ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ec:	f107 030c 	add.w	r3, r7, #12
 80023f0:	4619      	mov	r1, r3
 80023f2:	4804      	ldr	r0, [pc, #16]	; (8002404 <MX_GPIO_Init+0x100>)
 80023f4:	f000 fd44 	bl	8002e80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80023f8:	bf00      	nop
 80023fa:	3720      	adds	r7, #32
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40021000 	.word	0x40021000
 8002404:	48000400 	.word	0x48000400

08002408 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
	float* fbuf = buf;
 8002410:	4b37      	ldr	r3, [pc, #220]	; (80024f0 <HAL_UART_RxCpltCallback+0xe8>)
 8002412:	60fb      	str	r3, [r7, #12]
	if ( //check if values changed
	ignoreData == 0 && (fbuf[0] != data.accel || fbuf[1] != data.temp || fbuf[2] != data.speed
 8002414:	4b37      	ldr	r3, [pc, #220]	; (80024f4 <HAL_UART_RxCpltCallback+0xec>)
 8002416:	681b      	ldr	r3, [r3, #0]
	if ( //check if values changed
 8002418:	2b00      	cmp	r3, #0
 800241a:	d154      	bne.n	80024c6 <HAL_UART_RxCpltCallback+0xbe>
	ignoreData == 0 && (fbuf[0] != data.accel || fbuf[1] != data.temp || fbuf[2] != data.speed
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	ed93 7a00 	vldr	s14, [r3]
 8002422:	4b35      	ldr	r3, [pc, #212]	; (80024f8 <HAL_UART_RxCpltCallback+0xf0>)
 8002424:	edd3 7a00 	vldr	s15, [r3]
 8002428:	eeb4 7a67 	vcmp.f32	s14, s15
 800242c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002430:	d12f      	bne.n	8002492 <HAL_UART_RxCpltCallback+0x8a>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	3304      	adds	r3, #4
 8002436:	ed93 7a00 	vldr	s14, [r3]
 800243a:	4b2f      	ldr	r3, [pc, #188]	; (80024f8 <HAL_UART_RxCpltCallback+0xf0>)
 800243c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002440:	eeb4 7a67 	vcmp.f32	s14, s15
 8002444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002448:	d123      	bne.n	8002492 <HAL_UART_RxCpltCallback+0x8a>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	3308      	adds	r3, #8
 800244e:	ed93 7a00 	vldr	s14, [r3]
 8002452:	4b29      	ldr	r3, [pc, #164]	; (80024f8 <HAL_UART_RxCpltCallback+0xf0>)
 8002454:	edd3 7a02 	vldr	s15, [r3, #8]
 8002458:	eeb4 7a67 	vcmp.f32	s14, s15
 800245c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002460:	d117      	bne.n	8002492 <HAL_UART_RxCpltCallback+0x8a>
			|| fbuf[3] != data.voltage || fbuf[4] != data.current)  ) {
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	330c      	adds	r3, #12
 8002466:	ed93 7a00 	vldr	s14, [r3]
 800246a:	4b23      	ldr	r3, [pc, #140]	; (80024f8 <HAL_UART_RxCpltCallback+0xf0>)
 800246c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002470:	eeb4 7a67 	vcmp.f32	s14, s15
 8002474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002478:	d10b      	bne.n	8002492 <HAL_UART_RxCpltCallback+0x8a>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	3310      	adds	r3, #16
 800247e:	ed93 7a00 	vldr	s14, [r3]
 8002482:	4b1d      	ldr	r3, [pc, #116]	; (80024f8 <HAL_UART_RxCpltCallback+0xf0>)
 8002484:	edd3 7a04 	vldr	s15, [r3, #16]
 8002488:	eeb4 7a67 	vcmp.f32	s14, s15
 800248c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002490:	d019      	beq.n	80024c6 <HAL_UART_RxCpltCallback+0xbe>
		if (numRefresh % 20 == 0) batRefresh = 1; //only refresh battery when voltage changes
 8002492:	4b1a      	ldr	r3, [pc, #104]	; (80024fc <HAL_UART_RxCpltCallback+0xf4>)
 8002494:	6819      	ldr	r1, [r3, #0]
 8002496:	4b1a      	ldr	r3, [pc, #104]	; (8002500 <HAL_UART_RxCpltCallback+0xf8>)
 8002498:	fb83 2301 	smull	r2, r3, r3, r1
 800249c:	10da      	asrs	r2, r3, #3
 800249e:	17cb      	asrs	r3, r1, #31
 80024a0:	1ad2      	subs	r2, r2, r3
 80024a2:	4613      	mov	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	1aca      	subs	r2, r1, r3
 80024ac:	2a00      	cmp	r2, #0
 80024ae:	d102      	bne.n	80024b6 <HAL_UART_RxCpltCallback+0xae>
 80024b0:	4b14      	ldr	r3, [pc, #80]	; (8002504 <HAL_UART_RxCpltCallback+0xfc>)
 80024b2:	2201      	movs	r2, #1
 80024b4:	601a      	str	r2, [r3, #0]
		TADBufferToStruct((float*)buf, &data);
 80024b6:	4910      	ldr	r1, [pc, #64]	; (80024f8 <HAL_UART_RxCpltCallback+0xf0>)
 80024b8:	480d      	ldr	r0, [pc, #52]	; (80024f0 <HAL_UART_RxCpltCallback+0xe8>)
 80024ba:	f7ff fd3d 	bl	8001f38 <TADBufferToStruct>
		refresh = 1;
 80024be:	4b12      	ldr	r3, [pc, #72]	; (8002508 <HAL_UART_RxCpltCallback+0x100>)
 80024c0:	2201      	movs	r2, #1
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	e00b      	b.n	80024de <HAL_UART_RxCpltCallback+0xd6>
	}
	else{
		ignoreData = 0;
 80024c6:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <HAL_UART_RxCpltCallback+0xec>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
		spiRecieveCode = HAL_UART_Receive_IT(&huart1, (uint8_t*) &buf, sizeof(buf));
 80024cc:	2214      	movs	r2, #20
 80024ce:	4908      	ldr	r1, [pc, #32]	; (80024f0 <HAL_UART_RxCpltCallback+0xe8>)
 80024d0:	480e      	ldr	r0, [pc, #56]	; (800250c <HAL_UART_RxCpltCallback+0x104>)
 80024d2:	f003 f999 	bl	8005808 <HAL_UART_Receive_IT>
 80024d6:	4603      	mov	r3, r0
 80024d8:	461a      	mov	r2, r3
 80024da:	4b0d      	ldr	r3, [pc, #52]	; (8002510 <HAL_UART_RxCpltCallback+0x108>)
 80024dc:	701a      	strb	r2, [r3, #0]
	}
	//spiRecieveCode = HAL_UART_Receive_IT(&huart1, (uint8_t*) &buf, sizeof(buf));
	numRefresh++;
 80024de:	4b07      	ldr	r3, [pc, #28]	; (80024fc <HAL_UART_RxCpltCallback+0xf4>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	3301      	adds	r3, #1
 80024e4:	4a05      	ldr	r2, [pc, #20]	; (80024fc <HAL_UART_RxCpltCallback+0xf4>)
 80024e6:	6013      	str	r3, [r2, #0]
}
 80024e8:	bf00      	nop
 80024ea:	3710      	adds	r7, #16
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	20000410 	.word	0x20000410
 80024f4:	2000044c 	.word	0x2000044c
 80024f8:	20000438 	.word	0x20000438
 80024fc:	20000430 	.word	0x20000430
 8002500:	66666667 	.word	0x66666667
 8002504:	20000068 	.word	0x20000068
 8002508:	2000042c 	.word	0x2000042c
 800250c:	20000388 	.word	0x20000388
 8002510:	20000434 	.word	0x20000434

08002514 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002524:	d101      	bne.n	800252a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002526:	f000 fb05 	bl	8002b34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002532:	b480      	push	{r7}
 8002534:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002536:	b672      	cpsid	i
}
 8002538:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800253a:	e7fe      	b.n	800253a <Error_Handler+0x8>

0800253c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002542:	4b0f      	ldr	r3, [pc, #60]	; (8002580 <HAL_MspInit+0x44>)
 8002544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002546:	4a0e      	ldr	r2, [pc, #56]	; (8002580 <HAL_MspInit+0x44>)
 8002548:	f043 0301 	orr.w	r3, r3, #1
 800254c:	6613      	str	r3, [r2, #96]	; 0x60
 800254e:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <HAL_MspInit+0x44>)
 8002550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	607b      	str	r3, [r7, #4]
 8002558:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800255a:	4b09      	ldr	r3, [pc, #36]	; (8002580 <HAL_MspInit+0x44>)
 800255c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800255e:	4a08      	ldr	r2, [pc, #32]	; (8002580 <HAL_MspInit+0x44>)
 8002560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002564:	6593      	str	r3, [r2, #88]	; 0x58
 8002566:	4b06      	ldr	r3, [pc, #24]	; (8002580 <HAL_MspInit+0x44>)
 8002568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800256a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256e:	603b      	str	r3, [r7, #0]
 8002570:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8002572:	2004      	movs	r0, #4
 8002574:	f000 fbcf 	bl	8002d16 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002578:	bf00      	nop
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40021000 	.word	0x40021000

08002584 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b098      	sub	sp, #96	; 0x60
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800258c:	f107 030c 	add.w	r3, r7, #12
 8002590:	2254      	movs	r2, #84	; 0x54
 8002592:	2100      	movs	r1, #0
 8002594:	4618      	mov	r0, r3
 8002596:	f005 f982 	bl	800789e <memset>
  if(hrtc->Instance==RTC)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a0f      	ldr	r2, [pc, #60]	; (80025dc <HAL_RTC_MspInit+0x58>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d117      	bne.n	80025d4 <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80025a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025a8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80025aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025ae:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025b0:	f107 030c 	add.w	r3, r7, #12
 80025b4:	4618      	mov	r0, r3
 80025b6:	f001 fcc3 	bl	8003f40 <HAL_RCCEx_PeriphCLKConfig>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80025c0:	f7ff ffb7 	bl	8002532 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80025c4:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <HAL_RTC_MspInit+0x5c>)
 80025c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ca:	4a05      	ldr	r2, [pc, #20]	; (80025e0 <HAL_RTC_MspInit+0x5c>)
 80025cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80025d4:	bf00      	nop
 80025d6:	3760      	adds	r7, #96	; 0x60
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40002800 	.word	0x40002800
 80025e0:	40021000 	.word	0x40021000

080025e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b08c      	sub	sp, #48	; 0x30
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ec:	f107 031c 	add.w	r3, r7, #28
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	605a      	str	r2, [r3, #4]
 80025f6:	609a      	str	r2, [r3, #8]
 80025f8:	60da      	str	r2, [r3, #12]
 80025fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a2f      	ldr	r2, [pc, #188]	; (80026c0 <HAL_SPI_MspInit+0xdc>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d12a      	bne.n	800265c <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002606:	4b2f      	ldr	r3, [pc, #188]	; (80026c4 <HAL_SPI_MspInit+0xe0>)
 8002608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800260a:	4a2e      	ldr	r2, [pc, #184]	; (80026c4 <HAL_SPI_MspInit+0xe0>)
 800260c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002610:	6613      	str	r3, [r2, #96]	; 0x60
 8002612:	4b2c      	ldr	r3, [pc, #176]	; (80026c4 <HAL_SPI_MspInit+0xe0>)
 8002614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002616:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800261a:	61bb      	str	r3, [r7, #24]
 800261c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800261e:	4b29      	ldr	r3, [pc, #164]	; (80026c4 <HAL_SPI_MspInit+0xe0>)
 8002620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002622:	4a28      	ldr	r2, [pc, #160]	; (80026c4 <HAL_SPI_MspInit+0xe0>)
 8002624:	f043 0301 	orr.w	r3, r3, #1
 8002628:	64d3      	str	r3, [r2, #76]	; 0x4c
 800262a:	4b26      	ldr	r3, [pc, #152]	; (80026c4 <HAL_SPI_MspInit+0xe0>)
 800262c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	617b      	str	r3, [r7, #20]
 8002634:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_12;
 8002636:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 800263a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263c:	2302      	movs	r3, #2
 800263e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002640:	2300      	movs	r3, #0
 8002642:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002644:	2303      	movs	r3, #3
 8002646:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002648:	2305      	movs	r3, #5
 800264a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800264c:	f107 031c 	add.w	r3, r7, #28
 8002650:	4619      	mov	r1, r3
 8002652:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002656:	f000 fc13 	bl	8002e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800265a:	e02c      	b.n	80026b6 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a19      	ldr	r2, [pc, #100]	; (80026c8 <HAL_SPI_MspInit+0xe4>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d127      	bne.n	80026b6 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002666:	4b17      	ldr	r3, [pc, #92]	; (80026c4 <HAL_SPI_MspInit+0xe0>)
 8002668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800266a:	4a16      	ldr	r2, [pc, #88]	; (80026c4 <HAL_SPI_MspInit+0xe0>)
 800266c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002670:	6593      	str	r3, [r2, #88]	; 0x58
 8002672:	4b14      	ldr	r3, [pc, #80]	; (80026c4 <HAL_SPI_MspInit+0xe0>)
 8002674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002676:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800267a:	613b      	str	r3, [r7, #16]
 800267c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800267e:	4b11      	ldr	r3, [pc, #68]	; (80026c4 <HAL_SPI_MspInit+0xe0>)
 8002680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002682:	4a10      	ldr	r2, [pc, #64]	; (80026c4 <HAL_SPI_MspInit+0xe0>)
 8002684:	f043 0302 	orr.w	r3, r3, #2
 8002688:	64d3      	str	r3, [r2, #76]	; 0x4c
 800268a:	4b0e      	ldr	r3, [pc, #56]	; (80026c4 <HAL_SPI_MspInit+0xe0>)
 800268c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8002696:	2328      	movs	r3, #40	; 0x28
 8002698:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269a:	2302      	movs	r3, #2
 800269c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269e:	2300      	movs	r3, #0
 80026a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a2:	2303      	movs	r3, #3
 80026a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80026a6:	2306      	movs	r3, #6
 80026a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026aa:	f107 031c 	add.w	r3, r7, #28
 80026ae:	4619      	mov	r1, r3
 80026b0:	4806      	ldr	r0, [pc, #24]	; (80026cc <HAL_SPI_MspInit+0xe8>)
 80026b2:	f000 fbe5 	bl	8002e80 <HAL_GPIO_Init>
}
 80026b6:	bf00      	nop
 80026b8:	3730      	adds	r7, #48	; 0x30
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	40013000 	.word	0x40013000
 80026c4:	40021000 	.word	0x40021000
 80026c8:	40003c00 	.word	0x40003c00
 80026cc:	48000400 	.word	0x48000400

080026d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b09e      	sub	sp, #120	; 0x78
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	605a      	str	r2, [r3, #4]
 80026e2:	609a      	str	r2, [r3, #8]
 80026e4:	60da      	str	r2, [r3, #12]
 80026e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026e8:	f107 0310 	add.w	r3, r7, #16
 80026ec:	2254      	movs	r2, #84	; 0x54
 80026ee:	2100      	movs	r1, #0
 80026f0:	4618      	mov	r0, r3
 80026f2:	f005 f8d4 	bl	800789e <memset>
  if(huart->Instance==USART1)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a23      	ldr	r2, [pc, #140]	; (8002788 <HAL_UART_MspInit+0xb8>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d13f      	bne.n	8002780 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002700:	2301      	movs	r3, #1
 8002702:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002704:	2300      	movs	r3, #0
 8002706:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002708:	f107 0310 	add.w	r3, r7, #16
 800270c:	4618      	mov	r0, r3
 800270e:	f001 fc17 	bl	8003f40 <HAL_RCCEx_PeriphCLKConfig>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002718:	f7ff ff0b 	bl	8002532 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800271c:	4b1b      	ldr	r3, [pc, #108]	; (800278c <HAL_UART_MspInit+0xbc>)
 800271e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002720:	4a1a      	ldr	r2, [pc, #104]	; (800278c <HAL_UART_MspInit+0xbc>)
 8002722:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002726:	6613      	str	r3, [r2, #96]	; 0x60
 8002728:	4b18      	ldr	r3, [pc, #96]	; (800278c <HAL_UART_MspInit+0xbc>)
 800272a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800272c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002730:	60fb      	str	r3, [r7, #12]
 8002732:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002734:	4b15      	ldr	r3, [pc, #84]	; (800278c <HAL_UART_MspInit+0xbc>)
 8002736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002738:	4a14      	ldr	r2, [pc, #80]	; (800278c <HAL_UART_MspInit+0xbc>)
 800273a:	f043 0301 	orr.w	r3, r3, #1
 800273e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002740:	4b12      	ldr	r3, [pc, #72]	; (800278c <HAL_UART_MspInit+0xbc>)
 8002742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	60bb      	str	r3, [r7, #8]
 800274a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800274c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002750:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002752:	2302      	movs	r3, #2
 8002754:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002756:	2300      	movs	r3, #0
 8002758:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800275a:	2303      	movs	r3, #3
 800275c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800275e:	2307      	movs	r3, #7
 8002760:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002762:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002766:	4619      	mov	r1, r3
 8002768:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800276c:	f000 fb88 	bl	8002e80 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002770:	2200      	movs	r2, #0
 8002772:	2100      	movs	r1, #0
 8002774:	2025      	movs	r0, #37	; 0x25
 8002776:	f000 fad9 	bl	8002d2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800277a:	2025      	movs	r0, #37	; 0x25
 800277c:	f000 faf2 	bl	8002d64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002780:	bf00      	nop
 8002782:	3778      	adds	r7, #120	; 0x78
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40013800 	.word	0x40013800
 800278c:	40021000 	.word	0x40021000

08002790 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b08e      	sub	sp, #56	; 0x38
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002798:	2300      	movs	r3, #0
 800279a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800279e:	4b34      	ldr	r3, [pc, #208]	; (8002870 <HAL_InitTick+0xe0>)
 80027a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a2:	4a33      	ldr	r2, [pc, #204]	; (8002870 <HAL_InitTick+0xe0>)
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	6593      	str	r3, [r2, #88]	; 0x58
 80027aa:	4b31      	ldr	r3, [pc, #196]	; (8002870 <HAL_InitTick+0xe0>)
 80027ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80027b6:	f107 0210 	add.w	r2, r7, #16
 80027ba:	f107 0314 	add.w	r3, r7, #20
 80027be:	4611      	mov	r1, r2
 80027c0:	4618      	mov	r0, r3
 80027c2:	f001 fb2b 	bl	8003e1c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80027c6:	6a3b      	ldr	r3, [r7, #32]
 80027c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80027ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d103      	bne.n	80027d8 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80027d0:	f001 faf8 	bl	8003dc4 <HAL_RCC_GetPCLK1Freq>
 80027d4:	6378      	str	r0, [r7, #52]	; 0x34
 80027d6:	e004      	b.n	80027e2 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80027d8:	f001 faf4 	bl	8003dc4 <HAL_RCC_GetPCLK1Freq>
 80027dc:	4603      	mov	r3, r0
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80027e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027e4:	4a23      	ldr	r2, [pc, #140]	; (8002874 <HAL_InitTick+0xe4>)
 80027e6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ea:	0c9b      	lsrs	r3, r3, #18
 80027ec:	3b01      	subs	r3, #1
 80027ee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80027f0:	4b21      	ldr	r3, [pc, #132]	; (8002878 <HAL_InitTick+0xe8>)
 80027f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027f6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80027f8:	4b1f      	ldr	r3, [pc, #124]	; (8002878 <HAL_InitTick+0xe8>)
 80027fa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80027fe:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8002800:	4a1d      	ldr	r2, [pc, #116]	; (8002878 <HAL_InitTick+0xe8>)
 8002802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002804:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8002806:	4b1c      	ldr	r3, [pc, #112]	; (8002878 <HAL_InitTick+0xe8>)
 8002808:	2200      	movs	r2, #0
 800280a:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800280c:	4b1a      	ldr	r3, [pc, #104]	; (8002878 <HAL_InitTick+0xe8>)
 800280e:	2200      	movs	r2, #0
 8002810:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002812:	4b19      	ldr	r3, [pc, #100]	; (8002878 <HAL_InitTick+0xe8>)
 8002814:	2200      	movs	r2, #0
 8002816:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8002818:	4817      	ldr	r0, [pc, #92]	; (8002878 <HAL_InitTick+0xe8>)
 800281a:	f002 fd45 	bl	80052a8 <HAL_TIM_Base_Init>
 800281e:	4603      	mov	r3, r0
 8002820:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002824:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002828:	2b00      	cmp	r3, #0
 800282a:	d11b      	bne.n	8002864 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800282c:	4812      	ldr	r0, [pc, #72]	; (8002878 <HAL_InitTick+0xe8>)
 800282e:	f002 fd9d 	bl	800536c <HAL_TIM_Base_Start_IT>
 8002832:	4603      	mov	r3, r0
 8002834:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002838:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800283c:	2b00      	cmp	r3, #0
 800283e:	d111      	bne.n	8002864 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002840:	201c      	movs	r0, #28
 8002842:	f000 fa8f 	bl	8002d64 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2b0f      	cmp	r3, #15
 800284a:	d808      	bhi.n	800285e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800284c:	2200      	movs	r2, #0
 800284e:	6879      	ldr	r1, [r7, #4]
 8002850:	201c      	movs	r0, #28
 8002852:	f000 fa6b 	bl	8002d2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002856:	4a09      	ldr	r2, [pc, #36]	; (800287c <HAL_InitTick+0xec>)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6013      	str	r3, [r2, #0]
 800285c:	e002      	b.n	8002864 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002864:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002868:	4618      	mov	r0, r3
 800286a:	3738      	adds	r7, #56	; 0x38
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	40021000 	.word	0x40021000
 8002874:	431bde83 	.word	0x431bde83
 8002878:	20000450 	.word	0x20000450
 800287c:	20000070 	.word	0x20000070

08002880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002884:	e7fe      	b.n	8002884 <NMI_Handler+0x4>

08002886 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002886:	b480      	push	{r7}
 8002888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800288a:	e7fe      	b.n	800288a <HardFault_Handler+0x4>

0800288c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002890:	e7fe      	b.n	8002890 <MemManage_Handler+0x4>

08002892 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002892:	b480      	push	{r7}
 8002894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002896:	e7fe      	b.n	8002896 <BusFault_Handler+0x4>

08002898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800289c:	e7fe      	b.n	800289c <UsageFault_Handler+0x4>

0800289e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800289e:	b480      	push	{r7}
 80028a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028a2:	bf00      	nop
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028b0:	bf00      	nop
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028ba:	b480      	push	{r7}
 80028bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028be:	bf00      	nop
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028cc:	bf00      	nop
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
	...

080028d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80028dc:	4802      	ldr	r0, [pc, #8]	; (80028e8 <TIM2_IRQHandler+0x10>)
 80028de:	f002 fd99 	bl	8005414 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80028e2:	bf00      	nop
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	20000450 	.word	0x20000450

080028ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80028f0:	4802      	ldr	r0, [pc, #8]	; (80028fc <USART1_IRQHandler+0x10>)
 80028f2:	f002 ffd5 	bl	80058a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80028f6:	bf00      	nop
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	20000388 	.word	0x20000388

08002900 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  return 1;
 8002904:	2301      	movs	r3, #1
}
 8002906:	4618      	mov	r0, r3
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <_kill>:

int _kill(int pid, int sig)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800291a:	f005 f813 	bl	8007944 <__errno>
 800291e:	4603      	mov	r3, r0
 8002920:	2216      	movs	r2, #22
 8002922:	601a      	str	r2, [r3, #0]
  return -1;
 8002924:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002928:	4618      	mov	r0, r3
 800292a:	3708      	adds	r7, #8
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <_exit>:

void _exit (int status)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002938:	f04f 31ff 	mov.w	r1, #4294967295
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f7ff ffe7 	bl	8002910 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002942:	e7fe      	b.n	8002942 <_exit+0x12>

08002944 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002950:	2300      	movs	r3, #0
 8002952:	617b      	str	r3, [r7, #20]
 8002954:	e00a      	b.n	800296c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002956:	f3af 8000 	nop.w
 800295a:	4601      	mov	r1, r0
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	1c5a      	adds	r2, r3, #1
 8002960:	60ba      	str	r2, [r7, #8]
 8002962:	b2ca      	uxtb	r2, r1
 8002964:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	3301      	adds	r3, #1
 800296a:	617b      	str	r3, [r7, #20]
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	429a      	cmp	r2, r3
 8002972:	dbf0      	blt.n	8002956 <_read+0x12>
  }

  return len;
 8002974:	687b      	ldr	r3, [r7, #4]
}
 8002976:	4618      	mov	r0, r3
 8002978:	3718      	adds	r7, #24
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b086      	sub	sp, #24
 8002982:	af00      	add	r7, sp, #0
 8002984:	60f8      	str	r0, [r7, #12]
 8002986:	60b9      	str	r1, [r7, #8]
 8002988:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800298a:	2300      	movs	r3, #0
 800298c:	617b      	str	r3, [r7, #20]
 800298e:	e009      	b.n	80029a4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	1c5a      	adds	r2, r3, #1
 8002994:	60ba      	str	r2, [r7, #8]
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	3301      	adds	r3, #1
 80029a2:	617b      	str	r3, [r7, #20]
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	dbf1      	blt.n	8002990 <_write+0x12>
  }
  return len;
 80029ac:	687b      	ldr	r3, [r7, #4]
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3718      	adds	r7, #24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <_close>:

int _close(int file)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80029be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr

080029ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
 80029d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029de:	605a      	str	r2, [r3, #4]
  return 0;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <_isatty>:

int _isatty(int file)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b083      	sub	sp, #12
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80029f6:	2301      	movs	r3, #1
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
	...

08002a20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a28:	4a14      	ldr	r2, [pc, #80]	; (8002a7c <_sbrk+0x5c>)
 8002a2a:	4b15      	ldr	r3, [pc, #84]	; (8002a80 <_sbrk+0x60>)
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a34:	4b13      	ldr	r3, [pc, #76]	; (8002a84 <_sbrk+0x64>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d102      	bne.n	8002a42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a3c:	4b11      	ldr	r3, [pc, #68]	; (8002a84 <_sbrk+0x64>)
 8002a3e:	4a12      	ldr	r2, [pc, #72]	; (8002a88 <_sbrk+0x68>)
 8002a40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a42:	4b10      	ldr	r3, [pc, #64]	; (8002a84 <_sbrk+0x64>)
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4413      	add	r3, r2
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d207      	bcs.n	8002a60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a50:	f004 ff78 	bl	8007944 <__errno>
 8002a54:	4603      	mov	r3, r0
 8002a56:	220c      	movs	r2, #12
 8002a58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a5e:	e009      	b.n	8002a74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a60:	4b08      	ldr	r3, [pc, #32]	; (8002a84 <_sbrk+0x64>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a66:	4b07      	ldr	r3, [pc, #28]	; (8002a84 <_sbrk+0x64>)
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	4a05      	ldr	r2, [pc, #20]	; (8002a84 <_sbrk+0x64>)
 8002a70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a72:	68fb      	ldr	r3, [r7, #12]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3718      	adds	r7, #24
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	20010000 	.word	0x20010000
 8002a80:	00000400 	.word	0x00000400
 8002a84:	2000049c 	.word	0x2000049c
 8002a88:	200005f0 	.word	0x200005f0

08002a8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002a90:	4b06      	ldr	r3, [pc, #24]	; (8002aac <SystemInit+0x20>)
 8002a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a96:	4a05      	ldr	r2, [pc, #20]	; (8002aac <SystemInit+0x20>)
 8002a98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002aa0:	bf00      	nop
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	e000ed00 	.word	0xe000ed00

08002ab0 <Reset_Handler>:
 8002ab0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ae8 <LoopForever+0x2>
 8002ab4:	f7ff ffea 	bl	8002a8c <SystemInit>
 8002ab8:	480c      	ldr	r0, [pc, #48]	; (8002aec <LoopForever+0x6>)
 8002aba:	490d      	ldr	r1, [pc, #52]	; (8002af0 <LoopForever+0xa>)
 8002abc:	4a0d      	ldr	r2, [pc, #52]	; (8002af4 <LoopForever+0xe>)
 8002abe:	2300      	movs	r3, #0
 8002ac0:	e002      	b.n	8002ac8 <LoopCopyDataInit>

08002ac2 <CopyDataInit>:
 8002ac2:	58d4      	ldr	r4, [r2, r3]
 8002ac4:	50c4      	str	r4, [r0, r3]
 8002ac6:	3304      	adds	r3, #4

08002ac8 <LoopCopyDataInit>:
 8002ac8:	18c4      	adds	r4, r0, r3
 8002aca:	428c      	cmp	r4, r1
 8002acc:	d3f9      	bcc.n	8002ac2 <CopyDataInit>
 8002ace:	4a0a      	ldr	r2, [pc, #40]	; (8002af8 <LoopForever+0x12>)
 8002ad0:	4c0a      	ldr	r4, [pc, #40]	; (8002afc <LoopForever+0x16>)
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	e001      	b.n	8002ada <LoopFillZerobss>

08002ad6 <FillZerobss>:
 8002ad6:	6013      	str	r3, [r2, #0]
 8002ad8:	3204      	adds	r2, #4

08002ada <LoopFillZerobss>:
 8002ada:	42a2      	cmp	r2, r4
 8002adc:	d3fb      	bcc.n	8002ad6 <FillZerobss>
 8002ade:	f004 ff37 	bl	8007950 <__libc_init_array>
 8002ae2:	f7ff fa49 	bl	8001f78 <main>

08002ae6 <LoopForever>:
 8002ae6:	e7fe      	b.n	8002ae6 <LoopForever>
 8002ae8:	20010000 	.word	0x20010000
 8002aec:	20000000 	.word	0x20000000
 8002af0:	20000240 	.word	0x20000240
 8002af4:	0800a3ec 	.word	0x0800a3ec
 8002af8:	20000240 	.word	0x20000240
 8002afc:	200005f0 	.word	0x200005f0

08002b00 <ADC1_IRQHandler>:
 8002b00:	e7fe      	b.n	8002b00 <ADC1_IRQHandler>

08002b02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b082      	sub	sp, #8
 8002b06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b0c:	2003      	movs	r0, #3
 8002b0e:	f000 f902 	bl	8002d16 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b12:	2007      	movs	r0, #7
 8002b14:	f7ff fe3c 	bl	8002790 <HAL_InitTick>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d002      	beq.n	8002b24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	71fb      	strb	r3, [r7, #7]
 8002b22:	e001      	b.n	8002b28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002b24:	f7ff fd0a 	bl	800253c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002b28:	79fb      	ldrb	r3, [r7, #7]
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
	...

08002b34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b38:	4b06      	ldr	r3, [pc, #24]	; (8002b54 <HAL_IncTick+0x20>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <HAL_IncTick+0x24>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4413      	add	r3, r2
 8002b44:	4a04      	ldr	r2, [pc, #16]	; (8002b58 <HAL_IncTick+0x24>)
 8002b46:	6013      	str	r3, [r2, #0]
}
 8002b48:	bf00      	nop
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	20000074 	.word	0x20000074
 8002b58:	200004a0 	.word	0x200004a0

08002b5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b60:	4b03      	ldr	r3, [pc, #12]	; (8002b70 <HAL_GetTick+0x14>)
 8002b62:	681b      	ldr	r3, [r3, #0]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	200004a0 	.word	0x200004a0

08002b74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b7c:	f7ff ffee 	bl	8002b5c <HAL_GetTick>
 8002b80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b8c:	d005      	beq.n	8002b9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002b8e:	4b0a      	ldr	r3, [pc, #40]	; (8002bb8 <HAL_Delay+0x44>)
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	461a      	mov	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	4413      	add	r3, r2
 8002b98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b9a:	bf00      	nop
 8002b9c:	f7ff ffde 	bl	8002b5c <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d8f7      	bhi.n	8002b9c <HAL_Delay+0x28>
  {
  }
}
 8002bac:	bf00      	nop
 8002bae:	bf00      	nop
 8002bb0:	3710      	adds	r7, #16
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	20000074 	.word	0x20000074

08002bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f003 0307 	and.w	r3, r3, #7
 8002bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bcc:	4b0c      	ldr	r3, [pc, #48]	; (8002c00 <__NVIC_SetPriorityGrouping+0x44>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bd2:	68ba      	ldr	r2, [r7, #8]
 8002bd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bd8:	4013      	ands	r3, r2
 8002bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002be4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bee:	4a04      	ldr	r2, [pc, #16]	; (8002c00 <__NVIC_SetPriorityGrouping+0x44>)
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	60d3      	str	r3, [r2, #12]
}
 8002bf4:	bf00      	nop
 8002bf6:	3714      	adds	r7, #20
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr
 8002c00:	e000ed00 	.word	0xe000ed00

08002c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c08:	4b04      	ldr	r3, [pc, #16]	; (8002c1c <__NVIC_GetPriorityGrouping+0x18>)
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	0a1b      	lsrs	r3, r3, #8
 8002c0e:	f003 0307 	and.w	r3, r3, #7
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	e000ed00 	.word	0xe000ed00

08002c20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	4603      	mov	r3, r0
 8002c28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	db0b      	blt.n	8002c4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c32:	79fb      	ldrb	r3, [r7, #7]
 8002c34:	f003 021f 	and.w	r2, r3, #31
 8002c38:	4907      	ldr	r1, [pc, #28]	; (8002c58 <__NVIC_EnableIRQ+0x38>)
 8002c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3e:	095b      	lsrs	r3, r3, #5
 8002c40:	2001      	movs	r0, #1
 8002c42:	fa00 f202 	lsl.w	r2, r0, r2
 8002c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	e000e100 	.word	0xe000e100

08002c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	4603      	mov	r3, r0
 8002c64:	6039      	str	r1, [r7, #0]
 8002c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	db0a      	blt.n	8002c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	b2da      	uxtb	r2, r3
 8002c74:	490c      	ldr	r1, [pc, #48]	; (8002ca8 <__NVIC_SetPriority+0x4c>)
 8002c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7a:	0112      	lsls	r2, r2, #4
 8002c7c:	b2d2      	uxtb	r2, r2
 8002c7e:	440b      	add	r3, r1
 8002c80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c84:	e00a      	b.n	8002c9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	4908      	ldr	r1, [pc, #32]	; (8002cac <__NVIC_SetPriority+0x50>)
 8002c8c:	79fb      	ldrb	r3, [r7, #7]
 8002c8e:	f003 030f 	and.w	r3, r3, #15
 8002c92:	3b04      	subs	r3, #4
 8002c94:	0112      	lsls	r2, r2, #4
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	440b      	add	r3, r1
 8002c9a:	761a      	strb	r2, [r3, #24]
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr
 8002ca8:	e000e100 	.word	0xe000e100
 8002cac:	e000ed00 	.word	0xe000ed00

08002cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b089      	sub	sp, #36	; 0x24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f003 0307 	and.w	r3, r3, #7
 8002cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	f1c3 0307 	rsb	r3, r3, #7
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	bf28      	it	cs
 8002cce:	2304      	movcs	r3, #4
 8002cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	3304      	adds	r3, #4
 8002cd6:	2b06      	cmp	r3, #6
 8002cd8:	d902      	bls.n	8002ce0 <NVIC_EncodePriority+0x30>
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	3b03      	subs	r3, #3
 8002cde:	e000      	b.n	8002ce2 <NVIC_EncodePriority+0x32>
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	fa02 f303 	lsl.w	r3, r2, r3
 8002cee:	43da      	mvns	r2, r3
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	401a      	ands	r2, r3
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002d02:	43d9      	mvns	r1, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d08:	4313      	orrs	r3, r2
         );
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3724      	adds	r7, #36	; 0x24
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b082      	sub	sp, #8
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f7ff ff4c 	bl	8002bbc <__NVIC_SetPriorityGrouping>
}
 8002d24:	bf00      	nop
 8002d26:	3708      	adds	r7, #8
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
 8002d38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d3e:	f7ff ff61 	bl	8002c04 <__NVIC_GetPriorityGrouping>
 8002d42:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	68b9      	ldr	r1, [r7, #8]
 8002d48:	6978      	ldr	r0, [r7, #20]
 8002d4a:	f7ff ffb1 	bl	8002cb0 <NVIC_EncodePriority>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d54:	4611      	mov	r1, r2
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff ff80 	bl	8002c5c <__NVIC_SetPriority>
}
 8002d5c:	bf00      	nop
 8002d5e:	3718      	adds	r7, #24
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7ff ff54 	bl	8002c20 <__NVIC_EnableIRQ>
}
 8002d78:	bf00      	nop
 8002d7a:	3708      	adds	r7, #8
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d008      	beq.n	8002daa <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2204      	movs	r2, #4
 8002d9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e022      	b.n	8002df0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 020e 	bic.w	r2, r2, #14
 8002db8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 0201 	bic.w	r2, r2, #1
 8002dc8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dce:	f003 021c 	and.w	r2, r3, #28
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	2101      	movs	r1, #1
 8002dd8:	fa01 f202 	lsl.w	r2, r1, r2
 8002ddc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002dee:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3714      	adds	r7, #20
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e04:	2300      	movs	r3, #0
 8002e06:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d005      	beq.n	8002e20 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2204      	movs	r2, #4
 8002e18:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	73fb      	strb	r3, [r7, #15]
 8002e1e:	e029      	b.n	8002e74 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 020e 	bic.w	r2, r2, #14
 8002e2e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 0201 	bic.w	r2, r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e44:	f003 021c 	and.w	r2, r3, #28
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4c:	2101      	movs	r1, #1
 8002e4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e52:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d003      	beq.n	8002e74 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	4798      	blx	r3
    }
  }
  return status;
 8002e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
	...

08002e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b087      	sub	sp, #28
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e8e:	e148      	b.n	8003122 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	2101      	movs	r1, #1
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	fa01 f303 	lsl.w	r3, r1, r3
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f000 813a 	beq.w	800311c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f003 0303 	and.w	r3, r3, #3
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d005      	beq.n	8002ec0 <HAL_GPIO_Init+0x40>
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f003 0303 	and.w	r3, r3, #3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d130      	bne.n	8002f22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	2203      	movs	r2, #3
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	68da      	ldr	r2, [r3, #12]
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	fa02 f303 	lsl.w	r3, r2, r3
 8002efe:	43db      	mvns	r3, r3
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	4013      	ands	r3, r2
 8002f04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	091b      	lsrs	r3, r3, #4
 8002f0c:	f003 0201 	and.w	r2, r3, #1
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	fa02 f303 	lsl.w	r3, r2, r3
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f003 0303 	and.w	r3, r3, #3
 8002f2a:	2b03      	cmp	r3, #3
 8002f2c:	d017      	beq.n	8002f5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	2203      	movs	r2, #3
 8002f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3e:	43db      	mvns	r3, r3
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	4013      	ands	r3, r2
 8002f44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	689a      	ldr	r2, [r3, #8]
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f003 0303 	and.w	r3, r3, #3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d123      	bne.n	8002fb2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	08da      	lsrs	r2, r3, #3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	3208      	adds	r2, #8
 8002f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	f003 0307 	and.w	r3, r3, #7
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	220f      	movs	r2, #15
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	43db      	mvns	r3, r3
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	691a      	ldr	r2, [r3, #16]
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	f003 0307 	and.w	r3, r3, #7
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	08da      	lsrs	r2, r3, #3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	3208      	adds	r2, #8
 8002fac:	6939      	ldr	r1, [r7, #16]
 8002fae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	2203      	movs	r2, #3
 8002fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc2:	43db      	mvns	r3, r3
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f003 0203 	and.w	r2, r3, #3
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f000 8094 	beq.w	800311c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ff4:	4b52      	ldr	r3, [pc, #328]	; (8003140 <HAL_GPIO_Init+0x2c0>)
 8002ff6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ff8:	4a51      	ldr	r2, [pc, #324]	; (8003140 <HAL_GPIO_Init+0x2c0>)
 8002ffa:	f043 0301 	orr.w	r3, r3, #1
 8002ffe:	6613      	str	r3, [r2, #96]	; 0x60
 8003000:	4b4f      	ldr	r3, [pc, #316]	; (8003140 <HAL_GPIO_Init+0x2c0>)
 8003002:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	60bb      	str	r3, [r7, #8]
 800300a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800300c:	4a4d      	ldr	r2, [pc, #308]	; (8003144 <HAL_GPIO_Init+0x2c4>)
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	089b      	lsrs	r3, r3, #2
 8003012:	3302      	adds	r3, #2
 8003014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003018:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	f003 0303 	and.w	r3, r3, #3
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	220f      	movs	r2, #15
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	43db      	mvns	r3, r3
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	4013      	ands	r3, r2
 800302e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003036:	d00d      	beq.n	8003054 <HAL_GPIO_Init+0x1d4>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a43      	ldr	r2, [pc, #268]	; (8003148 <HAL_GPIO_Init+0x2c8>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d007      	beq.n	8003050 <HAL_GPIO_Init+0x1d0>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a42      	ldr	r2, [pc, #264]	; (800314c <HAL_GPIO_Init+0x2cc>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d101      	bne.n	800304c <HAL_GPIO_Init+0x1cc>
 8003048:	2302      	movs	r3, #2
 800304a:	e004      	b.n	8003056 <HAL_GPIO_Init+0x1d6>
 800304c:	2307      	movs	r3, #7
 800304e:	e002      	b.n	8003056 <HAL_GPIO_Init+0x1d6>
 8003050:	2301      	movs	r3, #1
 8003052:	e000      	b.n	8003056 <HAL_GPIO_Init+0x1d6>
 8003054:	2300      	movs	r3, #0
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	f002 0203 	and.w	r2, r2, #3
 800305c:	0092      	lsls	r2, r2, #2
 800305e:	4093      	lsls	r3, r2
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	4313      	orrs	r3, r2
 8003064:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003066:	4937      	ldr	r1, [pc, #220]	; (8003144 <HAL_GPIO_Init+0x2c4>)
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	089b      	lsrs	r3, r3, #2
 800306c:	3302      	adds	r3, #2
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003074:	4b36      	ldr	r3, [pc, #216]	; (8003150 <HAL_GPIO_Init+0x2d0>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	43db      	mvns	r3, r3
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	4013      	ands	r3, r2
 8003082:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d003      	beq.n	8003098 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	4313      	orrs	r3, r2
 8003096:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003098:	4a2d      	ldr	r2, [pc, #180]	; (8003150 <HAL_GPIO_Init+0x2d0>)
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800309e:	4b2c      	ldr	r3, [pc, #176]	; (8003150 <HAL_GPIO_Init+0x2d0>)
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	43db      	mvns	r3, r3
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	4013      	ands	r3, r2
 80030ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d003      	beq.n	80030c2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	4313      	orrs	r3, r2
 80030c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80030c2:	4a23      	ldr	r2, [pc, #140]	; (8003150 <HAL_GPIO_Init+0x2d0>)
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80030c8:	4b21      	ldr	r3, [pc, #132]	; (8003150 <HAL_GPIO_Init+0x2d0>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	43db      	mvns	r3, r3
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	4013      	ands	r3, r2
 80030d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d003      	beq.n	80030ec <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80030ec:	4a18      	ldr	r2, [pc, #96]	; (8003150 <HAL_GPIO_Init+0x2d0>)
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80030f2:	4b17      	ldr	r3, [pc, #92]	; (8003150 <HAL_GPIO_Init+0x2d0>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	43db      	mvns	r3, r3
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	4013      	ands	r3, r2
 8003100:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d003      	beq.n	8003116 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	4313      	orrs	r3, r2
 8003114:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003116:	4a0e      	ldr	r2, [pc, #56]	; (8003150 <HAL_GPIO_Init+0x2d0>)
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	3301      	adds	r3, #1
 8003120:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	fa22 f303 	lsr.w	r3, r2, r3
 800312c:	2b00      	cmp	r3, #0
 800312e:	f47f aeaf 	bne.w	8002e90 <HAL_GPIO_Init+0x10>
  }
}
 8003132:	bf00      	nop
 8003134:	bf00      	nop
 8003136:	371c      	adds	r7, #28
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr
 8003140:	40021000 	.word	0x40021000
 8003144:	40010000 	.word	0x40010000
 8003148:	48000400 	.word	0x48000400
 800314c:	48000800 	.word	0x48000800
 8003150:	40010400 	.word	0x40010400

08003154 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	460b      	mov	r3, r1
 800315e:	807b      	strh	r3, [r7, #2]
 8003160:	4613      	mov	r3, r2
 8003162:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003164:	787b      	ldrb	r3, [r7, #1]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800316a:	887a      	ldrh	r2, [r7, #2]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003170:	e002      	b.n	8003178 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003172:	887a      	ldrh	r2, [r7, #2]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003188:	4b05      	ldr	r3, [pc, #20]	; (80031a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a04      	ldr	r2, [pc, #16]	; (80031a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800318e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003192:	6013      	str	r3, [r2, #0]
}
 8003194:	bf00      	nop
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	40007000 	.word	0x40007000

080031a4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80031a8:	4b04      	ldr	r3, [pc, #16]	; (80031bc <HAL_PWREx_GetVoltageRange+0x18>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	40007000 	.word	0x40007000

080031c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031ce:	d130      	bne.n	8003232 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80031d0:	4b23      	ldr	r3, [pc, #140]	; (8003260 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031dc:	d038      	beq.n	8003250 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031de:	4b20      	ldr	r3, [pc, #128]	; (8003260 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031e6:	4a1e      	ldr	r2, [pc, #120]	; (8003260 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031ec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031ee:	4b1d      	ldr	r3, [pc, #116]	; (8003264 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2232      	movs	r2, #50	; 0x32
 80031f4:	fb02 f303 	mul.w	r3, r2, r3
 80031f8:	4a1b      	ldr	r2, [pc, #108]	; (8003268 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80031fa:	fba2 2303 	umull	r2, r3, r2, r3
 80031fe:	0c9b      	lsrs	r3, r3, #18
 8003200:	3301      	adds	r3, #1
 8003202:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003204:	e002      	b.n	800320c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	3b01      	subs	r3, #1
 800320a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800320c:	4b14      	ldr	r3, [pc, #80]	; (8003260 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800320e:	695b      	ldr	r3, [r3, #20]
 8003210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003214:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003218:	d102      	bne.n	8003220 <HAL_PWREx_ControlVoltageScaling+0x60>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1f2      	bne.n	8003206 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003220:	4b0f      	ldr	r3, [pc, #60]	; (8003260 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003222:	695b      	ldr	r3, [r3, #20]
 8003224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003228:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800322c:	d110      	bne.n	8003250 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e00f      	b.n	8003252 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003232:	4b0b      	ldr	r3, [pc, #44]	; (8003260 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800323a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800323e:	d007      	beq.n	8003250 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003240:	4b07      	ldr	r3, [pc, #28]	; (8003260 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003248:	4a05      	ldr	r2, [pc, #20]	; (8003260 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800324a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800324e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3714      	adds	r7, #20
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	40007000 	.word	0x40007000
 8003264:	2000006c 	.word	0x2000006c
 8003268:	431bde83 	.word	0x431bde83

0800326c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b088      	sub	sp, #32
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d102      	bne.n	8003280 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	f000 bc02 	b.w	8003a84 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003280:	4b96      	ldr	r3, [pc, #600]	; (80034dc <HAL_RCC_OscConfig+0x270>)
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f003 030c 	and.w	r3, r3, #12
 8003288:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800328a:	4b94      	ldr	r3, [pc, #592]	; (80034dc <HAL_RCC_OscConfig+0x270>)
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	f003 0303 	and.w	r3, r3, #3
 8003292:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0310 	and.w	r3, r3, #16
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 80e4 	beq.w	800346a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d007      	beq.n	80032b8 <HAL_RCC_OscConfig+0x4c>
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	2b0c      	cmp	r3, #12
 80032ac:	f040 808b 	bne.w	80033c6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	f040 8087 	bne.w	80033c6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80032b8:	4b88      	ldr	r3, [pc, #544]	; (80034dc <HAL_RCC_OscConfig+0x270>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d005      	beq.n	80032d0 <HAL_RCC_OscConfig+0x64>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d101      	bne.n	80032d0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e3d9      	b.n	8003a84 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a1a      	ldr	r2, [r3, #32]
 80032d4:	4b81      	ldr	r3, [pc, #516]	; (80034dc <HAL_RCC_OscConfig+0x270>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0308 	and.w	r3, r3, #8
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d004      	beq.n	80032ea <HAL_RCC_OscConfig+0x7e>
 80032e0:	4b7e      	ldr	r3, [pc, #504]	; (80034dc <HAL_RCC_OscConfig+0x270>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032e8:	e005      	b.n	80032f6 <HAL_RCC_OscConfig+0x8a>
 80032ea:	4b7c      	ldr	r3, [pc, #496]	; (80034dc <HAL_RCC_OscConfig+0x270>)
 80032ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032f0:	091b      	lsrs	r3, r3, #4
 80032f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d223      	bcs.n	8003342 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a1b      	ldr	r3, [r3, #32]
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 fdbe 	bl	8003e80 <RCC_SetFlashLatencyFromMSIRange>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e3ba      	b.n	8003a84 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800330e:	4b73      	ldr	r3, [pc, #460]	; (80034dc <HAL_RCC_OscConfig+0x270>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a72      	ldr	r2, [pc, #456]	; (80034dc <HAL_RCC_OscConfig+0x270>)
 8003314:	f043 0308 	orr.w	r3, r3, #8
 8003318:	6013      	str	r3, [r2, #0]
 800331a:	4b70      	ldr	r3, [pc, #448]	; (80034dc <HAL_RCC_OscConfig+0x270>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	496d      	ldr	r1, [pc, #436]	; (80034dc <HAL_RCC_OscConfig+0x270>)
 8003328:	4313      	orrs	r3, r2
 800332a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800332c:	4b6b      	ldr	r3, [pc, #428]	; (80034dc <HAL_RCC_OscConfig+0x270>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	69db      	ldr	r3, [r3, #28]
 8003338:	021b      	lsls	r3, r3, #8
 800333a:	4968      	ldr	r1, [pc, #416]	; (80034dc <HAL_RCC_OscConfig+0x270>)
 800333c:	4313      	orrs	r3, r2
 800333e:	604b      	str	r3, [r1, #4]
 8003340:	e025      	b.n	800338e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003342:	4b66      	ldr	r3, [pc, #408]	; (80034dc <HAL_RCC_OscConfig+0x270>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a65      	ldr	r2, [pc, #404]	; (80034dc <HAL_RCC_OscConfig+0x270>)
 8003348:	f043 0308 	orr.w	r3, r3, #8
 800334c:	6013      	str	r3, [r2, #0]
 800334e:	4b63      	ldr	r3, [pc, #396]	; (80034dc <HAL_RCC_OscConfig+0x270>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a1b      	ldr	r3, [r3, #32]
 800335a:	4960      	ldr	r1, [pc, #384]	; (80034dc <HAL_RCC_OscConfig+0x270>)
 800335c:	4313      	orrs	r3, r2
 800335e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003360:	4b5e      	ldr	r3, [pc, #376]	; (80034dc <HAL_RCC_OscConfig+0x270>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	69db      	ldr	r3, [r3, #28]
 800336c:	021b      	lsls	r3, r3, #8
 800336e:	495b      	ldr	r1, [pc, #364]	; (80034dc <HAL_RCC_OscConfig+0x270>)
 8003370:	4313      	orrs	r3, r2
 8003372:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d109      	bne.n	800338e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	4618      	mov	r0, r3
 8003380:	f000 fd7e 	bl	8003e80 <RCC_SetFlashLatencyFromMSIRange>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e37a      	b.n	8003a84 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800338e:	f000 fc81 	bl	8003c94 <HAL_RCC_GetSysClockFreq>
 8003392:	4602      	mov	r2, r0
 8003394:	4b51      	ldr	r3, [pc, #324]	; (80034dc <HAL_RCC_OscConfig+0x270>)
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	091b      	lsrs	r3, r3, #4
 800339a:	f003 030f 	and.w	r3, r3, #15
 800339e:	4950      	ldr	r1, [pc, #320]	; (80034e0 <HAL_RCC_OscConfig+0x274>)
 80033a0:	5ccb      	ldrb	r3, [r1, r3]
 80033a2:	f003 031f 	and.w	r3, r3, #31
 80033a6:	fa22 f303 	lsr.w	r3, r2, r3
 80033aa:	4a4e      	ldr	r2, [pc, #312]	; (80034e4 <HAL_RCC_OscConfig+0x278>)
 80033ac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80033ae:	4b4e      	ldr	r3, [pc, #312]	; (80034e8 <HAL_RCC_OscConfig+0x27c>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7ff f9ec 	bl	8002790 <HAL_InitTick>
 80033b8:	4603      	mov	r3, r0
 80033ba:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80033bc:	7bfb      	ldrb	r3, [r7, #15]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d052      	beq.n	8003468 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80033c2:	7bfb      	ldrb	r3, [r7, #15]
 80033c4:	e35e      	b.n	8003a84 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d032      	beq.n	8003434 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80033ce:	4b43      	ldr	r3, [pc, #268]	; (80034dc <HAL_RCC_OscConfig+0x270>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a42      	ldr	r2, [pc, #264]	; (80034dc <HAL_RCC_OscConfig+0x270>)
 80033d4:	f043 0301 	orr.w	r3, r3, #1
 80033d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033da:	f7ff fbbf 	bl	8002b5c <HAL_GetTick>
 80033de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033e0:	e008      	b.n	80033f4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033e2:	f7ff fbbb 	bl	8002b5c <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e347      	b.n	8003a84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033f4:	4b39      	ldr	r3, [pc, #228]	; (80034dc <HAL_RCC_OscConfig+0x270>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d0f0      	beq.n	80033e2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003400:	4b36      	ldr	r3, [pc, #216]	; (80034dc <HAL_RCC_OscConfig+0x270>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a35      	ldr	r2, [pc, #212]	; (80034dc <HAL_RCC_OscConfig+0x270>)
 8003406:	f043 0308 	orr.w	r3, r3, #8
 800340a:	6013      	str	r3, [r2, #0]
 800340c:	4b33      	ldr	r3, [pc, #204]	; (80034dc <HAL_RCC_OscConfig+0x270>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	4930      	ldr	r1, [pc, #192]	; (80034dc <HAL_RCC_OscConfig+0x270>)
 800341a:	4313      	orrs	r3, r2
 800341c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800341e:	4b2f      	ldr	r3, [pc, #188]	; (80034dc <HAL_RCC_OscConfig+0x270>)
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	021b      	lsls	r3, r3, #8
 800342c:	492b      	ldr	r1, [pc, #172]	; (80034dc <HAL_RCC_OscConfig+0x270>)
 800342e:	4313      	orrs	r3, r2
 8003430:	604b      	str	r3, [r1, #4]
 8003432:	e01a      	b.n	800346a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003434:	4b29      	ldr	r3, [pc, #164]	; (80034dc <HAL_RCC_OscConfig+0x270>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a28      	ldr	r2, [pc, #160]	; (80034dc <HAL_RCC_OscConfig+0x270>)
 800343a:	f023 0301 	bic.w	r3, r3, #1
 800343e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003440:	f7ff fb8c 	bl	8002b5c <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003448:	f7ff fb88 	bl	8002b5c <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e314      	b.n	8003a84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800345a:	4b20      	ldr	r3, [pc, #128]	; (80034dc <HAL_RCC_OscConfig+0x270>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1f0      	bne.n	8003448 <HAL_RCC_OscConfig+0x1dc>
 8003466:	e000      	b.n	800346a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003468:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	d073      	beq.n	800355e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	2b08      	cmp	r3, #8
 800347a:	d005      	beq.n	8003488 <HAL_RCC_OscConfig+0x21c>
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	2b0c      	cmp	r3, #12
 8003480:	d10e      	bne.n	80034a0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	2b03      	cmp	r3, #3
 8003486:	d10b      	bne.n	80034a0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003488:	4b14      	ldr	r3, [pc, #80]	; (80034dc <HAL_RCC_OscConfig+0x270>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d063      	beq.n	800355c <HAL_RCC_OscConfig+0x2f0>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d15f      	bne.n	800355c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e2f1      	b.n	8003a84 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034a8:	d106      	bne.n	80034b8 <HAL_RCC_OscConfig+0x24c>
 80034aa:	4b0c      	ldr	r3, [pc, #48]	; (80034dc <HAL_RCC_OscConfig+0x270>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a0b      	ldr	r2, [pc, #44]	; (80034dc <HAL_RCC_OscConfig+0x270>)
 80034b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034b4:	6013      	str	r3, [r2, #0]
 80034b6:	e025      	b.n	8003504 <HAL_RCC_OscConfig+0x298>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034c0:	d114      	bne.n	80034ec <HAL_RCC_OscConfig+0x280>
 80034c2:	4b06      	ldr	r3, [pc, #24]	; (80034dc <HAL_RCC_OscConfig+0x270>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a05      	ldr	r2, [pc, #20]	; (80034dc <HAL_RCC_OscConfig+0x270>)
 80034c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034cc:	6013      	str	r3, [r2, #0]
 80034ce:	4b03      	ldr	r3, [pc, #12]	; (80034dc <HAL_RCC_OscConfig+0x270>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a02      	ldr	r2, [pc, #8]	; (80034dc <HAL_RCC_OscConfig+0x270>)
 80034d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034d8:	6013      	str	r3, [r2, #0]
 80034da:	e013      	b.n	8003504 <HAL_RCC_OscConfig+0x298>
 80034dc:	40021000 	.word	0x40021000
 80034e0:	0800a000 	.word	0x0800a000
 80034e4:	2000006c 	.word	0x2000006c
 80034e8:	20000070 	.word	0x20000070
 80034ec:	4ba0      	ldr	r3, [pc, #640]	; (8003770 <HAL_RCC_OscConfig+0x504>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a9f      	ldr	r2, [pc, #636]	; (8003770 <HAL_RCC_OscConfig+0x504>)
 80034f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034f6:	6013      	str	r3, [r2, #0]
 80034f8:	4b9d      	ldr	r3, [pc, #628]	; (8003770 <HAL_RCC_OscConfig+0x504>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a9c      	ldr	r2, [pc, #624]	; (8003770 <HAL_RCC_OscConfig+0x504>)
 80034fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003502:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d013      	beq.n	8003534 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350c:	f7ff fb26 	bl	8002b5c <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003514:	f7ff fb22 	bl	8002b5c <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b64      	cmp	r3, #100	; 0x64
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e2ae      	b.n	8003a84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003526:	4b92      	ldr	r3, [pc, #584]	; (8003770 <HAL_RCC_OscConfig+0x504>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d0f0      	beq.n	8003514 <HAL_RCC_OscConfig+0x2a8>
 8003532:	e014      	b.n	800355e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003534:	f7ff fb12 	bl	8002b5c <HAL_GetTick>
 8003538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800353a:	e008      	b.n	800354e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800353c:	f7ff fb0e 	bl	8002b5c <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b64      	cmp	r3, #100	; 0x64
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e29a      	b.n	8003a84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800354e:	4b88      	ldr	r3, [pc, #544]	; (8003770 <HAL_RCC_OscConfig+0x504>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1f0      	bne.n	800353c <HAL_RCC_OscConfig+0x2d0>
 800355a:	e000      	b.n	800355e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800355c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d060      	beq.n	800362c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	2b04      	cmp	r3, #4
 800356e:	d005      	beq.n	800357c <HAL_RCC_OscConfig+0x310>
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	2b0c      	cmp	r3, #12
 8003574:	d119      	bne.n	80035aa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	2b02      	cmp	r3, #2
 800357a:	d116      	bne.n	80035aa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800357c:	4b7c      	ldr	r3, [pc, #496]	; (8003770 <HAL_RCC_OscConfig+0x504>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003584:	2b00      	cmp	r3, #0
 8003586:	d005      	beq.n	8003594 <HAL_RCC_OscConfig+0x328>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d101      	bne.n	8003594 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e277      	b.n	8003a84 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003594:	4b76      	ldr	r3, [pc, #472]	; (8003770 <HAL_RCC_OscConfig+0x504>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	061b      	lsls	r3, r3, #24
 80035a2:	4973      	ldr	r1, [pc, #460]	; (8003770 <HAL_RCC_OscConfig+0x504>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035a8:	e040      	b.n	800362c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d023      	beq.n	80035fa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035b2:	4b6f      	ldr	r3, [pc, #444]	; (8003770 <HAL_RCC_OscConfig+0x504>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a6e      	ldr	r2, [pc, #440]	; (8003770 <HAL_RCC_OscConfig+0x504>)
 80035b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035be:	f7ff facd 	bl	8002b5c <HAL_GetTick>
 80035c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035c4:	e008      	b.n	80035d8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035c6:	f7ff fac9 	bl	8002b5c <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d901      	bls.n	80035d8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e255      	b.n	8003a84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035d8:	4b65      	ldr	r3, [pc, #404]	; (8003770 <HAL_RCC_OscConfig+0x504>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d0f0      	beq.n	80035c6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035e4:	4b62      	ldr	r3, [pc, #392]	; (8003770 <HAL_RCC_OscConfig+0x504>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	061b      	lsls	r3, r3, #24
 80035f2:	495f      	ldr	r1, [pc, #380]	; (8003770 <HAL_RCC_OscConfig+0x504>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	604b      	str	r3, [r1, #4]
 80035f8:	e018      	b.n	800362c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035fa:	4b5d      	ldr	r3, [pc, #372]	; (8003770 <HAL_RCC_OscConfig+0x504>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a5c      	ldr	r2, [pc, #368]	; (8003770 <HAL_RCC_OscConfig+0x504>)
 8003600:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003604:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003606:	f7ff faa9 	bl	8002b5c <HAL_GetTick>
 800360a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800360c:	e008      	b.n	8003620 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800360e:	f7ff faa5 	bl	8002b5c <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d901      	bls.n	8003620 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e231      	b.n	8003a84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003620:	4b53      	ldr	r3, [pc, #332]	; (8003770 <HAL_RCC_OscConfig+0x504>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1f0      	bne.n	800360e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0308 	and.w	r3, r3, #8
 8003634:	2b00      	cmp	r3, #0
 8003636:	d03c      	beq.n	80036b2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	695b      	ldr	r3, [r3, #20]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d01c      	beq.n	800367a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003640:	4b4b      	ldr	r3, [pc, #300]	; (8003770 <HAL_RCC_OscConfig+0x504>)
 8003642:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003646:	4a4a      	ldr	r2, [pc, #296]	; (8003770 <HAL_RCC_OscConfig+0x504>)
 8003648:	f043 0301 	orr.w	r3, r3, #1
 800364c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003650:	f7ff fa84 	bl	8002b5c <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003656:	e008      	b.n	800366a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003658:	f7ff fa80 	bl	8002b5c <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e20c      	b.n	8003a84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800366a:	4b41      	ldr	r3, [pc, #260]	; (8003770 <HAL_RCC_OscConfig+0x504>)
 800366c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d0ef      	beq.n	8003658 <HAL_RCC_OscConfig+0x3ec>
 8003678:	e01b      	b.n	80036b2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800367a:	4b3d      	ldr	r3, [pc, #244]	; (8003770 <HAL_RCC_OscConfig+0x504>)
 800367c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003680:	4a3b      	ldr	r2, [pc, #236]	; (8003770 <HAL_RCC_OscConfig+0x504>)
 8003682:	f023 0301 	bic.w	r3, r3, #1
 8003686:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800368a:	f7ff fa67 	bl	8002b5c <HAL_GetTick>
 800368e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003690:	e008      	b.n	80036a4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003692:	f7ff fa63 	bl	8002b5c <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	2b02      	cmp	r3, #2
 800369e:	d901      	bls.n	80036a4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e1ef      	b.n	8003a84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036a4:	4b32      	ldr	r3, [pc, #200]	; (8003770 <HAL_RCC_OscConfig+0x504>)
 80036a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1ef      	bne.n	8003692 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0304 	and.w	r3, r3, #4
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f000 80a6 	beq.w	800380c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036c0:	2300      	movs	r3, #0
 80036c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80036c4:	4b2a      	ldr	r3, [pc, #168]	; (8003770 <HAL_RCC_OscConfig+0x504>)
 80036c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d10d      	bne.n	80036ec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036d0:	4b27      	ldr	r3, [pc, #156]	; (8003770 <HAL_RCC_OscConfig+0x504>)
 80036d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d4:	4a26      	ldr	r2, [pc, #152]	; (8003770 <HAL_RCC_OscConfig+0x504>)
 80036d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036da:	6593      	str	r3, [r2, #88]	; 0x58
 80036dc:	4b24      	ldr	r3, [pc, #144]	; (8003770 <HAL_RCC_OscConfig+0x504>)
 80036de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e4:	60bb      	str	r3, [r7, #8]
 80036e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036e8:	2301      	movs	r3, #1
 80036ea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036ec:	4b21      	ldr	r3, [pc, #132]	; (8003774 <HAL_RCC_OscConfig+0x508>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d118      	bne.n	800372a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036f8:	4b1e      	ldr	r3, [pc, #120]	; (8003774 <HAL_RCC_OscConfig+0x508>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a1d      	ldr	r2, [pc, #116]	; (8003774 <HAL_RCC_OscConfig+0x508>)
 80036fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003702:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003704:	f7ff fa2a 	bl	8002b5c <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800370a:	e008      	b.n	800371e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800370c:	f7ff fa26 	bl	8002b5c <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e1b2      	b.n	8003a84 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800371e:	4b15      	ldr	r3, [pc, #84]	; (8003774 <HAL_RCC_OscConfig+0x508>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003726:	2b00      	cmp	r3, #0
 8003728:	d0f0      	beq.n	800370c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d108      	bne.n	8003744 <HAL_RCC_OscConfig+0x4d8>
 8003732:	4b0f      	ldr	r3, [pc, #60]	; (8003770 <HAL_RCC_OscConfig+0x504>)
 8003734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003738:	4a0d      	ldr	r2, [pc, #52]	; (8003770 <HAL_RCC_OscConfig+0x504>)
 800373a:	f043 0301 	orr.w	r3, r3, #1
 800373e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003742:	e029      	b.n	8003798 <HAL_RCC_OscConfig+0x52c>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	2b05      	cmp	r3, #5
 800374a:	d115      	bne.n	8003778 <HAL_RCC_OscConfig+0x50c>
 800374c:	4b08      	ldr	r3, [pc, #32]	; (8003770 <HAL_RCC_OscConfig+0x504>)
 800374e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003752:	4a07      	ldr	r2, [pc, #28]	; (8003770 <HAL_RCC_OscConfig+0x504>)
 8003754:	f043 0304 	orr.w	r3, r3, #4
 8003758:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800375c:	4b04      	ldr	r3, [pc, #16]	; (8003770 <HAL_RCC_OscConfig+0x504>)
 800375e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003762:	4a03      	ldr	r2, [pc, #12]	; (8003770 <HAL_RCC_OscConfig+0x504>)
 8003764:	f043 0301 	orr.w	r3, r3, #1
 8003768:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800376c:	e014      	b.n	8003798 <HAL_RCC_OscConfig+0x52c>
 800376e:	bf00      	nop
 8003770:	40021000 	.word	0x40021000
 8003774:	40007000 	.word	0x40007000
 8003778:	4b9a      	ldr	r3, [pc, #616]	; (80039e4 <HAL_RCC_OscConfig+0x778>)
 800377a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800377e:	4a99      	ldr	r2, [pc, #612]	; (80039e4 <HAL_RCC_OscConfig+0x778>)
 8003780:	f023 0301 	bic.w	r3, r3, #1
 8003784:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003788:	4b96      	ldr	r3, [pc, #600]	; (80039e4 <HAL_RCC_OscConfig+0x778>)
 800378a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800378e:	4a95      	ldr	r2, [pc, #596]	; (80039e4 <HAL_RCC_OscConfig+0x778>)
 8003790:	f023 0304 	bic.w	r3, r3, #4
 8003794:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d016      	beq.n	80037ce <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a0:	f7ff f9dc 	bl	8002b5c <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037a6:	e00a      	b.n	80037be <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037a8:	f7ff f9d8 	bl	8002b5c <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e162      	b.n	8003a84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037be:	4b89      	ldr	r3, [pc, #548]	; (80039e4 <HAL_RCC_OscConfig+0x778>)
 80037c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d0ed      	beq.n	80037a8 <HAL_RCC_OscConfig+0x53c>
 80037cc:	e015      	b.n	80037fa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ce:	f7ff f9c5 	bl	8002b5c <HAL_GetTick>
 80037d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037d4:	e00a      	b.n	80037ec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037d6:	f7ff f9c1 	bl	8002b5c <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d901      	bls.n	80037ec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e14b      	b.n	8003a84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037ec:	4b7d      	ldr	r3, [pc, #500]	; (80039e4 <HAL_RCC_OscConfig+0x778>)
 80037ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1ed      	bne.n	80037d6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037fa:	7ffb      	ldrb	r3, [r7, #31]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d105      	bne.n	800380c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003800:	4b78      	ldr	r3, [pc, #480]	; (80039e4 <HAL_RCC_OscConfig+0x778>)
 8003802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003804:	4a77      	ldr	r2, [pc, #476]	; (80039e4 <HAL_RCC_OscConfig+0x778>)
 8003806:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800380a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0320 	and.w	r3, r3, #32
 8003814:	2b00      	cmp	r3, #0
 8003816:	d03c      	beq.n	8003892 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381c:	2b00      	cmp	r3, #0
 800381e:	d01c      	beq.n	800385a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003820:	4b70      	ldr	r3, [pc, #448]	; (80039e4 <HAL_RCC_OscConfig+0x778>)
 8003822:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003826:	4a6f      	ldr	r2, [pc, #444]	; (80039e4 <HAL_RCC_OscConfig+0x778>)
 8003828:	f043 0301 	orr.w	r3, r3, #1
 800382c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003830:	f7ff f994 	bl	8002b5c <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003838:	f7ff f990 	bl	8002b5c <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e11c      	b.n	8003a84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800384a:	4b66      	ldr	r3, [pc, #408]	; (80039e4 <HAL_RCC_OscConfig+0x778>)
 800384c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d0ef      	beq.n	8003838 <HAL_RCC_OscConfig+0x5cc>
 8003858:	e01b      	b.n	8003892 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800385a:	4b62      	ldr	r3, [pc, #392]	; (80039e4 <HAL_RCC_OscConfig+0x778>)
 800385c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003860:	4a60      	ldr	r2, [pc, #384]	; (80039e4 <HAL_RCC_OscConfig+0x778>)
 8003862:	f023 0301 	bic.w	r3, r3, #1
 8003866:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800386a:	f7ff f977 	bl	8002b5c <HAL_GetTick>
 800386e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003870:	e008      	b.n	8003884 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003872:	f7ff f973 	bl	8002b5c <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e0ff      	b.n	8003a84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003884:	4b57      	ldr	r3, [pc, #348]	; (80039e4 <HAL_RCC_OscConfig+0x778>)
 8003886:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1ef      	bne.n	8003872 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003896:	2b00      	cmp	r3, #0
 8003898:	f000 80f3 	beq.w	8003a82 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	f040 80c9 	bne.w	8003a38 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80038a6:	4b4f      	ldr	r3, [pc, #316]	; (80039e4 <HAL_RCC_OscConfig+0x778>)
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	f003 0203 	and.w	r2, r3, #3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d12c      	bne.n	8003914 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c4:	3b01      	subs	r3, #1
 80038c6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d123      	bne.n	8003914 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038d8:	429a      	cmp	r2, r3
 80038da:	d11b      	bne.n	8003914 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d113      	bne.n	8003914 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f6:	085b      	lsrs	r3, r3, #1
 80038f8:	3b01      	subs	r3, #1
 80038fa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d109      	bne.n	8003914 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390a:	085b      	lsrs	r3, r3, #1
 800390c:	3b01      	subs	r3, #1
 800390e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003910:	429a      	cmp	r2, r3
 8003912:	d06b      	beq.n	80039ec <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	2b0c      	cmp	r3, #12
 8003918:	d062      	beq.n	80039e0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800391a:	4b32      	ldr	r3, [pc, #200]	; (80039e4 <HAL_RCC_OscConfig+0x778>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e0ac      	b.n	8003a84 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800392a:	4b2e      	ldr	r3, [pc, #184]	; (80039e4 <HAL_RCC_OscConfig+0x778>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a2d      	ldr	r2, [pc, #180]	; (80039e4 <HAL_RCC_OscConfig+0x778>)
 8003930:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003934:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003936:	f7ff f911 	bl	8002b5c <HAL_GetTick>
 800393a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800393c:	e008      	b.n	8003950 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800393e:	f7ff f90d 	bl	8002b5c <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d901      	bls.n	8003950 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e099      	b.n	8003a84 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003950:	4b24      	ldr	r3, [pc, #144]	; (80039e4 <HAL_RCC_OscConfig+0x778>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1f0      	bne.n	800393e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800395c:	4b21      	ldr	r3, [pc, #132]	; (80039e4 <HAL_RCC_OscConfig+0x778>)
 800395e:	68da      	ldr	r2, [r3, #12]
 8003960:	4b21      	ldr	r3, [pc, #132]	; (80039e8 <HAL_RCC_OscConfig+0x77c>)
 8003962:	4013      	ands	r3, r2
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800396c:	3a01      	subs	r2, #1
 800396e:	0112      	lsls	r2, r2, #4
 8003970:	4311      	orrs	r1, r2
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003976:	0212      	lsls	r2, r2, #8
 8003978:	4311      	orrs	r1, r2
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800397e:	0852      	lsrs	r2, r2, #1
 8003980:	3a01      	subs	r2, #1
 8003982:	0552      	lsls	r2, r2, #21
 8003984:	4311      	orrs	r1, r2
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800398a:	0852      	lsrs	r2, r2, #1
 800398c:	3a01      	subs	r2, #1
 800398e:	0652      	lsls	r2, r2, #25
 8003990:	4311      	orrs	r1, r2
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003996:	06d2      	lsls	r2, r2, #27
 8003998:	430a      	orrs	r2, r1
 800399a:	4912      	ldr	r1, [pc, #72]	; (80039e4 <HAL_RCC_OscConfig+0x778>)
 800399c:	4313      	orrs	r3, r2
 800399e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80039a0:	4b10      	ldr	r3, [pc, #64]	; (80039e4 <HAL_RCC_OscConfig+0x778>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a0f      	ldr	r2, [pc, #60]	; (80039e4 <HAL_RCC_OscConfig+0x778>)
 80039a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039aa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039ac:	4b0d      	ldr	r3, [pc, #52]	; (80039e4 <HAL_RCC_OscConfig+0x778>)
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	4a0c      	ldr	r2, [pc, #48]	; (80039e4 <HAL_RCC_OscConfig+0x778>)
 80039b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039b8:	f7ff f8d0 	bl	8002b5c <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039be:	e008      	b.n	80039d2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039c0:	f7ff f8cc 	bl	8002b5c <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e058      	b.n	8003a84 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039d2:	4b04      	ldr	r3, [pc, #16]	; (80039e4 <HAL_RCC_OscConfig+0x778>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d0f0      	beq.n	80039c0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039de:	e050      	b.n	8003a82 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e04f      	b.n	8003a84 <HAL_RCC_OscConfig+0x818>
 80039e4:	40021000 	.word	0x40021000
 80039e8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039ec:	4b27      	ldr	r3, [pc, #156]	; (8003a8c <HAL_RCC_OscConfig+0x820>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d144      	bne.n	8003a82 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80039f8:	4b24      	ldr	r3, [pc, #144]	; (8003a8c <HAL_RCC_OscConfig+0x820>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a23      	ldr	r2, [pc, #140]	; (8003a8c <HAL_RCC_OscConfig+0x820>)
 80039fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a02:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a04:	4b21      	ldr	r3, [pc, #132]	; (8003a8c <HAL_RCC_OscConfig+0x820>)
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	4a20      	ldr	r2, [pc, #128]	; (8003a8c <HAL_RCC_OscConfig+0x820>)
 8003a0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a0e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a10:	f7ff f8a4 	bl	8002b5c <HAL_GetTick>
 8003a14:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a18:	f7ff f8a0 	bl	8002b5c <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e02c      	b.n	8003a84 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a2a:	4b18      	ldr	r3, [pc, #96]	; (8003a8c <HAL_RCC_OscConfig+0x820>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d0f0      	beq.n	8003a18 <HAL_RCC_OscConfig+0x7ac>
 8003a36:	e024      	b.n	8003a82 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	2b0c      	cmp	r3, #12
 8003a3c:	d01f      	beq.n	8003a7e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a3e:	4b13      	ldr	r3, [pc, #76]	; (8003a8c <HAL_RCC_OscConfig+0x820>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a12      	ldr	r2, [pc, #72]	; (8003a8c <HAL_RCC_OscConfig+0x820>)
 8003a44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a4a:	f7ff f887 	bl	8002b5c <HAL_GetTick>
 8003a4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a50:	e008      	b.n	8003a64 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a52:	f7ff f883 	bl	8002b5c <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d901      	bls.n	8003a64 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e00f      	b.n	8003a84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a64:	4b09      	ldr	r3, [pc, #36]	; (8003a8c <HAL_RCC_OscConfig+0x820>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1f0      	bne.n	8003a52 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003a70:	4b06      	ldr	r3, [pc, #24]	; (8003a8c <HAL_RCC_OscConfig+0x820>)
 8003a72:	68da      	ldr	r2, [r3, #12]
 8003a74:	4905      	ldr	r1, [pc, #20]	; (8003a8c <HAL_RCC_OscConfig+0x820>)
 8003a76:	4b06      	ldr	r3, [pc, #24]	; (8003a90 <HAL_RCC_OscConfig+0x824>)
 8003a78:	4013      	ands	r3, r2
 8003a7a:	60cb      	str	r3, [r1, #12]
 8003a7c:	e001      	b.n	8003a82 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e000      	b.n	8003a84 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3720      	adds	r7, #32
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	40021000 	.word	0x40021000
 8003a90:	feeefffc 	.word	0xfeeefffc

08003a94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d101      	bne.n	8003aa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e0e7      	b.n	8003c78 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003aa8:	4b75      	ldr	r3, [pc, #468]	; (8003c80 <HAL_RCC_ClockConfig+0x1ec>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0307 	and.w	r3, r3, #7
 8003ab0:	683a      	ldr	r2, [r7, #0]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d910      	bls.n	8003ad8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ab6:	4b72      	ldr	r3, [pc, #456]	; (8003c80 <HAL_RCC_ClockConfig+0x1ec>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f023 0207 	bic.w	r2, r3, #7
 8003abe:	4970      	ldr	r1, [pc, #448]	; (8003c80 <HAL_RCC_ClockConfig+0x1ec>)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ac6:	4b6e      	ldr	r3, [pc, #440]	; (8003c80 <HAL_RCC_ClockConfig+0x1ec>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0307 	and.w	r3, r3, #7
 8003ace:	683a      	ldr	r2, [r7, #0]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d001      	beq.n	8003ad8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e0cf      	b.n	8003c78 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d010      	beq.n	8003b06 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	4b66      	ldr	r3, [pc, #408]	; (8003c84 <HAL_RCC_ClockConfig+0x1f0>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d908      	bls.n	8003b06 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003af4:	4b63      	ldr	r3, [pc, #396]	; (8003c84 <HAL_RCC_ClockConfig+0x1f0>)
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	4960      	ldr	r1, [pc, #384]	; (8003c84 <HAL_RCC_ClockConfig+0x1f0>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d04c      	beq.n	8003bac <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2b03      	cmp	r3, #3
 8003b18:	d107      	bne.n	8003b2a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b1a:	4b5a      	ldr	r3, [pc, #360]	; (8003c84 <HAL_RCC_ClockConfig+0x1f0>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d121      	bne.n	8003b6a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e0a6      	b.n	8003c78 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d107      	bne.n	8003b42 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b32:	4b54      	ldr	r3, [pc, #336]	; (8003c84 <HAL_RCC_ClockConfig+0x1f0>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d115      	bne.n	8003b6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e09a      	b.n	8003c78 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d107      	bne.n	8003b5a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b4a:	4b4e      	ldr	r3, [pc, #312]	; (8003c84 <HAL_RCC_ClockConfig+0x1f0>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d109      	bne.n	8003b6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e08e      	b.n	8003c78 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b5a:	4b4a      	ldr	r3, [pc, #296]	; (8003c84 <HAL_RCC_ClockConfig+0x1f0>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e086      	b.n	8003c78 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b6a:	4b46      	ldr	r3, [pc, #280]	; (8003c84 <HAL_RCC_ClockConfig+0x1f0>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f023 0203 	bic.w	r2, r3, #3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	4943      	ldr	r1, [pc, #268]	; (8003c84 <HAL_RCC_ClockConfig+0x1f0>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b7c:	f7fe ffee 	bl	8002b5c <HAL_GetTick>
 8003b80:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b82:	e00a      	b.n	8003b9a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b84:	f7fe ffea 	bl	8002b5c <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e06e      	b.n	8003c78 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b9a:	4b3a      	ldr	r3, [pc, #232]	; (8003c84 <HAL_RCC_ClockConfig+0x1f0>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f003 020c 	and.w	r2, r3, #12
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d1eb      	bne.n	8003b84 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d010      	beq.n	8003bda <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689a      	ldr	r2, [r3, #8]
 8003bbc:	4b31      	ldr	r3, [pc, #196]	; (8003c84 <HAL_RCC_ClockConfig+0x1f0>)
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d208      	bcs.n	8003bda <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bc8:	4b2e      	ldr	r3, [pc, #184]	; (8003c84 <HAL_RCC_ClockConfig+0x1f0>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	492b      	ldr	r1, [pc, #172]	; (8003c84 <HAL_RCC_ClockConfig+0x1f0>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bda:	4b29      	ldr	r3, [pc, #164]	; (8003c80 <HAL_RCC_ClockConfig+0x1ec>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0307 	and.w	r3, r3, #7
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d210      	bcs.n	8003c0a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003be8:	4b25      	ldr	r3, [pc, #148]	; (8003c80 <HAL_RCC_ClockConfig+0x1ec>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f023 0207 	bic.w	r2, r3, #7
 8003bf0:	4923      	ldr	r1, [pc, #140]	; (8003c80 <HAL_RCC_ClockConfig+0x1ec>)
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bf8:	4b21      	ldr	r3, [pc, #132]	; (8003c80 <HAL_RCC_ClockConfig+0x1ec>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0307 	and.w	r3, r3, #7
 8003c00:	683a      	ldr	r2, [r7, #0]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d001      	beq.n	8003c0a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e036      	b.n	8003c78 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0304 	and.w	r3, r3, #4
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d008      	beq.n	8003c28 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c16:	4b1b      	ldr	r3, [pc, #108]	; (8003c84 <HAL_RCC_ClockConfig+0x1f0>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	4918      	ldr	r1, [pc, #96]	; (8003c84 <HAL_RCC_ClockConfig+0x1f0>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0308 	and.w	r3, r3, #8
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d009      	beq.n	8003c48 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c34:	4b13      	ldr	r3, [pc, #76]	; (8003c84 <HAL_RCC_ClockConfig+0x1f0>)
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	00db      	lsls	r3, r3, #3
 8003c42:	4910      	ldr	r1, [pc, #64]	; (8003c84 <HAL_RCC_ClockConfig+0x1f0>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c48:	f000 f824 	bl	8003c94 <HAL_RCC_GetSysClockFreq>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	4b0d      	ldr	r3, [pc, #52]	; (8003c84 <HAL_RCC_ClockConfig+0x1f0>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	091b      	lsrs	r3, r3, #4
 8003c54:	f003 030f 	and.w	r3, r3, #15
 8003c58:	490b      	ldr	r1, [pc, #44]	; (8003c88 <HAL_RCC_ClockConfig+0x1f4>)
 8003c5a:	5ccb      	ldrb	r3, [r1, r3]
 8003c5c:	f003 031f 	and.w	r3, r3, #31
 8003c60:	fa22 f303 	lsr.w	r3, r2, r3
 8003c64:	4a09      	ldr	r2, [pc, #36]	; (8003c8c <HAL_RCC_ClockConfig+0x1f8>)
 8003c66:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003c68:	4b09      	ldr	r3, [pc, #36]	; (8003c90 <HAL_RCC_ClockConfig+0x1fc>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7fe fd8f 	bl	8002790 <HAL_InitTick>
 8003c72:	4603      	mov	r3, r0
 8003c74:	72fb      	strb	r3, [r7, #11]

  return status;
 8003c76:	7afb      	ldrb	r3, [r7, #11]
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3710      	adds	r7, #16
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	40022000 	.word	0x40022000
 8003c84:	40021000 	.word	0x40021000
 8003c88:	0800a000 	.word	0x0800a000
 8003c8c:	2000006c 	.word	0x2000006c
 8003c90:	20000070 	.word	0x20000070

08003c94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b089      	sub	sp, #36	; 0x24
 8003c98:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	61fb      	str	r3, [r7, #28]
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ca2:	4b3e      	ldr	r3, [pc, #248]	; (8003d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f003 030c 	and.w	r3, r3, #12
 8003caa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cac:	4b3b      	ldr	r3, [pc, #236]	; (8003d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	f003 0303 	and.w	r3, r3, #3
 8003cb4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d005      	beq.n	8003cc8 <HAL_RCC_GetSysClockFreq+0x34>
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	2b0c      	cmp	r3, #12
 8003cc0:	d121      	bne.n	8003d06 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d11e      	bne.n	8003d06 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003cc8:	4b34      	ldr	r3, [pc, #208]	; (8003d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0308 	and.w	r3, r3, #8
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d107      	bne.n	8003ce4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003cd4:	4b31      	ldr	r3, [pc, #196]	; (8003d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8003cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cda:	0a1b      	lsrs	r3, r3, #8
 8003cdc:	f003 030f 	and.w	r3, r3, #15
 8003ce0:	61fb      	str	r3, [r7, #28]
 8003ce2:	e005      	b.n	8003cf0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003ce4:	4b2d      	ldr	r3, [pc, #180]	; (8003d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	091b      	lsrs	r3, r3, #4
 8003cea:	f003 030f 	and.w	r3, r3, #15
 8003cee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003cf0:	4a2b      	ldr	r2, [pc, #172]	; (8003da0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cf8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d10d      	bne.n	8003d1c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d04:	e00a      	b.n	8003d1c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	2b04      	cmp	r3, #4
 8003d0a:	d102      	bne.n	8003d12 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d0c:	4b25      	ldr	r3, [pc, #148]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d0e:	61bb      	str	r3, [r7, #24]
 8003d10:	e004      	b.n	8003d1c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	2b08      	cmp	r3, #8
 8003d16:	d101      	bne.n	8003d1c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d18:	4b23      	ldr	r3, [pc, #140]	; (8003da8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d1a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	2b0c      	cmp	r3, #12
 8003d20:	d134      	bne.n	8003d8c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d22:	4b1e      	ldr	r3, [pc, #120]	; (8003d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	f003 0303 	and.w	r3, r3, #3
 8003d2a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d003      	beq.n	8003d3a <HAL_RCC_GetSysClockFreq+0xa6>
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	2b03      	cmp	r3, #3
 8003d36:	d003      	beq.n	8003d40 <HAL_RCC_GetSysClockFreq+0xac>
 8003d38:	e005      	b.n	8003d46 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003d3a:	4b1a      	ldr	r3, [pc, #104]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d3c:	617b      	str	r3, [r7, #20]
      break;
 8003d3e:	e005      	b.n	8003d4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003d40:	4b19      	ldr	r3, [pc, #100]	; (8003da8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d42:	617b      	str	r3, [r7, #20]
      break;
 8003d44:	e002      	b.n	8003d4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	617b      	str	r3, [r7, #20]
      break;
 8003d4a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d4c:	4b13      	ldr	r3, [pc, #76]	; (8003d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	091b      	lsrs	r3, r3, #4
 8003d52:	f003 0307 	and.w	r3, r3, #7
 8003d56:	3301      	adds	r3, #1
 8003d58:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d5a:	4b10      	ldr	r3, [pc, #64]	; (8003d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	0a1b      	lsrs	r3, r3, #8
 8003d60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	fb03 f202 	mul.w	r2, r3, r2
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d70:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d72:	4b0a      	ldr	r3, [pc, #40]	; (8003d9c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	0e5b      	lsrs	r3, r3, #25
 8003d78:	f003 0303 	and.w	r3, r3, #3
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d8a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003d8c:	69bb      	ldr	r3, [r7, #24]
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3724      	adds	r7, #36	; 0x24
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	40021000 	.word	0x40021000
 8003da0:	0800a018 	.word	0x0800a018
 8003da4:	00f42400 	.word	0x00f42400
 8003da8:	007a1200 	.word	0x007a1200

08003dac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dac:	b480      	push	{r7}
 8003dae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003db0:	4b03      	ldr	r3, [pc, #12]	; (8003dc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003db2:	681b      	ldr	r3, [r3, #0]
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	2000006c 	.word	0x2000006c

08003dc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003dc8:	f7ff fff0 	bl	8003dac <HAL_RCC_GetHCLKFreq>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	4b06      	ldr	r3, [pc, #24]	; (8003de8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	0a1b      	lsrs	r3, r3, #8
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	4904      	ldr	r1, [pc, #16]	; (8003dec <HAL_RCC_GetPCLK1Freq+0x28>)
 8003dda:	5ccb      	ldrb	r3, [r1, r3]
 8003ddc:	f003 031f 	and.w	r3, r3, #31
 8003de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	40021000 	.word	0x40021000
 8003dec:	0800a010 	.word	0x0800a010

08003df0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003df4:	f7ff ffda 	bl	8003dac <HAL_RCC_GetHCLKFreq>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	4b06      	ldr	r3, [pc, #24]	; (8003e14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	0adb      	lsrs	r3, r3, #11
 8003e00:	f003 0307 	and.w	r3, r3, #7
 8003e04:	4904      	ldr	r1, [pc, #16]	; (8003e18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e06:	5ccb      	ldrb	r3, [r1, r3]
 8003e08:	f003 031f 	and.w	r3, r3, #31
 8003e0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	40021000 	.word	0x40021000
 8003e18:	0800a010 	.word	0x0800a010

08003e1c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	220f      	movs	r2, #15
 8003e2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003e2c:	4b12      	ldr	r3, [pc, #72]	; (8003e78 <HAL_RCC_GetClockConfig+0x5c>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f003 0203 	and.w	r2, r3, #3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003e38:	4b0f      	ldr	r3, [pc, #60]	; (8003e78 <HAL_RCC_GetClockConfig+0x5c>)
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003e44:	4b0c      	ldr	r3, [pc, #48]	; (8003e78 <HAL_RCC_GetClockConfig+0x5c>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003e50:	4b09      	ldr	r3, [pc, #36]	; (8003e78 <HAL_RCC_GetClockConfig+0x5c>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	08db      	lsrs	r3, r3, #3
 8003e56:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003e5e:	4b07      	ldr	r3, [pc, #28]	; (8003e7c <HAL_RCC_GetClockConfig+0x60>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0207 	and.w	r2, r3, #7
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	601a      	str	r2, [r3, #0]
}
 8003e6a:	bf00      	nop
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	40021000 	.word	0x40021000
 8003e7c:	40022000 	.word	0x40022000

08003e80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b086      	sub	sp, #24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003e88:	2300      	movs	r3, #0
 8003e8a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e8c:	4b2a      	ldr	r3, [pc, #168]	; (8003f38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d003      	beq.n	8003ea0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003e98:	f7ff f984 	bl	80031a4 <HAL_PWREx_GetVoltageRange>
 8003e9c:	6178      	str	r0, [r7, #20]
 8003e9e:	e014      	b.n	8003eca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ea0:	4b25      	ldr	r3, [pc, #148]	; (8003f38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea4:	4a24      	ldr	r2, [pc, #144]	; (8003f38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ea6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eaa:	6593      	str	r3, [r2, #88]	; 0x58
 8003eac:	4b22      	ldr	r3, [pc, #136]	; (8003f38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eb4:	60fb      	str	r3, [r7, #12]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003eb8:	f7ff f974 	bl	80031a4 <HAL_PWREx_GetVoltageRange>
 8003ebc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003ebe:	4b1e      	ldr	r3, [pc, #120]	; (8003f38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec2:	4a1d      	ldr	r2, [pc, #116]	; (8003f38 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ec4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ec8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ed0:	d10b      	bne.n	8003eea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2b80      	cmp	r3, #128	; 0x80
 8003ed6:	d919      	bls.n	8003f0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2ba0      	cmp	r3, #160	; 0xa0
 8003edc:	d902      	bls.n	8003ee4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ede:	2302      	movs	r3, #2
 8003ee0:	613b      	str	r3, [r7, #16]
 8003ee2:	e013      	b.n	8003f0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	613b      	str	r3, [r7, #16]
 8003ee8:	e010      	b.n	8003f0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2b80      	cmp	r3, #128	; 0x80
 8003eee:	d902      	bls.n	8003ef6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	613b      	str	r3, [r7, #16]
 8003ef4:	e00a      	b.n	8003f0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2b80      	cmp	r3, #128	; 0x80
 8003efa:	d102      	bne.n	8003f02 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003efc:	2302      	movs	r3, #2
 8003efe:	613b      	str	r3, [r7, #16]
 8003f00:	e004      	b.n	8003f0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2b70      	cmp	r3, #112	; 0x70
 8003f06:	d101      	bne.n	8003f0c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f08:	2301      	movs	r3, #1
 8003f0a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003f0c:	4b0b      	ldr	r3, [pc, #44]	; (8003f3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f023 0207 	bic.w	r2, r3, #7
 8003f14:	4909      	ldr	r1, [pc, #36]	; (8003f3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003f1c:	4b07      	ldr	r3, [pc, #28]	; (8003f3c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0307 	and.w	r3, r3, #7
 8003f24:	693a      	ldr	r2, [r7, #16]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d001      	beq.n	8003f2e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e000      	b.n	8003f30 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3718      	adds	r7, #24
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	40021000 	.word	0x40021000
 8003f3c:	40022000 	.word	0x40022000

08003f40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f48:	2300      	movs	r3, #0
 8003f4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d031      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f60:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f64:	d01a      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003f66:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f6a:	d814      	bhi.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d009      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003f70:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f74:	d10f      	bne.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003f76:	4b5d      	ldr	r3, [pc, #372]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	4a5c      	ldr	r2, [pc, #368]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f80:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f82:	e00c      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	3304      	adds	r3, #4
 8003f88:	2100      	movs	r1, #0
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f000 f9de 	bl	800434c <RCCEx_PLLSAI1_Config>
 8003f90:	4603      	mov	r3, r0
 8003f92:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f94:	e003      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	74fb      	strb	r3, [r7, #19]
      break;
 8003f9a:	e000      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003f9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f9e:	7cfb      	ldrb	r3, [r7, #19]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d10b      	bne.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fa4:	4b51      	ldr	r3, [pc, #324]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003faa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb2:	494e      	ldr	r1, [pc, #312]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003fba:	e001      	b.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fbc:	7cfb      	ldrb	r3, [r7, #19]
 8003fbe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f000 809e 	beq.w	800410a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003fd2:	4b46      	ldr	r3, [pc, #280]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e000      	b.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00d      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fe8:	4b40      	ldr	r3, [pc, #256]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fec:	4a3f      	ldr	r2, [pc, #252]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ff2:	6593      	str	r3, [r2, #88]	; 0x58
 8003ff4:	4b3d      	ldr	r3, [pc, #244]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ffc:	60bb      	str	r3, [r7, #8]
 8003ffe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004000:	2301      	movs	r3, #1
 8004002:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004004:	4b3a      	ldr	r3, [pc, #232]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a39      	ldr	r2, [pc, #228]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800400a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800400e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004010:	f7fe fda4 	bl	8002b5c <HAL_GetTick>
 8004014:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004016:	e009      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004018:	f7fe fda0 	bl	8002b5c <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b02      	cmp	r3, #2
 8004024:	d902      	bls.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	74fb      	strb	r3, [r7, #19]
        break;
 800402a:	e005      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800402c:	4b30      	ldr	r3, [pc, #192]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004034:	2b00      	cmp	r3, #0
 8004036:	d0ef      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004038:	7cfb      	ldrb	r3, [r7, #19]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d15a      	bne.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800403e:	4b2b      	ldr	r3, [pc, #172]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004044:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004048:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d01e      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	429a      	cmp	r2, r3
 8004058:	d019      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800405a:	4b24      	ldr	r3, [pc, #144]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800405c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004060:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004064:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004066:	4b21      	ldr	r3, [pc, #132]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800406c:	4a1f      	ldr	r2, [pc, #124]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800406e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004072:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004076:	4b1d      	ldr	r3, [pc, #116]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800407c:	4a1b      	ldr	r2, [pc, #108]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800407e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004082:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004086:	4a19      	ldr	r2, [pc, #100]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	2b00      	cmp	r3, #0
 8004096:	d016      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004098:	f7fe fd60 	bl	8002b5c <HAL_GetTick>
 800409c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800409e:	e00b      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040a0:	f7fe fd5c 	bl	8002b5c <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d902      	bls.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	74fb      	strb	r3, [r7, #19]
            break;
 80040b6:	e006      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040b8:	4b0c      	ldr	r3, [pc, #48]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d0ec      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80040c6:	7cfb      	ldrb	r3, [r7, #19]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d10b      	bne.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040cc:	4b07      	ldr	r3, [pc, #28]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040da:	4904      	ldr	r1, [pc, #16]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80040e2:	e009      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040e4:	7cfb      	ldrb	r3, [r7, #19]
 80040e6:	74bb      	strb	r3, [r7, #18]
 80040e8:	e006      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80040ea:	bf00      	nop
 80040ec:	40021000 	.word	0x40021000
 80040f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040f4:	7cfb      	ldrb	r3, [r7, #19]
 80040f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040f8:	7c7b      	ldrb	r3, [r7, #17]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d105      	bne.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040fe:	4b8a      	ldr	r3, [pc, #552]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004102:	4a89      	ldr	r2, [pc, #548]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004104:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004108:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00a      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004116:	4b84      	ldr	r3, [pc, #528]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800411c:	f023 0203 	bic.w	r2, r3, #3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	4980      	ldr	r1, [pc, #512]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004126:	4313      	orrs	r3, r2
 8004128:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00a      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004138:	4b7b      	ldr	r3, [pc, #492]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800413a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800413e:	f023 020c 	bic.w	r2, r3, #12
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004146:	4978      	ldr	r1, [pc, #480]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004148:	4313      	orrs	r3, r2
 800414a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0320 	and.w	r3, r3, #32
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00a      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800415a:	4b73      	ldr	r3, [pc, #460]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800415c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004160:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004168:	496f      	ldr	r1, [pc, #444]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800416a:	4313      	orrs	r3, r2
 800416c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00a      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800417c:	4b6a      	ldr	r3, [pc, #424]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800417e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004182:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800418a:	4967      	ldr	r1, [pc, #412]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800418c:	4313      	orrs	r3, r2
 800418e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00a      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800419e:	4b62      	ldr	r3, [pc, #392]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ac:	495e      	ldr	r1, [pc, #376]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00a      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041c0:	4b59      	ldr	r3, [pc, #356]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ce:	4956      	ldr	r1, [pc, #344]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00a      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041e2:	4b51      	ldr	r3, [pc, #324]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f0:	494d      	ldr	r1, [pc, #308]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d028      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004204:	4b48      	ldr	r3, [pc, #288]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800420a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004212:	4945      	ldr	r1, [pc, #276]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004214:	4313      	orrs	r3, r2
 8004216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004222:	d106      	bne.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004224:	4b40      	ldr	r3, [pc, #256]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	4a3f      	ldr	r2, [pc, #252]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800422a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800422e:	60d3      	str	r3, [r2, #12]
 8004230:	e011      	b.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004236:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800423a:	d10c      	bne.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	3304      	adds	r3, #4
 8004240:	2101      	movs	r1, #1
 8004242:	4618      	mov	r0, r3
 8004244:	f000 f882 	bl	800434c <RCCEx_PLLSAI1_Config>
 8004248:	4603      	mov	r3, r0
 800424a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800424c:	7cfb      	ldrb	r3, [r7, #19]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d001      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004252:	7cfb      	ldrb	r3, [r7, #19]
 8004254:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d028      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004262:	4b31      	ldr	r3, [pc, #196]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004268:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004270:	492d      	ldr	r1, [pc, #180]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004272:	4313      	orrs	r3, r2
 8004274:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800427c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004280:	d106      	bne.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004282:	4b29      	ldr	r3, [pc, #164]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	4a28      	ldr	r2, [pc, #160]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004288:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800428c:	60d3      	str	r3, [r2, #12]
 800428e:	e011      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004294:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004298:	d10c      	bne.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	3304      	adds	r3, #4
 800429e:	2101      	movs	r1, #1
 80042a0:	4618      	mov	r0, r3
 80042a2:	f000 f853 	bl	800434c <RCCEx_PLLSAI1_Config>
 80042a6:	4603      	mov	r3, r0
 80042a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042aa:	7cfb      	ldrb	r3, [r7, #19]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d001      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80042b0:	7cfb      	ldrb	r3, [r7, #19]
 80042b2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d01c      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042c0:	4b19      	ldr	r3, [pc, #100]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ce:	4916      	ldr	r1, [pc, #88]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042de:	d10c      	bne.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	3304      	adds	r3, #4
 80042e4:	2102      	movs	r1, #2
 80042e6:	4618      	mov	r0, r3
 80042e8:	f000 f830 	bl	800434c <RCCEx_PLLSAI1_Config>
 80042ec:	4603      	mov	r3, r0
 80042ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042f0:	7cfb      	ldrb	r3, [r7, #19]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80042f6:	7cfb      	ldrb	r3, [r7, #19]
 80042f8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00a      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004306:	4b08      	ldr	r3, [pc, #32]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800430c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004314:	4904      	ldr	r1, [pc, #16]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004316:	4313      	orrs	r3, r2
 8004318:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800431c:	7cbb      	ldrb	r3, [r7, #18]
}
 800431e:	4618      	mov	r0, r3
 8004320:	3718      	adds	r7, #24
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	40021000 	.word	0x40021000

0800432c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800432c:	b480      	push	{r7}
 800432e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004330:	4b05      	ldr	r3, [pc, #20]	; (8004348 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a04      	ldr	r2, [pc, #16]	; (8004348 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004336:	f043 0304 	orr.w	r3, r3, #4
 800433a:	6013      	str	r3, [r2, #0]
}
 800433c:	bf00      	nop
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	40021000 	.word	0x40021000

0800434c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004356:	2300      	movs	r3, #0
 8004358:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800435a:	4b74      	ldr	r3, [pc, #464]	; (800452c <RCCEx_PLLSAI1_Config+0x1e0>)
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	f003 0303 	and.w	r3, r3, #3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d018      	beq.n	8004398 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004366:	4b71      	ldr	r3, [pc, #452]	; (800452c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	f003 0203 	and.w	r2, r3, #3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	429a      	cmp	r2, r3
 8004374:	d10d      	bne.n	8004392 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
       ||
 800437a:	2b00      	cmp	r3, #0
 800437c:	d009      	beq.n	8004392 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800437e:	4b6b      	ldr	r3, [pc, #428]	; (800452c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	091b      	lsrs	r3, r3, #4
 8004384:	f003 0307 	and.w	r3, r3, #7
 8004388:	1c5a      	adds	r2, r3, #1
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
       ||
 800438e:	429a      	cmp	r2, r3
 8004390:	d047      	beq.n	8004422 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	73fb      	strb	r3, [r7, #15]
 8004396:	e044      	b.n	8004422 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2b03      	cmp	r3, #3
 800439e:	d018      	beq.n	80043d2 <RCCEx_PLLSAI1_Config+0x86>
 80043a0:	2b03      	cmp	r3, #3
 80043a2:	d825      	bhi.n	80043f0 <RCCEx_PLLSAI1_Config+0xa4>
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d002      	beq.n	80043ae <RCCEx_PLLSAI1_Config+0x62>
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d009      	beq.n	80043c0 <RCCEx_PLLSAI1_Config+0x74>
 80043ac:	e020      	b.n	80043f0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043ae:	4b5f      	ldr	r3, [pc, #380]	; (800452c <RCCEx_PLLSAI1_Config+0x1e0>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d11d      	bne.n	80043f6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043be:	e01a      	b.n	80043f6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043c0:	4b5a      	ldr	r3, [pc, #360]	; (800452c <RCCEx_PLLSAI1_Config+0x1e0>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d116      	bne.n	80043fa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043d0:	e013      	b.n	80043fa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80043d2:	4b56      	ldr	r3, [pc, #344]	; (800452c <RCCEx_PLLSAI1_Config+0x1e0>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d10f      	bne.n	80043fe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80043de:	4b53      	ldr	r3, [pc, #332]	; (800452c <RCCEx_PLLSAI1_Config+0x1e0>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d109      	bne.n	80043fe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80043ee:	e006      	b.n	80043fe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	73fb      	strb	r3, [r7, #15]
      break;
 80043f4:	e004      	b.n	8004400 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80043f6:	bf00      	nop
 80043f8:	e002      	b.n	8004400 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80043fa:	bf00      	nop
 80043fc:	e000      	b.n	8004400 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80043fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8004400:	7bfb      	ldrb	r3, [r7, #15]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10d      	bne.n	8004422 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004406:	4b49      	ldr	r3, [pc, #292]	; (800452c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6819      	ldr	r1, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	3b01      	subs	r3, #1
 8004418:	011b      	lsls	r3, r3, #4
 800441a:	430b      	orrs	r3, r1
 800441c:	4943      	ldr	r1, [pc, #268]	; (800452c <RCCEx_PLLSAI1_Config+0x1e0>)
 800441e:	4313      	orrs	r3, r2
 8004420:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004422:	7bfb      	ldrb	r3, [r7, #15]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d17c      	bne.n	8004522 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004428:	4b40      	ldr	r3, [pc, #256]	; (800452c <RCCEx_PLLSAI1_Config+0x1e0>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a3f      	ldr	r2, [pc, #252]	; (800452c <RCCEx_PLLSAI1_Config+0x1e0>)
 800442e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004432:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004434:	f7fe fb92 	bl	8002b5c <HAL_GetTick>
 8004438:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800443a:	e009      	b.n	8004450 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800443c:	f7fe fb8e 	bl	8002b5c <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b02      	cmp	r3, #2
 8004448:	d902      	bls.n	8004450 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	73fb      	strb	r3, [r7, #15]
        break;
 800444e:	e005      	b.n	800445c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004450:	4b36      	ldr	r3, [pc, #216]	; (800452c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1ef      	bne.n	800443c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800445c:	7bfb      	ldrb	r3, [r7, #15]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d15f      	bne.n	8004522 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d110      	bne.n	800448a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004468:	4b30      	ldr	r3, [pc, #192]	; (800452c <RCCEx_PLLSAI1_Config+0x1e0>)
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004470:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	6892      	ldr	r2, [r2, #8]
 8004478:	0211      	lsls	r1, r2, #8
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	68d2      	ldr	r2, [r2, #12]
 800447e:	06d2      	lsls	r2, r2, #27
 8004480:	430a      	orrs	r2, r1
 8004482:	492a      	ldr	r1, [pc, #168]	; (800452c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004484:	4313      	orrs	r3, r2
 8004486:	610b      	str	r3, [r1, #16]
 8004488:	e027      	b.n	80044da <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	2b01      	cmp	r3, #1
 800448e:	d112      	bne.n	80044b6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004490:	4b26      	ldr	r3, [pc, #152]	; (800452c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004498:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	6892      	ldr	r2, [r2, #8]
 80044a0:	0211      	lsls	r1, r2, #8
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	6912      	ldr	r2, [r2, #16]
 80044a6:	0852      	lsrs	r2, r2, #1
 80044a8:	3a01      	subs	r2, #1
 80044aa:	0552      	lsls	r2, r2, #21
 80044ac:	430a      	orrs	r2, r1
 80044ae:	491f      	ldr	r1, [pc, #124]	; (800452c <RCCEx_PLLSAI1_Config+0x1e0>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	610b      	str	r3, [r1, #16]
 80044b4:	e011      	b.n	80044da <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044b6:	4b1d      	ldr	r3, [pc, #116]	; (800452c <RCCEx_PLLSAI1_Config+0x1e0>)
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80044be:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	6892      	ldr	r2, [r2, #8]
 80044c6:	0211      	lsls	r1, r2, #8
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	6952      	ldr	r2, [r2, #20]
 80044cc:	0852      	lsrs	r2, r2, #1
 80044ce:	3a01      	subs	r2, #1
 80044d0:	0652      	lsls	r2, r2, #25
 80044d2:	430a      	orrs	r2, r1
 80044d4:	4915      	ldr	r1, [pc, #84]	; (800452c <RCCEx_PLLSAI1_Config+0x1e0>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80044da:	4b14      	ldr	r3, [pc, #80]	; (800452c <RCCEx_PLLSAI1_Config+0x1e0>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a13      	ldr	r2, [pc, #76]	; (800452c <RCCEx_PLLSAI1_Config+0x1e0>)
 80044e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044e4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044e6:	f7fe fb39 	bl	8002b5c <HAL_GetTick>
 80044ea:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80044ec:	e009      	b.n	8004502 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044ee:	f7fe fb35 	bl	8002b5c <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d902      	bls.n	8004502 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	73fb      	strb	r3, [r7, #15]
          break;
 8004500:	e005      	b.n	800450e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004502:	4b0a      	ldr	r3, [pc, #40]	; (800452c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d0ef      	beq.n	80044ee <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800450e:	7bfb      	ldrb	r3, [r7, #15]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d106      	bne.n	8004522 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004514:	4b05      	ldr	r3, [pc, #20]	; (800452c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004516:	691a      	ldr	r2, [r3, #16]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	4903      	ldr	r1, [pc, #12]	; (800452c <RCCEx_PLLSAI1_Config+0x1e0>)
 800451e:	4313      	orrs	r3, r2
 8004520:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004522:	7bfb      	ldrb	r3, [r7, #15]
}
 8004524:	4618      	mov	r0, r3
 8004526:	3710      	adds	r7, #16
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	40021000 	.word	0x40021000

08004530 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d079      	beq.n	8004636 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d106      	bne.n	800455c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f7fe f814 	bl	8002584 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2202      	movs	r2, #2
 8004560:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	f003 0310 	and.w	r3, r3, #16
 800456e:	2b10      	cmp	r3, #16
 8004570:	d058      	beq.n	8004624 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	22ca      	movs	r2, #202	; 0xca
 8004578:	625a      	str	r2, [r3, #36]	; 0x24
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2253      	movs	r2, #83	; 0x53
 8004580:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f880 	bl	8004688 <RTC_EnterInitMode>
 8004588:	4603      	mov	r3, r0
 800458a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800458c:	7bfb      	ldrb	r3, [r7, #15]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d127      	bne.n	80045e2 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	6812      	ldr	r2, [r2, #0]
 800459c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80045a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045a4:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	6899      	ldr	r1, [r3, #8]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685a      	ldr	r2, [r3, #4]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	431a      	orrs	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	431a      	orrs	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	430a      	orrs	r2, r1
 80045c2:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	68d2      	ldr	r2, [r2, #12]
 80045cc:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	6919      	ldr	r1, [r3, #16]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	041a      	lsls	r2, r3, #16
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	430a      	orrs	r2, r1
 80045e0:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 f884 	bl	80046f0 <RTC_ExitInitMode>
 80045e8:	4603      	mov	r3, r0
 80045ea:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80045ec:	7bfb      	ldrb	r3, [r7, #15]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d113      	bne.n	800461a <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f022 0203 	bic.w	r2, r2, #3
 8004600:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	69da      	ldr	r2, [r3, #28]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	695b      	ldr	r3, [r3, #20]
 8004610:	431a      	orrs	r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	430a      	orrs	r2, r1
 8004618:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	22ff      	movs	r2, #255	; 0xff
 8004620:	625a      	str	r2, [r3, #36]	; 0x24
 8004622:	e001      	b.n	8004628 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004624:	2300      	movs	r3, #0
 8004626:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004628:	7bfb      	ldrb	r3, [r7, #15]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d103      	bne.n	8004636 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 8004636:	7bfb      	ldrb	r3, [r7, #15]
}
 8004638:	4618      	mov	r0, r3
 800463a:	3710      	adds	r7, #16
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a0d      	ldr	r2, [pc, #52]	; (8004684 <HAL_RTC_WaitForSynchro+0x44>)
 800464e:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8004650:	f7fe fa84 	bl	8002b5c <HAL_GetTick>
 8004654:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004656:	e009      	b.n	800466c <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004658:	f7fe fa80 	bl	8002b5c <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004666:	d901      	bls.n	800466c <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e007      	b.n	800467c <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	f003 0320 	and.w	r3, r3, #32
 8004676:	2b00      	cmp	r3, #0
 8004678:	d0ee      	beq.n	8004658 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3710      	adds	r7, #16
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	0003ff5f 	.word	0x0003ff5f

08004688 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004690:	2300      	movs	r3, #0
 8004692:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d120      	bne.n	80046e4 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f04f 32ff 	mov.w	r2, #4294967295
 80046aa:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80046ac:	f7fe fa56 	bl	8002b5c <HAL_GetTick>
 80046b0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80046b2:	e00d      	b.n	80046d0 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80046b4:	f7fe fa52 	bl	8002b5c <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046c2:	d905      	bls.n	80046d0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2203      	movs	r2, #3
 80046cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d102      	bne.n	80046e4 <RTC_EnterInitMode+0x5c>
 80046de:	7bfb      	ldrb	r3, [r7, #15]
 80046e0:	2b03      	cmp	r3, #3
 80046e2:	d1e7      	bne.n	80046b4 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80046e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3710      	adds	r7, #16
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
	...

080046f0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046f8:	2300      	movs	r3, #0
 80046fa:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80046fc:	4b1a      	ldr	r3, [pc, #104]	; (8004768 <RTC_ExitInitMode+0x78>)
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	4a19      	ldr	r2, [pc, #100]	; (8004768 <RTC_ExitInitMode+0x78>)
 8004702:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004706:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004708:	4b17      	ldr	r3, [pc, #92]	; (8004768 <RTC_ExitInitMode+0x78>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f003 0320 	and.w	r3, r3, #32
 8004710:	2b00      	cmp	r3, #0
 8004712:	d10c      	bne.n	800472e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f7ff ff93 	bl	8004640 <HAL_RTC_WaitForSynchro>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d01e      	beq.n	800475e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2203      	movs	r2, #3
 8004724:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	73fb      	strb	r3, [r7, #15]
 800472c:	e017      	b.n	800475e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800472e:	4b0e      	ldr	r3, [pc, #56]	; (8004768 <RTC_ExitInitMode+0x78>)
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	4a0d      	ldr	r2, [pc, #52]	; (8004768 <RTC_ExitInitMode+0x78>)
 8004734:	f023 0320 	bic.w	r3, r3, #32
 8004738:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f7ff ff80 	bl	8004640 <HAL_RTC_WaitForSynchro>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d005      	beq.n	8004752 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2203      	movs	r2, #3
 800474a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004752:	4b05      	ldr	r3, [pc, #20]	; (8004768 <RTC_ExitInitMode+0x78>)
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	4a04      	ldr	r2, [pc, #16]	; (8004768 <RTC_ExitInitMode+0x78>)
 8004758:	f043 0320 	orr.w	r3, r3, #32
 800475c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800475e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004760:	4618      	mov	r0, r3
 8004762:	3710      	adds	r7, #16
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	40002800 	.word	0x40002800

0800476c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e095      	b.n	80048aa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004782:	2b00      	cmp	r3, #0
 8004784:	d108      	bne.n	8004798 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800478e:	d009      	beq.n	80047a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	61da      	str	r2, [r3, #28]
 8004796:	e005      	b.n	80047a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d106      	bne.n	80047c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f7fd ff10 	bl	80025e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2202      	movs	r2, #2
 80047c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047da:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047e4:	d902      	bls.n	80047ec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80047e6:	2300      	movs	r3, #0
 80047e8:	60fb      	str	r3, [r7, #12]
 80047ea:	e002      	b.n	80047f2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80047ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047f0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80047fa:	d007      	beq.n	800480c <HAL_SPI_Init+0xa0>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004804:	d002      	beq.n	800480c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800481c:	431a      	orrs	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	431a      	orrs	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	f003 0301 	and.w	r3, r3, #1
 8004830:	431a      	orrs	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800483a:	431a      	orrs	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	69db      	ldr	r3, [r3, #28]
 8004840:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004844:	431a      	orrs	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800484e:	ea42 0103 	orr.w	r1, r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004856:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	0c1b      	lsrs	r3, r3, #16
 8004868:	f003 0204 	and.w	r2, r3, #4
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004870:	f003 0310 	and.w	r3, r3, #16
 8004874:	431a      	orrs	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800487a:	f003 0308 	and.w	r3, r3, #8
 800487e:	431a      	orrs	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004888:	ea42 0103 	orr.w	r1, r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	430a      	orrs	r2, r1
 8004898:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3710      	adds	r7, #16
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048b2:	b580      	push	{r7, lr}
 80048b4:	b088      	sub	sp, #32
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	60f8      	str	r0, [r7, #12]
 80048ba:	60b9      	str	r1, [r7, #8]
 80048bc:	603b      	str	r3, [r7, #0]
 80048be:	4613      	mov	r3, r2
 80048c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80048c2:	2300      	movs	r3, #0
 80048c4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d101      	bne.n	80048d4 <HAL_SPI_Transmit+0x22>
 80048d0:	2302      	movs	r3, #2
 80048d2:	e15f      	b.n	8004b94 <HAL_SPI_Transmit+0x2e2>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048dc:	f7fe f93e 	bl	8002b5c <HAL_GetTick>
 80048e0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80048e2:	88fb      	ldrh	r3, [r7, #6]
 80048e4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d002      	beq.n	80048f8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80048f2:	2302      	movs	r3, #2
 80048f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80048f6:	e148      	b.n	8004b8a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d002      	beq.n	8004904 <HAL_SPI_Transmit+0x52>
 80048fe:	88fb      	ldrh	r3, [r7, #6]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d102      	bne.n	800490a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004908:	e13f      	b.n	8004b8a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2203      	movs	r2, #3
 800490e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	68ba      	ldr	r2, [r7, #8]
 800491c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	88fa      	ldrh	r2, [r7, #6]
 8004922:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	88fa      	ldrh	r2, [r7, #6]
 8004928:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2200      	movs	r2, #0
 800493c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2200      	movs	r2, #0
 800494a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004954:	d10f      	bne.n	8004976 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004964:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004974:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004980:	2b40      	cmp	r3, #64	; 0x40
 8004982:	d007      	beq.n	8004994 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004992:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800499c:	d94f      	bls.n	8004a3e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d002      	beq.n	80049ac <HAL_SPI_Transmit+0xfa>
 80049a6:	8afb      	ldrh	r3, [r7, #22]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d142      	bne.n	8004a32 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b0:	881a      	ldrh	r2, [r3, #0]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049bc:	1c9a      	adds	r2, r3, #2
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	3b01      	subs	r3, #1
 80049ca:	b29a      	uxth	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80049d0:	e02f      	b.n	8004a32 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f003 0302 	and.w	r3, r3, #2
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d112      	bne.n	8004a06 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e4:	881a      	ldrh	r2, [r3, #0]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f0:	1c9a      	adds	r2, r3, #2
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	3b01      	subs	r3, #1
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a04:	e015      	b.n	8004a32 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a06:	f7fe f8a9 	bl	8002b5c <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	683a      	ldr	r2, [r7, #0]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d803      	bhi.n	8004a1e <HAL_SPI_Transmit+0x16c>
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a1c:	d102      	bne.n	8004a24 <HAL_SPI_Transmit+0x172>
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d106      	bne.n	8004a32 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004a30:	e0ab      	b.n	8004b8a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1ca      	bne.n	80049d2 <HAL_SPI_Transmit+0x120>
 8004a3c:	e080      	b.n	8004b40 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d002      	beq.n	8004a4c <HAL_SPI_Transmit+0x19a>
 8004a46:	8afb      	ldrh	r3, [r7, #22]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d174      	bne.n	8004b36 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d912      	bls.n	8004a7c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5a:	881a      	ldrh	r2, [r3, #0]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a66:	1c9a      	adds	r2, r3, #2
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	3b02      	subs	r3, #2
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a7a:	e05c      	b.n	8004b36 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	330c      	adds	r3, #12
 8004a86:	7812      	ldrb	r2, [r2, #0]
 8004a88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8e:	1c5a      	adds	r2, r3, #1
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004aa2:	e048      	b.n	8004b36 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d12b      	bne.n	8004b0a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d912      	bls.n	8004ae2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac0:	881a      	ldrh	r2, [r3, #0]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004acc:	1c9a      	adds	r2, r3, #2
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	3b02      	subs	r3, #2
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ae0:	e029      	b.n	8004b36 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	330c      	adds	r3, #12
 8004aec:	7812      	ldrb	r2, [r2, #0]
 8004aee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af4:	1c5a      	adds	r2, r3, #1
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	3b01      	subs	r3, #1
 8004b02:	b29a      	uxth	r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b08:	e015      	b.n	8004b36 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b0a:	f7fe f827 	bl	8002b5c <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	683a      	ldr	r2, [r7, #0]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d803      	bhi.n	8004b22 <HAL_SPI_Transmit+0x270>
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b20:	d102      	bne.n	8004b28 <HAL_SPI_Transmit+0x276>
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d106      	bne.n	8004b36 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004b34:	e029      	b.n	8004b8a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1b1      	bne.n	8004aa4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b40:	69ba      	ldr	r2, [r7, #24]
 8004b42:	6839      	ldr	r1, [r7, #0]
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f000 fb69 	bl	800521c <SPI_EndRxTxTransaction>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d002      	beq.n	8004b56 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2220      	movs	r2, #32
 8004b54:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10a      	bne.n	8004b74 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b5e:	2300      	movs	r3, #0
 8004b60:	613b      	str	r3, [r7, #16]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	613b      	str	r3, [r7, #16]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	613b      	str	r3, [r7, #16]
 8004b72:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d002      	beq.n	8004b82 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	77fb      	strb	r3, [r7, #31]
 8004b80:	e003      	b.n	8004b8a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2201      	movs	r2, #1
 8004b86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004b92:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3720      	adds	r7, #32
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b08a      	sub	sp, #40	; 0x28
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
 8004ba8:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004baa:	2301      	movs	r3, #1
 8004bac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d101      	bne.n	8004bc2 <HAL_SPI_TransmitReceive+0x26>
 8004bbe:	2302      	movs	r3, #2
 8004bc0:	e20a      	b.n	8004fd8 <HAL_SPI_TransmitReceive+0x43c>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004bca:	f7fd ffc7 	bl	8002b5c <HAL_GetTick>
 8004bce:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004bd6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004bde:	887b      	ldrh	r3, [r7, #2]
 8004be0:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004be2:	887b      	ldrh	r3, [r7, #2]
 8004be4:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004be6:	7efb      	ldrb	r3, [r7, #27]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d00e      	beq.n	8004c0a <HAL_SPI_TransmitReceive+0x6e>
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bf2:	d106      	bne.n	8004c02 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d102      	bne.n	8004c02 <HAL_SPI_TransmitReceive+0x66>
 8004bfc:	7efb      	ldrb	r3, [r7, #27]
 8004bfe:	2b04      	cmp	r3, #4
 8004c00:	d003      	beq.n	8004c0a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004c02:	2302      	movs	r3, #2
 8004c04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004c08:	e1e0      	b.n	8004fcc <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d005      	beq.n	8004c1c <HAL_SPI_TransmitReceive+0x80>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d002      	beq.n	8004c1c <HAL_SPI_TransmitReceive+0x80>
 8004c16:	887b      	ldrh	r3, [r7, #2]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d103      	bne.n	8004c24 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004c22:	e1d3      	b.n	8004fcc <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	2b04      	cmp	r3, #4
 8004c2e:	d003      	beq.n	8004c38 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2205      	movs	r2, #5
 8004c34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	887a      	ldrh	r2, [r7, #2]
 8004c48:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	887a      	ldrh	r2, [r7, #2]
 8004c50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	68ba      	ldr	r2, [r7, #8]
 8004c58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	887a      	ldrh	r2, [r7, #2]
 8004c5e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	887a      	ldrh	r2, [r7, #2]
 8004c64:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c7a:	d802      	bhi.n	8004c82 <HAL_SPI_TransmitReceive+0xe6>
 8004c7c:	8a3b      	ldrh	r3, [r7, #16]
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d908      	bls.n	8004c94 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	685a      	ldr	r2, [r3, #4]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c90:	605a      	str	r2, [r3, #4]
 8004c92:	e007      	b.n	8004ca4 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	685a      	ldr	r2, [r3, #4]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ca2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cae:	2b40      	cmp	r3, #64	; 0x40
 8004cb0:	d007      	beq.n	8004cc2 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cc0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004cca:	f240 8081 	bls.w	8004dd0 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d002      	beq.n	8004cdc <HAL_SPI_TransmitReceive+0x140>
 8004cd6:	8a7b      	ldrh	r3, [r7, #18]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d16d      	bne.n	8004db8 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce0:	881a      	ldrh	r2, [r3, #0]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cec:	1c9a      	adds	r2, r3, #2
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d00:	e05a      	b.n	8004db8 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f003 0302 	and.w	r3, r3, #2
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d11b      	bne.n	8004d48 <HAL_SPI_TransmitReceive+0x1ac>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d016      	beq.n	8004d48 <HAL_SPI_TransmitReceive+0x1ac>
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d113      	bne.n	8004d48 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d24:	881a      	ldrh	r2, [r3, #0]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d30:	1c9a      	adds	r2, r3, #2
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d44:	2300      	movs	r3, #0
 8004d46:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d11c      	bne.n	8004d90 <HAL_SPI_TransmitReceive+0x1f4>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d016      	beq.n	8004d90 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68da      	ldr	r2, [r3, #12]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6c:	b292      	uxth	r2, r2
 8004d6e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d74:	1c9a      	adds	r2, r3, #2
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	3b01      	subs	r3, #1
 8004d84:	b29a      	uxth	r2, r3
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004d90:	f7fd fee4 	bl	8002b5c <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d80b      	bhi.n	8004db8 <HAL_SPI_TransmitReceive+0x21c>
 8004da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da6:	d007      	beq.n	8004db8 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2201      	movs	r2, #1
 8004db2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004db6:	e109      	b.n	8004fcc <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d19f      	bne.n	8004d02 <HAL_SPI_TransmitReceive+0x166>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d199      	bne.n	8004d02 <HAL_SPI_TransmitReceive+0x166>
 8004dce:	e0e3      	b.n	8004f98 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d003      	beq.n	8004de0 <HAL_SPI_TransmitReceive+0x244>
 8004dd8:	8a7b      	ldrh	r3, [r7, #18]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	f040 80cf 	bne.w	8004f7e <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d912      	bls.n	8004e10 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dee:	881a      	ldrh	r2, [r3, #0]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfa:	1c9a      	adds	r2, r3, #2
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	3b02      	subs	r3, #2
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e0e:	e0b6      	b.n	8004f7e <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	330c      	adds	r3, #12
 8004e1a:	7812      	ldrb	r2, [r2, #0]
 8004e1c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e22:	1c5a      	adds	r2, r3, #1
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	b29a      	uxth	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e36:	e0a2      	b.n	8004f7e <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d134      	bne.n	8004eb0 <HAL_SPI_TransmitReceive+0x314>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d02f      	beq.n	8004eb0 <HAL_SPI_TransmitReceive+0x314>
 8004e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d12c      	bne.n	8004eb0 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d912      	bls.n	8004e86 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e64:	881a      	ldrh	r2, [r3, #0]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e70:	1c9a      	adds	r2, r3, #2
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	3b02      	subs	r3, #2
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e84:	e012      	b.n	8004eac <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	330c      	adds	r3, #12
 8004e90:	7812      	ldrb	r2, [r2, #0]
 8004e92:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e98:	1c5a      	adds	r2, r3, #1
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004eac:	2300      	movs	r3, #0
 8004eae:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f003 0301 	and.w	r3, r3, #1
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d148      	bne.n	8004f50 <HAL_SPI_TransmitReceive+0x3b4>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d042      	beq.n	8004f50 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d923      	bls.n	8004f1e <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68da      	ldr	r2, [r3, #12]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee0:	b292      	uxth	r2, r2
 8004ee2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee8:	1c9a      	adds	r2, r3, #2
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	3b02      	subs	r3, #2
 8004ef8:	b29a      	uxth	r2, r3
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d81f      	bhi.n	8004f4c <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	685a      	ldr	r2, [r3, #4]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f1a:	605a      	str	r2, [r3, #4]
 8004f1c:	e016      	b.n	8004f4c <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f103 020c 	add.w	r2, r3, #12
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2a:	7812      	ldrb	r2, [r2, #0]
 8004f2c:	b2d2      	uxtb	r2, r2
 8004f2e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f34:	1c5a      	adds	r2, r3, #1
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	3b01      	subs	r3, #1
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f50:	f7fd fe04 	bl	8002b5c <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d803      	bhi.n	8004f68 <HAL_SPI_TransmitReceive+0x3cc>
 8004f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f66:	d102      	bne.n	8004f6e <HAL_SPI_TransmitReceive+0x3d2>
 8004f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d107      	bne.n	8004f7e <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004f7c:	e026      	b.n	8004fcc <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f47f af57 	bne.w	8004e38 <HAL_SPI_TransmitReceive+0x29c>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	f47f af50 	bne.w	8004e38 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f98:	69fa      	ldr	r2, [r7, #28]
 8004f9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f9c:	68f8      	ldr	r0, [r7, #12]
 8004f9e:	f000 f93d 	bl	800521c <SPI_EndRxTxTransaction>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d005      	beq.n	8004fb4 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2220      	movs	r2, #32
 8004fb2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d003      	beq.n	8004fc4 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fc2:	e003      	b.n	8004fcc <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004fd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3728      	adds	r7, #40	; 0x28
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b088      	sub	sp, #32
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	603b      	str	r3, [r7, #0]
 8004fec:	4613      	mov	r3, r2
 8004fee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ff0:	f7fd fdb4 	bl	8002b5c <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff8:	1a9b      	subs	r3, r3, r2
 8004ffa:	683a      	ldr	r2, [r7, #0]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005000:	f7fd fdac 	bl	8002b5c <HAL_GetTick>
 8005004:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005006:	4b39      	ldr	r3, [pc, #228]	; (80050ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	015b      	lsls	r3, r3, #5
 800500c:	0d1b      	lsrs	r3, r3, #20
 800500e:	69fa      	ldr	r2, [r7, #28]
 8005010:	fb02 f303 	mul.w	r3, r2, r3
 8005014:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005016:	e054      	b.n	80050c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800501e:	d050      	beq.n	80050c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005020:	f7fd fd9c 	bl	8002b5c <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	69fa      	ldr	r2, [r7, #28]
 800502c:	429a      	cmp	r2, r3
 800502e:	d902      	bls.n	8005036 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d13d      	bne.n	80050b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	685a      	ldr	r2, [r3, #4]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005044:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800504e:	d111      	bne.n	8005074 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005058:	d004      	beq.n	8005064 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005062:	d107      	bne.n	8005074 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005072:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005078:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800507c:	d10f      	bne.n	800509e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800508c:	601a      	str	r2, [r3, #0]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800509c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e017      	b.n	80050e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d101      	bne.n	80050bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80050b8:	2300      	movs	r3, #0
 80050ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	3b01      	subs	r3, #1
 80050c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	689a      	ldr	r2, [r3, #8]
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	4013      	ands	r3, r2
 80050cc:	68ba      	ldr	r2, [r7, #8]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	bf0c      	ite	eq
 80050d2:	2301      	moveq	r3, #1
 80050d4:	2300      	movne	r3, #0
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	461a      	mov	r2, r3
 80050da:	79fb      	ldrb	r3, [r7, #7]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d19b      	bne.n	8005018 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3720      	adds	r7, #32
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	2000006c 	.word	0x2000006c

080050f0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b08a      	sub	sp, #40	; 0x28
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]
 80050fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80050fe:	2300      	movs	r3, #0
 8005100:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005102:	f7fd fd2b 	bl	8002b5c <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510a:	1a9b      	subs	r3, r3, r2
 800510c:	683a      	ldr	r2, [r7, #0]
 800510e:	4413      	add	r3, r2
 8005110:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005112:	f7fd fd23 	bl	8002b5c <HAL_GetTick>
 8005116:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	330c      	adds	r3, #12
 800511e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005120:	4b3d      	ldr	r3, [pc, #244]	; (8005218 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	4613      	mov	r3, r2
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	4413      	add	r3, r2
 800512a:	00da      	lsls	r2, r3, #3
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	0d1b      	lsrs	r3, r3, #20
 8005130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005132:	fb02 f303 	mul.w	r3, r2, r3
 8005136:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005138:	e060      	b.n	80051fc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005140:	d107      	bne.n	8005152 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d104      	bne.n	8005152 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	b2db      	uxtb	r3, r3
 800514e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005150:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005158:	d050      	beq.n	80051fc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800515a:	f7fd fcff 	bl	8002b5c <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	6a3b      	ldr	r3, [r7, #32]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005166:	429a      	cmp	r2, r3
 8005168:	d902      	bls.n	8005170 <SPI_WaitFifoStateUntilTimeout+0x80>
 800516a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516c:	2b00      	cmp	r3, #0
 800516e:	d13d      	bne.n	80051ec <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	685a      	ldr	r2, [r3, #4]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800517e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005188:	d111      	bne.n	80051ae <SPI_WaitFifoStateUntilTimeout+0xbe>
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005192:	d004      	beq.n	800519e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800519c:	d107      	bne.n	80051ae <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051ac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051b6:	d10f      	bne.n	80051d8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051c6:	601a      	str	r2, [r3, #0]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051d6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e010      	b.n	800520e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d101      	bne.n	80051f6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80051f2:	2300      	movs	r3, #0
 80051f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	3b01      	subs	r3, #1
 80051fa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	689a      	ldr	r2, [r3, #8]
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	4013      	ands	r3, r2
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	429a      	cmp	r2, r3
 800520a:	d196      	bne.n	800513a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3728      	adds	r7, #40	; 0x28
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	2000006c 	.word	0x2000006c

0800521c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b086      	sub	sp, #24
 8005220:	af02      	add	r7, sp, #8
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	9300      	str	r3, [sp, #0]
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	2200      	movs	r2, #0
 8005230:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005234:	68f8      	ldr	r0, [r7, #12]
 8005236:	f7ff ff5b 	bl	80050f0 <SPI_WaitFifoStateUntilTimeout>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d007      	beq.n	8005250 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005244:	f043 0220 	orr.w	r2, r3, #32
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e027      	b.n	80052a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	9300      	str	r3, [sp, #0]
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	2200      	movs	r2, #0
 8005258:	2180      	movs	r1, #128	; 0x80
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f7ff fec0 	bl	8004fe0 <SPI_WaitFlagStateUntilTimeout>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d007      	beq.n	8005276 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800526a:	f043 0220 	orr.w	r2, r3, #32
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e014      	b.n	80052a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	9300      	str	r3, [sp, #0]
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	2200      	movs	r2, #0
 800527e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005282:	68f8      	ldr	r0, [r7, #12]
 8005284:	f7ff ff34 	bl	80050f0 <SPI_WaitFifoStateUntilTimeout>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d007      	beq.n	800529e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005292:	f043 0220 	orr.w	r2, r3, #32
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e000      	b.n	80052a0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d101      	bne.n	80052ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e049      	b.n	800534e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d106      	bne.n	80052d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 f841 	bl	8005356 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2202      	movs	r2, #2
 80052d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	3304      	adds	r3, #4
 80052e4:	4619      	mov	r1, r3
 80052e6:	4610      	mov	r0, r2
 80052e8:	f000 f9be 	bl	8005668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3708      	adds	r7, #8
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005356:	b480      	push	{r7}
 8005358:	b083      	sub	sp, #12
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800535e:	bf00      	nop
 8005360:	370c      	adds	r7, #12
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
	...

0800536c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800537a:	b2db      	uxtb	r3, r3
 800537c:	2b01      	cmp	r3, #1
 800537e:	d001      	beq.n	8005384 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e03b      	b.n	80053fc <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2202      	movs	r2, #2
 8005388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68da      	ldr	r2, [r3, #12]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f042 0201 	orr.w	r2, r2, #1
 800539a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a19      	ldr	r2, [pc, #100]	; (8005408 <HAL_TIM_Base_Start_IT+0x9c>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d009      	beq.n	80053ba <HAL_TIM_Base_Start_IT+0x4e>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ae:	d004      	beq.n	80053ba <HAL_TIM_Base_Start_IT+0x4e>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a15      	ldr	r2, [pc, #84]	; (800540c <HAL_TIM_Base_Start_IT+0xa0>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d115      	bne.n	80053e6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	689a      	ldr	r2, [r3, #8]
 80053c0:	4b13      	ldr	r3, [pc, #76]	; (8005410 <HAL_TIM_Base_Start_IT+0xa4>)
 80053c2:	4013      	ands	r3, r2
 80053c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2b06      	cmp	r3, #6
 80053ca:	d015      	beq.n	80053f8 <HAL_TIM_Base_Start_IT+0x8c>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053d2:	d011      	beq.n	80053f8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f042 0201 	orr.w	r2, r2, #1
 80053e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053e4:	e008      	b.n	80053f8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f042 0201 	orr.w	r2, r2, #1
 80053f4:	601a      	str	r2, [r3, #0]
 80053f6:	e000      	b.n	80053fa <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3714      	adds	r7, #20
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr
 8005408:	40012c00 	.word	0x40012c00
 800540c:	40014000 	.word	0x40014000
 8005410:	00010007 	.word	0x00010007

08005414 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	f003 0302 	and.w	r3, r3, #2
 8005432:	2b00      	cmp	r3, #0
 8005434:	d020      	beq.n	8005478 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f003 0302 	and.w	r3, r3, #2
 800543c:	2b00      	cmp	r3, #0
 800543e:	d01b      	beq.n	8005478 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f06f 0202 	mvn.w	r2, #2
 8005448:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2201      	movs	r2, #1
 800544e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	699b      	ldr	r3, [r3, #24]
 8005456:	f003 0303 	and.w	r3, r3, #3
 800545a:	2b00      	cmp	r3, #0
 800545c:	d003      	beq.n	8005466 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 f8e4 	bl	800562c <HAL_TIM_IC_CaptureCallback>
 8005464:	e005      	b.n	8005472 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 f8d6 	bl	8005618 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 f8e7 	bl	8005640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	f003 0304 	and.w	r3, r3, #4
 800547e:	2b00      	cmp	r3, #0
 8005480:	d020      	beq.n	80054c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f003 0304 	and.w	r3, r3, #4
 8005488:	2b00      	cmp	r3, #0
 800548a:	d01b      	beq.n	80054c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f06f 0204 	mvn.w	r2, #4
 8005494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2202      	movs	r2, #2
 800549a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d003      	beq.n	80054b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 f8be 	bl	800562c <HAL_TIM_IC_CaptureCallback>
 80054b0:	e005      	b.n	80054be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 f8b0 	bl	8005618 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 f8c1 	bl	8005640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	f003 0308 	and.w	r3, r3, #8
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d020      	beq.n	8005510 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f003 0308 	and.w	r3, r3, #8
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d01b      	beq.n	8005510 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f06f 0208 	mvn.w	r2, #8
 80054e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2204      	movs	r2, #4
 80054e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	69db      	ldr	r3, [r3, #28]
 80054ee:	f003 0303 	and.w	r3, r3, #3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d003      	beq.n	80054fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 f898 	bl	800562c <HAL_TIM_IC_CaptureCallback>
 80054fc:	e005      	b.n	800550a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 f88a 	bl	8005618 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 f89b 	bl	8005640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	f003 0310 	and.w	r3, r3, #16
 8005516:	2b00      	cmp	r3, #0
 8005518:	d020      	beq.n	800555c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f003 0310 	and.w	r3, r3, #16
 8005520:	2b00      	cmp	r3, #0
 8005522:	d01b      	beq.n	800555c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f06f 0210 	mvn.w	r2, #16
 800552c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2208      	movs	r2, #8
 8005532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	69db      	ldr	r3, [r3, #28]
 800553a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800553e:	2b00      	cmp	r3, #0
 8005540:	d003      	beq.n	800554a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 f872 	bl	800562c <HAL_TIM_IC_CaptureCallback>
 8005548:	e005      	b.n	8005556 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 f864 	bl	8005618 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 f875 	bl	8005640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00c      	beq.n	8005580 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f003 0301 	and.w	r3, r3, #1
 800556c:	2b00      	cmp	r3, #0
 800556e:	d007      	beq.n	8005580 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f06f 0201 	mvn.w	r2, #1
 8005578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f7fc ffca 	bl	8002514 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00c      	beq.n	80055a4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005590:	2b00      	cmp	r3, #0
 8005592:	d007      	beq.n	80055a4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800559c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 f8d0 	bl	8005744 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00c      	beq.n	80055c8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d007      	beq.n	80055c8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80055c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 f8c8 	bl	8005758 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00c      	beq.n	80055ec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d007      	beq.n	80055ec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 f834 	bl	8005654 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	f003 0320 	and.w	r3, r3, #32
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00c      	beq.n	8005610 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f003 0320 	and.w	r3, r3, #32
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d007      	beq.n	8005610 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f06f 0220 	mvn.w	r2, #32
 8005608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f890 	bl	8005730 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005610:	bf00      	nop
 8005612:	3710      	adds	r7, #16
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005620:	bf00      	nop
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005634:	bf00      	nop
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005648:	bf00      	nop
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800565c:	bf00      	nop
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005668:	b480      	push	{r7}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a2a      	ldr	r2, [pc, #168]	; (8005724 <TIM_Base_SetConfig+0xbc>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d003      	beq.n	8005688 <TIM_Base_SetConfig+0x20>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005686:	d108      	bne.n	800569a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800568e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	4313      	orrs	r3, r2
 8005698:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a21      	ldr	r2, [pc, #132]	; (8005724 <TIM_Base_SetConfig+0xbc>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d00b      	beq.n	80056ba <TIM_Base_SetConfig+0x52>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056a8:	d007      	beq.n	80056ba <TIM_Base_SetConfig+0x52>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a1e      	ldr	r2, [pc, #120]	; (8005728 <TIM_Base_SetConfig+0xc0>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d003      	beq.n	80056ba <TIM_Base_SetConfig+0x52>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a1d      	ldr	r2, [pc, #116]	; (800572c <TIM_Base_SetConfig+0xc4>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d108      	bne.n	80056cc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	695b      	ldr	r3, [r3, #20]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	689a      	ldr	r2, [r3, #8]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a0c      	ldr	r2, [pc, #48]	; (8005724 <TIM_Base_SetConfig+0xbc>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d007      	beq.n	8005708 <TIM_Base_SetConfig+0xa0>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a0b      	ldr	r2, [pc, #44]	; (8005728 <TIM_Base_SetConfig+0xc0>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d003      	beq.n	8005708 <TIM_Base_SetConfig+0xa0>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a0a      	ldr	r2, [pc, #40]	; (800572c <TIM_Base_SetConfig+0xc4>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d103      	bne.n	8005710 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	691a      	ldr	r2, [r3, #16]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	615a      	str	r2, [r3, #20]
}
 8005716:	bf00      	nop
 8005718:	3714      	adds	r7, #20
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	40012c00 	.word	0x40012c00
 8005728:	40014000 	.word	0x40014000
 800572c:	40014400 	.word	0x40014400

08005730 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005738:	bf00      	nop
 800573a:	370c      	adds	r7, #12
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800574c:	bf00      	nop
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005760:	bf00      	nop
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d101      	bne.n	800577e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e040      	b.n	8005800 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005782:	2b00      	cmp	r3, #0
 8005784:	d106      	bne.n	8005794 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f7fc ff9e 	bl	80026d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2224      	movs	r2, #36	; 0x24
 8005798:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f022 0201 	bic.w	r2, r2, #1
 80057a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d002      	beq.n	80057b8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 fdaa 	bl	800630c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 fb7b 	bl	8005eb4 <UART_SetConfig>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d101      	bne.n	80057c8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e01b      	b.n	8005800 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	685a      	ldr	r2, [r3, #4]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	689a      	ldr	r2, [r3, #8]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f042 0201 	orr.w	r2, r2, #1
 80057f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 fe29 	bl	8006450 <UART_CheckIdleState>
 80057fe:	4603      	mov	r3, r0
}
 8005800:	4618      	mov	r0, r3
 8005802:	3708      	adds	r7, #8
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b08a      	sub	sp, #40	; 0x28
 800580c:	af00      	add	r7, sp, #0
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	4613      	mov	r3, r2
 8005814:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800581c:	2b20      	cmp	r3, #32
 800581e:	d137      	bne.n	8005890 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d002      	beq.n	800582c <HAL_UART_Receive_IT+0x24>
 8005826:	88fb      	ldrh	r3, [r7, #6]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d101      	bne.n	8005830 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e030      	b.n	8005892 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a18      	ldr	r2, [pc, #96]	; (800589c <HAL_UART_Receive_IT+0x94>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d01f      	beq.n	8005880 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d018      	beq.n	8005880 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	e853 3f00 	ldrex	r3, [r3]
 800585a:	613b      	str	r3, [r7, #16]
   return(result);
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005862:	627b      	str	r3, [r7, #36]	; 0x24
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	461a      	mov	r2, r3
 800586a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586c:	623b      	str	r3, [r7, #32]
 800586e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005870:	69f9      	ldr	r1, [r7, #28]
 8005872:	6a3a      	ldr	r2, [r7, #32]
 8005874:	e841 2300 	strex	r3, r2, [r1]
 8005878:	61bb      	str	r3, [r7, #24]
   return(result);
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d1e6      	bne.n	800584e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005880:	88fb      	ldrh	r3, [r7, #6]
 8005882:	461a      	mov	r2, r3
 8005884:	68b9      	ldr	r1, [r7, #8]
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f000 fef2 	bl	8006670 <UART_Start_Receive_IT>
 800588c:	4603      	mov	r3, r0
 800588e:	e000      	b.n	8005892 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005890:	2302      	movs	r3, #2
  }
}
 8005892:	4618      	mov	r0, r3
 8005894:	3728      	adds	r7, #40	; 0x28
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	40008000 	.word	0x40008000

080058a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b0ba      	sub	sp, #232	; 0xe8
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	69db      	ldr	r3, [r3, #28]
 80058ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80058c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80058ca:	f640 030f 	movw	r3, #2063	; 0x80f
 80058ce:	4013      	ands	r3, r2
 80058d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80058d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d115      	bne.n	8005908 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80058dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058e0:	f003 0320 	and.w	r3, r3, #32
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d00f      	beq.n	8005908 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80058e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058ec:	f003 0320 	and.w	r3, r3, #32
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d009      	beq.n	8005908 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	f000 82ae 	beq.w	8005e5a <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	4798      	blx	r3
      }
      return;
 8005906:	e2a8      	b.n	8005e5a <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005908:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800590c:	2b00      	cmp	r3, #0
 800590e:	f000 8117 	beq.w	8005b40 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005912:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005916:	f003 0301 	and.w	r3, r3, #1
 800591a:	2b00      	cmp	r3, #0
 800591c:	d106      	bne.n	800592c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800591e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005922:	4b85      	ldr	r3, [pc, #532]	; (8005b38 <HAL_UART_IRQHandler+0x298>)
 8005924:	4013      	ands	r3, r2
 8005926:	2b00      	cmp	r3, #0
 8005928:	f000 810a 	beq.w	8005b40 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800592c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005930:	f003 0301 	and.w	r3, r3, #1
 8005934:	2b00      	cmp	r3, #0
 8005936:	d011      	beq.n	800595c <HAL_UART_IRQHandler+0xbc>
 8005938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800593c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005940:	2b00      	cmp	r3, #0
 8005942:	d00b      	beq.n	800595c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2201      	movs	r2, #1
 800594a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005952:	f043 0201 	orr.w	r2, r3, #1
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800595c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005960:	f003 0302 	and.w	r3, r3, #2
 8005964:	2b00      	cmp	r3, #0
 8005966:	d011      	beq.n	800598c <HAL_UART_IRQHandler+0xec>
 8005968:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800596c:	f003 0301 	and.w	r3, r3, #1
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00b      	beq.n	800598c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2202      	movs	r2, #2
 800597a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005982:	f043 0204 	orr.w	r2, r3, #4
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800598c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005990:	f003 0304 	and.w	r3, r3, #4
 8005994:	2b00      	cmp	r3, #0
 8005996:	d011      	beq.n	80059bc <HAL_UART_IRQHandler+0x11c>
 8005998:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800599c:	f003 0301 	and.w	r3, r3, #1
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00b      	beq.n	80059bc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2204      	movs	r2, #4
 80059aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059b2:	f043 0202 	orr.w	r2, r3, #2
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80059bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059c0:	f003 0308 	and.w	r3, r3, #8
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d017      	beq.n	80059f8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80059c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059cc:	f003 0320 	and.w	r3, r3, #32
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d105      	bne.n	80059e0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80059d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059d8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d00b      	beq.n	80059f8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2208      	movs	r2, #8
 80059e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059ee:	f043 0208 	orr.w	r2, r3, #8
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80059f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d012      	beq.n	8005a2a <HAL_UART_IRQHandler+0x18a>
 8005a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00c      	beq.n	8005a2a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a20:	f043 0220 	orr.w	r2, r3, #32
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f000 8214 	beq.w	8005e5e <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a3a:	f003 0320 	and.w	r3, r3, #32
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00d      	beq.n	8005a5e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a46:	f003 0320 	and.w	r3, r3, #32
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d007      	beq.n	8005a5e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d003      	beq.n	8005a5e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a72:	2b40      	cmp	r3, #64	; 0x40
 8005a74:	d005      	beq.n	8005a82 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005a76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a7a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d04f      	beq.n	8005b22 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 feba 	bl	80067fc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a92:	2b40      	cmp	r3, #64	; 0x40
 8005a94:	d141      	bne.n	8005b1a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	3308      	adds	r3, #8
 8005a9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005aa4:	e853 3f00 	ldrex	r3, [r3]
 8005aa8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005aac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ab0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ab4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	3308      	adds	r3, #8
 8005abe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005ac2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005ac6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005ace:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005ad2:	e841 2300 	strex	r3, r2, [r1]
 8005ad6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005ada:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1d9      	bne.n	8005a96 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d013      	beq.n	8005b12 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005aee:	4a13      	ldr	r2, [pc, #76]	; (8005b3c <HAL_UART_IRQHandler+0x29c>)
 8005af0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005af6:	4618      	mov	r0, r3
 8005af8:	f7fd f980 	bl	8002dfc <HAL_DMA_Abort_IT>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d017      	beq.n	8005b32 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005b0c:	4610      	mov	r0, r2
 8005b0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b10:	e00f      	b.n	8005b32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 f9b8 	bl	8005e88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b18:	e00b      	b.n	8005b32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 f9b4 	bl	8005e88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b20:	e007      	b.n	8005b32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 f9b0 	bl	8005e88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005b30:	e195      	b.n	8005e5e <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b32:	bf00      	nop
    return;
 8005b34:	e193      	b.n	8005e5e <HAL_UART_IRQHandler+0x5be>
 8005b36:	bf00      	nop
 8005b38:	04000120 	.word	0x04000120
 8005b3c:	080068c5 	.word	0x080068c5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	f040 814e 	bne.w	8005de6 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b4e:	f003 0310 	and.w	r3, r3, #16
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	f000 8147 	beq.w	8005de6 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b5c:	f003 0310 	and.w	r3, r3, #16
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	f000 8140 	beq.w	8005de6 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2210      	movs	r2, #16
 8005b6c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b78:	2b40      	cmp	r3, #64	; 0x40
 8005b7a:	f040 80b8 	bne.w	8005cee <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b8a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	f000 8167 	beq.w	8005e62 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005b9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	f080 815f 	bcs.w	8005e62 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005baa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0320 	and.w	r3, r3, #32
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	f040 8086 	bne.w	8005ccc <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005bcc:	e853 3f00 	ldrex	r3, [r3]
 8005bd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005bd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005bd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bdc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	461a      	mov	r2, r3
 8005be6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005bea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005bee:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005bf6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005bfa:	e841 2300 	strex	r3, r2, [r1]
 8005bfe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005c02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d1da      	bne.n	8005bc0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	3308      	adds	r3, #8
 8005c10:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c14:	e853 3f00 	ldrex	r3, [r3]
 8005c18:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c1c:	f023 0301 	bic.w	r3, r3, #1
 8005c20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	3308      	adds	r3, #8
 8005c2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c2e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c32:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c34:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c36:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c3a:	e841 2300 	strex	r3, r2, [r1]
 8005c3e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d1e1      	bne.n	8005c0a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	3308      	adds	r3, #8
 8005c4c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c50:	e853 3f00 	ldrex	r3, [r3]
 8005c54:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	3308      	adds	r3, #8
 8005c66:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c6a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c6c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c6e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c70:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c72:	e841 2300 	strex	r3, r2, [r1]
 8005c76:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d1e3      	bne.n	8005c46 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2220      	movs	r2, #32
 8005c82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c94:	e853 3f00 	ldrex	r3, [r3]
 8005c98:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c9c:	f023 0310 	bic.w	r3, r3, #16
 8005ca0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	461a      	mov	r2, r3
 8005caa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005cae:	65bb      	str	r3, [r7, #88]	; 0x58
 8005cb0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005cb4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005cb6:	e841 2300 	strex	r3, r2, [r1]
 8005cba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005cbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1e4      	bne.n	8005c8c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f7fd f85a 	bl	8002d80 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2202      	movs	r2, #2
 8005cd0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 f8d8 	bl	8005e9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005cec:	e0b9      	b.n	8005e62 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	f000 80ab 	beq.w	8005e66 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8005d10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	f000 80a6 	beq.w	8005e66 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d22:	e853 3f00 	ldrex	r3, [r3]
 8005d26:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	461a      	mov	r2, r3
 8005d38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d3c:	647b      	str	r3, [r7, #68]	; 0x44
 8005d3e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d40:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d44:	e841 2300 	strex	r3, r2, [r1]
 8005d48:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d1e4      	bne.n	8005d1a <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	3308      	adds	r3, #8
 8005d56:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5a:	e853 3f00 	ldrex	r3, [r3]
 8005d5e:	623b      	str	r3, [r7, #32]
   return(result);
 8005d60:	6a3b      	ldr	r3, [r7, #32]
 8005d62:	f023 0301 	bic.w	r3, r3, #1
 8005d66:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	3308      	adds	r3, #8
 8005d70:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d74:	633a      	str	r2, [r7, #48]	; 0x30
 8005d76:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d7c:	e841 2300 	strex	r3, r2, [r1]
 8005d80:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d1e3      	bne.n	8005d50 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2220      	movs	r2, #32
 8005d8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	e853 3f00 	ldrex	r3, [r3]
 8005da8:	60fb      	str	r3, [r7, #12]
   return(result);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f023 0310 	bic.w	r3, r3, #16
 8005db0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	461a      	mov	r2, r3
 8005dba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005dbe:	61fb      	str	r3, [r7, #28]
 8005dc0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc2:	69b9      	ldr	r1, [r7, #24]
 8005dc4:	69fa      	ldr	r2, [r7, #28]
 8005dc6:	e841 2300 	strex	r3, r2, [r1]
 8005dca:	617b      	str	r3, [r7, #20]
   return(result);
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d1e4      	bne.n	8005d9c <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2202      	movs	r2, #2
 8005dd6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005dd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ddc:	4619      	mov	r1, r3
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 f85c 	bl	8005e9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005de4:	e03f      	b.n	8005e66 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00e      	beq.n	8005e10 <HAL_UART_IRQHandler+0x570>
 8005df2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005df6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d008      	beq.n	8005e10 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005e06:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f000 ff57 	bl	8006cbc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e0e:	e02d      	b.n	8005e6c <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00e      	beq.n	8005e3a <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d008      	beq.n	8005e3a <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d01c      	beq.n	8005e6a <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	4798      	blx	r3
    }
    return;
 8005e38:	e017      	b.n	8005e6a <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d012      	beq.n	8005e6c <HAL_UART_IRQHandler+0x5cc>
 8005e46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00c      	beq.n	8005e6c <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 fd4c 	bl	80068f0 <UART_EndTransmit_IT>
    return;
 8005e58:	e008      	b.n	8005e6c <HAL_UART_IRQHandler+0x5cc>
      return;
 8005e5a:	bf00      	nop
 8005e5c:	e006      	b.n	8005e6c <HAL_UART_IRQHandler+0x5cc>
    return;
 8005e5e:	bf00      	nop
 8005e60:	e004      	b.n	8005e6c <HAL_UART_IRQHandler+0x5cc>
      return;
 8005e62:	bf00      	nop
 8005e64:	e002      	b.n	8005e6c <HAL_UART_IRQHandler+0x5cc>
      return;
 8005e66:	bf00      	nop
 8005e68:	e000      	b.n	8005e6c <HAL_UART_IRQHandler+0x5cc>
    return;
 8005e6a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005e6c:	37e8      	adds	r7, #232	; 0xe8
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop

08005e74 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005e7c:	bf00      	nop
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005e90:	bf00      	nop
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ea8:	bf00      	nop
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005eb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005eb8:	b08a      	sub	sp, #40	; 0x28
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	689a      	ldr	r2, [r3, #8]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	431a      	orrs	r2, r3
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	695b      	ldr	r3, [r3, #20]
 8005ed2:	431a      	orrs	r2, r3
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	69db      	ldr	r3, [r3, #28]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	4bb4      	ldr	r3, [pc, #720]	; (80061b4 <UART_SetConfig+0x300>)
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	6812      	ldr	r2, [r2, #0]
 8005eea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005eec:	430b      	orrs	r3, r1
 8005eee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	68da      	ldr	r2, [r3, #12]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	430a      	orrs	r2, r1
 8005f04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4aa9      	ldr	r2, [pc, #676]	; (80061b8 <UART_SetConfig+0x304>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d004      	beq.n	8005f20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6a1b      	ldr	r3, [r3, #32]
 8005f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f30:	430a      	orrs	r2, r1
 8005f32:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4aa0      	ldr	r2, [pc, #640]	; (80061bc <UART_SetConfig+0x308>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d126      	bne.n	8005f8c <UART_SetConfig+0xd8>
 8005f3e:	4ba0      	ldr	r3, [pc, #640]	; (80061c0 <UART_SetConfig+0x30c>)
 8005f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f44:	f003 0303 	and.w	r3, r3, #3
 8005f48:	2b03      	cmp	r3, #3
 8005f4a:	d81b      	bhi.n	8005f84 <UART_SetConfig+0xd0>
 8005f4c:	a201      	add	r2, pc, #4	; (adr r2, 8005f54 <UART_SetConfig+0xa0>)
 8005f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f52:	bf00      	nop
 8005f54:	08005f65 	.word	0x08005f65
 8005f58:	08005f75 	.word	0x08005f75
 8005f5c:	08005f6d 	.word	0x08005f6d
 8005f60:	08005f7d 	.word	0x08005f7d
 8005f64:	2301      	movs	r3, #1
 8005f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f6a:	e080      	b.n	800606e <UART_SetConfig+0x1ba>
 8005f6c:	2302      	movs	r3, #2
 8005f6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f72:	e07c      	b.n	800606e <UART_SetConfig+0x1ba>
 8005f74:	2304      	movs	r3, #4
 8005f76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f7a:	e078      	b.n	800606e <UART_SetConfig+0x1ba>
 8005f7c:	2308      	movs	r3, #8
 8005f7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f82:	e074      	b.n	800606e <UART_SetConfig+0x1ba>
 8005f84:	2310      	movs	r3, #16
 8005f86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f8a:	e070      	b.n	800606e <UART_SetConfig+0x1ba>
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a8c      	ldr	r2, [pc, #560]	; (80061c4 <UART_SetConfig+0x310>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d138      	bne.n	8006008 <UART_SetConfig+0x154>
 8005f96:	4b8a      	ldr	r3, [pc, #552]	; (80061c0 <UART_SetConfig+0x30c>)
 8005f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f9c:	f003 030c 	and.w	r3, r3, #12
 8005fa0:	2b0c      	cmp	r3, #12
 8005fa2:	d82d      	bhi.n	8006000 <UART_SetConfig+0x14c>
 8005fa4:	a201      	add	r2, pc, #4	; (adr r2, 8005fac <UART_SetConfig+0xf8>)
 8005fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005faa:	bf00      	nop
 8005fac:	08005fe1 	.word	0x08005fe1
 8005fb0:	08006001 	.word	0x08006001
 8005fb4:	08006001 	.word	0x08006001
 8005fb8:	08006001 	.word	0x08006001
 8005fbc:	08005ff1 	.word	0x08005ff1
 8005fc0:	08006001 	.word	0x08006001
 8005fc4:	08006001 	.word	0x08006001
 8005fc8:	08006001 	.word	0x08006001
 8005fcc:	08005fe9 	.word	0x08005fe9
 8005fd0:	08006001 	.word	0x08006001
 8005fd4:	08006001 	.word	0x08006001
 8005fd8:	08006001 	.word	0x08006001
 8005fdc:	08005ff9 	.word	0x08005ff9
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fe6:	e042      	b.n	800606e <UART_SetConfig+0x1ba>
 8005fe8:	2302      	movs	r3, #2
 8005fea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fee:	e03e      	b.n	800606e <UART_SetConfig+0x1ba>
 8005ff0:	2304      	movs	r3, #4
 8005ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ff6:	e03a      	b.n	800606e <UART_SetConfig+0x1ba>
 8005ff8:	2308      	movs	r3, #8
 8005ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ffe:	e036      	b.n	800606e <UART_SetConfig+0x1ba>
 8006000:	2310      	movs	r3, #16
 8006002:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006006:	e032      	b.n	800606e <UART_SetConfig+0x1ba>
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a6a      	ldr	r2, [pc, #424]	; (80061b8 <UART_SetConfig+0x304>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d12a      	bne.n	8006068 <UART_SetConfig+0x1b4>
 8006012:	4b6b      	ldr	r3, [pc, #428]	; (80061c0 <UART_SetConfig+0x30c>)
 8006014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006018:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800601c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006020:	d01a      	beq.n	8006058 <UART_SetConfig+0x1a4>
 8006022:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006026:	d81b      	bhi.n	8006060 <UART_SetConfig+0x1ac>
 8006028:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800602c:	d00c      	beq.n	8006048 <UART_SetConfig+0x194>
 800602e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006032:	d815      	bhi.n	8006060 <UART_SetConfig+0x1ac>
 8006034:	2b00      	cmp	r3, #0
 8006036:	d003      	beq.n	8006040 <UART_SetConfig+0x18c>
 8006038:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800603c:	d008      	beq.n	8006050 <UART_SetConfig+0x19c>
 800603e:	e00f      	b.n	8006060 <UART_SetConfig+0x1ac>
 8006040:	2300      	movs	r3, #0
 8006042:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006046:	e012      	b.n	800606e <UART_SetConfig+0x1ba>
 8006048:	2302      	movs	r3, #2
 800604a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800604e:	e00e      	b.n	800606e <UART_SetConfig+0x1ba>
 8006050:	2304      	movs	r3, #4
 8006052:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006056:	e00a      	b.n	800606e <UART_SetConfig+0x1ba>
 8006058:	2308      	movs	r3, #8
 800605a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800605e:	e006      	b.n	800606e <UART_SetConfig+0x1ba>
 8006060:	2310      	movs	r3, #16
 8006062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006066:	e002      	b.n	800606e <UART_SetConfig+0x1ba>
 8006068:	2310      	movs	r3, #16
 800606a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a51      	ldr	r2, [pc, #324]	; (80061b8 <UART_SetConfig+0x304>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d17a      	bne.n	800616e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006078:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800607c:	2b08      	cmp	r3, #8
 800607e:	d824      	bhi.n	80060ca <UART_SetConfig+0x216>
 8006080:	a201      	add	r2, pc, #4	; (adr r2, 8006088 <UART_SetConfig+0x1d4>)
 8006082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006086:	bf00      	nop
 8006088:	080060ad 	.word	0x080060ad
 800608c:	080060cb 	.word	0x080060cb
 8006090:	080060b5 	.word	0x080060b5
 8006094:	080060cb 	.word	0x080060cb
 8006098:	080060bb 	.word	0x080060bb
 800609c:	080060cb 	.word	0x080060cb
 80060a0:	080060cb 	.word	0x080060cb
 80060a4:	080060cb 	.word	0x080060cb
 80060a8:	080060c3 	.word	0x080060c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060ac:	f7fd fe8a 	bl	8003dc4 <HAL_RCC_GetPCLK1Freq>
 80060b0:	61f8      	str	r0, [r7, #28]
        break;
 80060b2:	e010      	b.n	80060d6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060b4:	4b44      	ldr	r3, [pc, #272]	; (80061c8 <UART_SetConfig+0x314>)
 80060b6:	61fb      	str	r3, [r7, #28]
        break;
 80060b8:	e00d      	b.n	80060d6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060ba:	f7fd fdeb 	bl	8003c94 <HAL_RCC_GetSysClockFreq>
 80060be:	61f8      	str	r0, [r7, #28]
        break;
 80060c0:	e009      	b.n	80060d6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060c6:	61fb      	str	r3, [r7, #28]
        break;
 80060c8:	e005      	b.n	80060d6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80060ca:	2300      	movs	r3, #0
 80060cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80060d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	f000 8107 	beq.w	80062ec <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	685a      	ldr	r2, [r3, #4]
 80060e2:	4613      	mov	r3, r2
 80060e4:	005b      	lsls	r3, r3, #1
 80060e6:	4413      	add	r3, r2
 80060e8:	69fa      	ldr	r2, [r7, #28]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d305      	bcc.n	80060fa <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80060f4:	69fa      	ldr	r2, [r7, #28]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d903      	bls.n	8006102 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006100:	e0f4      	b.n	80062ec <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	2200      	movs	r2, #0
 8006106:	461c      	mov	r4, r3
 8006108:	4615      	mov	r5, r2
 800610a:	f04f 0200 	mov.w	r2, #0
 800610e:	f04f 0300 	mov.w	r3, #0
 8006112:	022b      	lsls	r3, r5, #8
 8006114:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006118:	0222      	lsls	r2, r4, #8
 800611a:	68f9      	ldr	r1, [r7, #12]
 800611c:	6849      	ldr	r1, [r1, #4]
 800611e:	0849      	lsrs	r1, r1, #1
 8006120:	2000      	movs	r0, #0
 8006122:	4688      	mov	r8, r1
 8006124:	4681      	mov	r9, r0
 8006126:	eb12 0a08 	adds.w	sl, r2, r8
 800612a:	eb43 0b09 	adc.w	fp, r3, r9
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	603b      	str	r3, [r7, #0]
 8006136:	607a      	str	r2, [r7, #4]
 8006138:	e9d7 2300 	ldrd	r2, r3, [r7]
 800613c:	4650      	mov	r0, sl
 800613e:	4659      	mov	r1, fp
 8006140:	f7fa fd32 	bl	8000ba8 <__aeabi_uldivmod>
 8006144:	4602      	mov	r2, r0
 8006146:	460b      	mov	r3, r1
 8006148:	4613      	mov	r3, r2
 800614a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006152:	d308      	bcc.n	8006166 <UART_SetConfig+0x2b2>
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800615a:	d204      	bcs.n	8006166 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	69ba      	ldr	r2, [r7, #24]
 8006162:	60da      	str	r2, [r3, #12]
 8006164:	e0c2      	b.n	80062ec <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800616c:	e0be      	b.n	80062ec <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	69db      	ldr	r3, [r3, #28]
 8006172:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006176:	d16a      	bne.n	800624e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8006178:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800617c:	2b08      	cmp	r3, #8
 800617e:	d834      	bhi.n	80061ea <UART_SetConfig+0x336>
 8006180:	a201      	add	r2, pc, #4	; (adr r2, 8006188 <UART_SetConfig+0x2d4>)
 8006182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006186:	bf00      	nop
 8006188:	080061ad 	.word	0x080061ad
 800618c:	080061cd 	.word	0x080061cd
 8006190:	080061d5 	.word	0x080061d5
 8006194:	080061eb 	.word	0x080061eb
 8006198:	080061db 	.word	0x080061db
 800619c:	080061eb 	.word	0x080061eb
 80061a0:	080061eb 	.word	0x080061eb
 80061a4:	080061eb 	.word	0x080061eb
 80061a8:	080061e3 	.word	0x080061e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061ac:	f7fd fe0a 	bl	8003dc4 <HAL_RCC_GetPCLK1Freq>
 80061b0:	61f8      	str	r0, [r7, #28]
        break;
 80061b2:	e020      	b.n	80061f6 <UART_SetConfig+0x342>
 80061b4:	efff69f3 	.word	0xefff69f3
 80061b8:	40008000 	.word	0x40008000
 80061bc:	40013800 	.word	0x40013800
 80061c0:	40021000 	.word	0x40021000
 80061c4:	40004400 	.word	0x40004400
 80061c8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061cc:	f7fd fe10 	bl	8003df0 <HAL_RCC_GetPCLK2Freq>
 80061d0:	61f8      	str	r0, [r7, #28]
        break;
 80061d2:	e010      	b.n	80061f6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061d4:	4b4c      	ldr	r3, [pc, #304]	; (8006308 <UART_SetConfig+0x454>)
 80061d6:	61fb      	str	r3, [r7, #28]
        break;
 80061d8:	e00d      	b.n	80061f6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061da:	f7fd fd5b 	bl	8003c94 <HAL_RCC_GetSysClockFreq>
 80061de:	61f8      	str	r0, [r7, #28]
        break;
 80061e0:	e009      	b.n	80061f6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061e6:	61fb      	str	r3, [r7, #28]
        break;
 80061e8:	e005      	b.n	80061f6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80061ea:	2300      	movs	r3, #0
 80061ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80061f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d077      	beq.n	80062ec <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	005a      	lsls	r2, r3, #1
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	085b      	lsrs	r3, r3, #1
 8006206:	441a      	add	r2, r3
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006210:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	2b0f      	cmp	r3, #15
 8006216:	d916      	bls.n	8006246 <UART_SetConfig+0x392>
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800621e:	d212      	bcs.n	8006246 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	b29b      	uxth	r3, r3
 8006224:	f023 030f 	bic.w	r3, r3, #15
 8006228:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	085b      	lsrs	r3, r3, #1
 800622e:	b29b      	uxth	r3, r3
 8006230:	f003 0307 	and.w	r3, r3, #7
 8006234:	b29a      	uxth	r2, r3
 8006236:	8afb      	ldrh	r3, [r7, #22]
 8006238:	4313      	orrs	r3, r2
 800623a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	8afa      	ldrh	r2, [r7, #22]
 8006242:	60da      	str	r2, [r3, #12]
 8006244:	e052      	b.n	80062ec <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800624c:	e04e      	b.n	80062ec <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800624e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006252:	2b08      	cmp	r3, #8
 8006254:	d827      	bhi.n	80062a6 <UART_SetConfig+0x3f2>
 8006256:	a201      	add	r2, pc, #4	; (adr r2, 800625c <UART_SetConfig+0x3a8>)
 8006258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800625c:	08006281 	.word	0x08006281
 8006260:	08006289 	.word	0x08006289
 8006264:	08006291 	.word	0x08006291
 8006268:	080062a7 	.word	0x080062a7
 800626c:	08006297 	.word	0x08006297
 8006270:	080062a7 	.word	0x080062a7
 8006274:	080062a7 	.word	0x080062a7
 8006278:	080062a7 	.word	0x080062a7
 800627c:	0800629f 	.word	0x0800629f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006280:	f7fd fda0 	bl	8003dc4 <HAL_RCC_GetPCLK1Freq>
 8006284:	61f8      	str	r0, [r7, #28]
        break;
 8006286:	e014      	b.n	80062b2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006288:	f7fd fdb2 	bl	8003df0 <HAL_RCC_GetPCLK2Freq>
 800628c:	61f8      	str	r0, [r7, #28]
        break;
 800628e:	e010      	b.n	80062b2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006290:	4b1d      	ldr	r3, [pc, #116]	; (8006308 <UART_SetConfig+0x454>)
 8006292:	61fb      	str	r3, [r7, #28]
        break;
 8006294:	e00d      	b.n	80062b2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006296:	f7fd fcfd 	bl	8003c94 <HAL_RCC_GetSysClockFreq>
 800629a:	61f8      	str	r0, [r7, #28]
        break;
 800629c:	e009      	b.n	80062b2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800629e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062a2:	61fb      	str	r3, [r7, #28]
        break;
 80062a4:	e005      	b.n	80062b2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80062a6:	2300      	movs	r3, #0
 80062a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80062b0:	bf00      	nop
    }

    if (pclk != 0U)
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d019      	beq.n	80062ec <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	085a      	lsrs	r2, r3, #1
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	441a      	add	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ca:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	2b0f      	cmp	r3, #15
 80062d0:	d909      	bls.n	80062e6 <UART_SetConfig+0x432>
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062d8:	d205      	bcs.n	80062e6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	b29a      	uxth	r2, r3
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	60da      	str	r2, [r3, #12]
 80062e4:	e002      	b.n	80062ec <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2200      	movs	r2, #0
 80062f0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2200      	movs	r2, #0
 80062f6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80062f8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3728      	adds	r7, #40	; 0x28
 8006300:	46bd      	mov	sp, r7
 8006302:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006306:	bf00      	nop
 8006308:	00f42400 	.word	0x00f42400

0800630c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006318:	f003 0308 	and.w	r3, r3, #8
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00a      	beq.n	8006336 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	430a      	orrs	r2, r1
 8006334:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633a:	f003 0301 	and.w	r3, r3, #1
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00a      	beq.n	8006358 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	430a      	orrs	r2, r1
 8006356:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635c:	f003 0302 	and.w	r3, r3, #2
 8006360:	2b00      	cmp	r3, #0
 8006362:	d00a      	beq.n	800637a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	430a      	orrs	r2, r1
 8006378:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637e:	f003 0304 	and.w	r3, r3, #4
 8006382:	2b00      	cmp	r3, #0
 8006384:	d00a      	beq.n	800639c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	430a      	orrs	r2, r1
 800639a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a0:	f003 0310 	and.w	r3, r3, #16
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00a      	beq.n	80063be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	430a      	orrs	r2, r1
 80063bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c2:	f003 0320 	and.w	r3, r3, #32
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00a      	beq.n	80063e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	430a      	orrs	r2, r1
 80063de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d01a      	beq.n	8006422 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	430a      	orrs	r2, r1
 8006400:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006406:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800640a:	d10a      	bne.n	8006422 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	430a      	orrs	r2, r1
 8006420:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00a      	beq.n	8006444 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	430a      	orrs	r2, r1
 8006442:	605a      	str	r2, [r3, #4]
  }
}
 8006444:	bf00      	nop
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b098      	sub	sp, #96	; 0x60
 8006454:	af02      	add	r7, sp, #8
 8006456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006460:	f7fc fb7c 	bl	8002b5c <HAL_GetTick>
 8006464:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 0308 	and.w	r3, r3, #8
 8006470:	2b08      	cmp	r3, #8
 8006472:	d12e      	bne.n	80064d2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006474:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006478:	9300      	str	r3, [sp, #0]
 800647a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800647c:	2200      	movs	r2, #0
 800647e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 f88c 	bl	80065a0 <UART_WaitOnFlagUntilTimeout>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d021      	beq.n	80064d2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006496:	e853 3f00 	ldrex	r3, [r3]
 800649a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800649c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800649e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064a2:	653b      	str	r3, [r7, #80]	; 0x50
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	461a      	mov	r2, r3
 80064aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064ac:	647b      	str	r3, [r7, #68]	; 0x44
 80064ae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80064b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064b4:	e841 2300 	strex	r3, r2, [r1]
 80064b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80064ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d1e6      	bne.n	800648e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2220      	movs	r2, #32
 80064c4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064ce:	2303      	movs	r3, #3
 80064d0:	e062      	b.n	8006598 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0304 	and.w	r3, r3, #4
 80064dc:	2b04      	cmp	r3, #4
 80064de:	d149      	bne.n	8006574 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064e4:	9300      	str	r3, [sp, #0]
 80064e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064e8:	2200      	movs	r2, #0
 80064ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 f856 	bl	80065a0 <UART_WaitOnFlagUntilTimeout>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d03c      	beq.n	8006574 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006502:	e853 3f00 	ldrex	r3, [r3]
 8006506:	623b      	str	r3, [r7, #32]
   return(result);
 8006508:	6a3b      	ldr	r3, [r7, #32]
 800650a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800650e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	461a      	mov	r2, r3
 8006516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006518:	633b      	str	r3, [r7, #48]	; 0x30
 800651a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800651e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006520:	e841 2300 	strex	r3, r2, [r1]
 8006524:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006528:	2b00      	cmp	r3, #0
 800652a:	d1e6      	bne.n	80064fa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	3308      	adds	r3, #8
 8006532:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	e853 3f00 	ldrex	r3, [r3]
 800653a:	60fb      	str	r3, [r7, #12]
   return(result);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f023 0301 	bic.w	r3, r3, #1
 8006542:	64bb      	str	r3, [r7, #72]	; 0x48
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	3308      	adds	r3, #8
 800654a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800654c:	61fa      	str	r2, [r7, #28]
 800654e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006550:	69b9      	ldr	r1, [r7, #24]
 8006552:	69fa      	ldr	r2, [r7, #28]
 8006554:	e841 2300 	strex	r3, r2, [r1]
 8006558:	617b      	str	r3, [r7, #20]
   return(result);
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d1e5      	bne.n	800652c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2220      	movs	r2, #32
 8006564:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006570:	2303      	movs	r3, #3
 8006572:	e011      	b.n	8006598 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2220      	movs	r2, #32
 8006578:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2220      	movs	r2, #32
 800657e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3758      	adds	r7, #88	; 0x58
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	603b      	str	r3, [r7, #0]
 80065ac:	4613      	mov	r3, r2
 80065ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065b0:	e049      	b.n	8006646 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b8:	d045      	beq.n	8006646 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065ba:	f7fc facf 	bl	8002b5c <HAL_GetTick>
 80065be:	4602      	mov	r2, r0
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	1ad3      	subs	r3, r2, r3
 80065c4:	69ba      	ldr	r2, [r7, #24]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d302      	bcc.n	80065d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d101      	bne.n	80065d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80065d0:	2303      	movs	r3, #3
 80065d2:	e048      	b.n	8006666 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 0304 	and.w	r3, r3, #4
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d031      	beq.n	8006646 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	69db      	ldr	r3, [r3, #28]
 80065e8:	f003 0308 	and.w	r3, r3, #8
 80065ec:	2b08      	cmp	r3, #8
 80065ee:	d110      	bne.n	8006612 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2208      	movs	r2, #8
 80065f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065f8:	68f8      	ldr	r0, [r7, #12]
 80065fa:	f000 f8ff 	bl	80067fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2208      	movs	r2, #8
 8006602:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2200      	movs	r2, #0
 800660a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	e029      	b.n	8006666 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	69db      	ldr	r3, [r3, #28]
 8006618:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800661c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006620:	d111      	bne.n	8006646 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800662a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800662c:	68f8      	ldr	r0, [r7, #12]
 800662e:	f000 f8e5 	bl	80067fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2220      	movs	r2, #32
 8006636:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2200      	movs	r2, #0
 800663e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006642:	2303      	movs	r3, #3
 8006644:	e00f      	b.n	8006666 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	69da      	ldr	r2, [r3, #28]
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	4013      	ands	r3, r2
 8006650:	68ba      	ldr	r2, [r7, #8]
 8006652:	429a      	cmp	r2, r3
 8006654:	bf0c      	ite	eq
 8006656:	2301      	moveq	r3, #1
 8006658:	2300      	movne	r3, #0
 800665a:	b2db      	uxtb	r3, r3
 800665c:	461a      	mov	r2, r3
 800665e:	79fb      	ldrb	r3, [r7, #7]
 8006660:	429a      	cmp	r2, r3
 8006662:	d0a6      	beq.n	80065b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3710      	adds	r7, #16
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
	...

08006670 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006670:	b480      	push	{r7}
 8006672:	b097      	sub	sp, #92	; 0x5c
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	4613      	mov	r3, r2
 800667c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	68ba      	ldr	r2, [r7, #8]
 8006682:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	88fa      	ldrh	r2, [r7, #6]
 8006688:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	88fa      	ldrh	r2, [r7, #6]
 8006690:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2200      	movs	r2, #0
 8006698:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066a2:	d10e      	bne.n	80066c2 <UART_Start_Receive_IT+0x52>
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	691b      	ldr	r3, [r3, #16]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d105      	bne.n	80066b8 <UART_Start_Receive_IT+0x48>
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f240 12ff 	movw	r2, #511	; 0x1ff
 80066b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80066b6:	e02d      	b.n	8006714 <UART_Start_Receive_IT+0xa4>
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	22ff      	movs	r2, #255	; 0xff
 80066bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80066c0:	e028      	b.n	8006714 <UART_Start_Receive_IT+0xa4>
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d10d      	bne.n	80066e6 <UART_Start_Receive_IT+0x76>
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d104      	bne.n	80066dc <UART_Start_Receive_IT+0x6c>
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	22ff      	movs	r2, #255	; 0xff
 80066d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80066da:	e01b      	b.n	8006714 <UART_Start_Receive_IT+0xa4>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	227f      	movs	r2, #127	; 0x7f
 80066e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80066e4:	e016      	b.n	8006714 <UART_Start_Receive_IT+0xa4>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066ee:	d10d      	bne.n	800670c <UART_Start_Receive_IT+0x9c>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	691b      	ldr	r3, [r3, #16]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d104      	bne.n	8006702 <UART_Start_Receive_IT+0x92>
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	227f      	movs	r2, #127	; 0x7f
 80066fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006700:	e008      	b.n	8006714 <UART_Start_Receive_IT+0xa4>
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	223f      	movs	r2, #63	; 0x3f
 8006706:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800670a:	e003      	b.n	8006714 <UART_Start_Receive_IT+0xa4>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2200      	movs	r2, #0
 8006710:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2200      	movs	r2, #0
 8006718:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2222      	movs	r2, #34	; 0x22
 8006720:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	3308      	adds	r3, #8
 800672a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800672c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800672e:	e853 3f00 	ldrex	r3, [r3]
 8006732:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006736:	f043 0301 	orr.w	r3, r3, #1
 800673a:	657b      	str	r3, [r7, #84]	; 0x54
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	3308      	adds	r3, #8
 8006742:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006744:	64ba      	str	r2, [r7, #72]	; 0x48
 8006746:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006748:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800674a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800674c:	e841 2300 	strex	r3, r2, [r1]
 8006750:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006754:	2b00      	cmp	r3, #0
 8006756:	d1e5      	bne.n	8006724 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006760:	d107      	bne.n	8006772 <UART_Start_Receive_IT+0x102>
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d103      	bne.n	8006772 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	4a21      	ldr	r2, [pc, #132]	; (80067f4 <UART_Start_Receive_IT+0x184>)
 800676e:	669a      	str	r2, [r3, #104]	; 0x68
 8006770:	e002      	b.n	8006778 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	4a20      	ldr	r2, [pc, #128]	; (80067f8 <UART_Start_Receive_IT+0x188>)
 8006776:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d019      	beq.n	80067b4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006788:	e853 3f00 	ldrex	r3, [r3]
 800678c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800678e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006790:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006794:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	461a      	mov	r2, r3
 800679c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800679e:	637b      	str	r3, [r7, #52]	; 0x34
 80067a0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80067a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067a6:	e841 2300 	strex	r3, r2, [r1]
 80067aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80067ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d1e6      	bne.n	8006780 <UART_Start_Receive_IT+0x110>
 80067b2:	e018      	b.n	80067e6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	e853 3f00 	ldrex	r3, [r3]
 80067c0:	613b      	str	r3, [r7, #16]
   return(result);
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	f043 0320 	orr.w	r3, r3, #32
 80067c8:	653b      	str	r3, [r7, #80]	; 0x50
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	461a      	mov	r2, r3
 80067d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067d2:	623b      	str	r3, [r7, #32]
 80067d4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d6:	69f9      	ldr	r1, [r7, #28]
 80067d8:	6a3a      	ldr	r2, [r7, #32]
 80067da:	e841 2300 	strex	r3, r2, [r1]
 80067de:	61bb      	str	r3, [r7, #24]
   return(result);
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d1e6      	bne.n	80067b4 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80067e6:	2300      	movs	r3, #0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	375c      	adds	r7, #92	; 0x5c
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr
 80067f4:	08006b01 	.word	0x08006b01
 80067f8:	08006945 	.word	0x08006945

080067fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b095      	sub	sp, #84	; 0x54
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800680a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800680c:	e853 3f00 	ldrex	r3, [r3]
 8006810:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006814:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006818:	64fb      	str	r3, [r7, #76]	; 0x4c
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	461a      	mov	r2, r3
 8006820:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006822:	643b      	str	r3, [r7, #64]	; 0x40
 8006824:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006826:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006828:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800682a:	e841 2300 	strex	r3, r2, [r1]
 800682e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006832:	2b00      	cmp	r3, #0
 8006834:	d1e6      	bne.n	8006804 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	3308      	adds	r3, #8
 800683c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800683e:	6a3b      	ldr	r3, [r7, #32]
 8006840:	e853 3f00 	ldrex	r3, [r3]
 8006844:	61fb      	str	r3, [r7, #28]
   return(result);
 8006846:	69fb      	ldr	r3, [r7, #28]
 8006848:	f023 0301 	bic.w	r3, r3, #1
 800684c:	64bb      	str	r3, [r7, #72]	; 0x48
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	3308      	adds	r3, #8
 8006854:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006856:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006858:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800685a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800685c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800685e:	e841 2300 	strex	r3, r2, [r1]
 8006862:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006866:	2b00      	cmp	r3, #0
 8006868:	d1e5      	bne.n	8006836 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800686e:	2b01      	cmp	r3, #1
 8006870:	d118      	bne.n	80068a4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	e853 3f00 	ldrex	r3, [r3]
 800687e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	f023 0310 	bic.w	r3, r3, #16
 8006886:	647b      	str	r3, [r7, #68]	; 0x44
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	461a      	mov	r2, r3
 800688e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006890:	61bb      	str	r3, [r7, #24]
 8006892:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006894:	6979      	ldr	r1, [r7, #20]
 8006896:	69ba      	ldr	r2, [r7, #24]
 8006898:	e841 2300 	strex	r3, r2, [r1]
 800689c:	613b      	str	r3, [r7, #16]
   return(result);
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d1e6      	bne.n	8006872 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2220      	movs	r2, #32
 80068a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80068b8:	bf00      	nop
 80068ba:	3754      	adds	r7, #84	; 0x54
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2200      	movs	r2, #0
 80068de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068e2:	68f8      	ldr	r0, [r7, #12]
 80068e4:	f7ff fad0 	bl	8005e88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068e8:	bf00      	nop
 80068ea:	3710      	adds	r7, #16
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b088      	sub	sp, #32
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	e853 3f00 	ldrex	r3, [r3]
 8006904:	60bb      	str	r3, [r7, #8]
   return(result);
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800690c:	61fb      	str	r3, [r7, #28]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	461a      	mov	r2, r3
 8006914:	69fb      	ldr	r3, [r7, #28]
 8006916:	61bb      	str	r3, [r7, #24]
 8006918:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691a:	6979      	ldr	r1, [r7, #20]
 800691c:	69ba      	ldr	r2, [r7, #24]
 800691e:	e841 2300 	strex	r3, r2, [r1]
 8006922:	613b      	str	r3, [r7, #16]
   return(result);
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1e6      	bne.n	80068f8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2220      	movs	r2, #32
 800692e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f7ff fa9c 	bl	8005e74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800693c:	bf00      	nop
 800693e:	3720      	adds	r7, #32
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b09c      	sub	sp, #112	; 0x70
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006952:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800695c:	2b22      	cmp	r3, #34	; 0x22
 800695e:	f040 80be 	bne.w	8006ade <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006968:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800696c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006970:	b2d9      	uxtb	r1, r3
 8006972:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006976:	b2da      	uxtb	r2, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800697c:	400a      	ands	r2, r1
 800697e:	b2d2      	uxtb	r2, r2
 8006980:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006986:	1c5a      	adds	r2, r3, #1
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006992:	b29b      	uxth	r3, r3
 8006994:	3b01      	subs	r3, #1
 8006996:	b29a      	uxth	r2, r3
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	f040 80a3 	bne.w	8006af2 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069b4:	e853 3f00 	ldrex	r3, [r3]
 80069b8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80069ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	461a      	mov	r2, r3
 80069c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80069ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80069cc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80069d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80069d2:	e841 2300 	strex	r3, r2, [r1]
 80069d6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80069d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1e6      	bne.n	80069ac <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	3308      	adds	r3, #8
 80069e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e8:	e853 3f00 	ldrex	r3, [r3]
 80069ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80069ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069f0:	f023 0301 	bic.w	r3, r3, #1
 80069f4:	667b      	str	r3, [r7, #100]	; 0x64
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	3308      	adds	r3, #8
 80069fc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80069fe:	647a      	str	r2, [r7, #68]	; 0x44
 8006a00:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a02:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a06:	e841 2300 	strex	r3, r2, [r1]
 8006a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1e5      	bne.n	80069de <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2220      	movs	r2, #32
 8006a16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a34      	ldr	r2, [pc, #208]	; (8006afc <UART_RxISR_8BIT+0x1b8>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d01f      	beq.n	8006a70 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d018      	beq.n	8006a70 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a46:	e853 3f00 	ldrex	r3, [r3]
 8006a4a:	623b      	str	r3, [r7, #32]
   return(result);
 8006a4c:	6a3b      	ldr	r3, [r7, #32]
 8006a4e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006a52:	663b      	str	r3, [r7, #96]	; 0x60
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	461a      	mov	r2, r3
 8006a5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a5c:	633b      	str	r3, [r7, #48]	; 0x30
 8006a5e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a64:	e841 2300 	strex	r3, r2, [r1]
 8006a68:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d1e6      	bne.n	8006a3e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d12e      	bne.n	8006ad6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	e853 3f00 	ldrex	r3, [r3]
 8006a8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f023 0310 	bic.w	r3, r3, #16
 8006a92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	461a      	mov	r2, r3
 8006a9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a9c:	61fb      	str	r3, [r7, #28]
 8006a9e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa0:	69b9      	ldr	r1, [r7, #24]
 8006aa2:	69fa      	ldr	r2, [r7, #28]
 8006aa4:	e841 2300 	strex	r3, r2, [r1]
 8006aa8:	617b      	str	r3, [r7, #20]
   return(result);
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d1e6      	bne.n	8006a7e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	69db      	ldr	r3, [r3, #28]
 8006ab6:	f003 0310 	and.w	r3, r3, #16
 8006aba:	2b10      	cmp	r3, #16
 8006abc:	d103      	bne.n	8006ac6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2210      	movs	r2, #16
 8006ac4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006acc:	4619      	mov	r1, r3
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f7ff f9e4 	bl	8005e9c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ad4:	e00d      	b.n	8006af2 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f7fb fc96 	bl	8002408 <HAL_UART_RxCpltCallback>
}
 8006adc:	e009      	b.n	8006af2 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	8b1b      	ldrh	r3, [r3, #24]
 8006ae4:	b29a      	uxth	r2, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f042 0208 	orr.w	r2, r2, #8
 8006aee:	b292      	uxth	r2, r2
 8006af0:	831a      	strh	r2, [r3, #24]
}
 8006af2:	bf00      	nop
 8006af4:	3770      	adds	r7, #112	; 0x70
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	40008000 	.word	0x40008000

08006b00 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b09c      	sub	sp, #112	; 0x70
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006b0e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b18:	2b22      	cmp	r3, #34	; 0x22
 8006b1a:	f040 80be 	bne.w	8006c9a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006b24:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b2c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006b2e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8006b32:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006b36:	4013      	ands	r3, r2
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b3c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b42:	1c9a      	adds	r2, r3, #2
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	3b01      	subs	r3, #1
 8006b52:	b29a      	uxth	r2, r3
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	f040 80a3 	bne.w	8006cae <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b70:	e853 3f00 	ldrex	r3, [r3]
 8006b74:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006b76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b7c:	667b      	str	r3, [r7, #100]	; 0x64
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	461a      	mov	r2, r3
 8006b84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b86:	657b      	str	r3, [r7, #84]	; 0x54
 8006b88:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006b8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006b8e:	e841 2300 	strex	r3, r2, [r1]
 8006b92:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006b94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d1e6      	bne.n	8006b68 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	3308      	adds	r3, #8
 8006ba0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ba4:	e853 3f00 	ldrex	r3, [r3]
 8006ba8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bac:	f023 0301 	bic.w	r3, r3, #1
 8006bb0:	663b      	str	r3, [r7, #96]	; 0x60
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	3308      	adds	r3, #8
 8006bb8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006bba:	643a      	str	r2, [r7, #64]	; 0x40
 8006bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bbe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006bc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006bc2:	e841 2300 	strex	r3, r2, [r1]
 8006bc6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d1e5      	bne.n	8006b9a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2220      	movs	r2, #32
 8006bd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a34      	ldr	r2, [pc, #208]	; (8006cb8 <UART_RxISR_16BIT+0x1b8>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d01f      	beq.n	8006c2c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d018      	beq.n	8006c2c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c00:	6a3b      	ldr	r3, [r7, #32]
 8006c02:	e853 3f00 	ldrex	r3, [r3]
 8006c06:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c08:	69fb      	ldr	r3, [r7, #28]
 8006c0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006c0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	461a      	mov	r2, r3
 8006c16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c1a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c20:	e841 2300 	strex	r3, r2, [r1]
 8006c24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d1e6      	bne.n	8006bfa <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d12e      	bne.n	8006c92 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	e853 3f00 	ldrex	r3, [r3]
 8006c46:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	f023 0310 	bic.w	r3, r3, #16
 8006c4e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	461a      	mov	r2, r3
 8006c56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c58:	61bb      	str	r3, [r7, #24]
 8006c5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5c:	6979      	ldr	r1, [r7, #20]
 8006c5e:	69ba      	ldr	r2, [r7, #24]
 8006c60:	e841 2300 	strex	r3, r2, [r1]
 8006c64:	613b      	str	r3, [r7, #16]
   return(result);
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d1e6      	bne.n	8006c3a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	69db      	ldr	r3, [r3, #28]
 8006c72:	f003 0310 	and.w	r3, r3, #16
 8006c76:	2b10      	cmp	r3, #16
 8006c78:	d103      	bne.n	8006c82 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2210      	movs	r2, #16
 8006c80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006c88:	4619      	mov	r1, r3
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f7ff f906 	bl	8005e9c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c90:	e00d      	b.n	8006cae <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f7fb fbb8 	bl	8002408 <HAL_UART_RxCpltCallback>
}
 8006c98:	e009      	b.n	8006cae <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	8b1b      	ldrh	r3, [r3, #24]
 8006ca0:	b29a      	uxth	r2, r3
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f042 0208 	orr.w	r2, r2, #8
 8006caa:	b292      	uxth	r2, r2
 8006cac:	831a      	strh	r2, [r3, #24]
}
 8006cae:	bf00      	nop
 8006cb0:	3770      	adds	r7, #112	; 0x70
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	bf00      	nop
 8006cb8:	40008000 	.word	0x40008000

08006cbc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006cc4:	bf00      	nop
 8006cc6:	370c      	adds	r7, #12
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <__itoa>:
 8006cd0:	1e93      	subs	r3, r2, #2
 8006cd2:	2b22      	cmp	r3, #34	; 0x22
 8006cd4:	b510      	push	{r4, lr}
 8006cd6:	460c      	mov	r4, r1
 8006cd8:	d904      	bls.n	8006ce4 <__itoa+0x14>
 8006cda:	2300      	movs	r3, #0
 8006cdc:	700b      	strb	r3, [r1, #0]
 8006cde:	461c      	mov	r4, r3
 8006ce0:	4620      	mov	r0, r4
 8006ce2:	bd10      	pop	{r4, pc}
 8006ce4:	2a0a      	cmp	r2, #10
 8006ce6:	d109      	bne.n	8006cfc <__itoa+0x2c>
 8006ce8:	2800      	cmp	r0, #0
 8006cea:	da07      	bge.n	8006cfc <__itoa+0x2c>
 8006cec:	232d      	movs	r3, #45	; 0x2d
 8006cee:	700b      	strb	r3, [r1, #0]
 8006cf0:	4240      	negs	r0, r0
 8006cf2:	2101      	movs	r1, #1
 8006cf4:	4421      	add	r1, r4
 8006cf6:	f000 f805 	bl	8006d04 <__utoa>
 8006cfa:	e7f1      	b.n	8006ce0 <__itoa+0x10>
 8006cfc:	2100      	movs	r1, #0
 8006cfe:	e7f9      	b.n	8006cf4 <__itoa+0x24>

08006d00 <itoa>:
 8006d00:	f7ff bfe6 	b.w	8006cd0 <__itoa>

08006d04 <__utoa>:
 8006d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d06:	4c1f      	ldr	r4, [pc, #124]	; (8006d84 <__utoa+0x80>)
 8006d08:	b08b      	sub	sp, #44	; 0x2c
 8006d0a:	4605      	mov	r5, r0
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	466e      	mov	r6, sp
 8006d10:	f104 0c20 	add.w	ip, r4, #32
 8006d14:	6820      	ldr	r0, [r4, #0]
 8006d16:	6861      	ldr	r1, [r4, #4]
 8006d18:	4637      	mov	r7, r6
 8006d1a:	c703      	stmia	r7!, {r0, r1}
 8006d1c:	3408      	adds	r4, #8
 8006d1e:	4564      	cmp	r4, ip
 8006d20:	463e      	mov	r6, r7
 8006d22:	d1f7      	bne.n	8006d14 <__utoa+0x10>
 8006d24:	7921      	ldrb	r1, [r4, #4]
 8006d26:	7139      	strb	r1, [r7, #4]
 8006d28:	1e91      	subs	r1, r2, #2
 8006d2a:	6820      	ldr	r0, [r4, #0]
 8006d2c:	6038      	str	r0, [r7, #0]
 8006d2e:	2922      	cmp	r1, #34	; 0x22
 8006d30:	f04f 0100 	mov.w	r1, #0
 8006d34:	d904      	bls.n	8006d40 <__utoa+0x3c>
 8006d36:	7019      	strb	r1, [r3, #0]
 8006d38:	460b      	mov	r3, r1
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	b00b      	add	sp, #44	; 0x2c
 8006d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d40:	1e58      	subs	r0, r3, #1
 8006d42:	4684      	mov	ip, r0
 8006d44:	fbb5 f7f2 	udiv	r7, r5, r2
 8006d48:	fb02 5617 	mls	r6, r2, r7, r5
 8006d4c:	3628      	adds	r6, #40	; 0x28
 8006d4e:	446e      	add	r6, sp
 8006d50:	460c      	mov	r4, r1
 8006d52:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8006d56:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8006d5a:	462e      	mov	r6, r5
 8006d5c:	42b2      	cmp	r2, r6
 8006d5e:	f101 0101 	add.w	r1, r1, #1
 8006d62:	463d      	mov	r5, r7
 8006d64:	d9ee      	bls.n	8006d44 <__utoa+0x40>
 8006d66:	2200      	movs	r2, #0
 8006d68:	545a      	strb	r2, [r3, r1]
 8006d6a:	1919      	adds	r1, r3, r4
 8006d6c:	1aa5      	subs	r5, r4, r2
 8006d6e:	42aa      	cmp	r2, r5
 8006d70:	dae3      	bge.n	8006d3a <__utoa+0x36>
 8006d72:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8006d76:	780e      	ldrb	r6, [r1, #0]
 8006d78:	7006      	strb	r6, [r0, #0]
 8006d7a:	3201      	adds	r2, #1
 8006d7c:	f801 5901 	strb.w	r5, [r1], #-1
 8006d80:	e7f4      	b.n	8006d6c <__utoa+0x68>
 8006d82:	bf00      	nop
 8006d84:	0800a048 	.word	0x0800a048

08006d88 <__cvt>:
 8006d88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d8c:	ec55 4b10 	vmov	r4, r5, d0
 8006d90:	2d00      	cmp	r5, #0
 8006d92:	460e      	mov	r6, r1
 8006d94:	4619      	mov	r1, r3
 8006d96:	462b      	mov	r3, r5
 8006d98:	bfbb      	ittet	lt
 8006d9a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006d9e:	461d      	movlt	r5, r3
 8006da0:	2300      	movge	r3, #0
 8006da2:	232d      	movlt	r3, #45	; 0x2d
 8006da4:	700b      	strb	r3, [r1, #0]
 8006da6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006da8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006dac:	4691      	mov	r9, r2
 8006dae:	f023 0820 	bic.w	r8, r3, #32
 8006db2:	bfbc      	itt	lt
 8006db4:	4622      	movlt	r2, r4
 8006db6:	4614      	movlt	r4, r2
 8006db8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006dbc:	d005      	beq.n	8006dca <__cvt+0x42>
 8006dbe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006dc2:	d100      	bne.n	8006dc6 <__cvt+0x3e>
 8006dc4:	3601      	adds	r6, #1
 8006dc6:	2102      	movs	r1, #2
 8006dc8:	e000      	b.n	8006dcc <__cvt+0x44>
 8006dca:	2103      	movs	r1, #3
 8006dcc:	ab03      	add	r3, sp, #12
 8006dce:	9301      	str	r3, [sp, #4]
 8006dd0:	ab02      	add	r3, sp, #8
 8006dd2:	9300      	str	r3, [sp, #0]
 8006dd4:	ec45 4b10 	vmov	d0, r4, r5
 8006dd8:	4653      	mov	r3, sl
 8006dda:	4632      	mov	r2, r6
 8006ddc:	f000 fe68 	bl	8007ab0 <_dtoa_r>
 8006de0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006de4:	4607      	mov	r7, r0
 8006de6:	d102      	bne.n	8006dee <__cvt+0x66>
 8006de8:	f019 0f01 	tst.w	r9, #1
 8006dec:	d022      	beq.n	8006e34 <__cvt+0xac>
 8006dee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006df2:	eb07 0906 	add.w	r9, r7, r6
 8006df6:	d110      	bne.n	8006e1a <__cvt+0x92>
 8006df8:	783b      	ldrb	r3, [r7, #0]
 8006dfa:	2b30      	cmp	r3, #48	; 0x30
 8006dfc:	d10a      	bne.n	8006e14 <__cvt+0x8c>
 8006dfe:	2200      	movs	r2, #0
 8006e00:	2300      	movs	r3, #0
 8006e02:	4620      	mov	r0, r4
 8006e04:	4629      	mov	r1, r5
 8006e06:	f7f9 fe5f 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e0a:	b918      	cbnz	r0, 8006e14 <__cvt+0x8c>
 8006e0c:	f1c6 0601 	rsb	r6, r6, #1
 8006e10:	f8ca 6000 	str.w	r6, [sl]
 8006e14:	f8da 3000 	ldr.w	r3, [sl]
 8006e18:	4499      	add	r9, r3
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	4620      	mov	r0, r4
 8006e20:	4629      	mov	r1, r5
 8006e22:	f7f9 fe51 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e26:	b108      	cbz	r0, 8006e2c <__cvt+0xa4>
 8006e28:	f8cd 900c 	str.w	r9, [sp, #12]
 8006e2c:	2230      	movs	r2, #48	; 0x30
 8006e2e:	9b03      	ldr	r3, [sp, #12]
 8006e30:	454b      	cmp	r3, r9
 8006e32:	d307      	bcc.n	8006e44 <__cvt+0xbc>
 8006e34:	9b03      	ldr	r3, [sp, #12]
 8006e36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e38:	1bdb      	subs	r3, r3, r7
 8006e3a:	4638      	mov	r0, r7
 8006e3c:	6013      	str	r3, [r2, #0]
 8006e3e:	b004      	add	sp, #16
 8006e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e44:	1c59      	adds	r1, r3, #1
 8006e46:	9103      	str	r1, [sp, #12]
 8006e48:	701a      	strb	r2, [r3, #0]
 8006e4a:	e7f0      	b.n	8006e2e <__cvt+0xa6>

08006e4c <__exponent>:
 8006e4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2900      	cmp	r1, #0
 8006e52:	bfb8      	it	lt
 8006e54:	4249      	neglt	r1, r1
 8006e56:	f803 2b02 	strb.w	r2, [r3], #2
 8006e5a:	bfb4      	ite	lt
 8006e5c:	222d      	movlt	r2, #45	; 0x2d
 8006e5e:	222b      	movge	r2, #43	; 0x2b
 8006e60:	2909      	cmp	r1, #9
 8006e62:	7042      	strb	r2, [r0, #1]
 8006e64:	dd2a      	ble.n	8006ebc <__exponent+0x70>
 8006e66:	f10d 0207 	add.w	r2, sp, #7
 8006e6a:	4617      	mov	r7, r2
 8006e6c:	260a      	movs	r6, #10
 8006e6e:	4694      	mov	ip, r2
 8006e70:	fb91 f5f6 	sdiv	r5, r1, r6
 8006e74:	fb06 1415 	mls	r4, r6, r5, r1
 8006e78:	3430      	adds	r4, #48	; 0x30
 8006e7a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006e7e:	460c      	mov	r4, r1
 8006e80:	2c63      	cmp	r4, #99	; 0x63
 8006e82:	f102 32ff 	add.w	r2, r2, #4294967295
 8006e86:	4629      	mov	r1, r5
 8006e88:	dcf1      	bgt.n	8006e6e <__exponent+0x22>
 8006e8a:	3130      	adds	r1, #48	; 0x30
 8006e8c:	f1ac 0402 	sub.w	r4, ip, #2
 8006e90:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006e94:	1c41      	adds	r1, r0, #1
 8006e96:	4622      	mov	r2, r4
 8006e98:	42ba      	cmp	r2, r7
 8006e9a:	d30a      	bcc.n	8006eb2 <__exponent+0x66>
 8006e9c:	f10d 0209 	add.w	r2, sp, #9
 8006ea0:	eba2 020c 	sub.w	r2, r2, ip
 8006ea4:	42bc      	cmp	r4, r7
 8006ea6:	bf88      	it	hi
 8006ea8:	2200      	movhi	r2, #0
 8006eaa:	4413      	add	r3, r2
 8006eac:	1a18      	subs	r0, r3, r0
 8006eae:	b003      	add	sp, #12
 8006eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006eb2:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006eb6:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006eba:	e7ed      	b.n	8006e98 <__exponent+0x4c>
 8006ebc:	2330      	movs	r3, #48	; 0x30
 8006ebe:	3130      	adds	r1, #48	; 0x30
 8006ec0:	7083      	strb	r3, [r0, #2]
 8006ec2:	70c1      	strb	r1, [r0, #3]
 8006ec4:	1d03      	adds	r3, r0, #4
 8006ec6:	e7f1      	b.n	8006eac <__exponent+0x60>

08006ec8 <_printf_float>:
 8006ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ecc:	ed2d 8b02 	vpush	{d8}
 8006ed0:	b08d      	sub	sp, #52	; 0x34
 8006ed2:	460c      	mov	r4, r1
 8006ed4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006ed8:	4616      	mov	r6, r2
 8006eda:	461f      	mov	r7, r3
 8006edc:	4605      	mov	r5, r0
 8006ede:	f000 fce7 	bl	80078b0 <_localeconv_r>
 8006ee2:	f8d0 a000 	ldr.w	sl, [r0]
 8006ee6:	4650      	mov	r0, sl
 8006ee8:	f7f9 f9c2 	bl	8000270 <strlen>
 8006eec:	2300      	movs	r3, #0
 8006eee:	930a      	str	r3, [sp, #40]	; 0x28
 8006ef0:	6823      	ldr	r3, [r4, #0]
 8006ef2:	9305      	str	r3, [sp, #20]
 8006ef4:	f8d8 3000 	ldr.w	r3, [r8]
 8006ef8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006efc:	3307      	adds	r3, #7
 8006efe:	f023 0307 	bic.w	r3, r3, #7
 8006f02:	f103 0208 	add.w	r2, r3, #8
 8006f06:	f8c8 2000 	str.w	r2, [r8]
 8006f0a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006f0e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006f12:	9307      	str	r3, [sp, #28]
 8006f14:	f8cd 8018 	str.w	r8, [sp, #24]
 8006f18:	ee08 0a10 	vmov	s16, r0
 8006f1c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006f20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f24:	4b9e      	ldr	r3, [pc, #632]	; (80071a0 <_printf_float+0x2d8>)
 8006f26:	f04f 32ff 	mov.w	r2, #4294967295
 8006f2a:	f7f9 fdff 	bl	8000b2c <__aeabi_dcmpun>
 8006f2e:	bb88      	cbnz	r0, 8006f94 <_printf_float+0xcc>
 8006f30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f34:	4b9a      	ldr	r3, [pc, #616]	; (80071a0 <_printf_float+0x2d8>)
 8006f36:	f04f 32ff 	mov.w	r2, #4294967295
 8006f3a:	f7f9 fdd9 	bl	8000af0 <__aeabi_dcmple>
 8006f3e:	bb48      	cbnz	r0, 8006f94 <_printf_float+0xcc>
 8006f40:	2200      	movs	r2, #0
 8006f42:	2300      	movs	r3, #0
 8006f44:	4640      	mov	r0, r8
 8006f46:	4649      	mov	r1, r9
 8006f48:	f7f9 fdc8 	bl	8000adc <__aeabi_dcmplt>
 8006f4c:	b110      	cbz	r0, 8006f54 <_printf_float+0x8c>
 8006f4e:	232d      	movs	r3, #45	; 0x2d
 8006f50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f54:	4a93      	ldr	r2, [pc, #588]	; (80071a4 <_printf_float+0x2dc>)
 8006f56:	4b94      	ldr	r3, [pc, #592]	; (80071a8 <_printf_float+0x2e0>)
 8006f58:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006f5c:	bf94      	ite	ls
 8006f5e:	4690      	movls	r8, r2
 8006f60:	4698      	movhi	r8, r3
 8006f62:	2303      	movs	r3, #3
 8006f64:	6123      	str	r3, [r4, #16]
 8006f66:	9b05      	ldr	r3, [sp, #20]
 8006f68:	f023 0304 	bic.w	r3, r3, #4
 8006f6c:	6023      	str	r3, [r4, #0]
 8006f6e:	f04f 0900 	mov.w	r9, #0
 8006f72:	9700      	str	r7, [sp, #0]
 8006f74:	4633      	mov	r3, r6
 8006f76:	aa0b      	add	r2, sp, #44	; 0x2c
 8006f78:	4621      	mov	r1, r4
 8006f7a:	4628      	mov	r0, r5
 8006f7c:	f000 f9da 	bl	8007334 <_printf_common>
 8006f80:	3001      	adds	r0, #1
 8006f82:	f040 8090 	bne.w	80070a6 <_printf_float+0x1de>
 8006f86:	f04f 30ff 	mov.w	r0, #4294967295
 8006f8a:	b00d      	add	sp, #52	; 0x34
 8006f8c:	ecbd 8b02 	vpop	{d8}
 8006f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f94:	4642      	mov	r2, r8
 8006f96:	464b      	mov	r3, r9
 8006f98:	4640      	mov	r0, r8
 8006f9a:	4649      	mov	r1, r9
 8006f9c:	f7f9 fdc6 	bl	8000b2c <__aeabi_dcmpun>
 8006fa0:	b140      	cbz	r0, 8006fb4 <_printf_float+0xec>
 8006fa2:	464b      	mov	r3, r9
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	bfbc      	itt	lt
 8006fa8:	232d      	movlt	r3, #45	; 0x2d
 8006faa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006fae:	4a7f      	ldr	r2, [pc, #508]	; (80071ac <_printf_float+0x2e4>)
 8006fb0:	4b7f      	ldr	r3, [pc, #508]	; (80071b0 <_printf_float+0x2e8>)
 8006fb2:	e7d1      	b.n	8006f58 <_printf_float+0x90>
 8006fb4:	6863      	ldr	r3, [r4, #4]
 8006fb6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006fba:	9206      	str	r2, [sp, #24]
 8006fbc:	1c5a      	adds	r2, r3, #1
 8006fbe:	d13f      	bne.n	8007040 <_printf_float+0x178>
 8006fc0:	2306      	movs	r3, #6
 8006fc2:	6063      	str	r3, [r4, #4]
 8006fc4:	9b05      	ldr	r3, [sp, #20]
 8006fc6:	6861      	ldr	r1, [r4, #4]
 8006fc8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006fcc:	2300      	movs	r3, #0
 8006fce:	9303      	str	r3, [sp, #12]
 8006fd0:	ab0a      	add	r3, sp, #40	; 0x28
 8006fd2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006fd6:	ab09      	add	r3, sp, #36	; 0x24
 8006fd8:	ec49 8b10 	vmov	d0, r8, r9
 8006fdc:	9300      	str	r3, [sp, #0]
 8006fde:	6022      	str	r2, [r4, #0]
 8006fe0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006fe4:	4628      	mov	r0, r5
 8006fe6:	f7ff fecf 	bl	8006d88 <__cvt>
 8006fea:	9b06      	ldr	r3, [sp, #24]
 8006fec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006fee:	2b47      	cmp	r3, #71	; 0x47
 8006ff0:	4680      	mov	r8, r0
 8006ff2:	d108      	bne.n	8007006 <_printf_float+0x13e>
 8006ff4:	1cc8      	adds	r0, r1, #3
 8006ff6:	db02      	blt.n	8006ffe <_printf_float+0x136>
 8006ff8:	6863      	ldr	r3, [r4, #4]
 8006ffa:	4299      	cmp	r1, r3
 8006ffc:	dd41      	ble.n	8007082 <_printf_float+0x1ba>
 8006ffe:	f1ab 0302 	sub.w	r3, fp, #2
 8007002:	fa5f fb83 	uxtb.w	fp, r3
 8007006:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800700a:	d820      	bhi.n	800704e <_printf_float+0x186>
 800700c:	3901      	subs	r1, #1
 800700e:	465a      	mov	r2, fp
 8007010:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007014:	9109      	str	r1, [sp, #36]	; 0x24
 8007016:	f7ff ff19 	bl	8006e4c <__exponent>
 800701a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800701c:	1813      	adds	r3, r2, r0
 800701e:	2a01      	cmp	r2, #1
 8007020:	4681      	mov	r9, r0
 8007022:	6123      	str	r3, [r4, #16]
 8007024:	dc02      	bgt.n	800702c <_printf_float+0x164>
 8007026:	6822      	ldr	r2, [r4, #0]
 8007028:	07d2      	lsls	r2, r2, #31
 800702a:	d501      	bpl.n	8007030 <_printf_float+0x168>
 800702c:	3301      	adds	r3, #1
 800702e:	6123      	str	r3, [r4, #16]
 8007030:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007034:	2b00      	cmp	r3, #0
 8007036:	d09c      	beq.n	8006f72 <_printf_float+0xaa>
 8007038:	232d      	movs	r3, #45	; 0x2d
 800703a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800703e:	e798      	b.n	8006f72 <_printf_float+0xaa>
 8007040:	9a06      	ldr	r2, [sp, #24]
 8007042:	2a47      	cmp	r2, #71	; 0x47
 8007044:	d1be      	bne.n	8006fc4 <_printf_float+0xfc>
 8007046:	2b00      	cmp	r3, #0
 8007048:	d1bc      	bne.n	8006fc4 <_printf_float+0xfc>
 800704a:	2301      	movs	r3, #1
 800704c:	e7b9      	b.n	8006fc2 <_printf_float+0xfa>
 800704e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007052:	d118      	bne.n	8007086 <_printf_float+0x1be>
 8007054:	2900      	cmp	r1, #0
 8007056:	6863      	ldr	r3, [r4, #4]
 8007058:	dd0b      	ble.n	8007072 <_printf_float+0x1aa>
 800705a:	6121      	str	r1, [r4, #16]
 800705c:	b913      	cbnz	r3, 8007064 <_printf_float+0x19c>
 800705e:	6822      	ldr	r2, [r4, #0]
 8007060:	07d0      	lsls	r0, r2, #31
 8007062:	d502      	bpl.n	800706a <_printf_float+0x1a2>
 8007064:	3301      	adds	r3, #1
 8007066:	440b      	add	r3, r1
 8007068:	6123      	str	r3, [r4, #16]
 800706a:	65a1      	str	r1, [r4, #88]	; 0x58
 800706c:	f04f 0900 	mov.w	r9, #0
 8007070:	e7de      	b.n	8007030 <_printf_float+0x168>
 8007072:	b913      	cbnz	r3, 800707a <_printf_float+0x1b2>
 8007074:	6822      	ldr	r2, [r4, #0]
 8007076:	07d2      	lsls	r2, r2, #31
 8007078:	d501      	bpl.n	800707e <_printf_float+0x1b6>
 800707a:	3302      	adds	r3, #2
 800707c:	e7f4      	b.n	8007068 <_printf_float+0x1a0>
 800707e:	2301      	movs	r3, #1
 8007080:	e7f2      	b.n	8007068 <_printf_float+0x1a0>
 8007082:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007086:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007088:	4299      	cmp	r1, r3
 800708a:	db05      	blt.n	8007098 <_printf_float+0x1d0>
 800708c:	6823      	ldr	r3, [r4, #0]
 800708e:	6121      	str	r1, [r4, #16]
 8007090:	07d8      	lsls	r0, r3, #31
 8007092:	d5ea      	bpl.n	800706a <_printf_float+0x1a2>
 8007094:	1c4b      	adds	r3, r1, #1
 8007096:	e7e7      	b.n	8007068 <_printf_float+0x1a0>
 8007098:	2900      	cmp	r1, #0
 800709a:	bfd4      	ite	le
 800709c:	f1c1 0202 	rsble	r2, r1, #2
 80070a0:	2201      	movgt	r2, #1
 80070a2:	4413      	add	r3, r2
 80070a4:	e7e0      	b.n	8007068 <_printf_float+0x1a0>
 80070a6:	6823      	ldr	r3, [r4, #0]
 80070a8:	055a      	lsls	r2, r3, #21
 80070aa:	d407      	bmi.n	80070bc <_printf_float+0x1f4>
 80070ac:	6923      	ldr	r3, [r4, #16]
 80070ae:	4642      	mov	r2, r8
 80070b0:	4631      	mov	r1, r6
 80070b2:	4628      	mov	r0, r5
 80070b4:	47b8      	blx	r7
 80070b6:	3001      	adds	r0, #1
 80070b8:	d12c      	bne.n	8007114 <_printf_float+0x24c>
 80070ba:	e764      	b.n	8006f86 <_printf_float+0xbe>
 80070bc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80070c0:	f240 80e0 	bls.w	8007284 <_printf_float+0x3bc>
 80070c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80070c8:	2200      	movs	r2, #0
 80070ca:	2300      	movs	r3, #0
 80070cc:	f7f9 fcfc 	bl	8000ac8 <__aeabi_dcmpeq>
 80070d0:	2800      	cmp	r0, #0
 80070d2:	d034      	beq.n	800713e <_printf_float+0x276>
 80070d4:	4a37      	ldr	r2, [pc, #220]	; (80071b4 <_printf_float+0x2ec>)
 80070d6:	2301      	movs	r3, #1
 80070d8:	4631      	mov	r1, r6
 80070da:	4628      	mov	r0, r5
 80070dc:	47b8      	blx	r7
 80070de:	3001      	adds	r0, #1
 80070e0:	f43f af51 	beq.w	8006f86 <_printf_float+0xbe>
 80070e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070e8:	429a      	cmp	r2, r3
 80070ea:	db02      	blt.n	80070f2 <_printf_float+0x22a>
 80070ec:	6823      	ldr	r3, [r4, #0]
 80070ee:	07d8      	lsls	r0, r3, #31
 80070f0:	d510      	bpl.n	8007114 <_printf_float+0x24c>
 80070f2:	ee18 3a10 	vmov	r3, s16
 80070f6:	4652      	mov	r2, sl
 80070f8:	4631      	mov	r1, r6
 80070fa:	4628      	mov	r0, r5
 80070fc:	47b8      	blx	r7
 80070fe:	3001      	adds	r0, #1
 8007100:	f43f af41 	beq.w	8006f86 <_printf_float+0xbe>
 8007104:	f04f 0800 	mov.w	r8, #0
 8007108:	f104 091a 	add.w	r9, r4, #26
 800710c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800710e:	3b01      	subs	r3, #1
 8007110:	4543      	cmp	r3, r8
 8007112:	dc09      	bgt.n	8007128 <_printf_float+0x260>
 8007114:	6823      	ldr	r3, [r4, #0]
 8007116:	079b      	lsls	r3, r3, #30
 8007118:	f100 8107 	bmi.w	800732a <_printf_float+0x462>
 800711c:	68e0      	ldr	r0, [r4, #12]
 800711e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007120:	4298      	cmp	r0, r3
 8007122:	bfb8      	it	lt
 8007124:	4618      	movlt	r0, r3
 8007126:	e730      	b.n	8006f8a <_printf_float+0xc2>
 8007128:	2301      	movs	r3, #1
 800712a:	464a      	mov	r2, r9
 800712c:	4631      	mov	r1, r6
 800712e:	4628      	mov	r0, r5
 8007130:	47b8      	blx	r7
 8007132:	3001      	adds	r0, #1
 8007134:	f43f af27 	beq.w	8006f86 <_printf_float+0xbe>
 8007138:	f108 0801 	add.w	r8, r8, #1
 800713c:	e7e6      	b.n	800710c <_printf_float+0x244>
 800713e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007140:	2b00      	cmp	r3, #0
 8007142:	dc39      	bgt.n	80071b8 <_printf_float+0x2f0>
 8007144:	4a1b      	ldr	r2, [pc, #108]	; (80071b4 <_printf_float+0x2ec>)
 8007146:	2301      	movs	r3, #1
 8007148:	4631      	mov	r1, r6
 800714a:	4628      	mov	r0, r5
 800714c:	47b8      	blx	r7
 800714e:	3001      	adds	r0, #1
 8007150:	f43f af19 	beq.w	8006f86 <_printf_float+0xbe>
 8007154:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007158:	4313      	orrs	r3, r2
 800715a:	d102      	bne.n	8007162 <_printf_float+0x29a>
 800715c:	6823      	ldr	r3, [r4, #0]
 800715e:	07d9      	lsls	r1, r3, #31
 8007160:	d5d8      	bpl.n	8007114 <_printf_float+0x24c>
 8007162:	ee18 3a10 	vmov	r3, s16
 8007166:	4652      	mov	r2, sl
 8007168:	4631      	mov	r1, r6
 800716a:	4628      	mov	r0, r5
 800716c:	47b8      	blx	r7
 800716e:	3001      	adds	r0, #1
 8007170:	f43f af09 	beq.w	8006f86 <_printf_float+0xbe>
 8007174:	f04f 0900 	mov.w	r9, #0
 8007178:	f104 0a1a 	add.w	sl, r4, #26
 800717c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800717e:	425b      	negs	r3, r3
 8007180:	454b      	cmp	r3, r9
 8007182:	dc01      	bgt.n	8007188 <_printf_float+0x2c0>
 8007184:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007186:	e792      	b.n	80070ae <_printf_float+0x1e6>
 8007188:	2301      	movs	r3, #1
 800718a:	4652      	mov	r2, sl
 800718c:	4631      	mov	r1, r6
 800718e:	4628      	mov	r0, r5
 8007190:	47b8      	blx	r7
 8007192:	3001      	adds	r0, #1
 8007194:	f43f aef7 	beq.w	8006f86 <_printf_float+0xbe>
 8007198:	f109 0901 	add.w	r9, r9, #1
 800719c:	e7ee      	b.n	800717c <_printf_float+0x2b4>
 800719e:	bf00      	nop
 80071a0:	7fefffff 	.word	0x7fefffff
 80071a4:	0800a06d 	.word	0x0800a06d
 80071a8:	0800a071 	.word	0x0800a071
 80071ac:	0800a075 	.word	0x0800a075
 80071b0:	0800a079 	.word	0x0800a079
 80071b4:	0800a07d 	.word	0x0800a07d
 80071b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80071bc:	429a      	cmp	r2, r3
 80071be:	bfa8      	it	ge
 80071c0:	461a      	movge	r2, r3
 80071c2:	2a00      	cmp	r2, #0
 80071c4:	4691      	mov	r9, r2
 80071c6:	dc37      	bgt.n	8007238 <_printf_float+0x370>
 80071c8:	f04f 0b00 	mov.w	fp, #0
 80071cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071d0:	f104 021a 	add.w	r2, r4, #26
 80071d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80071d6:	9305      	str	r3, [sp, #20]
 80071d8:	eba3 0309 	sub.w	r3, r3, r9
 80071dc:	455b      	cmp	r3, fp
 80071de:	dc33      	bgt.n	8007248 <_printf_float+0x380>
 80071e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071e4:	429a      	cmp	r2, r3
 80071e6:	db3b      	blt.n	8007260 <_printf_float+0x398>
 80071e8:	6823      	ldr	r3, [r4, #0]
 80071ea:	07da      	lsls	r2, r3, #31
 80071ec:	d438      	bmi.n	8007260 <_printf_float+0x398>
 80071ee:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80071f2:	eba2 0903 	sub.w	r9, r2, r3
 80071f6:	9b05      	ldr	r3, [sp, #20]
 80071f8:	1ad2      	subs	r2, r2, r3
 80071fa:	4591      	cmp	r9, r2
 80071fc:	bfa8      	it	ge
 80071fe:	4691      	movge	r9, r2
 8007200:	f1b9 0f00 	cmp.w	r9, #0
 8007204:	dc35      	bgt.n	8007272 <_printf_float+0x3aa>
 8007206:	f04f 0800 	mov.w	r8, #0
 800720a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800720e:	f104 0a1a 	add.w	sl, r4, #26
 8007212:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007216:	1a9b      	subs	r3, r3, r2
 8007218:	eba3 0309 	sub.w	r3, r3, r9
 800721c:	4543      	cmp	r3, r8
 800721e:	f77f af79 	ble.w	8007114 <_printf_float+0x24c>
 8007222:	2301      	movs	r3, #1
 8007224:	4652      	mov	r2, sl
 8007226:	4631      	mov	r1, r6
 8007228:	4628      	mov	r0, r5
 800722a:	47b8      	blx	r7
 800722c:	3001      	adds	r0, #1
 800722e:	f43f aeaa 	beq.w	8006f86 <_printf_float+0xbe>
 8007232:	f108 0801 	add.w	r8, r8, #1
 8007236:	e7ec      	b.n	8007212 <_printf_float+0x34a>
 8007238:	4613      	mov	r3, r2
 800723a:	4631      	mov	r1, r6
 800723c:	4642      	mov	r2, r8
 800723e:	4628      	mov	r0, r5
 8007240:	47b8      	blx	r7
 8007242:	3001      	adds	r0, #1
 8007244:	d1c0      	bne.n	80071c8 <_printf_float+0x300>
 8007246:	e69e      	b.n	8006f86 <_printf_float+0xbe>
 8007248:	2301      	movs	r3, #1
 800724a:	4631      	mov	r1, r6
 800724c:	4628      	mov	r0, r5
 800724e:	9205      	str	r2, [sp, #20]
 8007250:	47b8      	blx	r7
 8007252:	3001      	adds	r0, #1
 8007254:	f43f ae97 	beq.w	8006f86 <_printf_float+0xbe>
 8007258:	9a05      	ldr	r2, [sp, #20]
 800725a:	f10b 0b01 	add.w	fp, fp, #1
 800725e:	e7b9      	b.n	80071d4 <_printf_float+0x30c>
 8007260:	ee18 3a10 	vmov	r3, s16
 8007264:	4652      	mov	r2, sl
 8007266:	4631      	mov	r1, r6
 8007268:	4628      	mov	r0, r5
 800726a:	47b8      	blx	r7
 800726c:	3001      	adds	r0, #1
 800726e:	d1be      	bne.n	80071ee <_printf_float+0x326>
 8007270:	e689      	b.n	8006f86 <_printf_float+0xbe>
 8007272:	9a05      	ldr	r2, [sp, #20]
 8007274:	464b      	mov	r3, r9
 8007276:	4442      	add	r2, r8
 8007278:	4631      	mov	r1, r6
 800727a:	4628      	mov	r0, r5
 800727c:	47b8      	blx	r7
 800727e:	3001      	adds	r0, #1
 8007280:	d1c1      	bne.n	8007206 <_printf_float+0x33e>
 8007282:	e680      	b.n	8006f86 <_printf_float+0xbe>
 8007284:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007286:	2a01      	cmp	r2, #1
 8007288:	dc01      	bgt.n	800728e <_printf_float+0x3c6>
 800728a:	07db      	lsls	r3, r3, #31
 800728c:	d53a      	bpl.n	8007304 <_printf_float+0x43c>
 800728e:	2301      	movs	r3, #1
 8007290:	4642      	mov	r2, r8
 8007292:	4631      	mov	r1, r6
 8007294:	4628      	mov	r0, r5
 8007296:	47b8      	blx	r7
 8007298:	3001      	adds	r0, #1
 800729a:	f43f ae74 	beq.w	8006f86 <_printf_float+0xbe>
 800729e:	ee18 3a10 	vmov	r3, s16
 80072a2:	4652      	mov	r2, sl
 80072a4:	4631      	mov	r1, r6
 80072a6:	4628      	mov	r0, r5
 80072a8:	47b8      	blx	r7
 80072aa:	3001      	adds	r0, #1
 80072ac:	f43f ae6b 	beq.w	8006f86 <_printf_float+0xbe>
 80072b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80072b4:	2200      	movs	r2, #0
 80072b6:	2300      	movs	r3, #0
 80072b8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80072bc:	f7f9 fc04 	bl	8000ac8 <__aeabi_dcmpeq>
 80072c0:	b9d8      	cbnz	r0, 80072fa <_printf_float+0x432>
 80072c2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80072c6:	f108 0201 	add.w	r2, r8, #1
 80072ca:	4631      	mov	r1, r6
 80072cc:	4628      	mov	r0, r5
 80072ce:	47b8      	blx	r7
 80072d0:	3001      	adds	r0, #1
 80072d2:	d10e      	bne.n	80072f2 <_printf_float+0x42a>
 80072d4:	e657      	b.n	8006f86 <_printf_float+0xbe>
 80072d6:	2301      	movs	r3, #1
 80072d8:	4652      	mov	r2, sl
 80072da:	4631      	mov	r1, r6
 80072dc:	4628      	mov	r0, r5
 80072de:	47b8      	blx	r7
 80072e0:	3001      	adds	r0, #1
 80072e2:	f43f ae50 	beq.w	8006f86 <_printf_float+0xbe>
 80072e6:	f108 0801 	add.w	r8, r8, #1
 80072ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072ec:	3b01      	subs	r3, #1
 80072ee:	4543      	cmp	r3, r8
 80072f0:	dcf1      	bgt.n	80072d6 <_printf_float+0x40e>
 80072f2:	464b      	mov	r3, r9
 80072f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80072f8:	e6da      	b.n	80070b0 <_printf_float+0x1e8>
 80072fa:	f04f 0800 	mov.w	r8, #0
 80072fe:	f104 0a1a 	add.w	sl, r4, #26
 8007302:	e7f2      	b.n	80072ea <_printf_float+0x422>
 8007304:	2301      	movs	r3, #1
 8007306:	4642      	mov	r2, r8
 8007308:	e7df      	b.n	80072ca <_printf_float+0x402>
 800730a:	2301      	movs	r3, #1
 800730c:	464a      	mov	r2, r9
 800730e:	4631      	mov	r1, r6
 8007310:	4628      	mov	r0, r5
 8007312:	47b8      	blx	r7
 8007314:	3001      	adds	r0, #1
 8007316:	f43f ae36 	beq.w	8006f86 <_printf_float+0xbe>
 800731a:	f108 0801 	add.w	r8, r8, #1
 800731e:	68e3      	ldr	r3, [r4, #12]
 8007320:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007322:	1a5b      	subs	r3, r3, r1
 8007324:	4543      	cmp	r3, r8
 8007326:	dcf0      	bgt.n	800730a <_printf_float+0x442>
 8007328:	e6f8      	b.n	800711c <_printf_float+0x254>
 800732a:	f04f 0800 	mov.w	r8, #0
 800732e:	f104 0919 	add.w	r9, r4, #25
 8007332:	e7f4      	b.n	800731e <_printf_float+0x456>

08007334 <_printf_common>:
 8007334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007338:	4616      	mov	r6, r2
 800733a:	4699      	mov	r9, r3
 800733c:	688a      	ldr	r2, [r1, #8]
 800733e:	690b      	ldr	r3, [r1, #16]
 8007340:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007344:	4293      	cmp	r3, r2
 8007346:	bfb8      	it	lt
 8007348:	4613      	movlt	r3, r2
 800734a:	6033      	str	r3, [r6, #0]
 800734c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007350:	4607      	mov	r7, r0
 8007352:	460c      	mov	r4, r1
 8007354:	b10a      	cbz	r2, 800735a <_printf_common+0x26>
 8007356:	3301      	adds	r3, #1
 8007358:	6033      	str	r3, [r6, #0]
 800735a:	6823      	ldr	r3, [r4, #0]
 800735c:	0699      	lsls	r1, r3, #26
 800735e:	bf42      	ittt	mi
 8007360:	6833      	ldrmi	r3, [r6, #0]
 8007362:	3302      	addmi	r3, #2
 8007364:	6033      	strmi	r3, [r6, #0]
 8007366:	6825      	ldr	r5, [r4, #0]
 8007368:	f015 0506 	ands.w	r5, r5, #6
 800736c:	d106      	bne.n	800737c <_printf_common+0x48>
 800736e:	f104 0a19 	add.w	sl, r4, #25
 8007372:	68e3      	ldr	r3, [r4, #12]
 8007374:	6832      	ldr	r2, [r6, #0]
 8007376:	1a9b      	subs	r3, r3, r2
 8007378:	42ab      	cmp	r3, r5
 800737a:	dc26      	bgt.n	80073ca <_printf_common+0x96>
 800737c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007380:	1e13      	subs	r3, r2, #0
 8007382:	6822      	ldr	r2, [r4, #0]
 8007384:	bf18      	it	ne
 8007386:	2301      	movne	r3, #1
 8007388:	0692      	lsls	r2, r2, #26
 800738a:	d42b      	bmi.n	80073e4 <_printf_common+0xb0>
 800738c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007390:	4649      	mov	r1, r9
 8007392:	4638      	mov	r0, r7
 8007394:	47c0      	blx	r8
 8007396:	3001      	adds	r0, #1
 8007398:	d01e      	beq.n	80073d8 <_printf_common+0xa4>
 800739a:	6823      	ldr	r3, [r4, #0]
 800739c:	6922      	ldr	r2, [r4, #16]
 800739e:	f003 0306 	and.w	r3, r3, #6
 80073a2:	2b04      	cmp	r3, #4
 80073a4:	bf02      	ittt	eq
 80073a6:	68e5      	ldreq	r5, [r4, #12]
 80073a8:	6833      	ldreq	r3, [r6, #0]
 80073aa:	1aed      	subeq	r5, r5, r3
 80073ac:	68a3      	ldr	r3, [r4, #8]
 80073ae:	bf0c      	ite	eq
 80073b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073b4:	2500      	movne	r5, #0
 80073b6:	4293      	cmp	r3, r2
 80073b8:	bfc4      	itt	gt
 80073ba:	1a9b      	subgt	r3, r3, r2
 80073bc:	18ed      	addgt	r5, r5, r3
 80073be:	2600      	movs	r6, #0
 80073c0:	341a      	adds	r4, #26
 80073c2:	42b5      	cmp	r5, r6
 80073c4:	d11a      	bne.n	80073fc <_printf_common+0xc8>
 80073c6:	2000      	movs	r0, #0
 80073c8:	e008      	b.n	80073dc <_printf_common+0xa8>
 80073ca:	2301      	movs	r3, #1
 80073cc:	4652      	mov	r2, sl
 80073ce:	4649      	mov	r1, r9
 80073d0:	4638      	mov	r0, r7
 80073d2:	47c0      	blx	r8
 80073d4:	3001      	adds	r0, #1
 80073d6:	d103      	bne.n	80073e0 <_printf_common+0xac>
 80073d8:	f04f 30ff 	mov.w	r0, #4294967295
 80073dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073e0:	3501      	adds	r5, #1
 80073e2:	e7c6      	b.n	8007372 <_printf_common+0x3e>
 80073e4:	18e1      	adds	r1, r4, r3
 80073e6:	1c5a      	adds	r2, r3, #1
 80073e8:	2030      	movs	r0, #48	; 0x30
 80073ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80073ee:	4422      	add	r2, r4
 80073f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80073f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80073f8:	3302      	adds	r3, #2
 80073fa:	e7c7      	b.n	800738c <_printf_common+0x58>
 80073fc:	2301      	movs	r3, #1
 80073fe:	4622      	mov	r2, r4
 8007400:	4649      	mov	r1, r9
 8007402:	4638      	mov	r0, r7
 8007404:	47c0      	blx	r8
 8007406:	3001      	adds	r0, #1
 8007408:	d0e6      	beq.n	80073d8 <_printf_common+0xa4>
 800740a:	3601      	adds	r6, #1
 800740c:	e7d9      	b.n	80073c2 <_printf_common+0x8e>
	...

08007410 <_printf_i>:
 8007410:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007414:	7e0f      	ldrb	r7, [r1, #24]
 8007416:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007418:	2f78      	cmp	r7, #120	; 0x78
 800741a:	4691      	mov	r9, r2
 800741c:	4680      	mov	r8, r0
 800741e:	460c      	mov	r4, r1
 8007420:	469a      	mov	sl, r3
 8007422:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007426:	d807      	bhi.n	8007438 <_printf_i+0x28>
 8007428:	2f62      	cmp	r7, #98	; 0x62
 800742a:	d80a      	bhi.n	8007442 <_printf_i+0x32>
 800742c:	2f00      	cmp	r7, #0
 800742e:	f000 80d4 	beq.w	80075da <_printf_i+0x1ca>
 8007432:	2f58      	cmp	r7, #88	; 0x58
 8007434:	f000 80c0 	beq.w	80075b8 <_printf_i+0x1a8>
 8007438:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800743c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007440:	e03a      	b.n	80074b8 <_printf_i+0xa8>
 8007442:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007446:	2b15      	cmp	r3, #21
 8007448:	d8f6      	bhi.n	8007438 <_printf_i+0x28>
 800744a:	a101      	add	r1, pc, #4	; (adr r1, 8007450 <_printf_i+0x40>)
 800744c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007450:	080074a9 	.word	0x080074a9
 8007454:	080074bd 	.word	0x080074bd
 8007458:	08007439 	.word	0x08007439
 800745c:	08007439 	.word	0x08007439
 8007460:	08007439 	.word	0x08007439
 8007464:	08007439 	.word	0x08007439
 8007468:	080074bd 	.word	0x080074bd
 800746c:	08007439 	.word	0x08007439
 8007470:	08007439 	.word	0x08007439
 8007474:	08007439 	.word	0x08007439
 8007478:	08007439 	.word	0x08007439
 800747c:	080075c1 	.word	0x080075c1
 8007480:	080074e9 	.word	0x080074e9
 8007484:	0800757b 	.word	0x0800757b
 8007488:	08007439 	.word	0x08007439
 800748c:	08007439 	.word	0x08007439
 8007490:	080075e3 	.word	0x080075e3
 8007494:	08007439 	.word	0x08007439
 8007498:	080074e9 	.word	0x080074e9
 800749c:	08007439 	.word	0x08007439
 80074a0:	08007439 	.word	0x08007439
 80074a4:	08007583 	.word	0x08007583
 80074a8:	682b      	ldr	r3, [r5, #0]
 80074aa:	1d1a      	adds	r2, r3, #4
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	602a      	str	r2, [r5, #0]
 80074b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074b8:	2301      	movs	r3, #1
 80074ba:	e09f      	b.n	80075fc <_printf_i+0x1ec>
 80074bc:	6820      	ldr	r0, [r4, #0]
 80074be:	682b      	ldr	r3, [r5, #0]
 80074c0:	0607      	lsls	r7, r0, #24
 80074c2:	f103 0104 	add.w	r1, r3, #4
 80074c6:	6029      	str	r1, [r5, #0]
 80074c8:	d501      	bpl.n	80074ce <_printf_i+0xbe>
 80074ca:	681e      	ldr	r6, [r3, #0]
 80074cc:	e003      	b.n	80074d6 <_printf_i+0xc6>
 80074ce:	0646      	lsls	r6, r0, #25
 80074d0:	d5fb      	bpl.n	80074ca <_printf_i+0xba>
 80074d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80074d6:	2e00      	cmp	r6, #0
 80074d8:	da03      	bge.n	80074e2 <_printf_i+0xd2>
 80074da:	232d      	movs	r3, #45	; 0x2d
 80074dc:	4276      	negs	r6, r6
 80074de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074e2:	485a      	ldr	r0, [pc, #360]	; (800764c <_printf_i+0x23c>)
 80074e4:	230a      	movs	r3, #10
 80074e6:	e012      	b.n	800750e <_printf_i+0xfe>
 80074e8:	682b      	ldr	r3, [r5, #0]
 80074ea:	6820      	ldr	r0, [r4, #0]
 80074ec:	1d19      	adds	r1, r3, #4
 80074ee:	6029      	str	r1, [r5, #0]
 80074f0:	0605      	lsls	r5, r0, #24
 80074f2:	d501      	bpl.n	80074f8 <_printf_i+0xe8>
 80074f4:	681e      	ldr	r6, [r3, #0]
 80074f6:	e002      	b.n	80074fe <_printf_i+0xee>
 80074f8:	0641      	lsls	r1, r0, #25
 80074fa:	d5fb      	bpl.n	80074f4 <_printf_i+0xe4>
 80074fc:	881e      	ldrh	r6, [r3, #0]
 80074fe:	4853      	ldr	r0, [pc, #332]	; (800764c <_printf_i+0x23c>)
 8007500:	2f6f      	cmp	r7, #111	; 0x6f
 8007502:	bf0c      	ite	eq
 8007504:	2308      	moveq	r3, #8
 8007506:	230a      	movne	r3, #10
 8007508:	2100      	movs	r1, #0
 800750a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800750e:	6865      	ldr	r5, [r4, #4]
 8007510:	60a5      	str	r5, [r4, #8]
 8007512:	2d00      	cmp	r5, #0
 8007514:	bfa2      	ittt	ge
 8007516:	6821      	ldrge	r1, [r4, #0]
 8007518:	f021 0104 	bicge.w	r1, r1, #4
 800751c:	6021      	strge	r1, [r4, #0]
 800751e:	b90e      	cbnz	r6, 8007524 <_printf_i+0x114>
 8007520:	2d00      	cmp	r5, #0
 8007522:	d04b      	beq.n	80075bc <_printf_i+0x1ac>
 8007524:	4615      	mov	r5, r2
 8007526:	fbb6 f1f3 	udiv	r1, r6, r3
 800752a:	fb03 6711 	mls	r7, r3, r1, r6
 800752e:	5dc7      	ldrb	r7, [r0, r7]
 8007530:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007534:	4637      	mov	r7, r6
 8007536:	42bb      	cmp	r3, r7
 8007538:	460e      	mov	r6, r1
 800753a:	d9f4      	bls.n	8007526 <_printf_i+0x116>
 800753c:	2b08      	cmp	r3, #8
 800753e:	d10b      	bne.n	8007558 <_printf_i+0x148>
 8007540:	6823      	ldr	r3, [r4, #0]
 8007542:	07de      	lsls	r6, r3, #31
 8007544:	d508      	bpl.n	8007558 <_printf_i+0x148>
 8007546:	6923      	ldr	r3, [r4, #16]
 8007548:	6861      	ldr	r1, [r4, #4]
 800754a:	4299      	cmp	r1, r3
 800754c:	bfde      	ittt	le
 800754e:	2330      	movle	r3, #48	; 0x30
 8007550:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007554:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007558:	1b52      	subs	r2, r2, r5
 800755a:	6122      	str	r2, [r4, #16]
 800755c:	f8cd a000 	str.w	sl, [sp]
 8007560:	464b      	mov	r3, r9
 8007562:	aa03      	add	r2, sp, #12
 8007564:	4621      	mov	r1, r4
 8007566:	4640      	mov	r0, r8
 8007568:	f7ff fee4 	bl	8007334 <_printf_common>
 800756c:	3001      	adds	r0, #1
 800756e:	d14a      	bne.n	8007606 <_printf_i+0x1f6>
 8007570:	f04f 30ff 	mov.w	r0, #4294967295
 8007574:	b004      	add	sp, #16
 8007576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800757a:	6823      	ldr	r3, [r4, #0]
 800757c:	f043 0320 	orr.w	r3, r3, #32
 8007580:	6023      	str	r3, [r4, #0]
 8007582:	4833      	ldr	r0, [pc, #204]	; (8007650 <_printf_i+0x240>)
 8007584:	2778      	movs	r7, #120	; 0x78
 8007586:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800758a:	6823      	ldr	r3, [r4, #0]
 800758c:	6829      	ldr	r1, [r5, #0]
 800758e:	061f      	lsls	r7, r3, #24
 8007590:	f851 6b04 	ldr.w	r6, [r1], #4
 8007594:	d402      	bmi.n	800759c <_printf_i+0x18c>
 8007596:	065f      	lsls	r7, r3, #25
 8007598:	bf48      	it	mi
 800759a:	b2b6      	uxthmi	r6, r6
 800759c:	07df      	lsls	r7, r3, #31
 800759e:	bf48      	it	mi
 80075a0:	f043 0320 	orrmi.w	r3, r3, #32
 80075a4:	6029      	str	r1, [r5, #0]
 80075a6:	bf48      	it	mi
 80075a8:	6023      	strmi	r3, [r4, #0]
 80075aa:	b91e      	cbnz	r6, 80075b4 <_printf_i+0x1a4>
 80075ac:	6823      	ldr	r3, [r4, #0]
 80075ae:	f023 0320 	bic.w	r3, r3, #32
 80075b2:	6023      	str	r3, [r4, #0]
 80075b4:	2310      	movs	r3, #16
 80075b6:	e7a7      	b.n	8007508 <_printf_i+0xf8>
 80075b8:	4824      	ldr	r0, [pc, #144]	; (800764c <_printf_i+0x23c>)
 80075ba:	e7e4      	b.n	8007586 <_printf_i+0x176>
 80075bc:	4615      	mov	r5, r2
 80075be:	e7bd      	b.n	800753c <_printf_i+0x12c>
 80075c0:	682b      	ldr	r3, [r5, #0]
 80075c2:	6826      	ldr	r6, [r4, #0]
 80075c4:	6961      	ldr	r1, [r4, #20]
 80075c6:	1d18      	adds	r0, r3, #4
 80075c8:	6028      	str	r0, [r5, #0]
 80075ca:	0635      	lsls	r5, r6, #24
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	d501      	bpl.n	80075d4 <_printf_i+0x1c4>
 80075d0:	6019      	str	r1, [r3, #0]
 80075d2:	e002      	b.n	80075da <_printf_i+0x1ca>
 80075d4:	0670      	lsls	r0, r6, #25
 80075d6:	d5fb      	bpl.n	80075d0 <_printf_i+0x1c0>
 80075d8:	8019      	strh	r1, [r3, #0]
 80075da:	2300      	movs	r3, #0
 80075dc:	6123      	str	r3, [r4, #16]
 80075de:	4615      	mov	r5, r2
 80075e0:	e7bc      	b.n	800755c <_printf_i+0x14c>
 80075e2:	682b      	ldr	r3, [r5, #0]
 80075e4:	1d1a      	adds	r2, r3, #4
 80075e6:	602a      	str	r2, [r5, #0]
 80075e8:	681d      	ldr	r5, [r3, #0]
 80075ea:	6862      	ldr	r2, [r4, #4]
 80075ec:	2100      	movs	r1, #0
 80075ee:	4628      	mov	r0, r5
 80075f0:	f7f8 fdee 	bl	80001d0 <memchr>
 80075f4:	b108      	cbz	r0, 80075fa <_printf_i+0x1ea>
 80075f6:	1b40      	subs	r0, r0, r5
 80075f8:	6060      	str	r0, [r4, #4]
 80075fa:	6863      	ldr	r3, [r4, #4]
 80075fc:	6123      	str	r3, [r4, #16]
 80075fe:	2300      	movs	r3, #0
 8007600:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007604:	e7aa      	b.n	800755c <_printf_i+0x14c>
 8007606:	6923      	ldr	r3, [r4, #16]
 8007608:	462a      	mov	r2, r5
 800760a:	4649      	mov	r1, r9
 800760c:	4640      	mov	r0, r8
 800760e:	47d0      	blx	sl
 8007610:	3001      	adds	r0, #1
 8007612:	d0ad      	beq.n	8007570 <_printf_i+0x160>
 8007614:	6823      	ldr	r3, [r4, #0]
 8007616:	079b      	lsls	r3, r3, #30
 8007618:	d413      	bmi.n	8007642 <_printf_i+0x232>
 800761a:	68e0      	ldr	r0, [r4, #12]
 800761c:	9b03      	ldr	r3, [sp, #12]
 800761e:	4298      	cmp	r0, r3
 8007620:	bfb8      	it	lt
 8007622:	4618      	movlt	r0, r3
 8007624:	e7a6      	b.n	8007574 <_printf_i+0x164>
 8007626:	2301      	movs	r3, #1
 8007628:	4632      	mov	r2, r6
 800762a:	4649      	mov	r1, r9
 800762c:	4640      	mov	r0, r8
 800762e:	47d0      	blx	sl
 8007630:	3001      	adds	r0, #1
 8007632:	d09d      	beq.n	8007570 <_printf_i+0x160>
 8007634:	3501      	adds	r5, #1
 8007636:	68e3      	ldr	r3, [r4, #12]
 8007638:	9903      	ldr	r1, [sp, #12]
 800763a:	1a5b      	subs	r3, r3, r1
 800763c:	42ab      	cmp	r3, r5
 800763e:	dcf2      	bgt.n	8007626 <_printf_i+0x216>
 8007640:	e7eb      	b.n	800761a <_printf_i+0x20a>
 8007642:	2500      	movs	r5, #0
 8007644:	f104 0619 	add.w	r6, r4, #25
 8007648:	e7f5      	b.n	8007636 <_printf_i+0x226>
 800764a:	bf00      	nop
 800764c:	0800a07f 	.word	0x0800a07f
 8007650:	0800a090 	.word	0x0800a090

08007654 <std>:
 8007654:	2300      	movs	r3, #0
 8007656:	b510      	push	{r4, lr}
 8007658:	4604      	mov	r4, r0
 800765a:	e9c0 3300 	strd	r3, r3, [r0]
 800765e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007662:	6083      	str	r3, [r0, #8]
 8007664:	8181      	strh	r1, [r0, #12]
 8007666:	6643      	str	r3, [r0, #100]	; 0x64
 8007668:	81c2      	strh	r2, [r0, #14]
 800766a:	6183      	str	r3, [r0, #24]
 800766c:	4619      	mov	r1, r3
 800766e:	2208      	movs	r2, #8
 8007670:	305c      	adds	r0, #92	; 0x5c
 8007672:	f000 f914 	bl	800789e <memset>
 8007676:	4b0d      	ldr	r3, [pc, #52]	; (80076ac <std+0x58>)
 8007678:	6263      	str	r3, [r4, #36]	; 0x24
 800767a:	4b0d      	ldr	r3, [pc, #52]	; (80076b0 <std+0x5c>)
 800767c:	62a3      	str	r3, [r4, #40]	; 0x28
 800767e:	4b0d      	ldr	r3, [pc, #52]	; (80076b4 <std+0x60>)
 8007680:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007682:	4b0d      	ldr	r3, [pc, #52]	; (80076b8 <std+0x64>)
 8007684:	6323      	str	r3, [r4, #48]	; 0x30
 8007686:	4b0d      	ldr	r3, [pc, #52]	; (80076bc <std+0x68>)
 8007688:	6224      	str	r4, [r4, #32]
 800768a:	429c      	cmp	r4, r3
 800768c:	d006      	beq.n	800769c <std+0x48>
 800768e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007692:	4294      	cmp	r4, r2
 8007694:	d002      	beq.n	800769c <std+0x48>
 8007696:	33d0      	adds	r3, #208	; 0xd0
 8007698:	429c      	cmp	r4, r3
 800769a:	d105      	bne.n	80076a8 <std+0x54>
 800769c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80076a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076a4:	f000 b978 	b.w	8007998 <__retarget_lock_init_recursive>
 80076a8:	bd10      	pop	{r4, pc}
 80076aa:	bf00      	nop
 80076ac:	08007819 	.word	0x08007819
 80076b0:	0800783b 	.word	0x0800783b
 80076b4:	08007873 	.word	0x08007873
 80076b8:	08007897 	.word	0x08007897
 80076bc:	200004a4 	.word	0x200004a4

080076c0 <stdio_exit_handler>:
 80076c0:	4a02      	ldr	r2, [pc, #8]	; (80076cc <stdio_exit_handler+0xc>)
 80076c2:	4903      	ldr	r1, [pc, #12]	; (80076d0 <stdio_exit_handler+0x10>)
 80076c4:	4803      	ldr	r0, [pc, #12]	; (80076d4 <stdio_exit_handler+0x14>)
 80076c6:	f000 b869 	b.w	800779c <_fwalk_sglue>
 80076ca:	bf00      	nop
 80076cc:	20000078 	.word	0x20000078
 80076d0:	08009349 	.word	0x08009349
 80076d4:	20000084 	.word	0x20000084

080076d8 <cleanup_stdio>:
 80076d8:	6841      	ldr	r1, [r0, #4]
 80076da:	4b0c      	ldr	r3, [pc, #48]	; (800770c <cleanup_stdio+0x34>)
 80076dc:	4299      	cmp	r1, r3
 80076de:	b510      	push	{r4, lr}
 80076e0:	4604      	mov	r4, r0
 80076e2:	d001      	beq.n	80076e8 <cleanup_stdio+0x10>
 80076e4:	f001 fe30 	bl	8009348 <_fflush_r>
 80076e8:	68a1      	ldr	r1, [r4, #8]
 80076ea:	4b09      	ldr	r3, [pc, #36]	; (8007710 <cleanup_stdio+0x38>)
 80076ec:	4299      	cmp	r1, r3
 80076ee:	d002      	beq.n	80076f6 <cleanup_stdio+0x1e>
 80076f0:	4620      	mov	r0, r4
 80076f2:	f001 fe29 	bl	8009348 <_fflush_r>
 80076f6:	68e1      	ldr	r1, [r4, #12]
 80076f8:	4b06      	ldr	r3, [pc, #24]	; (8007714 <cleanup_stdio+0x3c>)
 80076fa:	4299      	cmp	r1, r3
 80076fc:	d004      	beq.n	8007708 <cleanup_stdio+0x30>
 80076fe:	4620      	mov	r0, r4
 8007700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007704:	f001 be20 	b.w	8009348 <_fflush_r>
 8007708:	bd10      	pop	{r4, pc}
 800770a:	bf00      	nop
 800770c:	200004a4 	.word	0x200004a4
 8007710:	2000050c 	.word	0x2000050c
 8007714:	20000574 	.word	0x20000574

08007718 <global_stdio_init.part.0>:
 8007718:	b510      	push	{r4, lr}
 800771a:	4b0b      	ldr	r3, [pc, #44]	; (8007748 <global_stdio_init.part.0+0x30>)
 800771c:	4c0b      	ldr	r4, [pc, #44]	; (800774c <global_stdio_init.part.0+0x34>)
 800771e:	4a0c      	ldr	r2, [pc, #48]	; (8007750 <global_stdio_init.part.0+0x38>)
 8007720:	601a      	str	r2, [r3, #0]
 8007722:	4620      	mov	r0, r4
 8007724:	2200      	movs	r2, #0
 8007726:	2104      	movs	r1, #4
 8007728:	f7ff ff94 	bl	8007654 <std>
 800772c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007730:	2201      	movs	r2, #1
 8007732:	2109      	movs	r1, #9
 8007734:	f7ff ff8e 	bl	8007654 <std>
 8007738:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800773c:	2202      	movs	r2, #2
 800773e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007742:	2112      	movs	r1, #18
 8007744:	f7ff bf86 	b.w	8007654 <std>
 8007748:	200005dc 	.word	0x200005dc
 800774c:	200004a4 	.word	0x200004a4
 8007750:	080076c1 	.word	0x080076c1

08007754 <__sfp_lock_acquire>:
 8007754:	4801      	ldr	r0, [pc, #4]	; (800775c <__sfp_lock_acquire+0x8>)
 8007756:	f000 b920 	b.w	800799a <__retarget_lock_acquire_recursive>
 800775a:	bf00      	nop
 800775c:	200005e5 	.word	0x200005e5

08007760 <__sfp_lock_release>:
 8007760:	4801      	ldr	r0, [pc, #4]	; (8007768 <__sfp_lock_release+0x8>)
 8007762:	f000 b91b 	b.w	800799c <__retarget_lock_release_recursive>
 8007766:	bf00      	nop
 8007768:	200005e5 	.word	0x200005e5

0800776c <__sinit>:
 800776c:	b510      	push	{r4, lr}
 800776e:	4604      	mov	r4, r0
 8007770:	f7ff fff0 	bl	8007754 <__sfp_lock_acquire>
 8007774:	6a23      	ldr	r3, [r4, #32]
 8007776:	b11b      	cbz	r3, 8007780 <__sinit+0x14>
 8007778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800777c:	f7ff bff0 	b.w	8007760 <__sfp_lock_release>
 8007780:	4b04      	ldr	r3, [pc, #16]	; (8007794 <__sinit+0x28>)
 8007782:	6223      	str	r3, [r4, #32]
 8007784:	4b04      	ldr	r3, [pc, #16]	; (8007798 <__sinit+0x2c>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d1f5      	bne.n	8007778 <__sinit+0xc>
 800778c:	f7ff ffc4 	bl	8007718 <global_stdio_init.part.0>
 8007790:	e7f2      	b.n	8007778 <__sinit+0xc>
 8007792:	bf00      	nop
 8007794:	080076d9 	.word	0x080076d9
 8007798:	200005dc 	.word	0x200005dc

0800779c <_fwalk_sglue>:
 800779c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077a0:	4607      	mov	r7, r0
 80077a2:	4688      	mov	r8, r1
 80077a4:	4614      	mov	r4, r2
 80077a6:	2600      	movs	r6, #0
 80077a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80077ac:	f1b9 0901 	subs.w	r9, r9, #1
 80077b0:	d505      	bpl.n	80077be <_fwalk_sglue+0x22>
 80077b2:	6824      	ldr	r4, [r4, #0]
 80077b4:	2c00      	cmp	r4, #0
 80077b6:	d1f7      	bne.n	80077a8 <_fwalk_sglue+0xc>
 80077b8:	4630      	mov	r0, r6
 80077ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077be:	89ab      	ldrh	r3, [r5, #12]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d907      	bls.n	80077d4 <_fwalk_sglue+0x38>
 80077c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80077c8:	3301      	adds	r3, #1
 80077ca:	d003      	beq.n	80077d4 <_fwalk_sglue+0x38>
 80077cc:	4629      	mov	r1, r5
 80077ce:	4638      	mov	r0, r7
 80077d0:	47c0      	blx	r8
 80077d2:	4306      	orrs	r6, r0
 80077d4:	3568      	adds	r5, #104	; 0x68
 80077d6:	e7e9      	b.n	80077ac <_fwalk_sglue+0x10>

080077d8 <siprintf>:
 80077d8:	b40e      	push	{r1, r2, r3}
 80077da:	b500      	push	{lr}
 80077dc:	b09c      	sub	sp, #112	; 0x70
 80077de:	ab1d      	add	r3, sp, #116	; 0x74
 80077e0:	9002      	str	r0, [sp, #8]
 80077e2:	9006      	str	r0, [sp, #24]
 80077e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80077e8:	4809      	ldr	r0, [pc, #36]	; (8007810 <siprintf+0x38>)
 80077ea:	9107      	str	r1, [sp, #28]
 80077ec:	9104      	str	r1, [sp, #16]
 80077ee:	4909      	ldr	r1, [pc, #36]	; (8007814 <siprintf+0x3c>)
 80077f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80077f4:	9105      	str	r1, [sp, #20]
 80077f6:	6800      	ldr	r0, [r0, #0]
 80077f8:	9301      	str	r3, [sp, #4]
 80077fa:	a902      	add	r1, sp, #8
 80077fc:	f001 fc20 	bl	8009040 <_svfiprintf_r>
 8007800:	9b02      	ldr	r3, [sp, #8]
 8007802:	2200      	movs	r2, #0
 8007804:	701a      	strb	r2, [r3, #0]
 8007806:	b01c      	add	sp, #112	; 0x70
 8007808:	f85d eb04 	ldr.w	lr, [sp], #4
 800780c:	b003      	add	sp, #12
 800780e:	4770      	bx	lr
 8007810:	200000d0 	.word	0x200000d0
 8007814:	ffff0208 	.word	0xffff0208

08007818 <__sread>:
 8007818:	b510      	push	{r4, lr}
 800781a:	460c      	mov	r4, r1
 800781c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007820:	f000 f86c 	bl	80078fc <_read_r>
 8007824:	2800      	cmp	r0, #0
 8007826:	bfab      	itete	ge
 8007828:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800782a:	89a3      	ldrhlt	r3, [r4, #12]
 800782c:	181b      	addge	r3, r3, r0
 800782e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007832:	bfac      	ite	ge
 8007834:	6563      	strge	r3, [r4, #84]	; 0x54
 8007836:	81a3      	strhlt	r3, [r4, #12]
 8007838:	bd10      	pop	{r4, pc}

0800783a <__swrite>:
 800783a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800783e:	461f      	mov	r7, r3
 8007840:	898b      	ldrh	r3, [r1, #12]
 8007842:	05db      	lsls	r3, r3, #23
 8007844:	4605      	mov	r5, r0
 8007846:	460c      	mov	r4, r1
 8007848:	4616      	mov	r6, r2
 800784a:	d505      	bpl.n	8007858 <__swrite+0x1e>
 800784c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007850:	2302      	movs	r3, #2
 8007852:	2200      	movs	r2, #0
 8007854:	f000 f840 	bl	80078d8 <_lseek_r>
 8007858:	89a3      	ldrh	r3, [r4, #12]
 800785a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800785e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007862:	81a3      	strh	r3, [r4, #12]
 8007864:	4632      	mov	r2, r6
 8007866:	463b      	mov	r3, r7
 8007868:	4628      	mov	r0, r5
 800786a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800786e:	f000 b857 	b.w	8007920 <_write_r>

08007872 <__sseek>:
 8007872:	b510      	push	{r4, lr}
 8007874:	460c      	mov	r4, r1
 8007876:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800787a:	f000 f82d 	bl	80078d8 <_lseek_r>
 800787e:	1c43      	adds	r3, r0, #1
 8007880:	89a3      	ldrh	r3, [r4, #12]
 8007882:	bf15      	itete	ne
 8007884:	6560      	strne	r0, [r4, #84]	; 0x54
 8007886:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800788a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800788e:	81a3      	strheq	r3, [r4, #12]
 8007890:	bf18      	it	ne
 8007892:	81a3      	strhne	r3, [r4, #12]
 8007894:	bd10      	pop	{r4, pc}

08007896 <__sclose>:
 8007896:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800789a:	f000 b80d 	b.w	80078b8 <_close_r>

0800789e <memset>:
 800789e:	4402      	add	r2, r0
 80078a0:	4603      	mov	r3, r0
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d100      	bne.n	80078a8 <memset+0xa>
 80078a6:	4770      	bx	lr
 80078a8:	f803 1b01 	strb.w	r1, [r3], #1
 80078ac:	e7f9      	b.n	80078a2 <memset+0x4>
	...

080078b0 <_localeconv_r>:
 80078b0:	4800      	ldr	r0, [pc, #0]	; (80078b4 <_localeconv_r+0x4>)
 80078b2:	4770      	bx	lr
 80078b4:	200001c4 	.word	0x200001c4

080078b8 <_close_r>:
 80078b8:	b538      	push	{r3, r4, r5, lr}
 80078ba:	4d06      	ldr	r5, [pc, #24]	; (80078d4 <_close_r+0x1c>)
 80078bc:	2300      	movs	r3, #0
 80078be:	4604      	mov	r4, r0
 80078c0:	4608      	mov	r0, r1
 80078c2:	602b      	str	r3, [r5, #0]
 80078c4:	f7fb f877 	bl	80029b6 <_close>
 80078c8:	1c43      	adds	r3, r0, #1
 80078ca:	d102      	bne.n	80078d2 <_close_r+0x1a>
 80078cc:	682b      	ldr	r3, [r5, #0]
 80078ce:	b103      	cbz	r3, 80078d2 <_close_r+0x1a>
 80078d0:	6023      	str	r3, [r4, #0]
 80078d2:	bd38      	pop	{r3, r4, r5, pc}
 80078d4:	200005e0 	.word	0x200005e0

080078d8 <_lseek_r>:
 80078d8:	b538      	push	{r3, r4, r5, lr}
 80078da:	4d07      	ldr	r5, [pc, #28]	; (80078f8 <_lseek_r+0x20>)
 80078dc:	4604      	mov	r4, r0
 80078de:	4608      	mov	r0, r1
 80078e0:	4611      	mov	r1, r2
 80078e2:	2200      	movs	r2, #0
 80078e4:	602a      	str	r2, [r5, #0]
 80078e6:	461a      	mov	r2, r3
 80078e8:	f7fb f88c 	bl	8002a04 <_lseek>
 80078ec:	1c43      	adds	r3, r0, #1
 80078ee:	d102      	bne.n	80078f6 <_lseek_r+0x1e>
 80078f0:	682b      	ldr	r3, [r5, #0]
 80078f2:	b103      	cbz	r3, 80078f6 <_lseek_r+0x1e>
 80078f4:	6023      	str	r3, [r4, #0]
 80078f6:	bd38      	pop	{r3, r4, r5, pc}
 80078f8:	200005e0 	.word	0x200005e0

080078fc <_read_r>:
 80078fc:	b538      	push	{r3, r4, r5, lr}
 80078fe:	4d07      	ldr	r5, [pc, #28]	; (800791c <_read_r+0x20>)
 8007900:	4604      	mov	r4, r0
 8007902:	4608      	mov	r0, r1
 8007904:	4611      	mov	r1, r2
 8007906:	2200      	movs	r2, #0
 8007908:	602a      	str	r2, [r5, #0]
 800790a:	461a      	mov	r2, r3
 800790c:	f7fb f81a 	bl	8002944 <_read>
 8007910:	1c43      	adds	r3, r0, #1
 8007912:	d102      	bne.n	800791a <_read_r+0x1e>
 8007914:	682b      	ldr	r3, [r5, #0]
 8007916:	b103      	cbz	r3, 800791a <_read_r+0x1e>
 8007918:	6023      	str	r3, [r4, #0]
 800791a:	bd38      	pop	{r3, r4, r5, pc}
 800791c:	200005e0 	.word	0x200005e0

08007920 <_write_r>:
 8007920:	b538      	push	{r3, r4, r5, lr}
 8007922:	4d07      	ldr	r5, [pc, #28]	; (8007940 <_write_r+0x20>)
 8007924:	4604      	mov	r4, r0
 8007926:	4608      	mov	r0, r1
 8007928:	4611      	mov	r1, r2
 800792a:	2200      	movs	r2, #0
 800792c:	602a      	str	r2, [r5, #0]
 800792e:	461a      	mov	r2, r3
 8007930:	f7fb f825 	bl	800297e <_write>
 8007934:	1c43      	adds	r3, r0, #1
 8007936:	d102      	bne.n	800793e <_write_r+0x1e>
 8007938:	682b      	ldr	r3, [r5, #0]
 800793a:	b103      	cbz	r3, 800793e <_write_r+0x1e>
 800793c:	6023      	str	r3, [r4, #0]
 800793e:	bd38      	pop	{r3, r4, r5, pc}
 8007940:	200005e0 	.word	0x200005e0

08007944 <__errno>:
 8007944:	4b01      	ldr	r3, [pc, #4]	; (800794c <__errno+0x8>)
 8007946:	6818      	ldr	r0, [r3, #0]
 8007948:	4770      	bx	lr
 800794a:	bf00      	nop
 800794c:	200000d0 	.word	0x200000d0

08007950 <__libc_init_array>:
 8007950:	b570      	push	{r4, r5, r6, lr}
 8007952:	4d0d      	ldr	r5, [pc, #52]	; (8007988 <__libc_init_array+0x38>)
 8007954:	4c0d      	ldr	r4, [pc, #52]	; (800798c <__libc_init_array+0x3c>)
 8007956:	1b64      	subs	r4, r4, r5
 8007958:	10a4      	asrs	r4, r4, #2
 800795a:	2600      	movs	r6, #0
 800795c:	42a6      	cmp	r6, r4
 800795e:	d109      	bne.n	8007974 <__libc_init_array+0x24>
 8007960:	4d0b      	ldr	r5, [pc, #44]	; (8007990 <__libc_init_array+0x40>)
 8007962:	4c0c      	ldr	r4, [pc, #48]	; (8007994 <__libc_init_array+0x44>)
 8007964:	f002 f894 	bl	8009a90 <_init>
 8007968:	1b64      	subs	r4, r4, r5
 800796a:	10a4      	asrs	r4, r4, #2
 800796c:	2600      	movs	r6, #0
 800796e:	42a6      	cmp	r6, r4
 8007970:	d105      	bne.n	800797e <__libc_init_array+0x2e>
 8007972:	bd70      	pop	{r4, r5, r6, pc}
 8007974:	f855 3b04 	ldr.w	r3, [r5], #4
 8007978:	4798      	blx	r3
 800797a:	3601      	adds	r6, #1
 800797c:	e7ee      	b.n	800795c <__libc_init_array+0xc>
 800797e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007982:	4798      	blx	r3
 8007984:	3601      	adds	r6, #1
 8007986:	e7f2      	b.n	800796e <__libc_init_array+0x1e>
 8007988:	0800a3e4 	.word	0x0800a3e4
 800798c:	0800a3e4 	.word	0x0800a3e4
 8007990:	0800a3e4 	.word	0x0800a3e4
 8007994:	0800a3e8 	.word	0x0800a3e8

08007998 <__retarget_lock_init_recursive>:
 8007998:	4770      	bx	lr

0800799a <__retarget_lock_acquire_recursive>:
 800799a:	4770      	bx	lr

0800799c <__retarget_lock_release_recursive>:
 800799c:	4770      	bx	lr

0800799e <quorem>:
 800799e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079a2:	6903      	ldr	r3, [r0, #16]
 80079a4:	690c      	ldr	r4, [r1, #16]
 80079a6:	42a3      	cmp	r3, r4
 80079a8:	4607      	mov	r7, r0
 80079aa:	db7e      	blt.n	8007aaa <quorem+0x10c>
 80079ac:	3c01      	subs	r4, #1
 80079ae:	f101 0814 	add.w	r8, r1, #20
 80079b2:	f100 0514 	add.w	r5, r0, #20
 80079b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80079ba:	9301      	str	r3, [sp, #4]
 80079bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80079c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80079c4:	3301      	adds	r3, #1
 80079c6:	429a      	cmp	r2, r3
 80079c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80079cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80079d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80079d4:	d331      	bcc.n	8007a3a <quorem+0x9c>
 80079d6:	f04f 0e00 	mov.w	lr, #0
 80079da:	4640      	mov	r0, r8
 80079dc:	46ac      	mov	ip, r5
 80079de:	46f2      	mov	sl, lr
 80079e0:	f850 2b04 	ldr.w	r2, [r0], #4
 80079e4:	b293      	uxth	r3, r2
 80079e6:	fb06 e303 	mla	r3, r6, r3, lr
 80079ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80079ee:	0c1a      	lsrs	r2, r3, #16
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	ebaa 0303 	sub.w	r3, sl, r3
 80079f6:	f8dc a000 	ldr.w	sl, [ip]
 80079fa:	fa13 f38a 	uxtah	r3, r3, sl
 80079fe:	fb06 220e 	mla	r2, r6, lr, r2
 8007a02:	9300      	str	r3, [sp, #0]
 8007a04:	9b00      	ldr	r3, [sp, #0]
 8007a06:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007a0a:	b292      	uxth	r2, r2
 8007a0c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007a10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a14:	f8bd 3000 	ldrh.w	r3, [sp]
 8007a18:	4581      	cmp	r9, r0
 8007a1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a1e:	f84c 3b04 	str.w	r3, [ip], #4
 8007a22:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007a26:	d2db      	bcs.n	80079e0 <quorem+0x42>
 8007a28:	f855 300b 	ldr.w	r3, [r5, fp]
 8007a2c:	b92b      	cbnz	r3, 8007a3a <quorem+0x9c>
 8007a2e:	9b01      	ldr	r3, [sp, #4]
 8007a30:	3b04      	subs	r3, #4
 8007a32:	429d      	cmp	r5, r3
 8007a34:	461a      	mov	r2, r3
 8007a36:	d32c      	bcc.n	8007a92 <quorem+0xf4>
 8007a38:	613c      	str	r4, [r7, #16]
 8007a3a:	4638      	mov	r0, r7
 8007a3c:	f001 f9a6 	bl	8008d8c <__mcmp>
 8007a40:	2800      	cmp	r0, #0
 8007a42:	db22      	blt.n	8007a8a <quorem+0xec>
 8007a44:	3601      	adds	r6, #1
 8007a46:	4629      	mov	r1, r5
 8007a48:	2000      	movs	r0, #0
 8007a4a:	f858 2b04 	ldr.w	r2, [r8], #4
 8007a4e:	f8d1 c000 	ldr.w	ip, [r1]
 8007a52:	b293      	uxth	r3, r2
 8007a54:	1ac3      	subs	r3, r0, r3
 8007a56:	0c12      	lsrs	r2, r2, #16
 8007a58:	fa13 f38c 	uxtah	r3, r3, ip
 8007a5c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007a60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a6a:	45c1      	cmp	r9, r8
 8007a6c:	f841 3b04 	str.w	r3, [r1], #4
 8007a70:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007a74:	d2e9      	bcs.n	8007a4a <quorem+0xac>
 8007a76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a7e:	b922      	cbnz	r2, 8007a8a <quorem+0xec>
 8007a80:	3b04      	subs	r3, #4
 8007a82:	429d      	cmp	r5, r3
 8007a84:	461a      	mov	r2, r3
 8007a86:	d30a      	bcc.n	8007a9e <quorem+0x100>
 8007a88:	613c      	str	r4, [r7, #16]
 8007a8a:	4630      	mov	r0, r6
 8007a8c:	b003      	add	sp, #12
 8007a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a92:	6812      	ldr	r2, [r2, #0]
 8007a94:	3b04      	subs	r3, #4
 8007a96:	2a00      	cmp	r2, #0
 8007a98:	d1ce      	bne.n	8007a38 <quorem+0x9a>
 8007a9a:	3c01      	subs	r4, #1
 8007a9c:	e7c9      	b.n	8007a32 <quorem+0x94>
 8007a9e:	6812      	ldr	r2, [r2, #0]
 8007aa0:	3b04      	subs	r3, #4
 8007aa2:	2a00      	cmp	r2, #0
 8007aa4:	d1f0      	bne.n	8007a88 <quorem+0xea>
 8007aa6:	3c01      	subs	r4, #1
 8007aa8:	e7eb      	b.n	8007a82 <quorem+0xe4>
 8007aaa:	2000      	movs	r0, #0
 8007aac:	e7ee      	b.n	8007a8c <quorem+0xee>
	...

08007ab0 <_dtoa_r>:
 8007ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab4:	ed2d 8b04 	vpush	{d8-d9}
 8007ab8:	69c5      	ldr	r5, [r0, #28]
 8007aba:	b093      	sub	sp, #76	; 0x4c
 8007abc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007ac0:	ec57 6b10 	vmov	r6, r7, d0
 8007ac4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007ac8:	9107      	str	r1, [sp, #28]
 8007aca:	4604      	mov	r4, r0
 8007acc:	920a      	str	r2, [sp, #40]	; 0x28
 8007ace:	930d      	str	r3, [sp, #52]	; 0x34
 8007ad0:	b975      	cbnz	r5, 8007af0 <_dtoa_r+0x40>
 8007ad2:	2010      	movs	r0, #16
 8007ad4:	f000 fe2a 	bl	800872c <malloc>
 8007ad8:	4602      	mov	r2, r0
 8007ada:	61e0      	str	r0, [r4, #28]
 8007adc:	b920      	cbnz	r0, 8007ae8 <_dtoa_r+0x38>
 8007ade:	4bae      	ldr	r3, [pc, #696]	; (8007d98 <_dtoa_r+0x2e8>)
 8007ae0:	21ef      	movs	r1, #239	; 0xef
 8007ae2:	48ae      	ldr	r0, [pc, #696]	; (8007d9c <_dtoa_r+0x2ec>)
 8007ae4:	f001 fc90 	bl	8009408 <__assert_func>
 8007ae8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007aec:	6005      	str	r5, [r0, #0]
 8007aee:	60c5      	str	r5, [r0, #12]
 8007af0:	69e3      	ldr	r3, [r4, #28]
 8007af2:	6819      	ldr	r1, [r3, #0]
 8007af4:	b151      	cbz	r1, 8007b0c <_dtoa_r+0x5c>
 8007af6:	685a      	ldr	r2, [r3, #4]
 8007af8:	604a      	str	r2, [r1, #4]
 8007afa:	2301      	movs	r3, #1
 8007afc:	4093      	lsls	r3, r2
 8007afe:	608b      	str	r3, [r1, #8]
 8007b00:	4620      	mov	r0, r4
 8007b02:	f000 ff07 	bl	8008914 <_Bfree>
 8007b06:	69e3      	ldr	r3, [r4, #28]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	601a      	str	r2, [r3, #0]
 8007b0c:	1e3b      	subs	r3, r7, #0
 8007b0e:	bfbb      	ittet	lt
 8007b10:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007b14:	9303      	strlt	r3, [sp, #12]
 8007b16:	2300      	movge	r3, #0
 8007b18:	2201      	movlt	r2, #1
 8007b1a:	bfac      	ite	ge
 8007b1c:	f8c8 3000 	strge.w	r3, [r8]
 8007b20:	f8c8 2000 	strlt.w	r2, [r8]
 8007b24:	4b9e      	ldr	r3, [pc, #632]	; (8007da0 <_dtoa_r+0x2f0>)
 8007b26:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007b2a:	ea33 0308 	bics.w	r3, r3, r8
 8007b2e:	d11b      	bne.n	8007b68 <_dtoa_r+0xb8>
 8007b30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b32:	f242 730f 	movw	r3, #9999	; 0x270f
 8007b36:	6013      	str	r3, [r2, #0]
 8007b38:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007b3c:	4333      	orrs	r3, r6
 8007b3e:	f000 8593 	beq.w	8008668 <_dtoa_r+0xbb8>
 8007b42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b44:	b963      	cbnz	r3, 8007b60 <_dtoa_r+0xb0>
 8007b46:	4b97      	ldr	r3, [pc, #604]	; (8007da4 <_dtoa_r+0x2f4>)
 8007b48:	e027      	b.n	8007b9a <_dtoa_r+0xea>
 8007b4a:	4b97      	ldr	r3, [pc, #604]	; (8007da8 <_dtoa_r+0x2f8>)
 8007b4c:	9300      	str	r3, [sp, #0]
 8007b4e:	3308      	adds	r3, #8
 8007b50:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007b52:	6013      	str	r3, [r2, #0]
 8007b54:	9800      	ldr	r0, [sp, #0]
 8007b56:	b013      	add	sp, #76	; 0x4c
 8007b58:	ecbd 8b04 	vpop	{d8-d9}
 8007b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b60:	4b90      	ldr	r3, [pc, #576]	; (8007da4 <_dtoa_r+0x2f4>)
 8007b62:	9300      	str	r3, [sp, #0]
 8007b64:	3303      	adds	r3, #3
 8007b66:	e7f3      	b.n	8007b50 <_dtoa_r+0xa0>
 8007b68:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	ec51 0b17 	vmov	r0, r1, d7
 8007b72:	eeb0 8a47 	vmov.f32	s16, s14
 8007b76:	eef0 8a67 	vmov.f32	s17, s15
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	f7f8 ffa4 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b80:	4681      	mov	r9, r0
 8007b82:	b160      	cbz	r0, 8007b9e <_dtoa_r+0xee>
 8007b84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b86:	2301      	movs	r3, #1
 8007b88:	6013      	str	r3, [r2, #0]
 8007b8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f000 8568 	beq.w	8008662 <_dtoa_r+0xbb2>
 8007b92:	4b86      	ldr	r3, [pc, #536]	; (8007dac <_dtoa_r+0x2fc>)
 8007b94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007b96:	6013      	str	r3, [r2, #0]
 8007b98:	3b01      	subs	r3, #1
 8007b9a:	9300      	str	r3, [sp, #0]
 8007b9c:	e7da      	b.n	8007b54 <_dtoa_r+0xa4>
 8007b9e:	aa10      	add	r2, sp, #64	; 0x40
 8007ba0:	a911      	add	r1, sp, #68	; 0x44
 8007ba2:	4620      	mov	r0, r4
 8007ba4:	eeb0 0a48 	vmov.f32	s0, s16
 8007ba8:	eef0 0a68 	vmov.f32	s1, s17
 8007bac:	f001 f994 	bl	8008ed8 <__d2b>
 8007bb0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007bb4:	4682      	mov	sl, r0
 8007bb6:	2d00      	cmp	r5, #0
 8007bb8:	d07f      	beq.n	8007cba <_dtoa_r+0x20a>
 8007bba:	ee18 3a90 	vmov	r3, s17
 8007bbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007bc2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007bc6:	ec51 0b18 	vmov	r0, r1, d8
 8007bca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007bce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007bd2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	2200      	movs	r2, #0
 8007bda:	4b75      	ldr	r3, [pc, #468]	; (8007db0 <_dtoa_r+0x300>)
 8007bdc:	f7f8 fb54 	bl	8000288 <__aeabi_dsub>
 8007be0:	a367      	add	r3, pc, #412	; (adr r3, 8007d80 <_dtoa_r+0x2d0>)
 8007be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be6:	f7f8 fd07 	bl	80005f8 <__aeabi_dmul>
 8007bea:	a367      	add	r3, pc, #412	; (adr r3, 8007d88 <_dtoa_r+0x2d8>)
 8007bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf0:	f7f8 fb4c 	bl	800028c <__adddf3>
 8007bf4:	4606      	mov	r6, r0
 8007bf6:	4628      	mov	r0, r5
 8007bf8:	460f      	mov	r7, r1
 8007bfa:	f7f8 fc93 	bl	8000524 <__aeabi_i2d>
 8007bfe:	a364      	add	r3, pc, #400	; (adr r3, 8007d90 <_dtoa_r+0x2e0>)
 8007c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c04:	f7f8 fcf8 	bl	80005f8 <__aeabi_dmul>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	4630      	mov	r0, r6
 8007c0e:	4639      	mov	r1, r7
 8007c10:	f7f8 fb3c 	bl	800028c <__adddf3>
 8007c14:	4606      	mov	r6, r0
 8007c16:	460f      	mov	r7, r1
 8007c18:	f7f8 ff9e 	bl	8000b58 <__aeabi_d2iz>
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	4683      	mov	fp, r0
 8007c20:	2300      	movs	r3, #0
 8007c22:	4630      	mov	r0, r6
 8007c24:	4639      	mov	r1, r7
 8007c26:	f7f8 ff59 	bl	8000adc <__aeabi_dcmplt>
 8007c2a:	b148      	cbz	r0, 8007c40 <_dtoa_r+0x190>
 8007c2c:	4658      	mov	r0, fp
 8007c2e:	f7f8 fc79 	bl	8000524 <__aeabi_i2d>
 8007c32:	4632      	mov	r2, r6
 8007c34:	463b      	mov	r3, r7
 8007c36:	f7f8 ff47 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c3a:	b908      	cbnz	r0, 8007c40 <_dtoa_r+0x190>
 8007c3c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007c40:	f1bb 0f16 	cmp.w	fp, #22
 8007c44:	d857      	bhi.n	8007cf6 <_dtoa_r+0x246>
 8007c46:	4b5b      	ldr	r3, [pc, #364]	; (8007db4 <_dtoa_r+0x304>)
 8007c48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c50:	ec51 0b18 	vmov	r0, r1, d8
 8007c54:	f7f8 ff42 	bl	8000adc <__aeabi_dcmplt>
 8007c58:	2800      	cmp	r0, #0
 8007c5a:	d04e      	beq.n	8007cfa <_dtoa_r+0x24a>
 8007c5c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007c60:	2300      	movs	r3, #0
 8007c62:	930c      	str	r3, [sp, #48]	; 0x30
 8007c64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c66:	1b5b      	subs	r3, r3, r5
 8007c68:	1e5a      	subs	r2, r3, #1
 8007c6a:	bf45      	ittet	mi
 8007c6c:	f1c3 0301 	rsbmi	r3, r3, #1
 8007c70:	9305      	strmi	r3, [sp, #20]
 8007c72:	2300      	movpl	r3, #0
 8007c74:	2300      	movmi	r3, #0
 8007c76:	9206      	str	r2, [sp, #24]
 8007c78:	bf54      	ite	pl
 8007c7a:	9305      	strpl	r3, [sp, #20]
 8007c7c:	9306      	strmi	r3, [sp, #24]
 8007c7e:	f1bb 0f00 	cmp.w	fp, #0
 8007c82:	db3c      	blt.n	8007cfe <_dtoa_r+0x24e>
 8007c84:	9b06      	ldr	r3, [sp, #24]
 8007c86:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007c8a:	445b      	add	r3, fp
 8007c8c:	9306      	str	r3, [sp, #24]
 8007c8e:	2300      	movs	r3, #0
 8007c90:	9308      	str	r3, [sp, #32]
 8007c92:	9b07      	ldr	r3, [sp, #28]
 8007c94:	2b09      	cmp	r3, #9
 8007c96:	d868      	bhi.n	8007d6a <_dtoa_r+0x2ba>
 8007c98:	2b05      	cmp	r3, #5
 8007c9a:	bfc4      	itt	gt
 8007c9c:	3b04      	subgt	r3, #4
 8007c9e:	9307      	strgt	r3, [sp, #28]
 8007ca0:	9b07      	ldr	r3, [sp, #28]
 8007ca2:	f1a3 0302 	sub.w	r3, r3, #2
 8007ca6:	bfcc      	ite	gt
 8007ca8:	2500      	movgt	r5, #0
 8007caa:	2501      	movle	r5, #1
 8007cac:	2b03      	cmp	r3, #3
 8007cae:	f200 8085 	bhi.w	8007dbc <_dtoa_r+0x30c>
 8007cb2:	e8df f003 	tbb	[pc, r3]
 8007cb6:	3b2e      	.short	0x3b2e
 8007cb8:	5839      	.short	0x5839
 8007cba:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007cbe:	441d      	add	r5, r3
 8007cc0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007cc4:	2b20      	cmp	r3, #32
 8007cc6:	bfc1      	itttt	gt
 8007cc8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007ccc:	fa08 f803 	lslgt.w	r8, r8, r3
 8007cd0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007cd4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007cd8:	bfd6      	itet	le
 8007cda:	f1c3 0320 	rsble	r3, r3, #32
 8007cde:	ea48 0003 	orrgt.w	r0, r8, r3
 8007ce2:	fa06 f003 	lslle.w	r0, r6, r3
 8007ce6:	f7f8 fc0d 	bl	8000504 <__aeabi_ui2d>
 8007cea:	2201      	movs	r2, #1
 8007cec:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007cf0:	3d01      	subs	r5, #1
 8007cf2:	920e      	str	r2, [sp, #56]	; 0x38
 8007cf4:	e76f      	b.n	8007bd6 <_dtoa_r+0x126>
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	e7b3      	b.n	8007c62 <_dtoa_r+0x1b2>
 8007cfa:	900c      	str	r0, [sp, #48]	; 0x30
 8007cfc:	e7b2      	b.n	8007c64 <_dtoa_r+0x1b4>
 8007cfe:	9b05      	ldr	r3, [sp, #20]
 8007d00:	eba3 030b 	sub.w	r3, r3, fp
 8007d04:	9305      	str	r3, [sp, #20]
 8007d06:	f1cb 0300 	rsb	r3, fp, #0
 8007d0a:	9308      	str	r3, [sp, #32]
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d10:	e7bf      	b.n	8007c92 <_dtoa_r+0x1e2>
 8007d12:	2300      	movs	r3, #0
 8007d14:	9309      	str	r3, [sp, #36]	; 0x24
 8007d16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	dc52      	bgt.n	8007dc2 <_dtoa_r+0x312>
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	9301      	str	r3, [sp, #4]
 8007d20:	9304      	str	r3, [sp, #16]
 8007d22:	461a      	mov	r2, r3
 8007d24:	920a      	str	r2, [sp, #40]	; 0x28
 8007d26:	e00b      	b.n	8007d40 <_dtoa_r+0x290>
 8007d28:	2301      	movs	r3, #1
 8007d2a:	e7f3      	b.n	8007d14 <_dtoa_r+0x264>
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	9309      	str	r3, [sp, #36]	; 0x24
 8007d30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d32:	445b      	add	r3, fp
 8007d34:	9301      	str	r3, [sp, #4]
 8007d36:	3301      	adds	r3, #1
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	9304      	str	r3, [sp, #16]
 8007d3c:	bfb8      	it	lt
 8007d3e:	2301      	movlt	r3, #1
 8007d40:	69e0      	ldr	r0, [r4, #28]
 8007d42:	2100      	movs	r1, #0
 8007d44:	2204      	movs	r2, #4
 8007d46:	f102 0614 	add.w	r6, r2, #20
 8007d4a:	429e      	cmp	r6, r3
 8007d4c:	d93d      	bls.n	8007dca <_dtoa_r+0x31a>
 8007d4e:	6041      	str	r1, [r0, #4]
 8007d50:	4620      	mov	r0, r4
 8007d52:	f000 fd9f 	bl	8008894 <_Balloc>
 8007d56:	9000      	str	r0, [sp, #0]
 8007d58:	2800      	cmp	r0, #0
 8007d5a:	d139      	bne.n	8007dd0 <_dtoa_r+0x320>
 8007d5c:	4b16      	ldr	r3, [pc, #88]	; (8007db8 <_dtoa_r+0x308>)
 8007d5e:	4602      	mov	r2, r0
 8007d60:	f240 11af 	movw	r1, #431	; 0x1af
 8007d64:	e6bd      	b.n	8007ae2 <_dtoa_r+0x32>
 8007d66:	2301      	movs	r3, #1
 8007d68:	e7e1      	b.n	8007d2e <_dtoa_r+0x27e>
 8007d6a:	2501      	movs	r5, #1
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	9307      	str	r3, [sp, #28]
 8007d70:	9509      	str	r5, [sp, #36]	; 0x24
 8007d72:	f04f 33ff 	mov.w	r3, #4294967295
 8007d76:	9301      	str	r3, [sp, #4]
 8007d78:	9304      	str	r3, [sp, #16]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	2312      	movs	r3, #18
 8007d7e:	e7d1      	b.n	8007d24 <_dtoa_r+0x274>
 8007d80:	636f4361 	.word	0x636f4361
 8007d84:	3fd287a7 	.word	0x3fd287a7
 8007d88:	8b60c8b3 	.word	0x8b60c8b3
 8007d8c:	3fc68a28 	.word	0x3fc68a28
 8007d90:	509f79fb 	.word	0x509f79fb
 8007d94:	3fd34413 	.word	0x3fd34413
 8007d98:	0800a0ae 	.word	0x0800a0ae
 8007d9c:	0800a0c5 	.word	0x0800a0c5
 8007da0:	7ff00000 	.word	0x7ff00000
 8007da4:	0800a0aa 	.word	0x0800a0aa
 8007da8:	0800a0a1 	.word	0x0800a0a1
 8007dac:	0800a07e 	.word	0x0800a07e
 8007db0:	3ff80000 	.word	0x3ff80000
 8007db4:	0800a1b0 	.word	0x0800a1b0
 8007db8:	0800a11d 	.word	0x0800a11d
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	9309      	str	r3, [sp, #36]	; 0x24
 8007dc0:	e7d7      	b.n	8007d72 <_dtoa_r+0x2c2>
 8007dc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dc4:	9301      	str	r3, [sp, #4]
 8007dc6:	9304      	str	r3, [sp, #16]
 8007dc8:	e7ba      	b.n	8007d40 <_dtoa_r+0x290>
 8007dca:	3101      	adds	r1, #1
 8007dcc:	0052      	lsls	r2, r2, #1
 8007dce:	e7ba      	b.n	8007d46 <_dtoa_r+0x296>
 8007dd0:	69e3      	ldr	r3, [r4, #28]
 8007dd2:	9a00      	ldr	r2, [sp, #0]
 8007dd4:	601a      	str	r2, [r3, #0]
 8007dd6:	9b04      	ldr	r3, [sp, #16]
 8007dd8:	2b0e      	cmp	r3, #14
 8007dda:	f200 80a8 	bhi.w	8007f2e <_dtoa_r+0x47e>
 8007dde:	2d00      	cmp	r5, #0
 8007de0:	f000 80a5 	beq.w	8007f2e <_dtoa_r+0x47e>
 8007de4:	f1bb 0f00 	cmp.w	fp, #0
 8007de8:	dd38      	ble.n	8007e5c <_dtoa_r+0x3ac>
 8007dea:	4bc0      	ldr	r3, [pc, #768]	; (80080ec <_dtoa_r+0x63c>)
 8007dec:	f00b 020f 	and.w	r2, fp, #15
 8007df0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007df4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007df8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007dfc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007e00:	d019      	beq.n	8007e36 <_dtoa_r+0x386>
 8007e02:	4bbb      	ldr	r3, [pc, #748]	; (80080f0 <_dtoa_r+0x640>)
 8007e04:	ec51 0b18 	vmov	r0, r1, d8
 8007e08:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007e0c:	f7f8 fd1e 	bl	800084c <__aeabi_ddiv>
 8007e10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e14:	f008 080f 	and.w	r8, r8, #15
 8007e18:	2503      	movs	r5, #3
 8007e1a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80080f0 <_dtoa_r+0x640>
 8007e1e:	f1b8 0f00 	cmp.w	r8, #0
 8007e22:	d10a      	bne.n	8007e3a <_dtoa_r+0x38a>
 8007e24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e28:	4632      	mov	r2, r6
 8007e2a:	463b      	mov	r3, r7
 8007e2c:	f7f8 fd0e 	bl	800084c <__aeabi_ddiv>
 8007e30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e34:	e02b      	b.n	8007e8e <_dtoa_r+0x3de>
 8007e36:	2502      	movs	r5, #2
 8007e38:	e7ef      	b.n	8007e1a <_dtoa_r+0x36a>
 8007e3a:	f018 0f01 	tst.w	r8, #1
 8007e3e:	d008      	beq.n	8007e52 <_dtoa_r+0x3a2>
 8007e40:	4630      	mov	r0, r6
 8007e42:	4639      	mov	r1, r7
 8007e44:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007e48:	f7f8 fbd6 	bl	80005f8 <__aeabi_dmul>
 8007e4c:	3501      	adds	r5, #1
 8007e4e:	4606      	mov	r6, r0
 8007e50:	460f      	mov	r7, r1
 8007e52:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007e56:	f109 0908 	add.w	r9, r9, #8
 8007e5a:	e7e0      	b.n	8007e1e <_dtoa_r+0x36e>
 8007e5c:	f000 809f 	beq.w	8007f9e <_dtoa_r+0x4ee>
 8007e60:	f1cb 0600 	rsb	r6, fp, #0
 8007e64:	4ba1      	ldr	r3, [pc, #644]	; (80080ec <_dtoa_r+0x63c>)
 8007e66:	4fa2      	ldr	r7, [pc, #648]	; (80080f0 <_dtoa_r+0x640>)
 8007e68:	f006 020f 	and.w	r2, r6, #15
 8007e6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e74:	ec51 0b18 	vmov	r0, r1, d8
 8007e78:	f7f8 fbbe 	bl	80005f8 <__aeabi_dmul>
 8007e7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e80:	1136      	asrs	r6, r6, #4
 8007e82:	2300      	movs	r3, #0
 8007e84:	2502      	movs	r5, #2
 8007e86:	2e00      	cmp	r6, #0
 8007e88:	d17e      	bne.n	8007f88 <_dtoa_r+0x4d8>
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d1d0      	bne.n	8007e30 <_dtoa_r+0x380>
 8007e8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e90:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	f000 8084 	beq.w	8007fa2 <_dtoa_r+0x4f2>
 8007e9a:	4b96      	ldr	r3, [pc, #600]	; (80080f4 <_dtoa_r+0x644>)
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	4640      	mov	r0, r8
 8007ea0:	4649      	mov	r1, r9
 8007ea2:	f7f8 fe1b 	bl	8000adc <__aeabi_dcmplt>
 8007ea6:	2800      	cmp	r0, #0
 8007ea8:	d07b      	beq.n	8007fa2 <_dtoa_r+0x4f2>
 8007eaa:	9b04      	ldr	r3, [sp, #16]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d078      	beq.n	8007fa2 <_dtoa_r+0x4f2>
 8007eb0:	9b01      	ldr	r3, [sp, #4]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	dd39      	ble.n	8007f2a <_dtoa_r+0x47a>
 8007eb6:	4b90      	ldr	r3, [pc, #576]	; (80080f8 <_dtoa_r+0x648>)
 8007eb8:	2200      	movs	r2, #0
 8007eba:	4640      	mov	r0, r8
 8007ebc:	4649      	mov	r1, r9
 8007ebe:	f7f8 fb9b 	bl	80005f8 <__aeabi_dmul>
 8007ec2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ec6:	9e01      	ldr	r6, [sp, #4]
 8007ec8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007ecc:	3501      	adds	r5, #1
 8007ece:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007ed2:	4628      	mov	r0, r5
 8007ed4:	f7f8 fb26 	bl	8000524 <__aeabi_i2d>
 8007ed8:	4642      	mov	r2, r8
 8007eda:	464b      	mov	r3, r9
 8007edc:	f7f8 fb8c 	bl	80005f8 <__aeabi_dmul>
 8007ee0:	4b86      	ldr	r3, [pc, #536]	; (80080fc <_dtoa_r+0x64c>)
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f7f8 f9d2 	bl	800028c <__adddf3>
 8007ee8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007eec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ef0:	9303      	str	r3, [sp, #12]
 8007ef2:	2e00      	cmp	r6, #0
 8007ef4:	d158      	bne.n	8007fa8 <_dtoa_r+0x4f8>
 8007ef6:	4b82      	ldr	r3, [pc, #520]	; (8008100 <_dtoa_r+0x650>)
 8007ef8:	2200      	movs	r2, #0
 8007efa:	4640      	mov	r0, r8
 8007efc:	4649      	mov	r1, r9
 8007efe:	f7f8 f9c3 	bl	8000288 <__aeabi_dsub>
 8007f02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f06:	4680      	mov	r8, r0
 8007f08:	4689      	mov	r9, r1
 8007f0a:	f7f8 fe05 	bl	8000b18 <__aeabi_dcmpgt>
 8007f0e:	2800      	cmp	r0, #0
 8007f10:	f040 8296 	bne.w	8008440 <_dtoa_r+0x990>
 8007f14:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007f18:	4640      	mov	r0, r8
 8007f1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f1e:	4649      	mov	r1, r9
 8007f20:	f7f8 fddc 	bl	8000adc <__aeabi_dcmplt>
 8007f24:	2800      	cmp	r0, #0
 8007f26:	f040 8289 	bne.w	800843c <_dtoa_r+0x98c>
 8007f2a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007f2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	f2c0 814e 	blt.w	80081d2 <_dtoa_r+0x722>
 8007f36:	f1bb 0f0e 	cmp.w	fp, #14
 8007f3a:	f300 814a 	bgt.w	80081d2 <_dtoa_r+0x722>
 8007f3e:	4b6b      	ldr	r3, [pc, #428]	; (80080ec <_dtoa_r+0x63c>)
 8007f40:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007f44:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	f280 80dc 	bge.w	8008108 <_dtoa_r+0x658>
 8007f50:	9b04      	ldr	r3, [sp, #16]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	f300 80d8 	bgt.w	8008108 <_dtoa_r+0x658>
 8007f58:	f040 826f 	bne.w	800843a <_dtoa_r+0x98a>
 8007f5c:	4b68      	ldr	r3, [pc, #416]	; (8008100 <_dtoa_r+0x650>)
 8007f5e:	2200      	movs	r2, #0
 8007f60:	4640      	mov	r0, r8
 8007f62:	4649      	mov	r1, r9
 8007f64:	f7f8 fb48 	bl	80005f8 <__aeabi_dmul>
 8007f68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f6c:	f7f8 fdca 	bl	8000b04 <__aeabi_dcmpge>
 8007f70:	9e04      	ldr	r6, [sp, #16]
 8007f72:	4637      	mov	r7, r6
 8007f74:	2800      	cmp	r0, #0
 8007f76:	f040 8245 	bne.w	8008404 <_dtoa_r+0x954>
 8007f7a:	9d00      	ldr	r5, [sp, #0]
 8007f7c:	2331      	movs	r3, #49	; 0x31
 8007f7e:	f805 3b01 	strb.w	r3, [r5], #1
 8007f82:	f10b 0b01 	add.w	fp, fp, #1
 8007f86:	e241      	b.n	800840c <_dtoa_r+0x95c>
 8007f88:	07f2      	lsls	r2, r6, #31
 8007f8a:	d505      	bpl.n	8007f98 <_dtoa_r+0x4e8>
 8007f8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f90:	f7f8 fb32 	bl	80005f8 <__aeabi_dmul>
 8007f94:	3501      	adds	r5, #1
 8007f96:	2301      	movs	r3, #1
 8007f98:	1076      	asrs	r6, r6, #1
 8007f9a:	3708      	adds	r7, #8
 8007f9c:	e773      	b.n	8007e86 <_dtoa_r+0x3d6>
 8007f9e:	2502      	movs	r5, #2
 8007fa0:	e775      	b.n	8007e8e <_dtoa_r+0x3de>
 8007fa2:	9e04      	ldr	r6, [sp, #16]
 8007fa4:	465f      	mov	r7, fp
 8007fa6:	e792      	b.n	8007ece <_dtoa_r+0x41e>
 8007fa8:	9900      	ldr	r1, [sp, #0]
 8007faa:	4b50      	ldr	r3, [pc, #320]	; (80080ec <_dtoa_r+0x63c>)
 8007fac:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007fb0:	4431      	add	r1, r6
 8007fb2:	9102      	str	r1, [sp, #8]
 8007fb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007fb6:	eeb0 9a47 	vmov.f32	s18, s14
 8007fba:	eef0 9a67 	vmov.f32	s19, s15
 8007fbe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007fc2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007fc6:	2900      	cmp	r1, #0
 8007fc8:	d044      	beq.n	8008054 <_dtoa_r+0x5a4>
 8007fca:	494e      	ldr	r1, [pc, #312]	; (8008104 <_dtoa_r+0x654>)
 8007fcc:	2000      	movs	r0, #0
 8007fce:	f7f8 fc3d 	bl	800084c <__aeabi_ddiv>
 8007fd2:	ec53 2b19 	vmov	r2, r3, d9
 8007fd6:	f7f8 f957 	bl	8000288 <__aeabi_dsub>
 8007fda:	9d00      	ldr	r5, [sp, #0]
 8007fdc:	ec41 0b19 	vmov	d9, r0, r1
 8007fe0:	4649      	mov	r1, r9
 8007fe2:	4640      	mov	r0, r8
 8007fe4:	f7f8 fdb8 	bl	8000b58 <__aeabi_d2iz>
 8007fe8:	4606      	mov	r6, r0
 8007fea:	f7f8 fa9b 	bl	8000524 <__aeabi_i2d>
 8007fee:	4602      	mov	r2, r0
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	4640      	mov	r0, r8
 8007ff4:	4649      	mov	r1, r9
 8007ff6:	f7f8 f947 	bl	8000288 <__aeabi_dsub>
 8007ffa:	3630      	adds	r6, #48	; 0x30
 8007ffc:	f805 6b01 	strb.w	r6, [r5], #1
 8008000:	ec53 2b19 	vmov	r2, r3, d9
 8008004:	4680      	mov	r8, r0
 8008006:	4689      	mov	r9, r1
 8008008:	f7f8 fd68 	bl	8000adc <__aeabi_dcmplt>
 800800c:	2800      	cmp	r0, #0
 800800e:	d164      	bne.n	80080da <_dtoa_r+0x62a>
 8008010:	4642      	mov	r2, r8
 8008012:	464b      	mov	r3, r9
 8008014:	4937      	ldr	r1, [pc, #220]	; (80080f4 <_dtoa_r+0x644>)
 8008016:	2000      	movs	r0, #0
 8008018:	f7f8 f936 	bl	8000288 <__aeabi_dsub>
 800801c:	ec53 2b19 	vmov	r2, r3, d9
 8008020:	f7f8 fd5c 	bl	8000adc <__aeabi_dcmplt>
 8008024:	2800      	cmp	r0, #0
 8008026:	f040 80b6 	bne.w	8008196 <_dtoa_r+0x6e6>
 800802a:	9b02      	ldr	r3, [sp, #8]
 800802c:	429d      	cmp	r5, r3
 800802e:	f43f af7c 	beq.w	8007f2a <_dtoa_r+0x47a>
 8008032:	4b31      	ldr	r3, [pc, #196]	; (80080f8 <_dtoa_r+0x648>)
 8008034:	ec51 0b19 	vmov	r0, r1, d9
 8008038:	2200      	movs	r2, #0
 800803a:	f7f8 fadd 	bl	80005f8 <__aeabi_dmul>
 800803e:	4b2e      	ldr	r3, [pc, #184]	; (80080f8 <_dtoa_r+0x648>)
 8008040:	ec41 0b19 	vmov	d9, r0, r1
 8008044:	2200      	movs	r2, #0
 8008046:	4640      	mov	r0, r8
 8008048:	4649      	mov	r1, r9
 800804a:	f7f8 fad5 	bl	80005f8 <__aeabi_dmul>
 800804e:	4680      	mov	r8, r0
 8008050:	4689      	mov	r9, r1
 8008052:	e7c5      	b.n	8007fe0 <_dtoa_r+0x530>
 8008054:	ec51 0b17 	vmov	r0, r1, d7
 8008058:	f7f8 face 	bl	80005f8 <__aeabi_dmul>
 800805c:	9b02      	ldr	r3, [sp, #8]
 800805e:	9d00      	ldr	r5, [sp, #0]
 8008060:	930f      	str	r3, [sp, #60]	; 0x3c
 8008062:	ec41 0b19 	vmov	d9, r0, r1
 8008066:	4649      	mov	r1, r9
 8008068:	4640      	mov	r0, r8
 800806a:	f7f8 fd75 	bl	8000b58 <__aeabi_d2iz>
 800806e:	4606      	mov	r6, r0
 8008070:	f7f8 fa58 	bl	8000524 <__aeabi_i2d>
 8008074:	3630      	adds	r6, #48	; 0x30
 8008076:	4602      	mov	r2, r0
 8008078:	460b      	mov	r3, r1
 800807a:	4640      	mov	r0, r8
 800807c:	4649      	mov	r1, r9
 800807e:	f7f8 f903 	bl	8000288 <__aeabi_dsub>
 8008082:	f805 6b01 	strb.w	r6, [r5], #1
 8008086:	9b02      	ldr	r3, [sp, #8]
 8008088:	429d      	cmp	r5, r3
 800808a:	4680      	mov	r8, r0
 800808c:	4689      	mov	r9, r1
 800808e:	f04f 0200 	mov.w	r2, #0
 8008092:	d124      	bne.n	80080de <_dtoa_r+0x62e>
 8008094:	4b1b      	ldr	r3, [pc, #108]	; (8008104 <_dtoa_r+0x654>)
 8008096:	ec51 0b19 	vmov	r0, r1, d9
 800809a:	f7f8 f8f7 	bl	800028c <__adddf3>
 800809e:	4602      	mov	r2, r0
 80080a0:	460b      	mov	r3, r1
 80080a2:	4640      	mov	r0, r8
 80080a4:	4649      	mov	r1, r9
 80080a6:	f7f8 fd37 	bl	8000b18 <__aeabi_dcmpgt>
 80080aa:	2800      	cmp	r0, #0
 80080ac:	d173      	bne.n	8008196 <_dtoa_r+0x6e6>
 80080ae:	ec53 2b19 	vmov	r2, r3, d9
 80080b2:	4914      	ldr	r1, [pc, #80]	; (8008104 <_dtoa_r+0x654>)
 80080b4:	2000      	movs	r0, #0
 80080b6:	f7f8 f8e7 	bl	8000288 <__aeabi_dsub>
 80080ba:	4602      	mov	r2, r0
 80080bc:	460b      	mov	r3, r1
 80080be:	4640      	mov	r0, r8
 80080c0:	4649      	mov	r1, r9
 80080c2:	f7f8 fd0b 	bl	8000adc <__aeabi_dcmplt>
 80080c6:	2800      	cmp	r0, #0
 80080c8:	f43f af2f 	beq.w	8007f2a <_dtoa_r+0x47a>
 80080cc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80080ce:	1e6b      	subs	r3, r5, #1
 80080d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80080d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80080d6:	2b30      	cmp	r3, #48	; 0x30
 80080d8:	d0f8      	beq.n	80080cc <_dtoa_r+0x61c>
 80080da:	46bb      	mov	fp, r7
 80080dc:	e04a      	b.n	8008174 <_dtoa_r+0x6c4>
 80080de:	4b06      	ldr	r3, [pc, #24]	; (80080f8 <_dtoa_r+0x648>)
 80080e0:	f7f8 fa8a 	bl	80005f8 <__aeabi_dmul>
 80080e4:	4680      	mov	r8, r0
 80080e6:	4689      	mov	r9, r1
 80080e8:	e7bd      	b.n	8008066 <_dtoa_r+0x5b6>
 80080ea:	bf00      	nop
 80080ec:	0800a1b0 	.word	0x0800a1b0
 80080f0:	0800a188 	.word	0x0800a188
 80080f4:	3ff00000 	.word	0x3ff00000
 80080f8:	40240000 	.word	0x40240000
 80080fc:	401c0000 	.word	0x401c0000
 8008100:	40140000 	.word	0x40140000
 8008104:	3fe00000 	.word	0x3fe00000
 8008108:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800810c:	9d00      	ldr	r5, [sp, #0]
 800810e:	4642      	mov	r2, r8
 8008110:	464b      	mov	r3, r9
 8008112:	4630      	mov	r0, r6
 8008114:	4639      	mov	r1, r7
 8008116:	f7f8 fb99 	bl	800084c <__aeabi_ddiv>
 800811a:	f7f8 fd1d 	bl	8000b58 <__aeabi_d2iz>
 800811e:	9001      	str	r0, [sp, #4]
 8008120:	f7f8 fa00 	bl	8000524 <__aeabi_i2d>
 8008124:	4642      	mov	r2, r8
 8008126:	464b      	mov	r3, r9
 8008128:	f7f8 fa66 	bl	80005f8 <__aeabi_dmul>
 800812c:	4602      	mov	r2, r0
 800812e:	460b      	mov	r3, r1
 8008130:	4630      	mov	r0, r6
 8008132:	4639      	mov	r1, r7
 8008134:	f7f8 f8a8 	bl	8000288 <__aeabi_dsub>
 8008138:	9e01      	ldr	r6, [sp, #4]
 800813a:	9f04      	ldr	r7, [sp, #16]
 800813c:	3630      	adds	r6, #48	; 0x30
 800813e:	f805 6b01 	strb.w	r6, [r5], #1
 8008142:	9e00      	ldr	r6, [sp, #0]
 8008144:	1bae      	subs	r6, r5, r6
 8008146:	42b7      	cmp	r7, r6
 8008148:	4602      	mov	r2, r0
 800814a:	460b      	mov	r3, r1
 800814c:	d134      	bne.n	80081b8 <_dtoa_r+0x708>
 800814e:	f7f8 f89d 	bl	800028c <__adddf3>
 8008152:	4642      	mov	r2, r8
 8008154:	464b      	mov	r3, r9
 8008156:	4606      	mov	r6, r0
 8008158:	460f      	mov	r7, r1
 800815a:	f7f8 fcdd 	bl	8000b18 <__aeabi_dcmpgt>
 800815e:	b9c8      	cbnz	r0, 8008194 <_dtoa_r+0x6e4>
 8008160:	4642      	mov	r2, r8
 8008162:	464b      	mov	r3, r9
 8008164:	4630      	mov	r0, r6
 8008166:	4639      	mov	r1, r7
 8008168:	f7f8 fcae 	bl	8000ac8 <__aeabi_dcmpeq>
 800816c:	b110      	cbz	r0, 8008174 <_dtoa_r+0x6c4>
 800816e:	9b01      	ldr	r3, [sp, #4]
 8008170:	07db      	lsls	r3, r3, #31
 8008172:	d40f      	bmi.n	8008194 <_dtoa_r+0x6e4>
 8008174:	4651      	mov	r1, sl
 8008176:	4620      	mov	r0, r4
 8008178:	f000 fbcc 	bl	8008914 <_Bfree>
 800817c:	2300      	movs	r3, #0
 800817e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008180:	702b      	strb	r3, [r5, #0]
 8008182:	f10b 0301 	add.w	r3, fp, #1
 8008186:	6013      	str	r3, [r2, #0]
 8008188:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800818a:	2b00      	cmp	r3, #0
 800818c:	f43f ace2 	beq.w	8007b54 <_dtoa_r+0xa4>
 8008190:	601d      	str	r5, [r3, #0]
 8008192:	e4df      	b.n	8007b54 <_dtoa_r+0xa4>
 8008194:	465f      	mov	r7, fp
 8008196:	462b      	mov	r3, r5
 8008198:	461d      	mov	r5, r3
 800819a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800819e:	2a39      	cmp	r2, #57	; 0x39
 80081a0:	d106      	bne.n	80081b0 <_dtoa_r+0x700>
 80081a2:	9a00      	ldr	r2, [sp, #0]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d1f7      	bne.n	8008198 <_dtoa_r+0x6e8>
 80081a8:	9900      	ldr	r1, [sp, #0]
 80081aa:	2230      	movs	r2, #48	; 0x30
 80081ac:	3701      	adds	r7, #1
 80081ae:	700a      	strb	r2, [r1, #0]
 80081b0:	781a      	ldrb	r2, [r3, #0]
 80081b2:	3201      	adds	r2, #1
 80081b4:	701a      	strb	r2, [r3, #0]
 80081b6:	e790      	b.n	80080da <_dtoa_r+0x62a>
 80081b8:	4ba3      	ldr	r3, [pc, #652]	; (8008448 <_dtoa_r+0x998>)
 80081ba:	2200      	movs	r2, #0
 80081bc:	f7f8 fa1c 	bl	80005f8 <__aeabi_dmul>
 80081c0:	2200      	movs	r2, #0
 80081c2:	2300      	movs	r3, #0
 80081c4:	4606      	mov	r6, r0
 80081c6:	460f      	mov	r7, r1
 80081c8:	f7f8 fc7e 	bl	8000ac8 <__aeabi_dcmpeq>
 80081cc:	2800      	cmp	r0, #0
 80081ce:	d09e      	beq.n	800810e <_dtoa_r+0x65e>
 80081d0:	e7d0      	b.n	8008174 <_dtoa_r+0x6c4>
 80081d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081d4:	2a00      	cmp	r2, #0
 80081d6:	f000 80ca 	beq.w	800836e <_dtoa_r+0x8be>
 80081da:	9a07      	ldr	r2, [sp, #28]
 80081dc:	2a01      	cmp	r2, #1
 80081de:	f300 80ad 	bgt.w	800833c <_dtoa_r+0x88c>
 80081e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80081e4:	2a00      	cmp	r2, #0
 80081e6:	f000 80a5 	beq.w	8008334 <_dtoa_r+0x884>
 80081ea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80081ee:	9e08      	ldr	r6, [sp, #32]
 80081f0:	9d05      	ldr	r5, [sp, #20]
 80081f2:	9a05      	ldr	r2, [sp, #20]
 80081f4:	441a      	add	r2, r3
 80081f6:	9205      	str	r2, [sp, #20]
 80081f8:	9a06      	ldr	r2, [sp, #24]
 80081fa:	2101      	movs	r1, #1
 80081fc:	441a      	add	r2, r3
 80081fe:	4620      	mov	r0, r4
 8008200:	9206      	str	r2, [sp, #24]
 8008202:	f000 fc3d 	bl	8008a80 <__i2b>
 8008206:	4607      	mov	r7, r0
 8008208:	b165      	cbz	r5, 8008224 <_dtoa_r+0x774>
 800820a:	9b06      	ldr	r3, [sp, #24]
 800820c:	2b00      	cmp	r3, #0
 800820e:	dd09      	ble.n	8008224 <_dtoa_r+0x774>
 8008210:	42ab      	cmp	r3, r5
 8008212:	9a05      	ldr	r2, [sp, #20]
 8008214:	bfa8      	it	ge
 8008216:	462b      	movge	r3, r5
 8008218:	1ad2      	subs	r2, r2, r3
 800821a:	9205      	str	r2, [sp, #20]
 800821c:	9a06      	ldr	r2, [sp, #24]
 800821e:	1aed      	subs	r5, r5, r3
 8008220:	1ad3      	subs	r3, r2, r3
 8008222:	9306      	str	r3, [sp, #24]
 8008224:	9b08      	ldr	r3, [sp, #32]
 8008226:	b1f3      	cbz	r3, 8008266 <_dtoa_r+0x7b6>
 8008228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800822a:	2b00      	cmp	r3, #0
 800822c:	f000 80a3 	beq.w	8008376 <_dtoa_r+0x8c6>
 8008230:	2e00      	cmp	r6, #0
 8008232:	dd10      	ble.n	8008256 <_dtoa_r+0x7a6>
 8008234:	4639      	mov	r1, r7
 8008236:	4632      	mov	r2, r6
 8008238:	4620      	mov	r0, r4
 800823a:	f000 fce1 	bl	8008c00 <__pow5mult>
 800823e:	4652      	mov	r2, sl
 8008240:	4601      	mov	r1, r0
 8008242:	4607      	mov	r7, r0
 8008244:	4620      	mov	r0, r4
 8008246:	f000 fc31 	bl	8008aac <__multiply>
 800824a:	4651      	mov	r1, sl
 800824c:	4680      	mov	r8, r0
 800824e:	4620      	mov	r0, r4
 8008250:	f000 fb60 	bl	8008914 <_Bfree>
 8008254:	46c2      	mov	sl, r8
 8008256:	9b08      	ldr	r3, [sp, #32]
 8008258:	1b9a      	subs	r2, r3, r6
 800825a:	d004      	beq.n	8008266 <_dtoa_r+0x7b6>
 800825c:	4651      	mov	r1, sl
 800825e:	4620      	mov	r0, r4
 8008260:	f000 fcce 	bl	8008c00 <__pow5mult>
 8008264:	4682      	mov	sl, r0
 8008266:	2101      	movs	r1, #1
 8008268:	4620      	mov	r0, r4
 800826a:	f000 fc09 	bl	8008a80 <__i2b>
 800826e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008270:	2b00      	cmp	r3, #0
 8008272:	4606      	mov	r6, r0
 8008274:	f340 8081 	ble.w	800837a <_dtoa_r+0x8ca>
 8008278:	461a      	mov	r2, r3
 800827a:	4601      	mov	r1, r0
 800827c:	4620      	mov	r0, r4
 800827e:	f000 fcbf 	bl	8008c00 <__pow5mult>
 8008282:	9b07      	ldr	r3, [sp, #28]
 8008284:	2b01      	cmp	r3, #1
 8008286:	4606      	mov	r6, r0
 8008288:	dd7a      	ble.n	8008380 <_dtoa_r+0x8d0>
 800828a:	f04f 0800 	mov.w	r8, #0
 800828e:	6933      	ldr	r3, [r6, #16]
 8008290:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008294:	6918      	ldr	r0, [r3, #16]
 8008296:	f000 fba5 	bl	80089e4 <__hi0bits>
 800829a:	f1c0 0020 	rsb	r0, r0, #32
 800829e:	9b06      	ldr	r3, [sp, #24]
 80082a0:	4418      	add	r0, r3
 80082a2:	f010 001f 	ands.w	r0, r0, #31
 80082a6:	f000 8094 	beq.w	80083d2 <_dtoa_r+0x922>
 80082aa:	f1c0 0320 	rsb	r3, r0, #32
 80082ae:	2b04      	cmp	r3, #4
 80082b0:	f340 8085 	ble.w	80083be <_dtoa_r+0x90e>
 80082b4:	9b05      	ldr	r3, [sp, #20]
 80082b6:	f1c0 001c 	rsb	r0, r0, #28
 80082ba:	4403      	add	r3, r0
 80082bc:	9305      	str	r3, [sp, #20]
 80082be:	9b06      	ldr	r3, [sp, #24]
 80082c0:	4403      	add	r3, r0
 80082c2:	4405      	add	r5, r0
 80082c4:	9306      	str	r3, [sp, #24]
 80082c6:	9b05      	ldr	r3, [sp, #20]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	dd05      	ble.n	80082d8 <_dtoa_r+0x828>
 80082cc:	4651      	mov	r1, sl
 80082ce:	461a      	mov	r2, r3
 80082d0:	4620      	mov	r0, r4
 80082d2:	f000 fcef 	bl	8008cb4 <__lshift>
 80082d6:	4682      	mov	sl, r0
 80082d8:	9b06      	ldr	r3, [sp, #24]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	dd05      	ble.n	80082ea <_dtoa_r+0x83a>
 80082de:	4631      	mov	r1, r6
 80082e0:	461a      	mov	r2, r3
 80082e2:	4620      	mov	r0, r4
 80082e4:	f000 fce6 	bl	8008cb4 <__lshift>
 80082e8:	4606      	mov	r6, r0
 80082ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d072      	beq.n	80083d6 <_dtoa_r+0x926>
 80082f0:	4631      	mov	r1, r6
 80082f2:	4650      	mov	r0, sl
 80082f4:	f000 fd4a 	bl	8008d8c <__mcmp>
 80082f8:	2800      	cmp	r0, #0
 80082fa:	da6c      	bge.n	80083d6 <_dtoa_r+0x926>
 80082fc:	2300      	movs	r3, #0
 80082fe:	4651      	mov	r1, sl
 8008300:	220a      	movs	r2, #10
 8008302:	4620      	mov	r0, r4
 8008304:	f000 fb28 	bl	8008958 <__multadd>
 8008308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800830a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800830e:	4682      	mov	sl, r0
 8008310:	2b00      	cmp	r3, #0
 8008312:	f000 81b0 	beq.w	8008676 <_dtoa_r+0xbc6>
 8008316:	2300      	movs	r3, #0
 8008318:	4639      	mov	r1, r7
 800831a:	220a      	movs	r2, #10
 800831c:	4620      	mov	r0, r4
 800831e:	f000 fb1b 	bl	8008958 <__multadd>
 8008322:	9b01      	ldr	r3, [sp, #4]
 8008324:	2b00      	cmp	r3, #0
 8008326:	4607      	mov	r7, r0
 8008328:	f300 8096 	bgt.w	8008458 <_dtoa_r+0x9a8>
 800832c:	9b07      	ldr	r3, [sp, #28]
 800832e:	2b02      	cmp	r3, #2
 8008330:	dc59      	bgt.n	80083e6 <_dtoa_r+0x936>
 8008332:	e091      	b.n	8008458 <_dtoa_r+0x9a8>
 8008334:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008336:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800833a:	e758      	b.n	80081ee <_dtoa_r+0x73e>
 800833c:	9b04      	ldr	r3, [sp, #16]
 800833e:	1e5e      	subs	r6, r3, #1
 8008340:	9b08      	ldr	r3, [sp, #32]
 8008342:	42b3      	cmp	r3, r6
 8008344:	bfbf      	itttt	lt
 8008346:	9b08      	ldrlt	r3, [sp, #32]
 8008348:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800834a:	9608      	strlt	r6, [sp, #32]
 800834c:	1af3      	sublt	r3, r6, r3
 800834e:	bfb4      	ite	lt
 8008350:	18d2      	addlt	r2, r2, r3
 8008352:	1b9e      	subge	r6, r3, r6
 8008354:	9b04      	ldr	r3, [sp, #16]
 8008356:	bfbc      	itt	lt
 8008358:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800835a:	2600      	movlt	r6, #0
 800835c:	2b00      	cmp	r3, #0
 800835e:	bfb7      	itett	lt
 8008360:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008364:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008368:	1a9d      	sublt	r5, r3, r2
 800836a:	2300      	movlt	r3, #0
 800836c:	e741      	b.n	80081f2 <_dtoa_r+0x742>
 800836e:	9e08      	ldr	r6, [sp, #32]
 8008370:	9d05      	ldr	r5, [sp, #20]
 8008372:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008374:	e748      	b.n	8008208 <_dtoa_r+0x758>
 8008376:	9a08      	ldr	r2, [sp, #32]
 8008378:	e770      	b.n	800825c <_dtoa_r+0x7ac>
 800837a:	9b07      	ldr	r3, [sp, #28]
 800837c:	2b01      	cmp	r3, #1
 800837e:	dc19      	bgt.n	80083b4 <_dtoa_r+0x904>
 8008380:	9b02      	ldr	r3, [sp, #8]
 8008382:	b9bb      	cbnz	r3, 80083b4 <_dtoa_r+0x904>
 8008384:	9b03      	ldr	r3, [sp, #12]
 8008386:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800838a:	b99b      	cbnz	r3, 80083b4 <_dtoa_r+0x904>
 800838c:	9b03      	ldr	r3, [sp, #12]
 800838e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008392:	0d1b      	lsrs	r3, r3, #20
 8008394:	051b      	lsls	r3, r3, #20
 8008396:	b183      	cbz	r3, 80083ba <_dtoa_r+0x90a>
 8008398:	9b05      	ldr	r3, [sp, #20]
 800839a:	3301      	adds	r3, #1
 800839c:	9305      	str	r3, [sp, #20]
 800839e:	9b06      	ldr	r3, [sp, #24]
 80083a0:	3301      	adds	r3, #1
 80083a2:	9306      	str	r3, [sp, #24]
 80083a4:	f04f 0801 	mov.w	r8, #1
 80083a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	f47f af6f 	bne.w	800828e <_dtoa_r+0x7de>
 80083b0:	2001      	movs	r0, #1
 80083b2:	e774      	b.n	800829e <_dtoa_r+0x7ee>
 80083b4:	f04f 0800 	mov.w	r8, #0
 80083b8:	e7f6      	b.n	80083a8 <_dtoa_r+0x8f8>
 80083ba:	4698      	mov	r8, r3
 80083bc:	e7f4      	b.n	80083a8 <_dtoa_r+0x8f8>
 80083be:	d082      	beq.n	80082c6 <_dtoa_r+0x816>
 80083c0:	9a05      	ldr	r2, [sp, #20]
 80083c2:	331c      	adds	r3, #28
 80083c4:	441a      	add	r2, r3
 80083c6:	9205      	str	r2, [sp, #20]
 80083c8:	9a06      	ldr	r2, [sp, #24]
 80083ca:	441a      	add	r2, r3
 80083cc:	441d      	add	r5, r3
 80083ce:	9206      	str	r2, [sp, #24]
 80083d0:	e779      	b.n	80082c6 <_dtoa_r+0x816>
 80083d2:	4603      	mov	r3, r0
 80083d4:	e7f4      	b.n	80083c0 <_dtoa_r+0x910>
 80083d6:	9b04      	ldr	r3, [sp, #16]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	dc37      	bgt.n	800844c <_dtoa_r+0x99c>
 80083dc:	9b07      	ldr	r3, [sp, #28]
 80083de:	2b02      	cmp	r3, #2
 80083e0:	dd34      	ble.n	800844c <_dtoa_r+0x99c>
 80083e2:	9b04      	ldr	r3, [sp, #16]
 80083e4:	9301      	str	r3, [sp, #4]
 80083e6:	9b01      	ldr	r3, [sp, #4]
 80083e8:	b963      	cbnz	r3, 8008404 <_dtoa_r+0x954>
 80083ea:	4631      	mov	r1, r6
 80083ec:	2205      	movs	r2, #5
 80083ee:	4620      	mov	r0, r4
 80083f0:	f000 fab2 	bl	8008958 <__multadd>
 80083f4:	4601      	mov	r1, r0
 80083f6:	4606      	mov	r6, r0
 80083f8:	4650      	mov	r0, sl
 80083fa:	f000 fcc7 	bl	8008d8c <__mcmp>
 80083fe:	2800      	cmp	r0, #0
 8008400:	f73f adbb 	bgt.w	8007f7a <_dtoa_r+0x4ca>
 8008404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008406:	9d00      	ldr	r5, [sp, #0]
 8008408:	ea6f 0b03 	mvn.w	fp, r3
 800840c:	f04f 0800 	mov.w	r8, #0
 8008410:	4631      	mov	r1, r6
 8008412:	4620      	mov	r0, r4
 8008414:	f000 fa7e 	bl	8008914 <_Bfree>
 8008418:	2f00      	cmp	r7, #0
 800841a:	f43f aeab 	beq.w	8008174 <_dtoa_r+0x6c4>
 800841e:	f1b8 0f00 	cmp.w	r8, #0
 8008422:	d005      	beq.n	8008430 <_dtoa_r+0x980>
 8008424:	45b8      	cmp	r8, r7
 8008426:	d003      	beq.n	8008430 <_dtoa_r+0x980>
 8008428:	4641      	mov	r1, r8
 800842a:	4620      	mov	r0, r4
 800842c:	f000 fa72 	bl	8008914 <_Bfree>
 8008430:	4639      	mov	r1, r7
 8008432:	4620      	mov	r0, r4
 8008434:	f000 fa6e 	bl	8008914 <_Bfree>
 8008438:	e69c      	b.n	8008174 <_dtoa_r+0x6c4>
 800843a:	2600      	movs	r6, #0
 800843c:	4637      	mov	r7, r6
 800843e:	e7e1      	b.n	8008404 <_dtoa_r+0x954>
 8008440:	46bb      	mov	fp, r7
 8008442:	4637      	mov	r7, r6
 8008444:	e599      	b.n	8007f7a <_dtoa_r+0x4ca>
 8008446:	bf00      	nop
 8008448:	40240000 	.word	0x40240000
 800844c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800844e:	2b00      	cmp	r3, #0
 8008450:	f000 80c8 	beq.w	80085e4 <_dtoa_r+0xb34>
 8008454:	9b04      	ldr	r3, [sp, #16]
 8008456:	9301      	str	r3, [sp, #4]
 8008458:	2d00      	cmp	r5, #0
 800845a:	dd05      	ble.n	8008468 <_dtoa_r+0x9b8>
 800845c:	4639      	mov	r1, r7
 800845e:	462a      	mov	r2, r5
 8008460:	4620      	mov	r0, r4
 8008462:	f000 fc27 	bl	8008cb4 <__lshift>
 8008466:	4607      	mov	r7, r0
 8008468:	f1b8 0f00 	cmp.w	r8, #0
 800846c:	d05b      	beq.n	8008526 <_dtoa_r+0xa76>
 800846e:	6879      	ldr	r1, [r7, #4]
 8008470:	4620      	mov	r0, r4
 8008472:	f000 fa0f 	bl	8008894 <_Balloc>
 8008476:	4605      	mov	r5, r0
 8008478:	b928      	cbnz	r0, 8008486 <_dtoa_r+0x9d6>
 800847a:	4b83      	ldr	r3, [pc, #524]	; (8008688 <_dtoa_r+0xbd8>)
 800847c:	4602      	mov	r2, r0
 800847e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008482:	f7ff bb2e 	b.w	8007ae2 <_dtoa_r+0x32>
 8008486:	693a      	ldr	r2, [r7, #16]
 8008488:	3202      	adds	r2, #2
 800848a:	0092      	lsls	r2, r2, #2
 800848c:	f107 010c 	add.w	r1, r7, #12
 8008490:	300c      	adds	r0, #12
 8008492:	f000 ffab 	bl	80093ec <memcpy>
 8008496:	2201      	movs	r2, #1
 8008498:	4629      	mov	r1, r5
 800849a:	4620      	mov	r0, r4
 800849c:	f000 fc0a 	bl	8008cb4 <__lshift>
 80084a0:	9b00      	ldr	r3, [sp, #0]
 80084a2:	3301      	adds	r3, #1
 80084a4:	9304      	str	r3, [sp, #16]
 80084a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084aa:	4413      	add	r3, r2
 80084ac:	9308      	str	r3, [sp, #32]
 80084ae:	9b02      	ldr	r3, [sp, #8]
 80084b0:	f003 0301 	and.w	r3, r3, #1
 80084b4:	46b8      	mov	r8, r7
 80084b6:	9306      	str	r3, [sp, #24]
 80084b8:	4607      	mov	r7, r0
 80084ba:	9b04      	ldr	r3, [sp, #16]
 80084bc:	4631      	mov	r1, r6
 80084be:	3b01      	subs	r3, #1
 80084c0:	4650      	mov	r0, sl
 80084c2:	9301      	str	r3, [sp, #4]
 80084c4:	f7ff fa6b 	bl	800799e <quorem>
 80084c8:	4641      	mov	r1, r8
 80084ca:	9002      	str	r0, [sp, #8]
 80084cc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80084d0:	4650      	mov	r0, sl
 80084d2:	f000 fc5b 	bl	8008d8c <__mcmp>
 80084d6:	463a      	mov	r2, r7
 80084d8:	9005      	str	r0, [sp, #20]
 80084da:	4631      	mov	r1, r6
 80084dc:	4620      	mov	r0, r4
 80084de:	f000 fc71 	bl	8008dc4 <__mdiff>
 80084e2:	68c2      	ldr	r2, [r0, #12]
 80084e4:	4605      	mov	r5, r0
 80084e6:	bb02      	cbnz	r2, 800852a <_dtoa_r+0xa7a>
 80084e8:	4601      	mov	r1, r0
 80084ea:	4650      	mov	r0, sl
 80084ec:	f000 fc4e 	bl	8008d8c <__mcmp>
 80084f0:	4602      	mov	r2, r0
 80084f2:	4629      	mov	r1, r5
 80084f4:	4620      	mov	r0, r4
 80084f6:	9209      	str	r2, [sp, #36]	; 0x24
 80084f8:	f000 fa0c 	bl	8008914 <_Bfree>
 80084fc:	9b07      	ldr	r3, [sp, #28]
 80084fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008500:	9d04      	ldr	r5, [sp, #16]
 8008502:	ea43 0102 	orr.w	r1, r3, r2
 8008506:	9b06      	ldr	r3, [sp, #24]
 8008508:	4319      	orrs	r1, r3
 800850a:	d110      	bne.n	800852e <_dtoa_r+0xa7e>
 800850c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008510:	d029      	beq.n	8008566 <_dtoa_r+0xab6>
 8008512:	9b05      	ldr	r3, [sp, #20]
 8008514:	2b00      	cmp	r3, #0
 8008516:	dd02      	ble.n	800851e <_dtoa_r+0xa6e>
 8008518:	9b02      	ldr	r3, [sp, #8]
 800851a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800851e:	9b01      	ldr	r3, [sp, #4]
 8008520:	f883 9000 	strb.w	r9, [r3]
 8008524:	e774      	b.n	8008410 <_dtoa_r+0x960>
 8008526:	4638      	mov	r0, r7
 8008528:	e7ba      	b.n	80084a0 <_dtoa_r+0x9f0>
 800852a:	2201      	movs	r2, #1
 800852c:	e7e1      	b.n	80084f2 <_dtoa_r+0xa42>
 800852e:	9b05      	ldr	r3, [sp, #20]
 8008530:	2b00      	cmp	r3, #0
 8008532:	db04      	blt.n	800853e <_dtoa_r+0xa8e>
 8008534:	9907      	ldr	r1, [sp, #28]
 8008536:	430b      	orrs	r3, r1
 8008538:	9906      	ldr	r1, [sp, #24]
 800853a:	430b      	orrs	r3, r1
 800853c:	d120      	bne.n	8008580 <_dtoa_r+0xad0>
 800853e:	2a00      	cmp	r2, #0
 8008540:	dded      	ble.n	800851e <_dtoa_r+0xa6e>
 8008542:	4651      	mov	r1, sl
 8008544:	2201      	movs	r2, #1
 8008546:	4620      	mov	r0, r4
 8008548:	f000 fbb4 	bl	8008cb4 <__lshift>
 800854c:	4631      	mov	r1, r6
 800854e:	4682      	mov	sl, r0
 8008550:	f000 fc1c 	bl	8008d8c <__mcmp>
 8008554:	2800      	cmp	r0, #0
 8008556:	dc03      	bgt.n	8008560 <_dtoa_r+0xab0>
 8008558:	d1e1      	bne.n	800851e <_dtoa_r+0xa6e>
 800855a:	f019 0f01 	tst.w	r9, #1
 800855e:	d0de      	beq.n	800851e <_dtoa_r+0xa6e>
 8008560:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008564:	d1d8      	bne.n	8008518 <_dtoa_r+0xa68>
 8008566:	9a01      	ldr	r2, [sp, #4]
 8008568:	2339      	movs	r3, #57	; 0x39
 800856a:	7013      	strb	r3, [r2, #0]
 800856c:	462b      	mov	r3, r5
 800856e:	461d      	mov	r5, r3
 8008570:	3b01      	subs	r3, #1
 8008572:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008576:	2a39      	cmp	r2, #57	; 0x39
 8008578:	d06c      	beq.n	8008654 <_dtoa_r+0xba4>
 800857a:	3201      	adds	r2, #1
 800857c:	701a      	strb	r2, [r3, #0]
 800857e:	e747      	b.n	8008410 <_dtoa_r+0x960>
 8008580:	2a00      	cmp	r2, #0
 8008582:	dd07      	ble.n	8008594 <_dtoa_r+0xae4>
 8008584:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008588:	d0ed      	beq.n	8008566 <_dtoa_r+0xab6>
 800858a:	9a01      	ldr	r2, [sp, #4]
 800858c:	f109 0301 	add.w	r3, r9, #1
 8008590:	7013      	strb	r3, [r2, #0]
 8008592:	e73d      	b.n	8008410 <_dtoa_r+0x960>
 8008594:	9b04      	ldr	r3, [sp, #16]
 8008596:	9a08      	ldr	r2, [sp, #32]
 8008598:	f803 9c01 	strb.w	r9, [r3, #-1]
 800859c:	4293      	cmp	r3, r2
 800859e:	d043      	beq.n	8008628 <_dtoa_r+0xb78>
 80085a0:	4651      	mov	r1, sl
 80085a2:	2300      	movs	r3, #0
 80085a4:	220a      	movs	r2, #10
 80085a6:	4620      	mov	r0, r4
 80085a8:	f000 f9d6 	bl	8008958 <__multadd>
 80085ac:	45b8      	cmp	r8, r7
 80085ae:	4682      	mov	sl, r0
 80085b0:	f04f 0300 	mov.w	r3, #0
 80085b4:	f04f 020a 	mov.w	r2, #10
 80085b8:	4641      	mov	r1, r8
 80085ba:	4620      	mov	r0, r4
 80085bc:	d107      	bne.n	80085ce <_dtoa_r+0xb1e>
 80085be:	f000 f9cb 	bl	8008958 <__multadd>
 80085c2:	4680      	mov	r8, r0
 80085c4:	4607      	mov	r7, r0
 80085c6:	9b04      	ldr	r3, [sp, #16]
 80085c8:	3301      	adds	r3, #1
 80085ca:	9304      	str	r3, [sp, #16]
 80085cc:	e775      	b.n	80084ba <_dtoa_r+0xa0a>
 80085ce:	f000 f9c3 	bl	8008958 <__multadd>
 80085d2:	4639      	mov	r1, r7
 80085d4:	4680      	mov	r8, r0
 80085d6:	2300      	movs	r3, #0
 80085d8:	220a      	movs	r2, #10
 80085da:	4620      	mov	r0, r4
 80085dc:	f000 f9bc 	bl	8008958 <__multadd>
 80085e0:	4607      	mov	r7, r0
 80085e2:	e7f0      	b.n	80085c6 <_dtoa_r+0xb16>
 80085e4:	9b04      	ldr	r3, [sp, #16]
 80085e6:	9301      	str	r3, [sp, #4]
 80085e8:	9d00      	ldr	r5, [sp, #0]
 80085ea:	4631      	mov	r1, r6
 80085ec:	4650      	mov	r0, sl
 80085ee:	f7ff f9d6 	bl	800799e <quorem>
 80085f2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80085f6:	9b00      	ldr	r3, [sp, #0]
 80085f8:	f805 9b01 	strb.w	r9, [r5], #1
 80085fc:	1aea      	subs	r2, r5, r3
 80085fe:	9b01      	ldr	r3, [sp, #4]
 8008600:	4293      	cmp	r3, r2
 8008602:	dd07      	ble.n	8008614 <_dtoa_r+0xb64>
 8008604:	4651      	mov	r1, sl
 8008606:	2300      	movs	r3, #0
 8008608:	220a      	movs	r2, #10
 800860a:	4620      	mov	r0, r4
 800860c:	f000 f9a4 	bl	8008958 <__multadd>
 8008610:	4682      	mov	sl, r0
 8008612:	e7ea      	b.n	80085ea <_dtoa_r+0xb3a>
 8008614:	9b01      	ldr	r3, [sp, #4]
 8008616:	2b00      	cmp	r3, #0
 8008618:	bfc8      	it	gt
 800861a:	461d      	movgt	r5, r3
 800861c:	9b00      	ldr	r3, [sp, #0]
 800861e:	bfd8      	it	le
 8008620:	2501      	movle	r5, #1
 8008622:	441d      	add	r5, r3
 8008624:	f04f 0800 	mov.w	r8, #0
 8008628:	4651      	mov	r1, sl
 800862a:	2201      	movs	r2, #1
 800862c:	4620      	mov	r0, r4
 800862e:	f000 fb41 	bl	8008cb4 <__lshift>
 8008632:	4631      	mov	r1, r6
 8008634:	4682      	mov	sl, r0
 8008636:	f000 fba9 	bl	8008d8c <__mcmp>
 800863a:	2800      	cmp	r0, #0
 800863c:	dc96      	bgt.n	800856c <_dtoa_r+0xabc>
 800863e:	d102      	bne.n	8008646 <_dtoa_r+0xb96>
 8008640:	f019 0f01 	tst.w	r9, #1
 8008644:	d192      	bne.n	800856c <_dtoa_r+0xabc>
 8008646:	462b      	mov	r3, r5
 8008648:	461d      	mov	r5, r3
 800864a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800864e:	2a30      	cmp	r2, #48	; 0x30
 8008650:	d0fa      	beq.n	8008648 <_dtoa_r+0xb98>
 8008652:	e6dd      	b.n	8008410 <_dtoa_r+0x960>
 8008654:	9a00      	ldr	r2, [sp, #0]
 8008656:	429a      	cmp	r2, r3
 8008658:	d189      	bne.n	800856e <_dtoa_r+0xabe>
 800865a:	f10b 0b01 	add.w	fp, fp, #1
 800865e:	2331      	movs	r3, #49	; 0x31
 8008660:	e796      	b.n	8008590 <_dtoa_r+0xae0>
 8008662:	4b0a      	ldr	r3, [pc, #40]	; (800868c <_dtoa_r+0xbdc>)
 8008664:	f7ff ba99 	b.w	8007b9a <_dtoa_r+0xea>
 8008668:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800866a:	2b00      	cmp	r3, #0
 800866c:	f47f aa6d 	bne.w	8007b4a <_dtoa_r+0x9a>
 8008670:	4b07      	ldr	r3, [pc, #28]	; (8008690 <_dtoa_r+0xbe0>)
 8008672:	f7ff ba92 	b.w	8007b9a <_dtoa_r+0xea>
 8008676:	9b01      	ldr	r3, [sp, #4]
 8008678:	2b00      	cmp	r3, #0
 800867a:	dcb5      	bgt.n	80085e8 <_dtoa_r+0xb38>
 800867c:	9b07      	ldr	r3, [sp, #28]
 800867e:	2b02      	cmp	r3, #2
 8008680:	f73f aeb1 	bgt.w	80083e6 <_dtoa_r+0x936>
 8008684:	e7b0      	b.n	80085e8 <_dtoa_r+0xb38>
 8008686:	bf00      	nop
 8008688:	0800a11d 	.word	0x0800a11d
 800868c:	0800a07d 	.word	0x0800a07d
 8008690:	0800a0a1 	.word	0x0800a0a1

08008694 <_free_r>:
 8008694:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008696:	2900      	cmp	r1, #0
 8008698:	d044      	beq.n	8008724 <_free_r+0x90>
 800869a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800869e:	9001      	str	r0, [sp, #4]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	f1a1 0404 	sub.w	r4, r1, #4
 80086a6:	bfb8      	it	lt
 80086a8:	18e4      	addlt	r4, r4, r3
 80086aa:	f000 f8e7 	bl	800887c <__malloc_lock>
 80086ae:	4a1e      	ldr	r2, [pc, #120]	; (8008728 <_free_r+0x94>)
 80086b0:	9801      	ldr	r0, [sp, #4]
 80086b2:	6813      	ldr	r3, [r2, #0]
 80086b4:	b933      	cbnz	r3, 80086c4 <_free_r+0x30>
 80086b6:	6063      	str	r3, [r4, #4]
 80086b8:	6014      	str	r4, [r2, #0]
 80086ba:	b003      	add	sp, #12
 80086bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80086c0:	f000 b8e2 	b.w	8008888 <__malloc_unlock>
 80086c4:	42a3      	cmp	r3, r4
 80086c6:	d908      	bls.n	80086da <_free_r+0x46>
 80086c8:	6825      	ldr	r5, [r4, #0]
 80086ca:	1961      	adds	r1, r4, r5
 80086cc:	428b      	cmp	r3, r1
 80086ce:	bf01      	itttt	eq
 80086d0:	6819      	ldreq	r1, [r3, #0]
 80086d2:	685b      	ldreq	r3, [r3, #4]
 80086d4:	1949      	addeq	r1, r1, r5
 80086d6:	6021      	streq	r1, [r4, #0]
 80086d8:	e7ed      	b.n	80086b6 <_free_r+0x22>
 80086da:	461a      	mov	r2, r3
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	b10b      	cbz	r3, 80086e4 <_free_r+0x50>
 80086e0:	42a3      	cmp	r3, r4
 80086e2:	d9fa      	bls.n	80086da <_free_r+0x46>
 80086e4:	6811      	ldr	r1, [r2, #0]
 80086e6:	1855      	adds	r5, r2, r1
 80086e8:	42a5      	cmp	r5, r4
 80086ea:	d10b      	bne.n	8008704 <_free_r+0x70>
 80086ec:	6824      	ldr	r4, [r4, #0]
 80086ee:	4421      	add	r1, r4
 80086f0:	1854      	adds	r4, r2, r1
 80086f2:	42a3      	cmp	r3, r4
 80086f4:	6011      	str	r1, [r2, #0]
 80086f6:	d1e0      	bne.n	80086ba <_free_r+0x26>
 80086f8:	681c      	ldr	r4, [r3, #0]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	6053      	str	r3, [r2, #4]
 80086fe:	440c      	add	r4, r1
 8008700:	6014      	str	r4, [r2, #0]
 8008702:	e7da      	b.n	80086ba <_free_r+0x26>
 8008704:	d902      	bls.n	800870c <_free_r+0x78>
 8008706:	230c      	movs	r3, #12
 8008708:	6003      	str	r3, [r0, #0]
 800870a:	e7d6      	b.n	80086ba <_free_r+0x26>
 800870c:	6825      	ldr	r5, [r4, #0]
 800870e:	1961      	adds	r1, r4, r5
 8008710:	428b      	cmp	r3, r1
 8008712:	bf04      	itt	eq
 8008714:	6819      	ldreq	r1, [r3, #0]
 8008716:	685b      	ldreq	r3, [r3, #4]
 8008718:	6063      	str	r3, [r4, #4]
 800871a:	bf04      	itt	eq
 800871c:	1949      	addeq	r1, r1, r5
 800871e:	6021      	streq	r1, [r4, #0]
 8008720:	6054      	str	r4, [r2, #4]
 8008722:	e7ca      	b.n	80086ba <_free_r+0x26>
 8008724:	b003      	add	sp, #12
 8008726:	bd30      	pop	{r4, r5, pc}
 8008728:	200005e8 	.word	0x200005e8

0800872c <malloc>:
 800872c:	4b02      	ldr	r3, [pc, #8]	; (8008738 <malloc+0xc>)
 800872e:	4601      	mov	r1, r0
 8008730:	6818      	ldr	r0, [r3, #0]
 8008732:	f000 b823 	b.w	800877c <_malloc_r>
 8008736:	bf00      	nop
 8008738:	200000d0 	.word	0x200000d0

0800873c <sbrk_aligned>:
 800873c:	b570      	push	{r4, r5, r6, lr}
 800873e:	4e0e      	ldr	r6, [pc, #56]	; (8008778 <sbrk_aligned+0x3c>)
 8008740:	460c      	mov	r4, r1
 8008742:	6831      	ldr	r1, [r6, #0]
 8008744:	4605      	mov	r5, r0
 8008746:	b911      	cbnz	r1, 800874e <sbrk_aligned+0x12>
 8008748:	f000 fe40 	bl	80093cc <_sbrk_r>
 800874c:	6030      	str	r0, [r6, #0]
 800874e:	4621      	mov	r1, r4
 8008750:	4628      	mov	r0, r5
 8008752:	f000 fe3b 	bl	80093cc <_sbrk_r>
 8008756:	1c43      	adds	r3, r0, #1
 8008758:	d00a      	beq.n	8008770 <sbrk_aligned+0x34>
 800875a:	1cc4      	adds	r4, r0, #3
 800875c:	f024 0403 	bic.w	r4, r4, #3
 8008760:	42a0      	cmp	r0, r4
 8008762:	d007      	beq.n	8008774 <sbrk_aligned+0x38>
 8008764:	1a21      	subs	r1, r4, r0
 8008766:	4628      	mov	r0, r5
 8008768:	f000 fe30 	bl	80093cc <_sbrk_r>
 800876c:	3001      	adds	r0, #1
 800876e:	d101      	bne.n	8008774 <sbrk_aligned+0x38>
 8008770:	f04f 34ff 	mov.w	r4, #4294967295
 8008774:	4620      	mov	r0, r4
 8008776:	bd70      	pop	{r4, r5, r6, pc}
 8008778:	200005ec 	.word	0x200005ec

0800877c <_malloc_r>:
 800877c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008780:	1ccd      	adds	r5, r1, #3
 8008782:	f025 0503 	bic.w	r5, r5, #3
 8008786:	3508      	adds	r5, #8
 8008788:	2d0c      	cmp	r5, #12
 800878a:	bf38      	it	cc
 800878c:	250c      	movcc	r5, #12
 800878e:	2d00      	cmp	r5, #0
 8008790:	4607      	mov	r7, r0
 8008792:	db01      	blt.n	8008798 <_malloc_r+0x1c>
 8008794:	42a9      	cmp	r1, r5
 8008796:	d905      	bls.n	80087a4 <_malloc_r+0x28>
 8008798:	230c      	movs	r3, #12
 800879a:	603b      	str	r3, [r7, #0]
 800879c:	2600      	movs	r6, #0
 800879e:	4630      	mov	r0, r6
 80087a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008878 <_malloc_r+0xfc>
 80087a8:	f000 f868 	bl	800887c <__malloc_lock>
 80087ac:	f8d8 3000 	ldr.w	r3, [r8]
 80087b0:	461c      	mov	r4, r3
 80087b2:	bb5c      	cbnz	r4, 800880c <_malloc_r+0x90>
 80087b4:	4629      	mov	r1, r5
 80087b6:	4638      	mov	r0, r7
 80087b8:	f7ff ffc0 	bl	800873c <sbrk_aligned>
 80087bc:	1c43      	adds	r3, r0, #1
 80087be:	4604      	mov	r4, r0
 80087c0:	d155      	bne.n	800886e <_malloc_r+0xf2>
 80087c2:	f8d8 4000 	ldr.w	r4, [r8]
 80087c6:	4626      	mov	r6, r4
 80087c8:	2e00      	cmp	r6, #0
 80087ca:	d145      	bne.n	8008858 <_malloc_r+0xdc>
 80087cc:	2c00      	cmp	r4, #0
 80087ce:	d048      	beq.n	8008862 <_malloc_r+0xe6>
 80087d0:	6823      	ldr	r3, [r4, #0]
 80087d2:	4631      	mov	r1, r6
 80087d4:	4638      	mov	r0, r7
 80087d6:	eb04 0903 	add.w	r9, r4, r3
 80087da:	f000 fdf7 	bl	80093cc <_sbrk_r>
 80087de:	4581      	cmp	r9, r0
 80087e0:	d13f      	bne.n	8008862 <_malloc_r+0xe6>
 80087e2:	6821      	ldr	r1, [r4, #0]
 80087e4:	1a6d      	subs	r5, r5, r1
 80087e6:	4629      	mov	r1, r5
 80087e8:	4638      	mov	r0, r7
 80087ea:	f7ff ffa7 	bl	800873c <sbrk_aligned>
 80087ee:	3001      	adds	r0, #1
 80087f0:	d037      	beq.n	8008862 <_malloc_r+0xe6>
 80087f2:	6823      	ldr	r3, [r4, #0]
 80087f4:	442b      	add	r3, r5
 80087f6:	6023      	str	r3, [r4, #0]
 80087f8:	f8d8 3000 	ldr.w	r3, [r8]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d038      	beq.n	8008872 <_malloc_r+0xf6>
 8008800:	685a      	ldr	r2, [r3, #4]
 8008802:	42a2      	cmp	r2, r4
 8008804:	d12b      	bne.n	800885e <_malloc_r+0xe2>
 8008806:	2200      	movs	r2, #0
 8008808:	605a      	str	r2, [r3, #4]
 800880a:	e00f      	b.n	800882c <_malloc_r+0xb0>
 800880c:	6822      	ldr	r2, [r4, #0]
 800880e:	1b52      	subs	r2, r2, r5
 8008810:	d41f      	bmi.n	8008852 <_malloc_r+0xd6>
 8008812:	2a0b      	cmp	r2, #11
 8008814:	d917      	bls.n	8008846 <_malloc_r+0xca>
 8008816:	1961      	adds	r1, r4, r5
 8008818:	42a3      	cmp	r3, r4
 800881a:	6025      	str	r5, [r4, #0]
 800881c:	bf18      	it	ne
 800881e:	6059      	strne	r1, [r3, #4]
 8008820:	6863      	ldr	r3, [r4, #4]
 8008822:	bf08      	it	eq
 8008824:	f8c8 1000 	streq.w	r1, [r8]
 8008828:	5162      	str	r2, [r4, r5]
 800882a:	604b      	str	r3, [r1, #4]
 800882c:	4638      	mov	r0, r7
 800882e:	f104 060b 	add.w	r6, r4, #11
 8008832:	f000 f829 	bl	8008888 <__malloc_unlock>
 8008836:	f026 0607 	bic.w	r6, r6, #7
 800883a:	1d23      	adds	r3, r4, #4
 800883c:	1af2      	subs	r2, r6, r3
 800883e:	d0ae      	beq.n	800879e <_malloc_r+0x22>
 8008840:	1b9b      	subs	r3, r3, r6
 8008842:	50a3      	str	r3, [r4, r2]
 8008844:	e7ab      	b.n	800879e <_malloc_r+0x22>
 8008846:	42a3      	cmp	r3, r4
 8008848:	6862      	ldr	r2, [r4, #4]
 800884a:	d1dd      	bne.n	8008808 <_malloc_r+0x8c>
 800884c:	f8c8 2000 	str.w	r2, [r8]
 8008850:	e7ec      	b.n	800882c <_malloc_r+0xb0>
 8008852:	4623      	mov	r3, r4
 8008854:	6864      	ldr	r4, [r4, #4]
 8008856:	e7ac      	b.n	80087b2 <_malloc_r+0x36>
 8008858:	4634      	mov	r4, r6
 800885a:	6876      	ldr	r6, [r6, #4]
 800885c:	e7b4      	b.n	80087c8 <_malloc_r+0x4c>
 800885e:	4613      	mov	r3, r2
 8008860:	e7cc      	b.n	80087fc <_malloc_r+0x80>
 8008862:	230c      	movs	r3, #12
 8008864:	603b      	str	r3, [r7, #0]
 8008866:	4638      	mov	r0, r7
 8008868:	f000 f80e 	bl	8008888 <__malloc_unlock>
 800886c:	e797      	b.n	800879e <_malloc_r+0x22>
 800886e:	6025      	str	r5, [r4, #0]
 8008870:	e7dc      	b.n	800882c <_malloc_r+0xb0>
 8008872:	605b      	str	r3, [r3, #4]
 8008874:	deff      	udf	#255	; 0xff
 8008876:	bf00      	nop
 8008878:	200005e8 	.word	0x200005e8

0800887c <__malloc_lock>:
 800887c:	4801      	ldr	r0, [pc, #4]	; (8008884 <__malloc_lock+0x8>)
 800887e:	f7ff b88c 	b.w	800799a <__retarget_lock_acquire_recursive>
 8008882:	bf00      	nop
 8008884:	200005e4 	.word	0x200005e4

08008888 <__malloc_unlock>:
 8008888:	4801      	ldr	r0, [pc, #4]	; (8008890 <__malloc_unlock+0x8>)
 800888a:	f7ff b887 	b.w	800799c <__retarget_lock_release_recursive>
 800888e:	bf00      	nop
 8008890:	200005e4 	.word	0x200005e4

08008894 <_Balloc>:
 8008894:	b570      	push	{r4, r5, r6, lr}
 8008896:	69c6      	ldr	r6, [r0, #28]
 8008898:	4604      	mov	r4, r0
 800889a:	460d      	mov	r5, r1
 800889c:	b976      	cbnz	r6, 80088bc <_Balloc+0x28>
 800889e:	2010      	movs	r0, #16
 80088a0:	f7ff ff44 	bl	800872c <malloc>
 80088a4:	4602      	mov	r2, r0
 80088a6:	61e0      	str	r0, [r4, #28]
 80088a8:	b920      	cbnz	r0, 80088b4 <_Balloc+0x20>
 80088aa:	4b18      	ldr	r3, [pc, #96]	; (800890c <_Balloc+0x78>)
 80088ac:	4818      	ldr	r0, [pc, #96]	; (8008910 <_Balloc+0x7c>)
 80088ae:	216b      	movs	r1, #107	; 0x6b
 80088b0:	f000 fdaa 	bl	8009408 <__assert_func>
 80088b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088b8:	6006      	str	r6, [r0, #0]
 80088ba:	60c6      	str	r6, [r0, #12]
 80088bc:	69e6      	ldr	r6, [r4, #28]
 80088be:	68f3      	ldr	r3, [r6, #12]
 80088c0:	b183      	cbz	r3, 80088e4 <_Balloc+0x50>
 80088c2:	69e3      	ldr	r3, [r4, #28]
 80088c4:	68db      	ldr	r3, [r3, #12]
 80088c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80088ca:	b9b8      	cbnz	r0, 80088fc <_Balloc+0x68>
 80088cc:	2101      	movs	r1, #1
 80088ce:	fa01 f605 	lsl.w	r6, r1, r5
 80088d2:	1d72      	adds	r2, r6, #5
 80088d4:	0092      	lsls	r2, r2, #2
 80088d6:	4620      	mov	r0, r4
 80088d8:	f000 fdb4 	bl	8009444 <_calloc_r>
 80088dc:	b160      	cbz	r0, 80088f8 <_Balloc+0x64>
 80088de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80088e2:	e00e      	b.n	8008902 <_Balloc+0x6e>
 80088e4:	2221      	movs	r2, #33	; 0x21
 80088e6:	2104      	movs	r1, #4
 80088e8:	4620      	mov	r0, r4
 80088ea:	f000 fdab 	bl	8009444 <_calloc_r>
 80088ee:	69e3      	ldr	r3, [r4, #28]
 80088f0:	60f0      	str	r0, [r6, #12]
 80088f2:	68db      	ldr	r3, [r3, #12]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d1e4      	bne.n	80088c2 <_Balloc+0x2e>
 80088f8:	2000      	movs	r0, #0
 80088fa:	bd70      	pop	{r4, r5, r6, pc}
 80088fc:	6802      	ldr	r2, [r0, #0]
 80088fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008902:	2300      	movs	r3, #0
 8008904:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008908:	e7f7      	b.n	80088fa <_Balloc+0x66>
 800890a:	bf00      	nop
 800890c:	0800a0ae 	.word	0x0800a0ae
 8008910:	0800a12e 	.word	0x0800a12e

08008914 <_Bfree>:
 8008914:	b570      	push	{r4, r5, r6, lr}
 8008916:	69c6      	ldr	r6, [r0, #28]
 8008918:	4605      	mov	r5, r0
 800891a:	460c      	mov	r4, r1
 800891c:	b976      	cbnz	r6, 800893c <_Bfree+0x28>
 800891e:	2010      	movs	r0, #16
 8008920:	f7ff ff04 	bl	800872c <malloc>
 8008924:	4602      	mov	r2, r0
 8008926:	61e8      	str	r0, [r5, #28]
 8008928:	b920      	cbnz	r0, 8008934 <_Bfree+0x20>
 800892a:	4b09      	ldr	r3, [pc, #36]	; (8008950 <_Bfree+0x3c>)
 800892c:	4809      	ldr	r0, [pc, #36]	; (8008954 <_Bfree+0x40>)
 800892e:	218f      	movs	r1, #143	; 0x8f
 8008930:	f000 fd6a 	bl	8009408 <__assert_func>
 8008934:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008938:	6006      	str	r6, [r0, #0]
 800893a:	60c6      	str	r6, [r0, #12]
 800893c:	b13c      	cbz	r4, 800894e <_Bfree+0x3a>
 800893e:	69eb      	ldr	r3, [r5, #28]
 8008940:	6862      	ldr	r2, [r4, #4]
 8008942:	68db      	ldr	r3, [r3, #12]
 8008944:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008948:	6021      	str	r1, [r4, #0]
 800894a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800894e:	bd70      	pop	{r4, r5, r6, pc}
 8008950:	0800a0ae 	.word	0x0800a0ae
 8008954:	0800a12e 	.word	0x0800a12e

08008958 <__multadd>:
 8008958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800895c:	690d      	ldr	r5, [r1, #16]
 800895e:	4607      	mov	r7, r0
 8008960:	460c      	mov	r4, r1
 8008962:	461e      	mov	r6, r3
 8008964:	f101 0c14 	add.w	ip, r1, #20
 8008968:	2000      	movs	r0, #0
 800896a:	f8dc 3000 	ldr.w	r3, [ip]
 800896e:	b299      	uxth	r1, r3
 8008970:	fb02 6101 	mla	r1, r2, r1, r6
 8008974:	0c1e      	lsrs	r6, r3, #16
 8008976:	0c0b      	lsrs	r3, r1, #16
 8008978:	fb02 3306 	mla	r3, r2, r6, r3
 800897c:	b289      	uxth	r1, r1
 800897e:	3001      	adds	r0, #1
 8008980:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008984:	4285      	cmp	r5, r0
 8008986:	f84c 1b04 	str.w	r1, [ip], #4
 800898a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800898e:	dcec      	bgt.n	800896a <__multadd+0x12>
 8008990:	b30e      	cbz	r6, 80089d6 <__multadd+0x7e>
 8008992:	68a3      	ldr	r3, [r4, #8]
 8008994:	42ab      	cmp	r3, r5
 8008996:	dc19      	bgt.n	80089cc <__multadd+0x74>
 8008998:	6861      	ldr	r1, [r4, #4]
 800899a:	4638      	mov	r0, r7
 800899c:	3101      	adds	r1, #1
 800899e:	f7ff ff79 	bl	8008894 <_Balloc>
 80089a2:	4680      	mov	r8, r0
 80089a4:	b928      	cbnz	r0, 80089b2 <__multadd+0x5a>
 80089a6:	4602      	mov	r2, r0
 80089a8:	4b0c      	ldr	r3, [pc, #48]	; (80089dc <__multadd+0x84>)
 80089aa:	480d      	ldr	r0, [pc, #52]	; (80089e0 <__multadd+0x88>)
 80089ac:	21ba      	movs	r1, #186	; 0xba
 80089ae:	f000 fd2b 	bl	8009408 <__assert_func>
 80089b2:	6922      	ldr	r2, [r4, #16]
 80089b4:	3202      	adds	r2, #2
 80089b6:	f104 010c 	add.w	r1, r4, #12
 80089ba:	0092      	lsls	r2, r2, #2
 80089bc:	300c      	adds	r0, #12
 80089be:	f000 fd15 	bl	80093ec <memcpy>
 80089c2:	4621      	mov	r1, r4
 80089c4:	4638      	mov	r0, r7
 80089c6:	f7ff ffa5 	bl	8008914 <_Bfree>
 80089ca:	4644      	mov	r4, r8
 80089cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80089d0:	3501      	adds	r5, #1
 80089d2:	615e      	str	r6, [r3, #20]
 80089d4:	6125      	str	r5, [r4, #16]
 80089d6:	4620      	mov	r0, r4
 80089d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089dc:	0800a11d 	.word	0x0800a11d
 80089e0:	0800a12e 	.word	0x0800a12e

080089e4 <__hi0bits>:
 80089e4:	0c03      	lsrs	r3, r0, #16
 80089e6:	041b      	lsls	r3, r3, #16
 80089e8:	b9d3      	cbnz	r3, 8008a20 <__hi0bits+0x3c>
 80089ea:	0400      	lsls	r0, r0, #16
 80089ec:	2310      	movs	r3, #16
 80089ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80089f2:	bf04      	itt	eq
 80089f4:	0200      	lsleq	r0, r0, #8
 80089f6:	3308      	addeq	r3, #8
 80089f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80089fc:	bf04      	itt	eq
 80089fe:	0100      	lsleq	r0, r0, #4
 8008a00:	3304      	addeq	r3, #4
 8008a02:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008a06:	bf04      	itt	eq
 8008a08:	0080      	lsleq	r0, r0, #2
 8008a0a:	3302      	addeq	r3, #2
 8008a0c:	2800      	cmp	r0, #0
 8008a0e:	db05      	blt.n	8008a1c <__hi0bits+0x38>
 8008a10:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008a14:	f103 0301 	add.w	r3, r3, #1
 8008a18:	bf08      	it	eq
 8008a1a:	2320      	moveq	r3, #32
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	4770      	bx	lr
 8008a20:	2300      	movs	r3, #0
 8008a22:	e7e4      	b.n	80089ee <__hi0bits+0xa>

08008a24 <__lo0bits>:
 8008a24:	6803      	ldr	r3, [r0, #0]
 8008a26:	f013 0207 	ands.w	r2, r3, #7
 8008a2a:	d00c      	beq.n	8008a46 <__lo0bits+0x22>
 8008a2c:	07d9      	lsls	r1, r3, #31
 8008a2e:	d422      	bmi.n	8008a76 <__lo0bits+0x52>
 8008a30:	079a      	lsls	r2, r3, #30
 8008a32:	bf49      	itett	mi
 8008a34:	085b      	lsrmi	r3, r3, #1
 8008a36:	089b      	lsrpl	r3, r3, #2
 8008a38:	6003      	strmi	r3, [r0, #0]
 8008a3a:	2201      	movmi	r2, #1
 8008a3c:	bf5c      	itt	pl
 8008a3e:	6003      	strpl	r3, [r0, #0]
 8008a40:	2202      	movpl	r2, #2
 8008a42:	4610      	mov	r0, r2
 8008a44:	4770      	bx	lr
 8008a46:	b299      	uxth	r1, r3
 8008a48:	b909      	cbnz	r1, 8008a4e <__lo0bits+0x2a>
 8008a4a:	0c1b      	lsrs	r3, r3, #16
 8008a4c:	2210      	movs	r2, #16
 8008a4e:	b2d9      	uxtb	r1, r3
 8008a50:	b909      	cbnz	r1, 8008a56 <__lo0bits+0x32>
 8008a52:	3208      	adds	r2, #8
 8008a54:	0a1b      	lsrs	r3, r3, #8
 8008a56:	0719      	lsls	r1, r3, #28
 8008a58:	bf04      	itt	eq
 8008a5a:	091b      	lsreq	r3, r3, #4
 8008a5c:	3204      	addeq	r2, #4
 8008a5e:	0799      	lsls	r1, r3, #30
 8008a60:	bf04      	itt	eq
 8008a62:	089b      	lsreq	r3, r3, #2
 8008a64:	3202      	addeq	r2, #2
 8008a66:	07d9      	lsls	r1, r3, #31
 8008a68:	d403      	bmi.n	8008a72 <__lo0bits+0x4e>
 8008a6a:	085b      	lsrs	r3, r3, #1
 8008a6c:	f102 0201 	add.w	r2, r2, #1
 8008a70:	d003      	beq.n	8008a7a <__lo0bits+0x56>
 8008a72:	6003      	str	r3, [r0, #0]
 8008a74:	e7e5      	b.n	8008a42 <__lo0bits+0x1e>
 8008a76:	2200      	movs	r2, #0
 8008a78:	e7e3      	b.n	8008a42 <__lo0bits+0x1e>
 8008a7a:	2220      	movs	r2, #32
 8008a7c:	e7e1      	b.n	8008a42 <__lo0bits+0x1e>
	...

08008a80 <__i2b>:
 8008a80:	b510      	push	{r4, lr}
 8008a82:	460c      	mov	r4, r1
 8008a84:	2101      	movs	r1, #1
 8008a86:	f7ff ff05 	bl	8008894 <_Balloc>
 8008a8a:	4602      	mov	r2, r0
 8008a8c:	b928      	cbnz	r0, 8008a9a <__i2b+0x1a>
 8008a8e:	4b05      	ldr	r3, [pc, #20]	; (8008aa4 <__i2b+0x24>)
 8008a90:	4805      	ldr	r0, [pc, #20]	; (8008aa8 <__i2b+0x28>)
 8008a92:	f240 1145 	movw	r1, #325	; 0x145
 8008a96:	f000 fcb7 	bl	8009408 <__assert_func>
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	6144      	str	r4, [r0, #20]
 8008a9e:	6103      	str	r3, [r0, #16]
 8008aa0:	bd10      	pop	{r4, pc}
 8008aa2:	bf00      	nop
 8008aa4:	0800a11d 	.word	0x0800a11d
 8008aa8:	0800a12e 	.word	0x0800a12e

08008aac <__multiply>:
 8008aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ab0:	4691      	mov	r9, r2
 8008ab2:	690a      	ldr	r2, [r1, #16]
 8008ab4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	bfb8      	it	lt
 8008abc:	460b      	movlt	r3, r1
 8008abe:	460c      	mov	r4, r1
 8008ac0:	bfbc      	itt	lt
 8008ac2:	464c      	movlt	r4, r9
 8008ac4:	4699      	movlt	r9, r3
 8008ac6:	6927      	ldr	r7, [r4, #16]
 8008ac8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008acc:	68a3      	ldr	r3, [r4, #8]
 8008ace:	6861      	ldr	r1, [r4, #4]
 8008ad0:	eb07 060a 	add.w	r6, r7, sl
 8008ad4:	42b3      	cmp	r3, r6
 8008ad6:	b085      	sub	sp, #20
 8008ad8:	bfb8      	it	lt
 8008ada:	3101      	addlt	r1, #1
 8008adc:	f7ff feda 	bl	8008894 <_Balloc>
 8008ae0:	b930      	cbnz	r0, 8008af0 <__multiply+0x44>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	4b44      	ldr	r3, [pc, #272]	; (8008bf8 <__multiply+0x14c>)
 8008ae6:	4845      	ldr	r0, [pc, #276]	; (8008bfc <__multiply+0x150>)
 8008ae8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008aec:	f000 fc8c 	bl	8009408 <__assert_func>
 8008af0:	f100 0514 	add.w	r5, r0, #20
 8008af4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008af8:	462b      	mov	r3, r5
 8008afa:	2200      	movs	r2, #0
 8008afc:	4543      	cmp	r3, r8
 8008afe:	d321      	bcc.n	8008b44 <__multiply+0x98>
 8008b00:	f104 0314 	add.w	r3, r4, #20
 8008b04:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008b08:	f109 0314 	add.w	r3, r9, #20
 8008b0c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008b10:	9202      	str	r2, [sp, #8]
 8008b12:	1b3a      	subs	r2, r7, r4
 8008b14:	3a15      	subs	r2, #21
 8008b16:	f022 0203 	bic.w	r2, r2, #3
 8008b1a:	3204      	adds	r2, #4
 8008b1c:	f104 0115 	add.w	r1, r4, #21
 8008b20:	428f      	cmp	r7, r1
 8008b22:	bf38      	it	cc
 8008b24:	2204      	movcc	r2, #4
 8008b26:	9201      	str	r2, [sp, #4]
 8008b28:	9a02      	ldr	r2, [sp, #8]
 8008b2a:	9303      	str	r3, [sp, #12]
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d80c      	bhi.n	8008b4a <__multiply+0x9e>
 8008b30:	2e00      	cmp	r6, #0
 8008b32:	dd03      	ble.n	8008b3c <__multiply+0x90>
 8008b34:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d05b      	beq.n	8008bf4 <__multiply+0x148>
 8008b3c:	6106      	str	r6, [r0, #16]
 8008b3e:	b005      	add	sp, #20
 8008b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b44:	f843 2b04 	str.w	r2, [r3], #4
 8008b48:	e7d8      	b.n	8008afc <__multiply+0x50>
 8008b4a:	f8b3 a000 	ldrh.w	sl, [r3]
 8008b4e:	f1ba 0f00 	cmp.w	sl, #0
 8008b52:	d024      	beq.n	8008b9e <__multiply+0xf2>
 8008b54:	f104 0e14 	add.w	lr, r4, #20
 8008b58:	46a9      	mov	r9, r5
 8008b5a:	f04f 0c00 	mov.w	ip, #0
 8008b5e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008b62:	f8d9 1000 	ldr.w	r1, [r9]
 8008b66:	fa1f fb82 	uxth.w	fp, r2
 8008b6a:	b289      	uxth	r1, r1
 8008b6c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008b70:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008b74:	f8d9 2000 	ldr.w	r2, [r9]
 8008b78:	4461      	add	r1, ip
 8008b7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008b7e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008b82:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008b86:	b289      	uxth	r1, r1
 8008b88:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008b8c:	4577      	cmp	r7, lr
 8008b8e:	f849 1b04 	str.w	r1, [r9], #4
 8008b92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008b96:	d8e2      	bhi.n	8008b5e <__multiply+0xb2>
 8008b98:	9a01      	ldr	r2, [sp, #4]
 8008b9a:	f845 c002 	str.w	ip, [r5, r2]
 8008b9e:	9a03      	ldr	r2, [sp, #12]
 8008ba0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008ba4:	3304      	adds	r3, #4
 8008ba6:	f1b9 0f00 	cmp.w	r9, #0
 8008baa:	d021      	beq.n	8008bf0 <__multiply+0x144>
 8008bac:	6829      	ldr	r1, [r5, #0]
 8008bae:	f104 0c14 	add.w	ip, r4, #20
 8008bb2:	46ae      	mov	lr, r5
 8008bb4:	f04f 0a00 	mov.w	sl, #0
 8008bb8:	f8bc b000 	ldrh.w	fp, [ip]
 8008bbc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008bc0:	fb09 220b 	mla	r2, r9, fp, r2
 8008bc4:	4452      	add	r2, sl
 8008bc6:	b289      	uxth	r1, r1
 8008bc8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008bcc:	f84e 1b04 	str.w	r1, [lr], #4
 8008bd0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008bd4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008bd8:	f8be 1000 	ldrh.w	r1, [lr]
 8008bdc:	fb09 110a 	mla	r1, r9, sl, r1
 8008be0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008be4:	4567      	cmp	r7, ip
 8008be6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008bea:	d8e5      	bhi.n	8008bb8 <__multiply+0x10c>
 8008bec:	9a01      	ldr	r2, [sp, #4]
 8008bee:	50a9      	str	r1, [r5, r2]
 8008bf0:	3504      	adds	r5, #4
 8008bf2:	e799      	b.n	8008b28 <__multiply+0x7c>
 8008bf4:	3e01      	subs	r6, #1
 8008bf6:	e79b      	b.n	8008b30 <__multiply+0x84>
 8008bf8:	0800a11d 	.word	0x0800a11d
 8008bfc:	0800a12e 	.word	0x0800a12e

08008c00 <__pow5mult>:
 8008c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c04:	4615      	mov	r5, r2
 8008c06:	f012 0203 	ands.w	r2, r2, #3
 8008c0a:	4606      	mov	r6, r0
 8008c0c:	460f      	mov	r7, r1
 8008c0e:	d007      	beq.n	8008c20 <__pow5mult+0x20>
 8008c10:	4c25      	ldr	r4, [pc, #148]	; (8008ca8 <__pow5mult+0xa8>)
 8008c12:	3a01      	subs	r2, #1
 8008c14:	2300      	movs	r3, #0
 8008c16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008c1a:	f7ff fe9d 	bl	8008958 <__multadd>
 8008c1e:	4607      	mov	r7, r0
 8008c20:	10ad      	asrs	r5, r5, #2
 8008c22:	d03d      	beq.n	8008ca0 <__pow5mult+0xa0>
 8008c24:	69f4      	ldr	r4, [r6, #28]
 8008c26:	b97c      	cbnz	r4, 8008c48 <__pow5mult+0x48>
 8008c28:	2010      	movs	r0, #16
 8008c2a:	f7ff fd7f 	bl	800872c <malloc>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	61f0      	str	r0, [r6, #28]
 8008c32:	b928      	cbnz	r0, 8008c40 <__pow5mult+0x40>
 8008c34:	4b1d      	ldr	r3, [pc, #116]	; (8008cac <__pow5mult+0xac>)
 8008c36:	481e      	ldr	r0, [pc, #120]	; (8008cb0 <__pow5mult+0xb0>)
 8008c38:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008c3c:	f000 fbe4 	bl	8009408 <__assert_func>
 8008c40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c44:	6004      	str	r4, [r0, #0]
 8008c46:	60c4      	str	r4, [r0, #12]
 8008c48:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008c4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008c50:	b94c      	cbnz	r4, 8008c66 <__pow5mult+0x66>
 8008c52:	f240 2171 	movw	r1, #625	; 0x271
 8008c56:	4630      	mov	r0, r6
 8008c58:	f7ff ff12 	bl	8008a80 <__i2b>
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008c62:	4604      	mov	r4, r0
 8008c64:	6003      	str	r3, [r0, #0]
 8008c66:	f04f 0900 	mov.w	r9, #0
 8008c6a:	07eb      	lsls	r3, r5, #31
 8008c6c:	d50a      	bpl.n	8008c84 <__pow5mult+0x84>
 8008c6e:	4639      	mov	r1, r7
 8008c70:	4622      	mov	r2, r4
 8008c72:	4630      	mov	r0, r6
 8008c74:	f7ff ff1a 	bl	8008aac <__multiply>
 8008c78:	4639      	mov	r1, r7
 8008c7a:	4680      	mov	r8, r0
 8008c7c:	4630      	mov	r0, r6
 8008c7e:	f7ff fe49 	bl	8008914 <_Bfree>
 8008c82:	4647      	mov	r7, r8
 8008c84:	106d      	asrs	r5, r5, #1
 8008c86:	d00b      	beq.n	8008ca0 <__pow5mult+0xa0>
 8008c88:	6820      	ldr	r0, [r4, #0]
 8008c8a:	b938      	cbnz	r0, 8008c9c <__pow5mult+0x9c>
 8008c8c:	4622      	mov	r2, r4
 8008c8e:	4621      	mov	r1, r4
 8008c90:	4630      	mov	r0, r6
 8008c92:	f7ff ff0b 	bl	8008aac <__multiply>
 8008c96:	6020      	str	r0, [r4, #0]
 8008c98:	f8c0 9000 	str.w	r9, [r0]
 8008c9c:	4604      	mov	r4, r0
 8008c9e:	e7e4      	b.n	8008c6a <__pow5mult+0x6a>
 8008ca0:	4638      	mov	r0, r7
 8008ca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ca6:	bf00      	nop
 8008ca8:	0800a278 	.word	0x0800a278
 8008cac:	0800a0ae 	.word	0x0800a0ae
 8008cb0:	0800a12e 	.word	0x0800a12e

08008cb4 <__lshift>:
 8008cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cb8:	460c      	mov	r4, r1
 8008cba:	6849      	ldr	r1, [r1, #4]
 8008cbc:	6923      	ldr	r3, [r4, #16]
 8008cbe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008cc2:	68a3      	ldr	r3, [r4, #8]
 8008cc4:	4607      	mov	r7, r0
 8008cc6:	4691      	mov	r9, r2
 8008cc8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008ccc:	f108 0601 	add.w	r6, r8, #1
 8008cd0:	42b3      	cmp	r3, r6
 8008cd2:	db0b      	blt.n	8008cec <__lshift+0x38>
 8008cd4:	4638      	mov	r0, r7
 8008cd6:	f7ff fddd 	bl	8008894 <_Balloc>
 8008cda:	4605      	mov	r5, r0
 8008cdc:	b948      	cbnz	r0, 8008cf2 <__lshift+0x3e>
 8008cde:	4602      	mov	r2, r0
 8008ce0:	4b28      	ldr	r3, [pc, #160]	; (8008d84 <__lshift+0xd0>)
 8008ce2:	4829      	ldr	r0, [pc, #164]	; (8008d88 <__lshift+0xd4>)
 8008ce4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008ce8:	f000 fb8e 	bl	8009408 <__assert_func>
 8008cec:	3101      	adds	r1, #1
 8008cee:	005b      	lsls	r3, r3, #1
 8008cf0:	e7ee      	b.n	8008cd0 <__lshift+0x1c>
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	f100 0114 	add.w	r1, r0, #20
 8008cf8:	f100 0210 	add.w	r2, r0, #16
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	4553      	cmp	r3, sl
 8008d00:	db33      	blt.n	8008d6a <__lshift+0xb6>
 8008d02:	6920      	ldr	r0, [r4, #16]
 8008d04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008d08:	f104 0314 	add.w	r3, r4, #20
 8008d0c:	f019 091f 	ands.w	r9, r9, #31
 8008d10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008d14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008d18:	d02b      	beq.n	8008d72 <__lshift+0xbe>
 8008d1a:	f1c9 0e20 	rsb	lr, r9, #32
 8008d1e:	468a      	mov	sl, r1
 8008d20:	2200      	movs	r2, #0
 8008d22:	6818      	ldr	r0, [r3, #0]
 8008d24:	fa00 f009 	lsl.w	r0, r0, r9
 8008d28:	4310      	orrs	r0, r2
 8008d2a:	f84a 0b04 	str.w	r0, [sl], #4
 8008d2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d32:	459c      	cmp	ip, r3
 8008d34:	fa22 f20e 	lsr.w	r2, r2, lr
 8008d38:	d8f3      	bhi.n	8008d22 <__lshift+0x6e>
 8008d3a:	ebac 0304 	sub.w	r3, ip, r4
 8008d3e:	3b15      	subs	r3, #21
 8008d40:	f023 0303 	bic.w	r3, r3, #3
 8008d44:	3304      	adds	r3, #4
 8008d46:	f104 0015 	add.w	r0, r4, #21
 8008d4a:	4584      	cmp	ip, r0
 8008d4c:	bf38      	it	cc
 8008d4e:	2304      	movcc	r3, #4
 8008d50:	50ca      	str	r2, [r1, r3]
 8008d52:	b10a      	cbz	r2, 8008d58 <__lshift+0xa4>
 8008d54:	f108 0602 	add.w	r6, r8, #2
 8008d58:	3e01      	subs	r6, #1
 8008d5a:	4638      	mov	r0, r7
 8008d5c:	612e      	str	r6, [r5, #16]
 8008d5e:	4621      	mov	r1, r4
 8008d60:	f7ff fdd8 	bl	8008914 <_Bfree>
 8008d64:	4628      	mov	r0, r5
 8008d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d6a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008d6e:	3301      	adds	r3, #1
 8008d70:	e7c5      	b.n	8008cfe <__lshift+0x4a>
 8008d72:	3904      	subs	r1, #4
 8008d74:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d78:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d7c:	459c      	cmp	ip, r3
 8008d7e:	d8f9      	bhi.n	8008d74 <__lshift+0xc0>
 8008d80:	e7ea      	b.n	8008d58 <__lshift+0xa4>
 8008d82:	bf00      	nop
 8008d84:	0800a11d 	.word	0x0800a11d
 8008d88:	0800a12e 	.word	0x0800a12e

08008d8c <__mcmp>:
 8008d8c:	b530      	push	{r4, r5, lr}
 8008d8e:	6902      	ldr	r2, [r0, #16]
 8008d90:	690c      	ldr	r4, [r1, #16]
 8008d92:	1b12      	subs	r2, r2, r4
 8008d94:	d10e      	bne.n	8008db4 <__mcmp+0x28>
 8008d96:	f100 0314 	add.w	r3, r0, #20
 8008d9a:	3114      	adds	r1, #20
 8008d9c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008da0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008da4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008da8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008dac:	42a5      	cmp	r5, r4
 8008dae:	d003      	beq.n	8008db8 <__mcmp+0x2c>
 8008db0:	d305      	bcc.n	8008dbe <__mcmp+0x32>
 8008db2:	2201      	movs	r2, #1
 8008db4:	4610      	mov	r0, r2
 8008db6:	bd30      	pop	{r4, r5, pc}
 8008db8:	4283      	cmp	r3, r0
 8008dba:	d3f3      	bcc.n	8008da4 <__mcmp+0x18>
 8008dbc:	e7fa      	b.n	8008db4 <__mcmp+0x28>
 8008dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8008dc2:	e7f7      	b.n	8008db4 <__mcmp+0x28>

08008dc4 <__mdiff>:
 8008dc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dc8:	460c      	mov	r4, r1
 8008dca:	4606      	mov	r6, r0
 8008dcc:	4611      	mov	r1, r2
 8008dce:	4620      	mov	r0, r4
 8008dd0:	4690      	mov	r8, r2
 8008dd2:	f7ff ffdb 	bl	8008d8c <__mcmp>
 8008dd6:	1e05      	subs	r5, r0, #0
 8008dd8:	d110      	bne.n	8008dfc <__mdiff+0x38>
 8008dda:	4629      	mov	r1, r5
 8008ddc:	4630      	mov	r0, r6
 8008dde:	f7ff fd59 	bl	8008894 <_Balloc>
 8008de2:	b930      	cbnz	r0, 8008df2 <__mdiff+0x2e>
 8008de4:	4b3a      	ldr	r3, [pc, #232]	; (8008ed0 <__mdiff+0x10c>)
 8008de6:	4602      	mov	r2, r0
 8008de8:	f240 2137 	movw	r1, #567	; 0x237
 8008dec:	4839      	ldr	r0, [pc, #228]	; (8008ed4 <__mdiff+0x110>)
 8008dee:	f000 fb0b 	bl	8009408 <__assert_func>
 8008df2:	2301      	movs	r3, #1
 8008df4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008df8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dfc:	bfa4      	itt	ge
 8008dfe:	4643      	movge	r3, r8
 8008e00:	46a0      	movge	r8, r4
 8008e02:	4630      	mov	r0, r6
 8008e04:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008e08:	bfa6      	itte	ge
 8008e0a:	461c      	movge	r4, r3
 8008e0c:	2500      	movge	r5, #0
 8008e0e:	2501      	movlt	r5, #1
 8008e10:	f7ff fd40 	bl	8008894 <_Balloc>
 8008e14:	b920      	cbnz	r0, 8008e20 <__mdiff+0x5c>
 8008e16:	4b2e      	ldr	r3, [pc, #184]	; (8008ed0 <__mdiff+0x10c>)
 8008e18:	4602      	mov	r2, r0
 8008e1a:	f240 2145 	movw	r1, #581	; 0x245
 8008e1e:	e7e5      	b.n	8008dec <__mdiff+0x28>
 8008e20:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008e24:	6926      	ldr	r6, [r4, #16]
 8008e26:	60c5      	str	r5, [r0, #12]
 8008e28:	f104 0914 	add.w	r9, r4, #20
 8008e2c:	f108 0514 	add.w	r5, r8, #20
 8008e30:	f100 0e14 	add.w	lr, r0, #20
 8008e34:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008e38:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008e3c:	f108 0210 	add.w	r2, r8, #16
 8008e40:	46f2      	mov	sl, lr
 8008e42:	2100      	movs	r1, #0
 8008e44:	f859 3b04 	ldr.w	r3, [r9], #4
 8008e48:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008e4c:	fa11 f88b 	uxtah	r8, r1, fp
 8008e50:	b299      	uxth	r1, r3
 8008e52:	0c1b      	lsrs	r3, r3, #16
 8008e54:	eba8 0801 	sub.w	r8, r8, r1
 8008e58:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008e5c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008e60:	fa1f f888 	uxth.w	r8, r8
 8008e64:	1419      	asrs	r1, r3, #16
 8008e66:	454e      	cmp	r6, r9
 8008e68:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008e6c:	f84a 3b04 	str.w	r3, [sl], #4
 8008e70:	d8e8      	bhi.n	8008e44 <__mdiff+0x80>
 8008e72:	1b33      	subs	r3, r6, r4
 8008e74:	3b15      	subs	r3, #21
 8008e76:	f023 0303 	bic.w	r3, r3, #3
 8008e7a:	3304      	adds	r3, #4
 8008e7c:	3415      	adds	r4, #21
 8008e7e:	42a6      	cmp	r6, r4
 8008e80:	bf38      	it	cc
 8008e82:	2304      	movcc	r3, #4
 8008e84:	441d      	add	r5, r3
 8008e86:	4473      	add	r3, lr
 8008e88:	469e      	mov	lr, r3
 8008e8a:	462e      	mov	r6, r5
 8008e8c:	4566      	cmp	r6, ip
 8008e8e:	d30e      	bcc.n	8008eae <__mdiff+0xea>
 8008e90:	f10c 0203 	add.w	r2, ip, #3
 8008e94:	1b52      	subs	r2, r2, r5
 8008e96:	f022 0203 	bic.w	r2, r2, #3
 8008e9a:	3d03      	subs	r5, #3
 8008e9c:	45ac      	cmp	ip, r5
 8008e9e:	bf38      	it	cc
 8008ea0:	2200      	movcc	r2, #0
 8008ea2:	4413      	add	r3, r2
 8008ea4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008ea8:	b17a      	cbz	r2, 8008eca <__mdiff+0x106>
 8008eaa:	6107      	str	r7, [r0, #16]
 8008eac:	e7a4      	b.n	8008df8 <__mdiff+0x34>
 8008eae:	f856 8b04 	ldr.w	r8, [r6], #4
 8008eb2:	fa11 f288 	uxtah	r2, r1, r8
 8008eb6:	1414      	asrs	r4, r2, #16
 8008eb8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008ebc:	b292      	uxth	r2, r2
 8008ebe:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008ec2:	f84e 2b04 	str.w	r2, [lr], #4
 8008ec6:	1421      	asrs	r1, r4, #16
 8008ec8:	e7e0      	b.n	8008e8c <__mdiff+0xc8>
 8008eca:	3f01      	subs	r7, #1
 8008ecc:	e7ea      	b.n	8008ea4 <__mdiff+0xe0>
 8008ece:	bf00      	nop
 8008ed0:	0800a11d 	.word	0x0800a11d
 8008ed4:	0800a12e 	.word	0x0800a12e

08008ed8 <__d2b>:
 8008ed8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008edc:	460f      	mov	r7, r1
 8008ede:	2101      	movs	r1, #1
 8008ee0:	ec59 8b10 	vmov	r8, r9, d0
 8008ee4:	4616      	mov	r6, r2
 8008ee6:	f7ff fcd5 	bl	8008894 <_Balloc>
 8008eea:	4604      	mov	r4, r0
 8008eec:	b930      	cbnz	r0, 8008efc <__d2b+0x24>
 8008eee:	4602      	mov	r2, r0
 8008ef0:	4b24      	ldr	r3, [pc, #144]	; (8008f84 <__d2b+0xac>)
 8008ef2:	4825      	ldr	r0, [pc, #148]	; (8008f88 <__d2b+0xb0>)
 8008ef4:	f240 310f 	movw	r1, #783	; 0x30f
 8008ef8:	f000 fa86 	bl	8009408 <__assert_func>
 8008efc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008f00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008f04:	bb2d      	cbnz	r5, 8008f52 <__d2b+0x7a>
 8008f06:	9301      	str	r3, [sp, #4]
 8008f08:	f1b8 0300 	subs.w	r3, r8, #0
 8008f0c:	d026      	beq.n	8008f5c <__d2b+0x84>
 8008f0e:	4668      	mov	r0, sp
 8008f10:	9300      	str	r3, [sp, #0]
 8008f12:	f7ff fd87 	bl	8008a24 <__lo0bits>
 8008f16:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008f1a:	b1e8      	cbz	r0, 8008f58 <__d2b+0x80>
 8008f1c:	f1c0 0320 	rsb	r3, r0, #32
 8008f20:	fa02 f303 	lsl.w	r3, r2, r3
 8008f24:	430b      	orrs	r3, r1
 8008f26:	40c2      	lsrs	r2, r0
 8008f28:	6163      	str	r3, [r4, #20]
 8008f2a:	9201      	str	r2, [sp, #4]
 8008f2c:	9b01      	ldr	r3, [sp, #4]
 8008f2e:	61a3      	str	r3, [r4, #24]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	bf14      	ite	ne
 8008f34:	2202      	movne	r2, #2
 8008f36:	2201      	moveq	r2, #1
 8008f38:	6122      	str	r2, [r4, #16]
 8008f3a:	b1bd      	cbz	r5, 8008f6c <__d2b+0x94>
 8008f3c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008f40:	4405      	add	r5, r0
 8008f42:	603d      	str	r5, [r7, #0]
 8008f44:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008f48:	6030      	str	r0, [r6, #0]
 8008f4a:	4620      	mov	r0, r4
 8008f4c:	b003      	add	sp, #12
 8008f4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f56:	e7d6      	b.n	8008f06 <__d2b+0x2e>
 8008f58:	6161      	str	r1, [r4, #20]
 8008f5a:	e7e7      	b.n	8008f2c <__d2b+0x54>
 8008f5c:	a801      	add	r0, sp, #4
 8008f5e:	f7ff fd61 	bl	8008a24 <__lo0bits>
 8008f62:	9b01      	ldr	r3, [sp, #4]
 8008f64:	6163      	str	r3, [r4, #20]
 8008f66:	3020      	adds	r0, #32
 8008f68:	2201      	movs	r2, #1
 8008f6a:	e7e5      	b.n	8008f38 <__d2b+0x60>
 8008f6c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008f70:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008f74:	6038      	str	r0, [r7, #0]
 8008f76:	6918      	ldr	r0, [r3, #16]
 8008f78:	f7ff fd34 	bl	80089e4 <__hi0bits>
 8008f7c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008f80:	e7e2      	b.n	8008f48 <__d2b+0x70>
 8008f82:	bf00      	nop
 8008f84:	0800a11d 	.word	0x0800a11d
 8008f88:	0800a12e 	.word	0x0800a12e

08008f8c <__ssputs_r>:
 8008f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f90:	688e      	ldr	r6, [r1, #8]
 8008f92:	461f      	mov	r7, r3
 8008f94:	42be      	cmp	r6, r7
 8008f96:	680b      	ldr	r3, [r1, #0]
 8008f98:	4682      	mov	sl, r0
 8008f9a:	460c      	mov	r4, r1
 8008f9c:	4690      	mov	r8, r2
 8008f9e:	d82c      	bhi.n	8008ffa <__ssputs_r+0x6e>
 8008fa0:	898a      	ldrh	r2, [r1, #12]
 8008fa2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008fa6:	d026      	beq.n	8008ff6 <__ssputs_r+0x6a>
 8008fa8:	6965      	ldr	r5, [r4, #20]
 8008faa:	6909      	ldr	r1, [r1, #16]
 8008fac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008fb0:	eba3 0901 	sub.w	r9, r3, r1
 8008fb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008fb8:	1c7b      	adds	r3, r7, #1
 8008fba:	444b      	add	r3, r9
 8008fbc:	106d      	asrs	r5, r5, #1
 8008fbe:	429d      	cmp	r5, r3
 8008fc0:	bf38      	it	cc
 8008fc2:	461d      	movcc	r5, r3
 8008fc4:	0553      	lsls	r3, r2, #21
 8008fc6:	d527      	bpl.n	8009018 <__ssputs_r+0x8c>
 8008fc8:	4629      	mov	r1, r5
 8008fca:	f7ff fbd7 	bl	800877c <_malloc_r>
 8008fce:	4606      	mov	r6, r0
 8008fd0:	b360      	cbz	r0, 800902c <__ssputs_r+0xa0>
 8008fd2:	6921      	ldr	r1, [r4, #16]
 8008fd4:	464a      	mov	r2, r9
 8008fd6:	f000 fa09 	bl	80093ec <memcpy>
 8008fda:	89a3      	ldrh	r3, [r4, #12]
 8008fdc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008fe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fe4:	81a3      	strh	r3, [r4, #12]
 8008fe6:	6126      	str	r6, [r4, #16]
 8008fe8:	6165      	str	r5, [r4, #20]
 8008fea:	444e      	add	r6, r9
 8008fec:	eba5 0509 	sub.w	r5, r5, r9
 8008ff0:	6026      	str	r6, [r4, #0]
 8008ff2:	60a5      	str	r5, [r4, #8]
 8008ff4:	463e      	mov	r6, r7
 8008ff6:	42be      	cmp	r6, r7
 8008ff8:	d900      	bls.n	8008ffc <__ssputs_r+0x70>
 8008ffa:	463e      	mov	r6, r7
 8008ffc:	6820      	ldr	r0, [r4, #0]
 8008ffe:	4632      	mov	r2, r6
 8009000:	4641      	mov	r1, r8
 8009002:	f000 f9c9 	bl	8009398 <memmove>
 8009006:	68a3      	ldr	r3, [r4, #8]
 8009008:	1b9b      	subs	r3, r3, r6
 800900a:	60a3      	str	r3, [r4, #8]
 800900c:	6823      	ldr	r3, [r4, #0]
 800900e:	4433      	add	r3, r6
 8009010:	6023      	str	r3, [r4, #0]
 8009012:	2000      	movs	r0, #0
 8009014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009018:	462a      	mov	r2, r5
 800901a:	f000 fa3b 	bl	8009494 <_realloc_r>
 800901e:	4606      	mov	r6, r0
 8009020:	2800      	cmp	r0, #0
 8009022:	d1e0      	bne.n	8008fe6 <__ssputs_r+0x5a>
 8009024:	6921      	ldr	r1, [r4, #16]
 8009026:	4650      	mov	r0, sl
 8009028:	f7ff fb34 	bl	8008694 <_free_r>
 800902c:	230c      	movs	r3, #12
 800902e:	f8ca 3000 	str.w	r3, [sl]
 8009032:	89a3      	ldrh	r3, [r4, #12]
 8009034:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009038:	81a3      	strh	r3, [r4, #12]
 800903a:	f04f 30ff 	mov.w	r0, #4294967295
 800903e:	e7e9      	b.n	8009014 <__ssputs_r+0x88>

08009040 <_svfiprintf_r>:
 8009040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009044:	4698      	mov	r8, r3
 8009046:	898b      	ldrh	r3, [r1, #12]
 8009048:	061b      	lsls	r3, r3, #24
 800904a:	b09d      	sub	sp, #116	; 0x74
 800904c:	4607      	mov	r7, r0
 800904e:	460d      	mov	r5, r1
 8009050:	4614      	mov	r4, r2
 8009052:	d50e      	bpl.n	8009072 <_svfiprintf_r+0x32>
 8009054:	690b      	ldr	r3, [r1, #16]
 8009056:	b963      	cbnz	r3, 8009072 <_svfiprintf_r+0x32>
 8009058:	2140      	movs	r1, #64	; 0x40
 800905a:	f7ff fb8f 	bl	800877c <_malloc_r>
 800905e:	6028      	str	r0, [r5, #0]
 8009060:	6128      	str	r0, [r5, #16]
 8009062:	b920      	cbnz	r0, 800906e <_svfiprintf_r+0x2e>
 8009064:	230c      	movs	r3, #12
 8009066:	603b      	str	r3, [r7, #0]
 8009068:	f04f 30ff 	mov.w	r0, #4294967295
 800906c:	e0d0      	b.n	8009210 <_svfiprintf_r+0x1d0>
 800906e:	2340      	movs	r3, #64	; 0x40
 8009070:	616b      	str	r3, [r5, #20]
 8009072:	2300      	movs	r3, #0
 8009074:	9309      	str	r3, [sp, #36]	; 0x24
 8009076:	2320      	movs	r3, #32
 8009078:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800907c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009080:	2330      	movs	r3, #48	; 0x30
 8009082:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009228 <_svfiprintf_r+0x1e8>
 8009086:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800908a:	f04f 0901 	mov.w	r9, #1
 800908e:	4623      	mov	r3, r4
 8009090:	469a      	mov	sl, r3
 8009092:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009096:	b10a      	cbz	r2, 800909c <_svfiprintf_r+0x5c>
 8009098:	2a25      	cmp	r2, #37	; 0x25
 800909a:	d1f9      	bne.n	8009090 <_svfiprintf_r+0x50>
 800909c:	ebba 0b04 	subs.w	fp, sl, r4
 80090a0:	d00b      	beq.n	80090ba <_svfiprintf_r+0x7a>
 80090a2:	465b      	mov	r3, fp
 80090a4:	4622      	mov	r2, r4
 80090a6:	4629      	mov	r1, r5
 80090a8:	4638      	mov	r0, r7
 80090aa:	f7ff ff6f 	bl	8008f8c <__ssputs_r>
 80090ae:	3001      	adds	r0, #1
 80090b0:	f000 80a9 	beq.w	8009206 <_svfiprintf_r+0x1c6>
 80090b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090b6:	445a      	add	r2, fp
 80090b8:	9209      	str	r2, [sp, #36]	; 0x24
 80090ba:	f89a 3000 	ldrb.w	r3, [sl]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	f000 80a1 	beq.w	8009206 <_svfiprintf_r+0x1c6>
 80090c4:	2300      	movs	r3, #0
 80090c6:	f04f 32ff 	mov.w	r2, #4294967295
 80090ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090ce:	f10a 0a01 	add.w	sl, sl, #1
 80090d2:	9304      	str	r3, [sp, #16]
 80090d4:	9307      	str	r3, [sp, #28]
 80090d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090da:	931a      	str	r3, [sp, #104]	; 0x68
 80090dc:	4654      	mov	r4, sl
 80090de:	2205      	movs	r2, #5
 80090e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090e4:	4850      	ldr	r0, [pc, #320]	; (8009228 <_svfiprintf_r+0x1e8>)
 80090e6:	f7f7 f873 	bl	80001d0 <memchr>
 80090ea:	9a04      	ldr	r2, [sp, #16]
 80090ec:	b9d8      	cbnz	r0, 8009126 <_svfiprintf_r+0xe6>
 80090ee:	06d0      	lsls	r0, r2, #27
 80090f0:	bf44      	itt	mi
 80090f2:	2320      	movmi	r3, #32
 80090f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090f8:	0711      	lsls	r1, r2, #28
 80090fa:	bf44      	itt	mi
 80090fc:	232b      	movmi	r3, #43	; 0x2b
 80090fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009102:	f89a 3000 	ldrb.w	r3, [sl]
 8009106:	2b2a      	cmp	r3, #42	; 0x2a
 8009108:	d015      	beq.n	8009136 <_svfiprintf_r+0xf6>
 800910a:	9a07      	ldr	r2, [sp, #28]
 800910c:	4654      	mov	r4, sl
 800910e:	2000      	movs	r0, #0
 8009110:	f04f 0c0a 	mov.w	ip, #10
 8009114:	4621      	mov	r1, r4
 8009116:	f811 3b01 	ldrb.w	r3, [r1], #1
 800911a:	3b30      	subs	r3, #48	; 0x30
 800911c:	2b09      	cmp	r3, #9
 800911e:	d94d      	bls.n	80091bc <_svfiprintf_r+0x17c>
 8009120:	b1b0      	cbz	r0, 8009150 <_svfiprintf_r+0x110>
 8009122:	9207      	str	r2, [sp, #28]
 8009124:	e014      	b.n	8009150 <_svfiprintf_r+0x110>
 8009126:	eba0 0308 	sub.w	r3, r0, r8
 800912a:	fa09 f303 	lsl.w	r3, r9, r3
 800912e:	4313      	orrs	r3, r2
 8009130:	9304      	str	r3, [sp, #16]
 8009132:	46a2      	mov	sl, r4
 8009134:	e7d2      	b.n	80090dc <_svfiprintf_r+0x9c>
 8009136:	9b03      	ldr	r3, [sp, #12]
 8009138:	1d19      	adds	r1, r3, #4
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	9103      	str	r1, [sp, #12]
 800913e:	2b00      	cmp	r3, #0
 8009140:	bfbb      	ittet	lt
 8009142:	425b      	neglt	r3, r3
 8009144:	f042 0202 	orrlt.w	r2, r2, #2
 8009148:	9307      	strge	r3, [sp, #28]
 800914a:	9307      	strlt	r3, [sp, #28]
 800914c:	bfb8      	it	lt
 800914e:	9204      	strlt	r2, [sp, #16]
 8009150:	7823      	ldrb	r3, [r4, #0]
 8009152:	2b2e      	cmp	r3, #46	; 0x2e
 8009154:	d10c      	bne.n	8009170 <_svfiprintf_r+0x130>
 8009156:	7863      	ldrb	r3, [r4, #1]
 8009158:	2b2a      	cmp	r3, #42	; 0x2a
 800915a:	d134      	bne.n	80091c6 <_svfiprintf_r+0x186>
 800915c:	9b03      	ldr	r3, [sp, #12]
 800915e:	1d1a      	adds	r2, r3, #4
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	9203      	str	r2, [sp, #12]
 8009164:	2b00      	cmp	r3, #0
 8009166:	bfb8      	it	lt
 8009168:	f04f 33ff 	movlt.w	r3, #4294967295
 800916c:	3402      	adds	r4, #2
 800916e:	9305      	str	r3, [sp, #20]
 8009170:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009238 <_svfiprintf_r+0x1f8>
 8009174:	7821      	ldrb	r1, [r4, #0]
 8009176:	2203      	movs	r2, #3
 8009178:	4650      	mov	r0, sl
 800917a:	f7f7 f829 	bl	80001d0 <memchr>
 800917e:	b138      	cbz	r0, 8009190 <_svfiprintf_r+0x150>
 8009180:	9b04      	ldr	r3, [sp, #16]
 8009182:	eba0 000a 	sub.w	r0, r0, sl
 8009186:	2240      	movs	r2, #64	; 0x40
 8009188:	4082      	lsls	r2, r0
 800918a:	4313      	orrs	r3, r2
 800918c:	3401      	adds	r4, #1
 800918e:	9304      	str	r3, [sp, #16]
 8009190:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009194:	4825      	ldr	r0, [pc, #148]	; (800922c <_svfiprintf_r+0x1ec>)
 8009196:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800919a:	2206      	movs	r2, #6
 800919c:	f7f7 f818 	bl	80001d0 <memchr>
 80091a0:	2800      	cmp	r0, #0
 80091a2:	d038      	beq.n	8009216 <_svfiprintf_r+0x1d6>
 80091a4:	4b22      	ldr	r3, [pc, #136]	; (8009230 <_svfiprintf_r+0x1f0>)
 80091a6:	bb1b      	cbnz	r3, 80091f0 <_svfiprintf_r+0x1b0>
 80091a8:	9b03      	ldr	r3, [sp, #12]
 80091aa:	3307      	adds	r3, #7
 80091ac:	f023 0307 	bic.w	r3, r3, #7
 80091b0:	3308      	adds	r3, #8
 80091b2:	9303      	str	r3, [sp, #12]
 80091b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091b6:	4433      	add	r3, r6
 80091b8:	9309      	str	r3, [sp, #36]	; 0x24
 80091ba:	e768      	b.n	800908e <_svfiprintf_r+0x4e>
 80091bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80091c0:	460c      	mov	r4, r1
 80091c2:	2001      	movs	r0, #1
 80091c4:	e7a6      	b.n	8009114 <_svfiprintf_r+0xd4>
 80091c6:	2300      	movs	r3, #0
 80091c8:	3401      	adds	r4, #1
 80091ca:	9305      	str	r3, [sp, #20]
 80091cc:	4619      	mov	r1, r3
 80091ce:	f04f 0c0a 	mov.w	ip, #10
 80091d2:	4620      	mov	r0, r4
 80091d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091d8:	3a30      	subs	r2, #48	; 0x30
 80091da:	2a09      	cmp	r2, #9
 80091dc:	d903      	bls.n	80091e6 <_svfiprintf_r+0x1a6>
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d0c6      	beq.n	8009170 <_svfiprintf_r+0x130>
 80091e2:	9105      	str	r1, [sp, #20]
 80091e4:	e7c4      	b.n	8009170 <_svfiprintf_r+0x130>
 80091e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80091ea:	4604      	mov	r4, r0
 80091ec:	2301      	movs	r3, #1
 80091ee:	e7f0      	b.n	80091d2 <_svfiprintf_r+0x192>
 80091f0:	ab03      	add	r3, sp, #12
 80091f2:	9300      	str	r3, [sp, #0]
 80091f4:	462a      	mov	r2, r5
 80091f6:	4b0f      	ldr	r3, [pc, #60]	; (8009234 <_svfiprintf_r+0x1f4>)
 80091f8:	a904      	add	r1, sp, #16
 80091fa:	4638      	mov	r0, r7
 80091fc:	f7fd fe64 	bl	8006ec8 <_printf_float>
 8009200:	1c42      	adds	r2, r0, #1
 8009202:	4606      	mov	r6, r0
 8009204:	d1d6      	bne.n	80091b4 <_svfiprintf_r+0x174>
 8009206:	89ab      	ldrh	r3, [r5, #12]
 8009208:	065b      	lsls	r3, r3, #25
 800920a:	f53f af2d 	bmi.w	8009068 <_svfiprintf_r+0x28>
 800920e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009210:	b01d      	add	sp, #116	; 0x74
 8009212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009216:	ab03      	add	r3, sp, #12
 8009218:	9300      	str	r3, [sp, #0]
 800921a:	462a      	mov	r2, r5
 800921c:	4b05      	ldr	r3, [pc, #20]	; (8009234 <_svfiprintf_r+0x1f4>)
 800921e:	a904      	add	r1, sp, #16
 8009220:	4638      	mov	r0, r7
 8009222:	f7fe f8f5 	bl	8007410 <_printf_i>
 8009226:	e7eb      	b.n	8009200 <_svfiprintf_r+0x1c0>
 8009228:	0800a284 	.word	0x0800a284
 800922c:	0800a28e 	.word	0x0800a28e
 8009230:	08006ec9 	.word	0x08006ec9
 8009234:	08008f8d 	.word	0x08008f8d
 8009238:	0800a28a 	.word	0x0800a28a

0800923c <__sflush_r>:
 800923c:	898a      	ldrh	r2, [r1, #12]
 800923e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009242:	4605      	mov	r5, r0
 8009244:	0710      	lsls	r0, r2, #28
 8009246:	460c      	mov	r4, r1
 8009248:	d458      	bmi.n	80092fc <__sflush_r+0xc0>
 800924a:	684b      	ldr	r3, [r1, #4]
 800924c:	2b00      	cmp	r3, #0
 800924e:	dc05      	bgt.n	800925c <__sflush_r+0x20>
 8009250:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009252:	2b00      	cmp	r3, #0
 8009254:	dc02      	bgt.n	800925c <__sflush_r+0x20>
 8009256:	2000      	movs	r0, #0
 8009258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800925c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800925e:	2e00      	cmp	r6, #0
 8009260:	d0f9      	beq.n	8009256 <__sflush_r+0x1a>
 8009262:	2300      	movs	r3, #0
 8009264:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009268:	682f      	ldr	r7, [r5, #0]
 800926a:	6a21      	ldr	r1, [r4, #32]
 800926c:	602b      	str	r3, [r5, #0]
 800926e:	d032      	beq.n	80092d6 <__sflush_r+0x9a>
 8009270:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009272:	89a3      	ldrh	r3, [r4, #12]
 8009274:	075a      	lsls	r2, r3, #29
 8009276:	d505      	bpl.n	8009284 <__sflush_r+0x48>
 8009278:	6863      	ldr	r3, [r4, #4]
 800927a:	1ac0      	subs	r0, r0, r3
 800927c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800927e:	b10b      	cbz	r3, 8009284 <__sflush_r+0x48>
 8009280:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009282:	1ac0      	subs	r0, r0, r3
 8009284:	2300      	movs	r3, #0
 8009286:	4602      	mov	r2, r0
 8009288:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800928a:	6a21      	ldr	r1, [r4, #32]
 800928c:	4628      	mov	r0, r5
 800928e:	47b0      	blx	r6
 8009290:	1c43      	adds	r3, r0, #1
 8009292:	89a3      	ldrh	r3, [r4, #12]
 8009294:	d106      	bne.n	80092a4 <__sflush_r+0x68>
 8009296:	6829      	ldr	r1, [r5, #0]
 8009298:	291d      	cmp	r1, #29
 800929a:	d82b      	bhi.n	80092f4 <__sflush_r+0xb8>
 800929c:	4a29      	ldr	r2, [pc, #164]	; (8009344 <__sflush_r+0x108>)
 800929e:	410a      	asrs	r2, r1
 80092a0:	07d6      	lsls	r6, r2, #31
 80092a2:	d427      	bmi.n	80092f4 <__sflush_r+0xb8>
 80092a4:	2200      	movs	r2, #0
 80092a6:	6062      	str	r2, [r4, #4]
 80092a8:	04d9      	lsls	r1, r3, #19
 80092aa:	6922      	ldr	r2, [r4, #16]
 80092ac:	6022      	str	r2, [r4, #0]
 80092ae:	d504      	bpl.n	80092ba <__sflush_r+0x7e>
 80092b0:	1c42      	adds	r2, r0, #1
 80092b2:	d101      	bne.n	80092b8 <__sflush_r+0x7c>
 80092b4:	682b      	ldr	r3, [r5, #0]
 80092b6:	b903      	cbnz	r3, 80092ba <__sflush_r+0x7e>
 80092b8:	6560      	str	r0, [r4, #84]	; 0x54
 80092ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80092bc:	602f      	str	r7, [r5, #0]
 80092be:	2900      	cmp	r1, #0
 80092c0:	d0c9      	beq.n	8009256 <__sflush_r+0x1a>
 80092c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80092c6:	4299      	cmp	r1, r3
 80092c8:	d002      	beq.n	80092d0 <__sflush_r+0x94>
 80092ca:	4628      	mov	r0, r5
 80092cc:	f7ff f9e2 	bl	8008694 <_free_r>
 80092d0:	2000      	movs	r0, #0
 80092d2:	6360      	str	r0, [r4, #52]	; 0x34
 80092d4:	e7c0      	b.n	8009258 <__sflush_r+0x1c>
 80092d6:	2301      	movs	r3, #1
 80092d8:	4628      	mov	r0, r5
 80092da:	47b0      	blx	r6
 80092dc:	1c41      	adds	r1, r0, #1
 80092de:	d1c8      	bne.n	8009272 <__sflush_r+0x36>
 80092e0:	682b      	ldr	r3, [r5, #0]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d0c5      	beq.n	8009272 <__sflush_r+0x36>
 80092e6:	2b1d      	cmp	r3, #29
 80092e8:	d001      	beq.n	80092ee <__sflush_r+0xb2>
 80092ea:	2b16      	cmp	r3, #22
 80092ec:	d101      	bne.n	80092f2 <__sflush_r+0xb6>
 80092ee:	602f      	str	r7, [r5, #0]
 80092f0:	e7b1      	b.n	8009256 <__sflush_r+0x1a>
 80092f2:	89a3      	ldrh	r3, [r4, #12]
 80092f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092f8:	81a3      	strh	r3, [r4, #12]
 80092fa:	e7ad      	b.n	8009258 <__sflush_r+0x1c>
 80092fc:	690f      	ldr	r7, [r1, #16]
 80092fe:	2f00      	cmp	r7, #0
 8009300:	d0a9      	beq.n	8009256 <__sflush_r+0x1a>
 8009302:	0793      	lsls	r3, r2, #30
 8009304:	680e      	ldr	r6, [r1, #0]
 8009306:	bf08      	it	eq
 8009308:	694b      	ldreq	r3, [r1, #20]
 800930a:	600f      	str	r7, [r1, #0]
 800930c:	bf18      	it	ne
 800930e:	2300      	movne	r3, #0
 8009310:	eba6 0807 	sub.w	r8, r6, r7
 8009314:	608b      	str	r3, [r1, #8]
 8009316:	f1b8 0f00 	cmp.w	r8, #0
 800931a:	dd9c      	ble.n	8009256 <__sflush_r+0x1a>
 800931c:	6a21      	ldr	r1, [r4, #32]
 800931e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009320:	4643      	mov	r3, r8
 8009322:	463a      	mov	r2, r7
 8009324:	4628      	mov	r0, r5
 8009326:	47b0      	blx	r6
 8009328:	2800      	cmp	r0, #0
 800932a:	dc06      	bgt.n	800933a <__sflush_r+0xfe>
 800932c:	89a3      	ldrh	r3, [r4, #12]
 800932e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009332:	81a3      	strh	r3, [r4, #12]
 8009334:	f04f 30ff 	mov.w	r0, #4294967295
 8009338:	e78e      	b.n	8009258 <__sflush_r+0x1c>
 800933a:	4407      	add	r7, r0
 800933c:	eba8 0800 	sub.w	r8, r8, r0
 8009340:	e7e9      	b.n	8009316 <__sflush_r+0xda>
 8009342:	bf00      	nop
 8009344:	dfbffffe 	.word	0xdfbffffe

08009348 <_fflush_r>:
 8009348:	b538      	push	{r3, r4, r5, lr}
 800934a:	690b      	ldr	r3, [r1, #16]
 800934c:	4605      	mov	r5, r0
 800934e:	460c      	mov	r4, r1
 8009350:	b913      	cbnz	r3, 8009358 <_fflush_r+0x10>
 8009352:	2500      	movs	r5, #0
 8009354:	4628      	mov	r0, r5
 8009356:	bd38      	pop	{r3, r4, r5, pc}
 8009358:	b118      	cbz	r0, 8009362 <_fflush_r+0x1a>
 800935a:	6a03      	ldr	r3, [r0, #32]
 800935c:	b90b      	cbnz	r3, 8009362 <_fflush_r+0x1a>
 800935e:	f7fe fa05 	bl	800776c <__sinit>
 8009362:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d0f3      	beq.n	8009352 <_fflush_r+0xa>
 800936a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800936c:	07d0      	lsls	r0, r2, #31
 800936e:	d404      	bmi.n	800937a <_fflush_r+0x32>
 8009370:	0599      	lsls	r1, r3, #22
 8009372:	d402      	bmi.n	800937a <_fflush_r+0x32>
 8009374:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009376:	f7fe fb10 	bl	800799a <__retarget_lock_acquire_recursive>
 800937a:	4628      	mov	r0, r5
 800937c:	4621      	mov	r1, r4
 800937e:	f7ff ff5d 	bl	800923c <__sflush_r>
 8009382:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009384:	07da      	lsls	r2, r3, #31
 8009386:	4605      	mov	r5, r0
 8009388:	d4e4      	bmi.n	8009354 <_fflush_r+0xc>
 800938a:	89a3      	ldrh	r3, [r4, #12]
 800938c:	059b      	lsls	r3, r3, #22
 800938e:	d4e1      	bmi.n	8009354 <_fflush_r+0xc>
 8009390:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009392:	f7fe fb03 	bl	800799c <__retarget_lock_release_recursive>
 8009396:	e7dd      	b.n	8009354 <_fflush_r+0xc>

08009398 <memmove>:
 8009398:	4288      	cmp	r0, r1
 800939a:	b510      	push	{r4, lr}
 800939c:	eb01 0402 	add.w	r4, r1, r2
 80093a0:	d902      	bls.n	80093a8 <memmove+0x10>
 80093a2:	4284      	cmp	r4, r0
 80093a4:	4623      	mov	r3, r4
 80093a6:	d807      	bhi.n	80093b8 <memmove+0x20>
 80093a8:	1e43      	subs	r3, r0, #1
 80093aa:	42a1      	cmp	r1, r4
 80093ac:	d008      	beq.n	80093c0 <memmove+0x28>
 80093ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80093b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80093b6:	e7f8      	b.n	80093aa <memmove+0x12>
 80093b8:	4402      	add	r2, r0
 80093ba:	4601      	mov	r1, r0
 80093bc:	428a      	cmp	r2, r1
 80093be:	d100      	bne.n	80093c2 <memmove+0x2a>
 80093c0:	bd10      	pop	{r4, pc}
 80093c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80093c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80093ca:	e7f7      	b.n	80093bc <memmove+0x24>

080093cc <_sbrk_r>:
 80093cc:	b538      	push	{r3, r4, r5, lr}
 80093ce:	4d06      	ldr	r5, [pc, #24]	; (80093e8 <_sbrk_r+0x1c>)
 80093d0:	2300      	movs	r3, #0
 80093d2:	4604      	mov	r4, r0
 80093d4:	4608      	mov	r0, r1
 80093d6:	602b      	str	r3, [r5, #0]
 80093d8:	f7f9 fb22 	bl	8002a20 <_sbrk>
 80093dc:	1c43      	adds	r3, r0, #1
 80093de:	d102      	bne.n	80093e6 <_sbrk_r+0x1a>
 80093e0:	682b      	ldr	r3, [r5, #0]
 80093e2:	b103      	cbz	r3, 80093e6 <_sbrk_r+0x1a>
 80093e4:	6023      	str	r3, [r4, #0]
 80093e6:	bd38      	pop	{r3, r4, r5, pc}
 80093e8:	200005e0 	.word	0x200005e0

080093ec <memcpy>:
 80093ec:	440a      	add	r2, r1
 80093ee:	4291      	cmp	r1, r2
 80093f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80093f4:	d100      	bne.n	80093f8 <memcpy+0xc>
 80093f6:	4770      	bx	lr
 80093f8:	b510      	push	{r4, lr}
 80093fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009402:	4291      	cmp	r1, r2
 8009404:	d1f9      	bne.n	80093fa <memcpy+0xe>
 8009406:	bd10      	pop	{r4, pc}

08009408 <__assert_func>:
 8009408:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800940a:	4614      	mov	r4, r2
 800940c:	461a      	mov	r2, r3
 800940e:	4b09      	ldr	r3, [pc, #36]	; (8009434 <__assert_func+0x2c>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4605      	mov	r5, r0
 8009414:	68d8      	ldr	r0, [r3, #12]
 8009416:	b14c      	cbz	r4, 800942c <__assert_func+0x24>
 8009418:	4b07      	ldr	r3, [pc, #28]	; (8009438 <__assert_func+0x30>)
 800941a:	9100      	str	r1, [sp, #0]
 800941c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009420:	4906      	ldr	r1, [pc, #24]	; (800943c <__assert_func+0x34>)
 8009422:	462b      	mov	r3, r5
 8009424:	f000 f872 	bl	800950c <fiprintf>
 8009428:	f000 f882 	bl	8009530 <abort>
 800942c:	4b04      	ldr	r3, [pc, #16]	; (8009440 <__assert_func+0x38>)
 800942e:	461c      	mov	r4, r3
 8009430:	e7f3      	b.n	800941a <__assert_func+0x12>
 8009432:	bf00      	nop
 8009434:	200000d0 	.word	0x200000d0
 8009438:	0800a29f 	.word	0x0800a29f
 800943c:	0800a2ac 	.word	0x0800a2ac
 8009440:	0800a2da 	.word	0x0800a2da

08009444 <_calloc_r>:
 8009444:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009446:	fba1 2402 	umull	r2, r4, r1, r2
 800944a:	b94c      	cbnz	r4, 8009460 <_calloc_r+0x1c>
 800944c:	4611      	mov	r1, r2
 800944e:	9201      	str	r2, [sp, #4]
 8009450:	f7ff f994 	bl	800877c <_malloc_r>
 8009454:	9a01      	ldr	r2, [sp, #4]
 8009456:	4605      	mov	r5, r0
 8009458:	b930      	cbnz	r0, 8009468 <_calloc_r+0x24>
 800945a:	4628      	mov	r0, r5
 800945c:	b003      	add	sp, #12
 800945e:	bd30      	pop	{r4, r5, pc}
 8009460:	220c      	movs	r2, #12
 8009462:	6002      	str	r2, [r0, #0]
 8009464:	2500      	movs	r5, #0
 8009466:	e7f8      	b.n	800945a <_calloc_r+0x16>
 8009468:	4621      	mov	r1, r4
 800946a:	f7fe fa18 	bl	800789e <memset>
 800946e:	e7f4      	b.n	800945a <_calloc_r+0x16>

08009470 <__ascii_mbtowc>:
 8009470:	b082      	sub	sp, #8
 8009472:	b901      	cbnz	r1, 8009476 <__ascii_mbtowc+0x6>
 8009474:	a901      	add	r1, sp, #4
 8009476:	b142      	cbz	r2, 800948a <__ascii_mbtowc+0x1a>
 8009478:	b14b      	cbz	r3, 800948e <__ascii_mbtowc+0x1e>
 800947a:	7813      	ldrb	r3, [r2, #0]
 800947c:	600b      	str	r3, [r1, #0]
 800947e:	7812      	ldrb	r2, [r2, #0]
 8009480:	1e10      	subs	r0, r2, #0
 8009482:	bf18      	it	ne
 8009484:	2001      	movne	r0, #1
 8009486:	b002      	add	sp, #8
 8009488:	4770      	bx	lr
 800948a:	4610      	mov	r0, r2
 800948c:	e7fb      	b.n	8009486 <__ascii_mbtowc+0x16>
 800948e:	f06f 0001 	mvn.w	r0, #1
 8009492:	e7f8      	b.n	8009486 <__ascii_mbtowc+0x16>

08009494 <_realloc_r>:
 8009494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009498:	4680      	mov	r8, r0
 800949a:	4614      	mov	r4, r2
 800949c:	460e      	mov	r6, r1
 800949e:	b921      	cbnz	r1, 80094aa <_realloc_r+0x16>
 80094a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094a4:	4611      	mov	r1, r2
 80094a6:	f7ff b969 	b.w	800877c <_malloc_r>
 80094aa:	b92a      	cbnz	r2, 80094b8 <_realloc_r+0x24>
 80094ac:	f7ff f8f2 	bl	8008694 <_free_r>
 80094b0:	4625      	mov	r5, r4
 80094b2:	4628      	mov	r0, r5
 80094b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094b8:	f000 f841 	bl	800953e <_malloc_usable_size_r>
 80094bc:	4284      	cmp	r4, r0
 80094be:	4607      	mov	r7, r0
 80094c0:	d802      	bhi.n	80094c8 <_realloc_r+0x34>
 80094c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80094c6:	d812      	bhi.n	80094ee <_realloc_r+0x5a>
 80094c8:	4621      	mov	r1, r4
 80094ca:	4640      	mov	r0, r8
 80094cc:	f7ff f956 	bl	800877c <_malloc_r>
 80094d0:	4605      	mov	r5, r0
 80094d2:	2800      	cmp	r0, #0
 80094d4:	d0ed      	beq.n	80094b2 <_realloc_r+0x1e>
 80094d6:	42bc      	cmp	r4, r7
 80094d8:	4622      	mov	r2, r4
 80094da:	4631      	mov	r1, r6
 80094dc:	bf28      	it	cs
 80094de:	463a      	movcs	r2, r7
 80094e0:	f7ff ff84 	bl	80093ec <memcpy>
 80094e4:	4631      	mov	r1, r6
 80094e6:	4640      	mov	r0, r8
 80094e8:	f7ff f8d4 	bl	8008694 <_free_r>
 80094ec:	e7e1      	b.n	80094b2 <_realloc_r+0x1e>
 80094ee:	4635      	mov	r5, r6
 80094f0:	e7df      	b.n	80094b2 <_realloc_r+0x1e>

080094f2 <__ascii_wctomb>:
 80094f2:	b149      	cbz	r1, 8009508 <__ascii_wctomb+0x16>
 80094f4:	2aff      	cmp	r2, #255	; 0xff
 80094f6:	bf85      	ittet	hi
 80094f8:	238a      	movhi	r3, #138	; 0x8a
 80094fa:	6003      	strhi	r3, [r0, #0]
 80094fc:	700a      	strbls	r2, [r1, #0]
 80094fe:	f04f 30ff 	movhi.w	r0, #4294967295
 8009502:	bf98      	it	ls
 8009504:	2001      	movls	r0, #1
 8009506:	4770      	bx	lr
 8009508:	4608      	mov	r0, r1
 800950a:	4770      	bx	lr

0800950c <fiprintf>:
 800950c:	b40e      	push	{r1, r2, r3}
 800950e:	b503      	push	{r0, r1, lr}
 8009510:	4601      	mov	r1, r0
 8009512:	ab03      	add	r3, sp, #12
 8009514:	4805      	ldr	r0, [pc, #20]	; (800952c <fiprintf+0x20>)
 8009516:	f853 2b04 	ldr.w	r2, [r3], #4
 800951a:	6800      	ldr	r0, [r0, #0]
 800951c:	9301      	str	r3, [sp, #4]
 800951e:	f000 f83f 	bl	80095a0 <_vfiprintf_r>
 8009522:	b002      	add	sp, #8
 8009524:	f85d eb04 	ldr.w	lr, [sp], #4
 8009528:	b003      	add	sp, #12
 800952a:	4770      	bx	lr
 800952c:	200000d0 	.word	0x200000d0

08009530 <abort>:
 8009530:	b508      	push	{r3, lr}
 8009532:	2006      	movs	r0, #6
 8009534:	f000 fa0c 	bl	8009950 <raise>
 8009538:	2001      	movs	r0, #1
 800953a:	f7f9 f9f9 	bl	8002930 <_exit>

0800953e <_malloc_usable_size_r>:
 800953e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009542:	1f18      	subs	r0, r3, #4
 8009544:	2b00      	cmp	r3, #0
 8009546:	bfbc      	itt	lt
 8009548:	580b      	ldrlt	r3, [r1, r0]
 800954a:	18c0      	addlt	r0, r0, r3
 800954c:	4770      	bx	lr

0800954e <__sfputc_r>:
 800954e:	6893      	ldr	r3, [r2, #8]
 8009550:	3b01      	subs	r3, #1
 8009552:	2b00      	cmp	r3, #0
 8009554:	b410      	push	{r4}
 8009556:	6093      	str	r3, [r2, #8]
 8009558:	da08      	bge.n	800956c <__sfputc_r+0x1e>
 800955a:	6994      	ldr	r4, [r2, #24]
 800955c:	42a3      	cmp	r3, r4
 800955e:	db01      	blt.n	8009564 <__sfputc_r+0x16>
 8009560:	290a      	cmp	r1, #10
 8009562:	d103      	bne.n	800956c <__sfputc_r+0x1e>
 8009564:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009568:	f000 b934 	b.w	80097d4 <__swbuf_r>
 800956c:	6813      	ldr	r3, [r2, #0]
 800956e:	1c58      	adds	r0, r3, #1
 8009570:	6010      	str	r0, [r2, #0]
 8009572:	7019      	strb	r1, [r3, #0]
 8009574:	4608      	mov	r0, r1
 8009576:	f85d 4b04 	ldr.w	r4, [sp], #4
 800957a:	4770      	bx	lr

0800957c <__sfputs_r>:
 800957c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800957e:	4606      	mov	r6, r0
 8009580:	460f      	mov	r7, r1
 8009582:	4614      	mov	r4, r2
 8009584:	18d5      	adds	r5, r2, r3
 8009586:	42ac      	cmp	r4, r5
 8009588:	d101      	bne.n	800958e <__sfputs_r+0x12>
 800958a:	2000      	movs	r0, #0
 800958c:	e007      	b.n	800959e <__sfputs_r+0x22>
 800958e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009592:	463a      	mov	r2, r7
 8009594:	4630      	mov	r0, r6
 8009596:	f7ff ffda 	bl	800954e <__sfputc_r>
 800959a:	1c43      	adds	r3, r0, #1
 800959c:	d1f3      	bne.n	8009586 <__sfputs_r+0xa>
 800959e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080095a0 <_vfiprintf_r>:
 80095a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095a4:	460d      	mov	r5, r1
 80095a6:	b09d      	sub	sp, #116	; 0x74
 80095a8:	4614      	mov	r4, r2
 80095aa:	4698      	mov	r8, r3
 80095ac:	4606      	mov	r6, r0
 80095ae:	b118      	cbz	r0, 80095b8 <_vfiprintf_r+0x18>
 80095b0:	6a03      	ldr	r3, [r0, #32]
 80095b2:	b90b      	cbnz	r3, 80095b8 <_vfiprintf_r+0x18>
 80095b4:	f7fe f8da 	bl	800776c <__sinit>
 80095b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095ba:	07d9      	lsls	r1, r3, #31
 80095bc:	d405      	bmi.n	80095ca <_vfiprintf_r+0x2a>
 80095be:	89ab      	ldrh	r3, [r5, #12]
 80095c0:	059a      	lsls	r2, r3, #22
 80095c2:	d402      	bmi.n	80095ca <_vfiprintf_r+0x2a>
 80095c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095c6:	f7fe f9e8 	bl	800799a <__retarget_lock_acquire_recursive>
 80095ca:	89ab      	ldrh	r3, [r5, #12]
 80095cc:	071b      	lsls	r3, r3, #28
 80095ce:	d501      	bpl.n	80095d4 <_vfiprintf_r+0x34>
 80095d0:	692b      	ldr	r3, [r5, #16]
 80095d2:	b99b      	cbnz	r3, 80095fc <_vfiprintf_r+0x5c>
 80095d4:	4629      	mov	r1, r5
 80095d6:	4630      	mov	r0, r6
 80095d8:	f000 f93a 	bl	8009850 <__swsetup_r>
 80095dc:	b170      	cbz	r0, 80095fc <_vfiprintf_r+0x5c>
 80095de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095e0:	07dc      	lsls	r4, r3, #31
 80095e2:	d504      	bpl.n	80095ee <_vfiprintf_r+0x4e>
 80095e4:	f04f 30ff 	mov.w	r0, #4294967295
 80095e8:	b01d      	add	sp, #116	; 0x74
 80095ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ee:	89ab      	ldrh	r3, [r5, #12]
 80095f0:	0598      	lsls	r0, r3, #22
 80095f2:	d4f7      	bmi.n	80095e4 <_vfiprintf_r+0x44>
 80095f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095f6:	f7fe f9d1 	bl	800799c <__retarget_lock_release_recursive>
 80095fa:	e7f3      	b.n	80095e4 <_vfiprintf_r+0x44>
 80095fc:	2300      	movs	r3, #0
 80095fe:	9309      	str	r3, [sp, #36]	; 0x24
 8009600:	2320      	movs	r3, #32
 8009602:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009606:	f8cd 800c 	str.w	r8, [sp, #12]
 800960a:	2330      	movs	r3, #48	; 0x30
 800960c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80097c0 <_vfiprintf_r+0x220>
 8009610:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009614:	f04f 0901 	mov.w	r9, #1
 8009618:	4623      	mov	r3, r4
 800961a:	469a      	mov	sl, r3
 800961c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009620:	b10a      	cbz	r2, 8009626 <_vfiprintf_r+0x86>
 8009622:	2a25      	cmp	r2, #37	; 0x25
 8009624:	d1f9      	bne.n	800961a <_vfiprintf_r+0x7a>
 8009626:	ebba 0b04 	subs.w	fp, sl, r4
 800962a:	d00b      	beq.n	8009644 <_vfiprintf_r+0xa4>
 800962c:	465b      	mov	r3, fp
 800962e:	4622      	mov	r2, r4
 8009630:	4629      	mov	r1, r5
 8009632:	4630      	mov	r0, r6
 8009634:	f7ff ffa2 	bl	800957c <__sfputs_r>
 8009638:	3001      	adds	r0, #1
 800963a:	f000 80a9 	beq.w	8009790 <_vfiprintf_r+0x1f0>
 800963e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009640:	445a      	add	r2, fp
 8009642:	9209      	str	r2, [sp, #36]	; 0x24
 8009644:	f89a 3000 	ldrb.w	r3, [sl]
 8009648:	2b00      	cmp	r3, #0
 800964a:	f000 80a1 	beq.w	8009790 <_vfiprintf_r+0x1f0>
 800964e:	2300      	movs	r3, #0
 8009650:	f04f 32ff 	mov.w	r2, #4294967295
 8009654:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009658:	f10a 0a01 	add.w	sl, sl, #1
 800965c:	9304      	str	r3, [sp, #16]
 800965e:	9307      	str	r3, [sp, #28]
 8009660:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009664:	931a      	str	r3, [sp, #104]	; 0x68
 8009666:	4654      	mov	r4, sl
 8009668:	2205      	movs	r2, #5
 800966a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800966e:	4854      	ldr	r0, [pc, #336]	; (80097c0 <_vfiprintf_r+0x220>)
 8009670:	f7f6 fdae 	bl	80001d0 <memchr>
 8009674:	9a04      	ldr	r2, [sp, #16]
 8009676:	b9d8      	cbnz	r0, 80096b0 <_vfiprintf_r+0x110>
 8009678:	06d1      	lsls	r1, r2, #27
 800967a:	bf44      	itt	mi
 800967c:	2320      	movmi	r3, #32
 800967e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009682:	0713      	lsls	r3, r2, #28
 8009684:	bf44      	itt	mi
 8009686:	232b      	movmi	r3, #43	; 0x2b
 8009688:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800968c:	f89a 3000 	ldrb.w	r3, [sl]
 8009690:	2b2a      	cmp	r3, #42	; 0x2a
 8009692:	d015      	beq.n	80096c0 <_vfiprintf_r+0x120>
 8009694:	9a07      	ldr	r2, [sp, #28]
 8009696:	4654      	mov	r4, sl
 8009698:	2000      	movs	r0, #0
 800969a:	f04f 0c0a 	mov.w	ip, #10
 800969e:	4621      	mov	r1, r4
 80096a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096a4:	3b30      	subs	r3, #48	; 0x30
 80096a6:	2b09      	cmp	r3, #9
 80096a8:	d94d      	bls.n	8009746 <_vfiprintf_r+0x1a6>
 80096aa:	b1b0      	cbz	r0, 80096da <_vfiprintf_r+0x13a>
 80096ac:	9207      	str	r2, [sp, #28]
 80096ae:	e014      	b.n	80096da <_vfiprintf_r+0x13a>
 80096b0:	eba0 0308 	sub.w	r3, r0, r8
 80096b4:	fa09 f303 	lsl.w	r3, r9, r3
 80096b8:	4313      	orrs	r3, r2
 80096ba:	9304      	str	r3, [sp, #16]
 80096bc:	46a2      	mov	sl, r4
 80096be:	e7d2      	b.n	8009666 <_vfiprintf_r+0xc6>
 80096c0:	9b03      	ldr	r3, [sp, #12]
 80096c2:	1d19      	adds	r1, r3, #4
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	9103      	str	r1, [sp, #12]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	bfbb      	ittet	lt
 80096cc:	425b      	neglt	r3, r3
 80096ce:	f042 0202 	orrlt.w	r2, r2, #2
 80096d2:	9307      	strge	r3, [sp, #28]
 80096d4:	9307      	strlt	r3, [sp, #28]
 80096d6:	bfb8      	it	lt
 80096d8:	9204      	strlt	r2, [sp, #16]
 80096da:	7823      	ldrb	r3, [r4, #0]
 80096dc:	2b2e      	cmp	r3, #46	; 0x2e
 80096de:	d10c      	bne.n	80096fa <_vfiprintf_r+0x15a>
 80096e0:	7863      	ldrb	r3, [r4, #1]
 80096e2:	2b2a      	cmp	r3, #42	; 0x2a
 80096e4:	d134      	bne.n	8009750 <_vfiprintf_r+0x1b0>
 80096e6:	9b03      	ldr	r3, [sp, #12]
 80096e8:	1d1a      	adds	r2, r3, #4
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	9203      	str	r2, [sp, #12]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	bfb8      	it	lt
 80096f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80096f6:	3402      	adds	r4, #2
 80096f8:	9305      	str	r3, [sp, #20]
 80096fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80097d0 <_vfiprintf_r+0x230>
 80096fe:	7821      	ldrb	r1, [r4, #0]
 8009700:	2203      	movs	r2, #3
 8009702:	4650      	mov	r0, sl
 8009704:	f7f6 fd64 	bl	80001d0 <memchr>
 8009708:	b138      	cbz	r0, 800971a <_vfiprintf_r+0x17a>
 800970a:	9b04      	ldr	r3, [sp, #16]
 800970c:	eba0 000a 	sub.w	r0, r0, sl
 8009710:	2240      	movs	r2, #64	; 0x40
 8009712:	4082      	lsls	r2, r0
 8009714:	4313      	orrs	r3, r2
 8009716:	3401      	adds	r4, #1
 8009718:	9304      	str	r3, [sp, #16]
 800971a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800971e:	4829      	ldr	r0, [pc, #164]	; (80097c4 <_vfiprintf_r+0x224>)
 8009720:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009724:	2206      	movs	r2, #6
 8009726:	f7f6 fd53 	bl	80001d0 <memchr>
 800972a:	2800      	cmp	r0, #0
 800972c:	d03f      	beq.n	80097ae <_vfiprintf_r+0x20e>
 800972e:	4b26      	ldr	r3, [pc, #152]	; (80097c8 <_vfiprintf_r+0x228>)
 8009730:	bb1b      	cbnz	r3, 800977a <_vfiprintf_r+0x1da>
 8009732:	9b03      	ldr	r3, [sp, #12]
 8009734:	3307      	adds	r3, #7
 8009736:	f023 0307 	bic.w	r3, r3, #7
 800973a:	3308      	adds	r3, #8
 800973c:	9303      	str	r3, [sp, #12]
 800973e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009740:	443b      	add	r3, r7
 8009742:	9309      	str	r3, [sp, #36]	; 0x24
 8009744:	e768      	b.n	8009618 <_vfiprintf_r+0x78>
 8009746:	fb0c 3202 	mla	r2, ip, r2, r3
 800974a:	460c      	mov	r4, r1
 800974c:	2001      	movs	r0, #1
 800974e:	e7a6      	b.n	800969e <_vfiprintf_r+0xfe>
 8009750:	2300      	movs	r3, #0
 8009752:	3401      	adds	r4, #1
 8009754:	9305      	str	r3, [sp, #20]
 8009756:	4619      	mov	r1, r3
 8009758:	f04f 0c0a 	mov.w	ip, #10
 800975c:	4620      	mov	r0, r4
 800975e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009762:	3a30      	subs	r2, #48	; 0x30
 8009764:	2a09      	cmp	r2, #9
 8009766:	d903      	bls.n	8009770 <_vfiprintf_r+0x1d0>
 8009768:	2b00      	cmp	r3, #0
 800976a:	d0c6      	beq.n	80096fa <_vfiprintf_r+0x15a>
 800976c:	9105      	str	r1, [sp, #20]
 800976e:	e7c4      	b.n	80096fa <_vfiprintf_r+0x15a>
 8009770:	fb0c 2101 	mla	r1, ip, r1, r2
 8009774:	4604      	mov	r4, r0
 8009776:	2301      	movs	r3, #1
 8009778:	e7f0      	b.n	800975c <_vfiprintf_r+0x1bc>
 800977a:	ab03      	add	r3, sp, #12
 800977c:	9300      	str	r3, [sp, #0]
 800977e:	462a      	mov	r2, r5
 8009780:	4b12      	ldr	r3, [pc, #72]	; (80097cc <_vfiprintf_r+0x22c>)
 8009782:	a904      	add	r1, sp, #16
 8009784:	4630      	mov	r0, r6
 8009786:	f7fd fb9f 	bl	8006ec8 <_printf_float>
 800978a:	4607      	mov	r7, r0
 800978c:	1c78      	adds	r0, r7, #1
 800978e:	d1d6      	bne.n	800973e <_vfiprintf_r+0x19e>
 8009790:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009792:	07d9      	lsls	r1, r3, #31
 8009794:	d405      	bmi.n	80097a2 <_vfiprintf_r+0x202>
 8009796:	89ab      	ldrh	r3, [r5, #12]
 8009798:	059a      	lsls	r2, r3, #22
 800979a:	d402      	bmi.n	80097a2 <_vfiprintf_r+0x202>
 800979c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800979e:	f7fe f8fd 	bl	800799c <__retarget_lock_release_recursive>
 80097a2:	89ab      	ldrh	r3, [r5, #12]
 80097a4:	065b      	lsls	r3, r3, #25
 80097a6:	f53f af1d 	bmi.w	80095e4 <_vfiprintf_r+0x44>
 80097aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097ac:	e71c      	b.n	80095e8 <_vfiprintf_r+0x48>
 80097ae:	ab03      	add	r3, sp, #12
 80097b0:	9300      	str	r3, [sp, #0]
 80097b2:	462a      	mov	r2, r5
 80097b4:	4b05      	ldr	r3, [pc, #20]	; (80097cc <_vfiprintf_r+0x22c>)
 80097b6:	a904      	add	r1, sp, #16
 80097b8:	4630      	mov	r0, r6
 80097ba:	f7fd fe29 	bl	8007410 <_printf_i>
 80097be:	e7e4      	b.n	800978a <_vfiprintf_r+0x1ea>
 80097c0:	0800a284 	.word	0x0800a284
 80097c4:	0800a28e 	.word	0x0800a28e
 80097c8:	08006ec9 	.word	0x08006ec9
 80097cc:	0800957d 	.word	0x0800957d
 80097d0:	0800a28a 	.word	0x0800a28a

080097d4 <__swbuf_r>:
 80097d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097d6:	460e      	mov	r6, r1
 80097d8:	4614      	mov	r4, r2
 80097da:	4605      	mov	r5, r0
 80097dc:	b118      	cbz	r0, 80097e6 <__swbuf_r+0x12>
 80097de:	6a03      	ldr	r3, [r0, #32]
 80097e0:	b90b      	cbnz	r3, 80097e6 <__swbuf_r+0x12>
 80097e2:	f7fd ffc3 	bl	800776c <__sinit>
 80097e6:	69a3      	ldr	r3, [r4, #24]
 80097e8:	60a3      	str	r3, [r4, #8]
 80097ea:	89a3      	ldrh	r3, [r4, #12]
 80097ec:	071a      	lsls	r2, r3, #28
 80097ee:	d525      	bpl.n	800983c <__swbuf_r+0x68>
 80097f0:	6923      	ldr	r3, [r4, #16]
 80097f2:	b31b      	cbz	r3, 800983c <__swbuf_r+0x68>
 80097f4:	6823      	ldr	r3, [r4, #0]
 80097f6:	6922      	ldr	r2, [r4, #16]
 80097f8:	1a98      	subs	r0, r3, r2
 80097fa:	6963      	ldr	r3, [r4, #20]
 80097fc:	b2f6      	uxtb	r6, r6
 80097fe:	4283      	cmp	r3, r0
 8009800:	4637      	mov	r7, r6
 8009802:	dc04      	bgt.n	800980e <__swbuf_r+0x3a>
 8009804:	4621      	mov	r1, r4
 8009806:	4628      	mov	r0, r5
 8009808:	f7ff fd9e 	bl	8009348 <_fflush_r>
 800980c:	b9e0      	cbnz	r0, 8009848 <__swbuf_r+0x74>
 800980e:	68a3      	ldr	r3, [r4, #8]
 8009810:	3b01      	subs	r3, #1
 8009812:	60a3      	str	r3, [r4, #8]
 8009814:	6823      	ldr	r3, [r4, #0]
 8009816:	1c5a      	adds	r2, r3, #1
 8009818:	6022      	str	r2, [r4, #0]
 800981a:	701e      	strb	r6, [r3, #0]
 800981c:	6962      	ldr	r2, [r4, #20]
 800981e:	1c43      	adds	r3, r0, #1
 8009820:	429a      	cmp	r2, r3
 8009822:	d004      	beq.n	800982e <__swbuf_r+0x5a>
 8009824:	89a3      	ldrh	r3, [r4, #12]
 8009826:	07db      	lsls	r3, r3, #31
 8009828:	d506      	bpl.n	8009838 <__swbuf_r+0x64>
 800982a:	2e0a      	cmp	r6, #10
 800982c:	d104      	bne.n	8009838 <__swbuf_r+0x64>
 800982e:	4621      	mov	r1, r4
 8009830:	4628      	mov	r0, r5
 8009832:	f7ff fd89 	bl	8009348 <_fflush_r>
 8009836:	b938      	cbnz	r0, 8009848 <__swbuf_r+0x74>
 8009838:	4638      	mov	r0, r7
 800983a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800983c:	4621      	mov	r1, r4
 800983e:	4628      	mov	r0, r5
 8009840:	f000 f806 	bl	8009850 <__swsetup_r>
 8009844:	2800      	cmp	r0, #0
 8009846:	d0d5      	beq.n	80097f4 <__swbuf_r+0x20>
 8009848:	f04f 37ff 	mov.w	r7, #4294967295
 800984c:	e7f4      	b.n	8009838 <__swbuf_r+0x64>
	...

08009850 <__swsetup_r>:
 8009850:	b538      	push	{r3, r4, r5, lr}
 8009852:	4b2a      	ldr	r3, [pc, #168]	; (80098fc <__swsetup_r+0xac>)
 8009854:	4605      	mov	r5, r0
 8009856:	6818      	ldr	r0, [r3, #0]
 8009858:	460c      	mov	r4, r1
 800985a:	b118      	cbz	r0, 8009864 <__swsetup_r+0x14>
 800985c:	6a03      	ldr	r3, [r0, #32]
 800985e:	b90b      	cbnz	r3, 8009864 <__swsetup_r+0x14>
 8009860:	f7fd ff84 	bl	800776c <__sinit>
 8009864:	89a3      	ldrh	r3, [r4, #12]
 8009866:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800986a:	0718      	lsls	r0, r3, #28
 800986c:	d422      	bmi.n	80098b4 <__swsetup_r+0x64>
 800986e:	06d9      	lsls	r1, r3, #27
 8009870:	d407      	bmi.n	8009882 <__swsetup_r+0x32>
 8009872:	2309      	movs	r3, #9
 8009874:	602b      	str	r3, [r5, #0]
 8009876:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800987a:	81a3      	strh	r3, [r4, #12]
 800987c:	f04f 30ff 	mov.w	r0, #4294967295
 8009880:	e034      	b.n	80098ec <__swsetup_r+0x9c>
 8009882:	0758      	lsls	r0, r3, #29
 8009884:	d512      	bpl.n	80098ac <__swsetup_r+0x5c>
 8009886:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009888:	b141      	cbz	r1, 800989c <__swsetup_r+0x4c>
 800988a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800988e:	4299      	cmp	r1, r3
 8009890:	d002      	beq.n	8009898 <__swsetup_r+0x48>
 8009892:	4628      	mov	r0, r5
 8009894:	f7fe fefe 	bl	8008694 <_free_r>
 8009898:	2300      	movs	r3, #0
 800989a:	6363      	str	r3, [r4, #52]	; 0x34
 800989c:	89a3      	ldrh	r3, [r4, #12]
 800989e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80098a2:	81a3      	strh	r3, [r4, #12]
 80098a4:	2300      	movs	r3, #0
 80098a6:	6063      	str	r3, [r4, #4]
 80098a8:	6923      	ldr	r3, [r4, #16]
 80098aa:	6023      	str	r3, [r4, #0]
 80098ac:	89a3      	ldrh	r3, [r4, #12]
 80098ae:	f043 0308 	orr.w	r3, r3, #8
 80098b2:	81a3      	strh	r3, [r4, #12]
 80098b4:	6923      	ldr	r3, [r4, #16]
 80098b6:	b94b      	cbnz	r3, 80098cc <__swsetup_r+0x7c>
 80098b8:	89a3      	ldrh	r3, [r4, #12]
 80098ba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80098be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098c2:	d003      	beq.n	80098cc <__swsetup_r+0x7c>
 80098c4:	4621      	mov	r1, r4
 80098c6:	4628      	mov	r0, r5
 80098c8:	f000 f884 	bl	80099d4 <__smakebuf_r>
 80098cc:	89a0      	ldrh	r0, [r4, #12]
 80098ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80098d2:	f010 0301 	ands.w	r3, r0, #1
 80098d6:	d00a      	beq.n	80098ee <__swsetup_r+0x9e>
 80098d8:	2300      	movs	r3, #0
 80098da:	60a3      	str	r3, [r4, #8]
 80098dc:	6963      	ldr	r3, [r4, #20]
 80098de:	425b      	negs	r3, r3
 80098e0:	61a3      	str	r3, [r4, #24]
 80098e2:	6923      	ldr	r3, [r4, #16]
 80098e4:	b943      	cbnz	r3, 80098f8 <__swsetup_r+0xa8>
 80098e6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80098ea:	d1c4      	bne.n	8009876 <__swsetup_r+0x26>
 80098ec:	bd38      	pop	{r3, r4, r5, pc}
 80098ee:	0781      	lsls	r1, r0, #30
 80098f0:	bf58      	it	pl
 80098f2:	6963      	ldrpl	r3, [r4, #20]
 80098f4:	60a3      	str	r3, [r4, #8]
 80098f6:	e7f4      	b.n	80098e2 <__swsetup_r+0x92>
 80098f8:	2000      	movs	r0, #0
 80098fa:	e7f7      	b.n	80098ec <__swsetup_r+0x9c>
 80098fc:	200000d0 	.word	0x200000d0

08009900 <_raise_r>:
 8009900:	291f      	cmp	r1, #31
 8009902:	b538      	push	{r3, r4, r5, lr}
 8009904:	4604      	mov	r4, r0
 8009906:	460d      	mov	r5, r1
 8009908:	d904      	bls.n	8009914 <_raise_r+0x14>
 800990a:	2316      	movs	r3, #22
 800990c:	6003      	str	r3, [r0, #0]
 800990e:	f04f 30ff 	mov.w	r0, #4294967295
 8009912:	bd38      	pop	{r3, r4, r5, pc}
 8009914:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009916:	b112      	cbz	r2, 800991e <_raise_r+0x1e>
 8009918:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800991c:	b94b      	cbnz	r3, 8009932 <_raise_r+0x32>
 800991e:	4620      	mov	r0, r4
 8009920:	f000 f830 	bl	8009984 <_getpid_r>
 8009924:	462a      	mov	r2, r5
 8009926:	4601      	mov	r1, r0
 8009928:	4620      	mov	r0, r4
 800992a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800992e:	f000 b817 	b.w	8009960 <_kill_r>
 8009932:	2b01      	cmp	r3, #1
 8009934:	d00a      	beq.n	800994c <_raise_r+0x4c>
 8009936:	1c59      	adds	r1, r3, #1
 8009938:	d103      	bne.n	8009942 <_raise_r+0x42>
 800993a:	2316      	movs	r3, #22
 800993c:	6003      	str	r3, [r0, #0]
 800993e:	2001      	movs	r0, #1
 8009940:	e7e7      	b.n	8009912 <_raise_r+0x12>
 8009942:	2400      	movs	r4, #0
 8009944:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009948:	4628      	mov	r0, r5
 800994a:	4798      	blx	r3
 800994c:	2000      	movs	r0, #0
 800994e:	e7e0      	b.n	8009912 <_raise_r+0x12>

08009950 <raise>:
 8009950:	4b02      	ldr	r3, [pc, #8]	; (800995c <raise+0xc>)
 8009952:	4601      	mov	r1, r0
 8009954:	6818      	ldr	r0, [r3, #0]
 8009956:	f7ff bfd3 	b.w	8009900 <_raise_r>
 800995a:	bf00      	nop
 800995c:	200000d0 	.word	0x200000d0

08009960 <_kill_r>:
 8009960:	b538      	push	{r3, r4, r5, lr}
 8009962:	4d07      	ldr	r5, [pc, #28]	; (8009980 <_kill_r+0x20>)
 8009964:	2300      	movs	r3, #0
 8009966:	4604      	mov	r4, r0
 8009968:	4608      	mov	r0, r1
 800996a:	4611      	mov	r1, r2
 800996c:	602b      	str	r3, [r5, #0]
 800996e:	f7f8 ffcf 	bl	8002910 <_kill>
 8009972:	1c43      	adds	r3, r0, #1
 8009974:	d102      	bne.n	800997c <_kill_r+0x1c>
 8009976:	682b      	ldr	r3, [r5, #0]
 8009978:	b103      	cbz	r3, 800997c <_kill_r+0x1c>
 800997a:	6023      	str	r3, [r4, #0]
 800997c:	bd38      	pop	{r3, r4, r5, pc}
 800997e:	bf00      	nop
 8009980:	200005e0 	.word	0x200005e0

08009984 <_getpid_r>:
 8009984:	f7f8 bfbc 	b.w	8002900 <_getpid>

08009988 <__swhatbuf_r>:
 8009988:	b570      	push	{r4, r5, r6, lr}
 800998a:	460c      	mov	r4, r1
 800998c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009990:	2900      	cmp	r1, #0
 8009992:	b096      	sub	sp, #88	; 0x58
 8009994:	4615      	mov	r5, r2
 8009996:	461e      	mov	r6, r3
 8009998:	da0d      	bge.n	80099b6 <__swhatbuf_r+0x2e>
 800999a:	89a3      	ldrh	r3, [r4, #12]
 800999c:	f013 0f80 	tst.w	r3, #128	; 0x80
 80099a0:	f04f 0100 	mov.w	r1, #0
 80099a4:	bf0c      	ite	eq
 80099a6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80099aa:	2340      	movne	r3, #64	; 0x40
 80099ac:	2000      	movs	r0, #0
 80099ae:	6031      	str	r1, [r6, #0]
 80099b0:	602b      	str	r3, [r5, #0]
 80099b2:	b016      	add	sp, #88	; 0x58
 80099b4:	bd70      	pop	{r4, r5, r6, pc}
 80099b6:	466a      	mov	r2, sp
 80099b8:	f000 f848 	bl	8009a4c <_fstat_r>
 80099bc:	2800      	cmp	r0, #0
 80099be:	dbec      	blt.n	800999a <__swhatbuf_r+0x12>
 80099c0:	9901      	ldr	r1, [sp, #4]
 80099c2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80099c6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80099ca:	4259      	negs	r1, r3
 80099cc:	4159      	adcs	r1, r3
 80099ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099d2:	e7eb      	b.n	80099ac <__swhatbuf_r+0x24>

080099d4 <__smakebuf_r>:
 80099d4:	898b      	ldrh	r3, [r1, #12]
 80099d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80099d8:	079d      	lsls	r5, r3, #30
 80099da:	4606      	mov	r6, r0
 80099dc:	460c      	mov	r4, r1
 80099de:	d507      	bpl.n	80099f0 <__smakebuf_r+0x1c>
 80099e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80099e4:	6023      	str	r3, [r4, #0]
 80099e6:	6123      	str	r3, [r4, #16]
 80099e8:	2301      	movs	r3, #1
 80099ea:	6163      	str	r3, [r4, #20]
 80099ec:	b002      	add	sp, #8
 80099ee:	bd70      	pop	{r4, r5, r6, pc}
 80099f0:	ab01      	add	r3, sp, #4
 80099f2:	466a      	mov	r2, sp
 80099f4:	f7ff ffc8 	bl	8009988 <__swhatbuf_r>
 80099f8:	9900      	ldr	r1, [sp, #0]
 80099fa:	4605      	mov	r5, r0
 80099fc:	4630      	mov	r0, r6
 80099fe:	f7fe febd 	bl	800877c <_malloc_r>
 8009a02:	b948      	cbnz	r0, 8009a18 <__smakebuf_r+0x44>
 8009a04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a08:	059a      	lsls	r2, r3, #22
 8009a0a:	d4ef      	bmi.n	80099ec <__smakebuf_r+0x18>
 8009a0c:	f023 0303 	bic.w	r3, r3, #3
 8009a10:	f043 0302 	orr.w	r3, r3, #2
 8009a14:	81a3      	strh	r3, [r4, #12]
 8009a16:	e7e3      	b.n	80099e0 <__smakebuf_r+0xc>
 8009a18:	89a3      	ldrh	r3, [r4, #12]
 8009a1a:	6020      	str	r0, [r4, #0]
 8009a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a20:	81a3      	strh	r3, [r4, #12]
 8009a22:	9b00      	ldr	r3, [sp, #0]
 8009a24:	6163      	str	r3, [r4, #20]
 8009a26:	9b01      	ldr	r3, [sp, #4]
 8009a28:	6120      	str	r0, [r4, #16]
 8009a2a:	b15b      	cbz	r3, 8009a44 <__smakebuf_r+0x70>
 8009a2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a30:	4630      	mov	r0, r6
 8009a32:	f000 f81d 	bl	8009a70 <_isatty_r>
 8009a36:	b128      	cbz	r0, 8009a44 <__smakebuf_r+0x70>
 8009a38:	89a3      	ldrh	r3, [r4, #12]
 8009a3a:	f023 0303 	bic.w	r3, r3, #3
 8009a3e:	f043 0301 	orr.w	r3, r3, #1
 8009a42:	81a3      	strh	r3, [r4, #12]
 8009a44:	89a3      	ldrh	r3, [r4, #12]
 8009a46:	431d      	orrs	r5, r3
 8009a48:	81a5      	strh	r5, [r4, #12]
 8009a4a:	e7cf      	b.n	80099ec <__smakebuf_r+0x18>

08009a4c <_fstat_r>:
 8009a4c:	b538      	push	{r3, r4, r5, lr}
 8009a4e:	4d07      	ldr	r5, [pc, #28]	; (8009a6c <_fstat_r+0x20>)
 8009a50:	2300      	movs	r3, #0
 8009a52:	4604      	mov	r4, r0
 8009a54:	4608      	mov	r0, r1
 8009a56:	4611      	mov	r1, r2
 8009a58:	602b      	str	r3, [r5, #0]
 8009a5a:	f7f8 ffb8 	bl	80029ce <_fstat>
 8009a5e:	1c43      	adds	r3, r0, #1
 8009a60:	d102      	bne.n	8009a68 <_fstat_r+0x1c>
 8009a62:	682b      	ldr	r3, [r5, #0]
 8009a64:	b103      	cbz	r3, 8009a68 <_fstat_r+0x1c>
 8009a66:	6023      	str	r3, [r4, #0]
 8009a68:	bd38      	pop	{r3, r4, r5, pc}
 8009a6a:	bf00      	nop
 8009a6c:	200005e0 	.word	0x200005e0

08009a70 <_isatty_r>:
 8009a70:	b538      	push	{r3, r4, r5, lr}
 8009a72:	4d06      	ldr	r5, [pc, #24]	; (8009a8c <_isatty_r+0x1c>)
 8009a74:	2300      	movs	r3, #0
 8009a76:	4604      	mov	r4, r0
 8009a78:	4608      	mov	r0, r1
 8009a7a:	602b      	str	r3, [r5, #0]
 8009a7c:	f7f8 ffb7 	bl	80029ee <_isatty>
 8009a80:	1c43      	adds	r3, r0, #1
 8009a82:	d102      	bne.n	8009a8a <_isatty_r+0x1a>
 8009a84:	682b      	ldr	r3, [r5, #0]
 8009a86:	b103      	cbz	r3, 8009a8a <_isatty_r+0x1a>
 8009a88:	6023      	str	r3, [r4, #0]
 8009a8a:	bd38      	pop	{r3, r4, r5, pc}
 8009a8c:	200005e0 	.word	0x200005e0

08009a90 <_init>:
 8009a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a92:	bf00      	nop
 8009a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a96:	bc08      	pop	{r3}
 8009a98:	469e      	mov	lr, r3
 8009a9a:	4770      	bx	lr

08009a9c <_fini>:
 8009a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a9e:	bf00      	nop
 8009aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aa2:	bc08      	pop	{r3}
 8009aa4:	469e      	mov	lr, r3
 8009aa6:	4770      	bx	lr
