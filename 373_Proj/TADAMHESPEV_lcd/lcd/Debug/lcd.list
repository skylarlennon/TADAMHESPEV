
lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005200  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b8  080053bc  080053bc  000153bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005974  08005974  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005974  08005974  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005974  08005974  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005974  08005974  00015974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005978  08005978  00015978  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800597c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  20000074  080059f0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  080059f0  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001140e  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025f7  00000000  00000000  000314f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010d0  00000000  00000000  00033af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cfb  00000000  00000000  00034bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002af0a  00000000  00000000  000358bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001320b  00000000  00000000  000607c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00109ab4  00000000  00000000  000739d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000047ac  00000000  00000000  0017d484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  00181c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000074 	.word	0x20000074
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080053a4 	.word	0x080053a4

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000078 	.word	0x20000078
 80001f8:	080053a4 	.word	0x080053a4

080001fc <__aeabi_drsub>:
 80001fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000200:	e002      	b.n	8000208 <__adddf3>
 8000202:	bf00      	nop

08000204 <__aeabi_dsub>:
 8000204:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000208 <__adddf3>:
 8000208:	b530      	push	{r4, r5, lr}
 800020a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800020e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000212:	ea94 0f05 	teq	r4, r5
 8000216:	bf08      	it	eq
 8000218:	ea90 0f02 	teqeq	r0, r2
 800021c:	bf1f      	itttt	ne
 800021e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000222:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000226:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800022e:	f000 80e2 	beq.w	80003f6 <__adddf3+0x1ee>
 8000232:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000236:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023a:	bfb8      	it	lt
 800023c:	426d      	neglt	r5, r5
 800023e:	dd0c      	ble.n	800025a <__adddf3+0x52>
 8000240:	442c      	add	r4, r5
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	ea82 0000 	eor.w	r0, r2, r0
 800024e:	ea83 0101 	eor.w	r1, r3, r1
 8000252:	ea80 0202 	eor.w	r2, r0, r2
 8000256:	ea81 0303 	eor.w	r3, r1, r3
 800025a:	2d36      	cmp	r5, #54	; 0x36
 800025c:	bf88      	it	hi
 800025e:	bd30      	pophi	{r4, r5, pc}
 8000260:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000264:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000268:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800026c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x70>
 8000272:	4240      	negs	r0, r0
 8000274:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000278:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800027c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000280:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x84>
 8000286:	4252      	negs	r2, r2
 8000288:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800028c:	ea94 0f05 	teq	r4, r5
 8000290:	f000 80a7 	beq.w	80003e2 <__adddf3+0x1da>
 8000294:	f1a4 0401 	sub.w	r4, r4, #1
 8000298:	f1d5 0e20 	rsbs	lr, r5, #32
 800029c:	db0d      	blt.n	80002ba <__adddf3+0xb2>
 800029e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a2:	fa22 f205 	lsr.w	r2, r2, r5
 80002a6:	1880      	adds	r0, r0, r2
 80002a8:	f141 0100 	adc.w	r1, r1, #0
 80002ac:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b0:	1880      	adds	r0, r0, r2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	4159      	adcs	r1, r3
 80002b8:	e00e      	b.n	80002d8 <__adddf3+0xd0>
 80002ba:	f1a5 0520 	sub.w	r5, r5, #32
 80002be:	f10e 0e20 	add.w	lr, lr, #32
 80002c2:	2a01      	cmp	r2, #1
 80002c4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002c8:	bf28      	it	cs
 80002ca:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	18c0      	adds	r0, r0, r3
 80002d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002dc:	d507      	bpl.n	80002ee <__adddf3+0xe6>
 80002de:	f04f 0e00 	mov.w	lr, #0
 80002e2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002e6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ea:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f2:	d31b      	bcc.n	800032c <__adddf3+0x124>
 80002f4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002f8:	d30c      	bcc.n	8000314 <__adddf3+0x10c>
 80002fa:	0849      	lsrs	r1, r1, #1
 80002fc:	ea5f 0030 	movs.w	r0, r0, rrx
 8000300:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000304:	f104 0401 	add.w	r4, r4, #1
 8000308:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800030c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000310:	f080 809a 	bcs.w	8000448 <__adddf3+0x240>
 8000314:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000318:	bf08      	it	eq
 800031a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800031e:	f150 0000 	adcs.w	r0, r0, #0
 8000322:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000326:	ea41 0105 	orr.w	r1, r1, r5
 800032a:	bd30      	pop	{r4, r5, pc}
 800032c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000330:	4140      	adcs	r0, r0
 8000332:	eb41 0101 	adc.w	r1, r1, r1
 8000336:	3c01      	subs	r4, #1
 8000338:	bf28      	it	cs
 800033a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800033e:	d2e9      	bcs.n	8000314 <__adddf3+0x10c>
 8000340:	f091 0f00 	teq	r1, #0
 8000344:	bf04      	itt	eq
 8000346:	4601      	moveq	r1, r0
 8000348:	2000      	moveq	r0, #0
 800034a:	fab1 f381 	clz	r3, r1
 800034e:	bf08      	it	eq
 8000350:	3320      	addeq	r3, #32
 8000352:	f1a3 030b 	sub.w	r3, r3, #11
 8000356:	f1b3 0220 	subs.w	r2, r3, #32
 800035a:	da0c      	bge.n	8000376 <__adddf3+0x16e>
 800035c:	320c      	adds	r2, #12
 800035e:	dd08      	ble.n	8000372 <__adddf3+0x16a>
 8000360:	f102 0c14 	add.w	ip, r2, #20
 8000364:	f1c2 020c 	rsb	r2, r2, #12
 8000368:	fa01 f00c 	lsl.w	r0, r1, ip
 800036c:	fa21 f102 	lsr.w	r1, r1, r2
 8000370:	e00c      	b.n	800038c <__adddf3+0x184>
 8000372:	f102 0214 	add.w	r2, r2, #20
 8000376:	bfd8      	it	le
 8000378:	f1c2 0c20 	rsble	ip, r2, #32
 800037c:	fa01 f102 	lsl.w	r1, r1, r2
 8000380:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000384:	bfdc      	itt	le
 8000386:	ea41 010c 	orrle.w	r1, r1, ip
 800038a:	4090      	lslle	r0, r2
 800038c:	1ae4      	subs	r4, r4, r3
 800038e:	bfa2      	ittt	ge
 8000390:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000394:	4329      	orrge	r1, r5
 8000396:	bd30      	popge	{r4, r5, pc}
 8000398:	ea6f 0404 	mvn.w	r4, r4
 800039c:	3c1f      	subs	r4, #31
 800039e:	da1c      	bge.n	80003da <__adddf3+0x1d2>
 80003a0:	340c      	adds	r4, #12
 80003a2:	dc0e      	bgt.n	80003c2 <__adddf3+0x1ba>
 80003a4:	f104 0414 	add.w	r4, r4, #20
 80003a8:	f1c4 0220 	rsb	r2, r4, #32
 80003ac:	fa20 f004 	lsr.w	r0, r0, r4
 80003b0:	fa01 f302 	lsl.w	r3, r1, r2
 80003b4:	ea40 0003 	orr.w	r0, r0, r3
 80003b8:	fa21 f304 	lsr.w	r3, r1, r4
 80003bc:	ea45 0103 	orr.w	r1, r5, r3
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	f1c4 040c 	rsb	r4, r4, #12
 80003c6:	f1c4 0220 	rsb	r2, r4, #32
 80003ca:	fa20 f002 	lsr.w	r0, r0, r2
 80003ce:	fa01 f304 	lsl.w	r3, r1, r4
 80003d2:	ea40 0003 	orr.w	r0, r0, r3
 80003d6:	4629      	mov	r1, r5
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	fa21 f004 	lsr.w	r0, r1, r4
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	f094 0f00 	teq	r4, #0
 80003e6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ea:	bf06      	itte	eq
 80003ec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f0:	3401      	addeq	r4, #1
 80003f2:	3d01      	subne	r5, #1
 80003f4:	e74e      	b.n	8000294 <__adddf3+0x8c>
 80003f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fa:	bf18      	it	ne
 80003fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000400:	d029      	beq.n	8000456 <__adddf3+0x24e>
 8000402:	ea94 0f05 	teq	r4, r5
 8000406:	bf08      	it	eq
 8000408:	ea90 0f02 	teqeq	r0, r2
 800040c:	d005      	beq.n	800041a <__adddf3+0x212>
 800040e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000412:	bf04      	itt	eq
 8000414:	4619      	moveq	r1, r3
 8000416:	4610      	moveq	r0, r2
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	ea91 0f03 	teq	r1, r3
 800041e:	bf1e      	ittt	ne
 8000420:	2100      	movne	r1, #0
 8000422:	2000      	movne	r0, #0
 8000424:	bd30      	popne	{r4, r5, pc}
 8000426:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042a:	d105      	bne.n	8000438 <__adddf3+0x230>
 800042c:	0040      	lsls	r0, r0, #1
 800042e:	4149      	adcs	r1, r1
 8000430:	bf28      	it	cs
 8000432:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000436:	bd30      	pop	{r4, r5, pc}
 8000438:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800043c:	bf3c      	itt	cc
 800043e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000442:	bd30      	popcc	{r4, r5, pc}
 8000444:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000448:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800044c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000450:	f04f 0000 	mov.w	r0, #0
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045a:	bf1a      	itte	ne
 800045c:	4619      	movne	r1, r3
 800045e:	4610      	movne	r0, r2
 8000460:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000464:	bf1c      	itt	ne
 8000466:	460b      	movne	r3, r1
 8000468:	4602      	movne	r2, r0
 800046a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800046e:	bf06      	itte	eq
 8000470:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000474:	ea91 0f03 	teqeq	r1, r3
 8000478:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	bf00      	nop

08000480 <__aeabi_ui2d>:
 8000480:	f090 0f00 	teq	r0, #0
 8000484:	bf04      	itt	eq
 8000486:	2100      	moveq	r1, #0
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000490:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000494:	f04f 0500 	mov.w	r5, #0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e750      	b.n	8000340 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_i2d>:
 80004a0:	f090 0f00 	teq	r0, #0
 80004a4:	bf04      	itt	eq
 80004a6:	2100      	moveq	r1, #0
 80004a8:	4770      	bxeq	lr
 80004aa:	b530      	push	{r4, r5, lr}
 80004ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004b8:	bf48      	it	mi
 80004ba:	4240      	negmi	r0, r0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e73e      	b.n	8000340 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_f2d>:
 80004c4:	0042      	lsls	r2, r0, #1
 80004c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ca:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d2:	bf1f      	itttt	ne
 80004d4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004dc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e0:	4770      	bxne	lr
 80004e2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004e6:	bf08      	it	eq
 80004e8:	4770      	bxeq	lr
 80004ea:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ee:	bf04      	itt	eq
 80004f0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f4:	4770      	bxeq	lr
 80004f6:	b530      	push	{r4, r5, lr}
 80004f8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000500:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000504:	e71c      	b.n	8000340 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_ul2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f04f 0500 	mov.w	r5, #0
 8000516:	e00a      	b.n	800052e <__aeabi_l2d+0x16>

08000518 <__aeabi_l2d>:
 8000518:	ea50 0201 	orrs.w	r2, r0, r1
 800051c:	bf08      	it	eq
 800051e:	4770      	bxeq	lr
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000526:	d502      	bpl.n	800052e <__aeabi_l2d+0x16>
 8000528:	4240      	negs	r0, r0
 800052a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800052e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000532:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000536:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053a:	f43f aed8 	beq.w	80002ee <__adddf3+0xe6>
 800053e:	f04f 0203 	mov.w	r2, #3
 8000542:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000546:	bf18      	it	ne
 8000548:	3203      	addne	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000556:	f1c2 0320 	rsb	r3, r2, #32
 800055a:	fa00 fc03 	lsl.w	ip, r0, r3
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 fe03 	lsl.w	lr, r1, r3
 8000566:	ea40 000e 	orr.w	r0, r0, lr
 800056a:	fa21 f102 	lsr.w	r1, r1, r2
 800056e:	4414      	add	r4, r2
 8000570:	e6bd      	b.n	80002ee <__adddf3+0xe6>
 8000572:	bf00      	nop

08000574 <__aeabi_dmul>:
 8000574:	b570      	push	{r4, r5, r6, lr}
 8000576:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800057e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000582:	bf1d      	ittte	ne
 8000584:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000588:	ea94 0f0c 	teqne	r4, ip
 800058c:	ea95 0f0c 	teqne	r5, ip
 8000590:	f000 f8de 	bleq	8000750 <__aeabi_dmul+0x1dc>
 8000594:	442c      	add	r4, r5
 8000596:	ea81 0603 	eor.w	r6, r1, r3
 800059a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800059e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005a6:	bf18      	it	ne
 80005a8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b4:	d038      	beq.n	8000628 <__aeabi_dmul+0xb4>
 80005b6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ba:	f04f 0500 	mov.w	r5, #0
 80005be:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005c6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ca:	f04f 0600 	mov.w	r6, #0
 80005ce:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d2:	f09c 0f00 	teq	ip, #0
 80005d6:	bf18      	it	ne
 80005d8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005dc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005e8:	d204      	bcs.n	80005f4 <__aeabi_dmul+0x80>
 80005ea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ee:	416d      	adcs	r5, r5
 80005f0:	eb46 0606 	adc.w	r6, r6, r6
 80005f4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005f8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005fc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000600:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000604:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000608:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800060c:	bf88      	it	hi
 800060e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000612:	d81e      	bhi.n	8000652 <__aeabi_dmul+0xde>
 8000614:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000618:	bf08      	it	eq
 800061a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800061e:	f150 0000 	adcs.w	r0, r0, #0
 8000622:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800062c:	ea46 0101 	orr.w	r1, r6, r1
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	ea81 0103 	eor.w	r1, r1, r3
 8000638:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800063c:	bfc2      	ittt	gt
 800063e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000642:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000646:	bd70      	popgt	{r4, r5, r6, pc}
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800064c:	f04f 0e00 	mov.w	lr, #0
 8000650:	3c01      	subs	r4, #1
 8000652:	f300 80ab 	bgt.w	80007ac <__aeabi_dmul+0x238>
 8000656:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065a:	bfde      	ittt	le
 800065c:	2000      	movle	r0, #0
 800065e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000662:	bd70      	pople	{r4, r5, r6, pc}
 8000664:	f1c4 0400 	rsb	r4, r4, #0
 8000668:	3c20      	subs	r4, #32
 800066a:	da35      	bge.n	80006d8 <__aeabi_dmul+0x164>
 800066c:	340c      	adds	r4, #12
 800066e:	dc1b      	bgt.n	80006a8 <__aeabi_dmul+0x134>
 8000670:	f104 0414 	add.w	r4, r4, #20
 8000674:	f1c4 0520 	rsb	r5, r4, #32
 8000678:	fa00 f305 	lsl.w	r3, r0, r5
 800067c:	fa20 f004 	lsr.w	r0, r0, r4
 8000680:	fa01 f205 	lsl.w	r2, r1, r5
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800068c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	fa21 f604 	lsr.w	r6, r1, r4
 8000698:	eb42 0106 	adc.w	r1, r2, r6
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f1c4 040c 	rsb	r4, r4, #12
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f304 	lsl.w	r3, r0, r4
 80006b4:	fa20 f005 	lsr.w	r0, r0, r5
 80006b8:	fa01 f204 	lsl.w	r2, r1, r4
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	f141 0100 	adc.w	r1, r1, #0
 80006cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d0:	bf08      	it	eq
 80006d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d6:	bd70      	pop	{r4, r5, r6, pc}
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f205 	lsl.w	r2, r0, r5
 80006e0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e4:	fa20 f304 	lsr.w	r3, r0, r4
 80006e8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ec:	ea43 0302 	orr.w	r3, r3, r2
 80006f0:	fa21 f004 	lsr.w	r0, r1, r4
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	fa21 f204 	lsr.w	r2, r1, r4
 80006fc:	ea20 0002 	bic.w	r0, r0, r2
 8000700:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f094 0f00 	teq	r4, #0
 8000714:	d10f      	bne.n	8000736 <__aeabi_dmul+0x1c2>
 8000716:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071a:	0040      	lsls	r0, r0, #1
 800071c:	eb41 0101 	adc.w	r1, r1, r1
 8000720:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000724:	bf08      	it	eq
 8000726:	3c01      	subeq	r4, #1
 8000728:	d0f7      	beq.n	800071a <__aeabi_dmul+0x1a6>
 800072a:	ea41 0106 	orr.w	r1, r1, r6
 800072e:	f095 0f00 	teq	r5, #0
 8000732:	bf18      	it	ne
 8000734:	4770      	bxne	lr
 8000736:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073a:	0052      	lsls	r2, r2, #1
 800073c:	eb43 0303 	adc.w	r3, r3, r3
 8000740:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000744:	bf08      	it	eq
 8000746:	3d01      	subeq	r5, #1
 8000748:	d0f7      	beq.n	800073a <__aeabi_dmul+0x1c6>
 800074a:	ea43 0306 	orr.w	r3, r3, r6
 800074e:	4770      	bx	lr
 8000750:	ea94 0f0c 	teq	r4, ip
 8000754:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000758:	bf18      	it	ne
 800075a:	ea95 0f0c 	teqne	r5, ip
 800075e:	d00c      	beq.n	800077a <__aeabi_dmul+0x206>
 8000760:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000764:	bf18      	it	ne
 8000766:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076a:	d1d1      	bne.n	8000710 <__aeabi_dmul+0x19c>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f04f 0000 	mov.w	r0, #0
 8000778:	bd70      	pop	{r4, r5, r6, pc}
 800077a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800077e:	bf06      	itte	eq
 8000780:	4610      	moveq	r0, r2
 8000782:	4619      	moveq	r1, r3
 8000784:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000788:	d019      	beq.n	80007be <__aeabi_dmul+0x24a>
 800078a:	ea94 0f0c 	teq	r4, ip
 800078e:	d102      	bne.n	8000796 <__aeabi_dmul+0x222>
 8000790:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000794:	d113      	bne.n	80007be <__aeabi_dmul+0x24a>
 8000796:	ea95 0f0c 	teq	r5, ip
 800079a:	d105      	bne.n	80007a8 <__aeabi_dmul+0x234>
 800079c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a0:	bf1c      	itt	ne
 80007a2:	4610      	movne	r0, r2
 80007a4:	4619      	movne	r1, r3
 80007a6:	d10a      	bne.n	80007be <__aeabi_dmul+0x24a>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007c6:	bd70      	pop	{r4, r5, r6, pc}

080007c8 <__aeabi_ddiv>:
 80007c8:	b570      	push	{r4, r5, r6, lr}
 80007ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007d6:	bf1d      	ittte	ne
 80007d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007dc:	ea94 0f0c 	teqne	r4, ip
 80007e0:	ea95 0f0c 	teqne	r5, ip
 80007e4:	f000 f8a7 	bleq	8000936 <__aeabi_ddiv+0x16e>
 80007e8:	eba4 0405 	sub.w	r4, r4, r5
 80007ec:	ea81 0e03 	eor.w	lr, r1, r3
 80007f0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007f8:	f000 8088 	beq.w	800090c <__aeabi_ddiv+0x144>
 80007fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000800:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000804:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000808:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800080c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000810:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000814:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000818:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800081c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000820:	429d      	cmp	r5, r3
 8000822:	bf08      	it	eq
 8000824:	4296      	cmpeq	r6, r2
 8000826:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800082e:	d202      	bcs.n	8000836 <__aeabi_ddiv+0x6e>
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	1ab6      	subs	r6, r6, r2
 8000838:	eb65 0503 	sbc.w	r5, r5, r3
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000846:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 000c 	orrcs.w	r0, r0, ip
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000892:	ebb6 0e02 	subs.w	lr, r6, r2
 8000896:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089a:	bf22      	ittt	cs
 800089c:	1ab6      	subcs	r6, r6, r2
 800089e:	4675      	movcs	r5, lr
 80008a0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a4:	ea55 0e06 	orrs.w	lr, r5, r6
 80008a8:	d018      	beq.n	80008dc <__aeabi_ddiv+0x114>
 80008aa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008b6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008be:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008c6:	d1c0      	bne.n	800084a <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	d10b      	bne.n	80008e6 <__aeabi_ddiv+0x11e>
 80008ce:	ea41 0100 	orr.w	r1, r1, r0
 80008d2:	f04f 0000 	mov.w	r0, #0
 80008d6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008da:	e7b6      	b.n	800084a <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	bf04      	itt	eq
 80008e2:	4301      	orreq	r1, r0
 80008e4:	2000      	moveq	r0, #0
 80008e6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ea:	bf88      	it	hi
 80008ec:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f0:	f63f aeaf 	bhi.w	8000652 <__aeabi_dmul+0xde>
 80008f4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008f8:	bf04      	itt	eq
 80008fa:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000902:	f150 0000 	adcs.w	r0, r0, #0
 8000906:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090a:	bd70      	pop	{r4, r5, r6, pc}
 800090c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000910:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000914:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000918:	bfc2      	ittt	gt
 800091a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800091e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000922:	bd70      	popgt	{r4, r5, r6, pc}
 8000924:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000928:	f04f 0e00 	mov.w	lr, #0
 800092c:	3c01      	subs	r4, #1
 800092e:	e690      	b.n	8000652 <__aeabi_dmul+0xde>
 8000930:	ea45 0e06 	orr.w	lr, r5, r6
 8000934:	e68d      	b.n	8000652 <__aeabi_dmul+0xde>
 8000936:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093a:	ea94 0f0c 	teq	r4, ip
 800093e:	bf08      	it	eq
 8000940:	ea95 0f0c 	teqeq	r5, ip
 8000944:	f43f af3b 	beq.w	80007be <__aeabi_dmul+0x24a>
 8000948:	ea94 0f0c 	teq	r4, ip
 800094c:	d10a      	bne.n	8000964 <__aeabi_ddiv+0x19c>
 800094e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000952:	f47f af34 	bne.w	80007be <__aeabi_dmul+0x24a>
 8000956:	ea95 0f0c 	teq	r5, ip
 800095a:	f47f af25 	bne.w	80007a8 <__aeabi_dmul+0x234>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e72c      	b.n	80007be <__aeabi_dmul+0x24a>
 8000964:	ea95 0f0c 	teq	r5, ip
 8000968:	d106      	bne.n	8000978 <__aeabi_ddiv+0x1b0>
 800096a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800096e:	f43f aefd 	beq.w	800076c <__aeabi_dmul+0x1f8>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e722      	b.n	80007be <__aeabi_dmul+0x24a>
 8000978:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800097c:	bf18      	it	ne
 800097e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000982:	f47f aec5 	bne.w	8000710 <__aeabi_dmul+0x19c>
 8000986:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098a:	f47f af0d 	bne.w	80007a8 <__aeabi_dmul+0x234>
 800098e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000992:	f47f aeeb 	bne.w	800076c <__aeabi_dmul+0x1f8>
 8000996:	e712      	b.n	80007be <__aeabi_dmul+0x24a>

08000998 <__aeabi_d2iz>:
 8000998:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800099c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009a0:	d215      	bcs.n	80009ce <__aeabi_d2iz+0x36>
 80009a2:	d511      	bpl.n	80009c8 <__aeabi_d2iz+0x30>
 80009a4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009a8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009ac:	d912      	bls.n	80009d4 <__aeabi_d2iz+0x3c>
 80009ae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009b6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009be:	fa23 f002 	lsr.w	r0, r3, r2
 80009c2:	bf18      	it	ne
 80009c4:	4240      	negne	r0, r0
 80009c6:	4770      	bx	lr
 80009c8:	f04f 0000 	mov.w	r0, #0
 80009cc:	4770      	bx	lr
 80009ce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009d2:	d105      	bne.n	80009e0 <__aeabi_d2iz+0x48>
 80009d4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009d8:	bf08      	it	eq
 80009da:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009de:	4770      	bx	lr
 80009e0:	f04f 0000 	mov.w	r0, #0
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <uint16_to_bytes>:
#include "stm32l4xx_hal.h"
#include <stdlib.h>

// Probably going to move these to a different file, but for now
void uint16_to_bytes(uint16_t in, uint8_t *out)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	6039      	str	r1, [r7, #0]
 80009f2:	80fb      	strh	r3, [r7, #6]
	out[0] = (in >> 8) & 0xFF;
 80009f4:	88fb      	ldrh	r3, [r7, #6]
 80009f6:	0a1b      	lsrs	r3, r3, #8
 80009f8:	b29b      	uxth	r3, r3
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	701a      	strb	r2, [r3, #0]
	out[1] = in & 0xFF;
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	3301      	adds	r3, #1
 8000a04:	88fa      	ldrh	r2, [r7, #6]
 8000a06:	b2d2      	uxtb	r2, r2
 8000a08:	701a      	strb	r2, [r3, #0]
}
 8000a0a:	bf00      	nop
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
	...

08000a18 <LCD_reset>:
	HX8357_DISPON, 0x80 +  50/5, // Main screen turn on, delay 50 ms
	0,                           // END OF COMMAND LIST
  };

void LCD_reset()
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a22:	480d      	ldr	r0, [pc, #52]	; (8000a58 <LCD_reset+0x40>)
 8000a24:	f001 fdbe 	bl	80025a4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000a28:	2064      	movs	r0, #100	; 0x64
 8000a2a:	f001 fb23 	bl	8002074 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a34:	4808      	ldr	r0, [pc, #32]	; (8000a58 <LCD_reset+0x40>)
 8000a36:	f001 fdb5 	bl	80025a4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000a3a:	2064      	movs	r0, #100	; 0x64
 8000a3c:	f001 fb1a 	bl	8002074 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8000a40:	2201      	movs	r2, #1
 8000a42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a46:	4804      	ldr	r0, [pc, #16]	; (8000a58 <LCD_reset+0x40>)
 8000a48:	f001 fdac 	bl	80025a4 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000a4c:	20c8      	movs	r0, #200	; 0xc8
 8000a4e:	f001 fb11 	bl	8002074 <HAL_Delay>
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	48001400 	.word	0x48001400

08000a5c <LCD_writeCommand>:

HAL_StatusTypeDef LCD_writeCommand(SPI_HandleTypeDef* spi, uint8_t cmd)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af02      	add	r7, sp, #8
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	460b      	mov	r3, r1
 8000a66:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef result;
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a6e:	480c      	ldr	r0, [pc, #48]	; (8000aa0 <LCD_writeCommand+0x44>)
 8000a70:	f001 fd98 	bl	80025a4 <HAL_GPIO_WritePin>
	uint8_t buf[1];
	result = HAL_SPI_TransmitReceive(spi, &cmd, &buf[0], 1, 100);
 8000a74:	f107 020c 	add.w	r2, r7, #12
 8000a78:	1cf9      	adds	r1, r7, #3
 8000a7a:	2364      	movs	r3, #100	; 0x64
 8000a7c:	9300      	str	r3, [sp, #0]
 8000a7e:	2301      	movs	r3, #1
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f003 fdcd 	bl	8004620 <HAL_SPI_TransmitReceive>
 8000a86:	4603      	mov	r3, r0
 8000a88:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a90:	4803      	ldr	r0, [pc, #12]	; (8000aa0 <LCD_writeCommand+0x44>)
 8000a92:	f001 fd87 	bl	80025a4 <HAL_GPIO_WritePin>
	return result;
 8000a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3710      	adds	r7, #16
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	48001400 	.word	0x48001400

08000aa4 <LCD_startWrite>:

void LCD_startWrite()
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aae:	4802      	ldr	r0, [pc, #8]	; (8000ab8 <LCD_startWrite+0x14>)
 8000ab0:	f001 fd78 	bl	80025a4 <HAL_GPIO_WritePin>
}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	48001400 	.word	0x48001400

08000abc <LCD_endWrite>:

void LCD_endWrite()
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ac6:	4802      	ldr	r0, [pc, #8]	; (8000ad0 <LCD_endWrite+0x14>)
 8000ac8:	f001 fd6c 	bl	80025a4 <HAL_GPIO_WritePin>
}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	48001400 	.word	0x48001400

08000ad4 <LCD_begin>:

int LCD_begin(SPI_HandleTypeDef* spi)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
	LCD_reset();
 8000adc:	f7ff ff9c 	bl	8000a18 <LCD_reset>
	LCD_startWrite();
 8000ae0:	f7ff ffe0 	bl	8000aa4 <LCD_startWrite>
	uint8_t *addr = init;
 8000ae4:	4b26      	ldr	r3, [pc, #152]	; (8000b80 <LCD_begin+0xac>)
 8000ae6:	60fb      	str	r3, [r7, #12]
	uint8_t cmd, x, numArgs;
	HAL_StatusTypeDef result;
	while((cmd = *(addr++)) > 0) // '0' command ends list
 8000ae8:	e03b      	b.n	8000b62 <LCD_begin+0x8e>
	{
		if (cmd != 0xFF) // '255' is ignored
 8000aea:	7abb      	ldrb	r3, [r7, #10]
 8000aec:	2bff      	cmp	r3, #255	; 0xff
 8000aee:	d00d      	beq.n	8000b0c <LCD_begin+0x38>
		{
			result = LCD_writeCommand(spi, cmd);
 8000af0:	7abb      	ldrb	r3, [r7, #10]
 8000af2:	4619      	mov	r1, r3
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f7ff ffb1 	bl	8000a5c <LCD_writeCommand>
 8000afa:	4603      	mov	r3, r0
 8000afc:	727b      	strb	r3, [r7, #9]
			if (result != HAL_OK)
 8000afe:	7a7b      	ldrb	r3, [r7, #9]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d003      	beq.n	8000b0c <LCD_begin+0x38>
			{
				LCD_endWrite();
 8000b04:	f7ff ffda 	bl	8000abc <LCD_endWrite>
				return 0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	e035      	b.n	8000b78 <LCD_begin+0xa4>
			}
		}
		x = *(addr++);
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	1c5a      	adds	r2, r3, #1
 8000b10:	60fa      	str	r2, [r7, #12]
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	723b      	strb	r3, [r7, #8]
		numArgs = x & 0x7F;
 8000b16:	7a3b      	ldrb	r3, [r7, #8]
 8000b18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b1c:	72fb      	strb	r3, [r7, #11]
		if (x & 0x80) // If high bit set...
 8000b1e:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	da18      	bge.n	8000b58 <LCD_begin+0x84>
		{
			HAL_Delay(numArgs * 5); // numArgs is actually a delay time (5ms units)
 8000b26:	7afa      	ldrb	r2, [r7, #11]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	4413      	add	r3, r2
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f001 faa0 	bl	8002074 <HAL_Delay>
 8000b34:	e015      	b.n	8000b62 <LCD_begin+0x8e>
		}
		else // Otherwise, issue args to command...
		{
			while (numArgs--)
			{
				result = HAL_SPI_Transmit(spi, addr++, 1, 100);
 8000b36:	68f9      	ldr	r1, [r7, #12]
 8000b38:	1c4b      	adds	r3, r1, #1
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	2364      	movs	r3, #100	; 0x64
 8000b3e:	2201      	movs	r2, #1
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f003 fbf8 	bl	8004336 <HAL_SPI_Transmit>
 8000b46:	4603      	mov	r3, r0
 8000b48:	727b      	strb	r3, [r7, #9]
				if (result != HAL_OK)
 8000b4a:	7a7b      	ldrb	r3, [r7, #9]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d003      	beq.n	8000b58 <LCD_begin+0x84>
				{
					LCD_endWrite();
 8000b50:	f7ff ffb4 	bl	8000abc <LCD_endWrite>
					return 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	e00f      	b.n	8000b78 <LCD_begin+0xa4>
			while (numArgs--)
 8000b58:	7afb      	ldrb	r3, [r7, #11]
 8000b5a:	1e5a      	subs	r2, r3, #1
 8000b5c:	72fa      	strb	r2, [r7, #11]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d1e9      	bne.n	8000b36 <LCD_begin+0x62>
	while((cmd = *(addr++)) > 0) // '0' command ends list
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	1c5a      	adds	r2, r3, #1
 8000b66:	60fa      	str	r2, [r7, #12]
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	72bb      	strb	r3, [r7, #10]
 8000b6c:	7abb      	ldrb	r3, [r7, #10]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d1bb      	bne.n	8000aea <LCD_begin+0x16>
				}
			}
		}
	}
	LCD_endWrite();
 8000b72:	f7ff ffa3 	bl	8000abc <LCD_endWrite>
	return 1;
 8000b76:	2301      	movs	r3, #1
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000000 	.word	0x20000000

08000b84 <LCD_setAddrWindow>:
	LCD_endWrite();
	return result == HAL_OK;
}

int LCD_setAddrWindow(SPI_HandleTypeDef* spi, uint16_t x1, uint16_t y1, uint16_t w, uint16_t h)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	4608      	mov	r0, r1
 8000b8e:	4611      	mov	r1, r2
 8000b90:	461a      	mov	r2, r3
 8000b92:	4603      	mov	r3, r0
 8000b94:	817b      	strh	r3, [r7, #10]
 8000b96:	460b      	mov	r3, r1
 8000b98:	813b      	strh	r3, [r7, #8]
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	80fb      	strh	r3, [r7, #6]
	uint16_t x2 = x1 + w - 1;
 8000b9e:	897a      	ldrh	r2, [r7, #10]
 8000ba0:	88fb      	ldrh	r3, [r7, #6]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	82fb      	strh	r3, [r7, #22]
	uint16_t y2 = y1 + h - 1;
 8000baa:	893a      	ldrh	r2, [r7, #8]
 8000bac:	8c3b      	ldrh	r3, [r7, #32]
 8000bae:	4413      	add	r3, r2
 8000bb0:	b29b      	uxth	r3, r3
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	82bb      	strh	r3, [r7, #20]
	uint8_t buf[2];

	LCD_startWrite();
 8000bb6:	f7ff ff75 	bl	8000aa4 <LCD_startWrite>
	LCD_writeCommand(spi, HX8357_CASET); // Column address set
 8000bba:	212a      	movs	r1, #42	; 0x2a
 8000bbc:	68f8      	ldr	r0, [r7, #12]
 8000bbe:	f7ff ff4d 	bl	8000a5c <LCD_writeCommand>

	uint16_to_bytes(x1, buf);
 8000bc2:	f107 0210 	add.w	r2, r7, #16
 8000bc6:	897b      	ldrh	r3, [r7, #10]
 8000bc8:	4611      	mov	r1, r2
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff ff0c 	bl	80009e8 <uint16_to_bytes>
	HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 8000bd0:	f107 0110 	add.w	r1, r7, #16
 8000bd4:	2364      	movs	r3, #100	; 0x64
 8000bd6:	2202      	movs	r2, #2
 8000bd8:	68f8      	ldr	r0, [r7, #12]
 8000bda:	f003 fbac 	bl	8004336 <HAL_SPI_Transmit>

	uint16_to_bytes(x2, buf);
 8000bde:	f107 0210 	add.w	r2, r7, #16
 8000be2:	8afb      	ldrh	r3, [r7, #22]
 8000be4:	4611      	mov	r1, r2
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff fefe 	bl	80009e8 <uint16_to_bytes>
	HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 8000bec:	f107 0110 	add.w	r1, r7, #16
 8000bf0:	2364      	movs	r3, #100	; 0x64
 8000bf2:	2202      	movs	r2, #2
 8000bf4:	68f8      	ldr	r0, [r7, #12]
 8000bf6:	f003 fb9e 	bl	8004336 <HAL_SPI_Transmit>

	LCD_writeCommand(spi, HX8357_PASET); // Row address set
 8000bfa:	212b      	movs	r1, #43	; 0x2b
 8000bfc:	68f8      	ldr	r0, [r7, #12]
 8000bfe:	f7ff ff2d 	bl	8000a5c <LCD_writeCommand>

	uint16_to_bytes(y1, buf);
 8000c02:	f107 0210 	add.w	r2, r7, #16
 8000c06:	893b      	ldrh	r3, [r7, #8]
 8000c08:	4611      	mov	r1, r2
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff feec 	bl	80009e8 <uint16_to_bytes>
	HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 8000c10:	f107 0110 	add.w	r1, r7, #16
 8000c14:	2364      	movs	r3, #100	; 0x64
 8000c16:	2202      	movs	r2, #2
 8000c18:	68f8      	ldr	r0, [r7, #12]
 8000c1a:	f003 fb8c 	bl	8004336 <HAL_SPI_Transmit>

	uint16_to_bytes(y2, buf);
 8000c1e:	f107 0210 	add.w	r2, r7, #16
 8000c22:	8abb      	ldrh	r3, [r7, #20]
 8000c24:	4611      	mov	r1, r2
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff fede 	bl	80009e8 <uint16_to_bytes>
	HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 8000c2c:	f107 0110 	add.w	r1, r7, #16
 8000c30:	2364      	movs	r3, #100	; 0x64
 8000c32:	2202      	movs	r2, #2
 8000c34:	68f8      	ldr	r0, [r7, #12]
 8000c36:	f003 fb7e 	bl	8004336 <HAL_SPI_Transmit>

	LCD_endWrite();
 8000c3a:	f7ff ff3f 	bl	8000abc <LCD_endWrite>
	return 1;
 8000c3e:	2301      	movs	r3, #1
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3718      	adds	r7, #24
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <LCD_color565>:

uint16_t LCD_color565(uint8_t red, uint8_t green, uint8_t blue) {
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
 8000c52:	460b      	mov	r3, r1
 8000c54:	71bb      	strb	r3, [r7, #6]
 8000c56:	4613      	mov	r3, r2
 8000c58:	717b      	strb	r3, [r7, #5]
    return ((red & 0xF8) << 8) | ((green & 0xFC) << 3) | ((blue & 0xF8) >> 3);
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	021b      	lsls	r3, r3, #8
 8000c5e:	b21b      	sxth	r3, r3
 8000c60:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000c64:	f023 0307 	bic.w	r3, r3, #7
 8000c68:	b21a      	sxth	r2, r3
 8000c6a:	79bb      	ldrb	r3, [r7, #6]
 8000c6c:	00db      	lsls	r3, r3, #3
 8000c6e:	b21b      	sxth	r3, r3
 8000c70:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8000c74:	b21b      	sxth	r3, r3
 8000c76:	4313      	orrs	r3, r2
 8000c78:	b21a      	sxth	r2, r3
 8000c7a:	797b      	ldrb	r3, [r7, #5]
 8000c7c:	08db      	lsrs	r3, r3, #3
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	b21b      	sxth	r3, r3
 8000c82:	4313      	orrs	r3, r2
 8000c84:	b21b      	sxth	r3, r3
 8000c86:	b29b      	uxth	r3, r3
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <LCD_pushColor>:

int LCD_pushColor(SPI_HandleTypeDef* spi, uint16_t color) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	807b      	strh	r3, [r7, #2]
	LCD_startWrite();
 8000ca0:	f7ff ff00 	bl	8000aa4 <LCD_startWrite>
	LCD_writeCommand(spi, HX8357_RAMWR); // Write to RAM
 8000ca4:	212c      	movs	r1, #44	; 0x2c
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f7ff fed8 	bl	8000a5c <LCD_writeCommand>
	HAL_SPI_Transmit(spi, (uint8_t*)&color, 2, 100);
 8000cac:	1cb9      	adds	r1, r7, #2
 8000cae:	2364      	movs	r3, #100	; 0x64
 8000cb0:	2202      	movs	r2, #2
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f003 fb3f 	bl	8004336 <HAL_SPI_Transmit>
	LCD_writeCommand(spi, HX8357_NOP); // Write command to stop RAMWR
 8000cb8:	2100      	movs	r1, #0
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	f7ff fece 	bl	8000a5c <LCD_writeCommand>
	LCD_endWrite();
 8000cc0:	f7ff fefc 	bl	8000abc <LCD_endWrite>
	return 1;
 8000cc4:	2301      	movs	r3, #1
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <LCD_pushColorCopy>:

int LCD_pushColorCopy(SPI_HandleTypeDef* spi, uint16_t color, uint32_t count) {
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b086      	sub	sp, #24
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	60f8      	str	r0, [r7, #12]
 8000cd6:	460b      	mov	r3, r1
 8000cd8:	607a      	str	r2, [r7, #4]
 8000cda:	817b      	strh	r3, [r7, #10]
	LCD_startWrite();
 8000cdc:	f7ff fee2 	bl	8000aa4 <LCD_startWrite>

	LCD_writeCommand(spi, HX8357_RAMWR); // Write to RAM
 8000ce0:	212c      	movs	r1, #44	; 0x2c
 8000ce2:	68f8      	ldr	r0, [r7, #12]
 8000ce4:	f7ff feba 	bl	8000a5c <LCD_writeCommand>

	uint8_t buf[2];
	uint16_to_bytes(color, &buf[0]);
 8000ce8:	f107 0210 	add.w	r2, r7, #16
 8000cec:	897b      	ldrh	r3, [r7, #10]
 8000cee:	4611      	mov	r1, r2
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fe79 	bl	80009e8 <uint16_to_bytes>
	for (int i = 0; i < count; ++i)
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	617b      	str	r3, [r7, #20]
 8000cfa:	e009      	b.n	8000d10 <LCD_pushColorCopy+0x42>
	{
		HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 8000cfc:	f107 0110 	add.w	r1, r7, #16
 8000d00:	2364      	movs	r3, #100	; 0x64
 8000d02:	2202      	movs	r2, #2
 8000d04:	68f8      	ldr	r0, [r7, #12]
 8000d06:	f003 fb16 	bl	8004336 <HAL_SPI_Transmit>
	for (int i = 0; i < count; ++i)
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d8f1      	bhi.n	8000cfc <LCD_pushColorCopy+0x2e>
	}

	LCD_writeCommand(spi, HX8357_NOP); // Write command to stop RAMWR
 8000d18:	2100      	movs	r1, #0
 8000d1a:	68f8      	ldr	r0, [r7, #12]
 8000d1c:	f7ff fe9e 	bl	8000a5c <LCD_writeCommand>

	LCD_endWrite();
 8000d20:	f7ff fecc 	bl	8000abc <LCD_endWrite>
	return 1;
 8000d24:	2301      	movs	r3, #1
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3718      	adds	r7, #24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <LCD_writePixel>:

	LCD_endWrite();
	return 1;
}

int LCD_writePixel(SPI_HandleTypeDef* spi, int16_t x, int16_t y, uint16_t color) {
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b086      	sub	sp, #24
 8000d32:	af02      	add	r7, sp, #8
 8000d34:	60f8      	str	r0, [r7, #12]
 8000d36:	4608      	mov	r0, r1
 8000d38:	4611      	mov	r1, r2
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	817b      	strh	r3, [r7, #10]
 8000d40:	460b      	mov	r3, r1
 8000d42:	813b      	strh	r3, [r7, #8]
 8000d44:	4613      	mov	r3, r2
 8000d46:	80fb      	strh	r3, [r7, #6]
    if ((x < 0) ||(x >= HX8357_TFTWIDTH) || (y < 0) || (y >= HX8357_TFTHEIGHT)) return 0;
 8000d48:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	db0d      	blt.n	8000d6c <LCD_writePixel+0x3e>
 8000d50:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000d54:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000d58:	da08      	bge.n	8000d6c <LCD_writePixel+0x3e>
 8000d5a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	db04      	blt.n	8000d6c <LCD_writePixel+0x3e>
 8000d62:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000d66:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000d6a:	db01      	blt.n	8000d70 <LCD_writePixel+0x42>
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	e017      	b.n	8000da0 <LCD_writePixel+0x72>
    if(!LCD_setAddrWindow(spi, x, y, 1, 1)) return 0;
 8000d70:	8979      	ldrh	r1, [r7, #10]
 8000d72:	893a      	ldrh	r2, [r7, #8]
 8000d74:	2301      	movs	r3, #1
 8000d76:	9300      	str	r3, [sp, #0]
 8000d78:	2301      	movs	r3, #1
 8000d7a:	68f8      	ldr	r0, [r7, #12]
 8000d7c:	f7ff ff02 	bl	8000b84 <LCD_setAddrWindow>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d101      	bne.n	8000d8a <LCD_writePixel+0x5c>
 8000d86:	2300      	movs	r3, #0
 8000d88:	e00a      	b.n	8000da0 <LCD_writePixel+0x72>
    if (!LCD_pushColor(spi, color)) return 0;
 8000d8a:	88fb      	ldrh	r3, [r7, #6]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	68f8      	ldr	r0, [r7, #12]
 8000d90:	f7ff ff80 	bl	8000c94 <LCD_pushColor>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d101      	bne.n	8000d9e <LCD_writePixel+0x70>
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	e000      	b.n	8000da0 <LCD_writePixel+0x72>
    return 1;
 8000d9e:	2301      	movs	r3, #1
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3710      	adds	r7, #16
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <LCD_writePixels>:

// Length of colors array must be w * h
int LCD_writePixels(SPI_HandleTypeDef* spi, uint16_t color,
					int16_t x, int16_t y, int16_t w, int16_t h)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af02      	add	r7, sp, #8
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	4608      	mov	r0, r1
 8000db2:	4611      	mov	r1, r2
 8000db4:	461a      	mov	r2, r3
 8000db6:	4603      	mov	r3, r0
 8000db8:	817b      	strh	r3, [r7, #10]
 8000dba:	460b      	mov	r3, r1
 8000dbc:	813b      	strh	r3, [r7, #8]
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	80fb      	strh	r3, [r7, #6]
	if ((x < 0) ||(x >= HX8357_TFTWIDTH) || (y < 0) || (y >= HX8357_TFTHEIGHT)) return 0;
 8000dc2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	db0d      	blt.n	8000de6 <LCD_writePixels+0x3e>
 8000dca:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000dce:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000dd2:	da08      	bge.n	8000de6 <LCD_writePixels+0x3e>
 8000dd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	db04      	blt.n	8000de6 <LCD_writePixels+0x3e>
 8000ddc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000de0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000de4:	db01      	blt.n	8000dea <LCD_writePixels+0x42>
 8000de6:	2300      	movs	r3, #0
 8000de8:	e01f      	b.n	8000e2a <LCD_writePixels+0x82>
	if(!LCD_setAddrWindow(spi, x, y, w, h)) return 0;
 8000dea:	8939      	ldrh	r1, [r7, #8]
 8000dec:	88fa      	ldrh	r2, [r7, #6]
 8000dee:	8b38      	ldrh	r0, [r7, #24]
 8000df0:	8bbb      	ldrh	r3, [r7, #28]
 8000df2:	9300      	str	r3, [sp, #0]
 8000df4:	4603      	mov	r3, r0
 8000df6:	68f8      	ldr	r0, [r7, #12]
 8000df8:	f7ff fec4 	bl	8000b84 <LCD_setAddrWindow>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d101      	bne.n	8000e06 <LCD_writePixels+0x5e>
 8000e02:	2300      	movs	r3, #0
 8000e04:	e011      	b.n	8000e2a <LCD_writePixels+0x82>
	if (!LCD_pushColorCopy(spi, color, w*h)) return 0;
 8000e06:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000e0a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8000e0e:	fb02 f303 	mul.w	r3, r2, r3
 8000e12:	461a      	mov	r2, r3
 8000e14:	897b      	ldrh	r3, [r7, #10]
 8000e16:	4619      	mov	r1, r3
 8000e18:	68f8      	ldr	r0, [r7, #12]
 8000e1a:	f7ff ff58 	bl	8000cce <LCD_pushColorCopy>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d101      	bne.n	8000e28 <LCD_writePixels+0x80>
 8000e24:	2300      	movs	r3, #0
 8000e26:	e000      	b.n	8000e2a <LCD_writePixels+0x82>
	return 1;
 8000e28:	2301      	movs	r3, #1
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
	...

08000e34 <LCD_drawChar>:
		0x70, 0x1C, 0x07, 0x1C, 0x70,
		0x0E, 0x38, 0xE0, 0x38, 0x0E
};

void LCD_drawChar(SPI_HandleTypeDef* spi, int16_t x, int16_t y, unsigned char c, uint16_t color, uint32_t size)
{
 8000e34:	b590      	push	{r4, r7, lr}
 8000e36:	b089      	sub	sp, #36	; 0x24
 8000e38:	af02      	add	r7, sp, #8
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	4611      	mov	r1, r2
 8000e40:	461a      	mov	r2, r3
 8000e42:	4603      	mov	r3, r0
 8000e44:	817b      	strh	r3, [r7, #10]
 8000e46:	460b      	mov	r3, r1
 8000e48:	813b      	strh	r3, [r7, #8]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	71fb      	strb	r3, [r7, #7]
	if((x >= HX8357_TFTWIDTH)   || // Clip right
 8000e4e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000e52:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000e56:	f280 80b5 	bge.w	8000fc4 <LCD_drawChar+0x190>
	   (y >= HX8357_TFTHEIGHT)  || // Clip bottom
	   ((x + 6 * size - 1) < 0) || // Clip left
 8000e5a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000e5e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000e62:	f280 80af 	bge.w	8000fc4 <LCD_drawChar+0x190>
	   ((y + 8 * size - 1) < 0))   // Clip top
		return;

	uint16_t bg = LCD_color565(255, 255, 255);
 8000e66:	22ff      	movs	r2, #255	; 0xff
 8000e68:	21ff      	movs	r1, #255	; 0xff
 8000e6a:	20ff      	movs	r0, #255	; 0xff
 8000e6c:	f7ff feec 	bl	8000c48 <LCD_color565>
 8000e70:	4603      	mov	r3, r0
 8000e72:	827b      	strh	r3, [r7, #18]
	LCD_startWrite();
 8000e74:	f7ff fe16 	bl	8000aa4 <LCD_startWrite>
	for(int8_t i = 0; i < 5; i++) // Char bitmap = 5 columns
 8000e78:	2300      	movs	r3, #0
 8000e7a:	75fb      	strb	r3, [r7, #23]
 8000e7c:	e09a      	b.n	8000fb4 <LCD_drawChar+0x180>
	{
		uint8_t line = font[c * 5 + i];
 8000e7e:	79fa      	ldrb	r2, [r7, #7]
 8000e80:	4613      	mov	r3, r2
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	441a      	add	r2, r3
 8000e86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	4a4f      	ldr	r2, [pc, #316]	; (8000fcc <LCD_drawChar+0x198>)
 8000e8e:	5cd3      	ldrb	r3, [r2, r3]
 8000e90:	75bb      	strb	r3, [r7, #22]
		for(int8_t j = 0; j < 8; j++, line >>= 1)
 8000e92:	2300      	movs	r3, #0
 8000e94:	757b      	strb	r3, [r7, #21]
 8000e96:	e082      	b.n	8000f9e <LCD_drawChar+0x16a>
		{
			if (line & 1)
 8000e98:	7dbb      	ldrb	r3, [r7, #22]
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d03a      	beq.n	8000f18 <LCD_drawChar+0xe4>
			{
				if (size == 1) LCD_writePixel(spi, x+i, y+j, color);
 8000ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d112      	bne.n	8000ece <LCD_drawChar+0x9a>
 8000ea8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000eac:	b29a      	uxth	r2, r3
 8000eae:	897b      	ldrh	r3, [r7, #10]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	b219      	sxth	r1, r3
 8000eb6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000eba:	b29a      	uxth	r2, r3
 8000ebc:	893b      	ldrh	r3, [r7, #8]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	b21a      	sxth	r2, r3
 8000ec4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000ec6:	68f8      	ldr	r0, [r7, #12]
 8000ec8:	f7ff ff31 	bl	8000d2e <LCD_writePixel>
 8000ecc:	e05e      	b.n	8000f8c <LCD_drawChar+0x158>
				else LCD_writePixels(spi, color, x+i*size, y+j*size, size, size);
 8000ece:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	fb12 f303 	smulbb	r3, r2, r3
 8000edc:	b29a      	uxth	r2, r3
 8000ede:	897b      	ldrh	r3, [r7, #10]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	b218      	sxth	r0, r3
 8000ee6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000eea:	b29a      	uxth	r2, r3
 8000eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	fb12 f303 	smulbb	r3, r2, r3
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	893b      	ldrh	r3, [r7, #8]
 8000ef8:	4413      	add	r3, r2
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	b21c      	sxth	r4, r3
 8000efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f00:	b21b      	sxth	r3, r3
 8000f02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f04:	b212      	sxth	r2, r2
 8000f06:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000f08:	9201      	str	r2, [sp, #4]
 8000f0a:	9300      	str	r3, [sp, #0]
 8000f0c:	4623      	mov	r3, r4
 8000f0e:	4602      	mov	r2, r0
 8000f10:	68f8      	ldr	r0, [r7, #12]
 8000f12:	f7ff ff49 	bl	8000da8 <LCD_writePixels>
 8000f16:	e039      	b.n	8000f8c <LCD_drawChar+0x158>
			}
			else
			{
				if (size == 1) LCD_writePixel(spi, x+i, y+j, bg);
 8000f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d112      	bne.n	8000f44 <LCD_drawChar+0x110>
 8000f1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f22:	b29a      	uxth	r2, r3
 8000f24:	897b      	ldrh	r3, [r7, #10]
 8000f26:	4413      	add	r3, r2
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	b219      	sxth	r1, r3
 8000f2c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	893b      	ldrh	r3, [r7, #8]
 8000f34:	4413      	add	r3, r2
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	b21a      	sxth	r2, r3
 8000f3a:	8a7b      	ldrh	r3, [r7, #18]
 8000f3c:	68f8      	ldr	r0, [r7, #12]
 8000f3e:	f7ff fef6 	bl	8000d2e <LCD_writePixel>
 8000f42:	e023      	b.n	8000f8c <LCD_drawChar+0x158>
				else LCD_writePixels(spi, bg, x+i*size, y+j*size, size, size);
 8000f44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f48:	b29a      	uxth	r2, r3
 8000f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	fb12 f303 	smulbb	r3, r2, r3
 8000f52:	b29a      	uxth	r2, r3
 8000f54:	897b      	ldrh	r3, [r7, #10]
 8000f56:	4413      	add	r3, r2
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	b218      	sxth	r0, r3
 8000f5c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	fb12 f303 	smulbb	r3, r2, r3
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	893b      	ldrh	r3, [r7, #8]
 8000f6e:	4413      	add	r3, r2
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	b21c      	sxth	r4, r3
 8000f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f76:	b21b      	sxth	r3, r3
 8000f78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f7a:	b212      	sxth	r2, r2
 8000f7c:	8a79      	ldrh	r1, [r7, #18]
 8000f7e:	9201      	str	r2, [sp, #4]
 8000f80:	9300      	str	r3, [sp, #0]
 8000f82:	4623      	mov	r3, r4
 8000f84:	4602      	mov	r2, r0
 8000f86:	68f8      	ldr	r0, [r7, #12]
 8000f88:	f7ff ff0e 	bl	8000da8 <LCD_writePixels>
		for(int8_t j = 0; j < 8; j++, line >>= 1)
 8000f8c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	3301      	adds	r3, #1
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	757b      	strb	r3, [r7, #21]
 8000f98:	7dbb      	ldrb	r3, [r7, #22]
 8000f9a:	085b      	lsrs	r3, r3, #1
 8000f9c:	75bb      	strb	r3, [r7, #22]
 8000f9e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000fa2:	2b07      	cmp	r3, #7
 8000fa4:	f77f af78 	ble.w	8000e98 <LCD_drawChar+0x64>
	for(int8_t i = 0; i < 5; i++) // Char bitmap = 5 columns
 8000fa8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	3301      	adds	r3, #1
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	75fb      	strb	r3, [r7, #23]
 8000fb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000fb8:	2b04      	cmp	r3, #4
 8000fba:	f77f af60 	ble.w	8000e7e <LCD_drawChar+0x4a>
			}
		}
	}
	LCD_endWrite();
 8000fbe:	f7ff fd7d 	bl	8000abc <LCD_endWrite>
 8000fc2:	e000      	b.n	8000fc6 <LCD_drawChar+0x192>
		return;
 8000fc4:	bf00      	nop
}
 8000fc6:	371c      	adds	r7, #28
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd90      	pop	{r4, r7, pc}
 8000fcc:	08005404 	.word	0x08005404

08000fd0 <LCD_drawString>:
	}
	LCD_endWrite();
}

void LCD_drawString(SPI_HandleTypeDef* spi, int16_t x, int16_t y, unsigned char* c, uint32_t length, uint16_t color, uint32_t size)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b088      	sub	sp, #32
 8000fd4:	af02      	add	r7, sp, #8
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	460b      	mov	r3, r1
 8000fdc:	817b      	strh	r3, [r7, #10]
 8000fde:	4613      	mov	r3, r2
 8000fe0:	813b      	strh	r3, [r7, #8]
	for (int i = 0; i < length; ++i) LCD_drawChar(spi, x + i*6*size, y, c[i], color, size);
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
 8000fe6:	e020      	b.n	800102a <LCD_drawString+0x5a>
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	b29a      	uxth	r2, r3
 8000fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	fb12 f303 	smulbb	r3, r2, r3
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	0052      	lsls	r2, r2, #1
 8000ffa:	4413      	add	r3, r2
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	897b      	ldrh	r3, [r7, #10]
 8001002:	4413      	add	r3, r2
 8001004:	b29b      	uxth	r3, r3
 8001006:	b219      	sxth	r1, r3
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	4413      	add	r3, r2
 800100e:	7818      	ldrb	r0, [r3, #0]
 8001010:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001016:	9301      	str	r3, [sp, #4]
 8001018:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	4603      	mov	r3, r0
 800101e:	68f8      	ldr	r0, [r7, #12]
 8001020:	f7ff ff08 	bl	8000e34 <LCD_drawChar>
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	3301      	adds	r3, #1
 8001028:	617b      	str	r3, [r7, #20]
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	6a3a      	ldr	r2, [r7, #32]
 800102e:	429a      	cmp	r2, r3
 8001030:	d8da      	bhi.n	8000fe8 <LCD_drawString+0x18>
}
 8001032:	bf00      	nop
 8001034:	bf00      	nop
 8001036:	3718      	adds	r7, #24
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <LCD_drawBattery>:
	}
	LCD_endWrite();
}

//homemade functions for TADAMHASPEV, move to different file
void LCD_drawBattery(SPI_HandleTypeDef* spi, int16_t x, int16_t y, uint16_t color, uint32_t size) {
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af02      	add	r7, sp, #8
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	4608      	mov	r0, r1
 8001046:	4611      	mov	r1, r2
 8001048:	461a      	mov	r2, r3
 800104a:	4603      	mov	r3, r0
 800104c:	817b      	strh	r3, [r7, #10]
 800104e:	460b      	mov	r3, r1
 8001050:	813b      	strh	r3, [r7, #8]
 8001052:	4613      	mov	r3, r2
 8001054:	80fb      	strh	r3, [r7, #6]
	//make battery thicker?
	//left
	if(!LCD_setAddrWindow(spi, x, y + size, 1, 22*size)) return;
 8001056:	8979      	ldrh	r1, [r7, #10]
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	b29a      	uxth	r2, r3
 800105c:	893b      	ldrh	r3, [r7, #8]
 800105e:	4413      	add	r3, r2
 8001060:	b29a      	uxth	r2, r3
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	b29b      	uxth	r3, r3
 8001066:	4618      	mov	r0, r3
 8001068:	0080      	lsls	r0, r0, #2
 800106a:	4418      	add	r0, r3
 800106c:	0040      	lsls	r0, r0, #1
 800106e:	4403      	add	r3, r0
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	b29b      	uxth	r3, r3
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2301      	movs	r3, #1
 8001078:	68f8      	ldr	r0, [r7, #12]
 800107a:	f7ff fd83 	bl	8000b84 <LCD_setAddrWindow>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	f000 80e3 	beq.w	800124c <LCD_drawBattery+0x210>
	if (!LCD_pushColorCopy(spi, color, 22*size)) return;
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	2216      	movs	r2, #22
 800108a:	fb03 f202 	mul.w	r2, r3, r2
 800108e:	88fb      	ldrh	r3, [r7, #6]
 8001090:	4619      	mov	r1, r3
 8001092:	68f8      	ldr	r0, [r7, #12]
 8001094:	f7ff fe1b 	bl	8000cce <LCD_pushColorCopy>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	f000 80d8 	beq.w	8001250 <LCD_drawBattery+0x214>

	//right
	if(!LCD_setAddrWindow(spi, x + 10*size, y + size, 1, 22*size)) return;
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	461a      	mov	r2, r3
 80010a6:	0092      	lsls	r2, r2, #2
 80010a8:	4413      	add	r3, r2
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	b29a      	uxth	r2, r3
 80010ae:	897b      	ldrh	r3, [r7, #10]
 80010b0:	4413      	add	r3, r2
 80010b2:	b299      	uxth	r1, r3
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	893b      	ldrh	r3, [r7, #8]
 80010ba:	4413      	add	r3, r2
 80010bc:	b29a      	uxth	r2, r3
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	4618      	mov	r0, r3
 80010c4:	0080      	lsls	r0, r0, #2
 80010c6:	4418      	add	r0, r3
 80010c8:	0040      	lsls	r0, r0, #1
 80010ca:	4403      	add	r3, r0
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	2301      	movs	r3, #1
 80010d4:	68f8      	ldr	r0, [r7, #12]
 80010d6:	f7ff fd55 	bl	8000b84 <LCD_setAddrWindow>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	f000 80b9 	beq.w	8001254 <LCD_drawBattery+0x218>
	if (!LCD_pushColorCopy(spi, color, 22*size)) return;
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	2216      	movs	r2, #22
 80010e6:	fb03 f202 	mul.w	r2, r3, r2
 80010ea:	88fb      	ldrh	r3, [r7, #6]
 80010ec:	4619      	mov	r1, r3
 80010ee:	68f8      	ldr	r0, [r7, #12]
 80010f0:	f7ff fded 	bl	8000cce <LCD_pushColorCopy>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	f000 80ae 	beq.w	8001258 <LCD_drawBattery+0x21c>

	//top
	if(!LCD_setAddrWindow(spi, x, y + size, 10*size, 1)) return;
 80010fc:	8979      	ldrh	r1, [r7, #10]
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	b29a      	uxth	r2, r3
 8001102:	893b      	ldrh	r3, [r7, #8]
 8001104:	4413      	add	r3, r2
 8001106:	b29a      	uxth	r2, r3
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	b29b      	uxth	r3, r3
 800110c:	4618      	mov	r0, r3
 800110e:	0080      	lsls	r0, r0, #2
 8001110:	4403      	add	r3, r0
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	b29b      	uxth	r3, r3
 8001116:	2001      	movs	r0, #1
 8001118:	9000      	str	r0, [sp, #0]
 800111a:	68f8      	ldr	r0, [r7, #12]
 800111c:	f7ff fd32 	bl	8000b84 <LCD_setAddrWindow>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	f000 809a 	beq.w	800125c <LCD_drawBattery+0x220>
	if (!LCD_pushColorCopy(spi, color, 10*size)) return;
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4613      	mov	r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	4413      	add	r3, r2
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	461a      	mov	r2, r3
 8001134:	88fb      	ldrh	r3, [r7, #6]
 8001136:	4619      	mov	r1, r3
 8001138:	68f8      	ldr	r0, [r7, #12]
 800113a:	f7ff fdc8 	bl	8000cce <LCD_pushColorCopy>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	f000 808d 	beq.w	8001260 <LCD_drawBattery+0x224>

	//bottom
	if(!LCD_setAddrWindow(spi, x, y + 23*size, 10*size, 1)) return;
 8001146:	8979      	ldrh	r1, [r7, #10]
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	b29b      	uxth	r3, r3
 800114c:	461a      	mov	r2, r3
 800114e:	0052      	lsls	r2, r2, #1
 8001150:	441a      	add	r2, r3
 8001152:	00d2      	lsls	r2, r2, #3
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	b29a      	uxth	r2, r3
 8001158:	893b      	ldrh	r3, [r7, #8]
 800115a:	4413      	add	r3, r2
 800115c:	b29a      	uxth	r2, r3
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	b29b      	uxth	r3, r3
 8001162:	4618      	mov	r0, r3
 8001164:	0080      	lsls	r0, r0, #2
 8001166:	4403      	add	r3, r0
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	b29b      	uxth	r3, r3
 800116c:	2001      	movs	r0, #1
 800116e:	9000      	str	r0, [sp, #0]
 8001170:	68f8      	ldr	r0, [r7, #12]
 8001172:	f7ff fd07 	bl	8000b84 <LCD_setAddrWindow>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d073      	beq.n	8001264 <LCD_drawBattery+0x228>
	if (!LCD_pushColorCopy(spi, color, 10*size)) return;
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4613      	mov	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	4413      	add	r3, r2
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	461a      	mov	r2, r3
 8001188:	88fb      	ldrh	r3, [r7, #6]
 800118a:	4619      	mov	r1, r3
 800118c:	68f8      	ldr	r0, [r7, #12]
 800118e:	f7ff fd9e 	bl	8000cce <LCD_pushColorCopy>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d067      	beq.n	8001268 <LCD_drawBattery+0x22c>

	//lil cap
	if(!LCD_setAddrWindow(spi, x + 3*size, y, 4*size, 1)) return;
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	b29b      	uxth	r3, r3
 800119c:	461a      	mov	r2, r3
 800119e:	0052      	lsls	r2, r2, #1
 80011a0:	4413      	add	r3, r2
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	897b      	ldrh	r3, [r7, #10]
 80011a6:	4413      	add	r3, r2
 80011a8:	b299      	uxth	r1, r3
 80011aa:	893a      	ldrh	r2, [r7, #8]
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	2001      	movs	r0, #1
 80011b6:	9000      	str	r0, [sp, #0]
 80011b8:	68f8      	ldr	r0, [r7, #12]
 80011ba:	f7ff fce3 	bl	8000b84 <LCD_setAddrWindow>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d053      	beq.n	800126c <LCD_drawBattery+0x230>
	if (!LCD_pushColorCopy(spi, color, 4*size)) return;
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	009a      	lsls	r2, r3, #2
 80011c8:	88fb      	ldrh	r3, [r7, #6]
 80011ca:	4619      	mov	r1, r3
 80011cc:	68f8      	ldr	r0, [r7, #12]
 80011ce:	f7ff fd7e 	bl	8000cce <LCD_pushColorCopy>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d04b      	beq.n	8001270 <LCD_drawBattery+0x234>

	if(!LCD_setAddrWindow(spi, x + 3*size, y, 1, size)) return;
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	b29b      	uxth	r3, r3
 80011dc:	461a      	mov	r2, r3
 80011de:	0052      	lsls	r2, r2, #1
 80011e0:	4413      	add	r3, r2
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	897b      	ldrh	r3, [r7, #10]
 80011e6:	4413      	add	r3, r2
 80011e8:	b299      	uxth	r1, r3
 80011ea:	893a      	ldrh	r2, [r7, #8]
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	2301      	movs	r3, #1
 80011f4:	68f8      	ldr	r0, [r7, #12]
 80011f6:	f7ff fcc5 	bl	8000b84 <LCD_setAddrWindow>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d039      	beq.n	8001274 <LCD_drawBattery+0x238>
	if (!LCD_pushColorCopy(spi, color, size)) return;
 8001200:	88fb      	ldrh	r3, [r7, #6]
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4619      	mov	r1, r3
 8001206:	68f8      	ldr	r0, [r7, #12]
 8001208:	f7ff fd61 	bl	8000cce <LCD_pushColorCopy>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d032      	beq.n	8001278 <LCD_drawBattery+0x23c>

	if(!LCD_setAddrWindow(spi, x + 3*size + 4*size, y, 1, size)) return;
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	b29b      	uxth	r3, r3
 8001216:	461a      	mov	r2, r3
 8001218:	00d2      	lsls	r2, r2, #3
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	b29a      	uxth	r2, r3
 800121e:	897b      	ldrh	r3, [r7, #10]
 8001220:	4413      	add	r3, r2
 8001222:	b299      	uxth	r1, r3
 8001224:	893a      	ldrh	r2, [r7, #8]
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	b29b      	uxth	r3, r3
 800122a:	9300      	str	r3, [sp, #0]
 800122c:	2301      	movs	r3, #1
 800122e:	68f8      	ldr	r0, [r7, #12]
 8001230:	f7ff fca8 	bl	8000b84 <LCD_setAddrWindow>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d020      	beq.n	800127c <LCD_drawBattery+0x240>
	if (!LCD_pushColorCopy(spi, color, size)) return;
 800123a:	88fb      	ldrh	r3, [r7, #6]
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4619      	mov	r1, r3
 8001240:	68f8      	ldr	r0, [r7, #12]
 8001242:	f7ff fd44 	bl	8000cce <LCD_pushColorCopy>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
	return;
 800124a:	e018      	b.n	800127e <LCD_drawBattery+0x242>
	if(!LCD_setAddrWindow(spi, x, y + size, 1, 22*size)) return;
 800124c:	bf00      	nop
 800124e:	e016      	b.n	800127e <LCD_drawBattery+0x242>
	if (!LCD_pushColorCopy(spi, color, 22*size)) return;
 8001250:	bf00      	nop
 8001252:	e014      	b.n	800127e <LCD_drawBattery+0x242>
	if(!LCD_setAddrWindow(spi, x + 10*size, y + size, 1, 22*size)) return;
 8001254:	bf00      	nop
 8001256:	e012      	b.n	800127e <LCD_drawBattery+0x242>
	if (!LCD_pushColorCopy(spi, color, 22*size)) return;
 8001258:	bf00      	nop
 800125a:	e010      	b.n	800127e <LCD_drawBattery+0x242>
	if(!LCD_setAddrWindow(spi, x, y + size, 10*size, 1)) return;
 800125c:	bf00      	nop
 800125e:	e00e      	b.n	800127e <LCD_drawBattery+0x242>
	if (!LCD_pushColorCopy(spi, color, 10*size)) return;
 8001260:	bf00      	nop
 8001262:	e00c      	b.n	800127e <LCD_drawBattery+0x242>
	if(!LCD_setAddrWindow(spi, x, y + 23*size, 10*size, 1)) return;
 8001264:	bf00      	nop
 8001266:	e00a      	b.n	800127e <LCD_drawBattery+0x242>
	if (!LCD_pushColorCopy(spi, color, 10*size)) return;
 8001268:	bf00      	nop
 800126a:	e008      	b.n	800127e <LCD_drawBattery+0x242>
	if(!LCD_setAddrWindow(spi, x + 3*size, y, 4*size, 1)) return;
 800126c:	bf00      	nop
 800126e:	e006      	b.n	800127e <LCD_drawBattery+0x242>
	if (!LCD_pushColorCopy(spi, color, 4*size)) return;
 8001270:	bf00      	nop
 8001272:	e004      	b.n	800127e <LCD_drawBattery+0x242>
	if(!LCD_setAddrWindow(spi, x + 3*size, y, 1, size)) return;
 8001274:	bf00      	nop
 8001276:	e002      	b.n	800127e <LCD_drawBattery+0x242>
	if (!LCD_pushColorCopy(spi, color, size)) return;
 8001278:	bf00      	nop
 800127a:	e000      	b.n	800127e <LCD_drawBattery+0x242>
	if(!LCD_setAddrWindow(spi, x + 3*size + 4*size, y, 1, size)) return;
 800127c:	bf00      	nop
}
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <LCD_drawFrame>:

void LCD_drawFrame(SPI_HandleTypeDef* spi, uint16_t color) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af02      	add	r7, sp, #8
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	460b      	mov	r3, r1
 800128e:	807b      	strh	r3, [r7, #2]
	//rows
	if(!LCD_setAddrWindow(spi, 0, 80, 360, 1)) return;
 8001290:	2301      	movs	r3, #1
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001298:	2250      	movs	r2, #80	; 0x50
 800129a:	2100      	movs	r1, #0
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7ff fc71 	bl	8000b84 <LCD_setAddrWindow>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d04c      	beq.n	8001342 <LCD_drawFrame+0xbe>
	if (!LCD_pushColorCopy(spi, color, 360)) return;
 80012a8:	887b      	ldrh	r3, [r7, #2]
 80012aa:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80012ae:	4619      	mov	r1, r3
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7ff fd0c 	bl	8000cce <LCD_pushColorCopy>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d044      	beq.n	8001346 <LCD_drawFrame+0xc2>

	if(!LCD_setAddrWindow(spi, 0, 160, 360, 1)) return;
 80012bc:	2301      	movs	r3, #1
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80012c4:	22a0      	movs	r2, #160	; 0xa0
 80012c6:	2100      	movs	r1, #0
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff fc5b 	bl	8000b84 <LCD_setAddrWindow>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d03a      	beq.n	800134a <LCD_drawFrame+0xc6>
	if (!LCD_pushColorCopy(spi, color, 360)) return;
 80012d4:	887b      	ldrh	r3, [r7, #2]
 80012d6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80012da:	4619      	mov	r1, r3
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff fcf6 	bl	8000cce <LCD_pushColorCopy>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d032      	beq.n	800134e <LCD_drawFrame+0xca>

	if(!LCD_setAddrWindow(spi, 0, 240, 360, 1)) return;
 80012e8:	2301      	movs	r3, #1
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80012f0:	22f0      	movs	r2, #240	; 0xf0
 80012f2:	2100      	movs	r1, #0
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff fc45 	bl	8000b84 <LCD_setAddrWindow>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d028      	beq.n	8001352 <LCD_drawFrame+0xce>
	if (!LCD_pushColorCopy(spi, color, 360)) return;
 8001300:	887b      	ldrh	r3, [r7, #2]
 8001302:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001306:	4619      	mov	r1, r3
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff fce0 	bl	8000cce <LCD_pushColorCopy>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d020      	beq.n	8001356 <LCD_drawFrame+0xd2>

	//column
	if(!LCD_setAddrWindow(spi, 360, 0, 1, 320)) return;
 8001314:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	2301      	movs	r3, #1
 800131c:	2200      	movs	r2, #0
 800131e:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff fc2e 	bl	8000b84 <LCD_setAddrWindow>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d015      	beq.n	800135a <LCD_drawFrame+0xd6>
	if (!LCD_pushColorCopy(spi, color, 320)) return;
 800132e:	887b      	ldrh	r3, [r7, #2]
 8001330:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001334:	4619      	mov	r1, r3
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff fcc9 	bl	8000cce <LCD_pushColorCopy>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
	return;
 8001340:	e00c      	b.n	800135c <LCD_drawFrame+0xd8>
	if(!LCD_setAddrWindow(spi, 0, 80, 360, 1)) return;
 8001342:	bf00      	nop
 8001344:	e00a      	b.n	800135c <LCD_drawFrame+0xd8>
	if (!LCD_pushColorCopy(spi, color, 360)) return;
 8001346:	bf00      	nop
 8001348:	e008      	b.n	800135c <LCD_drawFrame+0xd8>
	if(!LCD_setAddrWindow(spi, 0, 160, 360, 1)) return;
 800134a:	bf00      	nop
 800134c:	e006      	b.n	800135c <LCD_drawFrame+0xd8>
	if (!LCD_pushColorCopy(spi, color, 360)) return;
 800134e:	bf00      	nop
 8001350:	e004      	b.n	800135c <LCD_drawFrame+0xd8>
	if(!LCD_setAddrWindow(spi, 0, 240, 360, 1)) return;
 8001352:	bf00      	nop
 8001354:	e002      	b.n	800135c <LCD_drawFrame+0xd8>
	if (!LCD_pushColorCopy(spi, color, 360)) return;
 8001356:	bf00      	nop
 8001358:	e000      	b.n	800135c <LCD_drawFrame+0xd8>
	if(!LCD_setAddrWindow(spi, 360, 0, 1, 320)) return;
 800135a:	bf00      	nop
}
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <LCD_fillBattery>:

void LCD_fillBattery(SPI_HandleTypeDef* spi, int16_t x, int16_t y, uint32_t size, uint32_t level) {
 8001364:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001368:	b088      	sub	sp, #32
 800136a:	af02      	add	r7, sp, #8
 800136c:	60f8      	str	r0, [r7, #12]
 800136e:	607b      	str	r3, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	817b      	strh	r3, [r7, #10]
 8001374:	4613      	mov	r3, r2
 8001376:	813b      	strh	r3, [r7, #8]
	uint32_t color = HX8357_GREEN;
 8001378:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800137c:	617b      	str	r3, [r7, #20]
	if (level < 20) {
 800137e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001380:	2b13      	cmp	r3, #19
 8001382:	d803      	bhi.n	800138c <LCD_fillBattery+0x28>
		color = HX8357_RED;
 8001384:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	e005      	b.n	8001398 <LCD_fillBattery+0x34>
	} else if (level < 50) {
 800138c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800138e:	2b31      	cmp	r3, #49	; 0x31
 8001390:	d802      	bhi.n	8001398 <LCD_fillBattery+0x34>
		color = HX8357_YELLOW;
 8001392:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001396:	617b      	str	r3, [r7, #20]
	}
	//level = 100 --> y offset 0
	//level = 0 --> y offset 22*size
	int offset = 22*size - (22*size)*(level/100.0);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2216      	movs	r2, #22
 800139c:	fb02 f303 	mul.w	r3, r2, r3
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff f86d 	bl	8000480 <__aeabi_ui2d>
 80013a6:	4604      	mov	r4, r0
 80013a8:	460d      	mov	r5, r1
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2216      	movs	r2, #22
 80013ae:	fb02 f303 	mul.w	r3, r2, r3
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff f864 	bl	8000480 <__aeabi_ui2d>
 80013b8:	4680      	mov	r8, r0
 80013ba:	4689      	mov	r9, r1
 80013bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80013be:	f7ff f85f 	bl	8000480 <__aeabi_ui2d>
 80013c2:	f04f 0200 	mov.w	r2, #0
 80013c6:	4b28      	ldr	r3, [pc, #160]	; (8001468 <LCD_fillBattery+0x104>)
 80013c8:	f7ff f9fe 	bl	80007c8 <__aeabi_ddiv>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	4640      	mov	r0, r8
 80013d2:	4649      	mov	r1, r9
 80013d4:	f7ff f8ce 	bl	8000574 <__aeabi_dmul>
 80013d8:	4602      	mov	r2, r0
 80013da:	460b      	mov	r3, r1
 80013dc:	4620      	mov	r0, r4
 80013de:	4629      	mov	r1, r5
 80013e0:	f7fe ff10 	bl	8000204 <__aeabi_dsub>
 80013e4:	4602      	mov	r2, r0
 80013e6:	460b      	mov	r3, r1
 80013e8:	4610      	mov	r0, r2
 80013ea:	4619      	mov	r1, r3
 80013ec:	f7ff fad4 	bl	8000998 <__aeabi_d2iz>
 80013f0:	4603      	mov	r3, r0
 80013f2:	613b      	str	r3, [r7, #16]
	LCD_writePixels(spi, color, x + 3, ((y + size) + 3) + offset, 10*size - 6, (22*size - 6) - offset);
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	b298      	uxth	r0, r3
 80013f8:	897b      	ldrh	r3, [r7, #10]
 80013fa:	3303      	adds	r3, #3
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	b21c      	sxth	r4, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	b29a      	uxth	r2, r3
 8001404:	893b      	ldrh	r3, [r7, #8]
 8001406:	4413      	add	r3, r2
 8001408:	b29a      	uxth	r2, r3
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	b29b      	uxth	r3, r3
 800140e:	4413      	add	r3, r2
 8001410:	b29b      	uxth	r3, r3
 8001412:	3303      	adds	r3, #3
 8001414:	b29b      	uxth	r3, r3
 8001416:	b21d      	sxth	r5, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	b29b      	uxth	r3, r3
 800141c:	461a      	mov	r2, r3
 800141e:	0092      	lsls	r2, r2, #2
 8001420:	4413      	add	r3, r2
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	b29b      	uxth	r3, r3
 8001426:	3b06      	subs	r3, #6
 8001428:	b29b      	uxth	r3, r3
 800142a:	b21a      	sxth	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	b29b      	uxth	r3, r3
 8001430:	4619      	mov	r1, r3
 8001432:	0089      	lsls	r1, r1, #2
 8001434:	4419      	add	r1, r3
 8001436:	0049      	lsls	r1, r1, #1
 8001438:	440b      	add	r3, r1
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	b299      	uxth	r1, r3
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	b29b      	uxth	r3, r3
 8001442:	1acb      	subs	r3, r1, r3
 8001444:	b29b      	uxth	r3, r3
 8001446:	3b06      	subs	r3, #6
 8001448:	b29b      	uxth	r3, r3
 800144a:	b21b      	sxth	r3, r3
 800144c:	9301      	str	r3, [sp, #4]
 800144e:	9200      	str	r2, [sp, #0]
 8001450:	462b      	mov	r3, r5
 8001452:	4622      	mov	r2, r4
 8001454:	4601      	mov	r1, r0
 8001456:	68f8      	ldr	r0, [r7, #12]
 8001458:	f7ff fca6 	bl	8000da8 <LCD_writePixels>
}
 800145c:	bf00      	nop
 800145e:	3718      	adds	r7, #24
 8001460:	46bd      	mov	sp, r7
 8001462:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001466:	bf00      	nop
 8001468:	40590000 	.word	0x40590000

0800146c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 8001472:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001474:	f000 fdc5 	bl	8002002 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001478:	f000 f908 	bl	800168c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800147c:	f000 f9cc 	bl	8001818 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001480:	f000 f98c 	bl	800179c <MX_SPI1_Init>
  MX_RTC_Init();
 8001484:	f000 f962 	bl	800174c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  LCD_begin(&hspi1);
 8001488:	4874      	ldr	r0, [pc, #464]	; (800165c <main+0x1f0>)
 800148a:	f7ff fb23 	bl	8000ad4 <LCD_begin>
  LCD_writePixels(&hspi1,HX8357_WHITE,0,0,480,320);
 800148e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001492:	9301      	str	r3, [sp, #4]
 8001494:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	2300      	movs	r3, #0
 800149c:	2200      	movs	r2, #0
 800149e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80014a2:	486e      	ldr	r0, [pc, #440]	; (800165c <main+0x1f0>)
 80014a4:	f7ff fc80 	bl	8000da8 <LCD_writePixels>
  LCD_drawBattery(&hspi1,380,120,HX8357_BLACK,8);
 80014a8:	2308      	movs	r3, #8
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	2300      	movs	r3, #0
 80014ae:	2278      	movs	r2, #120	; 0x78
 80014b0:	f44f 71be 	mov.w	r1, #380	; 0x17c
 80014b4:	4869      	ldr	r0, [pc, #420]	; (800165c <main+0x1f0>)
 80014b6:	f7ff fdc1 	bl	800103c <LCD_drawBattery>
  LCD_drawFrame(&hspi1,HX8357_BLACK);
 80014ba:	2100      	movs	r1, #0
 80014bc:	4867      	ldr	r0, [pc, #412]	; (800165c <main+0x1f0>)
 80014be:	f7ff fee1 	bl	8001284 <LCD_drawFrame>


  char * name = "TADAMHESPEV | UMSM";
 80014c2:	4b67      	ldr	r3, [pc, #412]	; (8001660 <main+0x1f4>)
 80014c4:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
  char * speed = "SPEED:";
 80014c8:	4b66      	ldr	r3, [pc, #408]	; (8001664 <main+0x1f8>)
 80014ca:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
  char * temp = "TEMP:";
 80014ce:	4b66      	ldr	r3, [pc, #408]	; (8001668 <main+0x1fc>)
 80014d0:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
  char * power = "POWER:";
 80014d4:	4b65      	ldr	r3, [pc, #404]	; (800166c <main+0x200>)
 80014d6:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338

  char * mph = "mph";
 80014da:	4b65      	ldr	r3, [pc, #404]	; (8001670 <main+0x204>)
 80014dc:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
  char * deg = "C";
 80014e0:	4b64      	ldr	r3, [pc, #400]	; (8001674 <main+0x208>)
 80014e2:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
  char * watt = "W";
 80014e6:	4b64      	ldr	r3, [pc, #400]	; (8001678 <main+0x20c>)
 80014e8:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
  LCD_drawString(&hspi1,20,30 + 80*0,name,18,HX8357_BLACK,3);
 80014ec:	2303      	movs	r3, #3
 80014ee:	9302      	str	r3, [sp, #8]
 80014f0:	2300      	movs	r3, #0
 80014f2:	9301      	str	r3, [sp, #4]
 80014f4:	2312      	movs	r3, #18
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 80014fc:	221e      	movs	r2, #30
 80014fe:	2114      	movs	r1, #20
 8001500:	4856      	ldr	r0, [pc, #344]	; (800165c <main+0x1f0>)
 8001502:	f7ff fd65 	bl	8000fd0 <LCD_drawString>
  LCD_drawString(&hspi1,5,30 + 80*1,speed,6,HX8357_BLACK,3);
 8001506:	2303      	movs	r3, #3
 8001508:	9302      	str	r3, [sp, #8]
 800150a:	2300      	movs	r3, #0
 800150c:	9301      	str	r3, [sp, #4]
 800150e:	2306      	movs	r3, #6
 8001510:	9300      	str	r3, [sp, #0]
 8001512:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 8001516:	226e      	movs	r2, #110	; 0x6e
 8001518:	2105      	movs	r1, #5
 800151a:	4850      	ldr	r0, [pc, #320]	; (800165c <main+0x1f0>)
 800151c:	f7ff fd58 	bl	8000fd0 <LCD_drawString>
  LCD_drawString(&hspi1,5,30 + 80*2,temp,5,HX8357_BLACK,3);
 8001520:	2303      	movs	r3, #3
 8001522:	9302      	str	r3, [sp, #8]
 8001524:	2300      	movs	r3, #0
 8001526:	9301      	str	r3, [sp, #4]
 8001528:	2305      	movs	r3, #5
 800152a:	9300      	str	r3, [sp, #0]
 800152c:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8001530:	22be      	movs	r2, #190	; 0xbe
 8001532:	2105      	movs	r1, #5
 8001534:	4849      	ldr	r0, [pc, #292]	; (800165c <main+0x1f0>)
 8001536:	f7ff fd4b 	bl	8000fd0 <LCD_drawString>
  LCD_drawString(&hspi1,5,30 + 80*3,power,6,HX8357_BLACK,3);
 800153a:	2303      	movs	r3, #3
 800153c:	9302      	str	r3, [sp, #8]
 800153e:	2300      	movs	r3, #0
 8001540:	9301      	str	r3, [sp, #4]
 8001542:	2306      	movs	r3, #6
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 800154a:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800154e:	2105      	movs	r1, #5
 8001550:	4842      	ldr	r0, [pc, #264]	; (800165c <main+0x1f0>)
 8001552:	f7ff fd3d 	bl	8000fd0 <LCD_drawString>

  LCD_drawString(&hspi1,280,30 + 80*1,mph,3,HX8357_BLACK,3);
 8001556:	2303      	movs	r3, #3
 8001558:	9302      	str	r3, [sp, #8]
 800155a:	2300      	movs	r3, #0
 800155c:	9301      	str	r3, [sp, #4]
 800155e:	2303      	movs	r3, #3
 8001560:	9300      	str	r3, [sp, #0]
 8001562:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8001566:	226e      	movs	r2, #110	; 0x6e
 8001568:	f44f 718c 	mov.w	r1, #280	; 0x118
 800156c:	483b      	ldr	r0, [pc, #236]	; (800165c <main+0x1f0>)
 800156e:	f7ff fd2f 	bl	8000fd0 <LCD_drawString>
  LCD_drawString(&hspi1,306,30 + 80*2,deg,1,HX8357_BLACK,3);
 8001572:	2303      	movs	r3, #3
 8001574:	9302      	str	r3, [sp, #8]
 8001576:	2300      	movs	r3, #0
 8001578:	9301      	str	r3, [sp, #4]
 800157a:	2301      	movs	r3, #1
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8001582:	22be      	movs	r2, #190	; 0xbe
 8001584:	f44f 7199 	mov.w	r1, #306	; 0x132
 8001588:	4834      	ldr	r0, [pc, #208]	; (800165c <main+0x1f0>)
 800158a:	f7ff fd21 	bl	8000fd0 <LCD_drawString>
  LCD_drawString(&hspi1,306,30 + 80*3,watt,1,HX8357_BLACK,3);
 800158e:	2303      	movs	r3, #3
 8001590:	9302      	str	r3, [sp, #8]
 8001592:	2300      	movs	r3, #0
 8001594:	9301      	str	r3, [sp, #4]
 8001596:	2301      	movs	r3, #1
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800159e:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80015a2:	f44f 7199 	mov.w	r1, #306	; 0x132
 80015a6:	482d      	ldr	r0, [pc, #180]	; (800165c <main+0x1f0>)
 80015a8:	f7ff fd12 	bl	8000fd0 <LCD_drawString>

  int volt_percent = 85;
 80015ac:	2355      	movs	r3, #85	; 0x55
 80015ae:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
  char lev[801];
  itoa(volt_percent,lev,10);
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	220a      	movs	r2, #10
 80015b6:	4619      	mov	r1, r3
 80015b8:	f8d7 0328 	ldr.w	r0, [r7, #808]	; 0x328
 80015bc:	f003 fe82 	bl	80052c4 <itoa>

  LCD_fillBattery(&hspi1,380,120,8,volt_percent);
 80015c0:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 80015c4:	9300      	str	r3, [sp, #0]
 80015c6:	2308      	movs	r3, #8
 80015c8:	2278      	movs	r2, #120	; 0x78
 80015ca:	f44f 71be 	mov.w	r1, #380	; 0x17c
 80015ce:	4823      	ldr	r0, [pc, #140]	; (800165c <main+0x1f0>)
 80015d0:	f7ff fec8 	bl	8001364 <LCD_fillBattery>
  LCD_drawString(&hspi1,370,50,lev,3,HX8357_BLACK,4);
 80015d4:	1d3b      	adds	r3, r7, #4
 80015d6:	2204      	movs	r2, #4
 80015d8:	9202      	str	r2, [sp, #8]
 80015da:	2200      	movs	r2, #0
 80015dc:	9201      	str	r2, [sp, #4]
 80015de:	2203      	movs	r2, #3
 80015e0:	9200      	str	r2, [sp, #0]
 80015e2:	2232      	movs	r2, #50	; 0x32
 80015e4:	f44f 71b9 	mov.w	r1, #370	; 0x172
 80015e8:	481c      	ldr	r0, [pc, #112]	; (800165c <main+0x1f0>)
 80015ea:	f7ff fcf1 	bl	8000fd0 <LCD_drawString>
  LCD_drawString(&hspi1,442,50,"%",1,HX8357_BLACK,4);
 80015ee:	2304      	movs	r3, #4
 80015f0:	9302      	str	r3, [sp, #8]
 80015f2:	2300      	movs	r3, #0
 80015f4:	9301      	str	r3, [sp, #4]
 80015f6:	2301      	movs	r3, #1
 80015f8:	9300      	str	r3, [sp, #0]
 80015fa:	4b20      	ldr	r3, [pc, #128]	; (800167c <main+0x210>)
 80015fc:	2232      	movs	r2, #50	; 0x32
 80015fe:	f44f 71dd 	mov.w	r1, #442	; 0x1ba
 8001602:	4816      	ldr	r0, [pc, #88]	; (800165c <main+0x1f0>)
 8001604:	f7ff fce4 	bl	8000fd0 <LCD_drawString>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		  LCD_drawString(&hspi1,146,30 + 80*1,"4",4,HX8357_BLACK,4);
 8001608:	2304      	movs	r3, #4
 800160a:	9302      	str	r3, [sp, #8]
 800160c:	2300      	movs	r3, #0
 800160e:	9301      	str	r3, [sp, #4]
 8001610:	2304      	movs	r3, #4
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	4b1a      	ldr	r3, [pc, #104]	; (8001680 <main+0x214>)
 8001616:	226e      	movs	r2, #110	; 0x6e
 8001618:	2192      	movs	r1, #146	; 0x92
 800161a:	4810      	ldr	r0, [pc, #64]	; (800165c <main+0x1f0>)
 800161c:	f7ff fcd8 	bl	8000fd0 <LCD_drawString>
		  LCD_drawString(&hspi1,146,30 + 80*2,"6",4,HX8357_BLACK,4);
 8001620:	2304      	movs	r3, #4
 8001622:	9302      	str	r3, [sp, #8]
 8001624:	2300      	movs	r3, #0
 8001626:	9301      	str	r3, [sp, #4]
 8001628:	2304      	movs	r3, #4
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	4b15      	ldr	r3, [pc, #84]	; (8001684 <main+0x218>)
 800162e:	22be      	movs	r2, #190	; 0xbe
 8001630:	2192      	movs	r1, #146	; 0x92
 8001632:	480a      	ldr	r0, [pc, #40]	; (800165c <main+0x1f0>)
 8001634:	f7ff fccc 	bl	8000fd0 <LCD_drawString>
		  LCD_drawString(&hspi1,146,30 + 80*3,"8",4,HX8357_BLACK,4);
 8001638:	2304      	movs	r3, #4
 800163a:	9302      	str	r3, [sp, #8]
 800163c:	2300      	movs	r3, #0
 800163e:	9301      	str	r3, [sp, #4]
 8001640:	2304      	movs	r3, #4
 8001642:	9300      	str	r3, [sp, #0]
 8001644:	4b10      	ldr	r3, [pc, #64]	; (8001688 <main+0x21c>)
 8001646:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800164a:	2192      	movs	r1, #146	; 0x92
 800164c:	4803      	ldr	r0, [pc, #12]	; (800165c <main+0x1f0>)
 800164e:	f7ff fcbf 	bl	8000fd0 <LCD_drawString>
		  HAL_Delay(250);
 8001652:	20fa      	movs	r0, #250	; 0xfa
 8001654:	f000 fd0e 	bl	8002074 <HAL_Delay>
		  LCD_drawString(&hspi1,146,30 + 80*1,"4",4,HX8357_BLACK,4);
 8001658:	e7d6      	b.n	8001608 <main+0x19c>
 800165a:	bf00      	nop
 800165c:	200000b4 	.word	0x200000b4
 8001660:	080053bc 	.word	0x080053bc
 8001664:	080053d0 	.word	0x080053d0
 8001668:	080053d8 	.word	0x080053d8
 800166c:	080053e0 	.word	0x080053e0
 8001670:	080053e8 	.word	0x080053e8
 8001674:	080053ec 	.word	0x080053ec
 8001678:	080053f0 	.word	0x080053f0
 800167c:	080053f4 	.word	0x080053f4
 8001680:	080053f8 	.word	0x080053f8
 8001684:	080053fc 	.word	0x080053fc
 8001688:	08005400 	.word	0x08005400

0800168c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b096      	sub	sp, #88	; 0x58
 8001690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001692:	f107 0314 	add.w	r3, r7, #20
 8001696:	2244      	movs	r2, #68	; 0x44
 8001698:	2100      	movs	r1, #0
 800169a:	4618      	mov	r0, r3
 800169c:	f003 fe56 	bl	800534c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016a0:	463b      	mov	r3, r7
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]
 80016ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80016ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80016b2:	f000 ffbf 	bl	8002634 <HAL_PWREx_ControlVoltageScaling>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80016bc:	f000 fb18 	bl	8001cf0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80016c0:	f000 ff88 	bl	80025d4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80016c4:	4b20      	ldr	r3, [pc, #128]	; (8001748 <SystemClock_Config+0xbc>)
 80016c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ca:	4a1f      	ldr	r2, [pc, #124]	; (8001748 <SystemClock_Config+0xbc>)
 80016cc:	f023 0318 	bic.w	r3, r3, #24
 80016d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80016d4:	2314      	movs	r3, #20
 80016d6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80016d8:	2301      	movs	r3, #1
 80016da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80016dc:	2301      	movs	r3, #1
 80016de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80016e4:	2360      	movs	r3, #96	; 0x60
 80016e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016e8:	2302      	movs	r3, #2
 80016ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80016ec:	2301      	movs	r3, #1
 80016ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80016f0:	2301      	movs	r3, #1
 80016f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 36;
 80016f4:	2324      	movs	r3, #36	; 0x24
 80016f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016f8:	2302      	movs	r3, #2
 80016fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016fc:	2302      	movs	r3, #2
 80016fe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001700:	2302      	movs	r3, #2
 8001702:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	4618      	mov	r0, r3
 800170a:	f001 f847 	bl	800279c <HAL_RCC_OscConfig>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001714:	f000 faec 	bl	8001cf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001718:	230f      	movs	r3, #15
 800171a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800171c:	2303      	movs	r3, #3
 800171e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001720:	2300      	movs	r3, #0
 8001722:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001724:	2300      	movs	r3, #0
 8001726:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001728:	2300      	movs	r3, #0
 800172a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800172c:	463b      	mov	r3, r7
 800172e:	2103      	movs	r1, #3
 8001730:	4618      	mov	r0, r3
 8001732:	f001 fc4d 	bl	8002fd0 <HAL_RCC_ClockConfig>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800173c:	f000 fad8 	bl	8001cf0 <Error_Handler>
  }
}
 8001740:	bf00      	nop
 8001742:	3758      	adds	r7, #88	; 0x58
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40021000 	.word	0x40021000

0800174c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001750:	4b10      	ldr	r3, [pc, #64]	; (8001794 <MX_RTC_Init+0x48>)
 8001752:	4a11      	ldr	r2, [pc, #68]	; (8001798 <MX_RTC_Init+0x4c>)
 8001754:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001756:	4b0f      	ldr	r3, [pc, #60]	; (8001794 <MX_RTC_Init+0x48>)
 8001758:	2200      	movs	r2, #0
 800175a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800175c:	4b0d      	ldr	r3, [pc, #52]	; (8001794 <MX_RTC_Init+0x48>)
 800175e:	227f      	movs	r2, #127	; 0x7f
 8001760:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001762:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <MX_RTC_Init+0x48>)
 8001764:	22ff      	movs	r2, #255	; 0xff
 8001766:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001768:	4b0a      	ldr	r3, [pc, #40]	; (8001794 <MX_RTC_Init+0x48>)
 800176a:	2200      	movs	r2, #0
 800176c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800176e:	4b09      	ldr	r3, [pc, #36]	; (8001794 <MX_RTC_Init+0x48>)
 8001770:	2200      	movs	r2, #0
 8001772:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001774:	4b07      	ldr	r3, [pc, #28]	; (8001794 <MX_RTC_Init+0x48>)
 8001776:	2200      	movs	r2, #0
 8001778:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800177a:	4b06      	ldr	r3, [pc, #24]	; (8001794 <MX_RTC_Init+0x48>)
 800177c:	2200      	movs	r2, #0
 800177e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001780:	4804      	ldr	r0, [pc, #16]	; (8001794 <MX_RTC_Init+0x48>)
 8001782:	f002 fc17 	bl	8003fb4 <HAL_RTC_Init>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 800178c:	f000 fab0 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001790:	bf00      	nop
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20000090 	.word	0x20000090
 8001798:	40002800 	.word	0x40002800

0800179c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017a0:	4b1b      	ldr	r3, [pc, #108]	; (8001810 <MX_SPI1_Init+0x74>)
 80017a2:	4a1c      	ldr	r2, [pc, #112]	; (8001814 <MX_SPI1_Init+0x78>)
 80017a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017a6:	4b1a      	ldr	r3, [pc, #104]	; (8001810 <MX_SPI1_Init+0x74>)
 80017a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017ae:	4b18      	ldr	r3, [pc, #96]	; (8001810 <MX_SPI1_Init+0x74>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017b4:	4b16      	ldr	r3, [pc, #88]	; (8001810 <MX_SPI1_Init+0x74>)
 80017b6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80017ba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017bc:	4b14      	ldr	r3, [pc, #80]	; (8001810 <MX_SPI1_Init+0x74>)
 80017be:	2200      	movs	r2, #0
 80017c0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017c2:	4b13      	ldr	r3, [pc, #76]	; (8001810 <MX_SPI1_Init+0x74>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017c8:	4b11      	ldr	r3, [pc, #68]	; (8001810 <MX_SPI1_Init+0x74>)
 80017ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017ce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017d0:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <MX_SPI1_Init+0x74>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017d6:	4b0e      	ldr	r3, [pc, #56]	; (8001810 <MX_SPI1_Init+0x74>)
 80017d8:	2200      	movs	r2, #0
 80017da:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017dc:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <MX_SPI1_Init+0x74>)
 80017de:	2200      	movs	r2, #0
 80017e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017e2:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <MX_SPI1_Init+0x74>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80017e8:	4b09      	ldr	r3, [pc, #36]	; (8001810 <MX_SPI1_Init+0x74>)
 80017ea:	2207      	movs	r2, #7
 80017ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80017ee:	4b08      	ldr	r3, [pc, #32]	; (8001810 <MX_SPI1_Init+0x74>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <MX_SPI1_Init+0x74>)
 80017f6:	2208      	movs	r2, #8
 80017f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017fa:	4805      	ldr	r0, [pc, #20]	; (8001810 <MX_SPI1_Init+0x74>)
 80017fc:	f002 fcf8 	bl	80041f0 <HAL_SPI_Init>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001806:	f000 fa73 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	200000b4 	.word	0x200000b4
 8001814:	40013000 	.word	0x40013000

08001818 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b08e      	sub	sp, #56	; 0x38
 800181c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	605a      	str	r2, [r3, #4]
 8001828:	609a      	str	r2, [r3, #8]
 800182a:	60da      	str	r2, [r3, #12]
 800182c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800182e:	4bb2      	ldr	r3, [pc, #712]	; (8001af8 <MX_GPIO_Init+0x2e0>)
 8001830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001832:	4ab1      	ldr	r2, [pc, #708]	; (8001af8 <MX_GPIO_Init+0x2e0>)
 8001834:	f043 0310 	orr.w	r3, r3, #16
 8001838:	64d3      	str	r3, [r2, #76]	; 0x4c
 800183a:	4baf      	ldr	r3, [pc, #700]	; (8001af8 <MX_GPIO_Init+0x2e0>)
 800183c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183e:	f003 0310 	and.w	r3, r3, #16
 8001842:	623b      	str	r3, [r7, #32]
 8001844:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001846:	4bac      	ldr	r3, [pc, #688]	; (8001af8 <MX_GPIO_Init+0x2e0>)
 8001848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184a:	4aab      	ldr	r2, [pc, #684]	; (8001af8 <MX_GPIO_Init+0x2e0>)
 800184c:	f043 0304 	orr.w	r3, r3, #4
 8001850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001852:	4ba9      	ldr	r3, [pc, #676]	; (8001af8 <MX_GPIO_Init+0x2e0>)
 8001854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001856:	f003 0304 	and.w	r3, r3, #4
 800185a:	61fb      	str	r3, [r7, #28]
 800185c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800185e:	4ba6      	ldr	r3, [pc, #664]	; (8001af8 <MX_GPIO_Init+0x2e0>)
 8001860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001862:	4aa5      	ldr	r2, [pc, #660]	; (8001af8 <MX_GPIO_Init+0x2e0>)
 8001864:	f043 0320 	orr.w	r3, r3, #32
 8001868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800186a:	4ba3      	ldr	r3, [pc, #652]	; (8001af8 <MX_GPIO_Init+0x2e0>)
 800186c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186e:	f003 0320 	and.w	r3, r3, #32
 8001872:	61bb      	str	r3, [r7, #24]
 8001874:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001876:	4ba0      	ldr	r3, [pc, #640]	; (8001af8 <MX_GPIO_Init+0x2e0>)
 8001878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187a:	4a9f      	ldr	r2, [pc, #636]	; (8001af8 <MX_GPIO_Init+0x2e0>)
 800187c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001880:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001882:	4b9d      	ldr	r3, [pc, #628]	; (8001af8 <MX_GPIO_Init+0x2e0>)
 8001884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800188a:	617b      	str	r3, [r7, #20]
 800188c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800188e:	4b9a      	ldr	r3, [pc, #616]	; (8001af8 <MX_GPIO_Init+0x2e0>)
 8001890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001892:	4a99      	ldr	r2, [pc, #612]	; (8001af8 <MX_GPIO_Init+0x2e0>)
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	64d3      	str	r3, [r2, #76]	; 0x4c
 800189a:	4b97      	ldr	r3, [pc, #604]	; (8001af8 <MX_GPIO_Init+0x2e0>)
 800189c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	613b      	str	r3, [r7, #16]
 80018a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a6:	4b94      	ldr	r3, [pc, #592]	; (8001af8 <MX_GPIO_Init+0x2e0>)
 80018a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018aa:	4a93      	ldr	r2, [pc, #588]	; (8001af8 <MX_GPIO_Init+0x2e0>)
 80018ac:	f043 0302 	orr.w	r3, r3, #2
 80018b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018b2:	4b91      	ldr	r3, [pc, #580]	; (8001af8 <MX_GPIO_Init+0x2e0>)
 80018b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018be:	4b8e      	ldr	r3, [pc, #568]	; (8001af8 <MX_GPIO_Init+0x2e0>)
 80018c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c2:	4a8d      	ldr	r2, [pc, #564]	; (8001af8 <MX_GPIO_Init+0x2e0>)
 80018c4:	f043 0308 	orr.w	r3, r3, #8
 80018c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ca:	4b8b      	ldr	r3, [pc, #556]	; (8001af8 <MX_GPIO_Init+0x2e0>)
 80018cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ce:	f003 0308 	and.w	r3, r3, #8
 80018d2:	60bb      	str	r3, [r7, #8]
 80018d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80018d6:	4b88      	ldr	r3, [pc, #544]	; (8001af8 <MX_GPIO_Init+0x2e0>)
 80018d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018da:	4a87      	ldr	r2, [pc, #540]	; (8001af8 <MX_GPIO_Init+0x2e0>)
 80018dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018e2:	4b85      	ldr	r3, [pc, #532]	; (8001af8 <MX_GPIO_Init+0x2e0>)
 80018e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018ea:	607b      	str	r3, [r7, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80018ee:	f000 ff45 	bl	800277c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80018f2:	2200      	movs	r2, #0
 80018f4:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80018f8:	4880      	ldr	r0, [pc, #512]	; (8001afc <MX_GPIO_Init+0x2e4>)
 80018fa:	f000 fe53 	bl	80025a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018fe:	230c      	movs	r3, #12
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001902:	2302      	movs	r3, #2
 8001904:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190a:	2300      	movs	r3, #0
 800190c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800190e:	230d      	movs	r3, #13
 8001910:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001916:	4619      	mov	r1, r3
 8001918:	4879      	ldr	r0, [pc, #484]	; (8001b00 <MX_GPIO_Init+0x2e8>)
 800191a:	f000 fcb1 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800191e:	2307      	movs	r3, #7
 8001920:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001922:	2312      	movs	r3, #18
 8001924:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192a:	2303      	movs	r3, #3
 800192c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800192e:	2304      	movs	r3, #4
 8001930:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001936:	4619      	mov	r1, r3
 8001938:	4870      	ldr	r0, [pc, #448]	; (8001afc <MX_GPIO_Init+0x2e4>)
 800193a:	f000 fca1 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800193e:	2380      	movs	r3, #128	; 0x80
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001942:	2302      	movs	r3, #2
 8001944:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194a:	2300      	movs	r3, #0
 800194c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800194e:	230d      	movs	r3, #13
 8001950:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001956:	4619      	mov	r1, r3
 8001958:	4868      	ldr	r0, [pc, #416]	; (8001afc <MX_GPIO_Init+0x2e4>)
 800195a:	f000 fc91 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800195e:	233f      	movs	r3, #63	; 0x3f
 8001960:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001962:	230b      	movs	r3, #11
 8001964:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800196a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800196e:	4619      	mov	r1, r3
 8001970:	4864      	ldr	r0, [pc, #400]	; (8001b04 <MX_GPIO_Init+0x2ec>)
 8001972:	f000 fc85 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001976:	2301      	movs	r3, #1
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197a:	2302      	movs	r3, #2
 800197c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001982:	2300      	movs	r3, #0
 8001984:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001986:	2301      	movs	r3, #1
 8001988:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800198e:	4619      	mov	r1, r3
 8001990:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001994:	f000 fc74 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8001998:	230a      	movs	r3, #10
 800199a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800199c:	230b      	movs	r3, #11
 800199e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019a8:	4619      	mov	r1, r3
 80019aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ae:	f000 fc67 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019b2:	2301      	movs	r3, #1
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b6:	2302      	movs	r3, #2
 80019b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019be:	2300      	movs	r3, #0
 80019c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019c2:	2302      	movs	r3, #2
 80019c4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ca:	4619      	mov	r1, r3
 80019cc:	484e      	ldr	r0, [pc, #312]	; (8001b08 <MX_GPIO_Init+0x2f0>)
 80019ce:	f000 fc57 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80019d2:	2302      	movs	r3, #2
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80019d6:	230b      	movs	r3, #11
 80019d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e2:	4619      	mov	r1, r3
 80019e4:	4848      	ldr	r0, [pc, #288]	; (8001b08 <MX_GPIO_Init+0x2f0>)
 80019e6:	f000 fc4b 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 80019ea:	2344      	movs	r3, #68	; 0x44
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019ee:	2303      	movs	r3, #3
 80019f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019fa:	4619      	mov	r1, r3
 80019fc:	4842      	ldr	r0, [pc, #264]	; (8001b08 <MX_GPIO_Init+0x2f0>)
 80019fe:	f000 fc3f 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF12 PF13 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001a02:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001a06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a10:	2300      	movs	r3, #0
 8001a12:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4838      	ldr	r0, [pc, #224]	; (8001afc <MX_GPIO_Init+0x2e4>)
 8001a1c:	f000 fc30 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001a20:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a26:	2302      	movs	r3, #2
 8001a28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a32:	2301      	movs	r3, #1
 8001a34:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4830      	ldr	r0, [pc, #192]	; (8001b00 <MX_GPIO_Init+0x2e8>)
 8001a3e:	f000 fc1f 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001a42:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a50:	2300      	movs	r3, #0
 8001a52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8001a54:	2303      	movs	r3, #3
 8001a56:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4828      	ldr	r0, [pc, #160]	; (8001b00 <MX_GPIO_Init+0x2e8>)
 8001a60:	f000 fc0e 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a72:	2300      	movs	r3, #0
 8001a74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a76:	2301      	movs	r3, #1
 8001a78:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4821      	ldr	r0, [pc, #132]	; (8001b08 <MX_GPIO_Init+0x2f0>)
 8001a82:	f000 fbfd 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001a86:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8001a8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a94:	2300      	movs	r3, #0
 8001a96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001a98:	230d      	movs	r3, #13
 8001a9a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4819      	ldr	r0, [pc, #100]	; (8001b08 <MX_GPIO_Init+0x2f0>)
 8001aa4:	f000 fbec 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001aa8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8001aba:	230e      	movs	r3, #14
 8001abc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001abe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4810      	ldr	r0, [pc, #64]	; (8001b08 <MX_GPIO_Init+0x2f0>)
 8001ac6:	f000 fbdb 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001aca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ace:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001adc:	2307      	movs	r3, #7
 8001ade:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ae0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4809      	ldr	r0, [pc, #36]	; (8001b0c <MX_GPIO_Init+0x2f4>)
 8001ae8:	f000 fbca 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001aec:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af2:	2302      	movs	r3, #2
 8001af4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001af6:	e00b      	b.n	8001b10 <MX_GPIO_Init+0x2f8>
 8001af8:	40021000 	.word	0x40021000
 8001afc:	48001400 	.word	0x48001400
 8001b00:	48001000 	.word	0x48001000
 8001b04:	48000800 	.word	0x48000800
 8001b08:	48000400 	.word	0x48000400
 8001b0c:	48000c00 	.word	0x48000c00
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b14:	2300      	movs	r3, #0
 8001b16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b20:	4619      	mov	r1, r3
 8001b22:	4865      	ldr	r0, [pc, #404]	; (8001cb8 <MX_GPIO_Init+0x4a0>)
 8001b24:	f000 fbac 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001b28:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001b2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b36:	2303      	movs	r3, #3
 8001b38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001b3a:	2308      	movs	r3, #8
 8001b3c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b42:	4619      	mov	r1, r3
 8001b44:	485d      	ldr	r0, [pc, #372]	; (8001cbc <MX_GPIO_Init+0x4a4>)
 8001b46:	f000 fb9b 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b4a:	2340      	movs	r3, #64	; 0x40
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b56:	2300      	movs	r3, #0
 8001b58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001b5a:	230d      	movs	r3, #13
 8001b5c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b62:	4619      	mov	r1, r3
 8001b64:	4856      	ldr	r0, [pc, #344]	; (8001cc0 <MX_GPIO_Init+0x4a8>)
 8001b66:	f000 fb8b 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001b6a:	2380      	movs	r3, #128	; 0x80
 8001b6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b76:	2300      	movs	r3, #0
 8001b78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b82:	4619      	mov	r1, r3
 8001b84:	484e      	ldr	r0, [pc, #312]	; (8001cc0 <MX_GPIO_Init+0x4a8>)
 8001b86:	f000 fb7b 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001b8a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001b8e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b90:	2302      	movs	r3, #2
 8001b92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001b9c:	230c      	movs	r3, #12
 8001b9e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4846      	ldr	r0, [pc, #280]	; (8001cc0 <MX_GPIO_Init+0x4a8>)
 8001ba8:	f000 fb6a 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8001bac:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001bbe:	230a      	movs	r3, #10
 8001bc0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bcc:	f000 fb58 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001bd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001be2:	4619      	mov	r1, r3
 8001be4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001be8:	f000 fb4a 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001bec:	2301      	movs	r3, #1
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001bfc:	2309      	movs	r3, #9
 8001bfe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c04:	4619      	mov	r1, r3
 8001c06:	482c      	ldr	r0, [pc, #176]	; (8001cb8 <MX_GPIO_Init+0x4a0>)
 8001c08:	f000 fb3a 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c0c:	2304      	movs	r3, #4
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c10:	2302      	movs	r3, #2
 8001c12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001c1c:	230c      	movs	r3, #12
 8001c1e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c24:	4619      	mov	r1, r3
 8001c26:	4824      	ldr	r0, [pc, #144]	; (8001cb8 <MX_GPIO_Init+0x4a0>)
 8001c28:	f000 fb2a 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001c2c:	2378      	movs	r3, #120	; 0x78
 8001c2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c30:	2302      	movs	r3, #2
 8001c32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c3c:	2307      	movs	r3, #7
 8001c3e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c44:	4619      	mov	r1, r3
 8001c46:	481c      	ldr	r0, [pc, #112]	; (8001cb8 <MX_GPIO_Init+0x4a0>)
 8001c48:	f000 fb1a 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001c4c:	2338      	movs	r3, #56	; 0x38
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c50:	2302      	movs	r3, #2
 8001c52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c5c:	2306      	movs	r3, #6
 8001c5e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c64:	4619      	mov	r1, r3
 8001c66:	4817      	ldr	r0, [pc, #92]	; (8001cc4 <MX_GPIO_Init+0x4ac>)
 8001c68:	f000 fb0a 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c6c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c72:	2312      	movs	r3, #18
 8001c74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c7e:	2304      	movs	r3, #4
 8001c80:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c86:	4619      	mov	r1, r3
 8001c88:	480e      	ldr	r0, [pc, #56]	; (8001cc4 <MX_GPIO_Init+0x4ac>)
 8001c8a:	f000 faf9 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c92:	2302      	movs	r3, #2
 8001c94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ca2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4807      	ldr	r0, [pc, #28]	; (8001cc8 <MX_GPIO_Init+0x4b0>)
 8001caa:	f000 fae9 	bl	8002280 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cae:	bf00      	nop
 8001cb0:	3738      	adds	r7, #56	; 0x38
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	48000c00 	.word	0x48000c00
 8001cbc:	48001800 	.word	0x48001800
 8001cc0:	48000800 	.word	0x48000800
 8001cc4:	48000400 	.word	0x48000400
 8001cc8:	48001000 	.word	0x48001000

08001ccc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a04      	ldr	r2, [pc, #16]	; (8001cec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d101      	bne.n	8001ce2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001cde:	f000 f9a9 	bl	8002034 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40000800 	.word	0x40000800

08001cf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cf4:	b672      	cpsid	i
}
 8001cf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cf8:	e7fe      	b.n	8001cf8 <Error_Handler+0x8>
	...

08001cfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d02:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <HAL_MspInit+0x44>)
 8001d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d06:	4a0e      	ldr	r2, [pc, #56]	; (8001d40 <HAL_MspInit+0x44>)
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	6613      	str	r3, [r2, #96]	; 0x60
 8001d0e:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <HAL_MspInit+0x44>)
 8001d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	607b      	str	r3, [r7, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d1a:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <HAL_MspInit+0x44>)
 8001d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1e:	4a08      	ldr	r2, [pc, #32]	; (8001d40 <HAL_MspInit+0x44>)
 8001d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d24:	6593      	str	r3, [r2, #88]	; 0x58
 8001d26:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <HAL_MspInit+0x44>)
 8001d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2e:	603b      	str	r3, [r7, #0]
 8001d30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	40021000 	.word	0x40021000

08001d44 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b0a8      	sub	sp, #160	; 0xa0
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d4c:	f107 030c 	add.w	r3, r7, #12
 8001d50:	2294      	movs	r2, #148	; 0x94
 8001d52:	2100      	movs	r1, #0
 8001d54:	4618      	mov	r0, r3
 8001d56:	f003 faf9 	bl	800534c <memset>
  if(hrtc->Instance==RTC)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a10      	ldr	r2, [pc, #64]	; (8001da0 <HAL_RTC_MspInit+0x5c>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d118      	bne.n	8001d96 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001d64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d68:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001d6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d72:	f107 030c 	add.w	r3, r7, #12
 8001d76:	4618      	mov	r0, r3
 8001d78:	f001 fc04 	bl	8003584 <HAL_RCCEx_PeriphCLKConfig>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001d82:	f7ff ffb5 	bl	8001cf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001d86:	4b07      	ldr	r3, [pc, #28]	; (8001da4 <HAL_RTC_MspInit+0x60>)
 8001d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d8c:	4a05      	ldr	r2, [pc, #20]	; (8001da4 <HAL_RTC_MspInit+0x60>)
 8001d8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001d96:	bf00      	nop
 8001d98:	37a0      	adds	r7, #160	; 0xa0
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40002800 	.word	0x40002800
 8001da4:	40021000 	.word	0x40021000

08001da8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b08a      	sub	sp, #40	; 0x28
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db0:	f107 0314 	add.w	r3, r7, #20
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a17      	ldr	r2, [pc, #92]	; (8001e24 <HAL_SPI_MspInit+0x7c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d128      	bne.n	8001e1c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dca:	4b17      	ldr	r3, [pc, #92]	; (8001e28 <HAL_SPI_MspInit+0x80>)
 8001dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dce:	4a16      	ldr	r2, [pc, #88]	; (8001e28 <HAL_SPI_MspInit+0x80>)
 8001dd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001dd4:	6613      	str	r3, [r2, #96]	; 0x60
 8001dd6:	4b14      	ldr	r3, [pc, #80]	; (8001e28 <HAL_SPI_MspInit+0x80>)
 8001dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dde:	613b      	str	r3, [r7, #16]
 8001de0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de2:	4b11      	ldr	r3, [pc, #68]	; (8001e28 <HAL_SPI_MspInit+0x80>)
 8001de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de6:	4a10      	ldr	r2, [pc, #64]	; (8001e28 <HAL_SPI_MspInit+0x80>)
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dee:	4b0e      	ldr	r3, [pc, #56]	; (8001e28 <HAL_SPI_MspInit+0x80>)
 8001df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001dfa:	23f0      	movs	r3, #240	; 0xf0
 8001dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e06:	2303      	movs	r3, #3
 8001e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e0a:	2305      	movs	r3, #5
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0e:	f107 0314 	add.w	r3, r7, #20
 8001e12:	4619      	mov	r1, r3
 8001e14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e18:	f000 fa32 	bl	8002280 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e1c:	bf00      	nop
 8001e1e:	3728      	adds	r7, #40	; 0x28
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40013000 	.word	0x40013000
 8001e28:	40021000 	.word	0x40021000

08001e2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b08e      	sub	sp, #56	; 0x38
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001e34:	2300      	movs	r3, #0
 8001e36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001e3a:	4b34      	ldr	r3, [pc, #208]	; (8001f0c <HAL_InitTick+0xe0>)
 8001e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3e:	4a33      	ldr	r2, [pc, #204]	; (8001f0c <HAL_InitTick+0xe0>)
 8001e40:	f043 0304 	orr.w	r3, r3, #4
 8001e44:	6593      	str	r3, [r2, #88]	; 0x58
 8001e46:	4b31      	ldr	r3, [pc, #196]	; (8001f0c <HAL_InitTick+0xe0>)
 8001e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4a:	f003 0304 	and.w	r3, r3, #4
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e52:	f107 0210 	add.w	r2, r7, #16
 8001e56:	f107 0314 	add.w	r3, r7, #20
 8001e5a:	4611      	mov	r1, r2
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f001 fa9f 	bl	80033a0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001e62:	6a3b      	ldr	r3, [r7, #32]
 8001e64:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d103      	bne.n	8001e74 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001e6c:	f001 fa82 	bl	8003374 <HAL_RCC_GetPCLK1Freq>
 8001e70:	6378      	str	r0, [r7, #52]	; 0x34
 8001e72:	e004      	b.n	8001e7e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001e74:	f001 fa7e 	bl	8003374 <HAL_RCC_GetPCLK1Freq>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e80:	4a23      	ldr	r2, [pc, #140]	; (8001f10 <HAL_InitTick+0xe4>)
 8001e82:	fba2 2303 	umull	r2, r3, r2, r3
 8001e86:	0c9b      	lsrs	r3, r3, #18
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001e8c:	4b21      	ldr	r3, [pc, #132]	; (8001f14 <HAL_InitTick+0xe8>)
 8001e8e:	4a22      	ldr	r2, [pc, #136]	; (8001f18 <HAL_InitTick+0xec>)
 8001e90:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001e92:	4b20      	ldr	r3, [pc, #128]	; (8001f14 <HAL_InitTick+0xe8>)
 8001e94:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e98:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001e9a:	4a1e      	ldr	r2, [pc, #120]	; (8001f14 <HAL_InitTick+0xe8>)
 8001e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e9e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001ea0:	4b1c      	ldr	r3, [pc, #112]	; (8001f14 <HAL_InitTick+0xe8>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea6:	4b1b      	ldr	r3, [pc, #108]	; (8001f14 <HAL_InitTick+0xe8>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eac:	4b19      	ldr	r3, [pc, #100]	; (8001f14 <HAL_InitTick+0xe8>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001eb2:	4818      	ldr	r0, [pc, #96]	; (8001f14 <HAL_InitTick+0xe8>)
 8001eb4:	f002 ff3a 	bl	8004d2c <HAL_TIM_Base_Init>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001ebe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d11b      	bne.n	8001efe <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001ec6:	4813      	ldr	r0, [pc, #76]	; (8001f14 <HAL_InitTick+0xe8>)
 8001ec8:	f002 ff92 	bl	8004df0 <HAL_TIM_Base_Start_IT>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001ed2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d111      	bne.n	8001efe <HAL_InitTick+0xd2>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001eda:	201e      	movs	r0, #30
 8001edc:	f000 f9c2 	bl	8002264 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b0f      	cmp	r3, #15
 8001ee4:	d808      	bhi.n	8001ef8 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	6879      	ldr	r1, [r7, #4]
 8001eea:	201e      	movs	r0, #30
 8001eec:	f000 f99e 	bl	800222c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ef0:	4a0a      	ldr	r2, [pc, #40]	; (8001f1c <HAL_InitTick+0xf0>)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6013      	str	r3, [r2, #0]
 8001ef6:	e002      	b.n	8001efe <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001efe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3738      	adds	r7, #56	; 0x38
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	431bde83 	.word	0x431bde83
 8001f14:	20000118 	.word	0x20000118
 8001f18:	40000800 	.word	0x40000800
 8001f1c:	2000006c 	.word	0x2000006c

08001f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f24:	e7fe      	b.n	8001f24 <NMI_Handler+0x4>

08001f26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f26:	b480      	push	{r7}
 8001f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f2a:	e7fe      	b.n	8001f2a <HardFault_Handler+0x4>

08001f2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f30:	e7fe      	b.n	8001f30 <MemManage_Handler+0x4>

08001f32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f32:	b480      	push	{r7}
 8001f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f36:	e7fe      	b.n	8001f36 <BusFault_Handler+0x4>

08001f38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f3c:	e7fe      	b.n	8001f3c <UsageFault_Handler+0x4>

08001f3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f42:	bf00      	nop
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f50:	bf00      	nop
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f6c:	bf00      	nop
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
	...

08001f78 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001f7c:	4802      	ldr	r0, [pc, #8]	; (8001f88 <TIM4_IRQHandler+0x10>)
 8001f7e:	f002 ffa7 	bl	8004ed0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000118 	.word	0x20000118

08001f8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f90:	4b06      	ldr	r3, [pc, #24]	; (8001fac <SystemInit+0x20>)
 8001f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f96:	4a05      	ldr	r2, [pc, #20]	; (8001fac <SystemInit+0x20>)
 8001f98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001fa0:	bf00      	nop
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	e000ed00 	.word	0xe000ed00

08001fb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001fb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fe8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fb4:	f7ff ffea 	bl	8001f8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fb8:	480c      	ldr	r0, [pc, #48]	; (8001fec <LoopForever+0x6>)
  ldr r1, =_edata
 8001fba:	490d      	ldr	r1, [pc, #52]	; (8001ff0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fbc:	4a0d      	ldr	r2, [pc, #52]	; (8001ff4 <LoopForever+0xe>)
  movs r3, #0
 8001fbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fc0:	e002      	b.n	8001fc8 <LoopCopyDataInit>

08001fc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fc6:	3304      	adds	r3, #4

08001fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fcc:	d3f9      	bcc.n	8001fc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fce:	4a0a      	ldr	r2, [pc, #40]	; (8001ff8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fd0:	4c0a      	ldr	r4, [pc, #40]	; (8001ffc <LoopForever+0x16>)
  movs r3, #0
 8001fd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fd4:	e001      	b.n	8001fda <LoopFillZerobss>

08001fd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fd8:	3204      	adds	r2, #4

08001fda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fdc:	d3fb      	bcc.n	8001fd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fde:	f003 f9bd 	bl	800535c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fe2:	f7ff fa43 	bl	800146c <main>

08001fe6 <LoopForever>:

LoopForever:
    b LoopForever
 8001fe6:	e7fe      	b.n	8001fe6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001fe8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001fec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ff0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001ff4:	0800597c 	.word	0x0800597c
  ldr r2, =_sbss
 8001ff8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001ffc:	20000168 	.word	0x20000168

08002000 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002000:	e7fe      	b.n	8002000 <ADC1_IRQHandler>

08002002 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b082      	sub	sp, #8
 8002006:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002008:	2300      	movs	r3, #0
 800200a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800200c:	2003      	movs	r0, #3
 800200e:	f000 f902 	bl	8002216 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002012:	200f      	movs	r0, #15
 8002014:	f7ff ff0a 	bl	8001e2c <HAL_InitTick>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d002      	beq.n	8002024 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	71fb      	strb	r3, [r7, #7]
 8002022:	e001      	b.n	8002028 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002024:	f7ff fe6a 	bl	8001cfc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002028:	79fb      	ldrb	r3, [r7, #7]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
	...

08002034 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002038:	4b06      	ldr	r3, [pc, #24]	; (8002054 <HAL_IncTick+0x20>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	461a      	mov	r2, r3
 800203e:	4b06      	ldr	r3, [pc, #24]	; (8002058 <HAL_IncTick+0x24>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4413      	add	r3, r2
 8002044:	4a04      	ldr	r2, [pc, #16]	; (8002058 <HAL_IncTick+0x24>)
 8002046:	6013      	str	r3, [r2, #0]
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	20000070 	.word	0x20000070
 8002058:	20000164 	.word	0x20000164

0800205c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  return uwTick;
 8002060:	4b03      	ldr	r3, [pc, #12]	; (8002070 <HAL_GetTick+0x14>)
 8002062:	681b      	ldr	r3, [r3, #0]
}
 8002064:	4618      	mov	r0, r3
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	20000164 	.word	0x20000164

08002074 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800207c:	f7ff ffee 	bl	800205c <HAL_GetTick>
 8002080:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800208c:	d005      	beq.n	800209a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800208e:	4b0a      	ldr	r3, [pc, #40]	; (80020b8 <HAL_Delay+0x44>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	461a      	mov	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	4413      	add	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800209a:	bf00      	nop
 800209c:	f7ff ffde 	bl	800205c <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d8f7      	bhi.n	800209c <HAL_Delay+0x28>
  {
  }
}
 80020ac:	bf00      	nop
 80020ae:	bf00      	nop
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	20000070 	.word	0x20000070

080020bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020cc:	4b0c      	ldr	r3, [pc, #48]	; (8002100 <__NVIC_SetPriorityGrouping+0x44>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020d2:	68ba      	ldr	r2, [r7, #8]
 80020d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020d8:	4013      	ands	r3, r2
 80020da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ee:	4a04      	ldr	r2, [pc, #16]	; (8002100 <__NVIC_SetPriorityGrouping+0x44>)
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	60d3      	str	r3, [r2, #12]
}
 80020f4:	bf00      	nop
 80020f6:	3714      	adds	r7, #20
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	e000ed00 	.word	0xe000ed00

08002104 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002108:	4b04      	ldr	r3, [pc, #16]	; (800211c <__NVIC_GetPriorityGrouping+0x18>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	0a1b      	lsrs	r3, r3, #8
 800210e:	f003 0307 	and.w	r3, r3, #7
}
 8002112:	4618      	mov	r0, r3
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800212a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212e:	2b00      	cmp	r3, #0
 8002130:	db0b      	blt.n	800214a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002132:	79fb      	ldrb	r3, [r7, #7]
 8002134:	f003 021f 	and.w	r2, r3, #31
 8002138:	4907      	ldr	r1, [pc, #28]	; (8002158 <__NVIC_EnableIRQ+0x38>)
 800213a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213e:	095b      	lsrs	r3, r3, #5
 8002140:	2001      	movs	r0, #1
 8002142:	fa00 f202 	lsl.w	r2, r0, r2
 8002146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	e000e100 	.word	0xe000e100

0800215c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	6039      	str	r1, [r7, #0]
 8002166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216c:	2b00      	cmp	r3, #0
 800216e:	db0a      	blt.n	8002186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	b2da      	uxtb	r2, r3
 8002174:	490c      	ldr	r1, [pc, #48]	; (80021a8 <__NVIC_SetPriority+0x4c>)
 8002176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217a:	0112      	lsls	r2, r2, #4
 800217c:	b2d2      	uxtb	r2, r2
 800217e:	440b      	add	r3, r1
 8002180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002184:	e00a      	b.n	800219c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	b2da      	uxtb	r2, r3
 800218a:	4908      	ldr	r1, [pc, #32]	; (80021ac <__NVIC_SetPriority+0x50>)
 800218c:	79fb      	ldrb	r3, [r7, #7]
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	3b04      	subs	r3, #4
 8002194:	0112      	lsls	r2, r2, #4
 8002196:	b2d2      	uxtb	r2, r2
 8002198:	440b      	add	r3, r1
 800219a:	761a      	strb	r2, [r3, #24]
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	e000e100 	.word	0xe000e100
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b089      	sub	sp, #36	; 0x24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	f1c3 0307 	rsb	r3, r3, #7
 80021ca:	2b04      	cmp	r3, #4
 80021cc:	bf28      	it	cs
 80021ce:	2304      	movcs	r3, #4
 80021d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	3304      	adds	r3, #4
 80021d6:	2b06      	cmp	r3, #6
 80021d8:	d902      	bls.n	80021e0 <NVIC_EncodePriority+0x30>
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	3b03      	subs	r3, #3
 80021de:	e000      	b.n	80021e2 <NVIC_EncodePriority+0x32>
 80021e0:	2300      	movs	r3, #0
 80021e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e4:	f04f 32ff 	mov.w	r2, #4294967295
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43da      	mvns	r2, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	401a      	ands	r2, r3
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021f8:	f04f 31ff 	mov.w	r1, #4294967295
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002202:	43d9      	mvns	r1, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002208:	4313      	orrs	r3, r2
         );
}
 800220a:	4618      	mov	r0, r3
 800220c:	3724      	adds	r7, #36	; 0x24
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b082      	sub	sp, #8
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7ff ff4c 	bl	80020bc <__NVIC_SetPriorityGrouping>
}
 8002224:	bf00      	nop
 8002226:	3708      	adds	r7, #8
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
 8002238:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800223a:	2300      	movs	r3, #0
 800223c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800223e:	f7ff ff61 	bl	8002104 <__NVIC_GetPriorityGrouping>
 8002242:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	68b9      	ldr	r1, [r7, #8]
 8002248:	6978      	ldr	r0, [r7, #20]
 800224a:	f7ff ffb1 	bl	80021b0 <NVIC_EncodePriority>
 800224e:	4602      	mov	r2, r0
 8002250:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002254:	4611      	mov	r1, r2
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff ff80 	bl	800215c <__NVIC_SetPriority>
}
 800225c:	bf00      	nop
 800225e:	3718      	adds	r7, #24
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800226e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff ff54 	bl	8002120 <__NVIC_EnableIRQ>
}
 8002278:	bf00      	nop
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002280:	b480      	push	{r7}
 8002282:	b087      	sub	sp, #28
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800228a:	2300      	movs	r3, #0
 800228c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800228e:	e166      	b.n	800255e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	2101      	movs	r1, #1
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	fa01 f303 	lsl.w	r3, r1, r3
 800229c:	4013      	ands	r3, r2
 800229e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f000 8158 	beq.w	8002558 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 0303 	and.w	r3, r3, #3
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d005      	beq.n	80022c0 <HAL_GPIO_Init+0x40>
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f003 0303 	and.w	r3, r3, #3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d130      	bne.n	8002322 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	2203      	movs	r2, #3
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	43db      	mvns	r3, r3
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	4013      	ands	r3, r2
 80022d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	68da      	ldr	r2, [r3, #12]
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022f6:	2201      	movs	r2, #1
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43db      	mvns	r3, r3
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	4013      	ands	r3, r2
 8002304:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	091b      	lsrs	r3, r3, #4
 800230c:	f003 0201 	and.w	r2, r3, #1
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	4313      	orrs	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f003 0303 	and.w	r3, r3, #3
 800232a:	2b03      	cmp	r3, #3
 800232c:	d017      	beq.n	800235e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	2203      	movs	r2, #3
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	43db      	mvns	r3, r3
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	4013      	ands	r3, r2
 8002344:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	689a      	ldr	r2, [r3, #8]
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	4313      	orrs	r3, r2
 8002356:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f003 0303 	and.w	r3, r3, #3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d123      	bne.n	80023b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	08da      	lsrs	r2, r3, #3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	3208      	adds	r2, #8
 8002372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002376:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	220f      	movs	r2, #15
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	43db      	mvns	r3, r3
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	4013      	ands	r3, r2
 800238c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	691a      	ldr	r2, [r3, #16]
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	f003 0307 	and.w	r3, r3, #7
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	08da      	lsrs	r2, r3, #3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3208      	adds	r2, #8
 80023ac:	6939      	ldr	r1, [r7, #16]
 80023ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	2203      	movs	r2, #3
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	43db      	mvns	r3, r3
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	4013      	ands	r3, r2
 80023c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f003 0203 	and.w	r2, r3, #3
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	4313      	orrs	r3, r2
 80023de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f000 80b2 	beq.w	8002558 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023f4:	4b61      	ldr	r3, [pc, #388]	; (800257c <HAL_GPIO_Init+0x2fc>)
 80023f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023f8:	4a60      	ldr	r2, [pc, #384]	; (800257c <HAL_GPIO_Init+0x2fc>)
 80023fa:	f043 0301 	orr.w	r3, r3, #1
 80023fe:	6613      	str	r3, [r2, #96]	; 0x60
 8002400:	4b5e      	ldr	r3, [pc, #376]	; (800257c <HAL_GPIO_Init+0x2fc>)
 8002402:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	60bb      	str	r3, [r7, #8]
 800240a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800240c:	4a5c      	ldr	r2, [pc, #368]	; (8002580 <HAL_GPIO_Init+0x300>)
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	089b      	lsrs	r3, r3, #2
 8002412:	3302      	adds	r3, #2
 8002414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002418:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	f003 0303 	and.w	r3, r3, #3
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	220f      	movs	r2, #15
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	43db      	mvns	r3, r3
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	4013      	ands	r3, r2
 800242e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002436:	d02b      	beq.n	8002490 <HAL_GPIO_Init+0x210>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4a52      	ldr	r2, [pc, #328]	; (8002584 <HAL_GPIO_Init+0x304>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d025      	beq.n	800248c <HAL_GPIO_Init+0x20c>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4a51      	ldr	r2, [pc, #324]	; (8002588 <HAL_GPIO_Init+0x308>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d01f      	beq.n	8002488 <HAL_GPIO_Init+0x208>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a50      	ldr	r2, [pc, #320]	; (800258c <HAL_GPIO_Init+0x30c>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d019      	beq.n	8002484 <HAL_GPIO_Init+0x204>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a4f      	ldr	r2, [pc, #316]	; (8002590 <HAL_GPIO_Init+0x310>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d013      	beq.n	8002480 <HAL_GPIO_Init+0x200>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a4e      	ldr	r2, [pc, #312]	; (8002594 <HAL_GPIO_Init+0x314>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d00d      	beq.n	800247c <HAL_GPIO_Init+0x1fc>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a4d      	ldr	r2, [pc, #308]	; (8002598 <HAL_GPIO_Init+0x318>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d007      	beq.n	8002478 <HAL_GPIO_Init+0x1f8>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a4c      	ldr	r2, [pc, #304]	; (800259c <HAL_GPIO_Init+0x31c>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d101      	bne.n	8002474 <HAL_GPIO_Init+0x1f4>
 8002470:	2307      	movs	r3, #7
 8002472:	e00e      	b.n	8002492 <HAL_GPIO_Init+0x212>
 8002474:	2308      	movs	r3, #8
 8002476:	e00c      	b.n	8002492 <HAL_GPIO_Init+0x212>
 8002478:	2306      	movs	r3, #6
 800247a:	e00a      	b.n	8002492 <HAL_GPIO_Init+0x212>
 800247c:	2305      	movs	r3, #5
 800247e:	e008      	b.n	8002492 <HAL_GPIO_Init+0x212>
 8002480:	2304      	movs	r3, #4
 8002482:	e006      	b.n	8002492 <HAL_GPIO_Init+0x212>
 8002484:	2303      	movs	r3, #3
 8002486:	e004      	b.n	8002492 <HAL_GPIO_Init+0x212>
 8002488:	2302      	movs	r3, #2
 800248a:	e002      	b.n	8002492 <HAL_GPIO_Init+0x212>
 800248c:	2301      	movs	r3, #1
 800248e:	e000      	b.n	8002492 <HAL_GPIO_Init+0x212>
 8002490:	2300      	movs	r3, #0
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	f002 0203 	and.w	r2, r2, #3
 8002498:	0092      	lsls	r2, r2, #2
 800249a:	4093      	lsls	r3, r2
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	4313      	orrs	r3, r2
 80024a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024a2:	4937      	ldr	r1, [pc, #220]	; (8002580 <HAL_GPIO_Init+0x300>)
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	089b      	lsrs	r3, r3, #2
 80024a8:	3302      	adds	r3, #2
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024b0:	4b3b      	ldr	r3, [pc, #236]	; (80025a0 <HAL_GPIO_Init+0x320>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	43db      	mvns	r3, r3
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	4013      	ands	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024d4:	4a32      	ldr	r2, [pc, #200]	; (80025a0 <HAL_GPIO_Init+0x320>)
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80024da:	4b31      	ldr	r3, [pc, #196]	; (80025a0 <HAL_GPIO_Init+0x320>)
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	43db      	mvns	r3, r3
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	4013      	ands	r3, r2
 80024e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024fe:	4a28      	ldr	r2, [pc, #160]	; (80025a0 <HAL_GPIO_Init+0x320>)
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002504:	4b26      	ldr	r3, [pc, #152]	; (80025a0 <HAL_GPIO_Init+0x320>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	43db      	mvns	r3, r3
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	4013      	ands	r3, r2
 8002512:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d003      	beq.n	8002528 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	4313      	orrs	r3, r2
 8002526:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002528:	4a1d      	ldr	r2, [pc, #116]	; (80025a0 <HAL_GPIO_Init+0x320>)
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800252e:	4b1c      	ldr	r3, [pc, #112]	; (80025a0 <HAL_GPIO_Init+0x320>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	43db      	mvns	r3, r3
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	4013      	ands	r3, r2
 800253c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	4313      	orrs	r3, r2
 8002550:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002552:	4a13      	ldr	r2, [pc, #76]	; (80025a0 <HAL_GPIO_Init+0x320>)
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	3301      	adds	r3, #1
 800255c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	fa22 f303 	lsr.w	r3, r2, r3
 8002568:	2b00      	cmp	r3, #0
 800256a:	f47f ae91 	bne.w	8002290 <HAL_GPIO_Init+0x10>
  }
}
 800256e:	bf00      	nop
 8002570:	bf00      	nop
 8002572:	371c      	adds	r7, #28
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	40021000 	.word	0x40021000
 8002580:	40010000 	.word	0x40010000
 8002584:	48000400 	.word	0x48000400
 8002588:	48000800 	.word	0x48000800
 800258c:	48000c00 	.word	0x48000c00
 8002590:	48001000 	.word	0x48001000
 8002594:	48001400 	.word	0x48001400
 8002598:	48001800 	.word	0x48001800
 800259c:	48001c00 	.word	0x48001c00
 80025a0:	40010400 	.word	0x40010400

080025a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	460b      	mov	r3, r1
 80025ae:	807b      	strh	r3, [r7, #2]
 80025b0:	4613      	mov	r3, r2
 80025b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025b4:	787b      	ldrb	r3, [r7, #1]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025ba:	887a      	ldrh	r2, [r7, #2]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025c0:	e002      	b.n	80025c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025c2:	887a      	ldrh	r2, [r7, #2]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025d8:	4b05      	ldr	r3, [pc, #20]	; (80025f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a04      	ldr	r2, [pc, #16]	; (80025f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80025de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e2:	6013      	str	r3, [r2, #0]
}
 80025e4:	bf00      	nop
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	40007000 	.word	0x40007000

080025f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80025f8:	4b0d      	ldr	r3, [pc, #52]	; (8002630 <HAL_PWREx_GetVoltageRange+0x3c>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002604:	d102      	bne.n	800260c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002606:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800260a:	e00b      	b.n	8002624 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800260c:	4b08      	ldr	r3, [pc, #32]	; (8002630 <HAL_PWREx_GetVoltageRange+0x3c>)
 800260e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002616:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800261a:	d102      	bne.n	8002622 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800261c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002620:	e000      	b.n	8002624 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002622:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002624:	4618      	mov	r0, r3
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	40007000 	.word	0x40007000

08002634 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d141      	bne.n	80026c6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002642:	4b4b      	ldr	r3, [pc, #300]	; (8002770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800264a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800264e:	d131      	bne.n	80026b4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002650:	4b47      	ldr	r3, [pc, #284]	; (8002770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002652:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002656:	4a46      	ldr	r2, [pc, #280]	; (8002770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002658:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800265c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002660:	4b43      	ldr	r3, [pc, #268]	; (8002770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002668:	4a41      	ldr	r2, [pc, #260]	; (8002770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800266a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800266e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002670:	4b40      	ldr	r3, [pc, #256]	; (8002774 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2232      	movs	r2, #50	; 0x32
 8002676:	fb02 f303 	mul.w	r3, r2, r3
 800267a:	4a3f      	ldr	r2, [pc, #252]	; (8002778 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800267c:	fba2 2303 	umull	r2, r3, r2, r3
 8002680:	0c9b      	lsrs	r3, r3, #18
 8002682:	3301      	adds	r3, #1
 8002684:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002686:	e002      	b.n	800268e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	3b01      	subs	r3, #1
 800268c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800268e:	4b38      	ldr	r3, [pc, #224]	; (8002770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800269a:	d102      	bne.n	80026a2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1f2      	bne.n	8002688 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026a2:	4b33      	ldr	r3, [pc, #204]	; (8002770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026ae:	d158      	bne.n	8002762 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e057      	b.n	8002764 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026b4:	4b2e      	ldr	r3, [pc, #184]	; (8002770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026ba:	4a2d      	ldr	r2, [pc, #180]	; (8002770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80026c4:	e04d      	b.n	8002762 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026cc:	d141      	bne.n	8002752 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80026ce:	4b28      	ldr	r3, [pc, #160]	; (8002770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026da:	d131      	bne.n	8002740 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026dc:	4b24      	ldr	r3, [pc, #144]	; (8002770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026e2:	4a23      	ldr	r2, [pc, #140]	; (8002770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026ec:	4b20      	ldr	r3, [pc, #128]	; (8002770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026f4:	4a1e      	ldr	r2, [pc, #120]	; (8002770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80026fc:	4b1d      	ldr	r3, [pc, #116]	; (8002774 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2232      	movs	r2, #50	; 0x32
 8002702:	fb02 f303 	mul.w	r3, r2, r3
 8002706:	4a1c      	ldr	r2, [pc, #112]	; (8002778 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002708:	fba2 2303 	umull	r2, r3, r2, r3
 800270c:	0c9b      	lsrs	r3, r3, #18
 800270e:	3301      	adds	r3, #1
 8002710:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002712:	e002      	b.n	800271a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	3b01      	subs	r3, #1
 8002718:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800271a:	4b15      	ldr	r3, [pc, #84]	; (8002770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002726:	d102      	bne.n	800272e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1f2      	bne.n	8002714 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800272e:	4b10      	ldr	r3, [pc, #64]	; (8002770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800273a:	d112      	bne.n	8002762 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e011      	b.n	8002764 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002740:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002742:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002746:	4a0a      	ldr	r2, [pc, #40]	; (8002770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800274c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002750:	e007      	b.n	8002762 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002752:	4b07      	ldr	r3, [pc, #28]	; (8002770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800275a:	4a05      	ldr	r2, [pc, #20]	; (8002770 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800275c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002760:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	40007000 	.word	0x40007000
 8002774:	20000068 	.word	0x20000068
 8002778:	431bde83 	.word	0x431bde83

0800277c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002780:	4b05      	ldr	r3, [pc, #20]	; (8002798 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	4a04      	ldr	r2, [pc, #16]	; (8002798 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002786:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800278a:	6053      	str	r3, [r2, #4]
}
 800278c:	bf00      	nop
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	40007000 	.word	0x40007000

0800279c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b088      	sub	sp, #32
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d102      	bne.n	80027b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	f000 bc08 	b.w	8002fc0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027b0:	4b96      	ldr	r3, [pc, #600]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 030c 	and.w	r3, r3, #12
 80027b8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027ba:	4b94      	ldr	r3, [pc, #592]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	f003 0303 	and.w	r3, r3, #3
 80027c2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0310 	and.w	r3, r3, #16
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 80e4 	beq.w	800299a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d007      	beq.n	80027e8 <HAL_RCC_OscConfig+0x4c>
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	2b0c      	cmp	r3, #12
 80027dc:	f040 808b 	bne.w	80028f6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	f040 8087 	bne.w	80028f6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027e8:	4b88      	ldr	r3, [pc, #544]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d005      	beq.n	8002800 <HAL_RCC_OscConfig+0x64>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e3df      	b.n	8002fc0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a1a      	ldr	r2, [r3, #32]
 8002804:	4b81      	ldr	r3, [pc, #516]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0308 	and.w	r3, r3, #8
 800280c:	2b00      	cmp	r3, #0
 800280e:	d004      	beq.n	800281a <HAL_RCC_OscConfig+0x7e>
 8002810:	4b7e      	ldr	r3, [pc, #504]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002818:	e005      	b.n	8002826 <HAL_RCC_OscConfig+0x8a>
 800281a:	4b7c      	ldr	r3, [pc, #496]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 800281c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002820:	091b      	lsrs	r3, r3, #4
 8002822:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002826:	4293      	cmp	r3, r2
 8002828:	d223      	bcs.n	8002872 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	4618      	mov	r0, r3
 8002830:	f000 fde8 	bl	8003404 <RCC_SetFlashLatencyFromMSIRange>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e3c0      	b.n	8002fc0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800283e:	4b73      	ldr	r3, [pc, #460]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a72      	ldr	r2, [pc, #456]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 8002844:	f043 0308 	orr.w	r3, r3, #8
 8002848:	6013      	str	r3, [r2, #0]
 800284a:	4b70      	ldr	r3, [pc, #448]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	496d      	ldr	r1, [pc, #436]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 8002858:	4313      	orrs	r3, r2
 800285a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800285c:	4b6b      	ldr	r3, [pc, #428]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	69db      	ldr	r3, [r3, #28]
 8002868:	021b      	lsls	r3, r3, #8
 800286a:	4968      	ldr	r1, [pc, #416]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 800286c:	4313      	orrs	r3, r2
 800286e:	604b      	str	r3, [r1, #4]
 8002870:	e025      	b.n	80028be <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002872:	4b66      	ldr	r3, [pc, #408]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a65      	ldr	r2, [pc, #404]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 8002878:	f043 0308 	orr.w	r3, r3, #8
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	4b63      	ldr	r3, [pc, #396]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a1b      	ldr	r3, [r3, #32]
 800288a:	4960      	ldr	r1, [pc, #384]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 800288c:	4313      	orrs	r3, r2
 800288e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002890:	4b5e      	ldr	r3, [pc, #376]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	69db      	ldr	r3, [r3, #28]
 800289c:	021b      	lsls	r3, r3, #8
 800289e:	495b      	ldr	r1, [pc, #364]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d109      	bne.n	80028be <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f000 fda8 	bl	8003404 <RCC_SetFlashLatencyFromMSIRange>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e380      	b.n	8002fc0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028be:	f000 fcc1 	bl	8003244 <HAL_RCC_GetSysClockFreq>
 80028c2:	4602      	mov	r2, r0
 80028c4:	4b51      	ldr	r3, [pc, #324]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	091b      	lsrs	r3, r3, #4
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	4950      	ldr	r1, [pc, #320]	; (8002a10 <HAL_RCC_OscConfig+0x274>)
 80028d0:	5ccb      	ldrb	r3, [r1, r3]
 80028d2:	f003 031f 	and.w	r3, r3, #31
 80028d6:	fa22 f303 	lsr.w	r3, r2, r3
 80028da:	4a4e      	ldr	r2, [pc, #312]	; (8002a14 <HAL_RCC_OscConfig+0x278>)
 80028dc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80028de:	4b4e      	ldr	r3, [pc, #312]	; (8002a18 <HAL_RCC_OscConfig+0x27c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff faa2 	bl	8001e2c <HAL_InitTick>
 80028e8:	4603      	mov	r3, r0
 80028ea:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80028ec:	7bfb      	ldrb	r3, [r7, #15]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d052      	beq.n	8002998 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80028f2:	7bfb      	ldrb	r3, [r7, #15]
 80028f4:	e364      	b.n	8002fc0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d032      	beq.n	8002964 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80028fe:	4b43      	ldr	r3, [pc, #268]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a42      	ldr	r2, [pc, #264]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800290a:	f7ff fba7 	bl	800205c <HAL_GetTick>
 800290e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002910:	e008      	b.n	8002924 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002912:	f7ff fba3 	bl	800205c <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d901      	bls.n	8002924 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e34d      	b.n	8002fc0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002924:	4b39      	ldr	r3, [pc, #228]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d0f0      	beq.n	8002912 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002930:	4b36      	ldr	r3, [pc, #216]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a35      	ldr	r2, [pc, #212]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 8002936:	f043 0308 	orr.w	r3, r3, #8
 800293a:	6013      	str	r3, [r2, #0]
 800293c:	4b33      	ldr	r3, [pc, #204]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	4930      	ldr	r1, [pc, #192]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 800294a:	4313      	orrs	r3, r2
 800294c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800294e:	4b2f      	ldr	r3, [pc, #188]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	021b      	lsls	r3, r3, #8
 800295c:	492b      	ldr	r1, [pc, #172]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 800295e:	4313      	orrs	r3, r2
 8002960:	604b      	str	r3, [r1, #4]
 8002962:	e01a      	b.n	800299a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002964:	4b29      	ldr	r3, [pc, #164]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a28      	ldr	r2, [pc, #160]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 800296a:	f023 0301 	bic.w	r3, r3, #1
 800296e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002970:	f7ff fb74 	bl	800205c <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002978:	f7ff fb70 	bl	800205c <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e31a      	b.n	8002fc0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800298a:	4b20      	ldr	r3, [pc, #128]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1f0      	bne.n	8002978 <HAL_RCC_OscConfig+0x1dc>
 8002996:	e000      	b.n	800299a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002998:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d073      	beq.n	8002a8e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	2b08      	cmp	r3, #8
 80029aa:	d005      	beq.n	80029b8 <HAL_RCC_OscConfig+0x21c>
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	2b0c      	cmp	r3, #12
 80029b0:	d10e      	bne.n	80029d0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	2b03      	cmp	r3, #3
 80029b6:	d10b      	bne.n	80029d0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b8:	4b14      	ldr	r3, [pc, #80]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d063      	beq.n	8002a8c <HAL_RCC_OscConfig+0x2f0>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d15f      	bne.n	8002a8c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e2f7      	b.n	8002fc0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d8:	d106      	bne.n	80029e8 <HAL_RCC_OscConfig+0x24c>
 80029da:	4b0c      	ldr	r3, [pc, #48]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a0b      	ldr	r2, [pc, #44]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 80029e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	e025      	b.n	8002a34 <HAL_RCC_OscConfig+0x298>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029f0:	d114      	bne.n	8002a1c <HAL_RCC_OscConfig+0x280>
 80029f2:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a05      	ldr	r2, [pc, #20]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 80029f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029fc:	6013      	str	r3, [r2, #0]
 80029fe:	4b03      	ldr	r3, [pc, #12]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a02      	ldr	r2, [pc, #8]	; (8002a0c <HAL_RCC_OscConfig+0x270>)
 8002a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a08:	6013      	str	r3, [r2, #0]
 8002a0a:	e013      	b.n	8002a34 <HAL_RCC_OscConfig+0x298>
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	08005904 	.word	0x08005904
 8002a14:	20000068 	.word	0x20000068
 8002a18:	2000006c 	.word	0x2000006c
 8002a1c:	4ba0      	ldr	r3, [pc, #640]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a9f      	ldr	r2, [pc, #636]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002a22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a26:	6013      	str	r3, [r2, #0]
 8002a28:	4b9d      	ldr	r3, [pc, #628]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a9c      	ldr	r2, [pc, #624]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002a2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d013      	beq.n	8002a64 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3c:	f7ff fb0e 	bl	800205c <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a44:	f7ff fb0a 	bl	800205c <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b64      	cmp	r3, #100	; 0x64
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e2b4      	b.n	8002fc0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a56:	4b92      	ldr	r3, [pc, #584]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d0f0      	beq.n	8002a44 <HAL_RCC_OscConfig+0x2a8>
 8002a62:	e014      	b.n	8002a8e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a64:	f7ff fafa 	bl	800205c <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a6c:	f7ff faf6 	bl	800205c <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b64      	cmp	r3, #100	; 0x64
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e2a0      	b.n	8002fc0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a7e:	4b88      	ldr	r3, [pc, #544]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1f0      	bne.n	8002a6c <HAL_RCC_OscConfig+0x2d0>
 8002a8a:	e000      	b.n	8002a8e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d060      	beq.n	8002b5c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	2b04      	cmp	r3, #4
 8002a9e:	d005      	beq.n	8002aac <HAL_RCC_OscConfig+0x310>
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	2b0c      	cmp	r3, #12
 8002aa4:	d119      	bne.n	8002ada <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d116      	bne.n	8002ada <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002aac:	4b7c      	ldr	r3, [pc, #496]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d005      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x328>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d101      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e27d      	b.n	8002fc0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac4:	4b76      	ldr	r3, [pc, #472]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	061b      	lsls	r3, r3, #24
 8002ad2:	4973      	ldr	r1, [pc, #460]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ad8:	e040      	b.n	8002b5c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d023      	beq.n	8002b2a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ae2:	4b6f      	ldr	r3, [pc, #444]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a6e      	ldr	r2, [pc, #440]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002ae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aee:	f7ff fab5 	bl	800205c <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002af4:	e008      	b.n	8002b08 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002af6:	f7ff fab1 	bl	800205c <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e25b      	b.n	8002fc0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b08:	4b65      	ldr	r3, [pc, #404]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d0f0      	beq.n	8002af6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b14:	4b62      	ldr	r3, [pc, #392]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	061b      	lsls	r3, r3, #24
 8002b22:	495f      	ldr	r1, [pc, #380]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	604b      	str	r3, [r1, #4]
 8002b28:	e018      	b.n	8002b5c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b2a:	4b5d      	ldr	r3, [pc, #372]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a5c      	ldr	r2, [pc, #368]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002b30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b36:	f7ff fa91 	bl	800205c <HAL_GetTick>
 8002b3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b3c:	e008      	b.n	8002b50 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b3e:	f7ff fa8d 	bl	800205c <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e237      	b.n	8002fc0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b50:	4b53      	ldr	r3, [pc, #332]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1f0      	bne.n	8002b3e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0308 	and.w	r3, r3, #8
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d03c      	beq.n	8002be2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	695b      	ldr	r3, [r3, #20]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d01c      	beq.n	8002baa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b70:	4b4b      	ldr	r3, [pc, #300]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002b72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b76:	4a4a      	ldr	r2, [pc, #296]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002b78:	f043 0301 	orr.w	r3, r3, #1
 8002b7c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b80:	f7ff fa6c 	bl	800205c <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b88:	f7ff fa68 	bl	800205c <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e212      	b.n	8002fc0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b9a:	4b41      	ldr	r3, [pc, #260]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002b9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d0ef      	beq.n	8002b88 <HAL_RCC_OscConfig+0x3ec>
 8002ba8:	e01b      	b.n	8002be2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002baa:	4b3d      	ldr	r3, [pc, #244]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002bac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bb0:	4a3b      	ldr	r2, [pc, #236]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002bb2:	f023 0301 	bic.w	r3, r3, #1
 8002bb6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bba:	f7ff fa4f 	bl	800205c <HAL_GetTick>
 8002bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bc0:	e008      	b.n	8002bd4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bc2:	f7ff fa4b 	bl	800205c <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d901      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e1f5      	b.n	8002fc0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bd4:	4b32      	ldr	r3, [pc, #200]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002bd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d1ef      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0304 	and.w	r3, r3, #4
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f000 80a6 	beq.w	8002d3c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002bf4:	4b2a      	ldr	r3, [pc, #168]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d10d      	bne.n	8002c1c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c00:	4b27      	ldr	r3, [pc, #156]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c04:	4a26      	ldr	r2, [pc, #152]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002c06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c0a:	6593      	str	r3, [r2, #88]	; 0x58
 8002c0c:	4b24      	ldr	r3, [pc, #144]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c14:	60bb      	str	r3, [r7, #8]
 8002c16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c1c:	4b21      	ldr	r3, [pc, #132]	; (8002ca4 <HAL_RCC_OscConfig+0x508>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d118      	bne.n	8002c5a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c28:	4b1e      	ldr	r3, [pc, #120]	; (8002ca4 <HAL_RCC_OscConfig+0x508>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a1d      	ldr	r2, [pc, #116]	; (8002ca4 <HAL_RCC_OscConfig+0x508>)
 8002c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c32:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c34:	f7ff fa12 	bl	800205c <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c3c:	f7ff fa0e 	bl	800205c <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e1b8      	b.n	8002fc0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c4e:	4b15      	ldr	r3, [pc, #84]	; (8002ca4 <HAL_RCC_OscConfig+0x508>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0f0      	beq.n	8002c3c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d108      	bne.n	8002c74 <HAL_RCC_OscConfig+0x4d8>
 8002c62:	4b0f      	ldr	r3, [pc, #60]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c68:	4a0d      	ldr	r2, [pc, #52]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002c6a:	f043 0301 	orr.w	r3, r3, #1
 8002c6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c72:	e029      	b.n	8002cc8 <HAL_RCC_OscConfig+0x52c>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	2b05      	cmp	r3, #5
 8002c7a:	d115      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x50c>
 8002c7c:	4b08      	ldr	r3, [pc, #32]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c82:	4a07      	ldr	r2, [pc, #28]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002c84:	f043 0304 	orr.w	r3, r3, #4
 8002c88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c8c:	4b04      	ldr	r3, [pc, #16]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c92:	4a03      	ldr	r2, [pc, #12]	; (8002ca0 <HAL_RCC_OscConfig+0x504>)
 8002c94:	f043 0301 	orr.w	r3, r3, #1
 8002c98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c9c:	e014      	b.n	8002cc8 <HAL_RCC_OscConfig+0x52c>
 8002c9e:	bf00      	nop
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	40007000 	.word	0x40007000
 8002ca8:	4b9d      	ldr	r3, [pc, #628]	; (8002f20 <HAL_RCC_OscConfig+0x784>)
 8002caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cae:	4a9c      	ldr	r2, [pc, #624]	; (8002f20 <HAL_RCC_OscConfig+0x784>)
 8002cb0:	f023 0301 	bic.w	r3, r3, #1
 8002cb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cb8:	4b99      	ldr	r3, [pc, #612]	; (8002f20 <HAL_RCC_OscConfig+0x784>)
 8002cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cbe:	4a98      	ldr	r2, [pc, #608]	; (8002f20 <HAL_RCC_OscConfig+0x784>)
 8002cc0:	f023 0304 	bic.w	r3, r3, #4
 8002cc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d016      	beq.n	8002cfe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd0:	f7ff f9c4 	bl	800205c <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cd6:	e00a      	b.n	8002cee <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cd8:	f7ff f9c0 	bl	800205c <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e168      	b.n	8002fc0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cee:	4b8c      	ldr	r3, [pc, #560]	; (8002f20 <HAL_RCC_OscConfig+0x784>)
 8002cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d0ed      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x53c>
 8002cfc:	e015      	b.n	8002d2a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cfe:	f7ff f9ad 	bl	800205c <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d04:	e00a      	b.n	8002d1c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d06:	f7ff f9a9 	bl	800205c <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e151      	b.n	8002fc0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d1c:	4b80      	ldr	r3, [pc, #512]	; (8002f20 <HAL_RCC_OscConfig+0x784>)
 8002d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1ed      	bne.n	8002d06 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d2a:	7ffb      	ldrb	r3, [r7, #31]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d105      	bne.n	8002d3c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d30:	4b7b      	ldr	r3, [pc, #492]	; (8002f20 <HAL_RCC_OscConfig+0x784>)
 8002d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d34:	4a7a      	ldr	r2, [pc, #488]	; (8002f20 <HAL_RCC_OscConfig+0x784>)
 8002d36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d3a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0320 	and.w	r3, r3, #32
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d03c      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d01c      	beq.n	8002d8a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d50:	4b73      	ldr	r3, [pc, #460]	; (8002f20 <HAL_RCC_OscConfig+0x784>)
 8002d52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d56:	4a72      	ldr	r2, [pc, #456]	; (8002f20 <HAL_RCC_OscConfig+0x784>)
 8002d58:	f043 0301 	orr.w	r3, r3, #1
 8002d5c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d60:	f7ff f97c 	bl	800205c <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d68:	f7ff f978 	bl	800205c <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e122      	b.n	8002fc0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d7a:	4b69      	ldr	r3, [pc, #420]	; (8002f20 <HAL_RCC_OscConfig+0x784>)
 8002d7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d0ef      	beq.n	8002d68 <HAL_RCC_OscConfig+0x5cc>
 8002d88:	e01b      	b.n	8002dc2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d8a:	4b65      	ldr	r3, [pc, #404]	; (8002f20 <HAL_RCC_OscConfig+0x784>)
 8002d8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d90:	4a63      	ldr	r2, [pc, #396]	; (8002f20 <HAL_RCC_OscConfig+0x784>)
 8002d92:	f023 0301 	bic.w	r3, r3, #1
 8002d96:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d9a:	f7ff f95f 	bl	800205c <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002da0:	e008      	b.n	8002db4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002da2:	f7ff f95b 	bl	800205c <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e105      	b.n	8002fc0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002db4:	4b5a      	ldr	r3, [pc, #360]	; (8002f20 <HAL_RCC_OscConfig+0x784>)
 8002db6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1ef      	bne.n	8002da2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f000 80f9 	beq.w	8002fbe <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	f040 80cf 	bne.w	8002f74 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002dd6:	4b52      	ldr	r3, [pc, #328]	; (8002f20 <HAL_RCC_OscConfig+0x784>)
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	f003 0203 	and.w	r2, r3, #3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d12c      	bne.n	8002e44 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df4:	3b01      	subs	r3, #1
 8002df6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d123      	bne.n	8002e44 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e06:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d11b      	bne.n	8002e44 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e16:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d113      	bne.n	8002e44 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e26:	085b      	lsrs	r3, r3, #1
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d109      	bne.n	8002e44 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	085b      	lsrs	r3, r3, #1
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d071      	beq.n	8002f28 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	2b0c      	cmp	r3, #12
 8002e48:	d068      	beq.n	8002f1c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002e4a:	4b35      	ldr	r3, [pc, #212]	; (8002f20 <HAL_RCC_OscConfig+0x784>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d105      	bne.n	8002e62 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002e56:	4b32      	ldr	r3, [pc, #200]	; (8002f20 <HAL_RCC_OscConfig+0x784>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e0ac      	b.n	8002fc0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e66:	4b2e      	ldr	r3, [pc, #184]	; (8002f20 <HAL_RCC_OscConfig+0x784>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a2d      	ldr	r2, [pc, #180]	; (8002f20 <HAL_RCC_OscConfig+0x784>)
 8002e6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e70:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e72:	f7ff f8f3 	bl	800205c <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e78:	e008      	b.n	8002e8c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e7a:	f7ff f8ef 	bl	800205c <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e099      	b.n	8002fc0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e8c:	4b24      	ldr	r3, [pc, #144]	; (8002f20 <HAL_RCC_OscConfig+0x784>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1f0      	bne.n	8002e7a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e98:	4b21      	ldr	r3, [pc, #132]	; (8002f20 <HAL_RCC_OscConfig+0x784>)
 8002e9a:	68da      	ldr	r2, [r3, #12]
 8002e9c:	4b21      	ldr	r3, [pc, #132]	; (8002f24 <HAL_RCC_OscConfig+0x788>)
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002ea8:	3a01      	subs	r2, #1
 8002eaa:	0112      	lsls	r2, r2, #4
 8002eac:	4311      	orrs	r1, r2
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002eb2:	0212      	lsls	r2, r2, #8
 8002eb4:	4311      	orrs	r1, r2
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002eba:	0852      	lsrs	r2, r2, #1
 8002ebc:	3a01      	subs	r2, #1
 8002ebe:	0552      	lsls	r2, r2, #21
 8002ec0:	4311      	orrs	r1, r2
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ec6:	0852      	lsrs	r2, r2, #1
 8002ec8:	3a01      	subs	r2, #1
 8002eca:	0652      	lsls	r2, r2, #25
 8002ecc:	4311      	orrs	r1, r2
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ed2:	06d2      	lsls	r2, r2, #27
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	4912      	ldr	r1, [pc, #72]	; (8002f20 <HAL_RCC_OscConfig+0x784>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002edc:	4b10      	ldr	r3, [pc, #64]	; (8002f20 <HAL_RCC_OscConfig+0x784>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a0f      	ldr	r2, [pc, #60]	; (8002f20 <HAL_RCC_OscConfig+0x784>)
 8002ee2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ee6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ee8:	4b0d      	ldr	r3, [pc, #52]	; (8002f20 <HAL_RCC_OscConfig+0x784>)
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	4a0c      	ldr	r2, [pc, #48]	; (8002f20 <HAL_RCC_OscConfig+0x784>)
 8002eee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ef2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ef4:	f7ff f8b2 	bl	800205c <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002efc:	f7ff f8ae 	bl	800205c <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e058      	b.n	8002fc0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f0e:	4b04      	ldr	r3, [pc, #16]	; (8002f20 <HAL_RCC_OscConfig+0x784>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d0f0      	beq.n	8002efc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f1a:	e050      	b.n	8002fbe <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e04f      	b.n	8002fc0 <HAL_RCC_OscConfig+0x824>
 8002f20:	40021000 	.word	0x40021000
 8002f24:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f28:	4b27      	ldr	r3, [pc, #156]	; (8002fc8 <HAL_RCC_OscConfig+0x82c>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d144      	bne.n	8002fbe <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002f34:	4b24      	ldr	r3, [pc, #144]	; (8002fc8 <HAL_RCC_OscConfig+0x82c>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a23      	ldr	r2, [pc, #140]	; (8002fc8 <HAL_RCC_OscConfig+0x82c>)
 8002f3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f3e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f40:	4b21      	ldr	r3, [pc, #132]	; (8002fc8 <HAL_RCC_OscConfig+0x82c>)
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	4a20      	ldr	r2, [pc, #128]	; (8002fc8 <HAL_RCC_OscConfig+0x82c>)
 8002f46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f4a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f4c:	f7ff f886 	bl	800205c <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f54:	f7ff f882 	bl	800205c <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e02c      	b.n	8002fc0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f66:	4b18      	ldr	r3, [pc, #96]	; (8002fc8 <HAL_RCC_OscConfig+0x82c>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d0f0      	beq.n	8002f54 <HAL_RCC_OscConfig+0x7b8>
 8002f72:	e024      	b.n	8002fbe <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	2b0c      	cmp	r3, #12
 8002f78:	d01f      	beq.n	8002fba <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f7a:	4b13      	ldr	r3, [pc, #76]	; (8002fc8 <HAL_RCC_OscConfig+0x82c>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a12      	ldr	r2, [pc, #72]	; (8002fc8 <HAL_RCC_OscConfig+0x82c>)
 8002f80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f86:	f7ff f869 	bl	800205c <HAL_GetTick>
 8002f8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f8c:	e008      	b.n	8002fa0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f8e:	f7ff f865 	bl	800205c <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e00f      	b.n	8002fc0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fa0:	4b09      	ldr	r3, [pc, #36]	; (8002fc8 <HAL_RCC_OscConfig+0x82c>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1f0      	bne.n	8002f8e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002fac:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <HAL_RCC_OscConfig+0x82c>)
 8002fae:	68da      	ldr	r2, [r3, #12]
 8002fb0:	4905      	ldr	r1, [pc, #20]	; (8002fc8 <HAL_RCC_OscConfig+0x82c>)
 8002fb2:	4b06      	ldr	r3, [pc, #24]	; (8002fcc <HAL_RCC_OscConfig+0x830>)
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	60cb      	str	r3, [r1, #12]
 8002fb8:	e001      	b.n	8002fbe <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e000      	b.n	8002fc0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3720      	adds	r7, #32
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	feeefffc 	.word	0xfeeefffc

08002fd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d101      	bne.n	8002fe8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e11d      	b.n	8003224 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fe8:	4b90      	ldr	r3, [pc, #576]	; (800322c <HAL_RCC_ClockConfig+0x25c>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 030f 	and.w	r3, r3, #15
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d910      	bls.n	8003018 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ff6:	4b8d      	ldr	r3, [pc, #564]	; (800322c <HAL_RCC_ClockConfig+0x25c>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f023 020f 	bic.w	r2, r3, #15
 8002ffe:	498b      	ldr	r1, [pc, #556]	; (800322c <HAL_RCC_ClockConfig+0x25c>)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	4313      	orrs	r3, r2
 8003004:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003006:	4b89      	ldr	r3, [pc, #548]	; (800322c <HAL_RCC_ClockConfig+0x25c>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 030f 	and.w	r3, r3, #15
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	429a      	cmp	r2, r3
 8003012:	d001      	beq.n	8003018 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e105      	b.n	8003224 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d010      	beq.n	8003046 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	4b81      	ldr	r3, [pc, #516]	; (8003230 <HAL_RCC_ClockConfig+0x260>)
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003030:	429a      	cmp	r2, r3
 8003032:	d908      	bls.n	8003046 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003034:	4b7e      	ldr	r3, [pc, #504]	; (8003230 <HAL_RCC_ClockConfig+0x260>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	497b      	ldr	r1, [pc, #492]	; (8003230 <HAL_RCC_ClockConfig+0x260>)
 8003042:	4313      	orrs	r3, r2
 8003044:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b00      	cmp	r3, #0
 8003050:	d079      	beq.n	8003146 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	2b03      	cmp	r3, #3
 8003058:	d11e      	bne.n	8003098 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800305a:	4b75      	ldr	r3, [pc, #468]	; (8003230 <HAL_RCC_ClockConfig+0x260>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e0dc      	b.n	8003224 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800306a:	f000 fa25 	bl	80034b8 <RCC_GetSysClockFreqFromPLLSource>
 800306e:	4603      	mov	r3, r0
 8003070:	4a70      	ldr	r2, [pc, #448]	; (8003234 <HAL_RCC_ClockConfig+0x264>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d946      	bls.n	8003104 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003076:	4b6e      	ldr	r3, [pc, #440]	; (8003230 <HAL_RCC_ClockConfig+0x260>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d140      	bne.n	8003104 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003082:	4b6b      	ldr	r3, [pc, #428]	; (8003230 <HAL_RCC_ClockConfig+0x260>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800308a:	4a69      	ldr	r2, [pc, #420]	; (8003230 <HAL_RCC_ClockConfig+0x260>)
 800308c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003090:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003092:	2380      	movs	r3, #128	; 0x80
 8003094:	617b      	str	r3, [r7, #20]
 8003096:	e035      	b.n	8003104 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	2b02      	cmp	r3, #2
 800309e:	d107      	bne.n	80030b0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030a0:	4b63      	ldr	r3, [pc, #396]	; (8003230 <HAL_RCC_ClockConfig+0x260>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d115      	bne.n	80030d8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e0b9      	b.n	8003224 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d107      	bne.n	80030c8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030b8:	4b5d      	ldr	r3, [pc, #372]	; (8003230 <HAL_RCC_ClockConfig+0x260>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d109      	bne.n	80030d8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e0ad      	b.n	8003224 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030c8:	4b59      	ldr	r3, [pc, #356]	; (8003230 <HAL_RCC_ClockConfig+0x260>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d101      	bne.n	80030d8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e0a5      	b.n	8003224 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80030d8:	f000 f8b4 	bl	8003244 <HAL_RCC_GetSysClockFreq>
 80030dc:	4603      	mov	r3, r0
 80030de:	4a55      	ldr	r2, [pc, #340]	; (8003234 <HAL_RCC_ClockConfig+0x264>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d90f      	bls.n	8003104 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80030e4:	4b52      	ldr	r3, [pc, #328]	; (8003230 <HAL_RCC_ClockConfig+0x260>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d109      	bne.n	8003104 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80030f0:	4b4f      	ldr	r3, [pc, #316]	; (8003230 <HAL_RCC_ClockConfig+0x260>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030f8:	4a4d      	ldr	r2, [pc, #308]	; (8003230 <HAL_RCC_ClockConfig+0x260>)
 80030fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030fe:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003100:	2380      	movs	r3, #128	; 0x80
 8003102:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003104:	4b4a      	ldr	r3, [pc, #296]	; (8003230 <HAL_RCC_ClockConfig+0x260>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f023 0203 	bic.w	r2, r3, #3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	4947      	ldr	r1, [pc, #284]	; (8003230 <HAL_RCC_ClockConfig+0x260>)
 8003112:	4313      	orrs	r3, r2
 8003114:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003116:	f7fe ffa1 	bl	800205c <HAL_GetTick>
 800311a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800311c:	e00a      	b.n	8003134 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800311e:	f7fe ff9d 	bl	800205c <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	f241 3288 	movw	r2, #5000	; 0x1388
 800312c:	4293      	cmp	r3, r2
 800312e:	d901      	bls.n	8003134 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e077      	b.n	8003224 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003134:	4b3e      	ldr	r3, [pc, #248]	; (8003230 <HAL_RCC_ClockConfig+0x260>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f003 020c 	and.w	r2, r3, #12
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	429a      	cmp	r2, r3
 8003144:	d1eb      	bne.n	800311e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	2b80      	cmp	r3, #128	; 0x80
 800314a:	d105      	bne.n	8003158 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800314c:	4b38      	ldr	r3, [pc, #224]	; (8003230 <HAL_RCC_ClockConfig+0x260>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	4a37      	ldr	r2, [pc, #220]	; (8003230 <HAL_RCC_ClockConfig+0x260>)
 8003152:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003156:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d010      	beq.n	8003186 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689a      	ldr	r2, [r3, #8]
 8003168:	4b31      	ldr	r3, [pc, #196]	; (8003230 <HAL_RCC_ClockConfig+0x260>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003170:	429a      	cmp	r2, r3
 8003172:	d208      	bcs.n	8003186 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003174:	4b2e      	ldr	r3, [pc, #184]	; (8003230 <HAL_RCC_ClockConfig+0x260>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	492b      	ldr	r1, [pc, #172]	; (8003230 <HAL_RCC_ClockConfig+0x260>)
 8003182:	4313      	orrs	r3, r2
 8003184:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003186:	4b29      	ldr	r3, [pc, #164]	; (800322c <HAL_RCC_ClockConfig+0x25c>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 030f 	and.w	r3, r3, #15
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	429a      	cmp	r2, r3
 8003192:	d210      	bcs.n	80031b6 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003194:	4b25      	ldr	r3, [pc, #148]	; (800322c <HAL_RCC_ClockConfig+0x25c>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f023 020f 	bic.w	r2, r3, #15
 800319c:	4923      	ldr	r1, [pc, #140]	; (800322c <HAL_RCC_ClockConfig+0x25c>)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031a4:	4b21      	ldr	r3, [pc, #132]	; (800322c <HAL_RCC_ClockConfig+0x25c>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 030f 	and.w	r3, r3, #15
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d001      	beq.n	80031b6 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e036      	b.n	8003224 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0304 	and.w	r3, r3, #4
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d008      	beq.n	80031d4 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031c2:	4b1b      	ldr	r3, [pc, #108]	; (8003230 <HAL_RCC_ClockConfig+0x260>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	4918      	ldr	r1, [pc, #96]	; (8003230 <HAL_RCC_ClockConfig+0x260>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0308 	and.w	r3, r3, #8
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d009      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031e0:	4b13      	ldr	r3, [pc, #76]	; (8003230 <HAL_RCC_ClockConfig+0x260>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	4910      	ldr	r1, [pc, #64]	; (8003230 <HAL_RCC_ClockConfig+0x260>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031f4:	f000 f826 	bl	8003244 <HAL_RCC_GetSysClockFreq>
 80031f8:	4602      	mov	r2, r0
 80031fa:	4b0d      	ldr	r3, [pc, #52]	; (8003230 <HAL_RCC_ClockConfig+0x260>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	091b      	lsrs	r3, r3, #4
 8003200:	f003 030f 	and.w	r3, r3, #15
 8003204:	490c      	ldr	r1, [pc, #48]	; (8003238 <HAL_RCC_ClockConfig+0x268>)
 8003206:	5ccb      	ldrb	r3, [r1, r3]
 8003208:	f003 031f 	and.w	r3, r3, #31
 800320c:	fa22 f303 	lsr.w	r3, r2, r3
 8003210:	4a0a      	ldr	r2, [pc, #40]	; (800323c <HAL_RCC_ClockConfig+0x26c>)
 8003212:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003214:	4b0a      	ldr	r3, [pc, #40]	; (8003240 <HAL_RCC_ClockConfig+0x270>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	f7fe fe07 	bl	8001e2c <HAL_InitTick>
 800321e:	4603      	mov	r3, r0
 8003220:	73fb      	strb	r3, [r7, #15]

  return status;
 8003222:	7bfb      	ldrb	r3, [r7, #15]
}
 8003224:	4618      	mov	r0, r3
 8003226:	3718      	adds	r7, #24
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	40022000 	.word	0x40022000
 8003230:	40021000 	.word	0x40021000
 8003234:	04c4b400 	.word	0x04c4b400
 8003238:	08005904 	.word	0x08005904
 800323c:	20000068 	.word	0x20000068
 8003240:	2000006c 	.word	0x2000006c

08003244 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003244:	b480      	push	{r7}
 8003246:	b089      	sub	sp, #36	; 0x24
 8003248:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800324a:	2300      	movs	r3, #0
 800324c:	61fb      	str	r3, [r7, #28]
 800324e:	2300      	movs	r3, #0
 8003250:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003252:	4b3e      	ldr	r3, [pc, #248]	; (800334c <HAL_RCC_GetSysClockFreq+0x108>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f003 030c 	and.w	r3, r3, #12
 800325a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800325c:	4b3b      	ldr	r3, [pc, #236]	; (800334c <HAL_RCC_GetSysClockFreq+0x108>)
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	f003 0303 	and.w	r3, r3, #3
 8003264:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d005      	beq.n	8003278 <HAL_RCC_GetSysClockFreq+0x34>
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	2b0c      	cmp	r3, #12
 8003270:	d121      	bne.n	80032b6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d11e      	bne.n	80032b6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003278:	4b34      	ldr	r3, [pc, #208]	; (800334c <HAL_RCC_GetSysClockFreq+0x108>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0308 	and.w	r3, r3, #8
 8003280:	2b00      	cmp	r3, #0
 8003282:	d107      	bne.n	8003294 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003284:	4b31      	ldr	r3, [pc, #196]	; (800334c <HAL_RCC_GetSysClockFreq+0x108>)
 8003286:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800328a:	0a1b      	lsrs	r3, r3, #8
 800328c:	f003 030f 	and.w	r3, r3, #15
 8003290:	61fb      	str	r3, [r7, #28]
 8003292:	e005      	b.n	80032a0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003294:	4b2d      	ldr	r3, [pc, #180]	; (800334c <HAL_RCC_GetSysClockFreq+0x108>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	091b      	lsrs	r3, r3, #4
 800329a:	f003 030f 	and.w	r3, r3, #15
 800329e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80032a0:	4a2b      	ldr	r2, [pc, #172]	; (8003350 <HAL_RCC_GetSysClockFreq+0x10c>)
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032a8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d10d      	bne.n	80032cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032b4:	e00a      	b.n	80032cc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	2b04      	cmp	r3, #4
 80032ba:	d102      	bne.n	80032c2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80032bc:	4b25      	ldr	r3, [pc, #148]	; (8003354 <HAL_RCC_GetSysClockFreq+0x110>)
 80032be:	61bb      	str	r3, [r7, #24]
 80032c0:	e004      	b.n	80032cc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	2b08      	cmp	r3, #8
 80032c6:	d101      	bne.n	80032cc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80032c8:	4b23      	ldr	r3, [pc, #140]	; (8003358 <HAL_RCC_GetSysClockFreq+0x114>)
 80032ca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	2b0c      	cmp	r3, #12
 80032d0:	d134      	bne.n	800333c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80032d2:	4b1e      	ldr	r3, [pc, #120]	; (800334c <HAL_RCC_GetSysClockFreq+0x108>)
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	f003 0303 	and.w	r3, r3, #3
 80032da:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d003      	beq.n	80032ea <HAL_RCC_GetSysClockFreq+0xa6>
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	2b03      	cmp	r3, #3
 80032e6:	d003      	beq.n	80032f0 <HAL_RCC_GetSysClockFreq+0xac>
 80032e8:	e005      	b.n	80032f6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80032ea:	4b1a      	ldr	r3, [pc, #104]	; (8003354 <HAL_RCC_GetSysClockFreq+0x110>)
 80032ec:	617b      	str	r3, [r7, #20]
      break;
 80032ee:	e005      	b.n	80032fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80032f0:	4b19      	ldr	r3, [pc, #100]	; (8003358 <HAL_RCC_GetSysClockFreq+0x114>)
 80032f2:	617b      	str	r3, [r7, #20]
      break;
 80032f4:	e002      	b.n	80032fc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	617b      	str	r3, [r7, #20]
      break;
 80032fa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032fc:	4b13      	ldr	r3, [pc, #76]	; (800334c <HAL_RCC_GetSysClockFreq+0x108>)
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	091b      	lsrs	r3, r3, #4
 8003302:	f003 030f 	and.w	r3, r3, #15
 8003306:	3301      	adds	r3, #1
 8003308:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800330a:	4b10      	ldr	r3, [pc, #64]	; (800334c <HAL_RCC_GetSysClockFreq+0x108>)
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	0a1b      	lsrs	r3, r3, #8
 8003310:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	fb03 f202 	mul.w	r2, r3, r2
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003320:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003322:	4b0a      	ldr	r3, [pc, #40]	; (800334c <HAL_RCC_GetSysClockFreq+0x108>)
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	0e5b      	lsrs	r3, r3, #25
 8003328:	f003 0303 	and.w	r3, r3, #3
 800332c:	3301      	adds	r3, #1
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	fbb2 f3f3 	udiv	r3, r2, r3
 800333a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800333c:	69bb      	ldr	r3, [r7, #24]
}
 800333e:	4618      	mov	r0, r3
 8003340:	3724      	adds	r7, #36	; 0x24
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	40021000 	.word	0x40021000
 8003350:	0800591c 	.word	0x0800591c
 8003354:	00f42400 	.word	0x00f42400
 8003358:	007a1200 	.word	0x007a1200

0800335c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003360:	4b03      	ldr	r3, [pc, #12]	; (8003370 <HAL_RCC_GetHCLKFreq+0x14>)
 8003362:	681b      	ldr	r3, [r3, #0]
}
 8003364:	4618      	mov	r0, r3
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	20000068 	.word	0x20000068

08003374 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003378:	f7ff fff0 	bl	800335c <HAL_RCC_GetHCLKFreq>
 800337c:	4602      	mov	r2, r0
 800337e:	4b06      	ldr	r3, [pc, #24]	; (8003398 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	0a1b      	lsrs	r3, r3, #8
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	4904      	ldr	r1, [pc, #16]	; (800339c <HAL_RCC_GetPCLK1Freq+0x28>)
 800338a:	5ccb      	ldrb	r3, [r1, r3]
 800338c:	f003 031f 	and.w	r3, r3, #31
 8003390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003394:	4618      	mov	r0, r3
 8003396:	bd80      	pop	{r7, pc}
 8003398:	40021000 	.word	0x40021000
 800339c:	08005914 	.word	0x08005914

080033a0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	220f      	movs	r2, #15
 80033ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80033b0:	4b12      	ldr	r3, [pc, #72]	; (80033fc <HAL_RCC_GetClockConfig+0x5c>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f003 0203 	and.w	r2, r3, #3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80033bc:	4b0f      	ldr	r3, [pc, #60]	; (80033fc <HAL_RCC_GetClockConfig+0x5c>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80033c8:	4b0c      	ldr	r3, [pc, #48]	; (80033fc <HAL_RCC_GetClockConfig+0x5c>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80033d4:	4b09      	ldr	r3, [pc, #36]	; (80033fc <HAL_RCC_GetClockConfig+0x5c>)
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	08db      	lsrs	r3, r3, #3
 80033da:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80033e2:	4b07      	ldr	r3, [pc, #28]	; (8003400 <HAL_RCC_GetClockConfig+0x60>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 020f 	and.w	r2, r3, #15
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	601a      	str	r2, [r3, #0]
}
 80033ee:	bf00      	nop
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	40021000 	.word	0x40021000
 8003400:	40022000 	.word	0x40022000

08003404 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800340c:	2300      	movs	r3, #0
 800340e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003410:	4b27      	ldr	r3, [pc, #156]	; (80034b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d003      	beq.n	8003424 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800341c:	f7ff f8ea 	bl	80025f4 <HAL_PWREx_GetVoltageRange>
 8003420:	6178      	str	r0, [r7, #20]
 8003422:	e014      	b.n	800344e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003424:	4b22      	ldr	r3, [pc, #136]	; (80034b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003428:	4a21      	ldr	r2, [pc, #132]	; (80034b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800342a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800342e:	6593      	str	r3, [r2, #88]	; 0x58
 8003430:	4b1f      	ldr	r3, [pc, #124]	; (80034b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003438:	60fb      	str	r3, [r7, #12]
 800343a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800343c:	f7ff f8da 	bl	80025f4 <HAL_PWREx_GetVoltageRange>
 8003440:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003442:	4b1b      	ldr	r3, [pc, #108]	; (80034b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003446:	4a1a      	ldr	r2, [pc, #104]	; (80034b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003448:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800344c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003454:	d10b      	bne.n	800346e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2b80      	cmp	r3, #128	; 0x80
 800345a:	d913      	bls.n	8003484 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2ba0      	cmp	r3, #160	; 0xa0
 8003460:	d902      	bls.n	8003468 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003462:	2302      	movs	r3, #2
 8003464:	613b      	str	r3, [r7, #16]
 8003466:	e00d      	b.n	8003484 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003468:	2301      	movs	r3, #1
 800346a:	613b      	str	r3, [r7, #16]
 800346c:	e00a      	b.n	8003484 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2b7f      	cmp	r3, #127	; 0x7f
 8003472:	d902      	bls.n	800347a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003474:	2302      	movs	r3, #2
 8003476:	613b      	str	r3, [r7, #16]
 8003478:	e004      	b.n	8003484 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2b70      	cmp	r3, #112	; 0x70
 800347e:	d101      	bne.n	8003484 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003480:	2301      	movs	r3, #1
 8003482:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003484:	4b0b      	ldr	r3, [pc, #44]	; (80034b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f023 020f 	bic.w	r2, r3, #15
 800348c:	4909      	ldr	r1, [pc, #36]	; (80034b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	4313      	orrs	r3, r2
 8003492:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003494:	4b07      	ldr	r3, [pc, #28]	; (80034b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 030f 	and.w	r3, r3, #15
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d001      	beq.n	80034a6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e000      	b.n	80034a8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3718      	adds	r7, #24
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	40021000 	.word	0x40021000
 80034b4:	40022000 	.word	0x40022000

080034b8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b087      	sub	sp, #28
 80034bc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034be:	4b2d      	ldr	r3, [pc, #180]	; (8003574 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	f003 0303 	and.w	r3, r3, #3
 80034c6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2b03      	cmp	r3, #3
 80034cc:	d00b      	beq.n	80034e6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2b03      	cmp	r3, #3
 80034d2:	d825      	bhi.n	8003520 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d008      	beq.n	80034ec <RCC_GetSysClockFreqFromPLLSource+0x34>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d11f      	bne.n	8003520 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80034e0:	4b25      	ldr	r3, [pc, #148]	; (8003578 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80034e2:	613b      	str	r3, [r7, #16]
    break;
 80034e4:	e01f      	b.n	8003526 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80034e6:	4b25      	ldr	r3, [pc, #148]	; (800357c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80034e8:	613b      	str	r3, [r7, #16]
    break;
 80034ea:	e01c      	b.n	8003526 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80034ec:	4b21      	ldr	r3, [pc, #132]	; (8003574 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0308 	and.w	r3, r3, #8
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d107      	bne.n	8003508 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80034f8:	4b1e      	ldr	r3, [pc, #120]	; (8003574 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80034fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034fe:	0a1b      	lsrs	r3, r3, #8
 8003500:	f003 030f 	and.w	r3, r3, #15
 8003504:	617b      	str	r3, [r7, #20]
 8003506:	e005      	b.n	8003514 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003508:	4b1a      	ldr	r3, [pc, #104]	; (8003574 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	091b      	lsrs	r3, r3, #4
 800350e:	f003 030f 	and.w	r3, r3, #15
 8003512:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003514:	4a1a      	ldr	r2, [pc, #104]	; (8003580 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800351c:	613b      	str	r3, [r7, #16]
    break;
 800351e:	e002      	b.n	8003526 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003520:	2300      	movs	r3, #0
 8003522:	613b      	str	r3, [r7, #16]
    break;
 8003524:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003526:	4b13      	ldr	r3, [pc, #76]	; (8003574 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	091b      	lsrs	r3, r3, #4
 800352c:	f003 030f 	and.w	r3, r3, #15
 8003530:	3301      	adds	r3, #1
 8003532:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003534:	4b0f      	ldr	r3, [pc, #60]	; (8003574 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	0a1b      	lsrs	r3, r3, #8
 800353a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	fb03 f202 	mul.w	r2, r3, r2
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	fbb2 f3f3 	udiv	r3, r2, r3
 800354a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800354c:	4b09      	ldr	r3, [pc, #36]	; (8003574 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	0e5b      	lsrs	r3, r3, #25
 8003552:	f003 0303 	and.w	r3, r3, #3
 8003556:	3301      	adds	r3, #1
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	fbb2 f3f3 	udiv	r3, r2, r3
 8003564:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003566:	683b      	ldr	r3, [r7, #0]
}
 8003568:	4618      	mov	r0, r3
 800356a:	371c      	adds	r7, #28
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	40021000 	.word	0x40021000
 8003578:	00f42400 	.word	0x00f42400
 800357c:	007a1200 	.word	0x007a1200
 8003580:	0800591c 	.word	0x0800591c

08003584 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800358c:	2300      	movs	r3, #0
 800358e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003590:	2300      	movs	r3, #0
 8003592:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800359c:	2b00      	cmp	r3, #0
 800359e:	d040      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035a4:	2b80      	cmp	r3, #128	; 0x80
 80035a6:	d02a      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80035a8:	2b80      	cmp	r3, #128	; 0x80
 80035aa:	d825      	bhi.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80035ac:	2b60      	cmp	r3, #96	; 0x60
 80035ae:	d026      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80035b0:	2b60      	cmp	r3, #96	; 0x60
 80035b2:	d821      	bhi.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80035b4:	2b40      	cmp	r3, #64	; 0x40
 80035b6:	d006      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80035b8:	2b40      	cmp	r3, #64	; 0x40
 80035ba:	d81d      	bhi.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d009      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80035c0:	2b20      	cmp	r3, #32
 80035c2:	d010      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80035c4:	e018      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035c6:	4b89      	ldr	r3, [pc, #548]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	4a88      	ldr	r2, [pc, #544]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80035cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035d0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035d2:	e015      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	3304      	adds	r3, #4
 80035d8:	2100      	movs	r1, #0
 80035da:	4618      	mov	r0, r3
 80035dc:	f000 fb02 	bl	8003be4 <RCCEx_PLLSAI1_Config>
 80035e0:	4603      	mov	r3, r0
 80035e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035e4:	e00c      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	3320      	adds	r3, #32
 80035ea:	2100      	movs	r1, #0
 80035ec:	4618      	mov	r0, r3
 80035ee:	f000 fbed 	bl	8003dcc <RCCEx_PLLSAI2_Config>
 80035f2:	4603      	mov	r3, r0
 80035f4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80035f6:	e003      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	74fb      	strb	r3, [r7, #19]
      break;
 80035fc:	e000      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80035fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003600:	7cfb      	ldrb	r3, [r7, #19]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10b      	bne.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003606:	4b79      	ldr	r3, [pc, #484]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003608:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800360c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003614:	4975      	ldr	r1, [pc, #468]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003616:	4313      	orrs	r3, r2
 8003618:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800361c:	e001      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800361e:	7cfb      	ldrb	r3, [r7, #19]
 8003620:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d047      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003632:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003636:	d030      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003638:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800363c:	d82a      	bhi.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800363e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003642:	d02a      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003644:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003648:	d824      	bhi.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800364a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800364e:	d008      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003654:	d81e      	bhi.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00a      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800365a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800365e:	d010      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003660:	e018      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003662:	4b62      	ldr	r3, [pc, #392]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	4a61      	ldr	r2, [pc, #388]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800366c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800366e:	e015      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3304      	adds	r3, #4
 8003674:	2100      	movs	r1, #0
 8003676:	4618      	mov	r0, r3
 8003678:	f000 fab4 	bl	8003be4 <RCCEx_PLLSAI1_Config>
 800367c:	4603      	mov	r3, r0
 800367e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003680:	e00c      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	3320      	adds	r3, #32
 8003686:	2100      	movs	r1, #0
 8003688:	4618      	mov	r0, r3
 800368a:	f000 fb9f 	bl	8003dcc <RCCEx_PLLSAI2_Config>
 800368e:	4603      	mov	r3, r0
 8003690:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003692:	e003      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	74fb      	strb	r3, [r7, #19]
      break;
 8003698:	e000      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800369a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800369c:	7cfb      	ldrb	r3, [r7, #19]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10b      	bne.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80036a2:	4b52      	ldr	r3, [pc, #328]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80036a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b0:	494e      	ldr	r1, [pc, #312]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80036b8:	e001      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ba:	7cfb      	ldrb	r3, [r7, #19]
 80036bc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f000 809f 	beq.w	800380a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036cc:	2300      	movs	r3, #0
 80036ce:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036d0:	4b46      	ldr	r3, [pc, #280]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80036d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d101      	bne.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80036dc:	2301      	movs	r3, #1
 80036de:	e000      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80036e0:	2300      	movs	r3, #0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00d      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036e6:	4b41      	ldr	r3, [pc, #260]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80036e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ea:	4a40      	ldr	r2, [pc, #256]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80036ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036f0:	6593      	str	r3, [r2, #88]	; 0x58
 80036f2:	4b3e      	ldr	r3, [pc, #248]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80036f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036fa:	60bb      	str	r3, [r7, #8]
 80036fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036fe:	2301      	movs	r3, #1
 8003700:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003702:	4b3b      	ldr	r3, [pc, #236]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a3a      	ldr	r2, [pc, #232]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800370c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800370e:	f7fe fca5 	bl	800205c <HAL_GetTick>
 8003712:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003714:	e009      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003716:	f7fe fca1 	bl	800205c <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d902      	bls.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	74fb      	strb	r3, [r7, #19]
        break;
 8003728:	e005      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800372a:	4b31      	ldr	r3, [pc, #196]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003732:	2b00      	cmp	r3, #0
 8003734:	d0ef      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003736:	7cfb      	ldrb	r3, [r7, #19]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d15b      	bne.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800373c:	4b2b      	ldr	r3, [pc, #172]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800373e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003746:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d01f      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	429a      	cmp	r2, r3
 8003758:	d019      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800375a:	4b24      	ldr	r3, [pc, #144]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800375c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003760:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003764:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003766:	4b21      	ldr	r3, [pc, #132]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376c:	4a1f      	ldr	r2, [pc, #124]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800376e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003772:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003776:	4b1d      	ldr	r3, [pc, #116]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800377c:	4a1b      	ldr	r2, [pc, #108]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800377e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003782:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003786:	4a19      	ldr	r2, [pc, #100]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b00      	cmp	r3, #0
 8003796:	d016      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003798:	f7fe fc60 	bl	800205c <HAL_GetTick>
 800379c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800379e:	e00b      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037a0:	f7fe fc5c 	bl	800205c <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d902      	bls.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	74fb      	strb	r3, [r7, #19]
            break;
 80037b6:	e006      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037b8:	4b0c      	ldr	r3, [pc, #48]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80037ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d0ec      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80037c6:	7cfb      	ldrb	r3, [r7, #19]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10c      	bne.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037cc:	4b07      	ldr	r3, [pc, #28]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80037ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037dc:	4903      	ldr	r1, [pc, #12]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80037e4:	e008      	b.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037e6:	7cfb      	ldrb	r3, [r7, #19]
 80037e8:	74bb      	strb	r3, [r7, #18]
 80037ea:	e005      	b.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80037ec:	40021000 	.word	0x40021000
 80037f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f4:	7cfb      	ldrb	r3, [r7, #19]
 80037f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037f8:	7c7b      	ldrb	r3, [r7, #17]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d105      	bne.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037fe:	4ba0      	ldr	r3, [pc, #640]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003802:	4a9f      	ldr	r2, [pc, #636]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003804:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003808:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00a      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003816:	4b9a      	ldr	r3, [pc, #616]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800381c:	f023 0203 	bic.w	r2, r3, #3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003824:	4996      	ldr	r1, [pc, #600]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003826:	4313      	orrs	r3, r2
 8003828:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00a      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003838:	4b91      	ldr	r3, [pc, #580]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800383a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800383e:	f023 020c 	bic.w	r2, r3, #12
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	498e      	ldr	r1, [pc, #568]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003848:	4313      	orrs	r3, r2
 800384a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0304 	and.w	r3, r3, #4
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00a      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800385a:	4b89      	ldr	r3, [pc, #548]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800385c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003860:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003868:	4985      	ldr	r1, [pc, #532]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800386a:	4313      	orrs	r3, r2
 800386c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0308 	and.w	r3, r3, #8
 8003878:	2b00      	cmp	r3, #0
 800387a:	d00a      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800387c:	4b80      	ldr	r3, [pc, #512]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800387e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003882:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800388a:	497d      	ldr	r1, [pc, #500]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800388c:	4313      	orrs	r3, r2
 800388e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0310 	and.w	r3, r3, #16
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00a      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800389e:	4b78      	ldr	r3, [pc, #480]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ac:	4974      	ldr	r1, [pc, #464]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0320 	and.w	r3, r3, #32
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00a      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038c0:	4b6f      	ldr	r3, [pc, #444]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ce:	496c      	ldr	r1, [pc, #432]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00a      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038e2:	4b67      	ldr	r3, [pc, #412]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038f0:	4963      	ldr	r1, [pc, #396]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00a      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003904:	4b5e      	ldr	r3, [pc, #376]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800390a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003912:	495b      	ldr	r1, [pc, #364]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003914:	4313      	orrs	r3, r2
 8003916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00a      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003926:	4b56      	ldr	r3, [pc, #344]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800392c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003934:	4952      	ldr	r1, [pc, #328]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003936:	4313      	orrs	r3, r2
 8003938:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00a      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003948:	4b4d      	ldr	r3, [pc, #308]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800394a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800394e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003956:	494a      	ldr	r1, [pc, #296]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003958:	4313      	orrs	r3, r2
 800395a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00a      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800396a:	4b45      	ldr	r3, [pc, #276]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800396c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003970:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003978:	4941      	ldr	r1, [pc, #260]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800397a:	4313      	orrs	r3, r2
 800397c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00a      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800398c:	4b3c      	ldr	r3, [pc, #240]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800398e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003992:	f023 0203 	bic.w	r2, r3, #3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800399a:	4939      	ldr	r1, [pc, #228]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800399c:	4313      	orrs	r3, r2
 800399e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d028      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039ae:	4b34      	ldr	r3, [pc, #208]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039bc:	4930      	ldr	r1, [pc, #192]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039cc:	d106      	bne.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039ce:	4b2c      	ldr	r3, [pc, #176]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	4a2b      	ldr	r2, [pc, #172]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039d8:	60d3      	str	r3, [r2, #12]
 80039da:	e011      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039e4:	d10c      	bne.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	3304      	adds	r3, #4
 80039ea:	2101      	movs	r1, #1
 80039ec:	4618      	mov	r0, r3
 80039ee:	f000 f8f9 	bl	8003be4 <RCCEx_PLLSAI1_Config>
 80039f2:	4603      	mov	r3, r0
 80039f4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80039f6:	7cfb      	ldrb	r3, [r7, #19]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d001      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80039fc:	7cfb      	ldrb	r3, [r7, #19]
 80039fe:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d04d      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a14:	d108      	bne.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003a16:	4b1a      	ldr	r3, [pc, #104]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a18:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a1c:	4a18      	ldr	r2, [pc, #96]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a22:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003a26:	e012      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003a28:	4b15      	ldr	r3, [pc, #84]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a2e:	4a14      	ldr	r2, [pc, #80]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a34:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003a38:	4b11      	ldr	r3, [pc, #68]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a46:	490e      	ldr	r1, [pc, #56]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a56:	d106      	bne.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a58:	4b09      	ldr	r3, [pc, #36]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	4a08      	ldr	r2, [pc, #32]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a62:	60d3      	str	r3, [r2, #12]
 8003a64:	e020      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a6e:	d109      	bne.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a70:	4b03      	ldr	r3, [pc, #12]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	4a02      	ldr	r2, [pc, #8]	; (8003a80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a7a:	60d3      	str	r3, [r2, #12]
 8003a7c:	e014      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003a7e:	bf00      	nop
 8003a80:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a8c:	d10c      	bne.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	3304      	adds	r3, #4
 8003a92:	2101      	movs	r1, #1
 8003a94:	4618      	mov	r0, r3
 8003a96:	f000 f8a5 	bl	8003be4 <RCCEx_PLLSAI1_Config>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a9e:	7cfb      	ldrb	r3, [r7, #19]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d001      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003aa4:	7cfb      	ldrb	r3, [r7, #19]
 8003aa6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d028      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ab4:	4b4a      	ldr	r3, [pc, #296]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ac2:	4947      	ldr	r1, [pc, #284]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ace:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ad2:	d106      	bne.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ad4:	4b42      	ldr	r3, [pc, #264]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	4a41      	ldr	r2, [pc, #260]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ada:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ade:	60d3      	str	r3, [r2, #12]
 8003ae0:	e011      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ae6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003aea:	d10c      	bne.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	3304      	adds	r3, #4
 8003af0:	2101      	movs	r1, #1
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 f876 	bl	8003be4 <RCCEx_PLLSAI1_Config>
 8003af8:	4603      	mov	r3, r0
 8003afa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003afc:	7cfb      	ldrb	r3, [r7, #19]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d001      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003b02:	7cfb      	ldrb	r3, [r7, #19]
 8003b04:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d01e      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b12:	4b33      	ldr	r3, [pc, #204]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b18:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b22:	492f      	ldr	r1, [pc, #188]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b34:	d10c      	bne.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	3304      	adds	r3, #4
 8003b3a:	2102      	movs	r1, #2
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f000 f851 	bl	8003be4 <RCCEx_PLLSAI1_Config>
 8003b42:	4603      	mov	r3, r0
 8003b44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b46:	7cfb      	ldrb	r3, [r7, #19]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d001      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003b4c:	7cfb      	ldrb	r3, [r7, #19]
 8003b4e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00b      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b5c:	4b20      	ldr	r3, [pc, #128]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b62:	f023 0204 	bic.w	r2, r3, #4
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b6c:	491c      	ldr	r1, [pc, #112]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d00b      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003b80:	4b17      	ldr	r3, [pc, #92]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b86:	f023 0218 	bic.w	r2, r3, #24
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b90:	4913      	ldr	r1, [pc, #76]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d017      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003ba4:	4b0e      	ldr	r3, [pc, #56]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ba6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003baa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bb4:	490a      	ldr	r1, [pc, #40]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bc6:	d105      	bne.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bc8:	4b05      	ldr	r3, [pc, #20]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	4a04      	ldr	r2, [pc, #16]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bd2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003bd4:	7cbb      	ldrb	r3, [r7, #18]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3718      	adds	r7, #24
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	40021000 	.word	0x40021000

08003be4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003bf2:	4b72      	ldr	r3, [pc, #456]	; (8003dbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	f003 0303 	and.w	r3, r3, #3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00e      	beq.n	8003c1c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003bfe:	4b6f      	ldr	r3, [pc, #444]	; (8003dbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	f003 0203 	and.w	r2, r3, #3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d103      	bne.n	8003c16 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
       ||
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d142      	bne.n	8003c9c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	73fb      	strb	r3, [r7, #15]
 8003c1a:	e03f      	b.n	8003c9c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2b03      	cmp	r3, #3
 8003c22:	d018      	beq.n	8003c56 <RCCEx_PLLSAI1_Config+0x72>
 8003c24:	2b03      	cmp	r3, #3
 8003c26:	d825      	bhi.n	8003c74 <RCCEx_PLLSAI1_Config+0x90>
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d002      	beq.n	8003c32 <RCCEx_PLLSAI1_Config+0x4e>
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d009      	beq.n	8003c44 <RCCEx_PLLSAI1_Config+0x60>
 8003c30:	e020      	b.n	8003c74 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c32:	4b62      	ldr	r3, [pc, #392]	; (8003dbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d11d      	bne.n	8003c7a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c42:	e01a      	b.n	8003c7a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c44:	4b5d      	ldr	r3, [pc, #372]	; (8003dbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d116      	bne.n	8003c7e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c54:	e013      	b.n	8003c7e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c56:	4b59      	ldr	r3, [pc, #356]	; (8003dbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10f      	bne.n	8003c82 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c62:	4b56      	ldr	r3, [pc, #344]	; (8003dbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d109      	bne.n	8003c82 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c72:	e006      	b.n	8003c82 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	73fb      	strb	r3, [r7, #15]
      break;
 8003c78:	e004      	b.n	8003c84 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003c7a:	bf00      	nop
 8003c7c:	e002      	b.n	8003c84 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003c7e:	bf00      	nop
 8003c80:	e000      	b.n	8003c84 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003c82:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c84:	7bfb      	ldrb	r3, [r7, #15]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d108      	bne.n	8003c9c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003c8a:	4b4c      	ldr	r3, [pc, #304]	; (8003dbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	f023 0203 	bic.w	r2, r3, #3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4949      	ldr	r1, [pc, #292]	; (8003dbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003c9c:	7bfb      	ldrb	r3, [r7, #15]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f040 8086 	bne.w	8003db0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003ca4:	4b45      	ldr	r3, [pc, #276]	; (8003dbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a44      	ldr	r2, [pc, #272]	; (8003dbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003caa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003cae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cb0:	f7fe f9d4 	bl	800205c <HAL_GetTick>
 8003cb4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003cb6:	e009      	b.n	8003ccc <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cb8:	f7fe f9d0 	bl	800205c <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d902      	bls.n	8003ccc <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	73fb      	strb	r3, [r7, #15]
        break;
 8003cca:	e005      	b.n	8003cd8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ccc:	4b3b      	ldr	r3, [pc, #236]	; (8003dbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1ef      	bne.n	8003cb8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003cd8:	7bfb      	ldrb	r3, [r7, #15]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d168      	bne.n	8003db0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d113      	bne.n	8003d0c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ce4:	4b35      	ldr	r3, [pc, #212]	; (8003dbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ce6:	691a      	ldr	r2, [r3, #16]
 8003ce8:	4b35      	ldr	r3, [pc, #212]	; (8003dc0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003cea:	4013      	ands	r3, r2
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6892      	ldr	r2, [r2, #8]
 8003cf0:	0211      	lsls	r1, r2, #8
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	68d2      	ldr	r2, [r2, #12]
 8003cf6:	06d2      	lsls	r2, r2, #27
 8003cf8:	4311      	orrs	r1, r2
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	6852      	ldr	r2, [r2, #4]
 8003cfe:	3a01      	subs	r2, #1
 8003d00:	0112      	lsls	r2, r2, #4
 8003d02:	430a      	orrs	r2, r1
 8003d04:	492d      	ldr	r1, [pc, #180]	; (8003dbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	610b      	str	r3, [r1, #16]
 8003d0a:	e02d      	b.n	8003d68 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d115      	bne.n	8003d3e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d12:	4b2a      	ldr	r3, [pc, #168]	; (8003dbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003d14:	691a      	ldr	r2, [r3, #16]
 8003d16:	4b2b      	ldr	r3, [pc, #172]	; (8003dc4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d18:	4013      	ands	r3, r2
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	6892      	ldr	r2, [r2, #8]
 8003d1e:	0211      	lsls	r1, r2, #8
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	6912      	ldr	r2, [r2, #16]
 8003d24:	0852      	lsrs	r2, r2, #1
 8003d26:	3a01      	subs	r2, #1
 8003d28:	0552      	lsls	r2, r2, #21
 8003d2a:	4311      	orrs	r1, r2
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	6852      	ldr	r2, [r2, #4]
 8003d30:	3a01      	subs	r2, #1
 8003d32:	0112      	lsls	r2, r2, #4
 8003d34:	430a      	orrs	r2, r1
 8003d36:	4921      	ldr	r1, [pc, #132]	; (8003dbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	610b      	str	r3, [r1, #16]
 8003d3c:	e014      	b.n	8003d68 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d3e:	4b1f      	ldr	r3, [pc, #124]	; (8003dbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003d40:	691a      	ldr	r2, [r3, #16]
 8003d42:	4b21      	ldr	r3, [pc, #132]	; (8003dc8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d44:	4013      	ands	r3, r2
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	6892      	ldr	r2, [r2, #8]
 8003d4a:	0211      	lsls	r1, r2, #8
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	6952      	ldr	r2, [r2, #20]
 8003d50:	0852      	lsrs	r2, r2, #1
 8003d52:	3a01      	subs	r2, #1
 8003d54:	0652      	lsls	r2, r2, #25
 8003d56:	4311      	orrs	r1, r2
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	6852      	ldr	r2, [r2, #4]
 8003d5c:	3a01      	subs	r2, #1
 8003d5e:	0112      	lsls	r2, r2, #4
 8003d60:	430a      	orrs	r2, r1
 8003d62:	4916      	ldr	r1, [pc, #88]	; (8003dbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003d68:	4b14      	ldr	r3, [pc, #80]	; (8003dbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a13      	ldr	r2, [pc, #76]	; (8003dbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003d6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d72:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d74:	f7fe f972 	bl	800205c <HAL_GetTick>
 8003d78:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d7a:	e009      	b.n	8003d90 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d7c:	f7fe f96e 	bl	800205c <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d902      	bls.n	8003d90 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	73fb      	strb	r3, [r7, #15]
          break;
 8003d8e:	e005      	b.n	8003d9c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d90:	4b0a      	ldr	r3, [pc, #40]	; (8003dbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d0ef      	beq.n	8003d7c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003d9c:	7bfb      	ldrb	r3, [r7, #15]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d106      	bne.n	8003db0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003da2:	4b06      	ldr	r3, [pc, #24]	; (8003dbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003da4:	691a      	ldr	r2, [r3, #16]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	4904      	ldr	r1, [pc, #16]	; (8003dbc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	07ff800f 	.word	0x07ff800f
 8003dc4:	ff9f800f 	.word	0xff9f800f
 8003dc8:	f9ff800f 	.word	0xf9ff800f

08003dcc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003dda:	4b72      	ldr	r3, [pc, #456]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	f003 0303 	and.w	r3, r3, #3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00e      	beq.n	8003e04 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003de6:	4b6f      	ldr	r3, [pc, #444]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	f003 0203 	and.w	r2, r3, #3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d103      	bne.n	8003dfe <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
       ||
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d142      	bne.n	8003e84 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	73fb      	strb	r3, [r7, #15]
 8003e02:	e03f      	b.n	8003e84 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2b03      	cmp	r3, #3
 8003e0a:	d018      	beq.n	8003e3e <RCCEx_PLLSAI2_Config+0x72>
 8003e0c:	2b03      	cmp	r3, #3
 8003e0e:	d825      	bhi.n	8003e5c <RCCEx_PLLSAI2_Config+0x90>
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d002      	beq.n	8003e1a <RCCEx_PLLSAI2_Config+0x4e>
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d009      	beq.n	8003e2c <RCCEx_PLLSAI2_Config+0x60>
 8003e18:	e020      	b.n	8003e5c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e1a:	4b62      	ldr	r3, [pc, #392]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d11d      	bne.n	8003e62 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e2a:	e01a      	b.n	8003e62 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e2c:	4b5d      	ldr	r3, [pc, #372]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d116      	bne.n	8003e66 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e3c:	e013      	b.n	8003e66 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e3e:	4b59      	ldr	r3, [pc, #356]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10f      	bne.n	8003e6a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e4a:	4b56      	ldr	r3, [pc, #344]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d109      	bne.n	8003e6a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e5a:	e006      	b.n	8003e6a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e60:	e004      	b.n	8003e6c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003e62:	bf00      	nop
 8003e64:	e002      	b.n	8003e6c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003e66:	bf00      	nop
 8003e68:	e000      	b.n	8003e6c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003e6a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e6c:	7bfb      	ldrb	r3, [r7, #15]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d108      	bne.n	8003e84 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003e72:	4b4c      	ldr	r3, [pc, #304]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	f023 0203 	bic.w	r2, r3, #3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4949      	ldr	r1, [pc, #292]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003e84:	7bfb      	ldrb	r3, [r7, #15]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	f040 8086 	bne.w	8003f98 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003e8c:	4b45      	ldr	r3, [pc, #276]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a44      	ldr	r2, [pc, #272]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003e92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e98:	f7fe f8e0 	bl	800205c <HAL_GetTick>
 8003e9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003e9e:	e009      	b.n	8003eb4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ea0:	f7fe f8dc 	bl	800205c <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d902      	bls.n	8003eb4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	73fb      	strb	r3, [r7, #15]
        break;
 8003eb2:	e005      	b.n	8003ec0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003eb4:	4b3b      	ldr	r3, [pc, #236]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1ef      	bne.n	8003ea0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003ec0:	7bfb      	ldrb	r3, [r7, #15]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d168      	bne.n	8003f98 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d113      	bne.n	8003ef4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ecc:	4b35      	ldr	r3, [pc, #212]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ece:	695a      	ldr	r2, [r3, #20]
 8003ed0:	4b35      	ldr	r3, [pc, #212]	; (8003fa8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	6892      	ldr	r2, [r2, #8]
 8003ed8:	0211      	lsls	r1, r2, #8
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	68d2      	ldr	r2, [r2, #12]
 8003ede:	06d2      	lsls	r2, r2, #27
 8003ee0:	4311      	orrs	r1, r2
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	6852      	ldr	r2, [r2, #4]
 8003ee6:	3a01      	subs	r2, #1
 8003ee8:	0112      	lsls	r2, r2, #4
 8003eea:	430a      	orrs	r2, r1
 8003eec:	492d      	ldr	r1, [pc, #180]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	614b      	str	r3, [r1, #20]
 8003ef2:	e02d      	b.n	8003f50 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d115      	bne.n	8003f26 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003efa:	4b2a      	ldr	r3, [pc, #168]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003efc:	695a      	ldr	r2, [r3, #20]
 8003efe:	4b2b      	ldr	r3, [pc, #172]	; (8003fac <RCCEx_PLLSAI2_Config+0x1e0>)
 8003f00:	4013      	ands	r3, r2
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	6892      	ldr	r2, [r2, #8]
 8003f06:	0211      	lsls	r1, r2, #8
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	6912      	ldr	r2, [r2, #16]
 8003f0c:	0852      	lsrs	r2, r2, #1
 8003f0e:	3a01      	subs	r2, #1
 8003f10:	0552      	lsls	r2, r2, #21
 8003f12:	4311      	orrs	r1, r2
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	6852      	ldr	r2, [r2, #4]
 8003f18:	3a01      	subs	r2, #1
 8003f1a:	0112      	lsls	r2, r2, #4
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	4921      	ldr	r1, [pc, #132]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	614b      	str	r3, [r1, #20]
 8003f24:	e014      	b.n	8003f50 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f26:	4b1f      	ldr	r3, [pc, #124]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003f28:	695a      	ldr	r2, [r3, #20]
 8003f2a:	4b21      	ldr	r3, [pc, #132]	; (8003fb0 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	6892      	ldr	r2, [r2, #8]
 8003f32:	0211      	lsls	r1, r2, #8
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	6952      	ldr	r2, [r2, #20]
 8003f38:	0852      	lsrs	r2, r2, #1
 8003f3a:	3a01      	subs	r2, #1
 8003f3c:	0652      	lsls	r2, r2, #25
 8003f3e:	4311      	orrs	r1, r2
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	6852      	ldr	r2, [r2, #4]
 8003f44:	3a01      	subs	r2, #1
 8003f46:	0112      	lsls	r2, r2, #4
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	4916      	ldr	r1, [pc, #88]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003f50:	4b14      	ldr	r3, [pc, #80]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a13      	ldr	r2, [pc, #76]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003f56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f5a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f5c:	f7fe f87e 	bl	800205c <HAL_GetTick>
 8003f60:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f62:	e009      	b.n	8003f78 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f64:	f7fe f87a 	bl	800205c <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d902      	bls.n	8003f78 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	73fb      	strb	r3, [r7, #15]
          break;
 8003f76:	e005      	b.n	8003f84 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f78:	4b0a      	ldr	r3, [pc, #40]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d0ef      	beq.n	8003f64 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003f84:	7bfb      	ldrb	r3, [r7, #15]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d106      	bne.n	8003f98 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003f8a:	4b06      	ldr	r3, [pc, #24]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003f8c:	695a      	ldr	r2, [r3, #20]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	4904      	ldr	r1, [pc, #16]	; (8003fa4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	40021000 	.word	0x40021000
 8003fa8:	07ff800f 	.word	0x07ff800f
 8003fac:	ff9f800f 	.word	0xff9f800f
 8003fb0:	f9ff800f 	.word	0xf9ff800f

08003fb4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d079      	beq.n	80040ba <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d106      	bne.n	8003fe0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7fd feb2 	bl	8001d44 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	f003 0310 	and.w	r3, r3, #16
 8003ff2:	2b10      	cmp	r3, #16
 8003ff4:	d058      	beq.n	80040a8 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	22ca      	movs	r2, #202	; 0xca
 8003ffc:	625a      	str	r2, [r3, #36]	; 0x24
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2253      	movs	r2, #83	; 0x53
 8004004:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 f880 	bl	800410c <RTC_EnterInitMode>
 800400c:	4603      	mov	r3, r0
 800400e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004010:	7bfb      	ldrb	r3, [r7, #15]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d127      	bne.n	8004066 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	6812      	ldr	r2, [r2, #0]
 8004020:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004024:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004028:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	6899      	ldr	r1, [r3, #8]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685a      	ldr	r2, [r3, #4]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	431a      	orrs	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	431a      	orrs	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	430a      	orrs	r2, r1
 8004046:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	68d2      	ldr	r2, [r2, #12]
 8004050:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	6919      	ldr	r1, [r3, #16]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	041a      	lsls	r2, r3, #16
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	430a      	orrs	r2, r1
 8004064:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f884 	bl	8004174 <RTC_ExitInitMode>
 800406c:	4603      	mov	r3, r0
 800406e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004070:	7bfb      	ldrb	r3, [r7, #15]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d113      	bne.n	800409e <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f022 0203 	bic.w	r2, r2, #3
 8004084:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	69da      	ldr	r2, [r3, #28]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	695b      	ldr	r3, [r3, #20]
 8004094:	431a      	orrs	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	430a      	orrs	r2, r1
 800409c:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	22ff      	movs	r2, #255	; 0xff
 80040a4:	625a      	str	r2, [r3, #36]	; 0x24
 80040a6:	e001      	b.n	80040ac <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80040a8:	2300      	movs	r3, #0
 80040aa:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80040ac:	7bfb      	ldrb	r3, [r7, #15]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d103      	bne.n	80040ba <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 80040ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3710      	adds	r7, #16
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a0d      	ldr	r2, [pc, #52]	; (8004108 <HAL_RTC_WaitForSynchro+0x44>)
 80040d2:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80040d4:	f7fd ffc2 	bl	800205c <HAL_GetTick>
 80040d8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80040da:	e009      	b.n	80040f0 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80040dc:	f7fd ffbe 	bl	800205c <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040ea:	d901      	bls.n	80040f0 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e007      	b.n	8004100 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	f003 0320 	and.w	r3, r3, #32
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d0ee      	beq.n	80040dc <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3710      	adds	r7, #16
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	0003ff5f 	.word	0x0003ff5f

0800410c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004114:	2300      	movs	r3, #0
 8004116:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004122:	2b00      	cmp	r3, #0
 8004124:	d120      	bne.n	8004168 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f04f 32ff 	mov.w	r2, #4294967295
 800412e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004130:	f7fd ff94 	bl	800205c <HAL_GetTick>
 8004134:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004136:	e00d      	b.n	8004154 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004138:	f7fd ff90 	bl	800205c <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004146:	d905      	bls.n	8004154 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2203      	movs	r2, #3
 8004150:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800415e:	2b00      	cmp	r3, #0
 8004160:	d102      	bne.n	8004168 <RTC_EnterInitMode+0x5c>
 8004162:	7bfb      	ldrb	r3, [r7, #15]
 8004164:	2b03      	cmp	r3, #3
 8004166:	d1e7      	bne.n	8004138 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8004168:	7bfb      	ldrb	r3, [r7, #15]
}
 800416a:	4618      	mov	r0, r3
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
	...

08004174 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800417c:	2300      	movs	r3, #0
 800417e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004180:	4b1a      	ldr	r3, [pc, #104]	; (80041ec <RTC_ExitInitMode+0x78>)
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	4a19      	ldr	r2, [pc, #100]	; (80041ec <RTC_ExitInitMode+0x78>)
 8004186:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800418a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800418c:	4b17      	ldr	r3, [pc, #92]	; (80041ec <RTC_ExitInitMode+0x78>)
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f003 0320 	and.w	r3, r3, #32
 8004194:	2b00      	cmp	r3, #0
 8004196:	d10c      	bne.n	80041b2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f7ff ff93 	bl	80040c4 <HAL_RTC_WaitForSynchro>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d01e      	beq.n	80041e2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2203      	movs	r2, #3
 80041a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	73fb      	strb	r3, [r7, #15]
 80041b0:	e017      	b.n	80041e2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80041b2:	4b0e      	ldr	r3, [pc, #56]	; (80041ec <RTC_ExitInitMode+0x78>)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	4a0d      	ldr	r2, [pc, #52]	; (80041ec <RTC_ExitInitMode+0x78>)
 80041b8:	f023 0320 	bic.w	r3, r3, #32
 80041bc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7ff ff80 	bl	80040c4 <HAL_RTC_WaitForSynchro>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d005      	beq.n	80041d6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2203      	movs	r2, #3
 80041ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80041d6:	4b05      	ldr	r3, [pc, #20]	; (80041ec <RTC_ExitInitMode+0x78>)
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	4a04      	ldr	r2, [pc, #16]	; (80041ec <RTC_ExitInitMode+0x78>)
 80041dc:	f043 0320 	orr.w	r3, r3, #32
 80041e0:	6093      	str	r3, [r2, #8]
  }

  return status;
 80041e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3710      	adds	r7, #16
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	40002800 	.word	0x40002800

080041f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e095      	b.n	800432e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004206:	2b00      	cmp	r3, #0
 8004208:	d108      	bne.n	800421c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004212:	d009      	beq.n	8004228 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	61da      	str	r2, [r3, #28]
 800421a:	e005      	b.n	8004228 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d106      	bne.n	8004248 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f7fd fdb0 	bl	8001da8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2202      	movs	r2, #2
 800424c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800425e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004268:	d902      	bls.n	8004270 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800426a:	2300      	movs	r3, #0
 800426c:	60fb      	str	r3, [r7, #12]
 800426e:	e002      	b.n	8004276 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004270:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004274:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800427e:	d007      	beq.n	8004290 <HAL_SPI_Init+0xa0>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004288:	d002      	beq.n	8004290 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80042a0:	431a      	orrs	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	431a      	orrs	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	431a      	orrs	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042be:	431a      	orrs	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	69db      	ldr	r3, [r3, #28]
 80042c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042c8:	431a      	orrs	r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d2:	ea42 0103 	orr.w	r1, r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042da:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	0c1b      	lsrs	r3, r3, #16
 80042ec:	f003 0204 	and.w	r2, r3, #4
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f4:	f003 0310 	and.w	r3, r3, #16
 80042f8:	431a      	orrs	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042fe:	f003 0308 	and.w	r3, r3, #8
 8004302:	431a      	orrs	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800430c:	ea42 0103 	orr.w	r1, r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	430a      	orrs	r2, r1
 800431c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b088      	sub	sp, #32
 800433a:	af00      	add	r7, sp, #0
 800433c:	60f8      	str	r0, [r7, #12]
 800433e:	60b9      	str	r1, [r7, #8]
 8004340:	603b      	str	r3, [r7, #0]
 8004342:	4613      	mov	r3, r2
 8004344:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004346:	2300      	movs	r3, #0
 8004348:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004350:	2b01      	cmp	r3, #1
 8004352:	d101      	bne.n	8004358 <HAL_SPI_Transmit+0x22>
 8004354:	2302      	movs	r3, #2
 8004356:	e15f      	b.n	8004618 <HAL_SPI_Transmit+0x2e2>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004360:	f7fd fe7c 	bl	800205c <HAL_GetTick>
 8004364:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004366:	88fb      	ldrh	r3, [r7, #6]
 8004368:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b01      	cmp	r3, #1
 8004374:	d002      	beq.n	800437c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004376:	2302      	movs	r3, #2
 8004378:	77fb      	strb	r3, [r7, #31]
    goto error;
 800437a:	e148      	b.n	800460e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d002      	beq.n	8004388 <HAL_SPI_Transmit+0x52>
 8004382:	88fb      	ldrh	r3, [r7, #6]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d102      	bne.n	800438e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800438c:	e13f      	b.n	800460e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2203      	movs	r2, #3
 8004392:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	88fa      	ldrh	r2, [r7, #6]
 80043a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	88fa      	ldrh	r2, [r7, #6]
 80043ac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043d8:	d10f      	bne.n	80043fa <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004404:	2b40      	cmp	r3, #64	; 0x40
 8004406:	d007      	beq.n	8004418 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004416:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004420:	d94f      	bls.n	80044c2 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d002      	beq.n	8004430 <HAL_SPI_Transmit+0xfa>
 800442a:	8afb      	ldrh	r3, [r7, #22]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d142      	bne.n	80044b6 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004434:	881a      	ldrh	r2, [r3, #0]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004440:	1c9a      	adds	r2, r3, #2
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800444a:	b29b      	uxth	r3, r3
 800444c:	3b01      	subs	r3, #1
 800444e:	b29a      	uxth	r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004454:	e02f      	b.n	80044b6 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b02      	cmp	r3, #2
 8004462:	d112      	bne.n	800448a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004468:	881a      	ldrh	r2, [r3, #0]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004474:	1c9a      	adds	r2, r3, #2
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800447e:	b29b      	uxth	r3, r3
 8004480:	3b01      	subs	r3, #1
 8004482:	b29a      	uxth	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004488:	e015      	b.n	80044b6 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800448a:	f7fd fde7 	bl	800205c <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	683a      	ldr	r2, [r7, #0]
 8004496:	429a      	cmp	r2, r3
 8004498:	d803      	bhi.n	80044a2 <HAL_SPI_Transmit+0x16c>
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a0:	d102      	bne.n	80044a8 <HAL_SPI_Transmit+0x172>
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d106      	bne.n	80044b6 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80044b4:	e0ab      	b.n	800460e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1ca      	bne.n	8004456 <HAL_SPI_Transmit+0x120>
 80044c0:	e080      	b.n	80045c4 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d002      	beq.n	80044d0 <HAL_SPI_Transmit+0x19a>
 80044ca:	8afb      	ldrh	r3, [r7, #22]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d174      	bne.n	80045ba <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d912      	bls.n	8004500 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044de:	881a      	ldrh	r2, [r3, #0]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ea:	1c9a      	adds	r2, r3, #2
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	3b02      	subs	r3, #2
 80044f8:	b29a      	uxth	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044fe:	e05c      	b.n	80045ba <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	330c      	adds	r3, #12
 800450a:	7812      	ldrb	r2, [r2, #0]
 800450c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004512:	1c5a      	adds	r2, r3, #1
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800451c:	b29b      	uxth	r3, r3
 800451e:	3b01      	subs	r3, #1
 8004520:	b29a      	uxth	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004526:	e048      	b.n	80045ba <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b02      	cmp	r3, #2
 8004534:	d12b      	bne.n	800458e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800453a:	b29b      	uxth	r3, r3
 800453c:	2b01      	cmp	r3, #1
 800453e:	d912      	bls.n	8004566 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004544:	881a      	ldrh	r2, [r3, #0]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004550:	1c9a      	adds	r2, r3, #2
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800455a:	b29b      	uxth	r3, r3
 800455c:	3b02      	subs	r3, #2
 800455e:	b29a      	uxth	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004564:	e029      	b.n	80045ba <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	330c      	adds	r3, #12
 8004570:	7812      	ldrb	r2, [r2, #0]
 8004572:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004578:	1c5a      	adds	r2, r3, #1
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004582:	b29b      	uxth	r3, r3
 8004584:	3b01      	subs	r3, #1
 8004586:	b29a      	uxth	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800458c:	e015      	b.n	80045ba <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800458e:	f7fd fd65 	bl	800205c <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	683a      	ldr	r2, [r7, #0]
 800459a:	429a      	cmp	r2, r3
 800459c:	d803      	bhi.n	80045a6 <HAL_SPI_Transmit+0x270>
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a4:	d102      	bne.n	80045ac <HAL_SPI_Transmit+0x276>
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d106      	bne.n	80045ba <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80045b8:	e029      	b.n	800460e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045be:	b29b      	uxth	r3, r3
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1b1      	bne.n	8004528 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045c4:	69ba      	ldr	r2, [r7, #24]
 80045c6:	6839      	ldr	r1, [r7, #0]
 80045c8:	68f8      	ldr	r0, [r7, #12]
 80045ca:	f000 fb69 	bl	8004ca0 <SPI_EndRxTxTransaction>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d002      	beq.n	80045da <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2220      	movs	r2, #32
 80045d8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10a      	bne.n	80045f8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045e2:	2300      	movs	r3, #0
 80045e4:	613b      	str	r3, [r7, #16]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	613b      	str	r3, [r7, #16]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	613b      	str	r3, [r7, #16]
 80045f6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d002      	beq.n	8004606 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	77fb      	strb	r3, [r7, #31]
 8004604:	e003      	b.n	800460e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2201      	movs	r2, #1
 800460a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004616:	7ffb      	ldrb	r3, [r7, #31]
}
 8004618:	4618      	mov	r0, r3
 800461a:	3720      	adds	r7, #32
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b08a      	sub	sp, #40	; 0x28
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
 800462c:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800462e:	2301      	movs	r3, #1
 8004630:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004632:	2300      	movs	r3, #0
 8004634:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800463e:	2b01      	cmp	r3, #1
 8004640:	d101      	bne.n	8004646 <HAL_SPI_TransmitReceive+0x26>
 8004642:	2302      	movs	r3, #2
 8004644:	e20a      	b.n	8004a5c <HAL_SPI_TransmitReceive+0x43c>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800464e:	f7fd fd05 	bl	800205c <HAL_GetTick>
 8004652:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800465a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004662:	887b      	ldrh	r3, [r7, #2]
 8004664:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004666:	887b      	ldrh	r3, [r7, #2]
 8004668:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800466a:	7efb      	ldrb	r3, [r7, #27]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d00e      	beq.n	800468e <HAL_SPI_TransmitReceive+0x6e>
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004676:	d106      	bne.n	8004686 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d102      	bne.n	8004686 <HAL_SPI_TransmitReceive+0x66>
 8004680:	7efb      	ldrb	r3, [r7, #27]
 8004682:	2b04      	cmp	r3, #4
 8004684:	d003      	beq.n	800468e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004686:	2302      	movs	r3, #2
 8004688:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800468c:	e1e0      	b.n	8004a50 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d005      	beq.n	80046a0 <HAL_SPI_TransmitReceive+0x80>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d002      	beq.n	80046a0 <HAL_SPI_TransmitReceive+0x80>
 800469a:	887b      	ldrh	r3, [r7, #2]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d103      	bne.n	80046a8 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80046a6:	e1d3      	b.n	8004a50 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	2b04      	cmp	r3, #4
 80046b2:	d003      	beq.n	80046bc <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2205      	movs	r2, #5
 80046b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	887a      	ldrh	r2, [r7, #2]
 80046cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	887a      	ldrh	r2, [r7, #2]
 80046d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	68ba      	ldr	r2, [r7, #8]
 80046dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	887a      	ldrh	r2, [r7, #2]
 80046e2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	887a      	ldrh	r2, [r7, #2]
 80046e8:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80046fe:	d802      	bhi.n	8004706 <HAL_SPI_TransmitReceive+0xe6>
 8004700:	8a3b      	ldrh	r3, [r7, #16]
 8004702:	2b01      	cmp	r3, #1
 8004704:	d908      	bls.n	8004718 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	685a      	ldr	r2, [r3, #4]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004714:	605a      	str	r2, [r3, #4]
 8004716:	e007      	b.n	8004728 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	685a      	ldr	r2, [r3, #4]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004726:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004732:	2b40      	cmp	r3, #64	; 0x40
 8004734:	d007      	beq.n	8004746 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004744:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800474e:	f240 8081 	bls.w	8004854 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d002      	beq.n	8004760 <HAL_SPI_TransmitReceive+0x140>
 800475a:	8a7b      	ldrh	r3, [r7, #18]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d16d      	bne.n	800483c <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004764:	881a      	ldrh	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004770:	1c9a      	adds	r2, r3, #2
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800477a:	b29b      	uxth	r3, r3
 800477c:	3b01      	subs	r3, #1
 800477e:	b29a      	uxth	r2, r3
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004784:	e05a      	b.n	800483c <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b02      	cmp	r3, #2
 8004792:	d11b      	bne.n	80047cc <HAL_SPI_TransmitReceive+0x1ac>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004798:	b29b      	uxth	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d016      	beq.n	80047cc <HAL_SPI_TransmitReceive+0x1ac>
 800479e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d113      	bne.n	80047cc <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a8:	881a      	ldrh	r2, [r3, #0]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b4:	1c9a      	adds	r2, r3, #2
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047be:	b29b      	uxth	r3, r3
 80047c0:	3b01      	subs	r3, #1
 80047c2:	b29a      	uxth	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80047c8:	2300      	movs	r3, #0
 80047ca:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d11c      	bne.n	8004814 <HAL_SPI_TransmitReceive+0x1f4>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d016      	beq.n	8004814 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68da      	ldr	r2, [r3, #12]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f0:	b292      	uxth	r2, r2
 80047f2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f8:	1c9a      	adds	r2, r3, #2
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004804:	b29b      	uxth	r3, r3
 8004806:	3b01      	subs	r3, #1
 8004808:	b29a      	uxth	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004810:	2301      	movs	r3, #1
 8004812:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004814:	f7fd fc22 	bl	800205c <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004820:	429a      	cmp	r2, r3
 8004822:	d80b      	bhi.n	800483c <HAL_SPI_TransmitReceive+0x21c>
 8004824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800482a:	d007      	beq.n	800483c <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2201      	movs	r2, #1
 8004836:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800483a:	e109      	b.n	8004a50 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004840:	b29b      	uxth	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d19f      	bne.n	8004786 <HAL_SPI_TransmitReceive+0x166>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800484c:	b29b      	uxth	r3, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d199      	bne.n	8004786 <HAL_SPI_TransmitReceive+0x166>
 8004852:	e0e3      	b.n	8004a1c <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d003      	beq.n	8004864 <HAL_SPI_TransmitReceive+0x244>
 800485c:	8a7b      	ldrh	r3, [r7, #18]
 800485e:	2b01      	cmp	r3, #1
 8004860:	f040 80cf 	bne.w	8004a02 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004868:	b29b      	uxth	r3, r3
 800486a:	2b01      	cmp	r3, #1
 800486c:	d912      	bls.n	8004894 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004872:	881a      	ldrh	r2, [r3, #0]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487e:	1c9a      	adds	r2, r3, #2
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004888:	b29b      	uxth	r3, r3
 800488a:	3b02      	subs	r3, #2
 800488c:	b29a      	uxth	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004892:	e0b6      	b.n	8004a02 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	330c      	adds	r3, #12
 800489e:	7812      	ldrb	r2, [r2, #0]
 80048a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a6:	1c5a      	adds	r2, r3, #1
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	3b01      	subs	r3, #1
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048ba:	e0a2      	b.n	8004a02 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d134      	bne.n	8004934 <HAL_SPI_TransmitReceive+0x314>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d02f      	beq.n	8004934 <HAL_SPI_TransmitReceive+0x314>
 80048d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d12c      	bne.n	8004934 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048de:	b29b      	uxth	r3, r3
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d912      	bls.n	800490a <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e8:	881a      	ldrh	r2, [r3, #0]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f4:	1c9a      	adds	r2, r3, #2
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048fe:	b29b      	uxth	r3, r3
 8004900:	3b02      	subs	r3, #2
 8004902:	b29a      	uxth	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004908:	e012      	b.n	8004930 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	330c      	adds	r3, #12
 8004914:	7812      	ldrb	r2, [r2, #0]
 8004916:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800491c:	1c5a      	adds	r2, r3, #1
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004926:	b29b      	uxth	r3, r3
 8004928:	3b01      	subs	r3, #1
 800492a:	b29a      	uxth	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004930:	2300      	movs	r3, #0
 8004932:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b01      	cmp	r3, #1
 8004940:	d148      	bne.n	80049d4 <HAL_SPI_TransmitReceive+0x3b4>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004948:	b29b      	uxth	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d042      	beq.n	80049d4 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004954:	b29b      	uxth	r3, r3
 8004956:	2b01      	cmp	r3, #1
 8004958:	d923      	bls.n	80049a2 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68da      	ldr	r2, [r3, #12]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004964:	b292      	uxth	r2, r2
 8004966:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496c:	1c9a      	adds	r2, r3, #2
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004978:	b29b      	uxth	r3, r3
 800497a:	3b02      	subs	r3, #2
 800497c:	b29a      	uxth	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800498a:	b29b      	uxth	r3, r3
 800498c:	2b01      	cmp	r3, #1
 800498e:	d81f      	bhi.n	80049d0 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	685a      	ldr	r2, [r3, #4]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800499e:	605a      	str	r2, [r3, #4]
 80049a0:	e016      	b.n	80049d0 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f103 020c 	add.w	r2, r3, #12
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ae:	7812      	ldrb	r2, [r2, #0]
 80049b0:	b2d2      	uxtb	r2, r2
 80049b2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b8:	1c5a      	adds	r2, r3, #1
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	3b01      	subs	r3, #1
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80049d0:	2301      	movs	r3, #1
 80049d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80049d4:	f7fd fb42 	bl	800205c <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d803      	bhi.n	80049ec <HAL_SPI_TransmitReceive+0x3cc>
 80049e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ea:	d102      	bne.n	80049f2 <HAL_SPI_TransmitReceive+0x3d2>
 80049ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d107      	bne.n	8004a02 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004a00:	e026      	b.n	8004a50 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f47f af57 	bne.w	80048bc <HAL_SPI_TransmitReceive+0x29c>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	f47f af50 	bne.w	80048bc <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a1c:	69fa      	ldr	r2, [r7, #28]
 8004a1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	f000 f93d 	bl	8004ca0 <SPI_EndRxTxTransaction>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d005      	beq.n	8004a38 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2220      	movs	r2, #32
 8004a36:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d003      	beq.n	8004a48 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a46:	e003      	b.n	8004a50 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004a58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3728      	adds	r7, #40	; 0x28
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b088      	sub	sp, #32
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	603b      	str	r3, [r7, #0]
 8004a70:	4613      	mov	r3, r2
 8004a72:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a74:	f7fd faf2 	bl	800205c <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7c:	1a9b      	subs	r3, r3, r2
 8004a7e:	683a      	ldr	r2, [r7, #0]
 8004a80:	4413      	add	r3, r2
 8004a82:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004a84:	f7fd faea 	bl	800205c <HAL_GetTick>
 8004a88:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a8a:	4b39      	ldr	r3, [pc, #228]	; (8004b70 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	015b      	lsls	r3, r3, #5
 8004a90:	0d1b      	lsrs	r3, r3, #20
 8004a92:	69fa      	ldr	r2, [r7, #28]
 8004a94:	fb02 f303 	mul.w	r3, r2, r3
 8004a98:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a9a:	e054      	b.n	8004b46 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa2:	d050      	beq.n	8004b46 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004aa4:	f7fd fada 	bl	800205c <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	69fa      	ldr	r2, [r7, #28]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d902      	bls.n	8004aba <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d13d      	bne.n	8004b36 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	685a      	ldr	r2, [r3, #4]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ac8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ad2:	d111      	bne.n	8004af8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004adc:	d004      	beq.n	8004ae8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ae6:	d107      	bne.n	8004af8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004af6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004afc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b00:	d10f      	bne.n	8004b22 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b10:	601a      	str	r2, [r3, #0]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b20:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2201      	movs	r2, #1
 8004b26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e017      	b.n	8004b66 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d101      	bne.n	8004b40 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	3b01      	subs	r3, #1
 8004b44:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	689a      	ldr	r2, [r3, #8]
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	4013      	ands	r3, r2
 8004b50:	68ba      	ldr	r2, [r7, #8]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	bf0c      	ite	eq
 8004b56:	2301      	moveq	r3, #1
 8004b58:	2300      	movne	r3, #0
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	79fb      	ldrb	r3, [r7, #7]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d19b      	bne.n	8004a9c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3720      	adds	r7, #32
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	20000068 	.word	0x20000068

08004b74 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b08a      	sub	sp, #40	; 0x28
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
 8004b80:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004b82:	2300      	movs	r3, #0
 8004b84:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004b86:	f7fd fa69 	bl	800205c <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b8e:	1a9b      	subs	r3, r3, r2
 8004b90:	683a      	ldr	r2, [r7, #0]
 8004b92:	4413      	add	r3, r2
 8004b94:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004b96:	f7fd fa61 	bl	800205c <HAL_GetTick>
 8004b9a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	330c      	adds	r3, #12
 8004ba2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004ba4:	4b3d      	ldr	r3, [pc, #244]	; (8004c9c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	4413      	add	r3, r2
 8004bae:	00da      	lsls	r2, r3, #3
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	0d1b      	lsrs	r3, r3, #20
 8004bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bb6:	fb02 f303 	mul.w	r3, r2, r3
 8004bba:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004bbc:	e060      	b.n	8004c80 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004bc4:	d107      	bne.n	8004bd6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d104      	bne.n	8004bd6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004bd4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bdc:	d050      	beq.n	8004c80 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004bde:	f7fd fa3d 	bl	800205c <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	6a3b      	ldr	r3, [r7, #32]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d902      	bls.n	8004bf4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d13d      	bne.n	8004c70 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	685a      	ldr	r2, [r3, #4]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c02:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c0c:	d111      	bne.n	8004c32 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c16:	d004      	beq.n	8004c22 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c20:	d107      	bne.n	8004c32 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c30:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c3a:	d10f      	bne.n	8004c5c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c4a:	601a      	str	r2, [r3, #0]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c5a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e010      	b.n	8004c92 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d101      	bne.n	8004c7a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004c76:	2300      	movs	r3, #0
 8004c78:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	689a      	ldr	r2, [r3, #8]
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	4013      	ands	r3, r2
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d196      	bne.n	8004bbe <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3728      	adds	r7, #40	; 0x28
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	20000068 	.word	0x20000068

08004ca0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b086      	sub	sp, #24
 8004ca4:	af02      	add	r7, sp, #8
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	9300      	str	r3, [sp, #0]
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004cb8:	68f8      	ldr	r0, [r7, #12]
 8004cba:	f7ff ff5b 	bl	8004b74 <SPI_WaitFifoStateUntilTimeout>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d007      	beq.n	8004cd4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cc8:	f043 0220 	orr.w	r2, r3, #32
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e027      	b.n	8004d24 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	9300      	str	r3, [sp, #0]
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	2180      	movs	r1, #128	; 0x80
 8004cde:	68f8      	ldr	r0, [r7, #12]
 8004ce0:	f7ff fec0 	bl	8004a64 <SPI_WaitFlagStateUntilTimeout>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d007      	beq.n	8004cfa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cee:	f043 0220 	orr.w	r2, r3, #32
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e014      	b.n	8004d24 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	9300      	str	r3, [sp, #0]
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004d06:	68f8      	ldr	r0, [r7, #12]
 8004d08:	f7ff ff34 	bl	8004b74 <SPI_WaitFifoStateUntilTimeout>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d007      	beq.n	8004d22 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d16:	f043 0220 	orr.w	r2, r3, #32
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e000      	b.n	8004d24 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3710      	adds	r7, #16
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e049      	b.n	8004dd2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d106      	bne.n	8004d58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 f841 	bl	8004dda <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	3304      	adds	r3, #4
 8004d68:	4619      	mov	r1, r3
 8004d6a:	4610      	mov	r0, r2
 8004d6c:	f000 f9da 	bl	8005124 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3708      	adds	r7, #8
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004dda:	b480      	push	{r7}
 8004ddc:	b083      	sub	sp, #12
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004de2:	bf00      	nop
 8004de4:	370c      	adds	r7, #12
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
	...

08004df0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d001      	beq.n	8004e08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e04f      	b.n	8004ea8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68da      	ldr	r2, [r3, #12]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f042 0201 	orr.w	r2, r2, #1
 8004e1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a23      	ldr	r2, [pc, #140]	; (8004eb4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d01d      	beq.n	8004e66 <HAL_TIM_Base_Start_IT+0x76>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e32:	d018      	beq.n	8004e66 <HAL_TIM_Base_Start_IT+0x76>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a1f      	ldr	r2, [pc, #124]	; (8004eb8 <HAL_TIM_Base_Start_IT+0xc8>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d013      	beq.n	8004e66 <HAL_TIM_Base_Start_IT+0x76>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a1e      	ldr	r2, [pc, #120]	; (8004ebc <HAL_TIM_Base_Start_IT+0xcc>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d00e      	beq.n	8004e66 <HAL_TIM_Base_Start_IT+0x76>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a1c      	ldr	r2, [pc, #112]	; (8004ec0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d009      	beq.n	8004e66 <HAL_TIM_Base_Start_IT+0x76>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a1b      	ldr	r2, [pc, #108]	; (8004ec4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d004      	beq.n	8004e66 <HAL_TIM_Base_Start_IT+0x76>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a19      	ldr	r2, [pc, #100]	; (8004ec8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d115      	bne.n	8004e92 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	689a      	ldr	r2, [r3, #8]
 8004e6c:	4b17      	ldr	r3, [pc, #92]	; (8004ecc <HAL_TIM_Base_Start_IT+0xdc>)
 8004e6e:	4013      	ands	r3, r2
 8004e70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2b06      	cmp	r3, #6
 8004e76:	d015      	beq.n	8004ea4 <HAL_TIM_Base_Start_IT+0xb4>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e7e:	d011      	beq.n	8004ea4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f042 0201 	orr.w	r2, r2, #1
 8004e8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e90:	e008      	b.n	8004ea4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f042 0201 	orr.w	r2, r2, #1
 8004ea0:	601a      	str	r2, [r3, #0]
 8004ea2:	e000      	b.n	8004ea6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ea4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3714      	adds	r7, #20
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr
 8004eb4:	40012c00 	.word	0x40012c00
 8004eb8:	40000400 	.word	0x40000400
 8004ebc:	40000800 	.word	0x40000800
 8004ec0:	40000c00 	.word	0x40000c00
 8004ec4:	40013400 	.word	0x40013400
 8004ec8:	40014000 	.word	0x40014000
 8004ecc:	00010007 	.word	0x00010007

08004ed0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d020      	beq.n	8004f34 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f003 0302 	and.w	r3, r3, #2
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d01b      	beq.n	8004f34 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f06f 0202 	mvn.w	r2, #2
 8004f04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	699b      	ldr	r3, [r3, #24]
 8004f12:	f003 0303 	and.w	r3, r3, #3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d003      	beq.n	8004f22 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 f8e4 	bl	80050e8 <HAL_TIM_IC_CaptureCallback>
 8004f20:	e005      	b.n	8004f2e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 f8d6 	bl	80050d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 f8e7 	bl	80050fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	f003 0304 	and.w	r3, r3, #4
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d020      	beq.n	8004f80 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f003 0304 	and.w	r3, r3, #4
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d01b      	beq.n	8004f80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f06f 0204 	mvn.w	r2, #4
 8004f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2202      	movs	r2, #2
 8004f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d003      	beq.n	8004f6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 f8be 	bl	80050e8 <HAL_TIM_IC_CaptureCallback>
 8004f6c:	e005      	b.n	8004f7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 f8b0 	bl	80050d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f000 f8c1 	bl	80050fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	f003 0308 	and.w	r3, r3, #8
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d020      	beq.n	8004fcc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f003 0308 	and.w	r3, r3, #8
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d01b      	beq.n	8004fcc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f06f 0208 	mvn.w	r2, #8
 8004f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2204      	movs	r2, #4
 8004fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	69db      	ldr	r3, [r3, #28]
 8004faa:	f003 0303 	and.w	r3, r3, #3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d003      	beq.n	8004fba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f898 	bl	80050e8 <HAL_TIM_IC_CaptureCallback>
 8004fb8:	e005      	b.n	8004fc6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f88a 	bl	80050d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 f89b 	bl	80050fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	f003 0310 	and.w	r3, r3, #16
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d020      	beq.n	8005018 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f003 0310 	and.w	r3, r3, #16
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d01b      	beq.n	8005018 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f06f 0210 	mvn.w	r2, #16
 8004fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2208      	movs	r2, #8
 8004fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	69db      	ldr	r3, [r3, #28]
 8004ff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d003      	beq.n	8005006 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f872 	bl	80050e8 <HAL_TIM_IC_CaptureCallback>
 8005004:	e005      	b.n	8005012 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 f864 	bl	80050d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 f875 	bl	80050fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00c      	beq.n	800503c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f003 0301 	and.w	r3, r3, #1
 8005028:	2b00      	cmp	r3, #0
 800502a:	d007      	beq.n	800503c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f06f 0201 	mvn.w	r2, #1
 8005034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7fc fe48 	bl	8001ccc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00c      	beq.n	8005060 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800504c:	2b00      	cmp	r3, #0
 800504e:	d007      	beq.n	8005060 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 f906 	bl	800526c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00c      	beq.n	8005084 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005070:	2b00      	cmp	r3, #0
 8005072:	d007      	beq.n	8005084 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800507c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 f8fe 	bl	8005280 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00c      	beq.n	80050a8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005094:	2b00      	cmp	r3, #0
 8005096:	d007      	beq.n	80050a8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80050a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 f834 	bl	8005110 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	f003 0320 	and.w	r3, r3, #32
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00c      	beq.n	80050cc <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f003 0320 	and.w	r3, r3, #32
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d007      	beq.n	80050cc <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f06f 0220 	mvn.w	r2, #32
 80050c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 f8c6 	bl	8005258 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050cc:	bf00      	nop
 80050ce:	3710      	adds	r7, #16
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050dc:	bf00      	nop
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050f0:	bf00      	nop
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005118:	bf00      	nop
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a40      	ldr	r2, [pc, #256]	; (8005238 <TIM_Base_SetConfig+0x114>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d013      	beq.n	8005164 <TIM_Base_SetConfig+0x40>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005142:	d00f      	beq.n	8005164 <TIM_Base_SetConfig+0x40>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a3d      	ldr	r2, [pc, #244]	; (800523c <TIM_Base_SetConfig+0x118>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d00b      	beq.n	8005164 <TIM_Base_SetConfig+0x40>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a3c      	ldr	r2, [pc, #240]	; (8005240 <TIM_Base_SetConfig+0x11c>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d007      	beq.n	8005164 <TIM_Base_SetConfig+0x40>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a3b      	ldr	r2, [pc, #236]	; (8005244 <TIM_Base_SetConfig+0x120>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d003      	beq.n	8005164 <TIM_Base_SetConfig+0x40>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a3a      	ldr	r2, [pc, #232]	; (8005248 <TIM_Base_SetConfig+0x124>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d108      	bne.n	8005176 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800516a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	4313      	orrs	r3, r2
 8005174:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a2f      	ldr	r2, [pc, #188]	; (8005238 <TIM_Base_SetConfig+0x114>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d01f      	beq.n	80051be <TIM_Base_SetConfig+0x9a>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005184:	d01b      	beq.n	80051be <TIM_Base_SetConfig+0x9a>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a2c      	ldr	r2, [pc, #176]	; (800523c <TIM_Base_SetConfig+0x118>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d017      	beq.n	80051be <TIM_Base_SetConfig+0x9a>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a2b      	ldr	r2, [pc, #172]	; (8005240 <TIM_Base_SetConfig+0x11c>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d013      	beq.n	80051be <TIM_Base_SetConfig+0x9a>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a2a      	ldr	r2, [pc, #168]	; (8005244 <TIM_Base_SetConfig+0x120>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d00f      	beq.n	80051be <TIM_Base_SetConfig+0x9a>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a29      	ldr	r2, [pc, #164]	; (8005248 <TIM_Base_SetConfig+0x124>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d00b      	beq.n	80051be <TIM_Base_SetConfig+0x9a>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a28      	ldr	r2, [pc, #160]	; (800524c <TIM_Base_SetConfig+0x128>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d007      	beq.n	80051be <TIM_Base_SetConfig+0x9a>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a27      	ldr	r2, [pc, #156]	; (8005250 <TIM_Base_SetConfig+0x12c>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d003      	beq.n	80051be <TIM_Base_SetConfig+0x9a>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a26      	ldr	r2, [pc, #152]	; (8005254 <TIM_Base_SetConfig+0x130>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d108      	bne.n	80051d0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	4313      	orrs	r3, r2
 80051dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	689a      	ldr	r2, [r3, #8]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a10      	ldr	r2, [pc, #64]	; (8005238 <TIM_Base_SetConfig+0x114>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d00f      	beq.n	800521c <TIM_Base_SetConfig+0xf8>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a12      	ldr	r2, [pc, #72]	; (8005248 <TIM_Base_SetConfig+0x124>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d00b      	beq.n	800521c <TIM_Base_SetConfig+0xf8>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a11      	ldr	r2, [pc, #68]	; (800524c <TIM_Base_SetConfig+0x128>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d007      	beq.n	800521c <TIM_Base_SetConfig+0xf8>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a10      	ldr	r2, [pc, #64]	; (8005250 <TIM_Base_SetConfig+0x12c>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d003      	beq.n	800521c <TIM_Base_SetConfig+0xf8>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a0f      	ldr	r2, [pc, #60]	; (8005254 <TIM_Base_SetConfig+0x130>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d103      	bne.n	8005224 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	691a      	ldr	r2, [r3, #16]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	615a      	str	r2, [r3, #20]
}
 800522a:	bf00      	nop
 800522c:	3714      	adds	r7, #20
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
 8005236:	bf00      	nop
 8005238:	40012c00 	.word	0x40012c00
 800523c:	40000400 	.word	0x40000400
 8005240:	40000800 	.word	0x40000800
 8005244:	40000c00 	.word	0x40000c00
 8005248:	40013400 	.word	0x40013400
 800524c:	40014000 	.word	0x40014000
 8005250:	40014400 	.word	0x40014400
 8005254:	40014800 	.word	0x40014800

08005258 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005288:	bf00      	nop
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <__itoa>:
 8005294:	1e93      	subs	r3, r2, #2
 8005296:	2b22      	cmp	r3, #34	; 0x22
 8005298:	b510      	push	{r4, lr}
 800529a:	460c      	mov	r4, r1
 800529c:	d904      	bls.n	80052a8 <__itoa+0x14>
 800529e:	2300      	movs	r3, #0
 80052a0:	700b      	strb	r3, [r1, #0]
 80052a2:	461c      	mov	r4, r3
 80052a4:	4620      	mov	r0, r4
 80052a6:	bd10      	pop	{r4, pc}
 80052a8:	2a0a      	cmp	r2, #10
 80052aa:	d109      	bne.n	80052c0 <__itoa+0x2c>
 80052ac:	2800      	cmp	r0, #0
 80052ae:	da07      	bge.n	80052c0 <__itoa+0x2c>
 80052b0:	232d      	movs	r3, #45	; 0x2d
 80052b2:	700b      	strb	r3, [r1, #0]
 80052b4:	4240      	negs	r0, r0
 80052b6:	2101      	movs	r1, #1
 80052b8:	4421      	add	r1, r4
 80052ba:	f000 f805 	bl	80052c8 <__utoa>
 80052be:	e7f1      	b.n	80052a4 <__itoa+0x10>
 80052c0:	2100      	movs	r1, #0
 80052c2:	e7f9      	b.n	80052b8 <__itoa+0x24>

080052c4 <itoa>:
 80052c4:	f7ff bfe6 	b.w	8005294 <__itoa>

080052c8 <__utoa>:
 80052c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052ca:	4c1f      	ldr	r4, [pc, #124]	; (8005348 <__utoa+0x80>)
 80052cc:	b08b      	sub	sp, #44	; 0x2c
 80052ce:	4605      	mov	r5, r0
 80052d0:	460b      	mov	r3, r1
 80052d2:	466e      	mov	r6, sp
 80052d4:	f104 0c20 	add.w	ip, r4, #32
 80052d8:	6820      	ldr	r0, [r4, #0]
 80052da:	6861      	ldr	r1, [r4, #4]
 80052dc:	4637      	mov	r7, r6
 80052de:	c703      	stmia	r7!, {r0, r1}
 80052e0:	3408      	adds	r4, #8
 80052e2:	4564      	cmp	r4, ip
 80052e4:	463e      	mov	r6, r7
 80052e6:	d1f7      	bne.n	80052d8 <__utoa+0x10>
 80052e8:	7921      	ldrb	r1, [r4, #4]
 80052ea:	7139      	strb	r1, [r7, #4]
 80052ec:	1e91      	subs	r1, r2, #2
 80052ee:	6820      	ldr	r0, [r4, #0]
 80052f0:	6038      	str	r0, [r7, #0]
 80052f2:	2922      	cmp	r1, #34	; 0x22
 80052f4:	f04f 0100 	mov.w	r1, #0
 80052f8:	d904      	bls.n	8005304 <__utoa+0x3c>
 80052fa:	7019      	strb	r1, [r3, #0]
 80052fc:	460b      	mov	r3, r1
 80052fe:	4618      	mov	r0, r3
 8005300:	b00b      	add	sp, #44	; 0x2c
 8005302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005304:	1e58      	subs	r0, r3, #1
 8005306:	4684      	mov	ip, r0
 8005308:	fbb5 f7f2 	udiv	r7, r5, r2
 800530c:	fb02 5617 	mls	r6, r2, r7, r5
 8005310:	3628      	adds	r6, #40	; 0x28
 8005312:	446e      	add	r6, sp
 8005314:	460c      	mov	r4, r1
 8005316:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800531a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800531e:	462e      	mov	r6, r5
 8005320:	42b2      	cmp	r2, r6
 8005322:	f101 0101 	add.w	r1, r1, #1
 8005326:	463d      	mov	r5, r7
 8005328:	d9ee      	bls.n	8005308 <__utoa+0x40>
 800532a:	2200      	movs	r2, #0
 800532c:	545a      	strb	r2, [r3, r1]
 800532e:	1919      	adds	r1, r3, r4
 8005330:	1aa5      	subs	r5, r4, r2
 8005332:	42aa      	cmp	r2, r5
 8005334:	dae3      	bge.n	80052fe <__utoa+0x36>
 8005336:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800533a:	780e      	ldrb	r6, [r1, #0]
 800533c:	7006      	strb	r6, [r0, #0]
 800533e:	3201      	adds	r2, #1
 8005340:	f801 5901 	strb.w	r5, [r1], #-1
 8005344:	e7f4      	b.n	8005330 <__utoa+0x68>
 8005346:	bf00      	nop
 8005348:	0800594c 	.word	0x0800594c

0800534c <memset>:
 800534c:	4402      	add	r2, r0
 800534e:	4603      	mov	r3, r0
 8005350:	4293      	cmp	r3, r2
 8005352:	d100      	bne.n	8005356 <memset+0xa>
 8005354:	4770      	bx	lr
 8005356:	f803 1b01 	strb.w	r1, [r3], #1
 800535a:	e7f9      	b.n	8005350 <memset+0x4>

0800535c <__libc_init_array>:
 800535c:	b570      	push	{r4, r5, r6, lr}
 800535e:	4d0d      	ldr	r5, [pc, #52]	; (8005394 <__libc_init_array+0x38>)
 8005360:	4c0d      	ldr	r4, [pc, #52]	; (8005398 <__libc_init_array+0x3c>)
 8005362:	1b64      	subs	r4, r4, r5
 8005364:	10a4      	asrs	r4, r4, #2
 8005366:	2600      	movs	r6, #0
 8005368:	42a6      	cmp	r6, r4
 800536a:	d109      	bne.n	8005380 <__libc_init_array+0x24>
 800536c:	4d0b      	ldr	r5, [pc, #44]	; (800539c <__libc_init_array+0x40>)
 800536e:	4c0c      	ldr	r4, [pc, #48]	; (80053a0 <__libc_init_array+0x44>)
 8005370:	f000 f818 	bl	80053a4 <_init>
 8005374:	1b64      	subs	r4, r4, r5
 8005376:	10a4      	asrs	r4, r4, #2
 8005378:	2600      	movs	r6, #0
 800537a:	42a6      	cmp	r6, r4
 800537c:	d105      	bne.n	800538a <__libc_init_array+0x2e>
 800537e:	bd70      	pop	{r4, r5, r6, pc}
 8005380:	f855 3b04 	ldr.w	r3, [r5], #4
 8005384:	4798      	blx	r3
 8005386:	3601      	adds	r6, #1
 8005388:	e7ee      	b.n	8005368 <__libc_init_array+0xc>
 800538a:	f855 3b04 	ldr.w	r3, [r5], #4
 800538e:	4798      	blx	r3
 8005390:	3601      	adds	r6, #1
 8005392:	e7f2      	b.n	800537a <__libc_init_array+0x1e>
 8005394:	08005974 	.word	0x08005974
 8005398:	08005974 	.word	0x08005974
 800539c:	08005974 	.word	0x08005974
 80053a0:	08005978 	.word	0x08005978

080053a4 <_init>:
 80053a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053a6:	bf00      	nop
 80053a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053aa:	bc08      	pop	{r3}
 80053ac:	469e      	mov	lr, r3
 80053ae:	4770      	bx	lr

080053b0 <_fini>:
 80053b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053b2:	bf00      	nop
 80053b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053b6:	bc08      	pop	{r3}
 80053b8:	469e      	mov	lr, r3
 80053ba:	4770      	bx	lr
