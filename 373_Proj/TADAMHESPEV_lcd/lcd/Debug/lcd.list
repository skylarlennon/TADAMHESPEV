
lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004734  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  080048f0  080048f0  000148f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e44  08004e44  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004e44  08004e44  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e44  08004e44  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e44  08004e44  00014e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e48  08004e48  00014e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004e4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  20000074  08004ec0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08004ec0  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011361  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025ef  00000000  00000000  00031448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010d0  00000000  00000000  00033a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cfa  00000000  00000000  00034b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ae3e  00000000  00000000  00035802  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013090  00000000  00000000  00060640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00109a8f  00000000  00000000  000736d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004604  00000000  00000000  0017d160  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  00181764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000074 	.word	0x20000074
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080048d8 	.word	0x080048d8

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000078 	.word	0x20000078
 80001f8:	080048d8 	.word	0x080048d8

080001fc <uint16_to_bytes>:
#include "stm32l4xx_hal.h"
#include <stdlib.h>

// Probably going to move these to a different file, but for now
void uint16_to_bytes(uint16_t in, uint8_t *out)
{
 80001fc:	b480      	push	{r7}
 80001fe:	b083      	sub	sp, #12
 8000200:	af00      	add	r7, sp, #0
 8000202:	4603      	mov	r3, r0
 8000204:	6039      	str	r1, [r7, #0]
 8000206:	80fb      	strh	r3, [r7, #6]
	out[0] = (in >> 8) & 0xFF;
 8000208:	88fb      	ldrh	r3, [r7, #6]
 800020a:	0a1b      	lsrs	r3, r3, #8
 800020c:	b29b      	uxth	r3, r3
 800020e:	b2da      	uxtb	r2, r3
 8000210:	683b      	ldr	r3, [r7, #0]
 8000212:	701a      	strb	r2, [r3, #0]
	out[1] = in & 0xFF;
 8000214:	683b      	ldr	r3, [r7, #0]
 8000216:	3301      	adds	r3, #1
 8000218:	88fa      	ldrh	r2, [r7, #6]
 800021a:	b2d2      	uxtb	r2, r2
 800021c:	701a      	strb	r2, [r3, #0]
}
 800021e:	bf00      	nop
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr
	...

0800022c <LCD_reset>:
	HX8357_DISPON, 0x80 +  50/5, // Main screen turn on, delay 50 ms
	0,                           // END OF COMMAND LIST
  };

void LCD_reset()
{
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8000230:	2201      	movs	r2, #1
 8000232:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000236:	480d      	ldr	r0, [pc, #52]	; (800026c <LCD_reset+0x40>)
 8000238:	f001 fcaa 	bl	8001b90 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800023c:	2064      	movs	r0, #100	; 0x64
 800023e:	f001 fa0f 	bl	8001660 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8000242:	2200      	movs	r2, #0
 8000244:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000248:	4808      	ldr	r0, [pc, #32]	; (800026c <LCD_reset+0x40>)
 800024a:	f001 fca1 	bl	8001b90 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800024e:	2064      	movs	r0, #100	; 0x64
 8000250:	f001 fa06 	bl	8001660 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8000254:	2201      	movs	r2, #1
 8000256:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800025a:	4804      	ldr	r0, [pc, #16]	; (800026c <LCD_reset+0x40>)
 800025c:	f001 fc98 	bl	8001b90 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000260:	20c8      	movs	r0, #200	; 0xc8
 8000262:	f001 f9fd 	bl	8001660 <HAL_Delay>
}
 8000266:	bf00      	nop
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	48001400 	.word	0x48001400

08000270 <LCD_writeCommand>:

HAL_StatusTypeDef LCD_writeCommand(SPI_HandleTypeDef* spi, uint8_t cmd)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b086      	sub	sp, #24
 8000274:	af02      	add	r7, sp, #8
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	460b      	mov	r3, r1
 800027a:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef result;
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 800027c:	2200      	movs	r2, #0
 800027e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000282:	480c      	ldr	r0, [pc, #48]	; (80002b4 <LCD_writeCommand+0x44>)
 8000284:	f001 fc84 	bl	8001b90 <HAL_GPIO_WritePin>
	uint8_t buf[1];
	result = HAL_SPI_TransmitReceive(spi, &cmd, &buf[0], 1, 100);
 8000288:	f107 020c 	add.w	r2, r7, #12
 800028c:	1cf9      	adds	r1, r7, #3
 800028e:	2364      	movs	r3, #100	; 0x64
 8000290:	9300      	str	r3, [sp, #0]
 8000292:	2301      	movs	r3, #1
 8000294:	6878      	ldr	r0, [r7, #4]
 8000296:	f003 fcb9 	bl	8003c0c <HAL_SPI_TransmitReceive>
 800029a:	4603      	mov	r3, r0
 800029c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 800029e:	2201      	movs	r2, #1
 80002a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002a4:	4803      	ldr	r0, [pc, #12]	; (80002b4 <LCD_writeCommand+0x44>)
 80002a6:	f001 fc73 	bl	8001b90 <HAL_GPIO_WritePin>
	return result;
 80002aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80002ac:	4618      	mov	r0, r3
 80002ae:	3710      	adds	r7, #16
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	48001400 	.word	0x48001400

080002b8 <LCD_startWrite>:

void LCD_startWrite()
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 80002bc:	2200      	movs	r2, #0
 80002be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002c2:	4802      	ldr	r0, [pc, #8]	; (80002cc <LCD_startWrite+0x14>)
 80002c4:	f001 fc64 	bl	8001b90 <HAL_GPIO_WritePin>
}
 80002c8:	bf00      	nop
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	48001400 	.word	0x48001400

080002d0 <LCD_endWrite>:

void LCD_endWrite()
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80002d4:	2201      	movs	r2, #1
 80002d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002da:	4802      	ldr	r0, [pc, #8]	; (80002e4 <LCD_endWrite+0x14>)
 80002dc:	f001 fc58 	bl	8001b90 <HAL_GPIO_WritePin>
}
 80002e0:	bf00      	nop
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	48001400 	.word	0x48001400

080002e8 <LCD_begin>:

int LCD_begin(SPI_HandleTypeDef* spi)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b084      	sub	sp, #16
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
	LCD_reset();
 80002f0:	f7ff ff9c 	bl	800022c <LCD_reset>
	LCD_startWrite();
 80002f4:	f7ff ffe0 	bl	80002b8 <LCD_startWrite>
	uint8_t *addr = init;
 80002f8:	4b26      	ldr	r3, [pc, #152]	; (8000394 <LCD_begin+0xac>)
 80002fa:	60fb      	str	r3, [r7, #12]
	uint8_t cmd, x, numArgs;
	HAL_StatusTypeDef result;
	while((cmd = *(addr++)) > 0) // '0' command ends list
 80002fc:	e03b      	b.n	8000376 <LCD_begin+0x8e>
	{
		if (cmd != 0xFF) // '255' is ignored
 80002fe:	7abb      	ldrb	r3, [r7, #10]
 8000300:	2bff      	cmp	r3, #255	; 0xff
 8000302:	d00d      	beq.n	8000320 <LCD_begin+0x38>
		{
			result = LCD_writeCommand(spi, cmd);
 8000304:	7abb      	ldrb	r3, [r7, #10]
 8000306:	4619      	mov	r1, r3
 8000308:	6878      	ldr	r0, [r7, #4]
 800030a:	f7ff ffb1 	bl	8000270 <LCD_writeCommand>
 800030e:	4603      	mov	r3, r0
 8000310:	727b      	strb	r3, [r7, #9]
			if (result != HAL_OK)
 8000312:	7a7b      	ldrb	r3, [r7, #9]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d003      	beq.n	8000320 <LCD_begin+0x38>
			{
				LCD_endWrite();
 8000318:	f7ff ffda 	bl	80002d0 <LCD_endWrite>
				return 0;
 800031c:	2300      	movs	r3, #0
 800031e:	e035      	b.n	800038c <LCD_begin+0xa4>
			}
		}
		x = *(addr++);
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	1c5a      	adds	r2, r3, #1
 8000324:	60fa      	str	r2, [r7, #12]
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	723b      	strb	r3, [r7, #8]
		numArgs = x & 0x7F;
 800032a:	7a3b      	ldrb	r3, [r7, #8]
 800032c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000330:	72fb      	strb	r3, [r7, #11]
		if (x & 0x80) // If high bit set...
 8000332:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8000336:	2b00      	cmp	r3, #0
 8000338:	da18      	bge.n	800036c <LCD_begin+0x84>
		{
			HAL_Delay(numArgs * 5); // numArgs is actually a delay time (5ms units)
 800033a:	7afa      	ldrb	r2, [r7, #11]
 800033c:	4613      	mov	r3, r2
 800033e:	009b      	lsls	r3, r3, #2
 8000340:	4413      	add	r3, r2
 8000342:	4618      	mov	r0, r3
 8000344:	f001 f98c 	bl	8001660 <HAL_Delay>
 8000348:	e015      	b.n	8000376 <LCD_begin+0x8e>
		}
		else // Otherwise, issue args to command...
		{
			while (numArgs--)
			{
				result = HAL_SPI_Transmit(spi, addr++, 1, 100);
 800034a:	68f9      	ldr	r1, [r7, #12]
 800034c:	1c4b      	adds	r3, r1, #1
 800034e:	60fb      	str	r3, [r7, #12]
 8000350:	2364      	movs	r3, #100	; 0x64
 8000352:	2201      	movs	r2, #1
 8000354:	6878      	ldr	r0, [r7, #4]
 8000356:	f003 fae4 	bl	8003922 <HAL_SPI_Transmit>
 800035a:	4603      	mov	r3, r0
 800035c:	727b      	strb	r3, [r7, #9]
				if (result != HAL_OK)
 800035e:	7a7b      	ldrb	r3, [r7, #9]
 8000360:	2b00      	cmp	r3, #0
 8000362:	d003      	beq.n	800036c <LCD_begin+0x84>
				{
					LCD_endWrite();
 8000364:	f7ff ffb4 	bl	80002d0 <LCD_endWrite>
					return 0;
 8000368:	2300      	movs	r3, #0
 800036a:	e00f      	b.n	800038c <LCD_begin+0xa4>
			while (numArgs--)
 800036c:	7afb      	ldrb	r3, [r7, #11]
 800036e:	1e5a      	subs	r2, r3, #1
 8000370:	72fa      	strb	r2, [r7, #11]
 8000372:	2b00      	cmp	r3, #0
 8000374:	d1e9      	bne.n	800034a <LCD_begin+0x62>
	while((cmd = *(addr++)) > 0) // '0' command ends list
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	1c5a      	adds	r2, r3, #1
 800037a:	60fa      	str	r2, [r7, #12]
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	72bb      	strb	r3, [r7, #10]
 8000380:	7abb      	ldrb	r3, [r7, #10]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d1bb      	bne.n	80002fe <LCD_begin+0x16>
				}
			}
		}
	}
	LCD_endWrite();
 8000386:	f7ff ffa3 	bl	80002d0 <LCD_endWrite>
	return 1;
 800038a:	2301      	movs	r3, #1
}
 800038c:	4618      	mov	r0, r3
 800038e:	3710      	adds	r7, #16
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}
 8000394:	20000000 	.word	0x20000000

08000398 <LCD_setAddrWindow>:
	LCD_endWrite();
	return result == HAL_OK;
}

int LCD_setAddrWindow(SPI_HandleTypeDef* spi, uint16_t x1, uint16_t y1, uint16_t w, uint16_t h)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b086      	sub	sp, #24
 800039c:	af00      	add	r7, sp, #0
 800039e:	60f8      	str	r0, [r7, #12]
 80003a0:	4608      	mov	r0, r1
 80003a2:	4611      	mov	r1, r2
 80003a4:	461a      	mov	r2, r3
 80003a6:	4603      	mov	r3, r0
 80003a8:	817b      	strh	r3, [r7, #10]
 80003aa:	460b      	mov	r3, r1
 80003ac:	813b      	strh	r3, [r7, #8]
 80003ae:	4613      	mov	r3, r2
 80003b0:	80fb      	strh	r3, [r7, #6]
	uint16_t x2 = x1 + w - 1;
 80003b2:	897a      	ldrh	r2, [r7, #10]
 80003b4:	88fb      	ldrh	r3, [r7, #6]
 80003b6:	4413      	add	r3, r2
 80003b8:	b29b      	uxth	r3, r3
 80003ba:	3b01      	subs	r3, #1
 80003bc:	82fb      	strh	r3, [r7, #22]
	uint16_t y2 = y1 + h - 1;
 80003be:	893a      	ldrh	r2, [r7, #8]
 80003c0:	8c3b      	ldrh	r3, [r7, #32]
 80003c2:	4413      	add	r3, r2
 80003c4:	b29b      	uxth	r3, r3
 80003c6:	3b01      	subs	r3, #1
 80003c8:	82bb      	strh	r3, [r7, #20]
	uint8_t buf[2];

	LCD_startWrite();
 80003ca:	f7ff ff75 	bl	80002b8 <LCD_startWrite>
	LCD_writeCommand(spi, HX8357_CASET); // Column address set
 80003ce:	212a      	movs	r1, #42	; 0x2a
 80003d0:	68f8      	ldr	r0, [r7, #12]
 80003d2:	f7ff ff4d 	bl	8000270 <LCD_writeCommand>

	uint16_to_bytes(x1, buf);
 80003d6:	f107 0210 	add.w	r2, r7, #16
 80003da:	897b      	ldrh	r3, [r7, #10]
 80003dc:	4611      	mov	r1, r2
 80003de:	4618      	mov	r0, r3
 80003e0:	f7ff ff0c 	bl	80001fc <uint16_to_bytes>
	HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 80003e4:	f107 0110 	add.w	r1, r7, #16
 80003e8:	2364      	movs	r3, #100	; 0x64
 80003ea:	2202      	movs	r2, #2
 80003ec:	68f8      	ldr	r0, [r7, #12]
 80003ee:	f003 fa98 	bl	8003922 <HAL_SPI_Transmit>

	uint16_to_bytes(x2, buf);
 80003f2:	f107 0210 	add.w	r2, r7, #16
 80003f6:	8afb      	ldrh	r3, [r7, #22]
 80003f8:	4611      	mov	r1, r2
 80003fa:	4618      	mov	r0, r3
 80003fc:	f7ff fefe 	bl	80001fc <uint16_to_bytes>
	HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 8000400:	f107 0110 	add.w	r1, r7, #16
 8000404:	2364      	movs	r3, #100	; 0x64
 8000406:	2202      	movs	r2, #2
 8000408:	68f8      	ldr	r0, [r7, #12]
 800040a:	f003 fa8a 	bl	8003922 <HAL_SPI_Transmit>

	LCD_writeCommand(spi, HX8357_PASET); // Row address set
 800040e:	212b      	movs	r1, #43	; 0x2b
 8000410:	68f8      	ldr	r0, [r7, #12]
 8000412:	f7ff ff2d 	bl	8000270 <LCD_writeCommand>

	uint16_to_bytes(y1, buf);
 8000416:	f107 0210 	add.w	r2, r7, #16
 800041a:	893b      	ldrh	r3, [r7, #8]
 800041c:	4611      	mov	r1, r2
 800041e:	4618      	mov	r0, r3
 8000420:	f7ff feec 	bl	80001fc <uint16_to_bytes>
	HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 8000424:	f107 0110 	add.w	r1, r7, #16
 8000428:	2364      	movs	r3, #100	; 0x64
 800042a:	2202      	movs	r2, #2
 800042c:	68f8      	ldr	r0, [r7, #12]
 800042e:	f003 fa78 	bl	8003922 <HAL_SPI_Transmit>

	uint16_to_bytes(y2, buf);
 8000432:	f107 0210 	add.w	r2, r7, #16
 8000436:	8abb      	ldrh	r3, [r7, #20]
 8000438:	4611      	mov	r1, r2
 800043a:	4618      	mov	r0, r3
 800043c:	f7ff fede 	bl	80001fc <uint16_to_bytes>
	HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 8000440:	f107 0110 	add.w	r1, r7, #16
 8000444:	2364      	movs	r3, #100	; 0x64
 8000446:	2202      	movs	r2, #2
 8000448:	68f8      	ldr	r0, [r7, #12]
 800044a:	f003 fa6a 	bl	8003922 <HAL_SPI_Transmit>

	LCD_endWrite();
 800044e:	f7ff ff3f 	bl	80002d0 <LCD_endWrite>
	return 1;
 8000452:	2301      	movs	r3, #1
}
 8000454:	4618      	mov	r0, r3
 8000456:	3718      	adds	r7, #24
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}

0800045c <LCD_color565>:

uint16_t LCD_color565(uint8_t red, uint8_t green, uint8_t blue) {
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
 8000462:	4603      	mov	r3, r0
 8000464:	71fb      	strb	r3, [r7, #7]
 8000466:	460b      	mov	r3, r1
 8000468:	71bb      	strb	r3, [r7, #6]
 800046a:	4613      	mov	r3, r2
 800046c:	717b      	strb	r3, [r7, #5]
    return ((red & 0xF8) << 8) | ((green & 0xFC) << 3) | ((blue & 0xF8) >> 3);
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	021b      	lsls	r3, r3, #8
 8000472:	b21b      	sxth	r3, r3
 8000474:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000478:	f023 0307 	bic.w	r3, r3, #7
 800047c:	b21a      	sxth	r2, r3
 800047e:	79bb      	ldrb	r3, [r7, #6]
 8000480:	00db      	lsls	r3, r3, #3
 8000482:	b21b      	sxth	r3, r3
 8000484:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8000488:	b21b      	sxth	r3, r3
 800048a:	4313      	orrs	r3, r2
 800048c:	b21a      	sxth	r2, r3
 800048e:	797b      	ldrb	r3, [r7, #5]
 8000490:	08db      	lsrs	r3, r3, #3
 8000492:	b2db      	uxtb	r3, r3
 8000494:	b21b      	sxth	r3, r3
 8000496:	4313      	orrs	r3, r2
 8000498:	b21b      	sxth	r3, r3
 800049a:	b29b      	uxth	r3, r3
}
 800049c:	4618      	mov	r0, r3
 800049e:	370c      	adds	r7, #12
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr

080004a8 <LCD_pushColor>:

int LCD_pushColor(SPI_HandleTypeDef* spi, uint16_t color) {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
 80004b0:	460b      	mov	r3, r1
 80004b2:	807b      	strh	r3, [r7, #2]
	LCD_startWrite();
 80004b4:	f7ff ff00 	bl	80002b8 <LCD_startWrite>
	LCD_writeCommand(spi, HX8357_RAMWR); // Write to RAM
 80004b8:	212c      	movs	r1, #44	; 0x2c
 80004ba:	6878      	ldr	r0, [r7, #4]
 80004bc:	f7ff fed8 	bl	8000270 <LCD_writeCommand>
	HAL_SPI_Transmit(spi, (uint8_t*)&color, 2, 100);
 80004c0:	1cb9      	adds	r1, r7, #2
 80004c2:	2364      	movs	r3, #100	; 0x64
 80004c4:	2202      	movs	r2, #2
 80004c6:	6878      	ldr	r0, [r7, #4]
 80004c8:	f003 fa2b 	bl	8003922 <HAL_SPI_Transmit>
	LCD_writeCommand(spi, HX8357_NOP); // Write command to stop RAMWR
 80004cc:	2100      	movs	r1, #0
 80004ce:	6878      	ldr	r0, [r7, #4]
 80004d0:	f7ff fece 	bl	8000270 <LCD_writeCommand>
	LCD_endWrite();
 80004d4:	f7ff fefc 	bl	80002d0 <LCD_endWrite>
	return 1;
 80004d8:	2301      	movs	r3, #1
}
 80004da:	4618      	mov	r0, r3
 80004dc:	3708      	adds	r7, #8
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}

080004e2 <LCD_pushColorCopy>:

int LCD_pushColorCopy(SPI_HandleTypeDef* spi, uint16_t color, uint32_t count) {
 80004e2:	b580      	push	{r7, lr}
 80004e4:	b086      	sub	sp, #24
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	60f8      	str	r0, [r7, #12]
 80004ea:	460b      	mov	r3, r1
 80004ec:	607a      	str	r2, [r7, #4]
 80004ee:	817b      	strh	r3, [r7, #10]
	LCD_startWrite();
 80004f0:	f7ff fee2 	bl	80002b8 <LCD_startWrite>

	LCD_writeCommand(spi, HX8357_RAMWR); // Write to RAM
 80004f4:	212c      	movs	r1, #44	; 0x2c
 80004f6:	68f8      	ldr	r0, [r7, #12]
 80004f8:	f7ff feba 	bl	8000270 <LCD_writeCommand>

	uint8_t buf[2];
	uint16_to_bytes(color, &buf[0]);
 80004fc:	f107 0210 	add.w	r2, r7, #16
 8000500:	897b      	ldrh	r3, [r7, #10]
 8000502:	4611      	mov	r1, r2
 8000504:	4618      	mov	r0, r3
 8000506:	f7ff fe79 	bl	80001fc <uint16_to_bytes>
	for (int i = 0; i < count; ++i)
 800050a:	2300      	movs	r3, #0
 800050c:	617b      	str	r3, [r7, #20]
 800050e:	e009      	b.n	8000524 <LCD_pushColorCopy+0x42>
	{
		HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 8000510:	f107 0110 	add.w	r1, r7, #16
 8000514:	2364      	movs	r3, #100	; 0x64
 8000516:	2202      	movs	r2, #2
 8000518:	68f8      	ldr	r0, [r7, #12]
 800051a:	f003 fa02 	bl	8003922 <HAL_SPI_Transmit>
	for (int i = 0; i < count; ++i)
 800051e:	697b      	ldr	r3, [r7, #20]
 8000520:	3301      	adds	r3, #1
 8000522:	617b      	str	r3, [r7, #20]
 8000524:	697b      	ldr	r3, [r7, #20]
 8000526:	687a      	ldr	r2, [r7, #4]
 8000528:	429a      	cmp	r2, r3
 800052a:	d8f1      	bhi.n	8000510 <LCD_pushColorCopy+0x2e>
	}

	LCD_writeCommand(spi, HX8357_NOP); // Write command to stop RAMWR
 800052c:	2100      	movs	r1, #0
 800052e:	68f8      	ldr	r0, [r7, #12]
 8000530:	f7ff fe9e 	bl	8000270 <LCD_writeCommand>

	LCD_endWrite();
 8000534:	f7ff fecc 	bl	80002d0 <LCD_endWrite>
	return 1;
 8000538:	2301      	movs	r3, #1
}
 800053a:	4618      	mov	r0, r3
 800053c:	3718      	adds	r7, #24
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}

08000542 <LCD_writePixel>:

	LCD_endWrite();
	return 1;
}

int LCD_writePixel(SPI_HandleTypeDef* spi, int16_t x, int16_t y, uint16_t color) {
 8000542:	b580      	push	{r7, lr}
 8000544:	b086      	sub	sp, #24
 8000546:	af02      	add	r7, sp, #8
 8000548:	60f8      	str	r0, [r7, #12]
 800054a:	4608      	mov	r0, r1
 800054c:	4611      	mov	r1, r2
 800054e:	461a      	mov	r2, r3
 8000550:	4603      	mov	r3, r0
 8000552:	817b      	strh	r3, [r7, #10]
 8000554:	460b      	mov	r3, r1
 8000556:	813b      	strh	r3, [r7, #8]
 8000558:	4613      	mov	r3, r2
 800055a:	80fb      	strh	r3, [r7, #6]
    if ((x < 0) ||(x >= HX8357_TFTWIDTH) || (y < 0) || (y >= HX8357_TFTHEIGHT)) return 0;
 800055c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000560:	2b00      	cmp	r3, #0
 8000562:	db0d      	blt.n	8000580 <LCD_writePixel+0x3e>
 8000564:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000568:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800056c:	da08      	bge.n	8000580 <LCD_writePixel+0x3e>
 800056e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000572:	2b00      	cmp	r3, #0
 8000574:	db04      	blt.n	8000580 <LCD_writePixel+0x3e>
 8000576:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800057a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800057e:	db01      	blt.n	8000584 <LCD_writePixel+0x42>
 8000580:	2300      	movs	r3, #0
 8000582:	e017      	b.n	80005b4 <LCD_writePixel+0x72>
    if(!LCD_setAddrWindow(spi, x, y, 1, 1)) return 0;
 8000584:	8979      	ldrh	r1, [r7, #10]
 8000586:	893a      	ldrh	r2, [r7, #8]
 8000588:	2301      	movs	r3, #1
 800058a:	9300      	str	r3, [sp, #0]
 800058c:	2301      	movs	r3, #1
 800058e:	68f8      	ldr	r0, [r7, #12]
 8000590:	f7ff ff02 	bl	8000398 <LCD_setAddrWindow>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d101      	bne.n	800059e <LCD_writePixel+0x5c>
 800059a:	2300      	movs	r3, #0
 800059c:	e00a      	b.n	80005b4 <LCD_writePixel+0x72>
    if (!LCD_pushColor(spi, color)) return 0;
 800059e:	88fb      	ldrh	r3, [r7, #6]
 80005a0:	4619      	mov	r1, r3
 80005a2:	68f8      	ldr	r0, [r7, #12]
 80005a4:	f7ff ff80 	bl	80004a8 <LCD_pushColor>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d101      	bne.n	80005b2 <LCD_writePixel+0x70>
 80005ae:	2300      	movs	r3, #0
 80005b0:	e000      	b.n	80005b4 <LCD_writePixel+0x72>
    return 1;
 80005b2:	2301      	movs	r3, #1
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3710      	adds	r7, #16
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <LCD_writePixels>:

// Length of colors array must be w * h
int LCD_writePixels(SPI_HandleTypeDef* spi, uint16_t color,
					int16_t x, int16_t y, int16_t w, int16_t h)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af02      	add	r7, sp, #8
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	4608      	mov	r0, r1
 80005c6:	4611      	mov	r1, r2
 80005c8:	461a      	mov	r2, r3
 80005ca:	4603      	mov	r3, r0
 80005cc:	817b      	strh	r3, [r7, #10]
 80005ce:	460b      	mov	r3, r1
 80005d0:	813b      	strh	r3, [r7, #8]
 80005d2:	4613      	mov	r3, r2
 80005d4:	80fb      	strh	r3, [r7, #6]
	if ((x < 0) ||(x >= HX8357_TFTWIDTH) || (y < 0) || (y >= HX8357_TFTHEIGHT)) return 0;
 80005d6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	db0d      	blt.n	80005fa <LCD_writePixels+0x3e>
 80005de:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80005e2:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80005e6:	da08      	bge.n	80005fa <LCD_writePixels+0x3e>
 80005e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	db04      	blt.n	80005fa <LCD_writePixels+0x3e>
 80005f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005f4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80005f8:	db01      	blt.n	80005fe <LCD_writePixels+0x42>
 80005fa:	2300      	movs	r3, #0
 80005fc:	e01f      	b.n	800063e <LCD_writePixels+0x82>
	if(!LCD_setAddrWindow(spi, x, y, w, h)) return 0;
 80005fe:	8939      	ldrh	r1, [r7, #8]
 8000600:	88fa      	ldrh	r2, [r7, #6]
 8000602:	8b38      	ldrh	r0, [r7, #24]
 8000604:	8bbb      	ldrh	r3, [r7, #28]
 8000606:	9300      	str	r3, [sp, #0]
 8000608:	4603      	mov	r3, r0
 800060a:	68f8      	ldr	r0, [r7, #12]
 800060c:	f7ff fec4 	bl	8000398 <LCD_setAddrWindow>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d101      	bne.n	800061a <LCD_writePixels+0x5e>
 8000616:	2300      	movs	r3, #0
 8000618:	e011      	b.n	800063e <LCD_writePixels+0x82>
	if (!LCD_pushColorCopy(spi, color, w*h)) return 0;
 800061a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800061e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8000622:	fb02 f303 	mul.w	r3, r2, r3
 8000626:	461a      	mov	r2, r3
 8000628:	897b      	ldrh	r3, [r7, #10]
 800062a:	4619      	mov	r1, r3
 800062c:	68f8      	ldr	r0, [r7, #12]
 800062e:	f7ff ff58 	bl	80004e2 <LCD_pushColorCopy>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d101      	bne.n	800063c <LCD_writePixels+0x80>
 8000638:	2300      	movs	r3, #0
 800063a:	e000      	b.n	800063e <LCD_writePixels+0x82>
	return 1;
 800063c:	2301      	movs	r3, #1
}
 800063e:	4618      	mov	r0, r3
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
	...

08000648 <LCD_drawChar>:
		0x70, 0x1C, 0x07, 0x1C, 0x70,
		0x0E, 0x38, 0xE0, 0x38, 0x0E
};

void LCD_drawChar(SPI_HandleTypeDef* spi, int16_t x, int16_t y, unsigned char c, uint16_t color, uint32_t size)
{
 8000648:	b590      	push	{r4, r7, lr}
 800064a:	b089      	sub	sp, #36	; 0x24
 800064c:	af02      	add	r7, sp, #8
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	4608      	mov	r0, r1
 8000652:	4611      	mov	r1, r2
 8000654:	461a      	mov	r2, r3
 8000656:	4603      	mov	r3, r0
 8000658:	817b      	strh	r3, [r7, #10]
 800065a:	460b      	mov	r3, r1
 800065c:	813b      	strh	r3, [r7, #8]
 800065e:	4613      	mov	r3, r2
 8000660:	71fb      	strb	r3, [r7, #7]
	if((x >= HX8357_TFTWIDTH)   || // Clip right
 8000662:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000666:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800066a:	f280 80b5 	bge.w	80007d8 <LCD_drawChar+0x190>
	   (y >= HX8357_TFTHEIGHT)  || // Clip bottom
	   ((x + 6 * size - 1) < 0) || // Clip left
 800066e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000672:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000676:	f280 80af 	bge.w	80007d8 <LCD_drawChar+0x190>
	   ((y + 8 * size - 1) < 0))   // Clip top
		return;

	uint16_t bg = LCD_color565(255, 255, 255);
 800067a:	22ff      	movs	r2, #255	; 0xff
 800067c:	21ff      	movs	r1, #255	; 0xff
 800067e:	20ff      	movs	r0, #255	; 0xff
 8000680:	f7ff feec 	bl	800045c <LCD_color565>
 8000684:	4603      	mov	r3, r0
 8000686:	827b      	strh	r3, [r7, #18]
	LCD_startWrite();
 8000688:	f7ff fe16 	bl	80002b8 <LCD_startWrite>
	for(int8_t i = 0; i < 5; i++) // Char bitmap = 5 columns
 800068c:	2300      	movs	r3, #0
 800068e:	75fb      	strb	r3, [r7, #23]
 8000690:	e09a      	b.n	80007c8 <LCD_drawChar+0x180>
	{
		uint8_t line = font[c * 5 + i];
 8000692:	79fa      	ldrb	r2, [r7, #7]
 8000694:	4613      	mov	r3, r2
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	441a      	add	r2, r3
 800069a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800069e:	4413      	add	r3, r2
 80006a0:	4a4f      	ldr	r2, [pc, #316]	; (80007e0 <LCD_drawChar+0x198>)
 80006a2:	5cd3      	ldrb	r3, [r2, r3]
 80006a4:	75bb      	strb	r3, [r7, #22]
		for(int8_t j = 0; j < 8; j++, line >>= 1)
 80006a6:	2300      	movs	r3, #0
 80006a8:	757b      	strb	r3, [r7, #21]
 80006aa:	e082      	b.n	80007b2 <LCD_drawChar+0x16a>
		{
			if (line & 1)
 80006ac:	7dbb      	ldrb	r3, [r7, #22]
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d03a      	beq.n	800072c <LCD_drawChar+0xe4>
			{
				if (size == 1) LCD_writePixel(spi, x+i, y+j, color);
 80006b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d112      	bne.n	80006e2 <LCD_drawChar+0x9a>
 80006bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80006c0:	b29a      	uxth	r2, r3
 80006c2:	897b      	ldrh	r3, [r7, #10]
 80006c4:	4413      	add	r3, r2
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	b219      	sxth	r1, r3
 80006ca:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80006ce:	b29a      	uxth	r2, r3
 80006d0:	893b      	ldrh	r3, [r7, #8]
 80006d2:	4413      	add	r3, r2
 80006d4:	b29b      	uxth	r3, r3
 80006d6:	b21a      	sxth	r2, r3
 80006d8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80006da:	68f8      	ldr	r0, [r7, #12]
 80006dc:	f7ff ff31 	bl	8000542 <LCD_writePixel>
 80006e0:	e05e      	b.n	80007a0 <LCD_drawChar+0x158>
				else LCD_writePixels(spi, color, x+i*size, y+j*size, size, size);
 80006e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80006e6:	b29a      	uxth	r2, r3
 80006e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006ea:	b29b      	uxth	r3, r3
 80006ec:	fb12 f303 	smulbb	r3, r2, r3
 80006f0:	b29a      	uxth	r2, r3
 80006f2:	897b      	ldrh	r3, [r7, #10]
 80006f4:	4413      	add	r3, r2
 80006f6:	b29b      	uxth	r3, r3
 80006f8:	b218      	sxth	r0, r3
 80006fa:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80006fe:	b29a      	uxth	r2, r3
 8000700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000702:	b29b      	uxth	r3, r3
 8000704:	fb12 f303 	smulbb	r3, r2, r3
 8000708:	b29a      	uxth	r2, r3
 800070a:	893b      	ldrh	r3, [r7, #8]
 800070c:	4413      	add	r3, r2
 800070e:	b29b      	uxth	r3, r3
 8000710:	b21c      	sxth	r4, r3
 8000712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000714:	b21b      	sxth	r3, r3
 8000716:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000718:	b212      	sxth	r2, r2
 800071a:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800071c:	9201      	str	r2, [sp, #4]
 800071e:	9300      	str	r3, [sp, #0]
 8000720:	4623      	mov	r3, r4
 8000722:	4602      	mov	r2, r0
 8000724:	68f8      	ldr	r0, [r7, #12]
 8000726:	f7ff ff49 	bl	80005bc <LCD_writePixels>
 800072a:	e039      	b.n	80007a0 <LCD_drawChar+0x158>
			}
			else
			{
				if (size == 1) LCD_writePixel(spi, x+i, y+j, bg);
 800072c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800072e:	2b01      	cmp	r3, #1
 8000730:	d112      	bne.n	8000758 <LCD_drawChar+0x110>
 8000732:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000736:	b29a      	uxth	r2, r3
 8000738:	897b      	ldrh	r3, [r7, #10]
 800073a:	4413      	add	r3, r2
 800073c:	b29b      	uxth	r3, r3
 800073e:	b219      	sxth	r1, r3
 8000740:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000744:	b29a      	uxth	r2, r3
 8000746:	893b      	ldrh	r3, [r7, #8]
 8000748:	4413      	add	r3, r2
 800074a:	b29b      	uxth	r3, r3
 800074c:	b21a      	sxth	r2, r3
 800074e:	8a7b      	ldrh	r3, [r7, #18]
 8000750:	68f8      	ldr	r0, [r7, #12]
 8000752:	f7ff fef6 	bl	8000542 <LCD_writePixel>
 8000756:	e023      	b.n	80007a0 <LCD_drawChar+0x158>
				else LCD_writePixels(spi, bg, x+i*size, y+j*size, size, size);
 8000758:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800075c:	b29a      	uxth	r2, r3
 800075e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000760:	b29b      	uxth	r3, r3
 8000762:	fb12 f303 	smulbb	r3, r2, r3
 8000766:	b29a      	uxth	r2, r3
 8000768:	897b      	ldrh	r3, [r7, #10]
 800076a:	4413      	add	r3, r2
 800076c:	b29b      	uxth	r3, r3
 800076e:	b218      	sxth	r0, r3
 8000770:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000774:	b29a      	uxth	r2, r3
 8000776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000778:	b29b      	uxth	r3, r3
 800077a:	fb12 f303 	smulbb	r3, r2, r3
 800077e:	b29a      	uxth	r2, r3
 8000780:	893b      	ldrh	r3, [r7, #8]
 8000782:	4413      	add	r3, r2
 8000784:	b29b      	uxth	r3, r3
 8000786:	b21c      	sxth	r4, r3
 8000788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800078a:	b21b      	sxth	r3, r3
 800078c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800078e:	b212      	sxth	r2, r2
 8000790:	8a79      	ldrh	r1, [r7, #18]
 8000792:	9201      	str	r2, [sp, #4]
 8000794:	9300      	str	r3, [sp, #0]
 8000796:	4623      	mov	r3, r4
 8000798:	4602      	mov	r2, r0
 800079a:	68f8      	ldr	r0, [r7, #12]
 800079c:	f7ff ff0e 	bl	80005bc <LCD_writePixels>
		for(int8_t j = 0; j < 8; j++, line >>= 1)
 80007a0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	3301      	adds	r3, #1
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	757b      	strb	r3, [r7, #21]
 80007ac:	7dbb      	ldrb	r3, [r7, #22]
 80007ae:	085b      	lsrs	r3, r3, #1
 80007b0:	75bb      	strb	r3, [r7, #22]
 80007b2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80007b6:	2b07      	cmp	r3, #7
 80007b8:	f77f af78 	ble.w	80006ac <LCD_drawChar+0x64>
	for(int8_t i = 0; i < 5; i++) // Char bitmap = 5 columns
 80007bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	3301      	adds	r3, #1
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	75fb      	strb	r3, [r7, #23]
 80007c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80007cc:	2b04      	cmp	r3, #4
 80007ce:	f77f af60 	ble.w	8000692 <LCD_drawChar+0x4a>
			}
		}
	}
	LCD_endWrite();
 80007d2:	f7ff fd7d 	bl	80002d0 <LCD_endWrite>
 80007d6:	e000      	b.n	80007da <LCD_drawChar+0x192>
		return;
 80007d8:	bf00      	nop
}
 80007da:	371c      	adds	r7, #28
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd90      	pop	{r4, r7, pc}
 80007e0:	080048fc 	.word	0x080048fc

080007e4 <LCD_drawString>:
	}
	LCD_endWrite();
}

void LCD_drawString(SPI_HandleTypeDef* spi, int16_t x, int16_t y, unsigned char* c, uint32_t length, uint16_t color, uint32_t size)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b088      	sub	sp, #32
 80007e8:	af02      	add	r7, sp, #8
 80007ea:	60f8      	str	r0, [r7, #12]
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	460b      	mov	r3, r1
 80007f0:	817b      	strh	r3, [r7, #10]
 80007f2:	4613      	mov	r3, r2
 80007f4:	813b      	strh	r3, [r7, #8]
	for (int i = 0; i < length; ++i) LCD_drawChar(spi, x + i*6*size, y, c[i], color, size);
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]
 80007fa:	e020      	b.n	800083e <LCD_drawString+0x5a>
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	b29a      	uxth	r2, r3
 8000800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000802:	b29b      	uxth	r3, r3
 8000804:	fb12 f303 	smulbb	r3, r2, r3
 8000808:	b29b      	uxth	r3, r3
 800080a:	461a      	mov	r2, r3
 800080c:	0052      	lsls	r2, r2, #1
 800080e:	4413      	add	r3, r2
 8000810:	005b      	lsls	r3, r3, #1
 8000812:	b29a      	uxth	r2, r3
 8000814:	897b      	ldrh	r3, [r7, #10]
 8000816:	4413      	add	r3, r2
 8000818:	b29b      	uxth	r3, r3
 800081a:	b219      	sxth	r1, r3
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	4413      	add	r3, r2
 8000822:	7818      	ldrb	r0, [r3, #0]
 8000824:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800082a:	9301      	str	r3, [sp, #4]
 800082c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800082e:	9300      	str	r3, [sp, #0]
 8000830:	4603      	mov	r3, r0
 8000832:	68f8      	ldr	r0, [r7, #12]
 8000834:	f7ff ff08 	bl	8000648 <LCD_drawChar>
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	3301      	adds	r3, #1
 800083c:	617b      	str	r3, [r7, #20]
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	6a3a      	ldr	r2, [r7, #32]
 8000842:	429a      	cmp	r2, r3
 8000844:	d8da      	bhi.n	80007fc <LCD_drawString+0x18>
}
 8000846:	bf00      	nop
 8000848:	bf00      	nop
 800084a:	3718      	adds	r7, #24
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <LCD_drawBattery>:
	}
	LCD_endWrite();
}

//homemade functions for TADAMHASPEV, move to different file
void LCD_drawBattery(SPI_HandleTypeDef* spi, int16_t x, int16_t y, uint16_t color, uint32_t size) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b086      	sub	sp, #24
 8000854:	af02      	add	r7, sp, #8
 8000856:	60f8      	str	r0, [r7, #12]
 8000858:	4608      	mov	r0, r1
 800085a:	4611      	mov	r1, r2
 800085c:	461a      	mov	r2, r3
 800085e:	4603      	mov	r3, r0
 8000860:	817b      	strh	r3, [r7, #10]
 8000862:	460b      	mov	r3, r1
 8000864:	813b      	strh	r3, [r7, #8]
 8000866:	4613      	mov	r3, r2
 8000868:	80fb      	strh	r3, [r7, #6]
	//left
	if(!LCD_setAddrWindow(spi, x, y + 10, 1, 22*size)) return;
 800086a:	8979      	ldrh	r1, [r7, #10]
 800086c:	893b      	ldrh	r3, [r7, #8]
 800086e:	330a      	adds	r3, #10
 8000870:	b29a      	uxth	r2, r3
 8000872:	69bb      	ldr	r3, [r7, #24]
 8000874:	b29b      	uxth	r3, r3
 8000876:	4618      	mov	r0, r3
 8000878:	0080      	lsls	r0, r0, #2
 800087a:	4418      	add	r0, r3
 800087c:	0040      	lsls	r0, r0, #1
 800087e:	4403      	add	r3, r0
 8000880:	005b      	lsls	r3, r3, #1
 8000882:	b29b      	uxth	r3, r3
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	2301      	movs	r3, #1
 8000888:	68f8      	ldr	r0, [r7, #12]
 800088a:	f7ff fd85 	bl	8000398 <LCD_setAddrWindow>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	f000 80c1 	beq.w	8000a18 <LCD_drawBattery+0x1c8>
	if (!LCD_pushColorCopy(spi, color, 22*size)) return;
 8000896:	69bb      	ldr	r3, [r7, #24]
 8000898:	2216      	movs	r2, #22
 800089a:	fb03 f202 	mul.w	r2, r3, r2
 800089e:	88fb      	ldrh	r3, [r7, #6]
 80008a0:	4619      	mov	r1, r3
 80008a2:	68f8      	ldr	r0, [r7, #12]
 80008a4:	f7ff fe1d 	bl	80004e2 <LCD_pushColorCopy>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	f000 80b6 	beq.w	8000a1c <LCD_drawBattery+0x1cc>

	//right
	if(!LCD_setAddrWindow(spi, x + 100, y + 10, 1, 22*size)) return;
 80008b0:	897b      	ldrh	r3, [r7, #10]
 80008b2:	3364      	adds	r3, #100	; 0x64
 80008b4:	b299      	uxth	r1, r3
 80008b6:	893b      	ldrh	r3, [r7, #8]
 80008b8:	330a      	adds	r3, #10
 80008ba:	b29a      	uxth	r2, r3
 80008bc:	69bb      	ldr	r3, [r7, #24]
 80008be:	b29b      	uxth	r3, r3
 80008c0:	4618      	mov	r0, r3
 80008c2:	0080      	lsls	r0, r0, #2
 80008c4:	4418      	add	r0, r3
 80008c6:	0040      	lsls	r0, r0, #1
 80008c8:	4403      	add	r3, r0
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	b29b      	uxth	r3, r3
 80008ce:	9300      	str	r3, [sp, #0]
 80008d0:	2301      	movs	r3, #1
 80008d2:	68f8      	ldr	r0, [r7, #12]
 80008d4:	f7ff fd60 	bl	8000398 <LCD_setAddrWindow>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	f000 80a0 	beq.w	8000a20 <LCD_drawBattery+0x1d0>
	if (!LCD_pushColorCopy(spi, color, 22*size)) return;
 80008e0:	69bb      	ldr	r3, [r7, #24]
 80008e2:	2216      	movs	r2, #22
 80008e4:	fb03 f202 	mul.w	r2, r3, r2
 80008e8:	88fb      	ldrh	r3, [r7, #6]
 80008ea:	4619      	mov	r1, r3
 80008ec:	68f8      	ldr	r0, [r7, #12]
 80008ee:	f7ff fdf8 	bl	80004e2 <LCD_pushColorCopy>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	f000 8095 	beq.w	8000a24 <LCD_drawBattery+0x1d4>

	//top
	if(!LCD_setAddrWindow(spi, x, y + 10, 10*size, 1)) return;
 80008fa:	8979      	ldrh	r1, [r7, #10]
 80008fc:	893b      	ldrh	r3, [r7, #8]
 80008fe:	330a      	adds	r3, #10
 8000900:	b29a      	uxth	r2, r3
 8000902:	69bb      	ldr	r3, [r7, #24]
 8000904:	b29b      	uxth	r3, r3
 8000906:	4618      	mov	r0, r3
 8000908:	0080      	lsls	r0, r0, #2
 800090a:	4403      	add	r3, r0
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	b29b      	uxth	r3, r3
 8000910:	2001      	movs	r0, #1
 8000912:	9000      	str	r0, [sp, #0]
 8000914:	68f8      	ldr	r0, [r7, #12]
 8000916:	f7ff fd3f 	bl	8000398 <LCD_setAddrWindow>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	f000 8083 	beq.w	8000a28 <LCD_drawBattery+0x1d8>
	if (!LCD_pushColorCopy(spi, color, 10*size)) return;
 8000922:	69ba      	ldr	r2, [r7, #24]
 8000924:	4613      	mov	r3, r2
 8000926:	009b      	lsls	r3, r3, #2
 8000928:	4413      	add	r3, r2
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	461a      	mov	r2, r3
 800092e:	88fb      	ldrh	r3, [r7, #6]
 8000930:	4619      	mov	r1, r3
 8000932:	68f8      	ldr	r0, [r7, #12]
 8000934:	f7ff fdd5 	bl	80004e2 <LCD_pushColorCopy>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d076      	beq.n	8000a2c <LCD_drawBattery+0x1dc>

	//bottom
	if(!LCD_setAddrWindow(spi, x, y + 230, 10*size, 1)) return;
 800093e:	8979      	ldrh	r1, [r7, #10]
 8000940:	893b      	ldrh	r3, [r7, #8]
 8000942:	33e6      	adds	r3, #230	; 0xe6
 8000944:	b29a      	uxth	r2, r3
 8000946:	69bb      	ldr	r3, [r7, #24]
 8000948:	b29b      	uxth	r3, r3
 800094a:	4618      	mov	r0, r3
 800094c:	0080      	lsls	r0, r0, #2
 800094e:	4403      	add	r3, r0
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	b29b      	uxth	r3, r3
 8000954:	2001      	movs	r0, #1
 8000956:	9000      	str	r0, [sp, #0]
 8000958:	68f8      	ldr	r0, [r7, #12]
 800095a:	f7ff fd1d 	bl	8000398 <LCD_setAddrWindow>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d065      	beq.n	8000a30 <LCD_drawBattery+0x1e0>
	if (!LCD_pushColorCopy(spi, color, 10*size)) return;
 8000964:	69ba      	ldr	r2, [r7, #24]
 8000966:	4613      	mov	r3, r2
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	4413      	add	r3, r2
 800096c:	005b      	lsls	r3, r3, #1
 800096e:	461a      	mov	r2, r3
 8000970:	88fb      	ldrh	r3, [r7, #6]
 8000972:	4619      	mov	r1, r3
 8000974:	68f8      	ldr	r0, [r7, #12]
 8000976:	f7ff fdb4 	bl	80004e2 <LCD_pushColorCopy>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d059      	beq.n	8000a34 <LCD_drawBattery+0x1e4>

	//lil cap
	if(!LCD_setAddrWindow(spi, x + 35, y, 3*size, 1)) return;
 8000980:	897b      	ldrh	r3, [r7, #10]
 8000982:	3323      	adds	r3, #35	; 0x23
 8000984:	b299      	uxth	r1, r3
 8000986:	893a      	ldrh	r2, [r7, #8]
 8000988:	69bb      	ldr	r3, [r7, #24]
 800098a:	b29b      	uxth	r3, r3
 800098c:	4618      	mov	r0, r3
 800098e:	0040      	lsls	r0, r0, #1
 8000990:	4403      	add	r3, r0
 8000992:	b29b      	uxth	r3, r3
 8000994:	2001      	movs	r0, #1
 8000996:	9000      	str	r0, [sp, #0]
 8000998:	68f8      	ldr	r0, [r7, #12]
 800099a:	f7ff fcfd 	bl	8000398 <LCD_setAddrWindow>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d049      	beq.n	8000a38 <LCD_drawBattery+0x1e8>
	if (!LCD_pushColorCopy(spi, color, 3*size)) return;
 80009a4:	69ba      	ldr	r2, [r7, #24]
 80009a6:	4613      	mov	r3, r2
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	441a      	add	r2, r3
 80009ac:	88fb      	ldrh	r3, [r7, #6]
 80009ae:	4619      	mov	r1, r3
 80009b0:	68f8      	ldr	r0, [r7, #12]
 80009b2:	f7ff fd96 	bl	80004e2 <LCD_pushColorCopy>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d03f      	beq.n	8000a3c <LCD_drawBattery+0x1ec>

	if(!LCD_setAddrWindow(spi, x + 35, y, 1, size)) return;
 80009bc:	897b      	ldrh	r3, [r7, #10]
 80009be:	3323      	adds	r3, #35	; 0x23
 80009c0:	b299      	uxth	r1, r3
 80009c2:	893a      	ldrh	r2, [r7, #8]
 80009c4:	69bb      	ldr	r3, [r7, #24]
 80009c6:	b29b      	uxth	r3, r3
 80009c8:	9300      	str	r3, [sp, #0]
 80009ca:	2301      	movs	r3, #1
 80009cc:	68f8      	ldr	r0, [r7, #12]
 80009ce:	f7ff fce3 	bl	8000398 <LCD_setAddrWindow>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d033      	beq.n	8000a40 <LCD_drawBattery+0x1f0>
	if (!LCD_pushColorCopy(spi, color, size)) return;
 80009d8:	88fb      	ldrh	r3, [r7, #6]
 80009da:	69ba      	ldr	r2, [r7, #24]
 80009dc:	4619      	mov	r1, r3
 80009de:	68f8      	ldr	r0, [r7, #12]
 80009e0:	f7ff fd7f 	bl	80004e2 <LCD_pushColorCopy>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d02c      	beq.n	8000a44 <LCD_drawBattery+0x1f4>

	if(!LCD_setAddrWindow(spi, x + 65, y, 1, size)) return;
 80009ea:	897b      	ldrh	r3, [r7, #10]
 80009ec:	3341      	adds	r3, #65	; 0x41
 80009ee:	b299      	uxth	r1, r3
 80009f0:	893a      	ldrh	r2, [r7, #8]
 80009f2:	69bb      	ldr	r3, [r7, #24]
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	9300      	str	r3, [sp, #0]
 80009f8:	2301      	movs	r3, #1
 80009fa:	68f8      	ldr	r0, [r7, #12]
 80009fc:	f7ff fccc 	bl	8000398 <LCD_setAddrWindow>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d020      	beq.n	8000a48 <LCD_drawBattery+0x1f8>
	if (!LCD_pushColorCopy(spi, color, size)) return;
 8000a06:	88fb      	ldrh	r3, [r7, #6]
 8000a08:	69ba      	ldr	r2, [r7, #24]
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	68f8      	ldr	r0, [r7, #12]
 8000a0e:	f7ff fd68 	bl	80004e2 <LCD_pushColorCopy>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
	return;
 8000a16:	e018      	b.n	8000a4a <LCD_drawBattery+0x1fa>
	if(!LCD_setAddrWindow(spi, x, y + 10, 1, 22*size)) return;
 8000a18:	bf00      	nop
 8000a1a:	e016      	b.n	8000a4a <LCD_drawBattery+0x1fa>
	if (!LCD_pushColorCopy(spi, color, 22*size)) return;
 8000a1c:	bf00      	nop
 8000a1e:	e014      	b.n	8000a4a <LCD_drawBattery+0x1fa>
	if(!LCD_setAddrWindow(spi, x + 100, y + 10, 1, 22*size)) return;
 8000a20:	bf00      	nop
 8000a22:	e012      	b.n	8000a4a <LCD_drawBattery+0x1fa>
	if (!LCD_pushColorCopy(spi, color, 22*size)) return;
 8000a24:	bf00      	nop
 8000a26:	e010      	b.n	8000a4a <LCD_drawBattery+0x1fa>
	if(!LCD_setAddrWindow(spi, x, y + 10, 10*size, 1)) return;
 8000a28:	bf00      	nop
 8000a2a:	e00e      	b.n	8000a4a <LCD_drawBattery+0x1fa>
	if (!LCD_pushColorCopy(spi, color, 10*size)) return;
 8000a2c:	bf00      	nop
 8000a2e:	e00c      	b.n	8000a4a <LCD_drawBattery+0x1fa>
	if(!LCD_setAddrWindow(spi, x, y + 230, 10*size, 1)) return;
 8000a30:	bf00      	nop
 8000a32:	e00a      	b.n	8000a4a <LCD_drawBattery+0x1fa>
	if (!LCD_pushColorCopy(spi, color, 10*size)) return;
 8000a34:	bf00      	nop
 8000a36:	e008      	b.n	8000a4a <LCD_drawBattery+0x1fa>
	if(!LCD_setAddrWindow(spi, x + 35, y, 3*size, 1)) return;
 8000a38:	bf00      	nop
 8000a3a:	e006      	b.n	8000a4a <LCD_drawBattery+0x1fa>
	if (!LCD_pushColorCopy(spi, color, 3*size)) return;
 8000a3c:	bf00      	nop
 8000a3e:	e004      	b.n	8000a4a <LCD_drawBattery+0x1fa>
	if(!LCD_setAddrWindow(spi, x + 35, y, 1, size)) return;
 8000a40:	bf00      	nop
 8000a42:	e002      	b.n	8000a4a <LCD_drawBattery+0x1fa>
	if (!LCD_pushColorCopy(spi, color, size)) return;
 8000a44:	bf00      	nop
 8000a46:	e000      	b.n	8000a4a <LCD_drawBattery+0x1fa>
	if(!LCD_setAddrWindow(spi, x + 65, y, 1, size)) return;
 8000a48:	bf00      	nop
}
 8000a4a:	3710      	adds	r7, #16
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <LCD_drawFrame>:

void LCD_drawFrame(SPI_HandleTypeDef* spi, uint16_t color) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af02      	add	r7, sp, #8
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	460b      	mov	r3, r1
 8000a5a:	807b      	strh	r3, [r7, #2]
	//rows
	if(!LCD_setAddrWindow(spi, 0, 80, 320, 1)) return;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	9300      	str	r3, [sp, #0]
 8000a60:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000a64:	2250      	movs	r2, #80	; 0x50
 8000a66:	2100      	movs	r1, #0
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f7ff fc95 	bl	8000398 <LCD_setAddrWindow>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d04c      	beq.n	8000b0e <LCD_drawFrame+0xbe>
	if (!LCD_pushColorCopy(spi, color, 320)) return;
 8000a74:	887b      	ldrh	r3, [r7, #2]
 8000a76:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f7ff fd30 	bl	80004e2 <LCD_pushColorCopy>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d044      	beq.n	8000b12 <LCD_drawFrame+0xc2>

	if(!LCD_setAddrWindow(spi, 0, 160, 320, 1)) return;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	9300      	str	r3, [sp, #0]
 8000a8c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000a90:	22a0      	movs	r2, #160	; 0xa0
 8000a92:	2100      	movs	r1, #0
 8000a94:	6878      	ldr	r0, [r7, #4]
 8000a96:	f7ff fc7f 	bl	8000398 <LCD_setAddrWindow>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d03a      	beq.n	8000b16 <LCD_drawFrame+0xc6>
	if (!LCD_pushColorCopy(spi, color, 320)) return;
 8000aa0:	887b      	ldrh	r3, [r7, #2]
 8000aa2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f7ff fd1a 	bl	80004e2 <LCD_pushColorCopy>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d032      	beq.n	8000b1a <LCD_drawFrame+0xca>

	if(!LCD_setAddrWindow(spi, 0, 240, 320, 1)) return;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	9300      	str	r3, [sp, #0]
 8000ab8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000abc:	22f0      	movs	r2, #240	; 0xf0
 8000abe:	2100      	movs	r1, #0
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f7ff fc69 	bl	8000398 <LCD_setAddrWindow>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d028      	beq.n	8000b1e <LCD_drawFrame+0xce>
	if (!LCD_pushColorCopy(spi, color, 320)) return;
 8000acc:	887b      	ldrh	r3, [r7, #2]
 8000ace:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f7ff fd04 	bl	80004e2 <LCD_pushColorCopy>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d020      	beq.n	8000b22 <LCD_drawFrame+0xd2>

	//column
	if(!LCD_setAddrWindow(spi, 320, 0, 1, 320)) return;
 8000ae0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000ae4:	9300      	str	r3, [sp, #0]
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f7ff fc52 	bl	8000398 <LCD_setAddrWindow>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d015      	beq.n	8000b26 <LCD_drawFrame+0xd6>
	if (!LCD_pushColorCopy(spi, color, 320)) return;
 8000afa:	887b      	ldrh	r3, [r7, #2]
 8000afc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000b00:	4619      	mov	r1, r3
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	f7ff fced 	bl	80004e2 <LCD_pushColorCopy>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
	return;
 8000b0c:	e00c      	b.n	8000b28 <LCD_drawFrame+0xd8>
	if(!LCD_setAddrWindow(spi, 0, 80, 320, 1)) return;
 8000b0e:	bf00      	nop
 8000b10:	e00a      	b.n	8000b28 <LCD_drawFrame+0xd8>
	if (!LCD_pushColorCopy(spi, color, 320)) return;
 8000b12:	bf00      	nop
 8000b14:	e008      	b.n	8000b28 <LCD_drawFrame+0xd8>
	if(!LCD_setAddrWindow(spi, 0, 160, 320, 1)) return;
 8000b16:	bf00      	nop
 8000b18:	e006      	b.n	8000b28 <LCD_drawFrame+0xd8>
	if (!LCD_pushColorCopy(spi, color, 320)) return;
 8000b1a:	bf00      	nop
 8000b1c:	e004      	b.n	8000b28 <LCD_drawFrame+0xd8>
	if(!LCD_setAddrWindow(spi, 0, 240, 320, 1)) return;
 8000b1e:	bf00      	nop
 8000b20:	e002      	b.n	8000b28 <LCD_drawFrame+0xd8>
	if (!LCD_pushColorCopy(spi, color, 320)) return;
 8000b22:	bf00      	nop
 8000b24:	e000      	b.n	8000b28 <LCD_drawFrame+0xd8>
	if(!LCD_setAddrWindow(spi, 320, 0, 1, 320)) return;
 8000b26:	bf00      	nop
}
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <LCD_fillBattery>:

void LCD_fillBattery(SPI_HandleTypeDef* spi, int16_t x, int16_t y, uint32_t size, uint32_t level) {
 8000b2e:	b590      	push	{r4, r7, lr}
 8000b30:	b087      	sub	sp, #28
 8000b32:	af02      	add	r7, sp, #8
 8000b34:	60f8      	str	r0, [r7, #12]
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	460b      	mov	r3, r1
 8000b3a:	817b      	strh	r3, [r7, #10]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	813b      	strh	r3, [r7, #8]
	//include battery level adjustment and coloring
	LCD_writePixels(spi, HX8357_GREEN, x + 3, (y + 10) + 3, 10*size - 3, 22*size - 3);
 8000b40:	897b      	ldrh	r3, [r7, #10]
 8000b42:	3303      	adds	r3, #3
 8000b44:	b29b      	uxth	r3, r3
 8000b46:	b219      	sxth	r1, r3
 8000b48:	893b      	ldrh	r3, [r7, #8]
 8000b4a:	330d      	adds	r3, #13
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	b218      	sxth	r0, r3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	461a      	mov	r2, r3
 8000b56:	0092      	lsls	r2, r2, #2
 8000b58:	4413      	add	r3, r2
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	b29b      	uxth	r3, r3
 8000b5e:	3b03      	subs	r3, #3
 8000b60:	b29b      	uxth	r3, r3
 8000b62:	b21a      	sxth	r2, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	461c      	mov	r4, r3
 8000b6a:	00a4      	lsls	r4, r4, #2
 8000b6c:	441c      	add	r4, r3
 8000b6e:	0064      	lsls	r4, r4, #1
 8000b70:	4423      	add	r3, r4
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	b29b      	uxth	r3, r3
 8000b76:	3b03      	subs	r3, #3
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	b21b      	sxth	r3, r3
 8000b7c:	9301      	str	r3, [sp, #4]
 8000b7e:	9200      	str	r2, [sp, #0]
 8000b80:	4603      	mov	r3, r0
 8000b82:	460a      	mov	r2, r1
 8000b84:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8000b88:	68f8      	ldr	r0, [r7, #12]
 8000b8a:	f7ff fd17 	bl	80005bc <LCD_writePixels>
}
 8000b8e:	bf00      	nop
 8000b90:	3714      	adds	r7, #20
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd90      	pop	{r4, r7, pc}
	...

08000b98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b9e:	f000 fd26 	bl	80015ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ba2:	f000 f869 	bl	8000c78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ba6:	f000 f92d 	bl	8000e04 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000baa:	f000 f8ed 	bl	8000d88 <MX_SPI1_Init>
  MX_RTC_Init();
 8000bae:	f000 f8c3 	bl	8000d38 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  LCD_begin(&hspi1);
 8000bb2:	482f      	ldr	r0, [pc, #188]	; (8000c70 <main+0xd8>)
 8000bb4:	f7ff fb98 	bl	80002e8 <LCD_begin>
  LCD_writePixels(&hspi1,HX8357_WHITE,0,0,480,320);
 8000bb8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000bbc:	9301      	str	r3, [sp, #4]
 8000bbe:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000bc2:	9300      	str	r3, [sp, #0]
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000bcc:	4828      	ldr	r0, [pc, #160]	; (8000c70 <main+0xd8>)
 8000bce:	f7ff fcf5 	bl	80005bc <LCD_writePixels>
  LCD_drawBattery(&hspi1,350,70,HX8357_BLACK,10);
 8000bd2:	230a      	movs	r3, #10
 8000bd4:	9300      	str	r3, [sp, #0]
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	2246      	movs	r2, #70	; 0x46
 8000bda:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8000bde:	4824      	ldr	r0, [pc, #144]	; (8000c70 <main+0xd8>)
 8000be0:	f7ff fe36 	bl	8000850 <LCD_drawBattery>
  LCD_drawFrame(&hspi1,HX8357_BLACK);
 8000be4:	2100      	movs	r1, #0
 8000be6:	4822      	ldr	r0, [pc, #136]	; (8000c70 <main+0xd8>)
 8000be8:	f7ff ff32 	bl	8000a50 <LCD_drawFrame>


  char * word = "TADAMHESPEV";
 8000bec:	4b21      	ldr	r3, [pc, #132]	; (8000c74 <main+0xdc>)
 8000bee:	603b      	str	r3, [r7, #0]

  LCD_fillBattery(&hspi1,350,70,10,100);
 8000bf0:	2364      	movs	r3, #100	; 0x64
 8000bf2:	9300      	str	r3, [sp, #0]
 8000bf4:	230a      	movs	r3, #10
 8000bf6:	2246      	movs	r2, #70	; 0x46
 8000bf8:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8000bfc:	481c      	ldr	r0, [pc, #112]	; (8000c70 <main+0xd8>)
 8000bfe:	f7ff ff96 	bl	8000b2e <LCD_fillBattery>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for(int i = 0; i < 4; i++) {
 8000c02:	2300      	movs	r3, #0
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	e02f      	b.n	8000c68 <main+0xd0>
		  LCD_drawString(&hspi1,5,40 + 80*i,word,11,HX8357_BLACK,2);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	0092      	lsls	r2, r2, #2
 8000c10:	4413      	add	r3, r2
 8000c12:	011b      	lsls	r3, r3, #4
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	3328      	adds	r3, #40	; 0x28
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	b21a      	sxth	r2, r3
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	9302      	str	r3, [sp, #8]
 8000c20:	2300      	movs	r3, #0
 8000c22:	9301      	str	r3, [sp, #4]
 8000c24:	230b      	movs	r3, #11
 8000c26:	9300      	str	r3, [sp, #0]
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	2105      	movs	r1, #5
 8000c2c:	4810      	ldr	r0, [pc, #64]	; (8000c70 <main+0xd8>)
 8000c2e:	f7ff fdd9 	bl	80007e4 <LCD_drawString>
		  HAL_Delay(500);
 8000c32:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c36:	f000 fd13 	bl	8001660 <HAL_Delay>
		  LCD_writePixels(&hspi1,HX8357_WHITE,5,40+80*i,150,40);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	461a      	mov	r2, r3
 8000c40:	0092      	lsls	r2, r2, #2
 8000c42:	4413      	add	r3, r2
 8000c44:	011b      	lsls	r3, r3, #4
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	3328      	adds	r3, #40	; 0x28
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	b21b      	sxth	r3, r3
 8000c4e:	2228      	movs	r2, #40	; 0x28
 8000c50:	9201      	str	r2, [sp, #4]
 8000c52:	2296      	movs	r2, #150	; 0x96
 8000c54:	9200      	str	r2, [sp, #0]
 8000c56:	2205      	movs	r2, #5
 8000c58:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000c5c:	4804      	ldr	r0, [pc, #16]	; (8000c70 <main+0xd8>)
 8000c5e:	f7ff fcad 	bl	80005bc <LCD_writePixels>
	  for(int i = 0; i < 4; i++) {
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	3301      	adds	r3, #1
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2b03      	cmp	r3, #3
 8000c6c:	ddcc      	ble.n	8000c08 <main+0x70>
 8000c6e:	e7c8      	b.n	8000c02 <main+0x6a>
 8000c70:	200000b4 	.word	0x200000b4
 8000c74:	080048f0 	.word	0x080048f0

08000c78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b096      	sub	sp, #88	; 0x58
 8000c7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c7e:	f107 0314 	add.w	r3, r7, #20
 8000c82:	2244      	movs	r2, #68	; 0x44
 8000c84:	2100      	movs	r1, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f003 fdfa 	bl	8004880 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c8c:	463b      	mov	r3, r7
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
 8000c96:	60da      	str	r2, [r3, #12]
 8000c98:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c9a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c9e:	f000 ffbf 	bl	8001c20 <HAL_PWREx_ControlVoltageScaling>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ca8:	f000 fb18 	bl	80012dc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000cac:	f000 ff88 	bl	8001bc0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000cb0:	4b20      	ldr	r3, [pc, #128]	; (8000d34 <SystemClock_Config+0xbc>)
 8000cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000cb6:	4a1f      	ldr	r2, [pc, #124]	; (8000d34 <SystemClock_Config+0xbc>)
 8000cb8:	f023 0318 	bic.w	r3, r3, #24
 8000cbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000cc0:	2314      	movs	r3, #20
 8000cc2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000cd0:	2360      	movs	r3, #96	; 0x60
 8000cd2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 36;
 8000ce0:	2324      	movs	r3, #36	; 0x24
 8000ce2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cec:	2302      	movs	r3, #2
 8000cee:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f001 f847 	bl	8001d88 <HAL_RCC_OscConfig>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000d00:	f000 faec 	bl	80012dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d04:	230f      	movs	r3, #15
 8000d06:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d10:	2300      	movs	r3, #0
 8000d12:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d14:	2300      	movs	r3, #0
 8000d16:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d18:	463b      	mov	r3, r7
 8000d1a:	2103      	movs	r1, #3
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f001 fc4d 	bl	80025bc <HAL_RCC_ClockConfig>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000d28:	f000 fad8 	bl	80012dc <Error_Handler>
  }
}
 8000d2c:	bf00      	nop
 8000d2e:	3758      	adds	r7, #88	; 0x58
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40021000 	.word	0x40021000

08000d38 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d3c:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <MX_RTC_Init+0x48>)
 8000d3e:	4a11      	ldr	r2, [pc, #68]	; (8000d84 <MX_RTC_Init+0x4c>)
 8000d40:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000d42:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <MX_RTC_Init+0x48>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000d48:	4b0d      	ldr	r3, [pc, #52]	; (8000d80 <MX_RTC_Init+0x48>)
 8000d4a:	227f      	movs	r2, #127	; 0x7f
 8000d4c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <MX_RTC_Init+0x48>)
 8000d50:	22ff      	movs	r2, #255	; 0xff
 8000d52:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d54:	4b0a      	ldr	r3, [pc, #40]	; (8000d80 <MX_RTC_Init+0x48>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000d5a:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <MX_RTC_Init+0x48>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <MX_RTC_Init+0x48>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <MX_RTC_Init+0x48>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d6c:	4804      	ldr	r0, [pc, #16]	; (8000d80 <MX_RTC_Init+0x48>)
 8000d6e:	f002 fc17 	bl	80035a0 <HAL_RTC_Init>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000d78:	f000 fab0 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d7c:	bf00      	nop
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000090 	.word	0x20000090
 8000d84:	40002800 	.word	0x40002800

08000d88 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d8c:	4b1b      	ldr	r3, [pc, #108]	; (8000dfc <MX_SPI1_Init+0x74>)
 8000d8e:	4a1c      	ldr	r2, [pc, #112]	; (8000e00 <MX_SPI1_Init+0x78>)
 8000d90:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d92:	4b1a      	ldr	r3, [pc, #104]	; (8000dfc <MX_SPI1_Init+0x74>)
 8000d94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d98:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d9a:	4b18      	ldr	r3, [pc, #96]	; (8000dfc <MX_SPI1_Init+0x74>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000da0:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <MX_SPI1_Init+0x74>)
 8000da2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000da6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000da8:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <MX_SPI1_Init+0x74>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dae:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <MX_SPI1_Init+0x74>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000db4:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <MX_SPI1_Init+0x74>)
 8000db6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000dbc:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <MX_SPI1_Init+0x74>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <MX_SPI1_Init+0x74>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <MX_SPI1_Init+0x74>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dce:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <MX_SPI1_Init+0x74>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000dd4:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <MX_SPI1_Init+0x74>)
 8000dd6:	2207      	movs	r2, #7
 8000dd8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dda:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <MX_SPI1_Init+0x74>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <MX_SPI1_Init+0x74>)
 8000de2:	2208      	movs	r2, #8
 8000de4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000de6:	4805      	ldr	r0, [pc, #20]	; (8000dfc <MX_SPI1_Init+0x74>)
 8000de8:	f002 fcf8 	bl	80037dc <HAL_SPI_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000df2:	f000 fa73 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	200000b4 	.word	0x200000b4
 8000e00:	40013000 	.word	0x40013000

08000e04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08e      	sub	sp, #56	; 0x38
 8000e08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	609a      	str	r2, [r3, #8]
 8000e16:	60da      	str	r2, [r3, #12]
 8000e18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e1a:	4bb2      	ldr	r3, [pc, #712]	; (80010e4 <MX_GPIO_Init+0x2e0>)
 8000e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1e:	4ab1      	ldr	r2, [pc, #708]	; (80010e4 <MX_GPIO_Init+0x2e0>)
 8000e20:	f043 0310 	orr.w	r3, r3, #16
 8000e24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e26:	4baf      	ldr	r3, [pc, #700]	; (80010e4 <MX_GPIO_Init+0x2e0>)
 8000e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2a:	f003 0310 	and.w	r3, r3, #16
 8000e2e:	623b      	str	r3, [r7, #32]
 8000e30:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e32:	4bac      	ldr	r3, [pc, #688]	; (80010e4 <MX_GPIO_Init+0x2e0>)
 8000e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e36:	4aab      	ldr	r2, [pc, #684]	; (80010e4 <MX_GPIO_Init+0x2e0>)
 8000e38:	f043 0304 	orr.w	r3, r3, #4
 8000e3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e3e:	4ba9      	ldr	r3, [pc, #676]	; (80010e4 <MX_GPIO_Init+0x2e0>)
 8000e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e42:	f003 0304 	and.w	r3, r3, #4
 8000e46:	61fb      	str	r3, [r7, #28]
 8000e48:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e4a:	4ba6      	ldr	r3, [pc, #664]	; (80010e4 <MX_GPIO_Init+0x2e0>)
 8000e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4e:	4aa5      	ldr	r2, [pc, #660]	; (80010e4 <MX_GPIO_Init+0x2e0>)
 8000e50:	f043 0320 	orr.w	r3, r3, #32
 8000e54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e56:	4ba3      	ldr	r3, [pc, #652]	; (80010e4 <MX_GPIO_Init+0x2e0>)
 8000e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5a:	f003 0320 	and.w	r3, r3, #32
 8000e5e:	61bb      	str	r3, [r7, #24]
 8000e60:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e62:	4ba0      	ldr	r3, [pc, #640]	; (80010e4 <MX_GPIO_Init+0x2e0>)
 8000e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e66:	4a9f      	ldr	r2, [pc, #636]	; (80010e4 <MX_GPIO_Init+0x2e0>)
 8000e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e6e:	4b9d      	ldr	r3, [pc, #628]	; (80010e4 <MX_GPIO_Init+0x2e0>)
 8000e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e76:	617b      	str	r3, [r7, #20]
 8000e78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7a:	4b9a      	ldr	r3, [pc, #616]	; (80010e4 <MX_GPIO_Init+0x2e0>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7e:	4a99      	ldr	r2, [pc, #612]	; (80010e4 <MX_GPIO_Init+0x2e0>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e86:	4b97      	ldr	r3, [pc, #604]	; (80010e4 <MX_GPIO_Init+0x2e0>)
 8000e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e92:	4b94      	ldr	r3, [pc, #592]	; (80010e4 <MX_GPIO_Init+0x2e0>)
 8000e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e96:	4a93      	ldr	r2, [pc, #588]	; (80010e4 <MX_GPIO_Init+0x2e0>)
 8000e98:	f043 0302 	orr.w	r3, r3, #2
 8000e9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e9e:	4b91      	ldr	r3, [pc, #580]	; (80010e4 <MX_GPIO_Init+0x2e0>)
 8000ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea2:	f003 0302 	and.w	r3, r3, #2
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eaa:	4b8e      	ldr	r3, [pc, #568]	; (80010e4 <MX_GPIO_Init+0x2e0>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eae:	4a8d      	ldr	r2, [pc, #564]	; (80010e4 <MX_GPIO_Init+0x2e0>)
 8000eb0:	f043 0308 	orr.w	r3, r3, #8
 8000eb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eb6:	4b8b      	ldr	r3, [pc, #556]	; (80010e4 <MX_GPIO_Init+0x2e0>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eba:	f003 0308 	and.w	r3, r3, #8
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ec2:	4b88      	ldr	r3, [pc, #544]	; (80010e4 <MX_GPIO_Init+0x2e0>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec6:	4a87      	ldr	r2, [pc, #540]	; (80010e4 <MX_GPIO_Init+0x2e0>)
 8000ec8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ecc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ece:	4b85      	ldr	r3, [pc, #532]	; (80010e4 <MX_GPIO_Init+0x2e0>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000eda:	f000 ff45 	bl	8001d68 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000ee4:	4880      	ldr	r0, [pc, #512]	; (80010e8 <MX_GPIO_Init+0x2e4>)
 8000ee6:	f000 fe53 	bl	8001b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000eea:	230c      	movs	r3, #12
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000efa:	230d      	movs	r3, #13
 8000efc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000efe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f02:	4619      	mov	r1, r3
 8000f04:	4879      	ldr	r0, [pc, #484]	; (80010ec <MX_GPIO_Init+0x2e8>)
 8000f06:	f000 fcb1 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000f0a:	2307      	movs	r3, #7
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f0e:	2312      	movs	r3, #18
 8000f10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f16:	2303      	movs	r3, #3
 8000f18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f1a:	2304      	movs	r3, #4
 8000f1c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f22:	4619      	mov	r1, r3
 8000f24:	4870      	ldr	r0, [pc, #448]	; (80010e8 <MX_GPIO_Init+0x2e4>)
 8000f26:	f000 fca1 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f2a:	2380      	movs	r3, #128	; 0x80
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f36:	2300      	movs	r3, #0
 8000f38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000f3a:	230d      	movs	r3, #13
 8000f3c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f42:	4619      	mov	r1, r3
 8000f44:	4868      	ldr	r0, [pc, #416]	; (80010e8 <MX_GPIO_Init+0x2e4>)
 8000f46:	f000 fc91 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000f4a:	233f      	movs	r3, #63	; 0x3f
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f4e:	230b      	movs	r3, #11
 8000f50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4864      	ldr	r0, [pc, #400]	; (80010f0 <MX_GPIO_Init+0x2ec>)
 8000f5e:	f000 fc85 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f62:	2301      	movs	r3, #1
 8000f64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f66:	2302      	movs	r3, #2
 8000f68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f72:	2301      	movs	r3, #1
 8000f74:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f80:	f000 fc74 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8000f84:	230a      	movs	r3, #10
 8000f86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f88:	230b      	movs	r3, #11
 8000f8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f94:	4619      	mov	r1, r3
 8000f96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f9a:	f000 fc67 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000faa:	2300      	movs	r3, #0
 8000fac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	484e      	ldr	r0, [pc, #312]	; (80010f4 <MX_GPIO_Init+0x2f0>)
 8000fba:	f000 fc57 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000fc2:	230b      	movs	r3, #11
 8000fc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4848      	ldr	r0, [pc, #288]	; (80010f4 <MX_GPIO_Init+0x2f0>)
 8000fd2:	f000 fc4b 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000fd6:	2344      	movs	r3, #68	; 0x44
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4842      	ldr	r0, [pc, #264]	; (80010f4 <MX_GPIO_Init+0x2f0>)
 8000fea:	f000 fc3f 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF12 PF13 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000fee:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000ff2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001000:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001004:	4619      	mov	r1, r3
 8001006:	4838      	ldr	r0, [pc, #224]	; (80010e8 <MX_GPIO_Init+0x2e4>)
 8001008:	f000 fc30 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800100c:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001012:	2302      	movs	r3, #2
 8001014:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	2300      	movs	r3, #0
 800101c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800101e:	2301      	movs	r3, #1
 8001020:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001022:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001026:	4619      	mov	r1, r3
 8001028:	4830      	ldr	r0, [pc, #192]	; (80010ec <MX_GPIO_Init+0x2e8>)
 800102a:	f000 fc1f 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800102e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001032:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001034:	2302      	movs	r3, #2
 8001036:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103c:	2300      	movs	r3, #0
 800103e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8001040:	2303      	movs	r3, #3
 8001042:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001044:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001048:	4619      	mov	r1, r3
 800104a:	4828      	ldr	r0, [pc, #160]	; (80010ec <MX_GPIO_Init+0x2e8>)
 800104c:	f000 fc0e 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001050:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001056:	2302      	movs	r3, #2
 8001058:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105e:	2300      	movs	r3, #0
 8001060:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001062:	2301      	movs	r3, #1
 8001064:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001066:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800106a:	4619      	mov	r1, r3
 800106c:	4821      	ldr	r0, [pc, #132]	; (80010f4 <MX_GPIO_Init+0x2f0>)
 800106e:	f000 fbfd 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001072:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8001076:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001078:	2302      	movs	r3, #2
 800107a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001080:	2300      	movs	r3, #0
 8001082:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001084:	230d      	movs	r3, #13
 8001086:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001088:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800108c:	4619      	mov	r1, r3
 800108e:	4819      	ldr	r0, [pc, #100]	; (80010f4 <MX_GPIO_Init+0x2f0>)
 8001090:	f000 fbec 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001094:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109a:	2302      	movs	r3, #2
 800109c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a2:	2300      	movs	r3, #0
 80010a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80010a6:	230e      	movs	r3, #14
 80010a8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ae:	4619      	mov	r1, r3
 80010b0:	4810      	ldr	r0, [pc, #64]	; (80010f4 <MX_GPIO_Init+0x2f0>)
 80010b2:	f000 fbdb 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010bc:	2302      	movs	r3, #2
 80010be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c4:	2303      	movs	r3, #3
 80010c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010c8:	2307      	movs	r3, #7
 80010ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d0:	4619      	mov	r1, r3
 80010d2:	4809      	ldr	r0, [pc, #36]	; (80010f8 <MX_GPIO_Init+0x2f4>)
 80010d4:	f000 fbca 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80010d8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010de:	2302      	movs	r3, #2
 80010e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80010e2:	e00b      	b.n	80010fc <MX_GPIO_Init+0x2f8>
 80010e4:	40021000 	.word	0x40021000
 80010e8:	48001400 	.word	0x48001400
 80010ec:	48001000 	.word	0x48001000
 80010f0:	48000800 	.word	0x48000800
 80010f4:	48000400 	.word	0x48000400
 80010f8:	48000c00 	.word	0x48000c00
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001100:	2300      	movs	r3, #0
 8001102:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001104:	2302      	movs	r3, #2
 8001106:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001108:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800110c:	4619      	mov	r1, r3
 800110e:	4865      	ldr	r0, [pc, #404]	; (80012a4 <MX_GPIO_Init+0x4a0>)
 8001110:	f000 fbac 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001114:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001118:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111a:	2302      	movs	r3, #2
 800111c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001122:	2303      	movs	r3, #3
 8001124:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001126:	2308      	movs	r3, #8
 8001128:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800112a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800112e:	4619      	mov	r1, r3
 8001130:	485d      	ldr	r0, [pc, #372]	; (80012a8 <MX_GPIO_Init+0x4a4>)
 8001132:	f000 fb9b 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001136:	2340      	movs	r3, #64	; 0x40
 8001138:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113a:	2302      	movs	r3, #2
 800113c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001142:	2300      	movs	r3, #0
 8001144:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001146:	230d      	movs	r3, #13
 8001148:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800114a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114e:	4619      	mov	r1, r3
 8001150:	4856      	ldr	r0, [pc, #344]	; (80012ac <MX_GPIO_Init+0x4a8>)
 8001152:	f000 fb8b 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001156:	2380      	movs	r3, #128	; 0x80
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115a:	2302      	movs	r3, #2
 800115c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001162:	2300      	movs	r3, #0
 8001164:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001166:	2302      	movs	r3, #2
 8001168:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800116a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800116e:	4619      	mov	r1, r3
 8001170:	484e      	ldr	r0, [pc, #312]	; (80012ac <MX_GPIO_Init+0x4a8>)
 8001172:	f000 fb7b 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001176:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800117a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117c:	2302      	movs	r3, #2
 800117e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001184:	2303      	movs	r3, #3
 8001186:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001188:	230c      	movs	r3, #12
 800118a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800118c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001190:	4619      	mov	r1, r3
 8001192:	4846      	ldr	r0, [pc, #280]	; (80012ac <MX_GPIO_Init+0x4a8>)
 8001194:	f000 fb6a 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8001198:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119e:	2302      	movs	r3, #2
 80011a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a6:	2303      	movs	r3, #3
 80011a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80011aa:	230a      	movs	r3, #10
 80011ac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b2:	4619      	mov	r1, r3
 80011b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b8:	f000 fb58 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c2:	2300      	movs	r3, #0
 80011c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ce:	4619      	mov	r1, r3
 80011d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d4:	f000 fb4a 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011d8:	2301      	movs	r3, #1
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011dc:	2302      	movs	r3, #2
 80011de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e4:	2303      	movs	r3, #3
 80011e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80011e8:	2309      	movs	r3, #9
 80011ea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f0:	4619      	mov	r1, r3
 80011f2:	482c      	ldr	r0, [pc, #176]	; (80012a4 <MX_GPIO_Init+0x4a0>)
 80011f4:	f000 fb3a 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011f8:	2304      	movs	r3, #4
 80011fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fc:	2302      	movs	r3, #2
 80011fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001204:	2303      	movs	r3, #3
 8001206:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001208:	230c      	movs	r3, #12
 800120a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800120c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001210:	4619      	mov	r1, r3
 8001212:	4824      	ldr	r0, [pc, #144]	; (80012a4 <MX_GPIO_Init+0x4a0>)
 8001214:	f000 fb2a 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001218:	2378      	movs	r3, #120	; 0x78
 800121a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121c:	2302      	movs	r3, #2
 800121e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001224:	2303      	movs	r3, #3
 8001226:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001228:	2307      	movs	r3, #7
 800122a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800122c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001230:	4619      	mov	r1, r3
 8001232:	481c      	ldr	r0, [pc, #112]	; (80012a4 <MX_GPIO_Init+0x4a0>)
 8001234:	f000 fb1a 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001238:	2338      	movs	r3, #56	; 0x38
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123c:	2302      	movs	r3, #2
 800123e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001244:	2303      	movs	r3, #3
 8001246:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001248:	2306      	movs	r3, #6
 800124a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001250:	4619      	mov	r1, r3
 8001252:	4817      	ldr	r0, [pc, #92]	; (80012b0 <MX_GPIO_Init+0x4ac>)
 8001254:	f000 fb0a 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001258:	f44f 7340 	mov.w	r3, #768	; 0x300
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800125e:	2312      	movs	r3, #18
 8001260:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001266:	2303      	movs	r3, #3
 8001268:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800126a:	2304      	movs	r3, #4
 800126c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800126e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001272:	4619      	mov	r1, r3
 8001274:	480e      	ldr	r0, [pc, #56]	; (80012b0 <MX_GPIO_Init+0x4ac>)
 8001276:	f000 faf9 	bl	800186c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800127a:	2301      	movs	r3, #1
 800127c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127e:	2302      	movs	r3, #2
 8001280:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001286:	2300      	movs	r3, #0
 8001288:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800128a:	2302      	movs	r3, #2
 800128c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800128e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001292:	4619      	mov	r1, r3
 8001294:	4807      	ldr	r0, [pc, #28]	; (80012b4 <MX_GPIO_Init+0x4b0>)
 8001296:	f000 fae9 	bl	800186c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800129a:	bf00      	nop
 800129c:	3738      	adds	r7, #56	; 0x38
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	48000c00 	.word	0x48000c00
 80012a8:	48001800 	.word	0x48001800
 80012ac:	48000800 	.word	0x48000800
 80012b0:	48000400 	.word	0x48000400
 80012b4:	48001000 	.word	0x48001000

080012b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a04      	ldr	r2, [pc, #16]	; (80012d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d101      	bne.n	80012ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012ca:	f000 f9a9 	bl	8001620 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40000800 	.word	0x40000800

080012dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e0:	b672      	cpsid	i
}
 80012e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012e4:	e7fe      	b.n	80012e4 <Error_Handler+0x8>
	...

080012e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ee:	4b0f      	ldr	r3, [pc, #60]	; (800132c <HAL_MspInit+0x44>)
 80012f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012f2:	4a0e      	ldr	r2, [pc, #56]	; (800132c <HAL_MspInit+0x44>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	6613      	str	r3, [r2, #96]	; 0x60
 80012fa:	4b0c      	ldr	r3, [pc, #48]	; (800132c <HAL_MspInit+0x44>)
 80012fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001306:	4b09      	ldr	r3, [pc, #36]	; (800132c <HAL_MspInit+0x44>)
 8001308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800130a:	4a08      	ldr	r2, [pc, #32]	; (800132c <HAL_MspInit+0x44>)
 800130c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001310:	6593      	str	r3, [r2, #88]	; 0x58
 8001312:	4b06      	ldr	r3, [pc, #24]	; (800132c <HAL_MspInit+0x44>)
 8001314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131a:	603b      	str	r3, [r7, #0]
 800131c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40021000 	.word	0x40021000

08001330 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b0a8      	sub	sp, #160	; 0xa0
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001338:	f107 030c 	add.w	r3, r7, #12
 800133c:	2294      	movs	r2, #148	; 0x94
 800133e:	2100      	movs	r1, #0
 8001340:	4618      	mov	r0, r3
 8001342:	f003 fa9d 	bl	8004880 <memset>
  if(hrtc->Instance==RTC)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a10      	ldr	r2, [pc, #64]	; (800138c <HAL_RTC_MspInit+0x5c>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d118      	bne.n	8001382 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001350:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001354:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001356:	f44f 7380 	mov.w	r3, #256	; 0x100
 800135a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800135e:	f107 030c 	add.w	r3, r7, #12
 8001362:	4618      	mov	r0, r3
 8001364:	f001 fc04 	bl	8002b70 <HAL_RCCEx_PeriphCLKConfig>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800136e:	f7ff ffb5 	bl	80012dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001372:	4b07      	ldr	r3, [pc, #28]	; (8001390 <HAL_RTC_MspInit+0x60>)
 8001374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001378:	4a05      	ldr	r2, [pc, #20]	; (8001390 <HAL_RTC_MspInit+0x60>)
 800137a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800137e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001382:	bf00      	nop
 8001384:	37a0      	adds	r7, #160	; 0xa0
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40002800 	.word	0x40002800
 8001390:	40021000 	.word	0x40021000

08001394 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08a      	sub	sp, #40	; 0x28
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139c:	f107 0314 	add.w	r3, r7, #20
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a17      	ldr	r2, [pc, #92]	; (8001410 <HAL_SPI_MspInit+0x7c>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d128      	bne.n	8001408 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013b6:	4b17      	ldr	r3, [pc, #92]	; (8001414 <HAL_SPI_MspInit+0x80>)
 80013b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ba:	4a16      	ldr	r2, [pc, #88]	; (8001414 <HAL_SPI_MspInit+0x80>)
 80013bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013c0:	6613      	str	r3, [r2, #96]	; 0x60
 80013c2:	4b14      	ldr	r3, [pc, #80]	; (8001414 <HAL_SPI_MspInit+0x80>)
 80013c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013ca:	613b      	str	r3, [r7, #16]
 80013cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ce:	4b11      	ldr	r3, [pc, #68]	; (8001414 <HAL_SPI_MspInit+0x80>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d2:	4a10      	ldr	r2, [pc, #64]	; (8001414 <HAL_SPI_MspInit+0x80>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013da:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <HAL_SPI_MspInit+0x80>)
 80013dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80013e6:	23f0      	movs	r3, #240	; 0xf0
 80013e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ea:	2302      	movs	r3, #2
 80013ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f2:	2303      	movs	r3, #3
 80013f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013f6:	2305      	movs	r3, #5
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fa:	f107 0314 	add.w	r3, r7, #20
 80013fe:	4619      	mov	r1, r3
 8001400:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001404:	f000 fa32 	bl	800186c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001408:	bf00      	nop
 800140a:	3728      	adds	r7, #40	; 0x28
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40013000 	.word	0x40013000
 8001414:	40021000 	.word	0x40021000

08001418 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08e      	sub	sp, #56	; 0x38
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001420:	2300      	movs	r3, #0
 8001422:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001426:	4b34      	ldr	r3, [pc, #208]	; (80014f8 <HAL_InitTick+0xe0>)
 8001428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800142a:	4a33      	ldr	r2, [pc, #204]	; (80014f8 <HAL_InitTick+0xe0>)
 800142c:	f043 0304 	orr.w	r3, r3, #4
 8001430:	6593      	str	r3, [r2, #88]	; 0x58
 8001432:	4b31      	ldr	r3, [pc, #196]	; (80014f8 <HAL_InitTick+0xe0>)
 8001434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001436:	f003 0304 	and.w	r3, r3, #4
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800143e:	f107 0210 	add.w	r2, r7, #16
 8001442:	f107 0314 	add.w	r3, r7, #20
 8001446:	4611      	mov	r1, r2
 8001448:	4618      	mov	r0, r3
 800144a:	f001 fa9f 	bl	800298c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800144e:	6a3b      	ldr	r3, [r7, #32]
 8001450:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001454:	2b00      	cmp	r3, #0
 8001456:	d103      	bne.n	8001460 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001458:	f001 fa82 	bl	8002960 <HAL_RCC_GetPCLK1Freq>
 800145c:	6378      	str	r0, [r7, #52]	; 0x34
 800145e:	e004      	b.n	800146a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001460:	f001 fa7e 	bl	8002960 <HAL_RCC_GetPCLK1Freq>
 8001464:	4603      	mov	r3, r0
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800146a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800146c:	4a23      	ldr	r2, [pc, #140]	; (80014fc <HAL_InitTick+0xe4>)
 800146e:	fba2 2303 	umull	r2, r3, r2, r3
 8001472:	0c9b      	lsrs	r3, r3, #18
 8001474:	3b01      	subs	r3, #1
 8001476:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001478:	4b21      	ldr	r3, [pc, #132]	; (8001500 <HAL_InitTick+0xe8>)
 800147a:	4a22      	ldr	r2, [pc, #136]	; (8001504 <HAL_InitTick+0xec>)
 800147c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800147e:	4b20      	ldr	r3, [pc, #128]	; (8001500 <HAL_InitTick+0xe8>)
 8001480:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001484:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001486:	4a1e      	ldr	r2, [pc, #120]	; (8001500 <HAL_InitTick+0xe8>)
 8001488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800148a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800148c:	4b1c      	ldr	r3, [pc, #112]	; (8001500 <HAL_InitTick+0xe8>)
 800148e:	2200      	movs	r2, #0
 8001490:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001492:	4b1b      	ldr	r3, [pc, #108]	; (8001500 <HAL_InitTick+0xe8>)
 8001494:	2200      	movs	r2, #0
 8001496:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001498:	4b19      	ldr	r3, [pc, #100]	; (8001500 <HAL_InitTick+0xe8>)
 800149a:	2200      	movs	r2, #0
 800149c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800149e:	4818      	ldr	r0, [pc, #96]	; (8001500 <HAL_InitTick+0xe8>)
 80014a0:	f002 ff3a 	bl	8004318 <HAL_TIM_Base_Init>
 80014a4:	4603      	mov	r3, r0
 80014a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80014aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d11b      	bne.n	80014ea <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80014b2:	4813      	ldr	r0, [pc, #76]	; (8001500 <HAL_InitTick+0xe8>)
 80014b4:	f002 ff92 	bl	80043dc <HAL_TIM_Base_Start_IT>
 80014b8:	4603      	mov	r3, r0
 80014ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80014be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d111      	bne.n	80014ea <HAL_InitTick+0xd2>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80014c6:	201e      	movs	r0, #30
 80014c8:	f000 f9c2 	bl	8001850 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b0f      	cmp	r3, #15
 80014d0:	d808      	bhi.n	80014e4 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80014d2:	2200      	movs	r2, #0
 80014d4:	6879      	ldr	r1, [r7, #4]
 80014d6:	201e      	movs	r0, #30
 80014d8:	f000 f99e 	bl	8001818 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014dc:	4a0a      	ldr	r2, [pc, #40]	; (8001508 <HAL_InitTick+0xf0>)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6013      	str	r3, [r2, #0]
 80014e2:	e002      	b.n	80014ea <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80014ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3738      	adds	r7, #56	; 0x38
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40021000 	.word	0x40021000
 80014fc:	431bde83 	.word	0x431bde83
 8001500:	20000118 	.word	0x20000118
 8001504:	40000800 	.word	0x40000800
 8001508:	2000006c 	.word	0x2000006c

0800150c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001510:	e7fe      	b.n	8001510 <NMI_Handler+0x4>

08001512 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001516:	e7fe      	b.n	8001516 <HardFault_Handler+0x4>

08001518 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800151c:	e7fe      	b.n	800151c <MemManage_Handler+0x4>

0800151e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001522:	e7fe      	b.n	8001522 <BusFault_Handler+0x4>

08001524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001528:	e7fe      	b.n	8001528 <UsageFault_Handler+0x4>

0800152a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr

08001546 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
	...

08001564 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001568:	4802      	ldr	r0, [pc, #8]	; (8001574 <TIM4_IRQHandler+0x10>)
 800156a:	f002 ffa7 	bl	80044bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000118 	.word	0x20000118

08001578 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800157c:	4b06      	ldr	r3, [pc, #24]	; (8001598 <SystemInit+0x20>)
 800157e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001582:	4a05      	ldr	r2, [pc, #20]	; (8001598 <SystemInit+0x20>)
 8001584:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001588:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800159c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015a0:	f7ff ffea 	bl	8001578 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015a4:	480c      	ldr	r0, [pc, #48]	; (80015d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80015a6:	490d      	ldr	r1, [pc, #52]	; (80015dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80015a8:	4a0d      	ldr	r2, [pc, #52]	; (80015e0 <LoopForever+0xe>)
  movs r3, #0
 80015aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015ac:	e002      	b.n	80015b4 <LoopCopyDataInit>

080015ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015b2:	3304      	adds	r3, #4

080015b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015b8:	d3f9      	bcc.n	80015ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ba:	4a0a      	ldr	r2, [pc, #40]	; (80015e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015bc:	4c0a      	ldr	r4, [pc, #40]	; (80015e8 <LoopForever+0x16>)
  movs r3, #0
 80015be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015c0:	e001      	b.n	80015c6 <LoopFillZerobss>

080015c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015c4:	3204      	adds	r2, #4

080015c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015c8:	d3fb      	bcc.n	80015c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015ca:	f003 f961 	bl	8004890 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015ce:	f7ff fae3 	bl	8000b98 <main>

080015d2 <LoopForever>:

LoopForever:
    b LoopForever
 80015d2:	e7fe      	b.n	80015d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80015d4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80015d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015dc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80015e0:	08004e4c 	.word	0x08004e4c
  ldr r2, =_sbss
 80015e4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80015e8:	20000168 	.word	0x20000168

080015ec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015ec:	e7fe      	b.n	80015ec <ADC1_IRQHandler>

080015ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b082      	sub	sp, #8
 80015f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015f4:	2300      	movs	r3, #0
 80015f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015f8:	2003      	movs	r0, #3
 80015fa:	f000 f902 	bl	8001802 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015fe:	200f      	movs	r0, #15
 8001600:	f7ff ff0a 	bl	8001418 <HAL_InitTick>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d002      	beq.n	8001610 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	71fb      	strb	r3, [r7, #7]
 800160e:	e001      	b.n	8001614 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001610:	f7ff fe6a 	bl	80012e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001614:	79fb      	ldrb	r3, [r7, #7]
}
 8001616:	4618      	mov	r0, r3
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
	...

08001620 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <HAL_IncTick+0x20>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	461a      	mov	r2, r3
 800162a:	4b06      	ldr	r3, [pc, #24]	; (8001644 <HAL_IncTick+0x24>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4413      	add	r3, r2
 8001630:	4a04      	ldr	r2, [pc, #16]	; (8001644 <HAL_IncTick+0x24>)
 8001632:	6013      	str	r3, [r2, #0]
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	20000070 	.word	0x20000070
 8001644:	20000164 	.word	0x20000164

08001648 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  return uwTick;
 800164c:	4b03      	ldr	r3, [pc, #12]	; (800165c <HAL_GetTick+0x14>)
 800164e:	681b      	ldr	r3, [r3, #0]
}
 8001650:	4618      	mov	r0, r3
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	20000164 	.word	0x20000164

08001660 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001668:	f7ff ffee 	bl	8001648 <HAL_GetTick>
 800166c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001678:	d005      	beq.n	8001686 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800167a:	4b0a      	ldr	r3, [pc, #40]	; (80016a4 <HAL_Delay+0x44>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	461a      	mov	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	4413      	add	r3, r2
 8001684:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001686:	bf00      	nop
 8001688:	f7ff ffde 	bl	8001648 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	429a      	cmp	r2, r3
 8001696:	d8f7      	bhi.n	8001688 <HAL_Delay+0x28>
  {
  }
}
 8001698:	bf00      	nop
 800169a:	bf00      	nop
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000070 	.word	0x20000070

080016a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b8:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <__NVIC_SetPriorityGrouping+0x44>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016be:	68ba      	ldr	r2, [r7, #8]
 80016c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016c4:	4013      	ands	r3, r2
 80016c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016da:	4a04      	ldr	r2, [pc, #16]	; (80016ec <__NVIC_SetPriorityGrouping+0x44>)
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	60d3      	str	r3, [r2, #12]
}
 80016e0:	bf00      	nop
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f4:	4b04      	ldr	r3, [pc, #16]	; (8001708 <__NVIC_GetPriorityGrouping+0x18>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	0a1b      	lsrs	r3, r3, #8
 80016fa:	f003 0307 	and.w	r3, r3, #7
}
 80016fe:	4618      	mov	r0, r3
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171a:	2b00      	cmp	r3, #0
 800171c:	db0b      	blt.n	8001736 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	f003 021f 	and.w	r2, r3, #31
 8001724:	4907      	ldr	r1, [pc, #28]	; (8001744 <__NVIC_EnableIRQ+0x38>)
 8001726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172a:	095b      	lsrs	r3, r3, #5
 800172c:	2001      	movs	r0, #1
 800172e:	fa00 f202 	lsl.w	r2, r0, r2
 8001732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	e000e100 	.word	0xe000e100

08001748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	6039      	str	r1, [r7, #0]
 8001752:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001758:	2b00      	cmp	r3, #0
 800175a:	db0a      	blt.n	8001772 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	b2da      	uxtb	r2, r3
 8001760:	490c      	ldr	r1, [pc, #48]	; (8001794 <__NVIC_SetPriority+0x4c>)
 8001762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001766:	0112      	lsls	r2, r2, #4
 8001768:	b2d2      	uxtb	r2, r2
 800176a:	440b      	add	r3, r1
 800176c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001770:	e00a      	b.n	8001788 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	b2da      	uxtb	r2, r3
 8001776:	4908      	ldr	r1, [pc, #32]	; (8001798 <__NVIC_SetPriority+0x50>)
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	f003 030f 	and.w	r3, r3, #15
 800177e:	3b04      	subs	r3, #4
 8001780:	0112      	lsls	r2, r2, #4
 8001782:	b2d2      	uxtb	r2, r2
 8001784:	440b      	add	r3, r1
 8001786:	761a      	strb	r2, [r3, #24]
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	e000e100 	.word	0xe000e100
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800179c:	b480      	push	{r7}
 800179e:	b089      	sub	sp, #36	; 0x24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	f1c3 0307 	rsb	r3, r3, #7
 80017b6:	2b04      	cmp	r3, #4
 80017b8:	bf28      	it	cs
 80017ba:	2304      	movcs	r3, #4
 80017bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	3304      	adds	r3, #4
 80017c2:	2b06      	cmp	r3, #6
 80017c4:	d902      	bls.n	80017cc <NVIC_EncodePriority+0x30>
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	3b03      	subs	r3, #3
 80017ca:	e000      	b.n	80017ce <NVIC_EncodePriority+0x32>
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d0:	f04f 32ff 	mov.w	r2, #4294967295
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43da      	mvns	r2, r3
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	401a      	ands	r2, r3
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e4:	f04f 31ff 	mov.w	r1, #4294967295
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	fa01 f303 	lsl.w	r3, r1, r3
 80017ee:	43d9      	mvns	r1, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f4:	4313      	orrs	r3, r2
         );
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3724      	adds	r7, #36	; 0x24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b082      	sub	sp, #8
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f7ff ff4c 	bl	80016a8 <__NVIC_SetPriorityGrouping>
}
 8001810:	bf00      	nop
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
 8001824:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800182a:	f7ff ff61 	bl	80016f0 <__NVIC_GetPriorityGrouping>
 800182e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	68b9      	ldr	r1, [r7, #8]
 8001834:	6978      	ldr	r0, [r7, #20]
 8001836:	f7ff ffb1 	bl	800179c <NVIC_EncodePriority>
 800183a:	4602      	mov	r2, r0
 800183c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001840:	4611      	mov	r1, r2
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff ff80 	bl	8001748 <__NVIC_SetPriority>
}
 8001848:	bf00      	nop
 800184a:	3718      	adds	r7, #24
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff ff54 	bl	800170c <__NVIC_EnableIRQ>
}
 8001864:	bf00      	nop
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800186c:	b480      	push	{r7}
 800186e:	b087      	sub	sp, #28
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001876:	2300      	movs	r3, #0
 8001878:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800187a:	e166      	b.n	8001b4a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	2101      	movs	r1, #1
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	fa01 f303 	lsl.w	r3, r1, r3
 8001888:	4013      	ands	r3, r2
 800188a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2b00      	cmp	r3, #0
 8001890:	f000 8158 	beq.w	8001b44 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f003 0303 	and.w	r3, r3, #3
 800189c:	2b01      	cmp	r3, #1
 800189e:	d005      	beq.n	80018ac <HAL_GPIO_Init+0x40>
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f003 0303 	and.w	r3, r3, #3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d130      	bne.n	800190e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	2203      	movs	r2, #3
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	43db      	mvns	r3, r3
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	4013      	ands	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	68da      	ldr	r2, [r3, #12]
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018e2:	2201      	movs	r2, #1
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43db      	mvns	r3, r3
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	4013      	ands	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	091b      	lsrs	r3, r3, #4
 80018f8:	f003 0201 	and.w	r2, r3, #1
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	4313      	orrs	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f003 0303 	and.w	r3, r3, #3
 8001916:	2b03      	cmp	r3, #3
 8001918:	d017      	beq.n	800194a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	2203      	movs	r2, #3
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	43db      	mvns	r3, r3
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	4013      	ands	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	689a      	ldr	r2, [r3, #8]
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	4313      	orrs	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f003 0303 	and.w	r3, r3, #3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d123      	bne.n	800199e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	08da      	lsrs	r2, r3, #3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	3208      	adds	r2, #8
 800195e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001962:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	220f      	movs	r2, #15
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43db      	mvns	r3, r3
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	4013      	ands	r3, r2
 8001978:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	691a      	ldr	r2, [r3, #16]
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	4313      	orrs	r3, r2
 800198e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	08da      	lsrs	r2, r3, #3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3208      	adds	r2, #8
 8001998:	6939      	ldr	r1, [r7, #16]
 800199a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	2203      	movs	r2, #3
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	43db      	mvns	r3, r3
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	4013      	ands	r3, r2
 80019b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f003 0203 	and.w	r2, r3, #3
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f000 80b2 	beq.w	8001b44 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019e0:	4b61      	ldr	r3, [pc, #388]	; (8001b68 <HAL_GPIO_Init+0x2fc>)
 80019e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019e4:	4a60      	ldr	r2, [pc, #384]	; (8001b68 <HAL_GPIO_Init+0x2fc>)
 80019e6:	f043 0301 	orr.w	r3, r3, #1
 80019ea:	6613      	str	r3, [r2, #96]	; 0x60
 80019ec:	4b5e      	ldr	r3, [pc, #376]	; (8001b68 <HAL_GPIO_Init+0x2fc>)
 80019ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019f0:	f003 0301 	and.w	r3, r3, #1
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019f8:	4a5c      	ldr	r2, [pc, #368]	; (8001b6c <HAL_GPIO_Init+0x300>)
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	089b      	lsrs	r3, r3, #2
 80019fe:	3302      	adds	r3, #2
 8001a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	f003 0303 	and.w	r3, r3, #3
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	220f      	movs	r2, #15
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	43db      	mvns	r3, r3
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a22:	d02b      	beq.n	8001a7c <HAL_GPIO_Init+0x210>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4a52      	ldr	r2, [pc, #328]	; (8001b70 <HAL_GPIO_Init+0x304>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d025      	beq.n	8001a78 <HAL_GPIO_Init+0x20c>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a51      	ldr	r2, [pc, #324]	; (8001b74 <HAL_GPIO_Init+0x308>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d01f      	beq.n	8001a74 <HAL_GPIO_Init+0x208>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4a50      	ldr	r2, [pc, #320]	; (8001b78 <HAL_GPIO_Init+0x30c>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d019      	beq.n	8001a70 <HAL_GPIO_Init+0x204>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a4f      	ldr	r2, [pc, #316]	; (8001b7c <HAL_GPIO_Init+0x310>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d013      	beq.n	8001a6c <HAL_GPIO_Init+0x200>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a4e      	ldr	r2, [pc, #312]	; (8001b80 <HAL_GPIO_Init+0x314>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d00d      	beq.n	8001a68 <HAL_GPIO_Init+0x1fc>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4a4d      	ldr	r2, [pc, #308]	; (8001b84 <HAL_GPIO_Init+0x318>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d007      	beq.n	8001a64 <HAL_GPIO_Init+0x1f8>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4a4c      	ldr	r2, [pc, #304]	; (8001b88 <HAL_GPIO_Init+0x31c>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d101      	bne.n	8001a60 <HAL_GPIO_Init+0x1f4>
 8001a5c:	2307      	movs	r3, #7
 8001a5e:	e00e      	b.n	8001a7e <HAL_GPIO_Init+0x212>
 8001a60:	2308      	movs	r3, #8
 8001a62:	e00c      	b.n	8001a7e <HAL_GPIO_Init+0x212>
 8001a64:	2306      	movs	r3, #6
 8001a66:	e00a      	b.n	8001a7e <HAL_GPIO_Init+0x212>
 8001a68:	2305      	movs	r3, #5
 8001a6a:	e008      	b.n	8001a7e <HAL_GPIO_Init+0x212>
 8001a6c:	2304      	movs	r3, #4
 8001a6e:	e006      	b.n	8001a7e <HAL_GPIO_Init+0x212>
 8001a70:	2303      	movs	r3, #3
 8001a72:	e004      	b.n	8001a7e <HAL_GPIO_Init+0x212>
 8001a74:	2302      	movs	r3, #2
 8001a76:	e002      	b.n	8001a7e <HAL_GPIO_Init+0x212>
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e000      	b.n	8001a7e <HAL_GPIO_Init+0x212>
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	697a      	ldr	r2, [r7, #20]
 8001a80:	f002 0203 	and.w	r2, r2, #3
 8001a84:	0092      	lsls	r2, r2, #2
 8001a86:	4093      	lsls	r3, r2
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a8e:	4937      	ldr	r1, [pc, #220]	; (8001b6c <HAL_GPIO_Init+0x300>)
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	089b      	lsrs	r3, r3, #2
 8001a94:	3302      	adds	r3, #2
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a9c:	4b3b      	ldr	r3, [pc, #236]	; (8001b8c <HAL_GPIO_Init+0x320>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d003      	beq.n	8001ac0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ac0:	4a32      	ldr	r2, [pc, #200]	; (8001b8c <HAL_GPIO_Init+0x320>)
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ac6:	4b31      	ldr	r3, [pc, #196]	; (8001b8c <HAL_GPIO_Init+0x320>)
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d003      	beq.n	8001aea <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001aea:	4a28      	ldr	r2, [pc, #160]	; (8001b8c <HAL_GPIO_Init+0x320>)
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001af0:	4b26      	ldr	r3, [pc, #152]	; (8001b8c <HAL_GPIO_Init+0x320>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	43db      	mvns	r3, r3
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	4013      	ands	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d003      	beq.n	8001b14 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b14:	4a1d      	ldr	r2, [pc, #116]	; (8001b8c <HAL_GPIO_Init+0x320>)
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b1a:	4b1c      	ldr	r3, [pc, #112]	; (8001b8c <HAL_GPIO_Init+0x320>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	43db      	mvns	r3, r3
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	4013      	ands	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d003      	beq.n	8001b3e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b3e:	4a13      	ldr	r2, [pc, #76]	; (8001b8c <HAL_GPIO_Init+0x320>)
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	3301      	adds	r3, #1
 8001b48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	fa22 f303 	lsr.w	r3, r2, r3
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	f47f ae91 	bne.w	800187c <HAL_GPIO_Init+0x10>
  }
}
 8001b5a:	bf00      	nop
 8001b5c:	bf00      	nop
 8001b5e:	371c      	adds	r7, #28
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	40010000 	.word	0x40010000
 8001b70:	48000400 	.word	0x48000400
 8001b74:	48000800 	.word	0x48000800
 8001b78:	48000c00 	.word	0x48000c00
 8001b7c:	48001000 	.word	0x48001000
 8001b80:	48001400 	.word	0x48001400
 8001b84:	48001800 	.word	0x48001800
 8001b88:	48001c00 	.word	0x48001c00
 8001b8c:	40010400 	.word	0x40010400

08001b90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	460b      	mov	r3, r1
 8001b9a:	807b      	strh	r3, [r7, #2]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ba0:	787b      	ldrb	r3, [r7, #1]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ba6:	887a      	ldrh	r2, [r7, #2]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bac:	e002      	b.n	8001bb4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bae:	887a      	ldrh	r2, [r7, #2]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bc4:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a04      	ldr	r2, [pc, #16]	; (8001bdc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001bca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bce:	6013      	str	r3, [r2, #0]
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40007000 	.word	0x40007000

08001be0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001be4:	4b0d      	ldr	r3, [pc, #52]	; (8001c1c <HAL_PWREx_GetVoltageRange+0x3c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bf0:	d102      	bne.n	8001bf8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001bf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bf6:	e00b      	b.n	8001c10 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001bf8:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <HAL_PWREx_GetVoltageRange+0x3c>)
 8001bfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c06:	d102      	bne.n	8001c0e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001c08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c0c:	e000      	b.n	8001c10 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001c0e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	40007000 	.word	0x40007000

08001c20 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d141      	bne.n	8001cb2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c2e:	4b4b      	ldr	r3, [pc, #300]	; (8001d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c3a:	d131      	bne.n	8001ca0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c3c:	4b47      	ldr	r3, [pc, #284]	; (8001d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c42:	4a46      	ldr	r2, [pc, #280]	; (8001d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c48:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c4c:	4b43      	ldr	r3, [pc, #268]	; (8001d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c54:	4a41      	ldr	r2, [pc, #260]	; (8001d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c5a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001c5c:	4b40      	ldr	r3, [pc, #256]	; (8001d60 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2232      	movs	r2, #50	; 0x32
 8001c62:	fb02 f303 	mul.w	r3, r2, r3
 8001c66:	4a3f      	ldr	r2, [pc, #252]	; (8001d64 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c68:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6c:	0c9b      	lsrs	r3, r3, #18
 8001c6e:	3301      	adds	r3, #1
 8001c70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c72:	e002      	b.n	8001c7a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	3b01      	subs	r3, #1
 8001c78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c7a:	4b38      	ldr	r3, [pc, #224]	; (8001d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c86:	d102      	bne.n	8001c8e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1f2      	bne.n	8001c74 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c8e:	4b33      	ldr	r3, [pc, #204]	; (8001d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c9a:	d158      	bne.n	8001d4e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e057      	b.n	8001d50 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ca0:	4b2e      	ldr	r3, [pc, #184]	; (8001d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ca6:	4a2d      	ldr	r2, [pc, #180]	; (8001d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ca8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001cb0:	e04d      	b.n	8001d4e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cb8:	d141      	bne.n	8001d3e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001cba:	4b28      	ldr	r3, [pc, #160]	; (8001d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001cc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cc6:	d131      	bne.n	8001d2c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001cc8:	4b24      	ldr	r3, [pc, #144]	; (8001d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cce:	4a23      	ldr	r2, [pc, #140]	; (8001d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cd8:	4b20      	ldr	r3, [pc, #128]	; (8001d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ce0:	4a1e      	ldr	r2, [pc, #120]	; (8001d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ce2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ce6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001ce8:	4b1d      	ldr	r3, [pc, #116]	; (8001d60 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2232      	movs	r2, #50	; 0x32
 8001cee:	fb02 f303 	mul.w	r3, r2, r3
 8001cf2:	4a1c      	ldr	r2, [pc, #112]	; (8001d64 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf8:	0c9b      	lsrs	r3, r3, #18
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cfe:	e002      	b.n	8001d06 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	3b01      	subs	r3, #1
 8001d04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d06:	4b15      	ldr	r3, [pc, #84]	; (8001d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d08:	695b      	ldr	r3, [r3, #20]
 8001d0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d12:	d102      	bne.n	8001d1a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1f2      	bne.n	8001d00 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d1a:	4b10      	ldr	r3, [pc, #64]	; (8001d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d26:	d112      	bne.n	8001d4e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e011      	b.n	8001d50 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d2c:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d32:	4a0a      	ldr	r2, [pc, #40]	; (8001d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001d3c:	e007      	b.n	8001d4e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d3e:	4b07      	ldr	r3, [pc, #28]	; (8001d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d46:	4a05      	ldr	r2, [pc, #20]	; (8001d5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d4c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3714      	adds	r7, #20
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	40007000 	.word	0x40007000
 8001d60:	20000068 	.word	0x20000068
 8001d64:	431bde83 	.word	0x431bde83

08001d68 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001d6c:	4b05      	ldr	r3, [pc, #20]	; (8001d84 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	4a04      	ldr	r2, [pc, #16]	; (8001d84 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001d72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d76:	6053      	str	r3, [r2, #4]
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	40007000 	.word	0x40007000

08001d88 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b088      	sub	sp, #32
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d102      	bne.n	8001d9c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	f000 bc08 	b.w	80025ac <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d9c:	4b96      	ldr	r3, [pc, #600]	; (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f003 030c 	and.w	r3, r3, #12
 8001da4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001da6:	4b94      	ldr	r3, [pc, #592]	; (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0310 	and.w	r3, r3, #16
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f000 80e4 	beq.w	8001f86 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d007      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x4c>
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	2b0c      	cmp	r3, #12
 8001dc8:	f040 808b 	bne.w	8001ee2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	f040 8087 	bne.w	8001ee2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001dd4:	4b88      	ldr	r3, [pc, #544]	; (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d005      	beq.n	8001dec <HAL_RCC_OscConfig+0x64>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e3df      	b.n	80025ac <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a1a      	ldr	r2, [r3, #32]
 8001df0:	4b81      	ldr	r3, [pc, #516]	; (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0308 	and.w	r3, r3, #8
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d004      	beq.n	8001e06 <HAL_RCC_OscConfig+0x7e>
 8001dfc:	4b7e      	ldr	r3, [pc, #504]	; (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e04:	e005      	b.n	8001e12 <HAL_RCC_OscConfig+0x8a>
 8001e06:	4b7c      	ldr	r3, [pc, #496]	; (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001e08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e0c:	091b      	lsrs	r3, r3, #4
 8001e0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d223      	bcs.n	8001e5e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a1b      	ldr	r3, [r3, #32]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f000 fde8 	bl	80029f0 <RCC_SetFlashLatencyFromMSIRange>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e3c0      	b.n	80025ac <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e2a:	4b73      	ldr	r3, [pc, #460]	; (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a72      	ldr	r2, [pc, #456]	; (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001e30:	f043 0308 	orr.w	r3, r3, #8
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	4b70      	ldr	r3, [pc, #448]	; (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	496d      	ldr	r1, [pc, #436]	; (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e48:	4b6b      	ldr	r3, [pc, #428]	; (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	69db      	ldr	r3, [r3, #28]
 8001e54:	021b      	lsls	r3, r3, #8
 8001e56:	4968      	ldr	r1, [pc, #416]	; (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	604b      	str	r3, [r1, #4]
 8001e5c:	e025      	b.n	8001eaa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e5e:	4b66      	ldr	r3, [pc, #408]	; (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a65      	ldr	r2, [pc, #404]	; (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001e64:	f043 0308 	orr.w	r3, r3, #8
 8001e68:	6013      	str	r3, [r2, #0]
 8001e6a:	4b63      	ldr	r3, [pc, #396]	; (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a1b      	ldr	r3, [r3, #32]
 8001e76:	4960      	ldr	r1, [pc, #384]	; (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e7c:	4b5e      	ldr	r3, [pc, #376]	; (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	69db      	ldr	r3, [r3, #28]
 8001e88:	021b      	lsls	r3, r3, #8
 8001e8a:	495b      	ldr	r1, [pc, #364]	; (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d109      	bne.n	8001eaa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a1b      	ldr	r3, [r3, #32]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f000 fda8 	bl	80029f0 <RCC_SetFlashLatencyFromMSIRange>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e380      	b.n	80025ac <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001eaa:	f000 fcc1 	bl	8002830 <HAL_RCC_GetSysClockFreq>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	4b51      	ldr	r3, [pc, #324]	; (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	091b      	lsrs	r3, r3, #4
 8001eb6:	f003 030f 	and.w	r3, r3, #15
 8001eba:	4950      	ldr	r1, [pc, #320]	; (8001ffc <HAL_RCC_OscConfig+0x274>)
 8001ebc:	5ccb      	ldrb	r3, [r1, r3]
 8001ebe:	f003 031f 	and.w	r3, r3, #31
 8001ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec6:	4a4e      	ldr	r2, [pc, #312]	; (8002000 <HAL_RCC_OscConfig+0x278>)
 8001ec8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001eca:	4b4e      	ldr	r3, [pc, #312]	; (8002004 <HAL_RCC_OscConfig+0x27c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff faa2 	bl	8001418 <HAL_InitTick>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ed8:	7bfb      	ldrb	r3, [r7, #15]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d052      	beq.n	8001f84 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001ede:	7bfb      	ldrb	r3, [r7, #15]
 8001ee0:	e364      	b.n	80025ac <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d032      	beq.n	8001f50 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001eea:	4b43      	ldr	r3, [pc, #268]	; (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a42      	ldr	r2, [pc, #264]	; (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001ef0:	f043 0301 	orr.w	r3, r3, #1
 8001ef4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ef6:	f7ff fba7 	bl	8001648 <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001efc:	e008      	b.n	8001f10 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001efe:	f7ff fba3 	bl	8001648 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e34d      	b.n	80025ac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f10:	4b39      	ldr	r3, [pc, #228]	; (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0f0      	beq.n	8001efe <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f1c:	4b36      	ldr	r3, [pc, #216]	; (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a35      	ldr	r2, [pc, #212]	; (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001f22:	f043 0308 	orr.w	r3, r3, #8
 8001f26:	6013      	str	r3, [r2, #0]
 8001f28:	4b33      	ldr	r3, [pc, #204]	; (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	4930      	ldr	r1, [pc, #192]	; (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f3a:	4b2f      	ldr	r3, [pc, #188]	; (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	021b      	lsls	r3, r3, #8
 8001f48:	492b      	ldr	r1, [pc, #172]	; (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	604b      	str	r3, [r1, #4]
 8001f4e:	e01a      	b.n	8001f86 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f50:	4b29      	ldr	r3, [pc, #164]	; (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a28      	ldr	r2, [pc, #160]	; (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001f56:	f023 0301 	bic.w	r3, r3, #1
 8001f5a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f5c:	f7ff fb74 	bl	8001648 <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f64:	f7ff fb70 	bl	8001648 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e31a      	b.n	80025ac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f76:	4b20      	ldr	r3, [pc, #128]	; (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1f0      	bne.n	8001f64 <HAL_RCC_OscConfig+0x1dc>
 8001f82:	e000      	b.n	8001f86 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f84:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d073      	beq.n	800207a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	2b08      	cmp	r3, #8
 8001f96:	d005      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x21c>
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	2b0c      	cmp	r3, #12
 8001f9c:	d10e      	bne.n	8001fbc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	2b03      	cmp	r3, #3
 8001fa2:	d10b      	bne.n	8001fbc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa4:	4b14      	ldr	r3, [pc, #80]	; (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d063      	beq.n	8002078 <HAL_RCC_OscConfig+0x2f0>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d15f      	bne.n	8002078 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e2f7      	b.n	80025ac <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fc4:	d106      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x24c>
 8001fc6:	4b0c      	ldr	r3, [pc, #48]	; (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a0b      	ldr	r2, [pc, #44]	; (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fd0:	6013      	str	r3, [r2, #0]
 8001fd2:	e025      	b.n	8002020 <HAL_RCC_OscConfig+0x298>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fdc:	d114      	bne.n	8002008 <HAL_RCC_OscConfig+0x280>
 8001fde:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a05      	ldr	r2, [pc, #20]	; (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001fe4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fe8:	6013      	str	r3, [r2, #0]
 8001fea:	4b03      	ldr	r3, [pc, #12]	; (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a02      	ldr	r2, [pc, #8]	; (8001ff8 <HAL_RCC_OscConfig+0x270>)
 8001ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	e013      	b.n	8002020 <HAL_RCC_OscConfig+0x298>
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	08004dfc 	.word	0x08004dfc
 8002000:	20000068 	.word	0x20000068
 8002004:	2000006c 	.word	0x2000006c
 8002008:	4ba0      	ldr	r3, [pc, #640]	; (800228c <HAL_RCC_OscConfig+0x504>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a9f      	ldr	r2, [pc, #636]	; (800228c <HAL_RCC_OscConfig+0x504>)
 800200e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002012:	6013      	str	r3, [r2, #0]
 8002014:	4b9d      	ldr	r3, [pc, #628]	; (800228c <HAL_RCC_OscConfig+0x504>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a9c      	ldr	r2, [pc, #624]	; (800228c <HAL_RCC_OscConfig+0x504>)
 800201a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800201e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d013      	beq.n	8002050 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002028:	f7ff fb0e 	bl	8001648 <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002030:	f7ff fb0a 	bl	8001648 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b64      	cmp	r3, #100	; 0x64
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e2b4      	b.n	80025ac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002042:	4b92      	ldr	r3, [pc, #584]	; (800228c <HAL_RCC_OscConfig+0x504>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d0f0      	beq.n	8002030 <HAL_RCC_OscConfig+0x2a8>
 800204e:	e014      	b.n	800207a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002050:	f7ff fafa 	bl	8001648 <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002058:	f7ff faf6 	bl	8001648 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b64      	cmp	r3, #100	; 0x64
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e2a0      	b.n	80025ac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800206a:	4b88      	ldr	r3, [pc, #544]	; (800228c <HAL_RCC_OscConfig+0x504>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1f0      	bne.n	8002058 <HAL_RCC_OscConfig+0x2d0>
 8002076:	e000      	b.n	800207a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002078:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d060      	beq.n	8002148 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	2b04      	cmp	r3, #4
 800208a:	d005      	beq.n	8002098 <HAL_RCC_OscConfig+0x310>
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	2b0c      	cmp	r3, #12
 8002090:	d119      	bne.n	80020c6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	2b02      	cmp	r3, #2
 8002096:	d116      	bne.n	80020c6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002098:	4b7c      	ldr	r3, [pc, #496]	; (800228c <HAL_RCC_OscConfig+0x504>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d005      	beq.n	80020b0 <HAL_RCC_OscConfig+0x328>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d101      	bne.n	80020b0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e27d      	b.n	80025ac <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b0:	4b76      	ldr	r3, [pc, #472]	; (800228c <HAL_RCC_OscConfig+0x504>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	061b      	lsls	r3, r3, #24
 80020be:	4973      	ldr	r1, [pc, #460]	; (800228c <HAL_RCC_OscConfig+0x504>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020c4:	e040      	b.n	8002148 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d023      	beq.n	8002116 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020ce:	4b6f      	ldr	r3, [pc, #444]	; (800228c <HAL_RCC_OscConfig+0x504>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a6e      	ldr	r2, [pc, #440]	; (800228c <HAL_RCC_OscConfig+0x504>)
 80020d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020da:	f7ff fab5 	bl	8001648 <HAL_GetTick>
 80020de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020e0:	e008      	b.n	80020f4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020e2:	f7ff fab1 	bl	8001648 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e25b      	b.n	80025ac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020f4:	4b65      	ldr	r3, [pc, #404]	; (800228c <HAL_RCC_OscConfig+0x504>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d0f0      	beq.n	80020e2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002100:	4b62      	ldr	r3, [pc, #392]	; (800228c <HAL_RCC_OscConfig+0x504>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	061b      	lsls	r3, r3, #24
 800210e:	495f      	ldr	r1, [pc, #380]	; (800228c <HAL_RCC_OscConfig+0x504>)
 8002110:	4313      	orrs	r3, r2
 8002112:	604b      	str	r3, [r1, #4]
 8002114:	e018      	b.n	8002148 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002116:	4b5d      	ldr	r3, [pc, #372]	; (800228c <HAL_RCC_OscConfig+0x504>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a5c      	ldr	r2, [pc, #368]	; (800228c <HAL_RCC_OscConfig+0x504>)
 800211c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002120:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002122:	f7ff fa91 	bl	8001648 <HAL_GetTick>
 8002126:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002128:	e008      	b.n	800213c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800212a:	f7ff fa8d 	bl	8001648 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e237      	b.n	80025ac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800213c:	4b53      	ldr	r3, [pc, #332]	; (800228c <HAL_RCC_OscConfig+0x504>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1f0      	bne.n	800212a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0308 	and.w	r3, r3, #8
 8002150:	2b00      	cmp	r3, #0
 8002152:	d03c      	beq.n	80021ce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	695b      	ldr	r3, [r3, #20]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d01c      	beq.n	8002196 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800215c:	4b4b      	ldr	r3, [pc, #300]	; (800228c <HAL_RCC_OscConfig+0x504>)
 800215e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002162:	4a4a      	ldr	r2, [pc, #296]	; (800228c <HAL_RCC_OscConfig+0x504>)
 8002164:	f043 0301 	orr.w	r3, r3, #1
 8002168:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800216c:	f7ff fa6c 	bl	8001648 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002174:	f7ff fa68 	bl	8001648 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e212      	b.n	80025ac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002186:	4b41      	ldr	r3, [pc, #260]	; (800228c <HAL_RCC_OscConfig+0x504>)
 8002188:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d0ef      	beq.n	8002174 <HAL_RCC_OscConfig+0x3ec>
 8002194:	e01b      	b.n	80021ce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002196:	4b3d      	ldr	r3, [pc, #244]	; (800228c <HAL_RCC_OscConfig+0x504>)
 8002198:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800219c:	4a3b      	ldr	r2, [pc, #236]	; (800228c <HAL_RCC_OscConfig+0x504>)
 800219e:	f023 0301 	bic.w	r3, r3, #1
 80021a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a6:	f7ff fa4f 	bl	8001648 <HAL_GetTick>
 80021aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021ac:	e008      	b.n	80021c0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021ae:	f7ff fa4b 	bl	8001648 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e1f5      	b.n	80025ac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021c0:	4b32      	ldr	r3, [pc, #200]	; (800228c <HAL_RCC_OscConfig+0x504>)
 80021c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1ef      	bne.n	80021ae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0304 	and.w	r3, r3, #4
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f000 80a6 	beq.w	8002328 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021dc:	2300      	movs	r3, #0
 80021de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80021e0:	4b2a      	ldr	r3, [pc, #168]	; (800228c <HAL_RCC_OscConfig+0x504>)
 80021e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d10d      	bne.n	8002208 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ec:	4b27      	ldr	r3, [pc, #156]	; (800228c <HAL_RCC_OscConfig+0x504>)
 80021ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f0:	4a26      	ldr	r2, [pc, #152]	; (800228c <HAL_RCC_OscConfig+0x504>)
 80021f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021f6:	6593      	str	r3, [r2, #88]	; 0x58
 80021f8:	4b24      	ldr	r3, [pc, #144]	; (800228c <HAL_RCC_OscConfig+0x504>)
 80021fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002200:	60bb      	str	r3, [r7, #8]
 8002202:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002204:	2301      	movs	r3, #1
 8002206:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002208:	4b21      	ldr	r3, [pc, #132]	; (8002290 <HAL_RCC_OscConfig+0x508>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002210:	2b00      	cmp	r3, #0
 8002212:	d118      	bne.n	8002246 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002214:	4b1e      	ldr	r3, [pc, #120]	; (8002290 <HAL_RCC_OscConfig+0x508>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a1d      	ldr	r2, [pc, #116]	; (8002290 <HAL_RCC_OscConfig+0x508>)
 800221a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800221e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002220:	f7ff fa12 	bl	8001648 <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002228:	f7ff fa0e 	bl	8001648 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e1b8      	b.n	80025ac <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800223a:	4b15      	ldr	r3, [pc, #84]	; (8002290 <HAL_RCC_OscConfig+0x508>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002242:	2b00      	cmp	r3, #0
 8002244:	d0f0      	beq.n	8002228 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d108      	bne.n	8002260 <HAL_RCC_OscConfig+0x4d8>
 800224e:	4b0f      	ldr	r3, [pc, #60]	; (800228c <HAL_RCC_OscConfig+0x504>)
 8002250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002254:	4a0d      	ldr	r2, [pc, #52]	; (800228c <HAL_RCC_OscConfig+0x504>)
 8002256:	f043 0301 	orr.w	r3, r3, #1
 800225a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800225e:	e029      	b.n	80022b4 <HAL_RCC_OscConfig+0x52c>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	2b05      	cmp	r3, #5
 8002266:	d115      	bne.n	8002294 <HAL_RCC_OscConfig+0x50c>
 8002268:	4b08      	ldr	r3, [pc, #32]	; (800228c <HAL_RCC_OscConfig+0x504>)
 800226a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800226e:	4a07      	ldr	r2, [pc, #28]	; (800228c <HAL_RCC_OscConfig+0x504>)
 8002270:	f043 0304 	orr.w	r3, r3, #4
 8002274:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002278:	4b04      	ldr	r3, [pc, #16]	; (800228c <HAL_RCC_OscConfig+0x504>)
 800227a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800227e:	4a03      	ldr	r2, [pc, #12]	; (800228c <HAL_RCC_OscConfig+0x504>)
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002288:	e014      	b.n	80022b4 <HAL_RCC_OscConfig+0x52c>
 800228a:	bf00      	nop
 800228c:	40021000 	.word	0x40021000
 8002290:	40007000 	.word	0x40007000
 8002294:	4b9d      	ldr	r3, [pc, #628]	; (800250c <HAL_RCC_OscConfig+0x784>)
 8002296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800229a:	4a9c      	ldr	r2, [pc, #624]	; (800250c <HAL_RCC_OscConfig+0x784>)
 800229c:	f023 0301 	bic.w	r3, r3, #1
 80022a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022a4:	4b99      	ldr	r3, [pc, #612]	; (800250c <HAL_RCC_OscConfig+0x784>)
 80022a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022aa:	4a98      	ldr	r2, [pc, #608]	; (800250c <HAL_RCC_OscConfig+0x784>)
 80022ac:	f023 0304 	bic.w	r3, r3, #4
 80022b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d016      	beq.n	80022ea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022bc:	f7ff f9c4 	bl	8001648 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022c2:	e00a      	b.n	80022da <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022c4:	f7ff f9c0 	bl	8001648 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e168      	b.n	80025ac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022da:	4b8c      	ldr	r3, [pc, #560]	; (800250c <HAL_RCC_OscConfig+0x784>)
 80022dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d0ed      	beq.n	80022c4 <HAL_RCC_OscConfig+0x53c>
 80022e8:	e015      	b.n	8002316 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ea:	f7ff f9ad 	bl	8001648 <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022f0:	e00a      	b.n	8002308 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022f2:	f7ff f9a9 	bl	8001648 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002300:	4293      	cmp	r3, r2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e151      	b.n	80025ac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002308:	4b80      	ldr	r3, [pc, #512]	; (800250c <HAL_RCC_OscConfig+0x784>)
 800230a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1ed      	bne.n	80022f2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002316:	7ffb      	ldrb	r3, [r7, #31]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d105      	bne.n	8002328 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800231c:	4b7b      	ldr	r3, [pc, #492]	; (800250c <HAL_RCC_OscConfig+0x784>)
 800231e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002320:	4a7a      	ldr	r2, [pc, #488]	; (800250c <HAL_RCC_OscConfig+0x784>)
 8002322:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002326:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0320 	and.w	r3, r3, #32
 8002330:	2b00      	cmp	r3, #0
 8002332:	d03c      	beq.n	80023ae <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002338:	2b00      	cmp	r3, #0
 800233a:	d01c      	beq.n	8002376 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800233c:	4b73      	ldr	r3, [pc, #460]	; (800250c <HAL_RCC_OscConfig+0x784>)
 800233e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002342:	4a72      	ldr	r2, [pc, #456]	; (800250c <HAL_RCC_OscConfig+0x784>)
 8002344:	f043 0301 	orr.w	r3, r3, #1
 8002348:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234c:	f7ff f97c 	bl	8001648 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002354:	f7ff f978 	bl	8001648 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e122      	b.n	80025ac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002366:	4b69      	ldr	r3, [pc, #420]	; (800250c <HAL_RCC_OscConfig+0x784>)
 8002368:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d0ef      	beq.n	8002354 <HAL_RCC_OscConfig+0x5cc>
 8002374:	e01b      	b.n	80023ae <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002376:	4b65      	ldr	r3, [pc, #404]	; (800250c <HAL_RCC_OscConfig+0x784>)
 8002378:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800237c:	4a63      	ldr	r2, [pc, #396]	; (800250c <HAL_RCC_OscConfig+0x784>)
 800237e:	f023 0301 	bic.w	r3, r3, #1
 8002382:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002386:	f7ff f95f 	bl	8001648 <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800238c:	e008      	b.n	80023a0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800238e:	f7ff f95b 	bl	8001648 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e105      	b.n	80025ac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023a0:	4b5a      	ldr	r3, [pc, #360]	; (800250c <HAL_RCC_OscConfig+0x784>)
 80023a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1ef      	bne.n	800238e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f000 80f9 	beq.w	80025aa <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023bc:	2b02      	cmp	r3, #2
 80023be:	f040 80cf 	bne.w	8002560 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80023c2:	4b52      	ldr	r3, [pc, #328]	; (800250c <HAL_RCC_OscConfig+0x784>)
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	f003 0203 	and.w	r2, r3, #3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d12c      	bne.n	8002430 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e0:	3b01      	subs	r3, #1
 80023e2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d123      	bne.n	8002430 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023f2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d11b      	bne.n	8002430 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002402:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002404:	429a      	cmp	r2, r3
 8002406:	d113      	bne.n	8002430 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002412:	085b      	lsrs	r3, r3, #1
 8002414:	3b01      	subs	r3, #1
 8002416:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002418:	429a      	cmp	r2, r3
 800241a:	d109      	bne.n	8002430 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	085b      	lsrs	r3, r3, #1
 8002428:	3b01      	subs	r3, #1
 800242a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800242c:	429a      	cmp	r2, r3
 800242e:	d071      	beq.n	8002514 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	2b0c      	cmp	r3, #12
 8002434:	d068      	beq.n	8002508 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002436:	4b35      	ldr	r3, [pc, #212]	; (800250c <HAL_RCC_OscConfig+0x784>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d105      	bne.n	800244e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002442:	4b32      	ldr	r3, [pc, #200]	; (800250c <HAL_RCC_OscConfig+0x784>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e0ac      	b.n	80025ac <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002452:	4b2e      	ldr	r3, [pc, #184]	; (800250c <HAL_RCC_OscConfig+0x784>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a2d      	ldr	r2, [pc, #180]	; (800250c <HAL_RCC_OscConfig+0x784>)
 8002458:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800245c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800245e:	f7ff f8f3 	bl	8001648 <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002464:	e008      	b.n	8002478 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002466:	f7ff f8ef 	bl	8001648 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e099      	b.n	80025ac <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002478:	4b24      	ldr	r3, [pc, #144]	; (800250c <HAL_RCC_OscConfig+0x784>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1f0      	bne.n	8002466 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002484:	4b21      	ldr	r3, [pc, #132]	; (800250c <HAL_RCC_OscConfig+0x784>)
 8002486:	68da      	ldr	r2, [r3, #12]
 8002488:	4b21      	ldr	r3, [pc, #132]	; (8002510 <HAL_RCC_OscConfig+0x788>)
 800248a:	4013      	ands	r3, r2
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002494:	3a01      	subs	r2, #1
 8002496:	0112      	lsls	r2, r2, #4
 8002498:	4311      	orrs	r1, r2
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800249e:	0212      	lsls	r2, r2, #8
 80024a0:	4311      	orrs	r1, r2
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80024a6:	0852      	lsrs	r2, r2, #1
 80024a8:	3a01      	subs	r2, #1
 80024aa:	0552      	lsls	r2, r2, #21
 80024ac:	4311      	orrs	r1, r2
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80024b2:	0852      	lsrs	r2, r2, #1
 80024b4:	3a01      	subs	r2, #1
 80024b6:	0652      	lsls	r2, r2, #25
 80024b8:	4311      	orrs	r1, r2
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024be:	06d2      	lsls	r2, r2, #27
 80024c0:	430a      	orrs	r2, r1
 80024c2:	4912      	ldr	r1, [pc, #72]	; (800250c <HAL_RCC_OscConfig+0x784>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80024c8:	4b10      	ldr	r3, [pc, #64]	; (800250c <HAL_RCC_OscConfig+0x784>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a0f      	ldr	r2, [pc, #60]	; (800250c <HAL_RCC_OscConfig+0x784>)
 80024ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024d2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024d4:	4b0d      	ldr	r3, [pc, #52]	; (800250c <HAL_RCC_OscConfig+0x784>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	4a0c      	ldr	r2, [pc, #48]	; (800250c <HAL_RCC_OscConfig+0x784>)
 80024da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024e0:	f7ff f8b2 	bl	8001648 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e8:	f7ff f8ae 	bl	8001648 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e058      	b.n	80025ac <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024fa:	4b04      	ldr	r3, [pc, #16]	; (800250c <HAL_RCC_OscConfig+0x784>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d0f0      	beq.n	80024e8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002506:	e050      	b.n	80025aa <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e04f      	b.n	80025ac <HAL_RCC_OscConfig+0x824>
 800250c:	40021000 	.word	0x40021000
 8002510:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002514:	4b27      	ldr	r3, [pc, #156]	; (80025b4 <HAL_RCC_OscConfig+0x82c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d144      	bne.n	80025aa <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002520:	4b24      	ldr	r3, [pc, #144]	; (80025b4 <HAL_RCC_OscConfig+0x82c>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a23      	ldr	r2, [pc, #140]	; (80025b4 <HAL_RCC_OscConfig+0x82c>)
 8002526:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800252a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800252c:	4b21      	ldr	r3, [pc, #132]	; (80025b4 <HAL_RCC_OscConfig+0x82c>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	4a20      	ldr	r2, [pc, #128]	; (80025b4 <HAL_RCC_OscConfig+0x82c>)
 8002532:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002536:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002538:	f7ff f886 	bl	8001648 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002540:	f7ff f882 	bl	8001648 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e02c      	b.n	80025ac <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002552:	4b18      	ldr	r3, [pc, #96]	; (80025b4 <HAL_RCC_OscConfig+0x82c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d0f0      	beq.n	8002540 <HAL_RCC_OscConfig+0x7b8>
 800255e:	e024      	b.n	80025aa <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	2b0c      	cmp	r3, #12
 8002564:	d01f      	beq.n	80025a6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002566:	4b13      	ldr	r3, [pc, #76]	; (80025b4 <HAL_RCC_OscConfig+0x82c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a12      	ldr	r2, [pc, #72]	; (80025b4 <HAL_RCC_OscConfig+0x82c>)
 800256c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002570:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002572:	f7ff f869 	bl	8001648 <HAL_GetTick>
 8002576:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002578:	e008      	b.n	800258c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800257a:	f7ff f865 	bl	8001648 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e00f      	b.n	80025ac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800258c:	4b09      	ldr	r3, [pc, #36]	; (80025b4 <HAL_RCC_OscConfig+0x82c>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1f0      	bne.n	800257a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002598:	4b06      	ldr	r3, [pc, #24]	; (80025b4 <HAL_RCC_OscConfig+0x82c>)
 800259a:	68da      	ldr	r2, [r3, #12]
 800259c:	4905      	ldr	r1, [pc, #20]	; (80025b4 <HAL_RCC_OscConfig+0x82c>)
 800259e:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <HAL_RCC_OscConfig+0x830>)
 80025a0:	4013      	ands	r3, r2
 80025a2:	60cb      	str	r3, [r1, #12]
 80025a4:	e001      	b.n	80025aa <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e000      	b.n	80025ac <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3720      	adds	r7, #32
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40021000 	.word	0x40021000
 80025b8:	feeefffc 	.word	0xfeeefffc

080025bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80025c6:	2300      	movs	r3, #0
 80025c8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e11d      	b.n	8002810 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025d4:	4b90      	ldr	r3, [pc, #576]	; (8002818 <HAL_RCC_ClockConfig+0x25c>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 030f 	and.w	r3, r3, #15
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d910      	bls.n	8002604 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e2:	4b8d      	ldr	r3, [pc, #564]	; (8002818 <HAL_RCC_ClockConfig+0x25c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f023 020f 	bic.w	r2, r3, #15
 80025ea:	498b      	ldr	r1, [pc, #556]	; (8002818 <HAL_RCC_ClockConfig+0x25c>)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f2:	4b89      	ldr	r3, [pc, #548]	; (8002818 <HAL_RCC_ClockConfig+0x25c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 030f 	and.w	r3, r3, #15
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d001      	beq.n	8002604 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e105      	b.n	8002810 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d010      	beq.n	8002632 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	4b81      	ldr	r3, [pc, #516]	; (800281c <HAL_RCC_ClockConfig+0x260>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800261c:	429a      	cmp	r2, r3
 800261e:	d908      	bls.n	8002632 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002620:	4b7e      	ldr	r3, [pc, #504]	; (800281c <HAL_RCC_ClockConfig+0x260>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	497b      	ldr	r1, [pc, #492]	; (800281c <HAL_RCC_ClockConfig+0x260>)
 800262e:	4313      	orrs	r3, r2
 8002630:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d079      	beq.n	8002732 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2b03      	cmp	r3, #3
 8002644:	d11e      	bne.n	8002684 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002646:	4b75      	ldr	r3, [pc, #468]	; (800281c <HAL_RCC_ClockConfig+0x260>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e0dc      	b.n	8002810 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002656:	f000 fa25 	bl	8002aa4 <RCC_GetSysClockFreqFromPLLSource>
 800265a:	4603      	mov	r3, r0
 800265c:	4a70      	ldr	r2, [pc, #448]	; (8002820 <HAL_RCC_ClockConfig+0x264>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d946      	bls.n	80026f0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002662:	4b6e      	ldr	r3, [pc, #440]	; (800281c <HAL_RCC_ClockConfig+0x260>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d140      	bne.n	80026f0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800266e:	4b6b      	ldr	r3, [pc, #428]	; (800281c <HAL_RCC_ClockConfig+0x260>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002676:	4a69      	ldr	r2, [pc, #420]	; (800281c <HAL_RCC_ClockConfig+0x260>)
 8002678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800267c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800267e:	2380      	movs	r3, #128	; 0x80
 8002680:	617b      	str	r3, [r7, #20]
 8002682:	e035      	b.n	80026f0 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	2b02      	cmp	r3, #2
 800268a:	d107      	bne.n	800269c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800268c:	4b63      	ldr	r3, [pc, #396]	; (800281c <HAL_RCC_ClockConfig+0x260>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d115      	bne.n	80026c4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e0b9      	b.n	8002810 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d107      	bne.n	80026b4 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026a4:	4b5d      	ldr	r3, [pc, #372]	; (800281c <HAL_RCC_ClockConfig+0x260>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d109      	bne.n	80026c4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e0ad      	b.n	8002810 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026b4:	4b59      	ldr	r3, [pc, #356]	; (800281c <HAL_RCC_ClockConfig+0x260>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d101      	bne.n	80026c4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e0a5      	b.n	8002810 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80026c4:	f000 f8b4 	bl	8002830 <HAL_RCC_GetSysClockFreq>
 80026c8:	4603      	mov	r3, r0
 80026ca:	4a55      	ldr	r2, [pc, #340]	; (8002820 <HAL_RCC_ClockConfig+0x264>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d90f      	bls.n	80026f0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80026d0:	4b52      	ldr	r3, [pc, #328]	; (800281c <HAL_RCC_ClockConfig+0x260>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d109      	bne.n	80026f0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80026dc:	4b4f      	ldr	r3, [pc, #316]	; (800281c <HAL_RCC_ClockConfig+0x260>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026e4:	4a4d      	ldr	r2, [pc, #308]	; (800281c <HAL_RCC_ClockConfig+0x260>)
 80026e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026ea:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80026ec:	2380      	movs	r3, #128	; 0x80
 80026ee:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026f0:	4b4a      	ldr	r3, [pc, #296]	; (800281c <HAL_RCC_ClockConfig+0x260>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f023 0203 	bic.w	r2, r3, #3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	4947      	ldr	r1, [pc, #284]	; (800281c <HAL_RCC_ClockConfig+0x260>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002702:	f7fe ffa1 	bl	8001648 <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002708:	e00a      	b.n	8002720 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800270a:	f7fe ff9d 	bl	8001648 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	f241 3288 	movw	r2, #5000	; 0x1388
 8002718:	4293      	cmp	r3, r2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e077      	b.n	8002810 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002720:	4b3e      	ldr	r3, [pc, #248]	; (800281c <HAL_RCC_ClockConfig+0x260>)
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f003 020c 	and.w	r2, r3, #12
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	429a      	cmp	r2, r3
 8002730:	d1eb      	bne.n	800270a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	2b80      	cmp	r3, #128	; 0x80
 8002736:	d105      	bne.n	8002744 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002738:	4b38      	ldr	r3, [pc, #224]	; (800281c <HAL_RCC_ClockConfig+0x260>)
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	4a37      	ldr	r2, [pc, #220]	; (800281c <HAL_RCC_ClockConfig+0x260>)
 800273e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002742:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d010      	beq.n	8002772 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689a      	ldr	r2, [r3, #8]
 8002754:	4b31      	ldr	r3, [pc, #196]	; (800281c <HAL_RCC_ClockConfig+0x260>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800275c:	429a      	cmp	r2, r3
 800275e:	d208      	bcs.n	8002772 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002760:	4b2e      	ldr	r3, [pc, #184]	; (800281c <HAL_RCC_ClockConfig+0x260>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	492b      	ldr	r1, [pc, #172]	; (800281c <HAL_RCC_ClockConfig+0x260>)
 800276e:	4313      	orrs	r3, r2
 8002770:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002772:	4b29      	ldr	r3, [pc, #164]	; (8002818 <HAL_RCC_ClockConfig+0x25c>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 030f 	and.w	r3, r3, #15
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	429a      	cmp	r2, r3
 800277e:	d210      	bcs.n	80027a2 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002780:	4b25      	ldr	r3, [pc, #148]	; (8002818 <HAL_RCC_ClockConfig+0x25c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f023 020f 	bic.w	r2, r3, #15
 8002788:	4923      	ldr	r1, [pc, #140]	; (8002818 <HAL_RCC_ClockConfig+0x25c>)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	4313      	orrs	r3, r2
 800278e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002790:	4b21      	ldr	r3, [pc, #132]	; (8002818 <HAL_RCC_ClockConfig+0x25c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 030f 	and.w	r3, r3, #15
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	429a      	cmp	r2, r3
 800279c:	d001      	beq.n	80027a2 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e036      	b.n	8002810 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0304 	and.w	r3, r3, #4
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d008      	beq.n	80027c0 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027ae:	4b1b      	ldr	r3, [pc, #108]	; (800281c <HAL_RCC_ClockConfig+0x260>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	4918      	ldr	r1, [pc, #96]	; (800281c <HAL_RCC_ClockConfig+0x260>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0308 	and.w	r3, r3, #8
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d009      	beq.n	80027e0 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027cc:	4b13      	ldr	r3, [pc, #76]	; (800281c <HAL_RCC_ClockConfig+0x260>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	4910      	ldr	r1, [pc, #64]	; (800281c <HAL_RCC_ClockConfig+0x260>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027e0:	f000 f826 	bl	8002830 <HAL_RCC_GetSysClockFreq>
 80027e4:	4602      	mov	r2, r0
 80027e6:	4b0d      	ldr	r3, [pc, #52]	; (800281c <HAL_RCC_ClockConfig+0x260>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	091b      	lsrs	r3, r3, #4
 80027ec:	f003 030f 	and.w	r3, r3, #15
 80027f0:	490c      	ldr	r1, [pc, #48]	; (8002824 <HAL_RCC_ClockConfig+0x268>)
 80027f2:	5ccb      	ldrb	r3, [r1, r3]
 80027f4:	f003 031f 	and.w	r3, r3, #31
 80027f8:	fa22 f303 	lsr.w	r3, r2, r3
 80027fc:	4a0a      	ldr	r2, [pc, #40]	; (8002828 <HAL_RCC_ClockConfig+0x26c>)
 80027fe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002800:	4b0a      	ldr	r3, [pc, #40]	; (800282c <HAL_RCC_ClockConfig+0x270>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4618      	mov	r0, r3
 8002806:	f7fe fe07 	bl	8001418 <HAL_InitTick>
 800280a:	4603      	mov	r3, r0
 800280c:	73fb      	strb	r3, [r7, #15]

  return status;
 800280e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002810:	4618      	mov	r0, r3
 8002812:	3718      	adds	r7, #24
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40022000 	.word	0x40022000
 800281c:	40021000 	.word	0x40021000
 8002820:	04c4b400 	.word	0x04c4b400
 8002824:	08004dfc 	.word	0x08004dfc
 8002828:	20000068 	.word	0x20000068
 800282c:	2000006c 	.word	0x2000006c

08002830 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002830:	b480      	push	{r7}
 8002832:	b089      	sub	sp, #36	; 0x24
 8002834:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002836:	2300      	movs	r3, #0
 8002838:	61fb      	str	r3, [r7, #28]
 800283a:	2300      	movs	r3, #0
 800283c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800283e:	4b3e      	ldr	r3, [pc, #248]	; (8002938 <HAL_RCC_GetSysClockFreq+0x108>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f003 030c 	and.w	r3, r3, #12
 8002846:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002848:	4b3b      	ldr	r3, [pc, #236]	; (8002938 <HAL_RCC_GetSysClockFreq+0x108>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	f003 0303 	and.w	r3, r3, #3
 8002850:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d005      	beq.n	8002864 <HAL_RCC_GetSysClockFreq+0x34>
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	2b0c      	cmp	r3, #12
 800285c:	d121      	bne.n	80028a2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d11e      	bne.n	80028a2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002864:	4b34      	ldr	r3, [pc, #208]	; (8002938 <HAL_RCC_GetSysClockFreq+0x108>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0308 	and.w	r3, r3, #8
 800286c:	2b00      	cmp	r3, #0
 800286e:	d107      	bne.n	8002880 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002870:	4b31      	ldr	r3, [pc, #196]	; (8002938 <HAL_RCC_GetSysClockFreq+0x108>)
 8002872:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002876:	0a1b      	lsrs	r3, r3, #8
 8002878:	f003 030f 	and.w	r3, r3, #15
 800287c:	61fb      	str	r3, [r7, #28]
 800287e:	e005      	b.n	800288c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002880:	4b2d      	ldr	r3, [pc, #180]	; (8002938 <HAL_RCC_GetSysClockFreq+0x108>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	091b      	lsrs	r3, r3, #4
 8002886:	f003 030f 	and.w	r3, r3, #15
 800288a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800288c:	4a2b      	ldr	r2, [pc, #172]	; (800293c <HAL_RCC_GetSysClockFreq+0x10c>)
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002894:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10d      	bne.n	80028b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028a0:	e00a      	b.n	80028b8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	2b04      	cmp	r3, #4
 80028a6:	d102      	bne.n	80028ae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028a8:	4b25      	ldr	r3, [pc, #148]	; (8002940 <HAL_RCC_GetSysClockFreq+0x110>)
 80028aa:	61bb      	str	r3, [r7, #24]
 80028ac:	e004      	b.n	80028b8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	2b08      	cmp	r3, #8
 80028b2:	d101      	bne.n	80028b8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028b4:	4b23      	ldr	r3, [pc, #140]	; (8002944 <HAL_RCC_GetSysClockFreq+0x114>)
 80028b6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	2b0c      	cmp	r3, #12
 80028bc:	d134      	bne.n	8002928 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028be:	4b1e      	ldr	r3, [pc, #120]	; (8002938 <HAL_RCC_GetSysClockFreq+0x108>)
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	f003 0303 	and.w	r3, r3, #3
 80028c6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d003      	beq.n	80028d6 <HAL_RCC_GetSysClockFreq+0xa6>
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	2b03      	cmp	r3, #3
 80028d2:	d003      	beq.n	80028dc <HAL_RCC_GetSysClockFreq+0xac>
 80028d4:	e005      	b.n	80028e2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80028d6:	4b1a      	ldr	r3, [pc, #104]	; (8002940 <HAL_RCC_GetSysClockFreq+0x110>)
 80028d8:	617b      	str	r3, [r7, #20]
      break;
 80028da:	e005      	b.n	80028e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80028dc:	4b19      	ldr	r3, [pc, #100]	; (8002944 <HAL_RCC_GetSysClockFreq+0x114>)
 80028de:	617b      	str	r3, [r7, #20]
      break;
 80028e0:	e002      	b.n	80028e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	617b      	str	r3, [r7, #20]
      break;
 80028e6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028e8:	4b13      	ldr	r3, [pc, #76]	; (8002938 <HAL_RCC_GetSysClockFreq+0x108>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	091b      	lsrs	r3, r3, #4
 80028ee:	f003 030f 	and.w	r3, r3, #15
 80028f2:	3301      	adds	r3, #1
 80028f4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80028f6:	4b10      	ldr	r3, [pc, #64]	; (8002938 <HAL_RCC_GetSysClockFreq+0x108>)
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	0a1b      	lsrs	r3, r3, #8
 80028fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	fb03 f202 	mul.w	r2, r3, r2
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	fbb2 f3f3 	udiv	r3, r2, r3
 800290c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800290e:	4b0a      	ldr	r3, [pc, #40]	; (8002938 <HAL_RCC_GetSysClockFreq+0x108>)
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	0e5b      	lsrs	r3, r3, #25
 8002914:	f003 0303 	and.w	r3, r3, #3
 8002918:	3301      	adds	r3, #1
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	fbb2 f3f3 	udiv	r3, r2, r3
 8002926:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002928:	69bb      	ldr	r3, [r7, #24]
}
 800292a:	4618      	mov	r0, r3
 800292c:	3724      	adds	r7, #36	; 0x24
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	40021000 	.word	0x40021000
 800293c:	08004e14 	.word	0x08004e14
 8002940:	00f42400 	.word	0x00f42400
 8002944:	007a1200 	.word	0x007a1200

08002948 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800294c:	4b03      	ldr	r3, [pc, #12]	; (800295c <HAL_RCC_GetHCLKFreq+0x14>)
 800294e:	681b      	ldr	r3, [r3, #0]
}
 8002950:	4618      	mov	r0, r3
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	20000068 	.word	0x20000068

08002960 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002964:	f7ff fff0 	bl	8002948 <HAL_RCC_GetHCLKFreq>
 8002968:	4602      	mov	r2, r0
 800296a:	4b06      	ldr	r3, [pc, #24]	; (8002984 <HAL_RCC_GetPCLK1Freq+0x24>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	0a1b      	lsrs	r3, r3, #8
 8002970:	f003 0307 	and.w	r3, r3, #7
 8002974:	4904      	ldr	r1, [pc, #16]	; (8002988 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002976:	5ccb      	ldrb	r3, [r1, r3]
 8002978:	f003 031f 	and.w	r3, r3, #31
 800297c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002980:	4618      	mov	r0, r3
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40021000 	.word	0x40021000
 8002988:	08004e0c 	.word	0x08004e0c

0800298c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	220f      	movs	r2, #15
 800299a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800299c:	4b12      	ldr	r3, [pc, #72]	; (80029e8 <HAL_RCC_GetClockConfig+0x5c>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f003 0203 	and.w	r2, r3, #3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80029a8:	4b0f      	ldr	r3, [pc, #60]	; (80029e8 <HAL_RCC_GetClockConfig+0x5c>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80029b4:	4b0c      	ldr	r3, [pc, #48]	; (80029e8 <HAL_RCC_GetClockConfig+0x5c>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80029c0:	4b09      	ldr	r3, [pc, #36]	; (80029e8 <HAL_RCC_GetClockConfig+0x5c>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	08db      	lsrs	r3, r3, #3
 80029c6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80029ce:	4b07      	ldr	r3, [pc, #28]	; (80029ec <HAL_RCC_GetClockConfig+0x60>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 020f 	and.w	r2, r3, #15
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	601a      	str	r2, [r3, #0]
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	40021000 	.word	0x40021000
 80029ec:	40022000 	.word	0x40022000

080029f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80029f8:	2300      	movs	r3, #0
 80029fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80029fc:	4b27      	ldr	r3, [pc, #156]	; (8002a9c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80029fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d003      	beq.n	8002a10 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a08:	f7ff f8ea 	bl	8001be0 <HAL_PWREx_GetVoltageRange>
 8002a0c:	6178      	str	r0, [r7, #20]
 8002a0e:	e014      	b.n	8002a3a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a10:	4b22      	ldr	r3, [pc, #136]	; (8002a9c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a14:	4a21      	ldr	r2, [pc, #132]	; (8002a9c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002a16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a1a:	6593      	str	r3, [r2, #88]	; 0x58
 8002a1c:	4b1f      	ldr	r3, [pc, #124]	; (8002a9c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a24:	60fb      	str	r3, [r7, #12]
 8002a26:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a28:	f7ff f8da 	bl	8001be0 <HAL_PWREx_GetVoltageRange>
 8002a2c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a2e:	4b1b      	ldr	r3, [pc, #108]	; (8002a9c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a32:	4a1a      	ldr	r2, [pc, #104]	; (8002a9c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002a34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a38:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a40:	d10b      	bne.n	8002a5a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b80      	cmp	r3, #128	; 0x80
 8002a46:	d913      	bls.n	8002a70 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2ba0      	cmp	r3, #160	; 0xa0
 8002a4c:	d902      	bls.n	8002a54 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a4e:	2302      	movs	r3, #2
 8002a50:	613b      	str	r3, [r7, #16]
 8002a52:	e00d      	b.n	8002a70 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a54:	2301      	movs	r3, #1
 8002a56:	613b      	str	r3, [r7, #16]
 8002a58:	e00a      	b.n	8002a70 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b7f      	cmp	r3, #127	; 0x7f
 8002a5e:	d902      	bls.n	8002a66 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002a60:	2302      	movs	r3, #2
 8002a62:	613b      	str	r3, [r7, #16]
 8002a64:	e004      	b.n	8002a70 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2b70      	cmp	r3, #112	; 0x70
 8002a6a:	d101      	bne.n	8002a70 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a70:	4b0b      	ldr	r3, [pc, #44]	; (8002aa0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f023 020f 	bic.w	r2, r3, #15
 8002a78:	4909      	ldr	r1, [pc, #36]	; (8002aa0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a80:	4b07      	ldr	r3, [pc, #28]	; (8002aa0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 030f 	and.w	r3, r3, #15
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d001      	beq.n	8002a92 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e000      	b.n	8002a94 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3718      	adds	r7, #24
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	40022000 	.word	0x40022000

08002aa4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b087      	sub	sp, #28
 8002aa8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002aaa:	4b2d      	ldr	r3, [pc, #180]	; (8002b60 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	f003 0303 	and.w	r3, r3, #3
 8002ab2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2b03      	cmp	r3, #3
 8002ab8:	d00b      	beq.n	8002ad2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2b03      	cmp	r3, #3
 8002abe:	d825      	bhi.n	8002b0c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d008      	beq.n	8002ad8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d11f      	bne.n	8002b0c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002acc:	4b25      	ldr	r3, [pc, #148]	; (8002b64 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002ace:	613b      	str	r3, [r7, #16]
    break;
 8002ad0:	e01f      	b.n	8002b12 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002ad2:	4b25      	ldr	r3, [pc, #148]	; (8002b68 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002ad4:	613b      	str	r3, [r7, #16]
    break;
 8002ad6:	e01c      	b.n	8002b12 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ad8:	4b21      	ldr	r3, [pc, #132]	; (8002b60 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0308 	and.w	r3, r3, #8
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d107      	bne.n	8002af4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ae4:	4b1e      	ldr	r3, [pc, #120]	; (8002b60 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002ae6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aea:	0a1b      	lsrs	r3, r3, #8
 8002aec:	f003 030f 	and.w	r3, r3, #15
 8002af0:	617b      	str	r3, [r7, #20]
 8002af2:	e005      	b.n	8002b00 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002af4:	4b1a      	ldr	r3, [pc, #104]	; (8002b60 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	091b      	lsrs	r3, r3, #4
 8002afa:	f003 030f 	and.w	r3, r3, #15
 8002afe:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002b00:	4a1a      	ldr	r2, [pc, #104]	; (8002b6c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b08:	613b      	str	r3, [r7, #16]
    break;
 8002b0a:	e002      	b.n	8002b12 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	613b      	str	r3, [r7, #16]
    break;
 8002b10:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b12:	4b13      	ldr	r3, [pc, #76]	; (8002b60 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	091b      	lsrs	r3, r3, #4
 8002b18:	f003 030f 	and.w	r3, r3, #15
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b20:	4b0f      	ldr	r3, [pc, #60]	; (8002b60 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	0a1b      	lsrs	r3, r3, #8
 8002b26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	fb03 f202 	mul.w	r2, r3, r2
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b36:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b38:	4b09      	ldr	r3, [pc, #36]	; (8002b60 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	0e5b      	lsrs	r3, r3, #25
 8002b3e:	f003 0303 	and.w	r3, r3, #3
 8002b42:	3301      	adds	r3, #1
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b50:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002b52:	683b      	ldr	r3, [r7, #0]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	371c      	adds	r7, #28
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	40021000 	.word	0x40021000
 8002b64:	00f42400 	.word	0x00f42400
 8002b68:	007a1200 	.word	0x007a1200
 8002b6c:	08004e14 	.word	0x08004e14

08002b70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b78:	2300      	movs	r3, #0
 8002b7a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d040      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b90:	2b80      	cmp	r3, #128	; 0x80
 8002b92:	d02a      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002b94:	2b80      	cmp	r3, #128	; 0x80
 8002b96:	d825      	bhi.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002b98:	2b60      	cmp	r3, #96	; 0x60
 8002b9a:	d026      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002b9c:	2b60      	cmp	r3, #96	; 0x60
 8002b9e:	d821      	bhi.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002ba0:	2b40      	cmp	r3, #64	; 0x40
 8002ba2:	d006      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002ba4:	2b40      	cmp	r3, #64	; 0x40
 8002ba6:	d81d      	bhi.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d009      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002bac:	2b20      	cmp	r3, #32
 8002bae:	d010      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002bb0:	e018      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002bb2:	4b89      	ldr	r3, [pc, #548]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	4a88      	ldr	r2, [pc, #544]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bbc:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bbe:	e015      	b.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	3304      	adds	r3, #4
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f000 fb02 	bl	80031d0 <RCCEx_PLLSAI1_Config>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bd0:	e00c      	b.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	3320      	adds	r3, #32
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f000 fbed 	bl	80033b8 <RCCEx_PLLSAI2_Config>
 8002bde:	4603      	mov	r3, r0
 8002be0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002be2:	e003      	b.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	74fb      	strb	r3, [r7, #19]
      break;
 8002be8:	e000      	b.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002bea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bec:	7cfb      	ldrb	r3, [r7, #19]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10b      	bne.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002bf2:	4b79      	ldr	r3, [pc, #484]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bf4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002bf8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c00:	4975      	ldr	r1, [pc, #468]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002c08:	e001      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c0a:	7cfb      	ldrb	r3, [r7, #19]
 8002c0c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d047      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c22:	d030      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002c24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c28:	d82a      	bhi.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002c2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c2e:	d02a      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002c30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c34:	d824      	bhi.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002c36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c3a:	d008      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002c3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c40:	d81e      	bhi.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00a      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c4a:	d010      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002c4c:	e018      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c4e:	4b62      	ldr	r3, [pc, #392]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	4a61      	ldr	r2, [pc, #388]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c58:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c5a:	e015      	b.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3304      	adds	r3, #4
 8002c60:	2100      	movs	r1, #0
 8002c62:	4618      	mov	r0, r3
 8002c64:	f000 fab4 	bl	80031d0 <RCCEx_PLLSAI1_Config>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c6c:	e00c      	b.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	3320      	adds	r3, #32
 8002c72:	2100      	movs	r1, #0
 8002c74:	4618      	mov	r0, r3
 8002c76:	f000 fb9f 	bl	80033b8 <RCCEx_PLLSAI2_Config>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c7e:	e003      	b.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	74fb      	strb	r3, [r7, #19]
      break;
 8002c84:	e000      	b.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002c86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c88:	7cfb      	ldrb	r3, [r7, #19]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10b      	bne.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c8e:	4b52      	ldr	r3, [pc, #328]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c90:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9c:	494e      	ldr	r1, [pc, #312]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002ca4:	e001      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ca6:	7cfb      	ldrb	r3, [r7, #19]
 8002ca8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f000 809f 	beq.w	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002cbc:	4b46      	ldr	r3, [pc, #280]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d101      	bne.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e000      	b.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002ccc:	2300      	movs	r3, #0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00d      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cd2:	4b41      	ldr	r3, [pc, #260]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd6:	4a40      	ldr	r2, [pc, #256]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cdc:	6593      	str	r3, [r2, #88]	; 0x58
 8002cde:	4b3e      	ldr	r3, [pc, #248]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce6:	60bb      	str	r3, [r7, #8]
 8002ce8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cea:	2301      	movs	r3, #1
 8002cec:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cee:	4b3b      	ldr	r3, [pc, #236]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a3a      	ldr	r2, [pc, #232]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cf8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002cfa:	f7fe fca5 	bl	8001648 <HAL_GetTick>
 8002cfe:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d00:	e009      	b.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d02:	f7fe fca1 	bl	8001648 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d902      	bls.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	74fb      	strb	r3, [r7, #19]
        break;
 8002d14:	e005      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d16:	4b31      	ldr	r3, [pc, #196]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0ef      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002d22:	7cfb      	ldrb	r3, [r7, #19]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d15b      	bne.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d28:	4b2b      	ldr	r3, [pc, #172]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d32:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d01f      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d40:	697a      	ldr	r2, [r7, #20]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d019      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d46:	4b24      	ldr	r3, [pc, #144]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d50:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d52:	4b21      	ldr	r3, [pc, #132]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d58:	4a1f      	ldr	r2, [pc, #124]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d62:	4b1d      	ldr	r3, [pc, #116]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d68:	4a1b      	ldr	r2, [pc, #108]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d72:	4a19      	ldr	r2, [pc, #100]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d016      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d84:	f7fe fc60 	bl	8001648 <HAL_GetTick>
 8002d88:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d8a:	e00b      	b.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d8c:	f7fe fc5c 	bl	8001648 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d902      	bls.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	74fb      	strb	r3, [r7, #19]
            break;
 8002da2:	e006      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002da4:	4b0c      	ldr	r3, [pc, #48]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d0ec      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002db2:	7cfb      	ldrb	r3, [r7, #19]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d10c      	bne.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002db8:	4b07      	ldr	r3, [pc, #28]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dbe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc8:	4903      	ldr	r1, [pc, #12]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002dd0:	e008      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002dd2:	7cfb      	ldrb	r3, [r7, #19]
 8002dd4:	74bb      	strb	r3, [r7, #18]
 8002dd6:	e005      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002de0:	7cfb      	ldrb	r3, [r7, #19]
 8002de2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002de4:	7c7b      	ldrb	r3, [r7, #17]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d105      	bne.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dea:	4ba0      	ldr	r3, [pc, #640]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dee:	4a9f      	ldr	r2, [pc, #636]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002df0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002df4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00a      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e02:	4b9a      	ldr	r3, [pc, #616]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e08:	f023 0203 	bic.w	r2, r3, #3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e10:	4996      	ldr	r1, [pc, #600]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00a      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e24:	4b91      	ldr	r3, [pc, #580]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e2a:	f023 020c 	bic.w	r2, r3, #12
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	498e      	ldr	r1, [pc, #568]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0304 	and.w	r3, r3, #4
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00a      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e46:	4b89      	ldr	r3, [pc, #548]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e4c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e54:	4985      	ldr	r1, [pc, #532]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0308 	and.w	r3, r3, #8
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00a      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e68:	4b80      	ldr	r3, [pc, #512]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e6e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e76:	497d      	ldr	r1, [pc, #500]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0310 	and.w	r3, r3, #16
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00a      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e8a:	4b78      	ldr	r3, [pc, #480]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e98:	4974      	ldr	r1, [pc, #464]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0320 	and.w	r3, r3, #32
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00a      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002eac:	4b6f      	ldr	r3, [pc, #444]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eba:	496c      	ldr	r1, [pc, #432]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00a      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ece:	4b67      	ldr	r3, [pc, #412]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002edc:	4963      	ldr	r1, [pc, #396]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00a      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ef0:	4b5e      	ldr	r3, [pc, #376]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002efe:	495b      	ldr	r1, [pc, #364]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00a      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f12:	4b56      	ldr	r3, [pc, #344]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f18:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f20:	4952      	ldr	r1, [pc, #328]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00a      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f34:	4b4d      	ldr	r3, [pc, #308]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f3a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f42:	494a      	ldr	r1, [pc, #296]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00a      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f56:	4b45      	ldr	r3, [pc, #276]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f5c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f64:	4941      	ldr	r1, [pc, #260]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00a      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f78:	4b3c      	ldr	r3, [pc, #240]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f7e:	f023 0203 	bic.w	r2, r3, #3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f86:	4939      	ldr	r1, [pc, #228]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d028      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f9a:	4b34      	ldr	r3, [pc, #208]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fa8:	4930      	ldr	r1, [pc, #192]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fb8:	d106      	bne.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fba:	4b2c      	ldr	r3, [pc, #176]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	4a2b      	ldr	r2, [pc, #172]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fc4:	60d3      	str	r3, [r2, #12]
 8002fc6:	e011      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fcc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fd0:	d10c      	bne.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	3304      	adds	r3, #4
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f000 f8f9 	bl	80031d0 <RCCEx_PLLSAI1_Config>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002fe2:	7cfb      	ldrb	r3, [r7, #19]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8002fe8:	7cfb      	ldrb	r3, [r7, #19]
 8002fea:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d04d      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ffc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003000:	d108      	bne.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003002:	4b1a      	ldr	r3, [pc, #104]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003004:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003008:	4a18      	ldr	r2, [pc, #96]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800300a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800300e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003012:	e012      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003014:	4b15      	ldr	r3, [pc, #84]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003016:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800301a:	4a14      	ldr	r2, [pc, #80]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800301c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003020:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003024:	4b11      	ldr	r3, [pc, #68]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800302a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003032:	490e      	ldr	r1, [pc, #56]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003034:	4313      	orrs	r3, r2
 8003036:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800303e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003042:	d106      	bne.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003044:	4b09      	ldr	r3, [pc, #36]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	4a08      	ldr	r2, [pc, #32]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800304a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800304e:	60d3      	str	r3, [r2, #12]
 8003050:	e020      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003056:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800305a:	d109      	bne.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800305c:	4b03      	ldr	r3, [pc, #12]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	4a02      	ldr	r2, [pc, #8]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003062:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003066:	60d3      	str	r3, [r2, #12]
 8003068:	e014      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800306a:	bf00      	nop
 800306c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003074:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003078:	d10c      	bne.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	3304      	adds	r3, #4
 800307e:	2101      	movs	r1, #1
 8003080:	4618      	mov	r0, r3
 8003082:	f000 f8a5 	bl	80031d0 <RCCEx_PLLSAI1_Config>
 8003086:	4603      	mov	r3, r0
 8003088:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800308a:	7cfb      	ldrb	r3, [r7, #19]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003090:	7cfb      	ldrb	r3, [r7, #19]
 8003092:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d028      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80030a0:	4b4a      	ldr	r3, [pc, #296]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030ae:	4947      	ldr	r1, [pc, #284]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030be:	d106      	bne.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030c0:	4b42      	ldr	r3, [pc, #264]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	4a41      	ldr	r2, [pc, #260]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030ca:	60d3      	str	r3, [r2, #12]
 80030cc:	e011      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030d6:	d10c      	bne.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3304      	adds	r3, #4
 80030dc:	2101      	movs	r1, #1
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 f876 	bl	80031d0 <RCCEx_PLLSAI1_Config>
 80030e4:	4603      	mov	r3, r0
 80030e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030e8:	7cfb      	ldrb	r3, [r7, #19]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80030ee:	7cfb      	ldrb	r3, [r7, #19]
 80030f0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d01e      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030fe:	4b33      	ldr	r3, [pc, #204]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003104:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800310e:	492f      	ldr	r1, [pc, #188]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003110:	4313      	orrs	r3, r2
 8003112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800311c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003120:	d10c      	bne.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	3304      	adds	r3, #4
 8003126:	2102      	movs	r1, #2
 8003128:	4618      	mov	r0, r3
 800312a:	f000 f851 	bl	80031d0 <RCCEx_PLLSAI1_Config>
 800312e:	4603      	mov	r3, r0
 8003130:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003132:	7cfb      	ldrb	r3, [r7, #19]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003138:	7cfb      	ldrb	r3, [r7, #19]
 800313a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00b      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003148:	4b20      	ldr	r3, [pc, #128]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800314a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800314e:	f023 0204 	bic.w	r2, r3, #4
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003158:	491c      	ldr	r1, [pc, #112]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800315a:	4313      	orrs	r3, r2
 800315c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00b      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800316c:	4b17      	ldr	r3, [pc, #92]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800316e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003172:	f023 0218 	bic.w	r2, r3, #24
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317c:	4913      	ldr	r1, [pc, #76]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800317e:	4313      	orrs	r3, r2
 8003180:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d017      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003190:	4b0e      	ldr	r3, [pc, #56]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003192:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003196:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031a0:	490a      	ldr	r1, [pc, #40]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031b2:	d105      	bne.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031b4:	4b05      	ldr	r3, [pc, #20]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	4a04      	ldr	r2, [pc, #16]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031be:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80031c0:	7cbb      	ldrb	r3, [r7, #18]
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3718      	adds	r7, #24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	40021000 	.word	0x40021000

080031d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031da:	2300      	movs	r3, #0
 80031dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80031de:	4b72      	ldr	r3, [pc, #456]	; (80033a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	f003 0303 	and.w	r3, r3, #3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00e      	beq.n	8003208 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80031ea:	4b6f      	ldr	r3, [pc, #444]	; (80033a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	f003 0203 	and.w	r2, r3, #3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d103      	bne.n	8003202 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
       ||
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d142      	bne.n	8003288 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	73fb      	strb	r3, [r7, #15]
 8003206:	e03f      	b.n	8003288 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2b03      	cmp	r3, #3
 800320e:	d018      	beq.n	8003242 <RCCEx_PLLSAI1_Config+0x72>
 8003210:	2b03      	cmp	r3, #3
 8003212:	d825      	bhi.n	8003260 <RCCEx_PLLSAI1_Config+0x90>
 8003214:	2b01      	cmp	r3, #1
 8003216:	d002      	beq.n	800321e <RCCEx_PLLSAI1_Config+0x4e>
 8003218:	2b02      	cmp	r3, #2
 800321a:	d009      	beq.n	8003230 <RCCEx_PLLSAI1_Config+0x60>
 800321c:	e020      	b.n	8003260 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800321e:	4b62      	ldr	r3, [pc, #392]	; (80033a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d11d      	bne.n	8003266 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800322e:	e01a      	b.n	8003266 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003230:	4b5d      	ldr	r3, [pc, #372]	; (80033a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003238:	2b00      	cmp	r3, #0
 800323a:	d116      	bne.n	800326a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003240:	e013      	b.n	800326a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003242:	4b59      	ldr	r3, [pc, #356]	; (80033a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10f      	bne.n	800326e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800324e:	4b56      	ldr	r3, [pc, #344]	; (80033a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d109      	bne.n	800326e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800325e:	e006      	b.n	800326e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	73fb      	strb	r3, [r7, #15]
      break;
 8003264:	e004      	b.n	8003270 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003266:	bf00      	nop
 8003268:	e002      	b.n	8003270 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800326a:	bf00      	nop
 800326c:	e000      	b.n	8003270 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800326e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003270:	7bfb      	ldrb	r3, [r7, #15]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d108      	bne.n	8003288 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003276:	4b4c      	ldr	r3, [pc, #304]	; (80033a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	f023 0203 	bic.w	r2, r3, #3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4949      	ldr	r1, [pc, #292]	; (80033a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003284:	4313      	orrs	r3, r2
 8003286:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003288:	7bfb      	ldrb	r3, [r7, #15]
 800328a:	2b00      	cmp	r3, #0
 800328c:	f040 8086 	bne.w	800339c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003290:	4b45      	ldr	r3, [pc, #276]	; (80033a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a44      	ldr	r2, [pc, #272]	; (80033a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003296:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800329a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800329c:	f7fe f9d4 	bl	8001648 <HAL_GetTick>
 80032a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032a2:	e009      	b.n	80032b8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032a4:	f7fe f9d0 	bl	8001648 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d902      	bls.n	80032b8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	73fb      	strb	r3, [r7, #15]
        break;
 80032b6:	e005      	b.n	80032c4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032b8:	4b3b      	ldr	r3, [pc, #236]	; (80033a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1ef      	bne.n	80032a4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80032c4:	7bfb      	ldrb	r3, [r7, #15]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d168      	bne.n	800339c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d113      	bne.n	80032f8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032d0:	4b35      	ldr	r3, [pc, #212]	; (80033a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80032d2:	691a      	ldr	r2, [r3, #16]
 80032d4:	4b35      	ldr	r3, [pc, #212]	; (80033ac <RCCEx_PLLSAI1_Config+0x1dc>)
 80032d6:	4013      	ands	r3, r2
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	6892      	ldr	r2, [r2, #8]
 80032dc:	0211      	lsls	r1, r2, #8
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	68d2      	ldr	r2, [r2, #12]
 80032e2:	06d2      	lsls	r2, r2, #27
 80032e4:	4311      	orrs	r1, r2
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	6852      	ldr	r2, [r2, #4]
 80032ea:	3a01      	subs	r2, #1
 80032ec:	0112      	lsls	r2, r2, #4
 80032ee:	430a      	orrs	r2, r1
 80032f0:	492d      	ldr	r1, [pc, #180]	; (80033a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	610b      	str	r3, [r1, #16]
 80032f6:	e02d      	b.n	8003354 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d115      	bne.n	800332a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032fe:	4b2a      	ldr	r3, [pc, #168]	; (80033a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003300:	691a      	ldr	r2, [r3, #16]
 8003302:	4b2b      	ldr	r3, [pc, #172]	; (80033b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003304:	4013      	ands	r3, r2
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6892      	ldr	r2, [r2, #8]
 800330a:	0211      	lsls	r1, r2, #8
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	6912      	ldr	r2, [r2, #16]
 8003310:	0852      	lsrs	r2, r2, #1
 8003312:	3a01      	subs	r2, #1
 8003314:	0552      	lsls	r2, r2, #21
 8003316:	4311      	orrs	r1, r2
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	6852      	ldr	r2, [r2, #4]
 800331c:	3a01      	subs	r2, #1
 800331e:	0112      	lsls	r2, r2, #4
 8003320:	430a      	orrs	r2, r1
 8003322:	4921      	ldr	r1, [pc, #132]	; (80033a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003324:	4313      	orrs	r3, r2
 8003326:	610b      	str	r3, [r1, #16]
 8003328:	e014      	b.n	8003354 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800332a:	4b1f      	ldr	r3, [pc, #124]	; (80033a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800332c:	691a      	ldr	r2, [r3, #16]
 800332e:	4b21      	ldr	r3, [pc, #132]	; (80033b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003330:	4013      	ands	r3, r2
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	6892      	ldr	r2, [r2, #8]
 8003336:	0211      	lsls	r1, r2, #8
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	6952      	ldr	r2, [r2, #20]
 800333c:	0852      	lsrs	r2, r2, #1
 800333e:	3a01      	subs	r2, #1
 8003340:	0652      	lsls	r2, r2, #25
 8003342:	4311      	orrs	r1, r2
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	6852      	ldr	r2, [r2, #4]
 8003348:	3a01      	subs	r2, #1
 800334a:	0112      	lsls	r2, r2, #4
 800334c:	430a      	orrs	r2, r1
 800334e:	4916      	ldr	r1, [pc, #88]	; (80033a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003350:	4313      	orrs	r3, r2
 8003352:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003354:	4b14      	ldr	r3, [pc, #80]	; (80033a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a13      	ldr	r2, [pc, #76]	; (80033a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800335a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800335e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003360:	f7fe f972 	bl	8001648 <HAL_GetTick>
 8003364:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003366:	e009      	b.n	800337c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003368:	f7fe f96e 	bl	8001648 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d902      	bls.n	800337c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	73fb      	strb	r3, [r7, #15]
          break;
 800337a:	e005      	b.n	8003388 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800337c:	4b0a      	ldr	r3, [pc, #40]	; (80033a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d0ef      	beq.n	8003368 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003388:	7bfb      	ldrb	r3, [r7, #15]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d106      	bne.n	800339c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800338e:	4b06      	ldr	r3, [pc, #24]	; (80033a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003390:	691a      	ldr	r2, [r3, #16]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	4904      	ldr	r1, [pc, #16]	; (80033a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003398:	4313      	orrs	r3, r2
 800339a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800339c:	7bfb      	ldrb	r3, [r7, #15]
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3710      	adds	r7, #16
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	40021000 	.word	0x40021000
 80033ac:	07ff800f 	.word	0x07ff800f
 80033b0:	ff9f800f 	.word	0xff9f800f
 80033b4:	f9ff800f 	.word	0xf9ff800f

080033b8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033c2:	2300      	movs	r3, #0
 80033c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033c6:	4b72      	ldr	r3, [pc, #456]	; (8003590 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	f003 0303 	and.w	r3, r3, #3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00e      	beq.n	80033f0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80033d2:	4b6f      	ldr	r3, [pc, #444]	; (8003590 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	f003 0203 	and.w	r2, r3, #3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d103      	bne.n	80033ea <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
       ||
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d142      	bne.n	8003470 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	73fb      	strb	r3, [r7, #15]
 80033ee:	e03f      	b.n	8003470 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2b03      	cmp	r3, #3
 80033f6:	d018      	beq.n	800342a <RCCEx_PLLSAI2_Config+0x72>
 80033f8:	2b03      	cmp	r3, #3
 80033fa:	d825      	bhi.n	8003448 <RCCEx_PLLSAI2_Config+0x90>
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d002      	beq.n	8003406 <RCCEx_PLLSAI2_Config+0x4e>
 8003400:	2b02      	cmp	r3, #2
 8003402:	d009      	beq.n	8003418 <RCCEx_PLLSAI2_Config+0x60>
 8003404:	e020      	b.n	8003448 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003406:	4b62      	ldr	r3, [pc, #392]	; (8003590 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d11d      	bne.n	800344e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003416:	e01a      	b.n	800344e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003418:	4b5d      	ldr	r3, [pc, #372]	; (8003590 <RCCEx_PLLSAI2_Config+0x1d8>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003420:	2b00      	cmp	r3, #0
 8003422:	d116      	bne.n	8003452 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003428:	e013      	b.n	8003452 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800342a:	4b59      	ldr	r3, [pc, #356]	; (8003590 <RCCEx_PLLSAI2_Config+0x1d8>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10f      	bne.n	8003456 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003436:	4b56      	ldr	r3, [pc, #344]	; (8003590 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d109      	bne.n	8003456 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003446:	e006      	b.n	8003456 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	73fb      	strb	r3, [r7, #15]
      break;
 800344c:	e004      	b.n	8003458 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800344e:	bf00      	nop
 8003450:	e002      	b.n	8003458 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003452:	bf00      	nop
 8003454:	e000      	b.n	8003458 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003456:	bf00      	nop
    }

    if(status == HAL_OK)
 8003458:	7bfb      	ldrb	r3, [r7, #15]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d108      	bne.n	8003470 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800345e:	4b4c      	ldr	r3, [pc, #304]	; (8003590 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	f023 0203 	bic.w	r2, r3, #3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4949      	ldr	r1, [pc, #292]	; (8003590 <RCCEx_PLLSAI2_Config+0x1d8>)
 800346c:	4313      	orrs	r3, r2
 800346e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003470:	7bfb      	ldrb	r3, [r7, #15]
 8003472:	2b00      	cmp	r3, #0
 8003474:	f040 8086 	bne.w	8003584 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003478:	4b45      	ldr	r3, [pc, #276]	; (8003590 <RCCEx_PLLSAI2_Config+0x1d8>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a44      	ldr	r2, [pc, #272]	; (8003590 <RCCEx_PLLSAI2_Config+0x1d8>)
 800347e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003482:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003484:	f7fe f8e0 	bl	8001648 <HAL_GetTick>
 8003488:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800348a:	e009      	b.n	80034a0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800348c:	f7fe f8dc 	bl	8001648 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d902      	bls.n	80034a0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	73fb      	strb	r3, [r7, #15]
        break;
 800349e:	e005      	b.n	80034ac <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80034a0:	4b3b      	ldr	r3, [pc, #236]	; (8003590 <RCCEx_PLLSAI2_Config+0x1d8>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1ef      	bne.n	800348c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80034ac:	7bfb      	ldrb	r3, [r7, #15]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d168      	bne.n	8003584 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d113      	bne.n	80034e0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80034b8:	4b35      	ldr	r3, [pc, #212]	; (8003590 <RCCEx_PLLSAI2_Config+0x1d8>)
 80034ba:	695a      	ldr	r2, [r3, #20]
 80034bc:	4b35      	ldr	r3, [pc, #212]	; (8003594 <RCCEx_PLLSAI2_Config+0x1dc>)
 80034be:	4013      	ands	r3, r2
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	6892      	ldr	r2, [r2, #8]
 80034c4:	0211      	lsls	r1, r2, #8
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	68d2      	ldr	r2, [r2, #12]
 80034ca:	06d2      	lsls	r2, r2, #27
 80034cc:	4311      	orrs	r1, r2
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	6852      	ldr	r2, [r2, #4]
 80034d2:	3a01      	subs	r2, #1
 80034d4:	0112      	lsls	r2, r2, #4
 80034d6:	430a      	orrs	r2, r1
 80034d8:	492d      	ldr	r1, [pc, #180]	; (8003590 <RCCEx_PLLSAI2_Config+0x1d8>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	614b      	str	r3, [r1, #20]
 80034de:	e02d      	b.n	800353c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d115      	bne.n	8003512 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80034e6:	4b2a      	ldr	r3, [pc, #168]	; (8003590 <RCCEx_PLLSAI2_Config+0x1d8>)
 80034e8:	695a      	ldr	r2, [r3, #20]
 80034ea:	4b2b      	ldr	r3, [pc, #172]	; (8003598 <RCCEx_PLLSAI2_Config+0x1e0>)
 80034ec:	4013      	ands	r3, r2
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	6892      	ldr	r2, [r2, #8]
 80034f2:	0211      	lsls	r1, r2, #8
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	6912      	ldr	r2, [r2, #16]
 80034f8:	0852      	lsrs	r2, r2, #1
 80034fa:	3a01      	subs	r2, #1
 80034fc:	0552      	lsls	r2, r2, #21
 80034fe:	4311      	orrs	r1, r2
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	6852      	ldr	r2, [r2, #4]
 8003504:	3a01      	subs	r2, #1
 8003506:	0112      	lsls	r2, r2, #4
 8003508:	430a      	orrs	r2, r1
 800350a:	4921      	ldr	r1, [pc, #132]	; (8003590 <RCCEx_PLLSAI2_Config+0x1d8>)
 800350c:	4313      	orrs	r3, r2
 800350e:	614b      	str	r3, [r1, #20]
 8003510:	e014      	b.n	800353c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003512:	4b1f      	ldr	r3, [pc, #124]	; (8003590 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003514:	695a      	ldr	r2, [r3, #20]
 8003516:	4b21      	ldr	r3, [pc, #132]	; (800359c <RCCEx_PLLSAI2_Config+0x1e4>)
 8003518:	4013      	ands	r3, r2
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	6892      	ldr	r2, [r2, #8]
 800351e:	0211      	lsls	r1, r2, #8
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	6952      	ldr	r2, [r2, #20]
 8003524:	0852      	lsrs	r2, r2, #1
 8003526:	3a01      	subs	r2, #1
 8003528:	0652      	lsls	r2, r2, #25
 800352a:	4311      	orrs	r1, r2
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	6852      	ldr	r2, [r2, #4]
 8003530:	3a01      	subs	r2, #1
 8003532:	0112      	lsls	r2, r2, #4
 8003534:	430a      	orrs	r2, r1
 8003536:	4916      	ldr	r1, [pc, #88]	; (8003590 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003538:	4313      	orrs	r3, r2
 800353a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800353c:	4b14      	ldr	r3, [pc, #80]	; (8003590 <RCCEx_PLLSAI2_Config+0x1d8>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a13      	ldr	r2, [pc, #76]	; (8003590 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003546:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003548:	f7fe f87e 	bl	8001648 <HAL_GetTick>
 800354c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800354e:	e009      	b.n	8003564 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003550:	f7fe f87a 	bl	8001648 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d902      	bls.n	8003564 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	73fb      	strb	r3, [r7, #15]
          break;
 8003562:	e005      	b.n	8003570 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003564:	4b0a      	ldr	r3, [pc, #40]	; (8003590 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d0ef      	beq.n	8003550 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003570:	7bfb      	ldrb	r3, [r7, #15]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d106      	bne.n	8003584 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003576:	4b06      	ldr	r3, [pc, #24]	; (8003590 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003578:	695a      	ldr	r2, [r3, #20]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	4904      	ldr	r1, [pc, #16]	; (8003590 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003580:	4313      	orrs	r3, r2
 8003582:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003584:	7bfb      	ldrb	r3, [r7, #15]
}
 8003586:	4618      	mov	r0, r3
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	40021000 	.word	0x40021000
 8003594:	07ff800f 	.word	0x07ff800f
 8003598:	ff9f800f 	.word	0xff9f800f
 800359c:	f9ff800f 	.word	0xf9ff800f

080035a0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d079      	beq.n	80036a6 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d106      	bne.n	80035cc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7fd feb2 	bl	8001330 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2202      	movs	r2, #2
 80035d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	f003 0310 	and.w	r3, r3, #16
 80035de:	2b10      	cmp	r3, #16
 80035e0:	d058      	beq.n	8003694 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	22ca      	movs	r2, #202	; 0xca
 80035e8:	625a      	str	r2, [r3, #36]	; 0x24
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2253      	movs	r2, #83	; 0x53
 80035f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f880 	bl	80036f8 <RTC_EnterInitMode>
 80035f8:	4603      	mov	r3, r0
 80035fa:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80035fc:	7bfb      	ldrb	r3, [r7, #15]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d127      	bne.n	8003652 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	6812      	ldr	r2, [r2, #0]
 800360c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003610:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003614:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6899      	ldr	r1, [r3, #8]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	431a      	orrs	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	431a      	orrs	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	430a      	orrs	r2, r1
 8003632:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	68d2      	ldr	r2, [r2, #12]
 800363c:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6919      	ldr	r1, [r3, #16]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	041a      	lsls	r2, r3, #16
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	430a      	orrs	r2, r1
 8003650:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f884 	bl	8003760 <RTC_ExitInitMode>
 8003658:	4603      	mov	r3, r0
 800365a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800365c:	7bfb      	ldrb	r3, [r7, #15]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d113      	bne.n	800368a <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 0203 	bic.w	r2, r2, #3
 8003670:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	69da      	ldr	r2, [r3, #28]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	431a      	orrs	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	430a      	orrs	r2, r1
 8003688:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	22ff      	movs	r2, #255	; 0xff
 8003690:	625a      	str	r2, [r3, #36]	; 0x24
 8003692:	e001      	b.n	8003698 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8003694:	2300      	movs	r3, #0
 8003696:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003698:	7bfb      	ldrb	r3, [r7, #15]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d103      	bne.n	80036a6 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 80036a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3710      	adds	r7, #16
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a0d      	ldr	r2, [pc, #52]	; (80036f4 <HAL_RTC_WaitForSynchro+0x44>)
 80036be:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80036c0:	f7fd ffc2 	bl	8001648 <HAL_GetTick>
 80036c4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80036c6:	e009      	b.n	80036dc <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80036c8:	f7fd ffbe 	bl	8001648 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036d6:	d901      	bls.n	80036dc <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e007      	b.n	80036ec <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	f003 0320 	and.w	r3, r3, #32
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d0ee      	beq.n	80036c8 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	0003ff5f 	.word	0x0003ff5f

080036f8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003700:	2300      	movs	r3, #0
 8003702:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800370e:	2b00      	cmp	r3, #0
 8003710:	d120      	bne.n	8003754 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f04f 32ff 	mov.w	r2, #4294967295
 800371a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800371c:	f7fd ff94 	bl	8001648 <HAL_GetTick>
 8003720:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003722:	e00d      	b.n	8003740 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003724:	f7fd ff90 	bl	8001648 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003732:	d905      	bls.n	8003740 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2203      	movs	r2, #3
 800373c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800374a:	2b00      	cmp	r3, #0
 800374c:	d102      	bne.n	8003754 <RTC_EnterInitMode+0x5c>
 800374e:	7bfb      	ldrb	r3, [r7, #15]
 8003750:	2b03      	cmp	r3, #3
 8003752:	d1e7      	bne.n	8003724 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8003754:	7bfb      	ldrb	r3, [r7, #15]
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
	...

08003760 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003768:	2300      	movs	r3, #0
 800376a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800376c:	4b1a      	ldr	r3, [pc, #104]	; (80037d8 <RTC_ExitInitMode+0x78>)
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	4a19      	ldr	r2, [pc, #100]	; (80037d8 <RTC_ExitInitMode+0x78>)
 8003772:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003776:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003778:	4b17      	ldr	r3, [pc, #92]	; (80037d8 <RTC_ExitInitMode+0x78>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f003 0320 	and.w	r3, r3, #32
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10c      	bne.n	800379e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f7ff ff93 	bl	80036b0 <HAL_RTC_WaitForSynchro>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d01e      	beq.n	80037ce <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2203      	movs	r2, #3
 8003794:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	73fb      	strb	r3, [r7, #15]
 800379c:	e017      	b.n	80037ce <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800379e:	4b0e      	ldr	r3, [pc, #56]	; (80037d8 <RTC_ExitInitMode+0x78>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	4a0d      	ldr	r2, [pc, #52]	; (80037d8 <RTC_ExitInitMode+0x78>)
 80037a4:	f023 0320 	bic.w	r3, r3, #32
 80037a8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f7ff ff80 	bl	80036b0 <HAL_RTC_WaitForSynchro>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d005      	beq.n	80037c2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2203      	movs	r2, #3
 80037ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80037c2:	4b05      	ldr	r3, [pc, #20]	; (80037d8 <RTC_ExitInitMode+0x78>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	4a04      	ldr	r2, [pc, #16]	; (80037d8 <RTC_ExitInitMode+0x78>)
 80037c8:	f043 0320 	orr.w	r3, r3, #32
 80037cc:	6093      	str	r3, [r2, #8]
  }

  return status;
 80037ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	40002800 	.word	0x40002800

080037dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e095      	b.n	800391a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d108      	bne.n	8003808 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037fe:	d009      	beq.n	8003814 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	61da      	str	r2, [r3, #28]
 8003806:	e005      	b.n	8003814 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d106      	bne.n	8003834 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7fd fdb0 	bl	8001394 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2202      	movs	r2, #2
 8003838:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800384a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003854:	d902      	bls.n	800385c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003856:	2300      	movs	r3, #0
 8003858:	60fb      	str	r3, [r7, #12]
 800385a:	e002      	b.n	8003862 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800385c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003860:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800386a:	d007      	beq.n	800387c <HAL_SPI_Init+0xa0>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003874:	d002      	beq.n	800387c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800388c:	431a      	orrs	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	431a      	orrs	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	f003 0301 	and.w	r3, r3, #1
 80038a0:	431a      	orrs	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038aa:	431a      	orrs	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	69db      	ldr	r3, [r3, #28]
 80038b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038b4:	431a      	orrs	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038be:	ea42 0103 	orr.w	r1, r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	430a      	orrs	r2, r1
 80038d0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	0c1b      	lsrs	r3, r3, #16
 80038d8:	f003 0204 	and.w	r2, r3, #4
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e0:	f003 0310 	and.w	r3, r3, #16
 80038e4:	431a      	orrs	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ea:	f003 0308 	and.w	r3, r3, #8
 80038ee:	431a      	orrs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80038f8:	ea42 0103 	orr.w	r1, r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	430a      	orrs	r2, r1
 8003908:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b088      	sub	sp, #32
 8003926:	af00      	add	r7, sp, #0
 8003928:	60f8      	str	r0, [r7, #12]
 800392a:	60b9      	str	r1, [r7, #8]
 800392c:	603b      	str	r3, [r7, #0]
 800392e:	4613      	mov	r3, r2
 8003930:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003932:	2300      	movs	r3, #0
 8003934:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800393c:	2b01      	cmp	r3, #1
 800393e:	d101      	bne.n	8003944 <HAL_SPI_Transmit+0x22>
 8003940:	2302      	movs	r3, #2
 8003942:	e15f      	b.n	8003c04 <HAL_SPI_Transmit+0x2e2>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800394c:	f7fd fe7c 	bl	8001648 <HAL_GetTick>
 8003950:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003952:	88fb      	ldrh	r3, [r7, #6]
 8003954:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b01      	cmp	r3, #1
 8003960:	d002      	beq.n	8003968 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003962:	2302      	movs	r3, #2
 8003964:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003966:	e148      	b.n	8003bfa <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d002      	beq.n	8003974 <HAL_SPI_Transmit+0x52>
 800396e:	88fb      	ldrh	r3, [r7, #6]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d102      	bne.n	800397a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003978:	e13f      	b.n	8003bfa <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2203      	movs	r2, #3
 800397e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	68ba      	ldr	r2, [r7, #8]
 800398c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	88fa      	ldrh	r2, [r7, #6]
 8003992:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	88fa      	ldrh	r2, [r7, #6]
 8003998:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039c4:	d10f      	bne.n	80039e6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f0:	2b40      	cmp	r3, #64	; 0x40
 80039f2:	d007      	beq.n	8003a04 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a02:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a0c:	d94f      	bls.n	8003aae <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d002      	beq.n	8003a1c <HAL_SPI_Transmit+0xfa>
 8003a16:	8afb      	ldrh	r3, [r7, #22]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d142      	bne.n	8003aa2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a20:	881a      	ldrh	r2, [r3, #0]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2c:	1c9a      	adds	r2, r3, #2
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	b29a      	uxth	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a40:	e02f      	b.n	8003aa2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d112      	bne.n	8003a76 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a54:	881a      	ldrh	r2, [r3, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a60:	1c9a      	adds	r2, r3, #2
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a74:	e015      	b.n	8003aa2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a76:	f7fd fde7 	bl	8001648 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	683a      	ldr	r2, [r7, #0]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d803      	bhi.n	8003a8e <HAL_SPI_Transmit+0x16c>
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a8c:	d102      	bne.n	8003a94 <HAL_SPI_Transmit+0x172>
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d106      	bne.n	8003aa2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003aa0:	e0ab      	b.n	8003bfa <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1ca      	bne.n	8003a42 <HAL_SPI_Transmit+0x120>
 8003aac:	e080      	b.n	8003bb0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d002      	beq.n	8003abc <HAL_SPI_Transmit+0x19a>
 8003ab6:	8afb      	ldrh	r3, [r7, #22]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d174      	bne.n	8003ba6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d912      	bls.n	8003aec <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aca:	881a      	ldrh	r2, [r3, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad6:	1c9a      	adds	r2, r3, #2
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	3b02      	subs	r3, #2
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003aea:	e05c      	b.n	8003ba6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	330c      	adds	r3, #12
 8003af6:	7812      	ldrb	r2, [r2, #0]
 8003af8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afe:	1c5a      	adds	r2, r3, #1
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003b12:	e048      	b.n	8003ba6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d12b      	bne.n	8003b7a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d912      	bls.n	8003b52 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b30:	881a      	ldrh	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3c:	1c9a      	adds	r2, r3, #2
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	3b02      	subs	r3, #2
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b50:	e029      	b.n	8003ba6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	330c      	adds	r3, #12
 8003b5c:	7812      	ldrb	r2, [r2, #0]
 8003b5e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b64:	1c5a      	adds	r2, r3, #1
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	3b01      	subs	r3, #1
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b78:	e015      	b.n	8003ba6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b7a:	f7fd fd65 	bl	8001648 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	683a      	ldr	r2, [r7, #0]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d803      	bhi.n	8003b92 <HAL_SPI_Transmit+0x270>
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b90:	d102      	bne.n	8003b98 <HAL_SPI_Transmit+0x276>
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d106      	bne.n	8003ba6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003ba4:	e029      	b.n	8003bfa <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1b1      	bne.n	8003b14 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	6839      	ldr	r1, [r7, #0]
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f000 fb69 	bl	800428c <SPI_EndRxTxTransaction>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d002      	beq.n	8003bc6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10a      	bne.n	8003be4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bce:	2300      	movs	r3, #0
 8003bd0:	613b      	str	r3, [r7, #16]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	613b      	str	r3, [r7, #16]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	613b      	str	r3, [r7, #16]
 8003be2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d002      	beq.n	8003bf2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	77fb      	strb	r3, [r7, #31]
 8003bf0:	e003      	b.n	8003bfa <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003c02:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3720      	adds	r7, #32
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b08a      	sub	sp, #40	; 0x28
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
 8003c18:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d101      	bne.n	8003c32 <HAL_SPI_TransmitReceive+0x26>
 8003c2e:	2302      	movs	r3, #2
 8003c30:	e20a      	b.n	8004048 <HAL_SPI_TransmitReceive+0x43c>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c3a:	f7fd fd05 	bl	8001648 <HAL_GetTick>
 8003c3e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c46:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003c4e:	887b      	ldrh	r3, [r7, #2]
 8003c50:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003c52:	887b      	ldrh	r3, [r7, #2]
 8003c54:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003c56:	7efb      	ldrb	r3, [r7, #27]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d00e      	beq.n	8003c7a <HAL_SPI_TransmitReceive+0x6e>
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c62:	d106      	bne.n	8003c72 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d102      	bne.n	8003c72 <HAL_SPI_TransmitReceive+0x66>
 8003c6c:	7efb      	ldrb	r3, [r7, #27]
 8003c6e:	2b04      	cmp	r3, #4
 8003c70:	d003      	beq.n	8003c7a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003c72:	2302      	movs	r3, #2
 8003c74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003c78:	e1e0      	b.n	800403c <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d005      	beq.n	8003c8c <HAL_SPI_TransmitReceive+0x80>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d002      	beq.n	8003c8c <HAL_SPI_TransmitReceive+0x80>
 8003c86:	887b      	ldrh	r3, [r7, #2]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d103      	bne.n	8003c94 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003c92:	e1d3      	b.n	800403c <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	2b04      	cmp	r3, #4
 8003c9e:	d003      	beq.n	8003ca8 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2205      	movs	r2, #5
 8003ca4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	887a      	ldrh	r2, [r7, #2]
 8003cb8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	887a      	ldrh	r2, [r7, #2]
 8003cc0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	68ba      	ldr	r2, [r7, #8]
 8003cc8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	887a      	ldrh	r2, [r7, #2]
 8003cce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	887a      	ldrh	r2, [r7, #2]
 8003cd4:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003cea:	d802      	bhi.n	8003cf2 <HAL_SPI_TransmitReceive+0xe6>
 8003cec:	8a3b      	ldrh	r3, [r7, #16]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d908      	bls.n	8003d04 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d00:	605a      	str	r2, [r3, #4]
 8003d02:	e007      	b.n	8003d14 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d12:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d1e:	2b40      	cmp	r3, #64	; 0x40
 8003d20:	d007      	beq.n	8003d32 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d30:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d3a:	f240 8081 	bls.w	8003e40 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d002      	beq.n	8003d4c <HAL_SPI_TransmitReceive+0x140>
 8003d46:	8a7b      	ldrh	r3, [r7, #18]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d16d      	bne.n	8003e28 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d50:	881a      	ldrh	r2, [r3, #0]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5c:	1c9a      	adds	r2, r3, #2
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d70:	e05a      	b.n	8003e28 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d11b      	bne.n	8003db8 <HAL_SPI_TransmitReceive+0x1ac>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d016      	beq.n	8003db8 <HAL_SPI_TransmitReceive+0x1ac>
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d113      	bne.n	8003db8 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d94:	881a      	ldrh	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da0:	1c9a      	adds	r2, r3, #2
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	3b01      	subs	r3, #1
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003db4:	2300      	movs	r3, #0
 8003db6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d11c      	bne.n	8003e00 <HAL_SPI_TransmitReceive+0x1f4>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d016      	beq.n	8003e00 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68da      	ldr	r2, [r3, #12]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ddc:	b292      	uxth	r2, r2
 8003dde:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de4:	1c9a      	adds	r2, r3, #2
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	3b01      	subs	r3, #1
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003e00:	f7fd fc22 	bl	8001648 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d80b      	bhi.n	8003e28 <HAL_SPI_TransmitReceive+0x21c>
 8003e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e16:	d007      	beq.n	8003e28 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8003e26:	e109      	b.n	800403c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d19f      	bne.n	8003d72 <HAL_SPI_TransmitReceive+0x166>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d199      	bne.n	8003d72 <HAL_SPI_TransmitReceive+0x166>
 8003e3e:	e0e3      	b.n	8004008 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d003      	beq.n	8003e50 <HAL_SPI_TransmitReceive+0x244>
 8003e48:	8a7b      	ldrh	r3, [r7, #18]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	f040 80cf 	bne.w	8003fee <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d912      	bls.n	8003e80 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5e:	881a      	ldrh	r2, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6a:	1c9a      	adds	r2, r3, #2
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	3b02      	subs	r3, #2
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e7e:	e0b6      	b.n	8003fee <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	330c      	adds	r3, #12
 8003e8a:	7812      	ldrb	r2, [r2, #0]
 8003e8c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e92:	1c5a      	adds	r2, r3, #1
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ea6:	e0a2      	b.n	8003fee <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d134      	bne.n	8003f20 <HAL_SPI_TransmitReceive+0x314>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d02f      	beq.n	8003f20 <HAL_SPI_TransmitReceive+0x314>
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d12c      	bne.n	8003f20 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d912      	bls.n	8003ef6 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed4:	881a      	ldrh	r2, [r3, #0]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee0:	1c9a      	adds	r2, r3, #2
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	3b02      	subs	r3, #2
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ef4:	e012      	b.n	8003f1c <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	330c      	adds	r3, #12
 8003f00:	7812      	ldrb	r2, [r2, #0]
 8003f02:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f08:	1c5a      	adds	r2, r3, #1
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	3b01      	subs	r3, #1
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d148      	bne.n	8003fc0 <HAL_SPI_TransmitReceive+0x3b4>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d042      	beq.n	8003fc0 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d923      	bls.n	8003f8e <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68da      	ldr	r2, [r3, #12]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f50:	b292      	uxth	r2, r2
 8003f52:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f58:	1c9a      	adds	r2, r3, #2
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	3b02      	subs	r3, #2
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d81f      	bhi.n	8003fbc <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f8a:	605a      	str	r2, [r3, #4]
 8003f8c:	e016      	b.n	8003fbc <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f103 020c 	add.w	r2, r3, #12
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9a:	7812      	ldrb	r2, [r2, #0]
 8003f9c:	b2d2      	uxtb	r2, r2
 8003f9e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa4:	1c5a      	adds	r2, r3, #1
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003fc0:	f7fd fb42 	bl	8001648 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d803      	bhi.n	8003fd8 <HAL_SPI_TransmitReceive+0x3cc>
 8003fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd6:	d102      	bne.n	8003fde <HAL_SPI_TransmitReceive+0x3d2>
 8003fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d107      	bne.n	8003fee <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8003fec:	e026      	b.n	800403c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f47f af57 	bne.w	8003ea8 <HAL_SPI_TransmitReceive+0x29c>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004000:	b29b      	uxth	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	f47f af50 	bne.w	8003ea8 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004008:	69fa      	ldr	r2, [r7, #28]
 800400a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	f000 f93d 	bl	800428c <SPI_EndRxTxTransaction>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d005      	beq.n	8004024 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2220      	movs	r2, #32
 8004022:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004028:	2b00      	cmp	r3, #0
 800402a:	d003      	beq.n	8004034 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004032:	e003      	b.n	800403c <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004044:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004048:	4618      	mov	r0, r3
 800404a:	3728      	adds	r7, #40	; 0x28
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b088      	sub	sp, #32
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	603b      	str	r3, [r7, #0]
 800405c:	4613      	mov	r3, r2
 800405e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004060:	f7fd faf2 	bl	8001648 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004068:	1a9b      	subs	r3, r3, r2
 800406a:	683a      	ldr	r2, [r7, #0]
 800406c:	4413      	add	r3, r2
 800406e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004070:	f7fd faea 	bl	8001648 <HAL_GetTick>
 8004074:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004076:	4b39      	ldr	r3, [pc, #228]	; (800415c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	015b      	lsls	r3, r3, #5
 800407c:	0d1b      	lsrs	r3, r3, #20
 800407e:	69fa      	ldr	r2, [r7, #28]
 8004080:	fb02 f303 	mul.w	r3, r2, r3
 8004084:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004086:	e054      	b.n	8004132 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800408e:	d050      	beq.n	8004132 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004090:	f7fd fada 	bl	8001648 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	69fa      	ldr	r2, [r7, #28]
 800409c:	429a      	cmp	r2, r3
 800409e:	d902      	bls.n	80040a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d13d      	bne.n	8004122 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80040b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040be:	d111      	bne.n	80040e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040c8:	d004      	beq.n	80040d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040d2:	d107      	bne.n	80040e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040ec:	d10f      	bne.n	800410e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040fc:	601a      	str	r2, [r3, #0]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800410c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e017      	b.n	8004152 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d101      	bne.n	800412c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004128:	2300      	movs	r3, #0
 800412a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	3b01      	subs	r3, #1
 8004130:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	689a      	ldr	r2, [r3, #8]
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	4013      	ands	r3, r2
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	429a      	cmp	r2, r3
 8004140:	bf0c      	ite	eq
 8004142:	2301      	moveq	r3, #1
 8004144:	2300      	movne	r3, #0
 8004146:	b2db      	uxtb	r3, r3
 8004148:	461a      	mov	r2, r3
 800414a:	79fb      	ldrb	r3, [r7, #7]
 800414c:	429a      	cmp	r2, r3
 800414e:	d19b      	bne.n	8004088 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3720      	adds	r7, #32
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	20000068 	.word	0x20000068

08004160 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b08a      	sub	sp, #40	; 0x28
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
 800416c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800416e:	2300      	movs	r3, #0
 8004170:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004172:	f7fd fa69 	bl	8001648 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417a:	1a9b      	subs	r3, r3, r2
 800417c:	683a      	ldr	r2, [r7, #0]
 800417e:	4413      	add	r3, r2
 8004180:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004182:	f7fd fa61 	bl	8001648 <HAL_GetTick>
 8004186:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	330c      	adds	r3, #12
 800418e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004190:	4b3d      	ldr	r3, [pc, #244]	; (8004288 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	4613      	mov	r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	4413      	add	r3, r2
 800419a:	00da      	lsls	r2, r3, #3
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	0d1b      	lsrs	r3, r3, #20
 80041a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041a2:	fb02 f303 	mul.w	r3, r2, r3
 80041a6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80041a8:	e060      	b.n	800426c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80041b0:	d107      	bne.n	80041c2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d104      	bne.n	80041c2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80041c0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c8:	d050      	beq.n	800426c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041ca:	f7fd fa3d 	bl	8001648 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	6a3b      	ldr	r3, [r7, #32]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d902      	bls.n	80041e0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80041da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d13d      	bne.n	800425c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685a      	ldr	r2, [r3, #4]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80041ee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041f8:	d111      	bne.n	800421e <SPI_WaitFifoStateUntilTimeout+0xbe>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004202:	d004      	beq.n	800420e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800420c:	d107      	bne.n	800421e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800421c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004222:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004226:	d10f      	bne.n	8004248 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004236:	601a      	str	r2, [r3, #0]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004246:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e010      	b.n	800427e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004262:	2300      	movs	r3, #0
 8004264:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	3b01      	subs	r3, #1
 800426a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	689a      	ldr	r2, [r3, #8]
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	4013      	ands	r3, r2
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	429a      	cmp	r2, r3
 800427a:	d196      	bne.n	80041aa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3728      	adds	r7, #40	; 0x28
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	20000068 	.word	0x20000068

0800428c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b086      	sub	sp, #24
 8004290:	af02      	add	r7, sp, #8
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	9300      	str	r3, [sp, #0]
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	2200      	movs	r2, #0
 80042a0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	f7ff ff5b 	bl	8004160 <SPI_WaitFifoStateUntilTimeout>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d007      	beq.n	80042c0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042b4:	f043 0220 	orr.w	r2, r3, #32
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e027      	b.n	8004310 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	9300      	str	r3, [sp, #0]
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	2200      	movs	r2, #0
 80042c8:	2180      	movs	r1, #128	; 0x80
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f7ff fec0 	bl	8004050 <SPI_WaitFlagStateUntilTimeout>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d007      	beq.n	80042e6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042da:	f043 0220 	orr.w	r2, r3, #32
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e014      	b.n	8004310 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	9300      	str	r3, [sp, #0]
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f7ff ff34 	bl	8004160 <SPI_WaitFifoStateUntilTimeout>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d007      	beq.n	800430e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004302:	f043 0220 	orr.w	r2, r3, #32
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e000      	b.n	8004310 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3710      	adds	r7, #16
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e049      	b.n	80043be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d106      	bne.n	8004344 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 f841 	bl	80043c6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2202      	movs	r2, #2
 8004348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	3304      	adds	r3, #4
 8004354:	4619      	mov	r1, r3
 8004356:	4610      	mov	r0, r2
 8004358:	f000 f9da 	bl	8004710 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3708      	adds	r7, #8
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80043c6:	b480      	push	{r7}
 80043c8:	b083      	sub	sp, #12
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80043ce:	bf00      	nop
 80043d0:	370c      	adds	r7, #12
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
	...

080043dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d001      	beq.n	80043f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e04f      	b.n	8004494 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2202      	movs	r2, #2
 80043f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68da      	ldr	r2, [r3, #12]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f042 0201 	orr.w	r2, r2, #1
 800440a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a23      	ldr	r2, [pc, #140]	; (80044a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d01d      	beq.n	8004452 <HAL_TIM_Base_Start_IT+0x76>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800441e:	d018      	beq.n	8004452 <HAL_TIM_Base_Start_IT+0x76>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a1f      	ldr	r2, [pc, #124]	; (80044a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d013      	beq.n	8004452 <HAL_TIM_Base_Start_IT+0x76>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a1e      	ldr	r2, [pc, #120]	; (80044a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d00e      	beq.n	8004452 <HAL_TIM_Base_Start_IT+0x76>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a1c      	ldr	r2, [pc, #112]	; (80044ac <HAL_TIM_Base_Start_IT+0xd0>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d009      	beq.n	8004452 <HAL_TIM_Base_Start_IT+0x76>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a1b      	ldr	r2, [pc, #108]	; (80044b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d004      	beq.n	8004452 <HAL_TIM_Base_Start_IT+0x76>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a19      	ldr	r2, [pc, #100]	; (80044b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d115      	bne.n	800447e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	689a      	ldr	r2, [r3, #8]
 8004458:	4b17      	ldr	r3, [pc, #92]	; (80044b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800445a:	4013      	ands	r3, r2
 800445c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2b06      	cmp	r3, #6
 8004462:	d015      	beq.n	8004490 <HAL_TIM_Base_Start_IT+0xb4>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800446a:	d011      	beq.n	8004490 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f042 0201 	orr.w	r2, r2, #1
 800447a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800447c:	e008      	b.n	8004490 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f042 0201 	orr.w	r2, r2, #1
 800448c:	601a      	str	r2, [r3, #0]
 800448e:	e000      	b.n	8004492 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004490:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3714      	adds	r7, #20
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr
 80044a0:	40012c00 	.word	0x40012c00
 80044a4:	40000400 	.word	0x40000400
 80044a8:	40000800 	.word	0x40000800
 80044ac:	40000c00 	.word	0x40000c00
 80044b0:	40013400 	.word	0x40013400
 80044b4:	40014000 	.word	0x40014000
 80044b8:	00010007 	.word	0x00010007

080044bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d020      	beq.n	8004520 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d01b      	beq.n	8004520 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f06f 0202 	mvn.w	r2, #2
 80044f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2201      	movs	r2, #1
 80044f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	f003 0303 	and.w	r3, r3, #3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d003      	beq.n	800450e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 f8e4 	bl	80046d4 <HAL_TIM_IC_CaptureCallback>
 800450c:	e005      	b.n	800451a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f8d6 	bl	80046c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 f8e7 	bl	80046e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	f003 0304 	and.w	r3, r3, #4
 8004526:	2b00      	cmp	r3, #0
 8004528:	d020      	beq.n	800456c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f003 0304 	and.w	r3, r3, #4
 8004530:	2b00      	cmp	r3, #0
 8004532:	d01b      	beq.n	800456c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f06f 0204 	mvn.w	r2, #4
 800453c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2202      	movs	r2, #2
 8004542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 f8be 	bl	80046d4 <HAL_TIM_IC_CaptureCallback>
 8004558:	e005      	b.n	8004566 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f8b0 	bl	80046c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 f8c1 	bl	80046e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	f003 0308 	and.w	r3, r3, #8
 8004572:	2b00      	cmp	r3, #0
 8004574:	d020      	beq.n	80045b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f003 0308 	and.w	r3, r3, #8
 800457c:	2b00      	cmp	r3, #0
 800457e:	d01b      	beq.n	80045b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f06f 0208 	mvn.w	r2, #8
 8004588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2204      	movs	r2, #4
 800458e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	69db      	ldr	r3, [r3, #28]
 8004596:	f003 0303 	and.w	r3, r3, #3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d003      	beq.n	80045a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f898 	bl	80046d4 <HAL_TIM_IC_CaptureCallback>
 80045a4:	e005      	b.n	80045b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f88a 	bl	80046c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 f89b 	bl	80046e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	f003 0310 	and.w	r3, r3, #16
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d020      	beq.n	8004604 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f003 0310 	and.w	r3, r3, #16
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d01b      	beq.n	8004604 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f06f 0210 	mvn.w	r2, #16
 80045d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2208      	movs	r2, #8
 80045da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	69db      	ldr	r3, [r3, #28]
 80045e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d003      	beq.n	80045f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 f872 	bl	80046d4 <HAL_TIM_IC_CaptureCallback>
 80045f0:	e005      	b.n	80045fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f864 	bl	80046c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 f875 	bl	80046e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00c      	beq.n	8004628 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f003 0301 	and.w	r3, r3, #1
 8004614:	2b00      	cmp	r3, #0
 8004616:	d007      	beq.n	8004628 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f06f 0201 	mvn.w	r2, #1
 8004620:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f7fc fe48 	bl	80012b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00c      	beq.n	800464c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004638:	2b00      	cmp	r3, #0
 800463a:	d007      	beq.n	800464c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 f906 	bl	8004858 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00c      	beq.n	8004670 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800465c:	2b00      	cmp	r3, #0
 800465e:	d007      	beq.n	8004670 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 f8fe 	bl	800486c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00c      	beq.n	8004694 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004680:	2b00      	cmp	r3, #0
 8004682:	d007      	beq.n	8004694 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800468c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 f834 	bl	80046fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	f003 0320 	and.w	r3, r3, #32
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00c      	beq.n	80046b8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f003 0320 	and.w	r3, r3, #32
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d007      	beq.n	80046b8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f06f 0220 	mvn.w	r2, #32
 80046b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f8c6 	bl	8004844 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046b8:	bf00      	nop
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046dc:	bf00      	nop
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a40      	ldr	r2, [pc, #256]	; (8004824 <TIM_Base_SetConfig+0x114>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d013      	beq.n	8004750 <TIM_Base_SetConfig+0x40>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800472e:	d00f      	beq.n	8004750 <TIM_Base_SetConfig+0x40>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a3d      	ldr	r2, [pc, #244]	; (8004828 <TIM_Base_SetConfig+0x118>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d00b      	beq.n	8004750 <TIM_Base_SetConfig+0x40>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a3c      	ldr	r2, [pc, #240]	; (800482c <TIM_Base_SetConfig+0x11c>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d007      	beq.n	8004750 <TIM_Base_SetConfig+0x40>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a3b      	ldr	r2, [pc, #236]	; (8004830 <TIM_Base_SetConfig+0x120>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d003      	beq.n	8004750 <TIM_Base_SetConfig+0x40>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a3a      	ldr	r2, [pc, #232]	; (8004834 <TIM_Base_SetConfig+0x124>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d108      	bne.n	8004762 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004756:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	4313      	orrs	r3, r2
 8004760:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a2f      	ldr	r2, [pc, #188]	; (8004824 <TIM_Base_SetConfig+0x114>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d01f      	beq.n	80047aa <TIM_Base_SetConfig+0x9a>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004770:	d01b      	beq.n	80047aa <TIM_Base_SetConfig+0x9a>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a2c      	ldr	r2, [pc, #176]	; (8004828 <TIM_Base_SetConfig+0x118>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d017      	beq.n	80047aa <TIM_Base_SetConfig+0x9a>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a2b      	ldr	r2, [pc, #172]	; (800482c <TIM_Base_SetConfig+0x11c>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d013      	beq.n	80047aa <TIM_Base_SetConfig+0x9a>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a2a      	ldr	r2, [pc, #168]	; (8004830 <TIM_Base_SetConfig+0x120>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d00f      	beq.n	80047aa <TIM_Base_SetConfig+0x9a>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a29      	ldr	r2, [pc, #164]	; (8004834 <TIM_Base_SetConfig+0x124>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d00b      	beq.n	80047aa <TIM_Base_SetConfig+0x9a>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a28      	ldr	r2, [pc, #160]	; (8004838 <TIM_Base_SetConfig+0x128>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d007      	beq.n	80047aa <TIM_Base_SetConfig+0x9a>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a27      	ldr	r2, [pc, #156]	; (800483c <TIM_Base_SetConfig+0x12c>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d003      	beq.n	80047aa <TIM_Base_SetConfig+0x9a>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a26      	ldr	r2, [pc, #152]	; (8004840 <TIM_Base_SetConfig+0x130>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d108      	bne.n	80047bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	689a      	ldr	r2, [r3, #8]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a10      	ldr	r2, [pc, #64]	; (8004824 <TIM_Base_SetConfig+0x114>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d00f      	beq.n	8004808 <TIM_Base_SetConfig+0xf8>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a12      	ldr	r2, [pc, #72]	; (8004834 <TIM_Base_SetConfig+0x124>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d00b      	beq.n	8004808 <TIM_Base_SetConfig+0xf8>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a11      	ldr	r2, [pc, #68]	; (8004838 <TIM_Base_SetConfig+0x128>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d007      	beq.n	8004808 <TIM_Base_SetConfig+0xf8>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a10      	ldr	r2, [pc, #64]	; (800483c <TIM_Base_SetConfig+0x12c>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d003      	beq.n	8004808 <TIM_Base_SetConfig+0xf8>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a0f      	ldr	r2, [pc, #60]	; (8004840 <TIM_Base_SetConfig+0x130>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d103      	bne.n	8004810 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	691a      	ldr	r2, [r3, #16]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	615a      	str	r2, [r3, #20]
}
 8004816:	bf00      	nop
 8004818:	3714      	adds	r7, #20
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	40012c00 	.word	0x40012c00
 8004828:	40000400 	.word	0x40000400
 800482c:	40000800 	.word	0x40000800
 8004830:	40000c00 	.word	0x40000c00
 8004834:	40013400 	.word	0x40013400
 8004838:	40014000 	.word	0x40014000
 800483c:	40014400 	.word	0x40014400
 8004840:	40014800 	.word	0x40014800

08004844 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <memset>:
 8004880:	4402      	add	r2, r0
 8004882:	4603      	mov	r3, r0
 8004884:	4293      	cmp	r3, r2
 8004886:	d100      	bne.n	800488a <memset+0xa>
 8004888:	4770      	bx	lr
 800488a:	f803 1b01 	strb.w	r1, [r3], #1
 800488e:	e7f9      	b.n	8004884 <memset+0x4>

08004890 <__libc_init_array>:
 8004890:	b570      	push	{r4, r5, r6, lr}
 8004892:	4d0d      	ldr	r5, [pc, #52]	; (80048c8 <__libc_init_array+0x38>)
 8004894:	4c0d      	ldr	r4, [pc, #52]	; (80048cc <__libc_init_array+0x3c>)
 8004896:	1b64      	subs	r4, r4, r5
 8004898:	10a4      	asrs	r4, r4, #2
 800489a:	2600      	movs	r6, #0
 800489c:	42a6      	cmp	r6, r4
 800489e:	d109      	bne.n	80048b4 <__libc_init_array+0x24>
 80048a0:	4d0b      	ldr	r5, [pc, #44]	; (80048d0 <__libc_init_array+0x40>)
 80048a2:	4c0c      	ldr	r4, [pc, #48]	; (80048d4 <__libc_init_array+0x44>)
 80048a4:	f000 f818 	bl	80048d8 <_init>
 80048a8:	1b64      	subs	r4, r4, r5
 80048aa:	10a4      	asrs	r4, r4, #2
 80048ac:	2600      	movs	r6, #0
 80048ae:	42a6      	cmp	r6, r4
 80048b0:	d105      	bne.n	80048be <__libc_init_array+0x2e>
 80048b2:	bd70      	pop	{r4, r5, r6, pc}
 80048b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80048b8:	4798      	blx	r3
 80048ba:	3601      	adds	r6, #1
 80048bc:	e7ee      	b.n	800489c <__libc_init_array+0xc>
 80048be:	f855 3b04 	ldr.w	r3, [r5], #4
 80048c2:	4798      	blx	r3
 80048c4:	3601      	adds	r6, #1
 80048c6:	e7f2      	b.n	80048ae <__libc_init_array+0x1e>
 80048c8:	08004e44 	.word	0x08004e44
 80048cc:	08004e44 	.word	0x08004e44
 80048d0:	08004e44 	.word	0x08004e44
 80048d4:	08004e48 	.word	0x08004e48

080048d8 <_init>:
 80048d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048da:	bf00      	nop
 80048dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048de:	bc08      	pop	{r3}
 80048e0:	469e      	mov	lr, r3
 80048e2:	4770      	bx	lr

080048e4 <_fini>:
 80048e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048e6:	bf00      	nop
 80048e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ea:	bc08      	pop	{r3}
 80048ec:	469e      	mov	lr, r3
 80048ee:	4770      	bx	lr
