
lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000546c  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ac  08005628  08005628  00015628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bd4  08005bd4  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005bd4  08005bd4  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005bd4  08005bd4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bd4  08005bd4  00015bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bd8  08005bd8  00015bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005bdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  20000074  08005c50  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08005c50  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000119fd  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002665  00000000  00000000  00031ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001110  00000000  00000000  00034150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d2d  00000000  00000000  00035260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002af10  00000000  00000000  00035f8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013444  00000000  00000000  00060e9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00109bad  00000000  00000000  000742e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000048e0  00000000  00000000  0017de90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  00182770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000074 	.word	0x20000074
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08005610 	.word	0x08005610

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000078 	.word	0x20000078
 80001f8:	08005610 	.word	0x08005610

080001fc <__aeabi_drsub>:
 80001fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000200:	e002      	b.n	8000208 <__adddf3>
 8000202:	bf00      	nop

08000204 <__aeabi_dsub>:
 8000204:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000208 <__adddf3>:
 8000208:	b530      	push	{r4, r5, lr}
 800020a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800020e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000212:	ea94 0f05 	teq	r4, r5
 8000216:	bf08      	it	eq
 8000218:	ea90 0f02 	teqeq	r0, r2
 800021c:	bf1f      	itttt	ne
 800021e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000222:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000226:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800022e:	f000 80e2 	beq.w	80003f6 <__adddf3+0x1ee>
 8000232:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000236:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023a:	bfb8      	it	lt
 800023c:	426d      	neglt	r5, r5
 800023e:	dd0c      	ble.n	800025a <__adddf3+0x52>
 8000240:	442c      	add	r4, r5
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	ea82 0000 	eor.w	r0, r2, r0
 800024e:	ea83 0101 	eor.w	r1, r3, r1
 8000252:	ea80 0202 	eor.w	r2, r0, r2
 8000256:	ea81 0303 	eor.w	r3, r1, r3
 800025a:	2d36      	cmp	r5, #54	; 0x36
 800025c:	bf88      	it	hi
 800025e:	bd30      	pophi	{r4, r5, pc}
 8000260:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000264:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000268:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800026c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x70>
 8000272:	4240      	negs	r0, r0
 8000274:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000278:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800027c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000280:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x84>
 8000286:	4252      	negs	r2, r2
 8000288:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800028c:	ea94 0f05 	teq	r4, r5
 8000290:	f000 80a7 	beq.w	80003e2 <__adddf3+0x1da>
 8000294:	f1a4 0401 	sub.w	r4, r4, #1
 8000298:	f1d5 0e20 	rsbs	lr, r5, #32
 800029c:	db0d      	blt.n	80002ba <__adddf3+0xb2>
 800029e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a2:	fa22 f205 	lsr.w	r2, r2, r5
 80002a6:	1880      	adds	r0, r0, r2
 80002a8:	f141 0100 	adc.w	r1, r1, #0
 80002ac:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b0:	1880      	adds	r0, r0, r2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	4159      	adcs	r1, r3
 80002b8:	e00e      	b.n	80002d8 <__adddf3+0xd0>
 80002ba:	f1a5 0520 	sub.w	r5, r5, #32
 80002be:	f10e 0e20 	add.w	lr, lr, #32
 80002c2:	2a01      	cmp	r2, #1
 80002c4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002c8:	bf28      	it	cs
 80002ca:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	18c0      	adds	r0, r0, r3
 80002d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002dc:	d507      	bpl.n	80002ee <__adddf3+0xe6>
 80002de:	f04f 0e00 	mov.w	lr, #0
 80002e2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002e6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ea:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f2:	d31b      	bcc.n	800032c <__adddf3+0x124>
 80002f4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002f8:	d30c      	bcc.n	8000314 <__adddf3+0x10c>
 80002fa:	0849      	lsrs	r1, r1, #1
 80002fc:	ea5f 0030 	movs.w	r0, r0, rrx
 8000300:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000304:	f104 0401 	add.w	r4, r4, #1
 8000308:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800030c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000310:	f080 809a 	bcs.w	8000448 <__adddf3+0x240>
 8000314:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000318:	bf08      	it	eq
 800031a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800031e:	f150 0000 	adcs.w	r0, r0, #0
 8000322:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000326:	ea41 0105 	orr.w	r1, r1, r5
 800032a:	bd30      	pop	{r4, r5, pc}
 800032c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000330:	4140      	adcs	r0, r0
 8000332:	eb41 0101 	adc.w	r1, r1, r1
 8000336:	3c01      	subs	r4, #1
 8000338:	bf28      	it	cs
 800033a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800033e:	d2e9      	bcs.n	8000314 <__adddf3+0x10c>
 8000340:	f091 0f00 	teq	r1, #0
 8000344:	bf04      	itt	eq
 8000346:	4601      	moveq	r1, r0
 8000348:	2000      	moveq	r0, #0
 800034a:	fab1 f381 	clz	r3, r1
 800034e:	bf08      	it	eq
 8000350:	3320      	addeq	r3, #32
 8000352:	f1a3 030b 	sub.w	r3, r3, #11
 8000356:	f1b3 0220 	subs.w	r2, r3, #32
 800035a:	da0c      	bge.n	8000376 <__adddf3+0x16e>
 800035c:	320c      	adds	r2, #12
 800035e:	dd08      	ble.n	8000372 <__adddf3+0x16a>
 8000360:	f102 0c14 	add.w	ip, r2, #20
 8000364:	f1c2 020c 	rsb	r2, r2, #12
 8000368:	fa01 f00c 	lsl.w	r0, r1, ip
 800036c:	fa21 f102 	lsr.w	r1, r1, r2
 8000370:	e00c      	b.n	800038c <__adddf3+0x184>
 8000372:	f102 0214 	add.w	r2, r2, #20
 8000376:	bfd8      	it	le
 8000378:	f1c2 0c20 	rsble	ip, r2, #32
 800037c:	fa01 f102 	lsl.w	r1, r1, r2
 8000380:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000384:	bfdc      	itt	le
 8000386:	ea41 010c 	orrle.w	r1, r1, ip
 800038a:	4090      	lslle	r0, r2
 800038c:	1ae4      	subs	r4, r4, r3
 800038e:	bfa2      	ittt	ge
 8000390:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000394:	4329      	orrge	r1, r5
 8000396:	bd30      	popge	{r4, r5, pc}
 8000398:	ea6f 0404 	mvn.w	r4, r4
 800039c:	3c1f      	subs	r4, #31
 800039e:	da1c      	bge.n	80003da <__adddf3+0x1d2>
 80003a0:	340c      	adds	r4, #12
 80003a2:	dc0e      	bgt.n	80003c2 <__adddf3+0x1ba>
 80003a4:	f104 0414 	add.w	r4, r4, #20
 80003a8:	f1c4 0220 	rsb	r2, r4, #32
 80003ac:	fa20 f004 	lsr.w	r0, r0, r4
 80003b0:	fa01 f302 	lsl.w	r3, r1, r2
 80003b4:	ea40 0003 	orr.w	r0, r0, r3
 80003b8:	fa21 f304 	lsr.w	r3, r1, r4
 80003bc:	ea45 0103 	orr.w	r1, r5, r3
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	f1c4 040c 	rsb	r4, r4, #12
 80003c6:	f1c4 0220 	rsb	r2, r4, #32
 80003ca:	fa20 f002 	lsr.w	r0, r0, r2
 80003ce:	fa01 f304 	lsl.w	r3, r1, r4
 80003d2:	ea40 0003 	orr.w	r0, r0, r3
 80003d6:	4629      	mov	r1, r5
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	fa21 f004 	lsr.w	r0, r1, r4
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	f094 0f00 	teq	r4, #0
 80003e6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ea:	bf06      	itte	eq
 80003ec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f0:	3401      	addeq	r4, #1
 80003f2:	3d01      	subne	r5, #1
 80003f4:	e74e      	b.n	8000294 <__adddf3+0x8c>
 80003f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fa:	bf18      	it	ne
 80003fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000400:	d029      	beq.n	8000456 <__adddf3+0x24e>
 8000402:	ea94 0f05 	teq	r4, r5
 8000406:	bf08      	it	eq
 8000408:	ea90 0f02 	teqeq	r0, r2
 800040c:	d005      	beq.n	800041a <__adddf3+0x212>
 800040e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000412:	bf04      	itt	eq
 8000414:	4619      	moveq	r1, r3
 8000416:	4610      	moveq	r0, r2
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	ea91 0f03 	teq	r1, r3
 800041e:	bf1e      	ittt	ne
 8000420:	2100      	movne	r1, #0
 8000422:	2000      	movne	r0, #0
 8000424:	bd30      	popne	{r4, r5, pc}
 8000426:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042a:	d105      	bne.n	8000438 <__adddf3+0x230>
 800042c:	0040      	lsls	r0, r0, #1
 800042e:	4149      	adcs	r1, r1
 8000430:	bf28      	it	cs
 8000432:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000436:	bd30      	pop	{r4, r5, pc}
 8000438:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800043c:	bf3c      	itt	cc
 800043e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000442:	bd30      	popcc	{r4, r5, pc}
 8000444:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000448:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800044c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000450:	f04f 0000 	mov.w	r0, #0
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045a:	bf1a      	itte	ne
 800045c:	4619      	movne	r1, r3
 800045e:	4610      	movne	r0, r2
 8000460:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000464:	bf1c      	itt	ne
 8000466:	460b      	movne	r3, r1
 8000468:	4602      	movne	r2, r0
 800046a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800046e:	bf06      	itte	eq
 8000470:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000474:	ea91 0f03 	teqeq	r1, r3
 8000478:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	bf00      	nop

08000480 <__aeabi_ui2d>:
 8000480:	f090 0f00 	teq	r0, #0
 8000484:	bf04      	itt	eq
 8000486:	2100      	moveq	r1, #0
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000490:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000494:	f04f 0500 	mov.w	r5, #0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e750      	b.n	8000340 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_i2d>:
 80004a0:	f090 0f00 	teq	r0, #0
 80004a4:	bf04      	itt	eq
 80004a6:	2100      	moveq	r1, #0
 80004a8:	4770      	bxeq	lr
 80004aa:	b530      	push	{r4, r5, lr}
 80004ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004b8:	bf48      	it	mi
 80004ba:	4240      	negmi	r0, r0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e73e      	b.n	8000340 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_f2d>:
 80004c4:	0042      	lsls	r2, r0, #1
 80004c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ca:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d2:	bf1f      	itttt	ne
 80004d4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004dc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e0:	4770      	bxne	lr
 80004e2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004e6:	bf08      	it	eq
 80004e8:	4770      	bxeq	lr
 80004ea:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ee:	bf04      	itt	eq
 80004f0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f4:	4770      	bxeq	lr
 80004f6:	b530      	push	{r4, r5, lr}
 80004f8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000500:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000504:	e71c      	b.n	8000340 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_ul2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f04f 0500 	mov.w	r5, #0
 8000516:	e00a      	b.n	800052e <__aeabi_l2d+0x16>

08000518 <__aeabi_l2d>:
 8000518:	ea50 0201 	orrs.w	r2, r0, r1
 800051c:	bf08      	it	eq
 800051e:	4770      	bxeq	lr
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000526:	d502      	bpl.n	800052e <__aeabi_l2d+0x16>
 8000528:	4240      	negs	r0, r0
 800052a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800052e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000532:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000536:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053a:	f43f aed8 	beq.w	80002ee <__adddf3+0xe6>
 800053e:	f04f 0203 	mov.w	r2, #3
 8000542:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000546:	bf18      	it	ne
 8000548:	3203      	addne	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000556:	f1c2 0320 	rsb	r3, r2, #32
 800055a:	fa00 fc03 	lsl.w	ip, r0, r3
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 fe03 	lsl.w	lr, r1, r3
 8000566:	ea40 000e 	orr.w	r0, r0, lr
 800056a:	fa21 f102 	lsr.w	r1, r1, r2
 800056e:	4414      	add	r4, r2
 8000570:	e6bd      	b.n	80002ee <__adddf3+0xe6>
 8000572:	bf00      	nop

08000574 <__aeabi_dmul>:
 8000574:	b570      	push	{r4, r5, r6, lr}
 8000576:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800057e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000582:	bf1d      	ittte	ne
 8000584:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000588:	ea94 0f0c 	teqne	r4, ip
 800058c:	ea95 0f0c 	teqne	r5, ip
 8000590:	f000 f8de 	bleq	8000750 <__aeabi_dmul+0x1dc>
 8000594:	442c      	add	r4, r5
 8000596:	ea81 0603 	eor.w	r6, r1, r3
 800059a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800059e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005a6:	bf18      	it	ne
 80005a8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b4:	d038      	beq.n	8000628 <__aeabi_dmul+0xb4>
 80005b6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ba:	f04f 0500 	mov.w	r5, #0
 80005be:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005c6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ca:	f04f 0600 	mov.w	r6, #0
 80005ce:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d2:	f09c 0f00 	teq	ip, #0
 80005d6:	bf18      	it	ne
 80005d8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005dc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005e8:	d204      	bcs.n	80005f4 <__aeabi_dmul+0x80>
 80005ea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ee:	416d      	adcs	r5, r5
 80005f0:	eb46 0606 	adc.w	r6, r6, r6
 80005f4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005f8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005fc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000600:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000604:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000608:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800060c:	bf88      	it	hi
 800060e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000612:	d81e      	bhi.n	8000652 <__aeabi_dmul+0xde>
 8000614:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000618:	bf08      	it	eq
 800061a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800061e:	f150 0000 	adcs.w	r0, r0, #0
 8000622:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800062c:	ea46 0101 	orr.w	r1, r6, r1
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	ea81 0103 	eor.w	r1, r1, r3
 8000638:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800063c:	bfc2      	ittt	gt
 800063e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000642:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000646:	bd70      	popgt	{r4, r5, r6, pc}
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800064c:	f04f 0e00 	mov.w	lr, #0
 8000650:	3c01      	subs	r4, #1
 8000652:	f300 80ab 	bgt.w	80007ac <__aeabi_dmul+0x238>
 8000656:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065a:	bfde      	ittt	le
 800065c:	2000      	movle	r0, #0
 800065e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000662:	bd70      	pople	{r4, r5, r6, pc}
 8000664:	f1c4 0400 	rsb	r4, r4, #0
 8000668:	3c20      	subs	r4, #32
 800066a:	da35      	bge.n	80006d8 <__aeabi_dmul+0x164>
 800066c:	340c      	adds	r4, #12
 800066e:	dc1b      	bgt.n	80006a8 <__aeabi_dmul+0x134>
 8000670:	f104 0414 	add.w	r4, r4, #20
 8000674:	f1c4 0520 	rsb	r5, r4, #32
 8000678:	fa00 f305 	lsl.w	r3, r0, r5
 800067c:	fa20 f004 	lsr.w	r0, r0, r4
 8000680:	fa01 f205 	lsl.w	r2, r1, r5
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800068c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	fa21 f604 	lsr.w	r6, r1, r4
 8000698:	eb42 0106 	adc.w	r1, r2, r6
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f1c4 040c 	rsb	r4, r4, #12
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f304 	lsl.w	r3, r0, r4
 80006b4:	fa20 f005 	lsr.w	r0, r0, r5
 80006b8:	fa01 f204 	lsl.w	r2, r1, r4
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	f141 0100 	adc.w	r1, r1, #0
 80006cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d0:	bf08      	it	eq
 80006d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d6:	bd70      	pop	{r4, r5, r6, pc}
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f205 	lsl.w	r2, r0, r5
 80006e0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e4:	fa20 f304 	lsr.w	r3, r0, r4
 80006e8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ec:	ea43 0302 	orr.w	r3, r3, r2
 80006f0:	fa21 f004 	lsr.w	r0, r1, r4
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	fa21 f204 	lsr.w	r2, r1, r4
 80006fc:	ea20 0002 	bic.w	r0, r0, r2
 8000700:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f094 0f00 	teq	r4, #0
 8000714:	d10f      	bne.n	8000736 <__aeabi_dmul+0x1c2>
 8000716:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071a:	0040      	lsls	r0, r0, #1
 800071c:	eb41 0101 	adc.w	r1, r1, r1
 8000720:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000724:	bf08      	it	eq
 8000726:	3c01      	subeq	r4, #1
 8000728:	d0f7      	beq.n	800071a <__aeabi_dmul+0x1a6>
 800072a:	ea41 0106 	orr.w	r1, r1, r6
 800072e:	f095 0f00 	teq	r5, #0
 8000732:	bf18      	it	ne
 8000734:	4770      	bxne	lr
 8000736:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073a:	0052      	lsls	r2, r2, #1
 800073c:	eb43 0303 	adc.w	r3, r3, r3
 8000740:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000744:	bf08      	it	eq
 8000746:	3d01      	subeq	r5, #1
 8000748:	d0f7      	beq.n	800073a <__aeabi_dmul+0x1c6>
 800074a:	ea43 0306 	orr.w	r3, r3, r6
 800074e:	4770      	bx	lr
 8000750:	ea94 0f0c 	teq	r4, ip
 8000754:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000758:	bf18      	it	ne
 800075a:	ea95 0f0c 	teqne	r5, ip
 800075e:	d00c      	beq.n	800077a <__aeabi_dmul+0x206>
 8000760:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000764:	bf18      	it	ne
 8000766:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076a:	d1d1      	bne.n	8000710 <__aeabi_dmul+0x19c>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f04f 0000 	mov.w	r0, #0
 8000778:	bd70      	pop	{r4, r5, r6, pc}
 800077a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800077e:	bf06      	itte	eq
 8000780:	4610      	moveq	r0, r2
 8000782:	4619      	moveq	r1, r3
 8000784:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000788:	d019      	beq.n	80007be <__aeabi_dmul+0x24a>
 800078a:	ea94 0f0c 	teq	r4, ip
 800078e:	d102      	bne.n	8000796 <__aeabi_dmul+0x222>
 8000790:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000794:	d113      	bne.n	80007be <__aeabi_dmul+0x24a>
 8000796:	ea95 0f0c 	teq	r5, ip
 800079a:	d105      	bne.n	80007a8 <__aeabi_dmul+0x234>
 800079c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a0:	bf1c      	itt	ne
 80007a2:	4610      	movne	r0, r2
 80007a4:	4619      	movne	r1, r3
 80007a6:	d10a      	bne.n	80007be <__aeabi_dmul+0x24a>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007c6:	bd70      	pop	{r4, r5, r6, pc}

080007c8 <__aeabi_ddiv>:
 80007c8:	b570      	push	{r4, r5, r6, lr}
 80007ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007d6:	bf1d      	ittte	ne
 80007d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007dc:	ea94 0f0c 	teqne	r4, ip
 80007e0:	ea95 0f0c 	teqne	r5, ip
 80007e4:	f000 f8a7 	bleq	8000936 <__aeabi_ddiv+0x16e>
 80007e8:	eba4 0405 	sub.w	r4, r4, r5
 80007ec:	ea81 0e03 	eor.w	lr, r1, r3
 80007f0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007f8:	f000 8088 	beq.w	800090c <__aeabi_ddiv+0x144>
 80007fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000800:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000804:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000808:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800080c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000810:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000814:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000818:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800081c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000820:	429d      	cmp	r5, r3
 8000822:	bf08      	it	eq
 8000824:	4296      	cmpeq	r6, r2
 8000826:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800082e:	d202      	bcs.n	8000836 <__aeabi_ddiv+0x6e>
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	1ab6      	subs	r6, r6, r2
 8000838:	eb65 0503 	sbc.w	r5, r5, r3
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000846:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 000c 	orrcs.w	r0, r0, ip
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000892:	ebb6 0e02 	subs.w	lr, r6, r2
 8000896:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089a:	bf22      	ittt	cs
 800089c:	1ab6      	subcs	r6, r6, r2
 800089e:	4675      	movcs	r5, lr
 80008a0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a4:	ea55 0e06 	orrs.w	lr, r5, r6
 80008a8:	d018      	beq.n	80008dc <__aeabi_ddiv+0x114>
 80008aa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008b6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008be:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008c6:	d1c0      	bne.n	800084a <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	d10b      	bne.n	80008e6 <__aeabi_ddiv+0x11e>
 80008ce:	ea41 0100 	orr.w	r1, r1, r0
 80008d2:	f04f 0000 	mov.w	r0, #0
 80008d6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008da:	e7b6      	b.n	800084a <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	bf04      	itt	eq
 80008e2:	4301      	orreq	r1, r0
 80008e4:	2000      	moveq	r0, #0
 80008e6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ea:	bf88      	it	hi
 80008ec:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f0:	f63f aeaf 	bhi.w	8000652 <__aeabi_dmul+0xde>
 80008f4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008f8:	bf04      	itt	eq
 80008fa:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000902:	f150 0000 	adcs.w	r0, r0, #0
 8000906:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090a:	bd70      	pop	{r4, r5, r6, pc}
 800090c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000910:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000914:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000918:	bfc2      	ittt	gt
 800091a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800091e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000922:	bd70      	popgt	{r4, r5, r6, pc}
 8000924:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000928:	f04f 0e00 	mov.w	lr, #0
 800092c:	3c01      	subs	r4, #1
 800092e:	e690      	b.n	8000652 <__aeabi_dmul+0xde>
 8000930:	ea45 0e06 	orr.w	lr, r5, r6
 8000934:	e68d      	b.n	8000652 <__aeabi_dmul+0xde>
 8000936:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093a:	ea94 0f0c 	teq	r4, ip
 800093e:	bf08      	it	eq
 8000940:	ea95 0f0c 	teqeq	r5, ip
 8000944:	f43f af3b 	beq.w	80007be <__aeabi_dmul+0x24a>
 8000948:	ea94 0f0c 	teq	r4, ip
 800094c:	d10a      	bne.n	8000964 <__aeabi_ddiv+0x19c>
 800094e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000952:	f47f af34 	bne.w	80007be <__aeabi_dmul+0x24a>
 8000956:	ea95 0f0c 	teq	r5, ip
 800095a:	f47f af25 	bne.w	80007a8 <__aeabi_dmul+0x234>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e72c      	b.n	80007be <__aeabi_dmul+0x24a>
 8000964:	ea95 0f0c 	teq	r5, ip
 8000968:	d106      	bne.n	8000978 <__aeabi_ddiv+0x1b0>
 800096a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800096e:	f43f aefd 	beq.w	800076c <__aeabi_dmul+0x1f8>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e722      	b.n	80007be <__aeabi_dmul+0x24a>
 8000978:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800097c:	bf18      	it	ne
 800097e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000982:	f47f aec5 	bne.w	8000710 <__aeabi_dmul+0x19c>
 8000986:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098a:	f47f af0d 	bne.w	80007a8 <__aeabi_dmul+0x234>
 800098e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000992:	f47f aeeb 	bne.w	800076c <__aeabi_dmul+0x1f8>
 8000996:	e712      	b.n	80007be <__aeabi_dmul+0x24a>

08000998 <__aeabi_d2iz>:
 8000998:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800099c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009a0:	d215      	bcs.n	80009ce <__aeabi_d2iz+0x36>
 80009a2:	d511      	bpl.n	80009c8 <__aeabi_d2iz+0x30>
 80009a4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009a8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009ac:	d912      	bls.n	80009d4 <__aeabi_d2iz+0x3c>
 80009ae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009b6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009be:	fa23 f002 	lsr.w	r0, r3, r2
 80009c2:	bf18      	it	ne
 80009c4:	4240      	negne	r0, r0
 80009c6:	4770      	bx	lr
 80009c8:	f04f 0000 	mov.w	r0, #0
 80009cc:	4770      	bx	lr
 80009ce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009d2:	d105      	bne.n	80009e0 <__aeabi_d2iz+0x48>
 80009d4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009d8:	bf08      	it	eq
 80009da:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009de:	4770      	bx	lr
 80009e0:	f04f 0000 	mov.w	r0, #0
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <uint16_to_bytes>:
  }
#endif

// Probably going to move these to a different file, but for now
void uint16_to_bytes(uint16_t in, uint8_t *out)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	6039      	str	r1, [r7, #0]
 80009f2:	80fb      	strh	r3, [r7, #6]
	out[0] = (in >> 8) & 0xFF;
 80009f4:	88fb      	ldrh	r3, [r7, #6]
 80009f6:	0a1b      	lsrs	r3, r3, #8
 80009f8:	b29b      	uxth	r3, r3
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	701a      	strb	r2, [r3, #0]
	out[1] = in & 0xFF;
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	3301      	adds	r3, #1
 8000a04:	88fa      	ldrh	r2, [r7, #6]
 8000a06:	b2d2      	uxtb	r2, r2
 8000a08:	701a      	strb	r2, [r3, #0]
}
 8000a0a:	bf00      	nop
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
	...

08000a18 <LCD_reset>:
	HX8357_DISPON, 0x80 +  50/5, // Main screen turn on, delay 50 ms
	0,                           // END OF COMMAND LIST
  };

void LCD_reset()
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a22:	480d      	ldr	r0, [pc, #52]	; (8000a58 <LCD_reset+0x40>)
 8000a24:	f001 fef4 	bl	8002810 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000a28:	2064      	movs	r0, #100	; 0x64
 8000a2a:	f001 fc59 	bl	80022e0 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a34:	4808      	ldr	r0, [pc, #32]	; (8000a58 <LCD_reset+0x40>)
 8000a36:	f001 feeb 	bl	8002810 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000a3a:	2064      	movs	r0, #100	; 0x64
 8000a3c:	f001 fc50 	bl	80022e0 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8000a40:	2201      	movs	r2, #1
 8000a42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a46:	4804      	ldr	r0, [pc, #16]	; (8000a58 <LCD_reset+0x40>)
 8000a48:	f001 fee2 	bl	8002810 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000a4c:	20c8      	movs	r0, #200	; 0xc8
 8000a4e:	f001 fc47 	bl	80022e0 <HAL_Delay>
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	48001400 	.word	0x48001400

08000a5c <LCD_writeCommand>:

HAL_StatusTypeDef LCD_writeCommand(SPI_HandleTypeDef* spi, uint8_t cmd)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af02      	add	r7, sp, #8
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	460b      	mov	r3, r1
 8000a66:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef result;
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a6e:	480c      	ldr	r0, [pc, #48]	; (8000aa0 <LCD_writeCommand+0x44>)
 8000a70:	f001 fece 	bl	8002810 <HAL_GPIO_WritePin>
	uint8_t buf[1];
	result = HAL_SPI_TransmitReceive(spi, &cmd, &buf[0], 1, 100);
 8000a74:	f107 020c 	add.w	r2, r7, #12
 8000a78:	1cf9      	adds	r1, r7, #3
 8000a7a:	2364      	movs	r3, #100	; 0x64
 8000a7c:	9300      	str	r3, [sp, #0]
 8000a7e:	2301      	movs	r3, #1
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f003 ff03 	bl	800488c <HAL_SPI_TransmitReceive>
 8000a86:	4603      	mov	r3, r0
 8000a88:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a90:	4803      	ldr	r0, [pc, #12]	; (8000aa0 <LCD_writeCommand+0x44>)
 8000a92:	f001 febd 	bl	8002810 <HAL_GPIO_WritePin>
	return result;
 8000a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3710      	adds	r7, #16
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	48001400 	.word	0x48001400

08000aa4 <LCD_startWrite>:

void LCD_startWrite()
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aae:	4802      	ldr	r0, [pc, #8]	; (8000ab8 <LCD_startWrite+0x14>)
 8000ab0:	f001 feae 	bl	8002810 <HAL_GPIO_WritePin>
}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	48001400 	.word	0x48001400

08000abc <LCD_endWrite>:

void LCD_endWrite()
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ac6:	4802      	ldr	r0, [pc, #8]	; (8000ad0 <LCD_endWrite+0x14>)
 8000ac8:	f001 fea2 	bl	8002810 <HAL_GPIO_WritePin>
}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	48001400 	.word	0x48001400

08000ad4 <LCD_begin>:

int LCD_begin(SPI_HandleTypeDef* spi)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
	LCD_reset();
 8000adc:	f7ff ff9c 	bl	8000a18 <LCD_reset>
	LCD_startWrite();
 8000ae0:	f7ff ffe0 	bl	8000aa4 <LCD_startWrite>
	uint8_t *addr = init;
 8000ae4:	4b26      	ldr	r3, [pc, #152]	; (8000b80 <LCD_begin+0xac>)
 8000ae6:	60fb      	str	r3, [r7, #12]
	uint8_t cmd, x, numArgs;
	HAL_StatusTypeDef result;
	while((cmd = *(addr++)) > 0) // '0' command ends list
 8000ae8:	e03b      	b.n	8000b62 <LCD_begin+0x8e>
	{
		if (cmd != 0xFF) // '255' is ignored
 8000aea:	7abb      	ldrb	r3, [r7, #10]
 8000aec:	2bff      	cmp	r3, #255	; 0xff
 8000aee:	d00d      	beq.n	8000b0c <LCD_begin+0x38>
		{
			result = LCD_writeCommand(spi, cmd);
 8000af0:	7abb      	ldrb	r3, [r7, #10]
 8000af2:	4619      	mov	r1, r3
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f7ff ffb1 	bl	8000a5c <LCD_writeCommand>
 8000afa:	4603      	mov	r3, r0
 8000afc:	727b      	strb	r3, [r7, #9]
			if (result != HAL_OK)
 8000afe:	7a7b      	ldrb	r3, [r7, #9]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d003      	beq.n	8000b0c <LCD_begin+0x38>
			{
				LCD_endWrite();
 8000b04:	f7ff ffda 	bl	8000abc <LCD_endWrite>
				return 0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	e035      	b.n	8000b78 <LCD_begin+0xa4>
			}
		}
		x = *(addr++);
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	1c5a      	adds	r2, r3, #1
 8000b10:	60fa      	str	r2, [r7, #12]
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	723b      	strb	r3, [r7, #8]
		numArgs = x & 0x7F;
 8000b16:	7a3b      	ldrb	r3, [r7, #8]
 8000b18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b1c:	72fb      	strb	r3, [r7, #11]
		if (x & 0x80) // If high bit set...
 8000b1e:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	da18      	bge.n	8000b58 <LCD_begin+0x84>
		{
			HAL_Delay(numArgs * 5); // numArgs is actually a delay time (5ms units)
 8000b26:	7afa      	ldrb	r2, [r7, #11]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	4413      	add	r3, r2
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f001 fbd6 	bl	80022e0 <HAL_Delay>
 8000b34:	e015      	b.n	8000b62 <LCD_begin+0x8e>
		}
		else // Otherwise, issue args to command...
		{
			while (numArgs--)
			{
				result = HAL_SPI_Transmit(spi, addr++, 1, 100);
 8000b36:	68f9      	ldr	r1, [r7, #12]
 8000b38:	1c4b      	adds	r3, r1, #1
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	2364      	movs	r3, #100	; 0x64
 8000b3e:	2201      	movs	r2, #1
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f003 fd2e 	bl	80045a2 <HAL_SPI_Transmit>
 8000b46:	4603      	mov	r3, r0
 8000b48:	727b      	strb	r3, [r7, #9]
				if (result != HAL_OK)
 8000b4a:	7a7b      	ldrb	r3, [r7, #9]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d003      	beq.n	8000b58 <LCD_begin+0x84>
				{
					LCD_endWrite();
 8000b50:	f7ff ffb4 	bl	8000abc <LCD_endWrite>
					return 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	e00f      	b.n	8000b78 <LCD_begin+0xa4>
			while (numArgs--)
 8000b58:	7afb      	ldrb	r3, [r7, #11]
 8000b5a:	1e5a      	subs	r2, r3, #1
 8000b5c:	72fa      	strb	r2, [r7, #11]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d1e9      	bne.n	8000b36 <LCD_begin+0x62>
	while((cmd = *(addr++)) > 0) // '0' command ends list
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	1c5a      	adds	r2, r3, #1
 8000b66:	60fa      	str	r2, [r7, #12]
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	72bb      	strb	r3, [r7, #10]
 8000b6c:	7abb      	ldrb	r3, [r7, #10]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d1bb      	bne.n	8000aea <LCD_begin+0x16>
				}
			}
		}
	}
	LCD_endWrite();
 8000b72:	f7ff ffa3 	bl	8000abc <LCD_endWrite>
	return 1;
 8000b76:	2301      	movs	r3, #1
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000000 	.word	0x20000000

08000b84 <LCD_setAddrWindow>:
	LCD_endWrite();
	return result == HAL_OK;
}

int LCD_setAddrWindow(SPI_HandleTypeDef* spi, uint16_t x1, uint16_t y1, uint16_t w, uint16_t h)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	4608      	mov	r0, r1
 8000b8e:	4611      	mov	r1, r2
 8000b90:	461a      	mov	r2, r3
 8000b92:	4603      	mov	r3, r0
 8000b94:	817b      	strh	r3, [r7, #10]
 8000b96:	460b      	mov	r3, r1
 8000b98:	813b      	strh	r3, [r7, #8]
 8000b9a:	4613      	mov	r3, r2
 8000b9c:	80fb      	strh	r3, [r7, #6]
	uint16_t x2 = x1 + w - 1;
 8000b9e:	897a      	ldrh	r2, [r7, #10]
 8000ba0:	88fb      	ldrh	r3, [r7, #6]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	82fb      	strh	r3, [r7, #22]
	uint16_t y2 = y1 + h - 1;
 8000baa:	893a      	ldrh	r2, [r7, #8]
 8000bac:	8c3b      	ldrh	r3, [r7, #32]
 8000bae:	4413      	add	r3, r2
 8000bb0:	b29b      	uxth	r3, r3
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	82bb      	strh	r3, [r7, #20]
	uint8_t buf[2];

	LCD_startWrite();
 8000bb6:	f7ff ff75 	bl	8000aa4 <LCD_startWrite>
	LCD_writeCommand(spi, HX8357_CASET); // Column address set
 8000bba:	212a      	movs	r1, #42	; 0x2a
 8000bbc:	68f8      	ldr	r0, [r7, #12]
 8000bbe:	f7ff ff4d 	bl	8000a5c <LCD_writeCommand>

	uint16_to_bytes(x1, buf);
 8000bc2:	f107 0210 	add.w	r2, r7, #16
 8000bc6:	897b      	ldrh	r3, [r7, #10]
 8000bc8:	4611      	mov	r1, r2
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff ff0c 	bl	80009e8 <uint16_to_bytes>
	HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 8000bd0:	f107 0110 	add.w	r1, r7, #16
 8000bd4:	2364      	movs	r3, #100	; 0x64
 8000bd6:	2202      	movs	r2, #2
 8000bd8:	68f8      	ldr	r0, [r7, #12]
 8000bda:	f003 fce2 	bl	80045a2 <HAL_SPI_Transmit>

	uint16_to_bytes(x2, buf);
 8000bde:	f107 0210 	add.w	r2, r7, #16
 8000be2:	8afb      	ldrh	r3, [r7, #22]
 8000be4:	4611      	mov	r1, r2
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff fefe 	bl	80009e8 <uint16_to_bytes>
	HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 8000bec:	f107 0110 	add.w	r1, r7, #16
 8000bf0:	2364      	movs	r3, #100	; 0x64
 8000bf2:	2202      	movs	r2, #2
 8000bf4:	68f8      	ldr	r0, [r7, #12]
 8000bf6:	f003 fcd4 	bl	80045a2 <HAL_SPI_Transmit>

	LCD_writeCommand(spi, HX8357_PASET); // Row address set
 8000bfa:	212b      	movs	r1, #43	; 0x2b
 8000bfc:	68f8      	ldr	r0, [r7, #12]
 8000bfe:	f7ff ff2d 	bl	8000a5c <LCD_writeCommand>

	uint16_to_bytes(y1, buf);
 8000c02:	f107 0210 	add.w	r2, r7, #16
 8000c06:	893b      	ldrh	r3, [r7, #8]
 8000c08:	4611      	mov	r1, r2
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff feec 	bl	80009e8 <uint16_to_bytes>
	HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 8000c10:	f107 0110 	add.w	r1, r7, #16
 8000c14:	2364      	movs	r3, #100	; 0x64
 8000c16:	2202      	movs	r2, #2
 8000c18:	68f8      	ldr	r0, [r7, #12]
 8000c1a:	f003 fcc2 	bl	80045a2 <HAL_SPI_Transmit>

	uint16_to_bytes(y2, buf);
 8000c1e:	f107 0210 	add.w	r2, r7, #16
 8000c22:	8abb      	ldrh	r3, [r7, #20]
 8000c24:	4611      	mov	r1, r2
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff fede 	bl	80009e8 <uint16_to_bytes>
	HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 8000c2c:	f107 0110 	add.w	r1, r7, #16
 8000c30:	2364      	movs	r3, #100	; 0x64
 8000c32:	2202      	movs	r2, #2
 8000c34:	68f8      	ldr	r0, [r7, #12]
 8000c36:	f003 fcb4 	bl	80045a2 <HAL_SPI_Transmit>

	LCD_endWrite();
 8000c3a:	f7ff ff3f 	bl	8000abc <LCD_endWrite>
	return 1;
 8000c3e:	2301      	movs	r3, #1
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3718      	adds	r7, #24
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <LCD_color565>:

uint16_t LCD_color565(uint8_t red, uint8_t green, uint8_t blue) {
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
 8000c52:	460b      	mov	r3, r1
 8000c54:	71bb      	strb	r3, [r7, #6]
 8000c56:	4613      	mov	r3, r2
 8000c58:	717b      	strb	r3, [r7, #5]
    return ((red & 0xF8) << 8) | ((green & 0xFC) << 3) | ((blue & 0xF8) >> 3);
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	021b      	lsls	r3, r3, #8
 8000c5e:	b21b      	sxth	r3, r3
 8000c60:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000c64:	f023 0307 	bic.w	r3, r3, #7
 8000c68:	b21a      	sxth	r2, r3
 8000c6a:	79bb      	ldrb	r3, [r7, #6]
 8000c6c:	00db      	lsls	r3, r3, #3
 8000c6e:	b21b      	sxth	r3, r3
 8000c70:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8000c74:	b21b      	sxth	r3, r3
 8000c76:	4313      	orrs	r3, r2
 8000c78:	b21a      	sxth	r2, r3
 8000c7a:	797b      	ldrb	r3, [r7, #5]
 8000c7c:	08db      	lsrs	r3, r3, #3
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	b21b      	sxth	r3, r3
 8000c82:	4313      	orrs	r3, r2
 8000c84:	b21b      	sxth	r3, r3
 8000c86:	b29b      	uxth	r3, r3
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <LCD_pushColor>:

int LCD_pushColor(SPI_HandleTypeDef* spi, uint16_t color) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	807b      	strh	r3, [r7, #2]
	LCD_startWrite();
 8000ca0:	f7ff ff00 	bl	8000aa4 <LCD_startWrite>
	LCD_writeCommand(spi, HX8357_RAMWR); // Write to RAM
 8000ca4:	212c      	movs	r1, #44	; 0x2c
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f7ff fed8 	bl	8000a5c <LCD_writeCommand>
	HAL_SPI_Transmit(spi, (uint8_t*)&color, 2, 100);
 8000cac:	1cb9      	adds	r1, r7, #2
 8000cae:	2364      	movs	r3, #100	; 0x64
 8000cb0:	2202      	movs	r2, #2
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f003 fc75 	bl	80045a2 <HAL_SPI_Transmit>
	LCD_writeCommand(spi, HX8357_NOP); // Write command to stop RAMWR
 8000cb8:	2100      	movs	r1, #0
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	f7ff fece 	bl	8000a5c <LCD_writeCommand>
	LCD_endWrite();
 8000cc0:	f7ff fefc 	bl	8000abc <LCD_endWrite>
	return 1;
 8000cc4:	2301      	movs	r3, #1
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <LCD_pushColorCopy>:

int LCD_pushColorCopy(SPI_HandleTypeDef* spi, uint16_t color, uint32_t count) {
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b086      	sub	sp, #24
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	60f8      	str	r0, [r7, #12]
 8000cd6:	460b      	mov	r3, r1
 8000cd8:	607a      	str	r2, [r7, #4]
 8000cda:	817b      	strh	r3, [r7, #10]
	LCD_startWrite();
 8000cdc:	f7ff fee2 	bl	8000aa4 <LCD_startWrite>

	LCD_writeCommand(spi, HX8357_RAMWR); // Write to RAM
 8000ce0:	212c      	movs	r1, #44	; 0x2c
 8000ce2:	68f8      	ldr	r0, [r7, #12]
 8000ce4:	f7ff feba 	bl	8000a5c <LCD_writeCommand>

	uint8_t buf[2];
	uint16_to_bytes(color, &buf[0]);
 8000ce8:	f107 0210 	add.w	r2, r7, #16
 8000cec:	897b      	ldrh	r3, [r7, #10]
 8000cee:	4611      	mov	r1, r2
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fe79 	bl	80009e8 <uint16_to_bytes>
	for (int i = 0; i < count; ++i)
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	617b      	str	r3, [r7, #20]
 8000cfa:	e009      	b.n	8000d10 <LCD_pushColorCopy+0x42>
	{
		HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 8000cfc:	f107 0110 	add.w	r1, r7, #16
 8000d00:	2364      	movs	r3, #100	; 0x64
 8000d02:	2202      	movs	r2, #2
 8000d04:	68f8      	ldr	r0, [r7, #12]
 8000d06:	f003 fc4c 	bl	80045a2 <HAL_SPI_Transmit>
	for (int i = 0; i < count; ++i)
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d8f1      	bhi.n	8000cfc <LCD_pushColorCopy+0x2e>
	}

	LCD_writeCommand(spi, HX8357_NOP); // Write command to stop RAMWR
 8000d18:	2100      	movs	r1, #0
 8000d1a:	68f8      	ldr	r0, [r7, #12]
 8000d1c:	f7ff fe9e 	bl	8000a5c <LCD_writeCommand>

	LCD_endWrite();
 8000d20:	f7ff fecc 	bl	8000abc <LCD_endWrite>
	return 1;
 8000d24:	2301      	movs	r3, #1
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3718      	adds	r7, #24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <LCD_writePixel>:

	LCD_endWrite();
	return 1;
}

int LCD_writePixel(SPI_HandleTypeDef* spi, int16_t x, int16_t y, uint16_t color) {
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b086      	sub	sp, #24
 8000d32:	af02      	add	r7, sp, #8
 8000d34:	60f8      	str	r0, [r7, #12]
 8000d36:	4608      	mov	r0, r1
 8000d38:	4611      	mov	r1, r2
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	817b      	strh	r3, [r7, #10]
 8000d40:	460b      	mov	r3, r1
 8000d42:	813b      	strh	r3, [r7, #8]
 8000d44:	4613      	mov	r3, r2
 8000d46:	80fb      	strh	r3, [r7, #6]
    if ((x < 0) ||(x >= HX8357_TFTWIDTH) || (y < 0) || (y >= HX8357_TFTHEIGHT)) return 0;
 8000d48:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	db0d      	blt.n	8000d6c <LCD_writePixel+0x3e>
 8000d50:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000d54:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000d58:	da08      	bge.n	8000d6c <LCD_writePixel+0x3e>
 8000d5a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	db04      	blt.n	8000d6c <LCD_writePixel+0x3e>
 8000d62:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000d66:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000d6a:	db01      	blt.n	8000d70 <LCD_writePixel+0x42>
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	e017      	b.n	8000da0 <LCD_writePixel+0x72>
    if(!LCD_setAddrWindow(spi, x, y, 1, 1)) return 0;
 8000d70:	8979      	ldrh	r1, [r7, #10]
 8000d72:	893a      	ldrh	r2, [r7, #8]
 8000d74:	2301      	movs	r3, #1
 8000d76:	9300      	str	r3, [sp, #0]
 8000d78:	2301      	movs	r3, #1
 8000d7a:	68f8      	ldr	r0, [r7, #12]
 8000d7c:	f7ff ff02 	bl	8000b84 <LCD_setAddrWindow>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d101      	bne.n	8000d8a <LCD_writePixel+0x5c>
 8000d86:	2300      	movs	r3, #0
 8000d88:	e00a      	b.n	8000da0 <LCD_writePixel+0x72>
    if (!LCD_pushColor(spi, color)) return 0;
 8000d8a:	88fb      	ldrh	r3, [r7, #6]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	68f8      	ldr	r0, [r7, #12]
 8000d90:	f7ff ff80 	bl	8000c94 <LCD_pushColor>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d101      	bne.n	8000d9e <LCD_writePixel+0x70>
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	e000      	b.n	8000da0 <LCD_writePixel+0x72>
    return 1;
 8000d9e:	2301      	movs	r3, #1
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3710      	adds	r7, #16
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <LCD_writePixels>:

// Length of colors array must be w * h
int LCD_writePixels(SPI_HandleTypeDef* spi, uint16_t color,
					int16_t x, int16_t y, int16_t w, int16_t h)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af02      	add	r7, sp, #8
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	4608      	mov	r0, r1
 8000db2:	4611      	mov	r1, r2
 8000db4:	461a      	mov	r2, r3
 8000db6:	4603      	mov	r3, r0
 8000db8:	817b      	strh	r3, [r7, #10]
 8000dba:	460b      	mov	r3, r1
 8000dbc:	813b      	strh	r3, [r7, #8]
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	80fb      	strh	r3, [r7, #6]
	if ((x < 0) ||(x >= HX8357_TFTWIDTH) || (y < 0) || (y >= HX8357_TFTHEIGHT)) return 0;
 8000dc2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	db0d      	blt.n	8000de6 <LCD_writePixels+0x3e>
 8000dca:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000dce:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000dd2:	da08      	bge.n	8000de6 <LCD_writePixels+0x3e>
 8000dd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	db04      	blt.n	8000de6 <LCD_writePixels+0x3e>
 8000ddc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000de0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000de4:	db01      	blt.n	8000dea <LCD_writePixels+0x42>
 8000de6:	2300      	movs	r3, #0
 8000de8:	e01f      	b.n	8000e2a <LCD_writePixels+0x82>
	if(!LCD_setAddrWindow(spi, x, y, w, h)) return 0;
 8000dea:	8939      	ldrh	r1, [r7, #8]
 8000dec:	88fa      	ldrh	r2, [r7, #6]
 8000dee:	8b38      	ldrh	r0, [r7, #24]
 8000df0:	8bbb      	ldrh	r3, [r7, #28]
 8000df2:	9300      	str	r3, [sp, #0]
 8000df4:	4603      	mov	r3, r0
 8000df6:	68f8      	ldr	r0, [r7, #12]
 8000df8:	f7ff fec4 	bl	8000b84 <LCD_setAddrWindow>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d101      	bne.n	8000e06 <LCD_writePixels+0x5e>
 8000e02:	2300      	movs	r3, #0
 8000e04:	e011      	b.n	8000e2a <LCD_writePixels+0x82>
	if (!LCD_pushColorCopy(spi, color, w*h)) return 0;
 8000e06:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000e0a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8000e0e:	fb02 f303 	mul.w	r3, r2, r3
 8000e12:	461a      	mov	r2, r3
 8000e14:	897b      	ldrh	r3, [r7, #10]
 8000e16:	4619      	mov	r1, r3
 8000e18:	68f8      	ldr	r0, [r7, #12]
 8000e1a:	f7ff ff58 	bl	8000cce <LCD_pushColorCopy>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d101      	bne.n	8000e28 <LCD_writePixels+0x80>
 8000e24:	2300      	movs	r3, #0
 8000e26:	e000      	b.n	8000e2a <LCD_writePixels+0x82>
	return 1;
 8000e28:	2301      	movs	r3, #1
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
	...

08000e34 <LCD_drawChar>:
		0x70, 0x1C, 0x07, 0x1C, 0x70,
		0x0E, 0x38, 0xE0, 0x38, 0x0E
};

void LCD_drawChar(SPI_HandleTypeDef* spi, int16_t x, int16_t y, unsigned char c, uint16_t color, uint32_t size)
{
 8000e34:	b590      	push	{r4, r7, lr}
 8000e36:	b089      	sub	sp, #36	; 0x24
 8000e38:	af02      	add	r7, sp, #8
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	4611      	mov	r1, r2
 8000e40:	461a      	mov	r2, r3
 8000e42:	4603      	mov	r3, r0
 8000e44:	817b      	strh	r3, [r7, #10]
 8000e46:	460b      	mov	r3, r1
 8000e48:	813b      	strh	r3, [r7, #8]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	71fb      	strb	r3, [r7, #7]
	if((x >= HX8357_TFTWIDTH)   || // Clip right
 8000e4e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000e52:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000e56:	f280 80b5 	bge.w	8000fc4 <LCD_drawChar+0x190>
	   (y >= HX8357_TFTHEIGHT)  || // Clip bottom
	   ((x + 6 * size - 1) < 0) || // Clip left
 8000e5a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000e5e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000e62:	f280 80af 	bge.w	8000fc4 <LCD_drawChar+0x190>
	   ((y + 8 * size - 1) < 0))   // Clip top
		return;

	uint16_t bg = LCD_color565(255, 255, 255);
 8000e66:	22ff      	movs	r2, #255	; 0xff
 8000e68:	21ff      	movs	r1, #255	; 0xff
 8000e6a:	20ff      	movs	r0, #255	; 0xff
 8000e6c:	f7ff feec 	bl	8000c48 <LCD_color565>
 8000e70:	4603      	mov	r3, r0
 8000e72:	827b      	strh	r3, [r7, #18]
	LCD_startWrite();
 8000e74:	f7ff fe16 	bl	8000aa4 <LCD_startWrite>
	for(int8_t i = 0; i < 5; i++) // Char bitmap = 5 columns
 8000e78:	2300      	movs	r3, #0
 8000e7a:	75fb      	strb	r3, [r7, #23]
 8000e7c:	e09a      	b.n	8000fb4 <LCD_drawChar+0x180>
	{
		uint8_t line = font[c * 5 + i];
 8000e7e:	79fa      	ldrb	r2, [r7, #7]
 8000e80:	4613      	mov	r3, r2
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	441a      	add	r2, r3
 8000e86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	4a4f      	ldr	r2, [pc, #316]	; (8000fcc <LCD_drawChar+0x198>)
 8000e8e:	5cd3      	ldrb	r3, [r2, r3]
 8000e90:	75bb      	strb	r3, [r7, #22]
		for(int8_t j = 0; j < 8; j++, line >>= 1)
 8000e92:	2300      	movs	r3, #0
 8000e94:	757b      	strb	r3, [r7, #21]
 8000e96:	e082      	b.n	8000f9e <LCD_drawChar+0x16a>
		{
			if (line & 1)
 8000e98:	7dbb      	ldrb	r3, [r7, #22]
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d03a      	beq.n	8000f18 <LCD_drawChar+0xe4>
			{
				if (size == 1) LCD_writePixel(spi, x+i, y+j, color);
 8000ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d112      	bne.n	8000ece <LCD_drawChar+0x9a>
 8000ea8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000eac:	b29a      	uxth	r2, r3
 8000eae:	897b      	ldrh	r3, [r7, #10]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	b219      	sxth	r1, r3
 8000eb6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000eba:	b29a      	uxth	r2, r3
 8000ebc:	893b      	ldrh	r3, [r7, #8]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	b21a      	sxth	r2, r3
 8000ec4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000ec6:	68f8      	ldr	r0, [r7, #12]
 8000ec8:	f7ff ff31 	bl	8000d2e <LCD_writePixel>
 8000ecc:	e05e      	b.n	8000f8c <LCD_drawChar+0x158>
				else LCD_writePixels(spi, color, x+i*size, y+j*size, size, size);
 8000ece:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	fb12 f303 	smulbb	r3, r2, r3
 8000edc:	b29a      	uxth	r2, r3
 8000ede:	897b      	ldrh	r3, [r7, #10]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	b218      	sxth	r0, r3
 8000ee6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000eea:	b29a      	uxth	r2, r3
 8000eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	fb12 f303 	smulbb	r3, r2, r3
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	893b      	ldrh	r3, [r7, #8]
 8000ef8:	4413      	add	r3, r2
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	b21c      	sxth	r4, r3
 8000efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f00:	b21b      	sxth	r3, r3
 8000f02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f04:	b212      	sxth	r2, r2
 8000f06:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000f08:	9201      	str	r2, [sp, #4]
 8000f0a:	9300      	str	r3, [sp, #0]
 8000f0c:	4623      	mov	r3, r4
 8000f0e:	4602      	mov	r2, r0
 8000f10:	68f8      	ldr	r0, [r7, #12]
 8000f12:	f7ff ff49 	bl	8000da8 <LCD_writePixels>
 8000f16:	e039      	b.n	8000f8c <LCD_drawChar+0x158>
			}
			else
			{
				if (size == 1) LCD_writePixel(spi, x+i, y+j, bg);
 8000f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d112      	bne.n	8000f44 <LCD_drawChar+0x110>
 8000f1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f22:	b29a      	uxth	r2, r3
 8000f24:	897b      	ldrh	r3, [r7, #10]
 8000f26:	4413      	add	r3, r2
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	b219      	sxth	r1, r3
 8000f2c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	893b      	ldrh	r3, [r7, #8]
 8000f34:	4413      	add	r3, r2
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	b21a      	sxth	r2, r3
 8000f3a:	8a7b      	ldrh	r3, [r7, #18]
 8000f3c:	68f8      	ldr	r0, [r7, #12]
 8000f3e:	f7ff fef6 	bl	8000d2e <LCD_writePixel>
 8000f42:	e023      	b.n	8000f8c <LCD_drawChar+0x158>
				else LCD_writePixels(spi, bg, x+i*size, y+j*size, size, size);
 8000f44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f48:	b29a      	uxth	r2, r3
 8000f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	fb12 f303 	smulbb	r3, r2, r3
 8000f52:	b29a      	uxth	r2, r3
 8000f54:	897b      	ldrh	r3, [r7, #10]
 8000f56:	4413      	add	r3, r2
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	b218      	sxth	r0, r3
 8000f5c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	fb12 f303 	smulbb	r3, r2, r3
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	893b      	ldrh	r3, [r7, #8]
 8000f6e:	4413      	add	r3, r2
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	b21c      	sxth	r4, r3
 8000f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f76:	b21b      	sxth	r3, r3
 8000f78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f7a:	b212      	sxth	r2, r2
 8000f7c:	8a79      	ldrh	r1, [r7, #18]
 8000f7e:	9201      	str	r2, [sp, #4]
 8000f80:	9300      	str	r3, [sp, #0]
 8000f82:	4623      	mov	r3, r4
 8000f84:	4602      	mov	r2, r0
 8000f86:	68f8      	ldr	r0, [r7, #12]
 8000f88:	f7ff ff0e 	bl	8000da8 <LCD_writePixels>
		for(int8_t j = 0; j < 8; j++, line >>= 1)
 8000f8c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	3301      	adds	r3, #1
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	757b      	strb	r3, [r7, #21]
 8000f98:	7dbb      	ldrb	r3, [r7, #22]
 8000f9a:	085b      	lsrs	r3, r3, #1
 8000f9c:	75bb      	strb	r3, [r7, #22]
 8000f9e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000fa2:	2b07      	cmp	r3, #7
 8000fa4:	f77f af78 	ble.w	8000e98 <LCD_drawChar+0x64>
	for(int8_t i = 0; i < 5; i++) // Char bitmap = 5 columns
 8000fa8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	3301      	adds	r3, #1
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	75fb      	strb	r3, [r7, #23]
 8000fb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000fb8:	2b04      	cmp	r3, #4
 8000fba:	f77f af60 	ble.w	8000e7e <LCD_drawChar+0x4a>
			}
		}
	}
	LCD_endWrite();
 8000fbe:	f7ff fd7d 	bl	8000abc <LCD_endWrite>
 8000fc2:	e000      	b.n	8000fc6 <LCD_drawChar+0x192>
		return;
 8000fc4:	bf00      	nop
}
 8000fc6:	371c      	adds	r7, #28
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd90      	pop	{r4, r7, pc}
 8000fcc:	08005664 	.word	0x08005664

08000fd0 <LCD_drawString>:
	}
	LCD_endWrite();
}

void LCD_drawString(SPI_HandleTypeDef* spi, int16_t x, int16_t y, unsigned char* c, uint32_t length, uint16_t color, uint32_t size)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b088      	sub	sp, #32
 8000fd4:	af02      	add	r7, sp, #8
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	460b      	mov	r3, r1
 8000fdc:	817b      	strh	r3, [r7, #10]
 8000fde:	4613      	mov	r3, r2
 8000fe0:	813b      	strh	r3, [r7, #8]
	for (int i = 0; i < length; ++i) LCD_drawChar(spi, x + i*6*size, y, c[i], color, size);
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
 8000fe6:	e020      	b.n	800102a <LCD_drawString+0x5a>
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	b29a      	uxth	r2, r3
 8000fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	fb12 f303 	smulbb	r3, r2, r3
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	0052      	lsls	r2, r2, #1
 8000ffa:	4413      	add	r3, r2
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	897b      	ldrh	r3, [r7, #10]
 8001002:	4413      	add	r3, r2
 8001004:	b29b      	uxth	r3, r3
 8001006:	b219      	sxth	r1, r3
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	4413      	add	r3, r2
 800100e:	7818      	ldrb	r0, [r3, #0]
 8001010:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001016:	9301      	str	r3, [sp, #4]
 8001018:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	4603      	mov	r3, r0
 800101e:	68f8      	ldr	r0, [r7, #12]
 8001020:	f7ff ff08 	bl	8000e34 <LCD_drawChar>
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	3301      	adds	r3, #1
 8001028:	617b      	str	r3, [r7, #20]
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	6a3a      	ldr	r2, [r7, #32]
 800102e:	429a      	cmp	r2, r3
 8001030:	d8da      	bhi.n	8000fe8 <LCD_drawString+0x18>
}
 8001032:	bf00      	nop
 8001034:	bf00      	nop
 8001036:	3718      	adds	r7, #24
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <LCD_writeLine>:
		}
	}
	LCD_endWrite();
}

void LCD_writeLine(SPI_HandleTypeDef *spi, int x0, int y0, int x1, int y1, int color) {
 800103c:	b580      	push	{r7, lr}
 800103e:	b08a      	sub	sp, #40	; 0x28
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
 8001048:	603b      	str	r3, [r7, #0]
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 800104a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001054:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001058:	6839      	ldr	r1, [r7, #0]
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	1acb      	subs	r3, r1, r3
 800105e:	2b00      	cmp	r3, #0
 8001060:	bfb8      	it	lt
 8001062:	425b      	neglt	r3, r3
 8001064:	429a      	cmp	r2, r3
 8001066:	bfcc      	ite	gt
 8001068:	2301      	movgt	r3, #1
 800106a:	2300      	movle	r3, #0
 800106c:	b2db      	uxtb	r3, r3
 800106e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (steep) {
 8001070:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001074:	2b00      	cmp	r3, #0
 8001076:	d00d      	beq.n	8001094 <LCD_writeLine+0x58>
    _swap_int16_t(x0, y0);
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	843b      	strh	r3, [r7, #32]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001084:	607b      	str	r3, [r7, #4]
    _swap_int16_t(x1, y1);
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	83fb      	strh	r3, [r7, #30]
 800108a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800108c:	603b      	str	r3, [r7, #0]
 800108e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001092:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (x0 > x1) {
 8001094:	68ba      	ldr	r2, [r7, #8]
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	429a      	cmp	r2, r3
 800109a:	dd0d      	ble.n	80010b8 <LCD_writeLine+0x7c>
    _swap_int16_t(x0, x1);
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	83bb      	strh	r3, [r7, #28]
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80010a8:	603b      	str	r3, [r7, #0]
    _swap_int16_t(y0, y1);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	837b      	strh	r3, [r7, #26]
 80010ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010b0:	607b      	str	r3, [r7, #4]
 80010b2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80010b6:	633b      	str	r3, [r7, #48]	; 0x30
  }

  int16_t dx, dy;
  dx = x1 - x0;
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	b29b      	uxth	r3, r3
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	833b      	strh	r3, [r7, #24]
  dy = abs(y1 - y0);
 80010c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	bfb8      	it	lt
 80010d0:	425b      	neglt	r3, r3
 80010d2:	82fb      	strh	r3, [r7, #22]

  int16_t err = dx / 2;
 80010d4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80010d8:	0fda      	lsrs	r2, r3, #31
 80010da:	4413      	add	r3, r2
 80010dc:	105b      	asrs	r3, r3, #1
 80010de:	84fb      	strh	r3, [r7, #38]	; 0x26
  int16_t ystep;

  if (y0 < y1) {
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010e4:	429a      	cmp	r2, r3
 80010e6:	da02      	bge.n	80010ee <LCD_writeLine+0xb2>
    ystep = 1;
 80010e8:	2301      	movs	r3, #1
 80010ea:	84bb      	strh	r3, [r7, #36]	; 0x24
 80010ec:	e030      	b.n	8001150 <LCD_writeLine+0x114>
  } else {
    ystep = -1;
 80010ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010f2:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  for (; x0 <= x1; x0++) {
 80010f4:	e02c      	b.n	8001150 <LCD_writeLine+0x114>
    if (steep) {
 80010f6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d009      	beq.n	8001112 <LCD_writeLine+0xd6>
      LCD_writePixel(spi, y0, x0, color);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	b219      	sxth	r1, r3
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	b21a      	sxth	r2, r3
 8001106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001108:	b29b      	uxth	r3, r3
 800110a:	68f8      	ldr	r0, [r7, #12]
 800110c:	f7ff fe0f 	bl	8000d2e <LCD_writePixel>
 8001110:	e008      	b.n	8001124 <LCD_writeLine+0xe8>
    } else {
      LCD_writePixel(spi, x0, y0, color);
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	b219      	sxth	r1, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	b21a      	sxth	r2, r3
 800111a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800111c:	b29b      	uxth	r3, r3
 800111e:	68f8      	ldr	r0, [r7, #12]
 8001120:	f7ff fe05 	bl	8000d2e <LCD_writePixel>
    }
    err -= dy;
 8001124:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001126:	8afb      	ldrh	r3, [r7, #22]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	b29b      	uxth	r3, r3
 800112c:	84fb      	strh	r3, [r7, #38]	; 0x26
    if (err < 0) {
 800112e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001132:	2b00      	cmp	r3, #0
 8001134:	da09      	bge.n	800114a <LCD_writeLine+0x10e>
      y0 += ystep;
 8001136:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	4413      	add	r3, r2
 800113e:	607b      	str	r3, [r7, #4]
      err += dx;
 8001140:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001142:	8b3b      	ldrh	r3, [r7, #24]
 8001144:	4413      	add	r3, r2
 8001146:	b29b      	uxth	r3, r3
 8001148:	84fb      	strh	r3, [r7, #38]	; 0x26
  for (; x0 <= x1; x0++) {
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	3301      	adds	r3, #1
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	68ba      	ldr	r2, [r7, #8]
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	429a      	cmp	r2, r3
 8001156:	ddce      	ble.n	80010f6 <LCD_writeLine+0xba>
    }
  }
}
 8001158:	bf00      	nop
 800115a:	bf00      	nop
 800115c:	3728      	adds	r7, #40	; 0x28
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <LCD_drawBattery>:
void LCD_writeFastHLine(SPI_HandleTypeDef *spi, int16_t x, int16_t y, int16_t w, uint16_t color) {
	LCD_writeLine(spi, x, y, x + w - 1, y, color);
}

//homemade functions for TADAMHASPEV, move to different file
void LCD_drawBattery(SPI_HandleTypeDef* spi, int16_t x, int16_t y, uint16_t color, uint32_t size) {
 8001162:	b580      	push	{r7, lr}
 8001164:	b086      	sub	sp, #24
 8001166:	af02      	add	r7, sp, #8
 8001168:	60f8      	str	r0, [r7, #12]
 800116a:	4608      	mov	r0, r1
 800116c:	4611      	mov	r1, r2
 800116e:	461a      	mov	r2, r3
 8001170:	4603      	mov	r3, r0
 8001172:	817b      	strh	r3, [r7, #10]
 8001174:	460b      	mov	r3, r1
 8001176:	813b      	strh	r3, [r7, #8]
 8001178:	4613      	mov	r3, r2
 800117a:	80fb      	strh	r3, [r7, #6]
	//make battery thicker?
	//left
	if(!LCD_setAddrWindow(spi, x, y + size, 1, 22*size)) return;
 800117c:	8979      	ldrh	r1, [r7, #10]
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	b29a      	uxth	r2, r3
 8001182:	893b      	ldrh	r3, [r7, #8]
 8001184:	4413      	add	r3, r2
 8001186:	b29a      	uxth	r2, r3
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	b29b      	uxth	r3, r3
 800118c:	4618      	mov	r0, r3
 800118e:	0080      	lsls	r0, r0, #2
 8001190:	4418      	add	r0, r3
 8001192:	0040      	lsls	r0, r0, #1
 8001194:	4403      	add	r3, r0
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	b29b      	uxth	r3, r3
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	2301      	movs	r3, #1
 800119e:	68f8      	ldr	r0, [r7, #12]
 80011a0:	f7ff fcf0 	bl	8000b84 <LCD_setAddrWindow>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	f000 80e3 	beq.w	8001372 <LCD_drawBattery+0x210>
	if (!LCD_pushColorCopy(spi, color, 22*size)) return;
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	2216      	movs	r2, #22
 80011b0:	fb03 f202 	mul.w	r2, r3, r2
 80011b4:	88fb      	ldrh	r3, [r7, #6]
 80011b6:	4619      	mov	r1, r3
 80011b8:	68f8      	ldr	r0, [r7, #12]
 80011ba:	f7ff fd88 	bl	8000cce <LCD_pushColorCopy>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	f000 80d8 	beq.w	8001376 <LCD_drawBattery+0x214>

	//right
	if(!LCD_setAddrWindow(spi, x + 10*size, y + size, 1, 22*size)) return;
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	461a      	mov	r2, r3
 80011cc:	0092      	lsls	r2, r2, #2
 80011ce:	4413      	add	r3, r2
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	897b      	ldrh	r3, [r7, #10]
 80011d6:	4413      	add	r3, r2
 80011d8:	b299      	uxth	r1, r3
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	b29a      	uxth	r2, r3
 80011de:	893b      	ldrh	r3, [r7, #8]
 80011e0:	4413      	add	r3, r2
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	4618      	mov	r0, r3
 80011ea:	0080      	lsls	r0, r0, #2
 80011ec:	4418      	add	r0, r3
 80011ee:	0040      	lsls	r0, r0, #1
 80011f0:	4403      	add	r3, r0
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	2301      	movs	r3, #1
 80011fa:	68f8      	ldr	r0, [r7, #12]
 80011fc:	f7ff fcc2 	bl	8000b84 <LCD_setAddrWindow>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	f000 80b9 	beq.w	800137a <LCD_drawBattery+0x218>
	if (!LCD_pushColorCopy(spi, color, 22*size)) return;
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	2216      	movs	r2, #22
 800120c:	fb03 f202 	mul.w	r2, r3, r2
 8001210:	88fb      	ldrh	r3, [r7, #6]
 8001212:	4619      	mov	r1, r3
 8001214:	68f8      	ldr	r0, [r7, #12]
 8001216:	f7ff fd5a 	bl	8000cce <LCD_pushColorCopy>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	f000 80ae 	beq.w	800137e <LCD_drawBattery+0x21c>

	//top
	if(!LCD_setAddrWindow(spi, x, y + size, 10*size, 1)) return;
 8001222:	8979      	ldrh	r1, [r7, #10]
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	b29a      	uxth	r2, r3
 8001228:	893b      	ldrh	r3, [r7, #8]
 800122a:	4413      	add	r3, r2
 800122c:	b29a      	uxth	r2, r3
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	b29b      	uxth	r3, r3
 8001232:	4618      	mov	r0, r3
 8001234:	0080      	lsls	r0, r0, #2
 8001236:	4403      	add	r3, r0
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	b29b      	uxth	r3, r3
 800123c:	2001      	movs	r0, #1
 800123e:	9000      	str	r0, [sp, #0]
 8001240:	68f8      	ldr	r0, [r7, #12]
 8001242:	f7ff fc9f 	bl	8000b84 <LCD_setAddrWindow>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	f000 809a 	beq.w	8001382 <LCD_drawBattery+0x220>
	if (!LCD_pushColorCopy(spi, color, 10*size)) return;
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4613      	mov	r3, r2
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	4413      	add	r3, r2
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	461a      	mov	r2, r3
 800125a:	88fb      	ldrh	r3, [r7, #6]
 800125c:	4619      	mov	r1, r3
 800125e:	68f8      	ldr	r0, [r7, #12]
 8001260:	f7ff fd35 	bl	8000cce <LCD_pushColorCopy>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	f000 808d 	beq.w	8001386 <LCD_drawBattery+0x224>

	//bottom
	if(!LCD_setAddrWindow(spi, x, y + 23*size, 10*size, 1)) return;
 800126c:	8979      	ldrh	r1, [r7, #10]
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	b29b      	uxth	r3, r3
 8001272:	461a      	mov	r2, r3
 8001274:	0052      	lsls	r2, r2, #1
 8001276:	441a      	add	r2, r3
 8001278:	00d2      	lsls	r2, r2, #3
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	b29a      	uxth	r2, r3
 800127e:	893b      	ldrh	r3, [r7, #8]
 8001280:	4413      	add	r3, r2
 8001282:	b29a      	uxth	r2, r3
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	b29b      	uxth	r3, r3
 8001288:	4618      	mov	r0, r3
 800128a:	0080      	lsls	r0, r0, #2
 800128c:	4403      	add	r3, r0
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	b29b      	uxth	r3, r3
 8001292:	2001      	movs	r0, #1
 8001294:	9000      	str	r0, [sp, #0]
 8001296:	68f8      	ldr	r0, [r7, #12]
 8001298:	f7ff fc74 	bl	8000b84 <LCD_setAddrWindow>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d073      	beq.n	800138a <LCD_drawBattery+0x228>
	if (!LCD_pushColorCopy(spi, color, 10*size)) return;
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4613      	mov	r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	4413      	add	r3, r2
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	461a      	mov	r2, r3
 80012ae:	88fb      	ldrh	r3, [r7, #6]
 80012b0:	4619      	mov	r1, r3
 80012b2:	68f8      	ldr	r0, [r7, #12]
 80012b4:	f7ff fd0b 	bl	8000cce <LCD_pushColorCopy>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d067      	beq.n	800138e <LCD_drawBattery+0x22c>

	//lil cap
	if(!LCD_setAddrWindow(spi, x + 3*size, y, 4*size, 1)) return;
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	461a      	mov	r2, r3
 80012c4:	0052      	lsls	r2, r2, #1
 80012c6:	4413      	add	r3, r2
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	897b      	ldrh	r3, [r7, #10]
 80012cc:	4413      	add	r3, r2
 80012ce:	b299      	uxth	r1, r3
 80012d0:	893a      	ldrh	r2, [r7, #8]
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	b29b      	uxth	r3, r3
 80012da:	2001      	movs	r0, #1
 80012dc:	9000      	str	r0, [sp, #0]
 80012de:	68f8      	ldr	r0, [r7, #12]
 80012e0:	f7ff fc50 	bl	8000b84 <LCD_setAddrWindow>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d053      	beq.n	8001392 <LCD_drawBattery+0x230>
	if (!LCD_pushColorCopy(spi, color, 4*size)) return;
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	009a      	lsls	r2, r3, #2
 80012ee:	88fb      	ldrh	r3, [r7, #6]
 80012f0:	4619      	mov	r1, r3
 80012f2:	68f8      	ldr	r0, [r7, #12]
 80012f4:	f7ff fceb 	bl	8000cce <LCD_pushColorCopy>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d04b      	beq.n	8001396 <LCD_drawBattery+0x234>

	if(!LCD_setAddrWindow(spi, x + 3*size, y, 1, size)) return;
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	b29b      	uxth	r3, r3
 8001302:	461a      	mov	r2, r3
 8001304:	0052      	lsls	r2, r2, #1
 8001306:	4413      	add	r3, r2
 8001308:	b29a      	uxth	r2, r3
 800130a:	897b      	ldrh	r3, [r7, #10]
 800130c:	4413      	add	r3, r2
 800130e:	b299      	uxth	r1, r3
 8001310:	893a      	ldrh	r2, [r7, #8]
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	b29b      	uxth	r3, r3
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	2301      	movs	r3, #1
 800131a:	68f8      	ldr	r0, [r7, #12]
 800131c:	f7ff fc32 	bl	8000b84 <LCD_setAddrWindow>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d039      	beq.n	800139a <LCD_drawBattery+0x238>
	if (!LCD_pushColorCopy(spi, color, size)) return;
 8001326:	88fb      	ldrh	r3, [r7, #6]
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4619      	mov	r1, r3
 800132c:	68f8      	ldr	r0, [r7, #12]
 800132e:	f7ff fcce 	bl	8000cce <LCD_pushColorCopy>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d032      	beq.n	800139e <LCD_drawBattery+0x23c>

	if(!LCD_setAddrWindow(spi, x + 3*size + 4*size, y, 1, size)) return;
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	b29b      	uxth	r3, r3
 800133c:	461a      	mov	r2, r3
 800133e:	00d2      	lsls	r2, r2, #3
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	b29a      	uxth	r2, r3
 8001344:	897b      	ldrh	r3, [r7, #10]
 8001346:	4413      	add	r3, r2
 8001348:	b299      	uxth	r1, r3
 800134a:	893a      	ldrh	r2, [r7, #8]
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	b29b      	uxth	r3, r3
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	2301      	movs	r3, #1
 8001354:	68f8      	ldr	r0, [r7, #12]
 8001356:	f7ff fc15 	bl	8000b84 <LCD_setAddrWindow>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d020      	beq.n	80013a2 <LCD_drawBattery+0x240>
	if (!LCD_pushColorCopy(spi, color, size)) return;
 8001360:	88fb      	ldrh	r3, [r7, #6]
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4619      	mov	r1, r3
 8001366:	68f8      	ldr	r0, [r7, #12]
 8001368:	f7ff fcb1 	bl	8000cce <LCD_pushColorCopy>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
	return;
 8001370:	e018      	b.n	80013a4 <LCD_drawBattery+0x242>
	if(!LCD_setAddrWindow(spi, x, y + size, 1, 22*size)) return;
 8001372:	bf00      	nop
 8001374:	e016      	b.n	80013a4 <LCD_drawBattery+0x242>
	if (!LCD_pushColorCopy(spi, color, 22*size)) return;
 8001376:	bf00      	nop
 8001378:	e014      	b.n	80013a4 <LCD_drawBattery+0x242>
	if(!LCD_setAddrWindow(spi, x + 10*size, y + size, 1, 22*size)) return;
 800137a:	bf00      	nop
 800137c:	e012      	b.n	80013a4 <LCD_drawBattery+0x242>
	if (!LCD_pushColorCopy(spi, color, 22*size)) return;
 800137e:	bf00      	nop
 8001380:	e010      	b.n	80013a4 <LCD_drawBattery+0x242>
	if(!LCD_setAddrWindow(spi, x, y + size, 10*size, 1)) return;
 8001382:	bf00      	nop
 8001384:	e00e      	b.n	80013a4 <LCD_drawBattery+0x242>
	if (!LCD_pushColorCopy(spi, color, 10*size)) return;
 8001386:	bf00      	nop
 8001388:	e00c      	b.n	80013a4 <LCD_drawBattery+0x242>
	if(!LCD_setAddrWindow(spi, x, y + 23*size, 10*size, 1)) return;
 800138a:	bf00      	nop
 800138c:	e00a      	b.n	80013a4 <LCD_drawBattery+0x242>
	if (!LCD_pushColorCopy(spi, color, 10*size)) return;
 800138e:	bf00      	nop
 8001390:	e008      	b.n	80013a4 <LCD_drawBattery+0x242>
	if(!LCD_setAddrWindow(spi, x + 3*size, y, 4*size, 1)) return;
 8001392:	bf00      	nop
 8001394:	e006      	b.n	80013a4 <LCD_drawBattery+0x242>
	if (!LCD_pushColorCopy(spi, color, 4*size)) return;
 8001396:	bf00      	nop
 8001398:	e004      	b.n	80013a4 <LCD_drawBattery+0x242>
	if(!LCD_setAddrWindow(spi, x + 3*size, y, 1, size)) return;
 800139a:	bf00      	nop
 800139c:	e002      	b.n	80013a4 <LCD_drawBattery+0x242>
	if (!LCD_pushColorCopy(spi, color, size)) return;
 800139e:	bf00      	nop
 80013a0:	e000      	b.n	80013a4 <LCD_drawBattery+0x242>
	if(!LCD_setAddrWindow(spi, x + 3*size + 4*size, y, 1, size)) return;
 80013a2:	bf00      	nop
}
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <LCD_drawFrame>:

void LCD_drawFrame(SPI_HandleTypeDef* spi, uint16_t color) {
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b084      	sub	sp, #16
 80013ae:	af02      	add	r7, sp, #8
 80013b0:	6078      	str	r0, [r7, #4]
 80013b2:	460b      	mov	r3, r1
 80013b4:	807b      	strh	r3, [r7, #2]
	//rows
	LCD_writeLine(spi,0,80,360,80,HX8357_BLACK);
 80013b6:	2300      	movs	r3, #0
 80013b8:	9301      	str	r3, [sp, #4]
 80013ba:	2350      	movs	r3, #80	; 0x50
 80013bc:	9300      	str	r3, [sp, #0]
 80013be:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80013c2:	2250      	movs	r2, #80	; 0x50
 80013c4:	2100      	movs	r1, #0
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f7ff fe38 	bl	800103c <LCD_writeLine>
	LCD_writeLine(spi,0,160,360,160,HX8357_BLACK);
 80013cc:	2300      	movs	r3, #0
 80013ce:	9301      	str	r3, [sp, #4]
 80013d0:	23a0      	movs	r3, #160	; 0xa0
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80013d8:	22a0      	movs	r2, #160	; 0xa0
 80013da:	2100      	movs	r1, #0
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff fe2d 	bl	800103c <LCD_writeLine>
	LCD_writeLine(spi,0,240,360,240,HX8357_BLACK);
 80013e2:	2300      	movs	r3, #0
 80013e4:	9301      	str	r3, [sp, #4]
 80013e6:	23f0      	movs	r3, #240	; 0xf0
 80013e8:	9300      	str	r3, [sp, #0]
 80013ea:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80013ee:	22f0      	movs	r2, #240	; 0xf0
 80013f0:	2100      	movs	r1, #0
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7ff fe22 	bl	800103c <LCD_writeLine>

	//column
	LCD_writeLine(spi,360,0,360,320,HX8357_BLACK);
 80013f8:	2300      	movs	r3, #0
 80013fa:	9301      	str	r3, [sp, #4]
 80013fc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001400:	9300      	str	r3, [sp, #0]
 8001402:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001406:	2200      	movs	r2, #0
 8001408:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff fe15 	bl	800103c <LCD_writeLine>
	return;
 8001412:	bf00      	nop
}
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <LCD_fillBattery>:

void LCD_fillBattery(SPI_HandleTypeDef* spi, int16_t x, int16_t y, uint32_t size, uint32_t level) {
 800141c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001420:	b088      	sub	sp, #32
 8001422:	af02      	add	r7, sp, #8
 8001424:	60f8      	str	r0, [r7, #12]
 8001426:	607b      	str	r3, [r7, #4]
 8001428:	460b      	mov	r3, r1
 800142a:	817b      	strh	r3, [r7, #10]
 800142c:	4613      	mov	r3, r2
 800142e:	813b      	strh	r3, [r7, #8]
	uint32_t color = HX8357_GREEN;
 8001430:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001434:	617b      	str	r3, [r7, #20]
	if (level < 20) {
 8001436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001438:	2b13      	cmp	r3, #19
 800143a:	d803      	bhi.n	8001444 <LCD_fillBattery+0x28>
		color = HX8357_RED;
 800143c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001440:	617b      	str	r3, [r7, #20]
 8001442:	e005      	b.n	8001450 <LCD_fillBattery+0x34>
	} else if (level < 50) {
 8001444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001446:	2b31      	cmp	r3, #49	; 0x31
 8001448:	d802      	bhi.n	8001450 <LCD_fillBattery+0x34>
		color = HX8357_YELLOW;
 800144a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800144e:	617b      	str	r3, [r7, #20]
	}
	//level = 100 --> y offset 0
	//level = 0 --> y offset 22*size
	int offset = 22*size - (22*size)*(level/100.0);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2216      	movs	r2, #22
 8001454:	fb02 f303 	mul.w	r3, r2, r3
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff f811 	bl	8000480 <__aeabi_ui2d>
 800145e:	4604      	mov	r4, r0
 8001460:	460d      	mov	r5, r1
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2216      	movs	r2, #22
 8001466:	fb02 f303 	mul.w	r3, r2, r3
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff f808 	bl	8000480 <__aeabi_ui2d>
 8001470:	4680      	mov	r8, r0
 8001472:	4689      	mov	r9, r1
 8001474:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001476:	f7ff f803 	bl	8000480 <__aeabi_ui2d>
 800147a:	f04f 0200 	mov.w	r2, #0
 800147e:	4b3d      	ldr	r3, [pc, #244]	; (8001574 <LCD_fillBattery+0x158>)
 8001480:	f7ff f9a2 	bl	80007c8 <__aeabi_ddiv>
 8001484:	4602      	mov	r2, r0
 8001486:	460b      	mov	r3, r1
 8001488:	4640      	mov	r0, r8
 800148a:	4649      	mov	r1, r9
 800148c:	f7ff f872 	bl	8000574 <__aeabi_dmul>
 8001490:	4602      	mov	r2, r0
 8001492:	460b      	mov	r3, r1
 8001494:	4620      	mov	r0, r4
 8001496:	4629      	mov	r1, r5
 8001498:	f7fe feb4 	bl	8000204 <__aeabi_dsub>
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	4610      	mov	r0, r2
 80014a2:	4619      	mov	r1, r3
 80014a4:	f7ff fa78 	bl	8000998 <__aeabi_d2iz>
 80014a8:	4603      	mov	r3, r0
 80014aa:	613b      	str	r3, [r7, #16]
	LCD_writePixels(spi, HX8357_WHITE, x + 3, ((y + size) + 3), 10*size - 6, (22*size - 6));
 80014ac:	897b      	ldrh	r3, [r7, #10]
 80014ae:	3303      	adds	r3, #3
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	b219      	sxth	r1, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	b29a      	uxth	r2, r3
 80014b8:	893b      	ldrh	r3, [r7, #8]
 80014ba:	4413      	add	r3, r2
 80014bc:	b29b      	uxth	r3, r3
 80014be:	3303      	adds	r3, #3
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	b218      	sxth	r0, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	461a      	mov	r2, r3
 80014ca:	0092      	lsls	r2, r2, #2
 80014cc:	4413      	add	r3, r2
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	3b06      	subs	r3, #6
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	b21a      	sxth	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	b29b      	uxth	r3, r3
 80014dc:	461c      	mov	r4, r3
 80014de:	00a4      	lsls	r4, r4, #2
 80014e0:	441c      	add	r4, r3
 80014e2:	0064      	lsls	r4, r4, #1
 80014e4:	4423      	add	r3, r4
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	3b06      	subs	r3, #6
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	b21b      	sxth	r3, r3
 80014f0:	9301      	str	r3, [sp, #4]
 80014f2:	9200      	str	r2, [sp, #0]
 80014f4:	4603      	mov	r3, r0
 80014f6:	460a      	mov	r2, r1
 80014f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80014fc:	68f8      	ldr	r0, [r7, #12]
 80014fe:	f7ff fc53 	bl	8000da8 <LCD_writePixels>
	LCD_writePixels(spi, color, x + 3, ((y + size) + 3) + offset, 10*size - 6, (22*size - 6) - offset);
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	b298      	uxth	r0, r3
 8001506:	897b      	ldrh	r3, [r7, #10]
 8001508:	3303      	adds	r3, #3
 800150a:	b29b      	uxth	r3, r3
 800150c:	b21c      	sxth	r4, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	b29a      	uxth	r2, r3
 8001512:	893b      	ldrh	r3, [r7, #8]
 8001514:	4413      	add	r3, r2
 8001516:	b29a      	uxth	r2, r3
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	b29b      	uxth	r3, r3
 800151c:	4413      	add	r3, r2
 800151e:	b29b      	uxth	r3, r3
 8001520:	3303      	adds	r3, #3
 8001522:	b29b      	uxth	r3, r3
 8001524:	b21d      	sxth	r5, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	b29b      	uxth	r3, r3
 800152a:	461a      	mov	r2, r3
 800152c:	0092      	lsls	r2, r2, #2
 800152e:	4413      	add	r3, r2
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	b29b      	uxth	r3, r3
 8001534:	3b06      	subs	r3, #6
 8001536:	b29b      	uxth	r3, r3
 8001538:	b21a      	sxth	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	b29b      	uxth	r3, r3
 800153e:	4619      	mov	r1, r3
 8001540:	0089      	lsls	r1, r1, #2
 8001542:	4419      	add	r1, r3
 8001544:	0049      	lsls	r1, r1, #1
 8001546:	440b      	add	r3, r1
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	b299      	uxth	r1, r3
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	b29b      	uxth	r3, r3
 8001550:	1acb      	subs	r3, r1, r3
 8001552:	b29b      	uxth	r3, r3
 8001554:	3b06      	subs	r3, #6
 8001556:	b29b      	uxth	r3, r3
 8001558:	b21b      	sxth	r3, r3
 800155a:	9301      	str	r3, [sp, #4]
 800155c:	9200      	str	r2, [sp, #0]
 800155e:	462b      	mov	r3, r5
 8001560:	4622      	mov	r2, r4
 8001562:	4601      	mov	r1, r0
 8001564:	68f8      	ldr	r0, [r7, #12]
 8001566:	f7ff fc1f 	bl	8000da8 <LCD_writePixels>
}
 800156a:	bf00      	nop
 800156c:	3718      	adds	r7, #24
 800156e:	46bd      	mov	sp, r7
 8001570:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001574:	40590000 	.word	0x40590000

08001578 <LCD_updateVals>:

void LCD_updateVals(SPI_HandleTypeDef* spi, int buf[], uint16_t color) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b0d6      	sub	sp, #344	; 0x158
 800157c:	af04      	add	r7, sp, #16
 800157e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001582:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001586:	6018      	str	r0, [r3, #0]
 8001588:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800158c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001590:	6019      	str	r1, [r3, #0]
 8001592:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001596:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 800159a:	801a      	strh	r2, [r3, #0]
	//buf[0:1] accel, buf[2:3] temp, buf[4:5] power
	int accel = (buf[0] << 4) | buf[1];
 800159c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80015a0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	011a      	lsls	r2, r3, #4
 80015aa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80015ae:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	3304      	adds	r3, #4
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	int temp = (buf[2] << 4) | buf[3];
 80015be:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80015c2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	3308      	adds	r3, #8
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	011a      	lsls	r2, r3, #4
 80015ce:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80015d2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	330c      	adds	r3, #12
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4313      	orrs	r3, r2
 80015de:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	int power = (buf[4] << 4) | buf[5];
 80015e2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80015e6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	3310      	adds	r3, #16
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	011a      	lsls	r2, r3, #4
 80015f2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80015f6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	3314      	adds	r3, #20
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4313      	orrs	r3, r2
 8001602:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	char var1[100];
	char var2[100];
	char var3[100];
	itoa(accel,var1,10);
 8001606:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800160a:	220a      	movs	r2, #10
 800160c:	4619      	mov	r1, r3
 800160e:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 8001612:	f003 ff8d 	bl	8005530 <itoa>
	itoa(temp,var2,10);
 8001616:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800161a:	220a      	movs	r2, #10
 800161c:	4619      	mov	r1, r3
 800161e:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 8001622:	f003 ff85 	bl	8005530 <itoa>
	itoa(power,var3,10);
 8001626:	f107 0310 	add.w	r3, r7, #16
 800162a:	220a      	movs	r2, #10
 800162c:	4619      	mov	r1, r3
 800162e:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8001632:	f003 ff7d 	bl	8005530 <itoa>
	LCD_drawString(spi,146,30 + 80*1,var1,4,color,4);
 8001636:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 800163a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800163e:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 8001642:	2304      	movs	r3, #4
 8001644:	9302      	str	r3, [sp, #8]
 8001646:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800164a:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 800164e:	881b      	ldrh	r3, [r3, #0]
 8001650:	9301      	str	r3, [sp, #4]
 8001652:	2304      	movs	r3, #4
 8001654:	9300      	str	r3, [sp, #0]
 8001656:	4613      	mov	r3, r2
 8001658:	226e      	movs	r2, #110	; 0x6e
 800165a:	2192      	movs	r1, #146	; 0x92
 800165c:	6800      	ldr	r0, [r0, #0]
 800165e:	f7ff fcb7 	bl	8000fd0 <LCD_drawString>
	LCD_drawString(spi,146,30 + 80*2,var2,4,color,4);
 8001662:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8001666:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800166a:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 800166e:	2304      	movs	r3, #4
 8001670:	9302      	str	r3, [sp, #8]
 8001672:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001676:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 800167a:	881b      	ldrh	r3, [r3, #0]
 800167c:	9301      	str	r3, [sp, #4]
 800167e:	2304      	movs	r3, #4
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	4613      	mov	r3, r2
 8001684:	22be      	movs	r2, #190	; 0xbe
 8001686:	2192      	movs	r1, #146	; 0x92
 8001688:	6800      	ldr	r0, [r0, #0]
 800168a:	f7ff fca1 	bl	8000fd0 <LCD_drawString>
	LCD_drawString(spi,146,30 + 80*3,var3,4,color,4);
 800168e:	f107 0210 	add.w	r2, r7, #16
 8001692:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001696:	f5a3 709e 	sub.w	r0, r3, #316	; 0x13c
 800169a:	2304      	movs	r3, #4
 800169c:	9302      	str	r3, [sp, #8]
 800169e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80016a2:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 80016a6:	881b      	ldrh	r3, [r3, #0]
 80016a8:	9301      	str	r3, [sp, #4]
 80016aa:	2304      	movs	r3, #4
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	4613      	mov	r3, r2
 80016b0:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80016b4:	2192      	movs	r1, #146	; 0x92
 80016b6:	6800      	ldr	r0, [r0, #0]
 80016b8:	f7ff fc8a 	bl	8000fd0 <LCD_drawString>
}
 80016bc:	bf00      	nop
 80016be:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
	...

080016c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	f5ad 7d60 	sub.w	sp, sp, #896	; 0x380
 80016ce:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016d0:	f000 fdcd 	bl	800226e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016d4:	f000 f910 	bl	80018f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016d8:	f000 f9d4 	bl	8001a84 <MX_GPIO_Init>
  MX_SPI1_Init();
 80016dc:	f000 f994 	bl	8001a08 <MX_SPI1_Init>
  MX_RTC_Init();
 80016e0:	f000 f96a 	bl	80019b8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  LCD_begin(&hspi1);
 80016e4:	487b      	ldr	r0, [pc, #492]	; (80018d4 <main+0x20c>)
 80016e6:	f7ff f9f5 	bl	8000ad4 <LCD_begin>
  LCD_writePixels(&hspi1,HX8357_WHITE,0,0,480,320);
 80016ea:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80016ee:	9301      	str	r3, [sp, #4]
 80016f0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	2300      	movs	r3, #0
 80016f8:	2200      	movs	r2, #0
 80016fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80016fe:	4875      	ldr	r0, [pc, #468]	; (80018d4 <main+0x20c>)
 8001700:	f7ff fb52 	bl	8000da8 <LCD_writePixels>
  LCD_drawBattery(&hspi1,380,120,HX8357_BLACK,8);
 8001704:	2308      	movs	r3, #8
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	2300      	movs	r3, #0
 800170a:	2278      	movs	r2, #120	; 0x78
 800170c:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8001710:	4870      	ldr	r0, [pc, #448]	; (80018d4 <main+0x20c>)
 8001712:	f7ff fd26 	bl	8001162 <LCD_drawBattery>
  LCD_drawFrame(&hspi1,HX8357_BLACK);
 8001716:	2100      	movs	r1, #0
 8001718:	486e      	ldr	r0, [pc, #440]	; (80018d4 <main+0x20c>)
 800171a:	f7ff fe46 	bl	80013aa <LCD_drawFrame>


  char * name = "TADAMHESPEV | UMSM";
 800171e:	4b6e      	ldr	r3, [pc, #440]	; (80018d8 <main+0x210>)
 8001720:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
  char * speed = "SPEED:";
 8001724:	4b6d      	ldr	r3, [pc, #436]	; (80018dc <main+0x214>)
 8001726:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
  char * temp = "TEMP:";
 800172a:	4b6d      	ldr	r3, [pc, #436]	; (80018e0 <main+0x218>)
 800172c:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
  char * power = "POWER:";
 8001730:	4b6c      	ldr	r3, [pc, #432]	; (80018e4 <main+0x21c>)
 8001732:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360

  char * mph = "mph";
 8001736:	4b6c      	ldr	r3, [pc, #432]	; (80018e8 <main+0x220>)
 8001738:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
  char * deg = "C";
 800173c:	4b6b      	ldr	r3, [pc, #428]	; (80018ec <main+0x224>)
 800173e:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
  char * watt = "W";
 8001742:	4b6b      	ldr	r3, [pc, #428]	; (80018f0 <main+0x228>)
 8001744:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
  LCD_drawString(&hspi1,20,30 + 80*0,name,18,HX8357_BLACK,3);
 8001748:	2303      	movs	r3, #3
 800174a:	9302      	str	r3, [sp, #8]
 800174c:	2300      	movs	r3, #0
 800174e:	9301      	str	r3, [sp, #4]
 8001750:	2312      	movs	r3, #18
 8001752:	9300      	str	r3, [sp, #0]
 8001754:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8001758:	221e      	movs	r2, #30
 800175a:	2114      	movs	r1, #20
 800175c:	485d      	ldr	r0, [pc, #372]	; (80018d4 <main+0x20c>)
 800175e:	f7ff fc37 	bl	8000fd0 <LCD_drawString>
  LCD_drawString(&hspi1,5,30 + 80*1,speed,6,HX8357_BLACK,3);
 8001762:	2303      	movs	r3, #3
 8001764:	9302      	str	r3, [sp, #8]
 8001766:	2300      	movs	r3, #0
 8001768:	9301      	str	r3, [sp, #4]
 800176a:	2306      	movs	r3, #6
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 8001772:	226e      	movs	r2, #110	; 0x6e
 8001774:	2105      	movs	r1, #5
 8001776:	4857      	ldr	r0, [pc, #348]	; (80018d4 <main+0x20c>)
 8001778:	f7ff fc2a 	bl	8000fd0 <LCD_drawString>
  LCD_drawString(&hspi1,5,30 + 80*2,temp,5,HX8357_BLACK,3);
 800177c:	2303      	movs	r3, #3
 800177e:	9302      	str	r3, [sp, #8]
 8001780:	2300      	movs	r3, #0
 8001782:	9301      	str	r3, [sp, #4]
 8001784:	2305      	movs	r3, #5
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 800178c:	22be      	movs	r2, #190	; 0xbe
 800178e:	2105      	movs	r1, #5
 8001790:	4850      	ldr	r0, [pc, #320]	; (80018d4 <main+0x20c>)
 8001792:	f7ff fc1d 	bl	8000fd0 <LCD_drawString>
  LCD_drawString(&hspi1,5,30 + 80*3,power,6,HX8357_BLACK,3);
 8001796:	2303      	movs	r3, #3
 8001798:	9302      	str	r3, [sp, #8]
 800179a:	2300      	movs	r3, #0
 800179c:	9301      	str	r3, [sp, #4]
 800179e:	2306      	movs	r3, #6
 80017a0:	9300      	str	r3, [sp, #0]
 80017a2:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 80017a6:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80017aa:	2105      	movs	r1, #5
 80017ac:	4849      	ldr	r0, [pc, #292]	; (80018d4 <main+0x20c>)
 80017ae:	f7ff fc0f 	bl	8000fd0 <LCD_drawString>

  LCD_drawString(&hspi1,280,30 + 80*1,mph,3,HX8357_BLACK,3);
 80017b2:	2303      	movs	r3, #3
 80017b4:	9302      	str	r3, [sp, #8]
 80017b6:	2300      	movs	r3, #0
 80017b8:	9301      	str	r3, [sp, #4]
 80017ba:	2303      	movs	r3, #3
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 80017c2:	226e      	movs	r2, #110	; 0x6e
 80017c4:	f44f 718c 	mov.w	r1, #280	; 0x118
 80017c8:	4842      	ldr	r0, [pc, #264]	; (80018d4 <main+0x20c>)
 80017ca:	f7ff fc01 	bl	8000fd0 <LCD_drawString>
  LCD_drawString(&hspi1,306,30 + 80*2,deg,1,HX8357_BLACK,3);
 80017ce:	2303      	movs	r3, #3
 80017d0:	9302      	str	r3, [sp, #8]
 80017d2:	2300      	movs	r3, #0
 80017d4:	9301      	str	r3, [sp, #4]
 80017d6:	2301      	movs	r3, #1
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 80017de:	22be      	movs	r2, #190	; 0xbe
 80017e0:	f44f 7199 	mov.w	r1, #306	; 0x132
 80017e4:	483b      	ldr	r0, [pc, #236]	; (80018d4 <main+0x20c>)
 80017e6:	f7ff fbf3 	bl	8000fd0 <LCD_drawString>
  LCD_drawString(&hspi1,306,30 + 80*3,watt,1,HX8357_BLACK,3);
 80017ea:	2303      	movs	r3, #3
 80017ec:	9302      	str	r3, [sp, #8]
 80017ee:	2300      	movs	r3, #0
 80017f0:	9301      	str	r3, [sp, #4]
 80017f2:	2301      	movs	r3, #1
 80017f4:	9300      	str	r3, [sp, #0]
 80017f6:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80017fa:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80017fe:	f44f 7199 	mov.w	r1, #306	; 0x132
 8001802:	4834      	ldr	r0, [pc, #208]	; (80018d4 <main+0x20c>)
 8001804:	f7ff fbe4 	bl	8000fd0 <LCD_drawString>

  int volt_percent = 85;
 8001808:	2355      	movs	r3, #85	; 0x55
 800180a:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
  char lev[801];
  itoa(volt_percent,lev,10);
 800180e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001812:	220a      	movs	r2, #10
 8001814:	4619      	mov	r1, r3
 8001816:	f8d7 0350 	ldr.w	r0, [r7, #848]	; 0x350
 800181a:	f003 fe89 	bl	8005530 <itoa>

  LCD_fillBattery(&hspi1,380,120,8,volt_percent);
 800181e:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8001822:	9300      	str	r3, [sp, #0]
 8001824:	2308      	movs	r3, #8
 8001826:	2278      	movs	r2, #120	; 0x78
 8001828:	f44f 71be 	mov.w	r1, #380	; 0x17c
 800182c:	4829      	ldr	r0, [pc, #164]	; (80018d4 <main+0x20c>)
 800182e:	f7ff fdf5 	bl	800141c <LCD_fillBattery>
  LCD_drawString(&hspi1,370,50,lev,3,HX8357_BLACK,4);
 8001832:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001836:	2204      	movs	r2, #4
 8001838:	9202      	str	r2, [sp, #8]
 800183a:	2200      	movs	r2, #0
 800183c:	9201      	str	r2, [sp, #4]
 800183e:	2203      	movs	r2, #3
 8001840:	9200      	str	r2, [sp, #0]
 8001842:	2232      	movs	r2, #50	; 0x32
 8001844:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8001848:	4822      	ldr	r0, [pc, #136]	; (80018d4 <main+0x20c>)
 800184a:	f7ff fbc1 	bl	8000fd0 <LCD_drawString>
  LCD_drawString(&hspi1,442,50,"%",1,HX8357_BLACK,4);
 800184e:	2304      	movs	r3, #4
 8001850:	9302      	str	r3, [sp, #8]
 8001852:	2300      	movs	r3, #0
 8001854:	9301      	str	r3, [sp, #4]
 8001856:	2301      	movs	r3, #1
 8001858:	9300      	str	r3, [sp, #0]
 800185a:	4b26      	ldr	r3, [pc, #152]	; (80018f4 <main+0x22c>)
 800185c:	2232      	movs	r2, #50	; 0x32
 800185e:	f44f 71dd 	mov.w	r1, #442	; 0x1ba
 8001862:	481c      	ldr	r0, [pc, #112]	; (80018d4 <main+0x20c>)
 8001864:	f7ff fbb4 	bl	8000fd0 <LCD_drawString>

  int buf[10] = {4,3,1,4,5,2};
 8001868:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800186c:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8001870:	4618      	mov	r0, r3
 8001872:	2328      	movs	r3, #40	; 0x28
 8001874:	461a      	mov	r2, r3
 8001876:	2100      	movs	r1, #0
 8001878:	f003 fe9e 	bl	80055b8 <memset>
 800187c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001880:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8001884:	2204      	movs	r2, #4
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800188c:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8001890:	2203      	movs	r2, #3
 8001892:	605a      	str	r2, [r3, #4]
 8001894:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001898:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 800189c:	2201      	movs	r2, #1
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80018a4:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 80018a8:	2204      	movs	r2, #4
 80018aa:	60da      	str	r2, [r3, #12]
 80018ac:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80018b0:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 80018b4:	2205      	movs	r2, #5
 80018b6:	611a      	str	r2, [r3, #16]
 80018b8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80018bc:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 80018c0:	2202      	movs	r2, #2
 80018c2:	615a      	str	r2, [r3, #20]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  LCD_updateVals(&hspi1,buf,HX8357_BLACK);
 80018c4:	1d3b      	adds	r3, r7, #4
 80018c6:	2200      	movs	r2, #0
 80018c8:	4619      	mov	r1, r3
 80018ca:	4802      	ldr	r0, [pc, #8]	; (80018d4 <main+0x20c>)
 80018cc:	f7ff fe54 	bl	8001578 <LCD_updateVals>
 80018d0:	e7f8      	b.n	80018c4 <main+0x1fc>
 80018d2:	bf00      	nop
 80018d4:	200000b4 	.word	0x200000b4
 80018d8:	08005628 	.word	0x08005628
 80018dc:	0800563c 	.word	0x0800563c
 80018e0:	08005644 	.word	0x08005644
 80018e4:	0800564c 	.word	0x0800564c
 80018e8:	08005654 	.word	0x08005654
 80018ec:	08005658 	.word	0x08005658
 80018f0:	0800565c 	.word	0x0800565c
 80018f4:	08005660 	.word	0x08005660

080018f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b096      	sub	sp, #88	; 0x58
 80018fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018fe:	f107 0314 	add.w	r3, r7, #20
 8001902:	2244      	movs	r2, #68	; 0x44
 8001904:	2100      	movs	r1, #0
 8001906:	4618      	mov	r0, r3
 8001908:	f003 fe56 	bl	80055b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800190c:	463b      	mov	r3, r7
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	605a      	str	r2, [r3, #4]
 8001914:	609a      	str	r2, [r3, #8]
 8001916:	60da      	str	r2, [r3, #12]
 8001918:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800191a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800191e:	f000 ffbf 	bl	80028a0 <HAL_PWREx_ControlVoltageScaling>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001928:	f000 fb18 	bl	8001f5c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800192c:	f000 ff88 	bl	8002840 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001930:	4b20      	ldr	r3, [pc, #128]	; (80019b4 <SystemClock_Config+0xbc>)
 8001932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001936:	4a1f      	ldr	r2, [pc, #124]	; (80019b4 <SystemClock_Config+0xbc>)
 8001938:	f023 0318 	bic.w	r3, r3, #24
 800193c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001940:	2314      	movs	r3, #20
 8001942:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001944:	2301      	movs	r3, #1
 8001946:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001948:	2301      	movs	r3, #1
 800194a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800194c:	2300      	movs	r3, #0
 800194e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001950:	2360      	movs	r3, #96	; 0x60
 8001952:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001954:	2302      	movs	r3, #2
 8001956:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001958:	2301      	movs	r3, #1
 800195a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800195c:	2301      	movs	r3, #1
 800195e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 36;
 8001960:	2324      	movs	r3, #36	; 0x24
 8001962:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001964:	2302      	movs	r3, #2
 8001966:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001968:	2302      	movs	r3, #2
 800196a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800196c:	2302      	movs	r3, #2
 800196e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001970:	f107 0314 	add.w	r3, r7, #20
 8001974:	4618      	mov	r0, r3
 8001976:	f001 f847 	bl	8002a08 <HAL_RCC_OscConfig>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001980:	f000 faec 	bl	8001f5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001984:	230f      	movs	r3, #15
 8001986:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001988:	2303      	movs	r3, #3
 800198a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800198c:	2300      	movs	r3, #0
 800198e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001990:	2300      	movs	r3, #0
 8001992:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001994:	2300      	movs	r3, #0
 8001996:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001998:	463b      	mov	r3, r7
 800199a:	2103      	movs	r1, #3
 800199c:	4618      	mov	r0, r3
 800199e:	f001 fc4d 	bl	800323c <HAL_RCC_ClockConfig>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80019a8:	f000 fad8 	bl	8001f5c <Error_Handler>
  }
}
 80019ac:	bf00      	nop
 80019ae:	3758      	adds	r7, #88	; 0x58
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40021000 	.word	0x40021000

080019b8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80019bc:	4b10      	ldr	r3, [pc, #64]	; (8001a00 <MX_RTC_Init+0x48>)
 80019be:	4a11      	ldr	r2, [pc, #68]	; (8001a04 <MX_RTC_Init+0x4c>)
 80019c0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80019c2:	4b0f      	ldr	r3, [pc, #60]	; (8001a00 <MX_RTC_Init+0x48>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80019c8:	4b0d      	ldr	r3, [pc, #52]	; (8001a00 <MX_RTC_Init+0x48>)
 80019ca:	227f      	movs	r2, #127	; 0x7f
 80019cc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80019ce:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <MX_RTC_Init+0x48>)
 80019d0:	22ff      	movs	r2, #255	; 0xff
 80019d2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80019d4:	4b0a      	ldr	r3, [pc, #40]	; (8001a00 <MX_RTC_Init+0x48>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80019da:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <MX_RTC_Init+0x48>)
 80019dc:	2200      	movs	r2, #0
 80019de:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80019e0:	4b07      	ldr	r3, [pc, #28]	; (8001a00 <MX_RTC_Init+0x48>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80019e6:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <MX_RTC_Init+0x48>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80019ec:	4804      	ldr	r0, [pc, #16]	; (8001a00 <MX_RTC_Init+0x48>)
 80019ee:	f002 fc17 	bl	8004220 <HAL_RTC_Init>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80019f8:	f000 fab0 	bl	8001f5c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80019fc:	bf00      	nop
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20000090 	.word	0x20000090
 8001a04:	40002800 	.word	0x40002800

08001a08 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a0c:	4b1b      	ldr	r3, [pc, #108]	; (8001a7c <MX_SPI1_Init+0x74>)
 8001a0e:	4a1c      	ldr	r2, [pc, #112]	; (8001a80 <MX_SPI1_Init+0x78>)
 8001a10:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a12:	4b1a      	ldr	r3, [pc, #104]	; (8001a7c <MX_SPI1_Init+0x74>)
 8001a14:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a18:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a1a:	4b18      	ldr	r3, [pc, #96]	; (8001a7c <MX_SPI1_Init+0x74>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a20:	4b16      	ldr	r3, [pc, #88]	; (8001a7c <MX_SPI1_Init+0x74>)
 8001a22:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001a26:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a28:	4b14      	ldr	r3, [pc, #80]	; (8001a7c <MX_SPI1_Init+0x74>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a2e:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <MX_SPI1_Init+0x74>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a34:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <MX_SPI1_Init+0x74>)
 8001a36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a3a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a3c:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <MX_SPI1_Init+0x74>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a42:	4b0e      	ldr	r3, [pc, #56]	; (8001a7c <MX_SPI1_Init+0x74>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a48:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <MX_SPI1_Init+0x74>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a4e:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <MX_SPI1_Init+0x74>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001a54:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <MX_SPI1_Init+0x74>)
 8001a56:	2207      	movs	r2, #7
 8001a58:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a5a:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <MX_SPI1_Init+0x74>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a60:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <MX_SPI1_Init+0x74>)
 8001a62:	2208      	movs	r2, #8
 8001a64:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a66:	4805      	ldr	r0, [pc, #20]	; (8001a7c <MX_SPI1_Init+0x74>)
 8001a68:	f002 fcf8 	bl	800445c <HAL_SPI_Init>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001a72:	f000 fa73 	bl	8001f5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	200000b4 	.word	0x200000b4
 8001a80:	40013000 	.word	0x40013000

08001a84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08e      	sub	sp, #56	; 0x38
 8001a88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	605a      	str	r2, [r3, #4]
 8001a94:	609a      	str	r2, [r3, #8]
 8001a96:	60da      	str	r2, [r3, #12]
 8001a98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a9a:	4bb2      	ldr	r3, [pc, #712]	; (8001d64 <MX_GPIO_Init+0x2e0>)
 8001a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9e:	4ab1      	ldr	r2, [pc, #708]	; (8001d64 <MX_GPIO_Init+0x2e0>)
 8001aa0:	f043 0310 	orr.w	r3, r3, #16
 8001aa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aa6:	4baf      	ldr	r3, [pc, #700]	; (8001d64 <MX_GPIO_Init+0x2e0>)
 8001aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aaa:	f003 0310 	and.w	r3, r3, #16
 8001aae:	623b      	str	r3, [r7, #32]
 8001ab0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab2:	4bac      	ldr	r3, [pc, #688]	; (8001d64 <MX_GPIO_Init+0x2e0>)
 8001ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab6:	4aab      	ldr	r2, [pc, #684]	; (8001d64 <MX_GPIO_Init+0x2e0>)
 8001ab8:	f043 0304 	orr.w	r3, r3, #4
 8001abc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001abe:	4ba9      	ldr	r3, [pc, #676]	; (8001d64 <MX_GPIO_Init+0x2e0>)
 8001ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac2:	f003 0304 	and.w	r3, r3, #4
 8001ac6:	61fb      	str	r3, [r7, #28]
 8001ac8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001aca:	4ba6      	ldr	r3, [pc, #664]	; (8001d64 <MX_GPIO_Init+0x2e0>)
 8001acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ace:	4aa5      	ldr	r2, [pc, #660]	; (8001d64 <MX_GPIO_Init+0x2e0>)
 8001ad0:	f043 0320 	orr.w	r3, r3, #32
 8001ad4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ad6:	4ba3      	ldr	r3, [pc, #652]	; (8001d64 <MX_GPIO_Init+0x2e0>)
 8001ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ada:	f003 0320 	and.w	r3, r3, #32
 8001ade:	61bb      	str	r3, [r7, #24]
 8001ae0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ae2:	4ba0      	ldr	r3, [pc, #640]	; (8001d64 <MX_GPIO_Init+0x2e0>)
 8001ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae6:	4a9f      	ldr	r2, [pc, #636]	; (8001d64 <MX_GPIO_Init+0x2e0>)
 8001ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aee:	4b9d      	ldr	r3, [pc, #628]	; (8001d64 <MX_GPIO_Init+0x2e0>)
 8001af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001af6:	617b      	str	r3, [r7, #20]
 8001af8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afa:	4b9a      	ldr	r3, [pc, #616]	; (8001d64 <MX_GPIO_Init+0x2e0>)
 8001afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afe:	4a99      	ldr	r2, [pc, #612]	; (8001d64 <MX_GPIO_Init+0x2e0>)
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b06:	4b97      	ldr	r3, [pc, #604]	; (8001d64 <MX_GPIO_Init+0x2e0>)
 8001b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	613b      	str	r3, [r7, #16]
 8001b10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b12:	4b94      	ldr	r3, [pc, #592]	; (8001d64 <MX_GPIO_Init+0x2e0>)
 8001b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b16:	4a93      	ldr	r2, [pc, #588]	; (8001d64 <MX_GPIO_Init+0x2e0>)
 8001b18:	f043 0302 	orr.w	r3, r3, #2
 8001b1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b1e:	4b91      	ldr	r3, [pc, #580]	; (8001d64 <MX_GPIO_Init+0x2e0>)
 8001b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b2a:	4b8e      	ldr	r3, [pc, #568]	; (8001d64 <MX_GPIO_Init+0x2e0>)
 8001b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2e:	4a8d      	ldr	r2, [pc, #564]	; (8001d64 <MX_GPIO_Init+0x2e0>)
 8001b30:	f043 0308 	orr.w	r3, r3, #8
 8001b34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b36:	4b8b      	ldr	r3, [pc, #556]	; (8001d64 <MX_GPIO_Init+0x2e0>)
 8001b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3a:	f003 0308 	and.w	r3, r3, #8
 8001b3e:	60bb      	str	r3, [r7, #8]
 8001b40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b42:	4b88      	ldr	r3, [pc, #544]	; (8001d64 <MX_GPIO_Init+0x2e0>)
 8001b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b46:	4a87      	ldr	r2, [pc, #540]	; (8001d64 <MX_GPIO_Init+0x2e0>)
 8001b48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b4e:	4b85      	ldr	r3, [pc, #532]	; (8001d64 <MX_GPIO_Init+0x2e0>)
 8001b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b56:	607b      	str	r3, [r7, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8001b5a:	f000 ff45 	bl	80029e8 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8001b64:	4880      	ldr	r0, [pc, #512]	; (8001d68 <MX_GPIO_Init+0x2e4>)
 8001b66:	f000 fe53 	bl	8002810 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b6a:	230c      	movs	r3, #12
 8001b6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b76:	2300      	movs	r3, #0
 8001b78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001b7a:	230d      	movs	r3, #13
 8001b7c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b82:	4619      	mov	r1, r3
 8001b84:	4879      	ldr	r0, [pc, #484]	; (8001d6c <MX_GPIO_Init+0x2e8>)
 8001b86:	f000 fcb1 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001b8a:	2307      	movs	r3, #7
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b8e:	2312      	movs	r3, #18
 8001b90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b96:	2303      	movs	r3, #3
 8001b98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b9a:	2304      	movs	r3, #4
 8001b9c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4870      	ldr	r0, [pc, #448]	; (8001d68 <MX_GPIO_Init+0x2e4>)
 8001ba6:	f000 fca1 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001baa:	2380      	movs	r3, #128	; 0x80
 8001bac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001bba:	230d      	movs	r3, #13
 8001bbc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4868      	ldr	r0, [pc, #416]	; (8001d68 <MX_GPIO_Init+0x2e4>)
 8001bc6:	f000 fc91 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001bca:	233f      	movs	r3, #63	; 0x3f
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001bce:	230b      	movs	r3, #11
 8001bd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4864      	ldr	r0, [pc, #400]	; (8001d70 <MX_GPIO_Init+0x2ec>)
 8001bde:	f000 fc85 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001be2:	2301      	movs	r3, #1
 8001be4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be6:	2302      	movs	r3, #2
 8001be8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c00:	f000 fc74 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8001c04:	230a      	movs	r3, #10
 8001c06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001c08:	230b      	movs	r3, #11
 8001c0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c14:	4619      	mov	r1, r3
 8001c16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c1a:	f000 fc67 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c22:	2302      	movs	r3, #2
 8001c24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c36:	4619      	mov	r1, r3
 8001c38:	484e      	ldr	r0, [pc, #312]	; (8001d74 <MX_GPIO_Init+0x2f0>)
 8001c3a:	f000 fc57 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001c42:	230b      	movs	r3, #11
 8001c44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4848      	ldr	r0, [pc, #288]	; (8001d74 <MX_GPIO_Init+0x2f0>)
 8001c52:	f000 fc4b 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8001c56:	2344      	movs	r3, #68	; 0x44
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c66:	4619      	mov	r1, r3
 8001c68:	4842      	ldr	r0, [pc, #264]	; (8001d74 <MX_GPIO_Init+0x2f0>)
 8001c6a:	f000 fc3f 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PF12 PF13 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001c6e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001c72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c74:	2301      	movs	r3, #1
 8001c76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c84:	4619      	mov	r1, r3
 8001c86:	4838      	ldr	r0, [pc, #224]	; (8001d68 <MX_GPIO_Init+0x2e4>)
 8001c88:	f000 fc30 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001c8c:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c92:	2302      	movs	r3, #2
 8001c94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ca2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4830      	ldr	r0, [pc, #192]	; (8001d6c <MX_GPIO_Init+0x2e8>)
 8001caa:	f000 fc1f 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001cae:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001cb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4828      	ldr	r0, [pc, #160]	; (8001d6c <MX_GPIO_Init+0x2e8>)
 8001ccc:	f000 fc0e 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001cd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cea:	4619      	mov	r1, r3
 8001cec:	4821      	ldr	r0, [pc, #132]	; (8001d74 <MX_GPIO_Init+0x2f0>)
 8001cee:	f000 fbfd 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001cf2:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8001cf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d00:	2300      	movs	r3, #0
 8001d02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001d04:	230d      	movs	r3, #13
 8001d06:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4819      	ldr	r0, [pc, #100]	; (8001d74 <MX_GPIO_Init+0x2f0>)
 8001d10:	f000 fbec 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001d14:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d22:	2300      	movs	r3, #0
 8001d24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8001d26:	230e      	movs	r3, #14
 8001d28:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4810      	ldr	r0, [pc, #64]	; (8001d74 <MX_GPIO_Init+0x2f0>)
 8001d32:	f000 fbdb 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d44:	2303      	movs	r3, #3
 8001d46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d48:	2307      	movs	r3, #7
 8001d4a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d50:	4619      	mov	r1, r3
 8001d52:	4809      	ldr	r0, [pc, #36]	; (8001d78 <MX_GPIO_Init+0x2f4>)
 8001d54:	f000 fbca 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001d58:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001d5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d62:	e00b      	b.n	8001d7c <MX_GPIO_Init+0x2f8>
 8001d64:	40021000 	.word	0x40021000
 8001d68:	48001400 	.word	0x48001400
 8001d6c:	48001000 	.word	0x48001000
 8001d70:	48000800 	.word	0x48000800
 8001d74:	48000400 	.word	0x48000400
 8001d78:	48000c00 	.word	0x48000c00
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d80:	2300      	movs	r3, #0
 8001d82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001d84:	2302      	movs	r3, #2
 8001d86:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4865      	ldr	r0, [pc, #404]	; (8001f24 <MX_GPIO_Init+0x4a0>)
 8001d90:	f000 fbac 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001d94:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001d98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da2:	2303      	movs	r3, #3
 8001da4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001da6:	2308      	movs	r3, #8
 8001da8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001daa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dae:	4619      	mov	r1, r3
 8001db0:	485d      	ldr	r0, [pc, #372]	; (8001f28 <MX_GPIO_Init+0x4a4>)
 8001db2:	f000 fb9b 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001db6:	2340      	movs	r3, #64	; 0x40
 8001db8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001dc6:	230d      	movs	r3, #13
 8001dc8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4856      	ldr	r0, [pc, #344]	; (8001f2c <MX_GPIO_Init+0x4a8>)
 8001dd2:	f000 fb8b 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001dd6:	2380      	movs	r3, #128	; 0x80
 8001dd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dda:	2302      	movs	r3, #2
 8001ddc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de2:	2300      	movs	r3, #0
 8001de4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001de6:	2302      	movs	r3, #2
 8001de8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dee:	4619      	mov	r1, r3
 8001df0:	484e      	ldr	r0, [pc, #312]	; (8001f2c <MX_GPIO_Init+0x4a8>)
 8001df2:	f000 fb7b 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001df6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001dfa:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e04:	2303      	movs	r3, #3
 8001e06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001e08:	230c      	movs	r3, #12
 8001e0a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e10:	4619      	mov	r1, r3
 8001e12:	4846      	ldr	r0, [pc, #280]	; (8001f2c <MX_GPIO_Init+0x4a8>)
 8001e14:	f000 fb6a 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8001e18:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001e1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e26:	2303      	movs	r3, #3
 8001e28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001e2a:	230a      	movs	r3, #10
 8001e2c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e32:	4619      	mov	r1, r3
 8001e34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e38:	f000 fb58 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e42:	2300      	movs	r3, #0
 8001e44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e4e:	4619      	mov	r1, r3
 8001e50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e54:	f000 fb4a 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e64:	2303      	movs	r3, #3
 8001e66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001e68:	2309      	movs	r3, #9
 8001e6a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e70:	4619      	mov	r1, r3
 8001e72:	482c      	ldr	r0, [pc, #176]	; (8001f24 <MX_GPIO_Init+0x4a0>)
 8001e74:	f000 fb3a 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e78:	2304      	movs	r3, #4
 8001e7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e84:	2303      	movs	r3, #3
 8001e86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001e88:	230c      	movs	r3, #12
 8001e8a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e90:	4619      	mov	r1, r3
 8001e92:	4824      	ldr	r0, [pc, #144]	; (8001f24 <MX_GPIO_Init+0x4a0>)
 8001e94:	f000 fb2a 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001e98:	2378      	movs	r3, #120	; 0x78
 8001e9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ea8:	2307      	movs	r3, #7
 8001eaa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	481c      	ldr	r0, [pc, #112]	; (8001f24 <MX_GPIO_Init+0x4a0>)
 8001eb4:	f000 fb1a 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001eb8:	2338      	movs	r3, #56	; 0x38
 8001eba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ec8:	2306      	movs	r3, #6
 8001eca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ecc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4817      	ldr	r0, [pc, #92]	; (8001f30 <MX_GPIO_Init+0x4ac>)
 8001ed4:	f000 fb0a 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ed8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ede:	2312      	movs	r3, #18
 8001ee0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001eea:	2304      	movs	r3, #4
 8001eec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	480e      	ldr	r0, [pc, #56]	; (8001f30 <MX_GPIO_Init+0x4ac>)
 8001ef6:	f000 faf9 	bl	80024ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001efa:	2301      	movs	r3, #1
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efe:	2302      	movs	r3, #2
 8001f00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f06:	2300      	movs	r3, #0
 8001f08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f12:	4619      	mov	r1, r3
 8001f14:	4807      	ldr	r0, [pc, #28]	; (8001f34 <MX_GPIO_Init+0x4b0>)
 8001f16:	f000 fae9 	bl	80024ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f1a:	bf00      	nop
 8001f1c:	3738      	adds	r7, #56	; 0x38
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	48000c00 	.word	0x48000c00
 8001f28:	48001800 	.word	0x48001800
 8001f2c:	48000800 	.word	0x48000800
 8001f30:	48000400 	.word	0x48000400
 8001f34:	48001000 	.word	0x48001000

08001f38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a04      	ldr	r2, [pc, #16]	; (8001f58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d101      	bne.n	8001f4e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f4a:	f000 f9a9 	bl	80022a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40000800 	.word	0x40000800

08001f5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f60:	b672      	cpsid	i
}
 8001f62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f64:	e7fe      	b.n	8001f64 <Error_Handler+0x8>
	...

08001f68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f6e:	4b0f      	ldr	r3, [pc, #60]	; (8001fac <HAL_MspInit+0x44>)
 8001f70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f72:	4a0e      	ldr	r2, [pc, #56]	; (8001fac <HAL_MspInit+0x44>)
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	6613      	str	r3, [r2, #96]	; 0x60
 8001f7a:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <HAL_MspInit+0x44>)
 8001f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	607b      	str	r3, [r7, #4]
 8001f84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f86:	4b09      	ldr	r3, [pc, #36]	; (8001fac <HAL_MspInit+0x44>)
 8001f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8a:	4a08      	ldr	r2, [pc, #32]	; (8001fac <HAL_MspInit+0x44>)
 8001f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f90:	6593      	str	r3, [r2, #88]	; 0x58
 8001f92:	4b06      	ldr	r3, [pc, #24]	; (8001fac <HAL_MspInit+0x44>)
 8001f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9a:	603b      	str	r3, [r7, #0]
 8001f9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	40021000 	.word	0x40021000

08001fb0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b0a8      	sub	sp, #160	; 0xa0
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fb8:	f107 030c 	add.w	r3, r7, #12
 8001fbc:	2294      	movs	r2, #148	; 0x94
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f003 faf9 	bl	80055b8 <memset>
  if(hrtc->Instance==RTC)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a10      	ldr	r2, [pc, #64]	; (800200c <HAL_RTC_MspInit+0x5c>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d118      	bne.n	8002002 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001fd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fd4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001fd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fde:	f107 030c 	add.w	r3, r7, #12
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f001 fc04 	bl	80037f0 <HAL_RCCEx_PeriphCLKConfig>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001fee:	f7ff ffb5 	bl	8001f5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ff2:	4b07      	ldr	r3, [pc, #28]	; (8002010 <HAL_RTC_MspInit+0x60>)
 8001ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff8:	4a05      	ldr	r2, [pc, #20]	; (8002010 <HAL_RTC_MspInit+0x60>)
 8001ffa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ffe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002002:	bf00      	nop
 8002004:	37a0      	adds	r7, #160	; 0xa0
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40002800 	.word	0x40002800
 8002010:	40021000 	.word	0x40021000

08002014 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b08a      	sub	sp, #40	; 0x28
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800201c:	f107 0314 	add.w	r3, r7, #20
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	605a      	str	r2, [r3, #4]
 8002026:	609a      	str	r2, [r3, #8]
 8002028:	60da      	str	r2, [r3, #12]
 800202a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a17      	ldr	r2, [pc, #92]	; (8002090 <HAL_SPI_MspInit+0x7c>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d128      	bne.n	8002088 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002036:	4b17      	ldr	r3, [pc, #92]	; (8002094 <HAL_SPI_MspInit+0x80>)
 8002038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800203a:	4a16      	ldr	r2, [pc, #88]	; (8002094 <HAL_SPI_MspInit+0x80>)
 800203c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002040:	6613      	str	r3, [r2, #96]	; 0x60
 8002042:	4b14      	ldr	r3, [pc, #80]	; (8002094 <HAL_SPI_MspInit+0x80>)
 8002044:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002046:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800204a:	613b      	str	r3, [r7, #16]
 800204c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800204e:	4b11      	ldr	r3, [pc, #68]	; (8002094 <HAL_SPI_MspInit+0x80>)
 8002050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002052:	4a10      	ldr	r2, [pc, #64]	; (8002094 <HAL_SPI_MspInit+0x80>)
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	64d3      	str	r3, [r2, #76]	; 0x4c
 800205a:	4b0e      	ldr	r3, [pc, #56]	; (8002094 <HAL_SPI_MspInit+0x80>)
 800205c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002066:	23f0      	movs	r3, #240	; 0xf0
 8002068:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206a:	2302      	movs	r3, #2
 800206c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206e:	2300      	movs	r3, #0
 8002070:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002072:	2303      	movs	r3, #3
 8002074:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002076:	2305      	movs	r3, #5
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207a:	f107 0314 	add.w	r3, r7, #20
 800207e:	4619      	mov	r1, r3
 8002080:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002084:	f000 fa32 	bl	80024ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002088:	bf00      	nop
 800208a:	3728      	adds	r7, #40	; 0x28
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40013000 	.word	0x40013000
 8002094:	40021000 	.word	0x40021000

08002098 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b08e      	sub	sp, #56	; 0x38
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80020a0:	2300      	movs	r3, #0
 80020a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80020a6:	4b34      	ldr	r3, [pc, #208]	; (8002178 <HAL_InitTick+0xe0>)
 80020a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020aa:	4a33      	ldr	r2, [pc, #204]	; (8002178 <HAL_InitTick+0xe0>)
 80020ac:	f043 0304 	orr.w	r3, r3, #4
 80020b0:	6593      	str	r3, [r2, #88]	; 0x58
 80020b2:	4b31      	ldr	r3, [pc, #196]	; (8002178 <HAL_InitTick+0xe0>)
 80020b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b6:	f003 0304 	and.w	r3, r3, #4
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020be:	f107 0210 	add.w	r2, r7, #16
 80020c2:	f107 0314 	add.w	r3, r7, #20
 80020c6:	4611      	mov	r1, r2
 80020c8:	4618      	mov	r0, r3
 80020ca:	f001 fa9f 	bl	800360c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80020ce:	6a3b      	ldr	r3, [r7, #32]
 80020d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80020d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d103      	bne.n	80020e0 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80020d8:	f001 fa82 	bl	80035e0 <HAL_RCC_GetPCLK1Freq>
 80020dc:	6378      	str	r0, [r7, #52]	; 0x34
 80020de:	e004      	b.n	80020ea <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80020e0:	f001 fa7e 	bl	80035e0 <HAL_RCC_GetPCLK1Freq>
 80020e4:	4603      	mov	r3, r0
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80020ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ec:	4a23      	ldr	r2, [pc, #140]	; (800217c <HAL_InitTick+0xe4>)
 80020ee:	fba2 2303 	umull	r2, r3, r2, r3
 80020f2:	0c9b      	lsrs	r3, r3, #18
 80020f4:	3b01      	subs	r3, #1
 80020f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80020f8:	4b21      	ldr	r3, [pc, #132]	; (8002180 <HAL_InitTick+0xe8>)
 80020fa:	4a22      	ldr	r2, [pc, #136]	; (8002184 <HAL_InitTick+0xec>)
 80020fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80020fe:	4b20      	ldr	r3, [pc, #128]	; (8002180 <HAL_InitTick+0xe8>)
 8002100:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002104:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8002106:	4a1e      	ldr	r2, [pc, #120]	; (8002180 <HAL_InitTick+0xe8>)
 8002108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800210a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800210c:	4b1c      	ldr	r3, [pc, #112]	; (8002180 <HAL_InitTick+0xe8>)
 800210e:	2200      	movs	r2, #0
 8002110:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002112:	4b1b      	ldr	r3, [pc, #108]	; (8002180 <HAL_InitTick+0xe8>)
 8002114:	2200      	movs	r2, #0
 8002116:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002118:	4b19      	ldr	r3, [pc, #100]	; (8002180 <HAL_InitTick+0xe8>)
 800211a:	2200      	movs	r2, #0
 800211c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800211e:	4818      	ldr	r0, [pc, #96]	; (8002180 <HAL_InitTick+0xe8>)
 8002120:	f002 ff3a 	bl	8004f98 <HAL_TIM_Base_Init>
 8002124:	4603      	mov	r3, r0
 8002126:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800212a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800212e:	2b00      	cmp	r3, #0
 8002130:	d11b      	bne.n	800216a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8002132:	4813      	ldr	r0, [pc, #76]	; (8002180 <HAL_InitTick+0xe8>)
 8002134:	f002 ff92 	bl	800505c <HAL_TIM_Base_Start_IT>
 8002138:	4603      	mov	r3, r0
 800213a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800213e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002142:	2b00      	cmp	r3, #0
 8002144:	d111      	bne.n	800216a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002146:	201e      	movs	r0, #30
 8002148:	f000 f9c2 	bl	80024d0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b0f      	cmp	r3, #15
 8002150:	d808      	bhi.n	8002164 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8002152:	2200      	movs	r2, #0
 8002154:	6879      	ldr	r1, [r7, #4]
 8002156:	201e      	movs	r0, #30
 8002158:	f000 f99e 	bl	8002498 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800215c:	4a0a      	ldr	r2, [pc, #40]	; (8002188 <HAL_InitTick+0xf0>)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6013      	str	r3, [r2, #0]
 8002162:	e002      	b.n	800216a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800216a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800216e:	4618      	mov	r0, r3
 8002170:	3738      	adds	r7, #56	; 0x38
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40021000 	.word	0x40021000
 800217c:	431bde83 	.word	0x431bde83
 8002180:	20000118 	.word	0x20000118
 8002184:	40000800 	.word	0x40000800
 8002188:	2000006c 	.word	0x2000006c

0800218c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002190:	e7fe      	b.n	8002190 <NMI_Handler+0x4>

08002192 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002192:	b480      	push	{r7}
 8002194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002196:	e7fe      	b.n	8002196 <HardFault_Handler+0x4>

08002198 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800219c:	e7fe      	b.n	800219c <MemManage_Handler+0x4>

0800219e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800219e:	b480      	push	{r7}
 80021a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021a2:	e7fe      	b.n	80021a2 <BusFault_Handler+0x4>

080021a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021a8:	e7fe      	b.n	80021a8 <UsageFault_Handler+0x4>

080021aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021aa:	b480      	push	{r7}
 80021ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021c6:	b480      	push	{r7}
 80021c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ca:	bf00      	nop
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
	...

080021e4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80021e8:	4802      	ldr	r0, [pc, #8]	; (80021f4 <TIM4_IRQHandler+0x10>)
 80021ea:	f002 ffa7 	bl	800513c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	20000118 	.word	0x20000118

080021f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80021fc:	4b06      	ldr	r3, [pc, #24]	; (8002218 <SystemInit+0x20>)
 80021fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002202:	4a05      	ldr	r2, [pc, #20]	; (8002218 <SystemInit+0x20>)
 8002204:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002208:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800220c:	bf00      	nop
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	e000ed00 	.word	0xe000ed00

0800221c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800221c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002254 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002220:	f7ff ffea 	bl	80021f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002224:	480c      	ldr	r0, [pc, #48]	; (8002258 <LoopForever+0x6>)
  ldr r1, =_edata
 8002226:	490d      	ldr	r1, [pc, #52]	; (800225c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002228:	4a0d      	ldr	r2, [pc, #52]	; (8002260 <LoopForever+0xe>)
  movs r3, #0
 800222a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800222c:	e002      	b.n	8002234 <LoopCopyDataInit>

0800222e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800222e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002230:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002232:	3304      	adds	r3, #4

08002234 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002234:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002236:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002238:	d3f9      	bcc.n	800222e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800223a:	4a0a      	ldr	r2, [pc, #40]	; (8002264 <LoopForever+0x12>)
  ldr r4, =_ebss
 800223c:	4c0a      	ldr	r4, [pc, #40]	; (8002268 <LoopForever+0x16>)
  movs r3, #0
 800223e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002240:	e001      	b.n	8002246 <LoopFillZerobss>

08002242 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002242:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002244:	3204      	adds	r2, #4

08002246 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002246:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002248:	d3fb      	bcc.n	8002242 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800224a:	f003 f9bd 	bl	80055c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800224e:	f7ff fa3b 	bl	80016c8 <main>

08002252 <LoopForever>:

LoopForever:
    b LoopForever
 8002252:	e7fe      	b.n	8002252 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002254:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002258:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800225c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002260:	08005bdc 	.word	0x08005bdc
  ldr r2, =_sbss
 8002264:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002268:	20000168 	.word	0x20000168

0800226c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800226c:	e7fe      	b.n	800226c <ADC1_IRQHandler>

0800226e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b082      	sub	sp, #8
 8002272:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002274:	2300      	movs	r3, #0
 8002276:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002278:	2003      	movs	r0, #3
 800227a:	f000 f902 	bl	8002482 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800227e:	200f      	movs	r0, #15
 8002280:	f7ff ff0a 	bl	8002098 <HAL_InitTick>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d002      	beq.n	8002290 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	71fb      	strb	r3, [r7, #7]
 800228e:	e001      	b.n	8002294 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002290:	f7ff fe6a 	bl	8001f68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002294:	79fb      	ldrb	r3, [r7, #7]
}
 8002296:	4618      	mov	r0, r3
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
	...

080022a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022a4:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <HAL_IncTick+0x20>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	461a      	mov	r2, r3
 80022aa:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <HAL_IncTick+0x24>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4413      	add	r3, r2
 80022b0:	4a04      	ldr	r2, [pc, #16]	; (80022c4 <HAL_IncTick+0x24>)
 80022b2:	6013      	str	r3, [r2, #0]
}
 80022b4:	bf00      	nop
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	20000070 	.word	0x20000070
 80022c4:	20000164 	.word	0x20000164

080022c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  return uwTick;
 80022cc:	4b03      	ldr	r3, [pc, #12]	; (80022dc <HAL_GetTick+0x14>)
 80022ce:	681b      	ldr	r3, [r3, #0]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	20000164 	.word	0x20000164

080022e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022e8:	f7ff ffee 	bl	80022c8 <HAL_GetTick>
 80022ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f8:	d005      	beq.n	8002306 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80022fa:	4b0a      	ldr	r3, [pc, #40]	; (8002324 <HAL_Delay+0x44>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	461a      	mov	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4413      	add	r3, r2
 8002304:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002306:	bf00      	nop
 8002308:	f7ff ffde 	bl	80022c8 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	429a      	cmp	r2, r3
 8002316:	d8f7      	bhi.n	8002308 <HAL_Delay+0x28>
  {
  }
}
 8002318:	bf00      	nop
 800231a:	bf00      	nop
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	20000070 	.word	0x20000070

08002328 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002338:	4b0c      	ldr	r3, [pc, #48]	; (800236c <__NVIC_SetPriorityGrouping+0x44>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800233e:	68ba      	ldr	r2, [r7, #8]
 8002340:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002344:	4013      	ands	r3, r2
 8002346:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002350:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002358:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800235a:	4a04      	ldr	r2, [pc, #16]	; (800236c <__NVIC_SetPriorityGrouping+0x44>)
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	60d3      	str	r3, [r2, #12]
}
 8002360:	bf00      	nop
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	e000ed00 	.word	0xe000ed00

08002370 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002374:	4b04      	ldr	r3, [pc, #16]	; (8002388 <__NVIC_GetPriorityGrouping+0x18>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	0a1b      	lsrs	r3, r3, #8
 800237a:	f003 0307 	and.w	r3, r3, #7
}
 800237e:	4618      	mov	r0, r3
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	e000ed00 	.word	0xe000ed00

0800238c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239a:	2b00      	cmp	r3, #0
 800239c:	db0b      	blt.n	80023b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800239e:	79fb      	ldrb	r3, [r7, #7]
 80023a0:	f003 021f 	and.w	r2, r3, #31
 80023a4:	4907      	ldr	r1, [pc, #28]	; (80023c4 <__NVIC_EnableIRQ+0x38>)
 80023a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023aa:	095b      	lsrs	r3, r3, #5
 80023ac:	2001      	movs	r0, #1
 80023ae:	fa00 f202 	lsl.w	r2, r0, r2
 80023b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023b6:	bf00      	nop
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	e000e100 	.word	0xe000e100

080023c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	6039      	str	r1, [r7, #0]
 80023d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	db0a      	blt.n	80023f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	490c      	ldr	r1, [pc, #48]	; (8002414 <__NVIC_SetPriority+0x4c>)
 80023e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e6:	0112      	lsls	r2, r2, #4
 80023e8:	b2d2      	uxtb	r2, r2
 80023ea:	440b      	add	r3, r1
 80023ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023f0:	e00a      	b.n	8002408 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	b2da      	uxtb	r2, r3
 80023f6:	4908      	ldr	r1, [pc, #32]	; (8002418 <__NVIC_SetPriority+0x50>)
 80023f8:	79fb      	ldrb	r3, [r7, #7]
 80023fa:	f003 030f 	and.w	r3, r3, #15
 80023fe:	3b04      	subs	r3, #4
 8002400:	0112      	lsls	r2, r2, #4
 8002402:	b2d2      	uxtb	r2, r2
 8002404:	440b      	add	r3, r1
 8002406:	761a      	strb	r2, [r3, #24]
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	e000e100 	.word	0xe000e100
 8002418:	e000ed00 	.word	0xe000ed00

0800241c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800241c:	b480      	push	{r7}
 800241e:	b089      	sub	sp, #36	; 0x24
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	f1c3 0307 	rsb	r3, r3, #7
 8002436:	2b04      	cmp	r3, #4
 8002438:	bf28      	it	cs
 800243a:	2304      	movcs	r3, #4
 800243c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	3304      	adds	r3, #4
 8002442:	2b06      	cmp	r3, #6
 8002444:	d902      	bls.n	800244c <NVIC_EncodePriority+0x30>
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	3b03      	subs	r3, #3
 800244a:	e000      	b.n	800244e <NVIC_EncodePriority+0x32>
 800244c:	2300      	movs	r3, #0
 800244e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002450:	f04f 32ff 	mov.w	r2, #4294967295
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	43da      	mvns	r2, r3
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	401a      	ands	r2, r3
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002464:	f04f 31ff 	mov.w	r1, #4294967295
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	fa01 f303 	lsl.w	r3, r1, r3
 800246e:	43d9      	mvns	r1, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002474:	4313      	orrs	r3, r2
         );
}
 8002476:	4618      	mov	r0, r3
 8002478:	3724      	adds	r7, #36	; 0x24
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7ff ff4c 	bl	8002328 <__NVIC_SetPriorityGrouping>
}
 8002490:	bf00      	nop
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	4603      	mov	r3, r0
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
 80024a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024a6:	2300      	movs	r3, #0
 80024a8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024aa:	f7ff ff61 	bl	8002370 <__NVIC_GetPriorityGrouping>
 80024ae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	68b9      	ldr	r1, [r7, #8]
 80024b4:	6978      	ldr	r0, [r7, #20]
 80024b6:	f7ff ffb1 	bl	800241c <NVIC_EncodePriority>
 80024ba:	4602      	mov	r2, r0
 80024bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024c0:	4611      	mov	r1, r2
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff ff80 	bl	80023c8 <__NVIC_SetPriority>
}
 80024c8:	bf00      	nop
 80024ca:	3718      	adds	r7, #24
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff ff54 	bl	800238c <__NVIC_EnableIRQ>
}
 80024e4:	bf00      	nop
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b087      	sub	sp, #28
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024f6:	2300      	movs	r3, #0
 80024f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024fa:	e166      	b.n	80027ca <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	2101      	movs	r1, #1
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	fa01 f303 	lsl.w	r3, r1, r3
 8002508:	4013      	ands	r3, r2
 800250a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 8158 	beq.w	80027c4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f003 0303 	and.w	r3, r3, #3
 800251c:	2b01      	cmp	r3, #1
 800251e:	d005      	beq.n	800252c <HAL_GPIO_Init+0x40>
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f003 0303 	and.w	r3, r3, #3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d130      	bne.n	800258e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	2203      	movs	r2, #3
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	43db      	mvns	r3, r3
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	4013      	ands	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	68da      	ldr	r2, [r3, #12]
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	4313      	orrs	r3, r2
 8002554:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002562:	2201      	movs	r2, #1
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43db      	mvns	r3, r3
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	4013      	ands	r3, r2
 8002570:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	091b      	lsrs	r3, r3, #4
 8002578:	f003 0201 	and.w	r2, r3, #1
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	4313      	orrs	r3, r2
 8002586:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	2b03      	cmp	r3, #3
 8002598:	d017      	beq.n	80025ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	2203      	movs	r2, #3
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	43db      	mvns	r3, r3
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	4013      	ands	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	689a      	ldr	r2, [r3, #8]
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d123      	bne.n	800261e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	08da      	lsrs	r2, r3, #3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	3208      	adds	r2, #8
 80025de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	220f      	movs	r2, #15
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	43db      	mvns	r3, r3
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	4013      	ands	r3, r2
 80025f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	691a      	ldr	r2, [r3, #16]
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	f003 0307 	and.w	r3, r3, #7
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	4313      	orrs	r3, r2
 800260e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	08da      	lsrs	r2, r3, #3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3208      	adds	r2, #8
 8002618:	6939      	ldr	r1, [r7, #16]
 800261a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	2203      	movs	r2, #3
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	43db      	mvns	r3, r3
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	4013      	ands	r3, r2
 8002634:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f003 0203 	and.w	r2, r3, #3
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	4313      	orrs	r3, r2
 800264a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 80b2 	beq.w	80027c4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002660:	4b61      	ldr	r3, [pc, #388]	; (80027e8 <HAL_GPIO_Init+0x2fc>)
 8002662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002664:	4a60      	ldr	r2, [pc, #384]	; (80027e8 <HAL_GPIO_Init+0x2fc>)
 8002666:	f043 0301 	orr.w	r3, r3, #1
 800266a:	6613      	str	r3, [r2, #96]	; 0x60
 800266c:	4b5e      	ldr	r3, [pc, #376]	; (80027e8 <HAL_GPIO_Init+0x2fc>)
 800266e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002670:	f003 0301 	and.w	r3, r3, #1
 8002674:	60bb      	str	r3, [r7, #8]
 8002676:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002678:	4a5c      	ldr	r2, [pc, #368]	; (80027ec <HAL_GPIO_Init+0x300>)
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	089b      	lsrs	r3, r3, #2
 800267e:	3302      	adds	r3, #2
 8002680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002684:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	f003 0303 	and.w	r3, r3, #3
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	220f      	movs	r2, #15
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	43db      	mvns	r3, r3
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	4013      	ands	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80026a2:	d02b      	beq.n	80026fc <HAL_GPIO_Init+0x210>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a52      	ldr	r2, [pc, #328]	; (80027f0 <HAL_GPIO_Init+0x304>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d025      	beq.n	80026f8 <HAL_GPIO_Init+0x20c>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a51      	ldr	r2, [pc, #324]	; (80027f4 <HAL_GPIO_Init+0x308>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d01f      	beq.n	80026f4 <HAL_GPIO_Init+0x208>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a50      	ldr	r2, [pc, #320]	; (80027f8 <HAL_GPIO_Init+0x30c>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d019      	beq.n	80026f0 <HAL_GPIO_Init+0x204>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a4f      	ldr	r2, [pc, #316]	; (80027fc <HAL_GPIO_Init+0x310>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d013      	beq.n	80026ec <HAL_GPIO_Init+0x200>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a4e      	ldr	r2, [pc, #312]	; (8002800 <HAL_GPIO_Init+0x314>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d00d      	beq.n	80026e8 <HAL_GPIO_Init+0x1fc>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a4d      	ldr	r2, [pc, #308]	; (8002804 <HAL_GPIO_Init+0x318>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d007      	beq.n	80026e4 <HAL_GPIO_Init+0x1f8>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4a4c      	ldr	r2, [pc, #304]	; (8002808 <HAL_GPIO_Init+0x31c>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d101      	bne.n	80026e0 <HAL_GPIO_Init+0x1f4>
 80026dc:	2307      	movs	r3, #7
 80026de:	e00e      	b.n	80026fe <HAL_GPIO_Init+0x212>
 80026e0:	2308      	movs	r3, #8
 80026e2:	e00c      	b.n	80026fe <HAL_GPIO_Init+0x212>
 80026e4:	2306      	movs	r3, #6
 80026e6:	e00a      	b.n	80026fe <HAL_GPIO_Init+0x212>
 80026e8:	2305      	movs	r3, #5
 80026ea:	e008      	b.n	80026fe <HAL_GPIO_Init+0x212>
 80026ec:	2304      	movs	r3, #4
 80026ee:	e006      	b.n	80026fe <HAL_GPIO_Init+0x212>
 80026f0:	2303      	movs	r3, #3
 80026f2:	e004      	b.n	80026fe <HAL_GPIO_Init+0x212>
 80026f4:	2302      	movs	r3, #2
 80026f6:	e002      	b.n	80026fe <HAL_GPIO_Init+0x212>
 80026f8:	2301      	movs	r3, #1
 80026fa:	e000      	b.n	80026fe <HAL_GPIO_Init+0x212>
 80026fc:	2300      	movs	r3, #0
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	f002 0203 	and.w	r2, r2, #3
 8002704:	0092      	lsls	r2, r2, #2
 8002706:	4093      	lsls	r3, r2
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	4313      	orrs	r3, r2
 800270c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800270e:	4937      	ldr	r1, [pc, #220]	; (80027ec <HAL_GPIO_Init+0x300>)
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	089b      	lsrs	r3, r3, #2
 8002714:	3302      	adds	r3, #2
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800271c:	4b3b      	ldr	r3, [pc, #236]	; (800280c <HAL_GPIO_Init+0x320>)
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	43db      	mvns	r3, r3
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	4013      	ands	r3, r2
 800272a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d003      	beq.n	8002740 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	4313      	orrs	r3, r2
 800273e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002740:	4a32      	ldr	r2, [pc, #200]	; (800280c <HAL_GPIO_Init+0x320>)
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002746:	4b31      	ldr	r3, [pc, #196]	; (800280c <HAL_GPIO_Init+0x320>)
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	43db      	mvns	r3, r3
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	4013      	ands	r3, r2
 8002754:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	4313      	orrs	r3, r2
 8002768:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800276a:	4a28      	ldr	r2, [pc, #160]	; (800280c <HAL_GPIO_Init+0x320>)
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002770:	4b26      	ldr	r3, [pc, #152]	; (800280c <HAL_GPIO_Init+0x320>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	43db      	mvns	r3, r3
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	4013      	ands	r3, r2
 800277e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d003      	beq.n	8002794 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	4313      	orrs	r3, r2
 8002792:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002794:	4a1d      	ldr	r2, [pc, #116]	; (800280c <HAL_GPIO_Init+0x320>)
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800279a:	4b1c      	ldr	r3, [pc, #112]	; (800280c <HAL_GPIO_Init+0x320>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	43db      	mvns	r3, r3
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	4013      	ands	r3, r2
 80027a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80027be:	4a13      	ldr	r2, [pc, #76]	; (800280c <HAL_GPIO_Init+0x320>)
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	3301      	adds	r3, #1
 80027c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	fa22 f303 	lsr.w	r3, r2, r3
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f47f ae91 	bne.w	80024fc <HAL_GPIO_Init+0x10>
  }
}
 80027da:	bf00      	nop
 80027dc:	bf00      	nop
 80027de:	371c      	adds	r7, #28
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	40021000 	.word	0x40021000
 80027ec:	40010000 	.word	0x40010000
 80027f0:	48000400 	.word	0x48000400
 80027f4:	48000800 	.word	0x48000800
 80027f8:	48000c00 	.word	0x48000c00
 80027fc:	48001000 	.word	0x48001000
 8002800:	48001400 	.word	0x48001400
 8002804:	48001800 	.word	0x48001800
 8002808:	48001c00 	.word	0x48001c00
 800280c:	40010400 	.word	0x40010400

08002810 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	460b      	mov	r3, r1
 800281a:	807b      	strh	r3, [r7, #2]
 800281c:	4613      	mov	r3, r2
 800281e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002820:	787b      	ldrb	r3, [r7, #1]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d003      	beq.n	800282e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002826:	887a      	ldrh	r2, [r7, #2]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800282c:	e002      	b.n	8002834 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800282e:	887a      	ldrh	r2, [r7, #2]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002844:	4b05      	ldr	r3, [pc, #20]	; (800285c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a04      	ldr	r2, [pc, #16]	; (800285c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800284a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800284e:	6013      	str	r3, [r2, #0]
}
 8002850:	bf00      	nop
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	40007000 	.word	0x40007000

08002860 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002864:	4b0d      	ldr	r3, [pc, #52]	; (800289c <HAL_PWREx_GetVoltageRange+0x3c>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800286c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002870:	d102      	bne.n	8002878 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002872:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002876:	e00b      	b.n	8002890 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002878:	4b08      	ldr	r3, [pc, #32]	; (800289c <HAL_PWREx_GetVoltageRange+0x3c>)
 800287a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800287e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002886:	d102      	bne.n	800288e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002888:	f44f 7300 	mov.w	r3, #512	; 0x200
 800288c:	e000      	b.n	8002890 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800288e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002890:	4618      	mov	r0, r3
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	40007000 	.word	0x40007000

080028a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d141      	bne.n	8002932 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80028ae:	4b4b      	ldr	r3, [pc, #300]	; (80029dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80028b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028ba:	d131      	bne.n	8002920 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80028bc:	4b47      	ldr	r3, [pc, #284]	; (80029dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028c2:	4a46      	ldr	r2, [pc, #280]	; (80029dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80028cc:	4b43      	ldr	r3, [pc, #268]	; (80029dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028d4:	4a41      	ldr	r2, [pc, #260]	; (80029dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80028dc:	4b40      	ldr	r3, [pc, #256]	; (80029e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2232      	movs	r2, #50	; 0x32
 80028e2:	fb02 f303 	mul.w	r3, r2, r3
 80028e6:	4a3f      	ldr	r2, [pc, #252]	; (80029e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80028e8:	fba2 2303 	umull	r2, r3, r2, r3
 80028ec:	0c9b      	lsrs	r3, r3, #18
 80028ee:	3301      	adds	r3, #1
 80028f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028f2:	e002      	b.n	80028fa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	3b01      	subs	r3, #1
 80028f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028fa:	4b38      	ldr	r3, [pc, #224]	; (80029dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002902:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002906:	d102      	bne.n	800290e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1f2      	bne.n	80028f4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800290e:	4b33      	ldr	r3, [pc, #204]	; (80029dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002916:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800291a:	d158      	bne.n	80029ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e057      	b.n	80029d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002920:	4b2e      	ldr	r3, [pc, #184]	; (80029dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002922:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002926:	4a2d      	ldr	r2, [pc, #180]	; (80029dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002928:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800292c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002930:	e04d      	b.n	80029ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002938:	d141      	bne.n	80029be <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800293a:	4b28      	ldr	r3, [pc, #160]	; (80029dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002942:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002946:	d131      	bne.n	80029ac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002948:	4b24      	ldr	r3, [pc, #144]	; (80029dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800294a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800294e:	4a23      	ldr	r2, [pc, #140]	; (80029dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002954:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002958:	4b20      	ldr	r3, [pc, #128]	; (80029dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002960:	4a1e      	ldr	r2, [pc, #120]	; (80029dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002962:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002966:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002968:	4b1d      	ldr	r3, [pc, #116]	; (80029e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2232      	movs	r2, #50	; 0x32
 800296e:	fb02 f303 	mul.w	r3, r2, r3
 8002972:	4a1c      	ldr	r2, [pc, #112]	; (80029e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002974:	fba2 2303 	umull	r2, r3, r2, r3
 8002978:	0c9b      	lsrs	r3, r3, #18
 800297a:	3301      	adds	r3, #1
 800297c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800297e:	e002      	b.n	8002986 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	3b01      	subs	r3, #1
 8002984:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002986:	4b15      	ldr	r3, [pc, #84]	; (80029dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800298e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002992:	d102      	bne.n	800299a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1f2      	bne.n	8002980 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800299a:	4b10      	ldr	r3, [pc, #64]	; (80029dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029a6:	d112      	bne.n	80029ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e011      	b.n	80029d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80029ac:	4b0b      	ldr	r3, [pc, #44]	; (80029dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029b2:	4a0a      	ldr	r2, [pc, #40]	; (80029dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80029bc:	e007      	b.n	80029ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80029be:	4b07      	ldr	r3, [pc, #28]	; (80029dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029c6:	4a05      	ldr	r2, [pc, #20]	; (80029dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029cc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3714      	adds	r7, #20
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr
 80029dc:	40007000 	.word	0x40007000
 80029e0:	20000068 	.word	0x20000068
 80029e4:	431bde83 	.word	0x431bde83

080029e8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80029ec:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <HAL_PWREx_EnableVddIO2+0x1c>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	4a04      	ldr	r2, [pc, #16]	; (8002a04 <HAL_PWREx_EnableVddIO2+0x1c>)
 80029f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029f6:	6053      	str	r3, [r2, #4]
}
 80029f8:	bf00      	nop
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	40007000 	.word	0x40007000

08002a08 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b088      	sub	sp, #32
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d102      	bne.n	8002a1c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	f000 bc08 	b.w	800322c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a1c:	4b96      	ldr	r3, [pc, #600]	; (8002c78 <HAL_RCC_OscConfig+0x270>)
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f003 030c 	and.w	r3, r3, #12
 8002a24:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a26:	4b94      	ldr	r3, [pc, #592]	; (8002c78 <HAL_RCC_OscConfig+0x270>)
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	f003 0303 	and.w	r3, r3, #3
 8002a2e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0310 	and.w	r3, r3, #16
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f000 80e4 	beq.w	8002c06 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d007      	beq.n	8002a54 <HAL_RCC_OscConfig+0x4c>
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	2b0c      	cmp	r3, #12
 8002a48:	f040 808b 	bne.w	8002b62 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	f040 8087 	bne.w	8002b62 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a54:	4b88      	ldr	r3, [pc, #544]	; (8002c78 <HAL_RCC_OscConfig+0x270>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d005      	beq.n	8002a6c <HAL_RCC_OscConfig+0x64>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e3df      	b.n	800322c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a1a      	ldr	r2, [r3, #32]
 8002a70:	4b81      	ldr	r3, [pc, #516]	; (8002c78 <HAL_RCC_OscConfig+0x270>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0308 	and.w	r3, r3, #8
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d004      	beq.n	8002a86 <HAL_RCC_OscConfig+0x7e>
 8002a7c:	4b7e      	ldr	r3, [pc, #504]	; (8002c78 <HAL_RCC_OscConfig+0x270>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a84:	e005      	b.n	8002a92 <HAL_RCC_OscConfig+0x8a>
 8002a86:	4b7c      	ldr	r3, [pc, #496]	; (8002c78 <HAL_RCC_OscConfig+0x270>)
 8002a88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a8c:	091b      	lsrs	r3, r3, #4
 8002a8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d223      	bcs.n	8002ade <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f000 fde8 	bl	8003670 <RCC_SetFlashLatencyFromMSIRange>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e3c0      	b.n	800322c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002aaa:	4b73      	ldr	r3, [pc, #460]	; (8002c78 <HAL_RCC_OscConfig+0x270>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a72      	ldr	r2, [pc, #456]	; (8002c78 <HAL_RCC_OscConfig+0x270>)
 8002ab0:	f043 0308 	orr.w	r3, r3, #8
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	4b70      	ldr	r3, [pc, #448]	; (8002c78 <HAL_RCC_OscConfig+0x270>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	496d      	ldr	r1, [pc, #436]	; (8002c78 <HAL_RCC_OscConfig+0x270>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ac8:	4b6b      	ldr	r3, [pc, #428]	; (8002c78 <HAL_RCC_OscConfig+0x270>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	69db      	ldr	r3, [r3, #28]
 8002ad4:	021b      	lsls	r3, r3, #8
 8002ad6:	4968      	ldr	r1, [pc, #416]	; (8002c78 <HAL_RCC_OscConfig+0x270>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	604b      	str	r3, [r1, #4]
 8002adc:	e025      	b.n	8002b2a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ade:	4b66      	ldr	r3, [pc, #408]	; (8002c78 <HAL_RCC_OscConfig+0x270>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a65      	ldr	r2, [pc, #404]	; (8002c78 <HAL_RCC_OscConfig+0x270>)
 8002ae4:	f043 0308 	orr.w	r3, r3, #8
 8002ae8:	6013      	str	r3, [r2, #0]
 8002aea:	4b63      	ldr	r3, [pc, #396]	; (8002c78 <HAL_RCC_OscConfig+0x270>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	4960      	ldr	r1, [pc, #384]	; (8002c78 <HAL_RCC_OscConfig+0x270>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002afc:	4b5e      	ldr	r3, [pc, #376]	; (8002c78 <HAL_RCC_OscConfig+0x270>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	69db      	ldr	r3, [r3, #28]
 8002b08:	021b      	lsls	r3, r3, #8
 8002b0a:	495b      	ldr	r1, [pc, #364]	; (8002c78 <HAL_RCC_OscConfig+0x270>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d109      	bne.n	8002b2a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f000 fda8 	bl	8003670 <RCC_SetFlashLatencyFromMSIRange>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e380      	b.n	800322c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b2a:	f000 fcc1 	bl	80034b0 <HAL_RCC_GetSysClockFreq>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	4b51      	ldr	r3, [pc, #324]	; (8002c78 <HAL_RCC_OscConfig+0x270>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	091b      	lsrs	r3, r3, #4
 8002b36:	f003 030f 	and.w	r3, r3, #15
 8002b3a:	4950      	ldr	r1, [pc, #320]	; (8002c7c <HAL_RCC_OscConfig+0x274>)
 8002b3c:	5ccb      	ldrb	r3, [r1, r3]
 8002b3e:	f003 031f 	and.w	r3, r3, #31
 8002b42:	fa22 f303 	lsr.w	r3, r2, r3
 8002b46:	4a4e      	ldr	r2, [pc, #312]	; (8002c80 <HAL_RCC_OscConfig+0x278>)
 8002b48:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b4a:	4b4e      	ldr	r3, [pc, #312]	; (8002c84 <HAL_RCC_OscConfig+0x27c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff faa2 	bl	8002098 <HAL_InitTick>
 8002b54:	4603      	mov	r3, r0
 8002b56:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b58:	7bfb      	ldrb	r3, [r7, #15]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d052      	beq.n	8002c04 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002b5e:	7bfb      	ldrb	r3, [r7, #15]
 8002b60:	e364      	b.n	800322c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d032      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b6a:	4b43      	ldr	r3, [pc, #268]	; (8002c78 <HAL_RCC_OscConfig+0x270>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a42      	ldr	r2, [pc, #264]	; (8002c78 <HAL_RCC_OscConfig+0x270>)
 8002b70:	f043 0301 	orr.w	r3, r3, #1
 8002b74:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b76:	f7ff fba7 	bl	80022c8 <HAL_GetTick>
 8002b7a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b7c:	e008      	b.n	8002b90 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b7e:	f7ff fba3 	bl	80022c8 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e34d      	b.n	800322c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b90:	4b39      	ldr	r3, [pc, #228]	; (8002c78 <HAL_RCC_OscConfig+0x270>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d0f0      	beq.n	8002b7e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b9c:	4b36      	ldr	r3, [pc, #216]	; (8002c78 <HAL_RCC_OscConfig+0x270>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a35      	ldr	r2, [pc, #212]	; (8002c78 <HAL_RCC_OscConfig+0x270>)
 8002ba2:	f043 0308 	orr.w	r3, r3, #8
 8002ba6:	6013      	str	r3, [r2, #0]
 8002ba8:	4b33      	ldr	r3, [pc, #204]	; (8002c78 <HAL_RCC_OscConfig+0x270>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	4930      	ldr	r1, [pc, #192]	; (8002c78 <HAL_RCC_OscConfig+0x270>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bba:	4b2f      	ldr	r3, [pc, #188]	; (8002c78 <HAL_RCC_OscConfig+0x270>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	021b      	lsls	r3, r3, #8
 8002bc8:	492b      	ldr	r1, [pc, #172]	; (8002c78 <HAL_RCC_OscConfig+0x270>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	604b      	str	r3, [r1, #4]
 8002bce:	e01a      	b.n	8002c06 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002bd0:	4b29      	ldr	r3, [pc, #164]	; (8002c78 <HAL_RCC_OscConfig+0x270>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a28      	ldr	r2, [pc, #160]	; (8002c78 <HAL_RCC_OscConfig+0x270>)
 8002bd6:	f023 0301 	bic.w	r3, r3, #1
 8002bda:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bdc:	f7ff fb74 	bl	80022c8 <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002be4:	f7ff fb70 	bl	80022c8 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e31a      	b.n	800322c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bf6:	4b20      	ldr	r3, [pc, #128]	; (8002c78 <HAL_RCC_OscConfig+0x270>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1f0      	bne.n	8002be4 <HAL_RCC_OscConfig+0x1dc>
 8002c02:	e000      	b.n	8002c06 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c04:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d073      	beq.n	8002cfa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	2b08      	cmp	r3, #8
 8002c16:	d005      	beq.n	8002c24 <HAL_RCC_OscConfig+0x21c>
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	2b0c      	cmp	r3, #12
 8002c1c:	d10e      	bne.n	8002c3c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	2b03      	cmp	r3, #3
 8002c22:	d10b      	bne.n	8002c3c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c24:	4b14      	ldr	r3, [pc, #80]	; (8002c78 <HAL_RCC_OscConfig+0x270>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d063      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x2f0>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d15f      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e2f7      	b.n	800322c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c44:	d106      	bne.n	8002c54 <HAL_RCC_OscConfig+0x24c>
 8002c46:	4b0c      	ldr	r3, [pc, #48]	; (8002c78 <HAL_RCC_OscConfig+0x270>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a0b      	ldr	r2, [pc, #44]	; (8002c78 <HAL_RCC_OscConfig+0x270>)
 8002c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	e025      	b.n	8002ca0 <HAL_RCC_OscConfig+0x298>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c5c:	d114      	bne.n	8002c88 <HAL_RCC_OscConfig+0x280>
 8002c5e:	4b06      	ldr	r3, [pc, #24]	; (8002c78 <HAL_RCC_OscConfig+0x270>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a05      	ldr	r2, [pc, #20]	; (8002c78 <HAL_RCC_OscConfig+0x270>)
 8002c64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c68:	6013      	str	r3, [r2, #0]
 8002c6a:	4b03      	ldr	r3, [pc, #12]	; (8002c78 <HAL_RCC_OscConfig+0x270>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a02      	ldr	r2, [pc, #8]	; (8002c78 <HAL_RCC_OscConfig+0x270>)
 8002c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c74:	6013      	str	r3, [r2, #0]
 8002c76:	e013      	b.n	8002ca0 <HAL_RCC_OscConfig+0x298>
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	08005b64 	.word	0x08005b64
 8002c80:	20000068 	.word	0x20000068
 8002c84:	2000006c 	.word	0x2000006c
 8002c88:	4ba0      	ldr	r3, [pc, #640]	; (8002f0c <HAL_RCC_OscConfig+0x504>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a9f      	ldr	r2, [pc, #636]	; (8002f0c <HAL_RCC_OscConfig+0x504>)
 8002c8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c92:	6013      	str	r3, [r2, #0]
 8002c94:	4b9d      	ldr	r3, [pc, #628]	; (8002f0c <HAL_RCC_OscConfig+0x504>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a9c      	ldr	r2, [pc, #624]	; (8002f0c <HAL_RCC_OscConfig+0x504>)
 8002c9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d013      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca8:	f7ff fb0e 	bl	80022c8 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cb0:	f7ff fb0a 	bl	80022c8 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b64      	cmp	r3, #100	; 0x64
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e2b4      	b.n	800322c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cc2:	4b92      	ldr	r3, [pc, #584]	; (8002f0c <HAL_RCC_OscConfig+0x504>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d0f0      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x2a8>
 8002cce:	e014      	b.n	8002cfa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd0:	f7ff fafa 	bl	80022c8 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cd8:	f7ff faf6 	bl	80022c8 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b64      	cmp	r3, #100	; 0x64
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e2a0      	b.n	800322c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cea:	4b88      	ldr	r3, [pc, #544]	; (8002f0c <HAL_RCC_OscConfig+0x504>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1f0      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x2d0>
 8002cf6:	e000      	b.n	8002cfa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d060      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	2b04      	cmp	r3, #4
 8002d0a:	d005      	beq.n	8002d18 <HAL_RCC_OscConfig+0x310>
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	2b0c      	cmp	r3, #12
 8002d10:	d119      	bne.n	8002d46 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d116      	bne.n	8002d46 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d18:	4b7c      	ldr	r3, [pc, #496]	; (8002f0c <HAL_RCC_OscConfig+0x504>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d005      	beq.n	8002d30 <HAL_RCC_OscConfig+0x328>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e27d      	b.n	800322c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d30:	4b76      	ldr	r3, [pc, #472]	; (8002f0c <HAL_RCC_OscConfig+0x504>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	061b      	lsls	r3, r3, #24
 8002d3e:	4973      	ldr	r1, [pc, #460]	; (8002f0c <HAL_RCC_OscConfig+0x504>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d44:	e040      	b.n	8002dc8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d023      	beq.n	8002d96 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d4e:	4b6f      	ldr	r3, [pc, #444]	; (8002f0c <HAL_RCC_OscConfig+0x504>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a6e      	ldr	r2, [pc, #440]	; (8002f0c <HAL_RCC_OscConfig+0x504>)
 8002d54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5a:	f7ff fab5 	bl	80022c8 <HAL_GetTick>
 8002d5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d60:	e008      	b.n	8002d74 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d62:	f7ff fab1 	bl	80022c8 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e25b      	b.n	800322c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d74:	4b65      	ldr	r3, [pc, #404]	; (8002f0c <HAL_RCC_OscConfig+0x504>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d0f0      	beq.n	8002d62 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d80:	4b62      	ldr	r3, [pc, #392]	; (8002f0c <HAL_RCC_OscConfig+0x504>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	061b      	lsls	r3, r3, #24
 8002d8e:	495f      	ldr	r1, [pc, #380]	; (8002f0c <HAL_RCC_OscConfig+0x504>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	604b      	str	r3, [r1, #4]
 8002d94:	e018      	b.n	8002dc8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d96:	4b5d      	ldr	r3, [pc, #372]	; (8002f0c <HAL_RCC_OscConfig+0x504>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a5c      	ldr	r2, [pc, #368]	; (8002f0c <HAL_RCC_OscConfig+0x504>)
 8002d9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002da0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da2:	f7ff fa91 	bl	80022c8 <HAL_GetTick>
 8002da6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002da8:	e008      	b.n	8002dbc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002daa:	f7ff fa8d 	bl	80022c8 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d901      	bls.n	8002dbc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e237      	b.n	800322c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002dbc:	4b53      	ldr	r3, [pc, #332]	; (8002f0c <HAL_RCC_OscConfig+0x504>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d1f0      	bne.n	8002daa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0308 	and.w	r3, r3, #8
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d03c      	beq.n	8002e4e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	695b      	ldr	r3, [r3, #20]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d01c      	beq.n	8002e16 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ddc:	4b4b      	ldr	r3, [pc, #300]	; (8002f0c <HAL_RCC_OscConfig+0x504>)
 8002dde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002de2:	4a4a      	ldr	r2, [pc, #296]	; (8002f0c <HAL_RCC_OscConfig+0x504>)
 8002de4:	f043 0301 	orr.w	r3, r3, #1
 8002de8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dec:	f7ff fa6c 	bl	80022c8 <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002df4:	f7ff fa68 	bl	80022c8 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e212      	b.n	800322c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e06:	4b41      	ldr	r3, [pc, #260]	; (8002f0c <HAL_RCC_OscConfig+0x504>)
 8002e08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d0ef      	beq.n	8002df4 <HAL_RCC_OscConfig+0x3ec>
 8002e14:	e01b      	b.n	8002e4e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e16:	4b3d      	ldr	r3, [pc, #244]	; (8002f0c <HAL_RCC_OscConfig+0x504>)
 8002e18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e1c:	4a3b      	ldr	r2, [pc, #236]	; (8002f0c <HAL_RCC_OscConfig+0x504>)
 8002e1e:	f023 0301 	bic.w	r3, r3, #1
 8002e22:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e26:	f7ff fa4f 	bl	80022c8 <HAL_GetTick>
 8002e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e2c:	e008      	b.n	8002e40 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e2e:	f7ff fa4b 	bl	80022c8 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e1f5      	b.n	800322c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e40:	4b32      	ldr	r3, [pc, #200]	; (8002f0c <HAL_RCC_OscConfig+0x504>)
 8002e42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1ef      	bne.n	8002e2e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0304 	and.w	r3, r3, #4
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f000 80a6 	beq.w	8002fa8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e60:	4b2a      	ldr	r3, [pc, #168]	; (8002f0c <HAL_RCC_OscConfig+0x504>)
 8002e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d10d      	bne.n	8002e88 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e6c:	4b27      	ldr	r3, [pc, #156]	; (8002f0c <HAL_RCC_OscConfig+0x504>)
 8002e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e70:	4a26      	ldr	r2, [pc, #152]	; (8002f0c <HAL_RCC_OscConfig+0x504>)
 8002e72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e76:	6593      	str	r3, [r2, #88]	; 0x58
 8002e78:	4b24      	ldr	r3, [pc, #144]	; (8002f0c <HAL_RCC_OscConfig+0x504>)
 8002e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e80:	60bb      	str	r3, [r7, #8]
 8002e82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e84:	2301      	movs	r3, #1
 8002e86:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e88:	4b21      	ldr	r3, [pc, #132]	; (8002f10 <HAL_RCC_OscConfig+0x508>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d118      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e94:	4b1e      	ldr	r3, [pc, #120]	; (8002f10 <HAL_RCC_OscConfig+0x508>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a1d      	ldr	r2, [pc, #116]	; (8002f10 <HAL_RCC_OscConfig+0x508>)
 8002e9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e9e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ea0:	f7ff fa12 	bl	80022c8 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ea8:	f7ff fa0e 	bl	80022c8 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e1b8      	b.n	800322c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eba:	4b15      	ldr	r3, [pc, #84]	; (8002f10 <HAL_RCC_OscConfig+0x508>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0f0      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d108      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x4d8>
 8002ece:	4b0f      	ldr	r3, [pc, #60]	; (8002f0c <HAL_RCC_OscConfig+0x504>)
 8002ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed4:	4a0d      	ldr	r2, [pc, #52]	; (8002f0c <HAL_RCC_OscConfig+0x504>)
 8002ed6:	f043 0301 	orr.w	r3, r3, #1
 8002eda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ede:	e029      	b.n	8002f34 <HAL_RCC_OscConfig+0x52c>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	2b05      	cmp	r3, #5
 8002ee6:	d115      	bne.n	8002f14 <HAL_RCC_OscConfig+0x50c>
 8002ee8:	4b08      	ldr	r3, [pc, #32]	; (8002f0c <HAL_RCC_OscConfig+0x504>)
 8002eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eee:	4a07      	ldr	r2, [pc, #28]	; (8002f0c <HAL_RCC_OscConfig+0x504>)
 8002ef0:	f043 0304 	orr.w	r3, r3, #4
 8002ef4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ef8:	4b04      	ldr	r3, [pc, #16]	; (8002f0c <HAL_RCC_OscConfig+0x504>)
 8002efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002efe:	4a03      	ldr	r2, [pc, #12]	; (8002f0c <HAL_RCC_OscConfig+0x504>)
 8002f00:	f043 0301 	orr.w	r3, r3, #1
 8002f04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f08:	e014      	b.n	8002f34 <HAL_RCC_OscConfig+0x52c>
 8002f0a:	bf00      	nop
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	40007000 	.word	0x40007000
 8002f14:	4b9d      	ldr	r3, [pc, #628]	; (800318c <HAL_RCC_OscConfig+0x784>)
 8002f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f1a:	4a9c      	ldr	r2, [pc, #624]	; (800318c <HAL_RCC_OscConfig+0x784>)
 8002f1c:	f023 0301 	bic.w	r3, r3, #1
 8002f20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f24:	4b99      	ldr	r3, [pc, #612]	; (800318c <HAL_RCC_OscConfig+0x784>)
 8002f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f2a:	4a98      	ldr	r2, [pc, #608]	; (800318c <HAL_RCC_OscConfig+0x784>)
 8002f2c:	f023 0304 	bic.w	r3, r3, #4
 8002f30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d016      	beq.n	8002f6a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f3c:	f7ff f9c4 	bl	80022c8 <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f42:	e00a      	b.n	8002f5a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f44:	f7ff f9c0 	bl	80022c8 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e168      	b.n	800322c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f5a:	4b8c      	ldr	r3, [pc, #560]	; (800318c <HAL_RCC_OscConfig+0x784>)
 8002f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d0ed      	beq.n	8002f44 <HAL_RCC_OscConfig+0x53c>
 8002f68:	e015      	b.n	8002f96 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f6a:	f7ff f9ad 	bl	80022c8 <HAL_GetTick>
 8002f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f70:	e00a      	b.n	8002f88 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f72:	f7ff f9a9 	bl	80022c8 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e151      	b.n	800322c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f88:	4b80      	ldr	r3, [pc, #512]	; (800318c <HAL_RCC_OscConfig+0x784>)
 8002f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1ed      	bne.n	8002f72 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f96:	7ffb      	ldrb	r3, [r7, #31]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d105      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f9c:	4b7b      	ldr	r3, [pc, #492]	; (800318c <HAL_RCC_OscConfig+0x784>)
 8002f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa0:	4a7a      	ldr	r2, [pc, #488]	; (800318c <HAL_RCC_OscConfig+0x784>)
 8002fa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fa6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0320 	and.w	r3, r3, #32
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d03c      	beq.n	800302e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d01c      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002fbc:	4b73      	ldr	r3, [pc, #460]	; (800318c <HAL_RCC_OscConfig+0x784>)
 8002fbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fc2:	4a72      	ldr	r2, [pc, #456]	; (800318c <HAL_RCC_OscConfig+0x784>)
 8002fc4:	f043 0301 	orr.w	r3, r3, #1
 8002fc8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fcc:	f7ff f97c 	bl	80022c8 <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fd4:	f7ff f978 	bl	80022c8 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e122      	b.n	800322c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fe6:	4b69      	ldr	r3, [pc, #420]	; (800318c <HAL_RCC_OscConfig+0x784>)
 8002fe8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d0ef      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x5cc>
 8002ff4:	e01b      	b.n	800302e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ff6:	4b65      	ldr	r3, [pc, #404]	; (800318c <HAL_RCC_OscConfig+0x784>)
 8002ff8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ffc:	4a63      	ldr	r2, [pc, #396]	; (800318c <HAL_RCC_OscConfig+0x784>)
 8002ffe:	f023 0301 	bic.w	r3, r3, #1
 8003002:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003006:	f7ff f95f 	bl	80022c8 <HAL_GetTick>
 800300a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800300c:	e008      	b.n	8003020 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800300e:	f7ff f95b 	bl	80022c8 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d901      	bls.n	8003020 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e105      	b.n	800322c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003020:	4b5a      	ldr	r3, [pc, #360]	; (800318c <HAL_RCC_OscConfig+0x784>)
 8003022:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1ef      	bne.n	800300e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003032:	2b00      	cmp	r3, #0
 8003034:	f000 80f9 	beq.w	800322a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303c:	2b02      	cmp	r3, #2
 800303e:	f040 80cf 	bne.w	80031e0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003042:	4b52      	ldr	r3, [pc, #328]	; (800318c <HAL_RCC_OscConfig+0x784>)
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	f003 0203 	and.w	r2, r3, #3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003052:	429a      	cmp	r2, r3
 8003054:	d12c      	bne.n	80030b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003060:	3b01      	subs	r3, #1
 8003062:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003064:	429a      	cmp	r2, r3
 8003066:	d123      	bne.n	80030b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003072:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003074:	429a      	cmp	r2, r3
 8003076:	d11b      	bne.n	80030b0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003082:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003084:	429a      	cmp	r2, r3
 8003086:	d113      	bne.n	80030b0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003092:	085b      	lsrs	r3, r3, #1
 8003094:	3b01      	subs	r3, #1
 8003096:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003098:	429a      	cmp	r2, r3
 800309a:	d109      	bne.n	80030b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	085b      	lsrs	r3, r3, #1
 80030a8:	3b01      	subs	r3, #1
 80030aa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d071      	beq.n	8003194 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	2b0c      	cmp	r3, #12
 80030b4:	d068      	beq.n	8003188 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80030b6:	4b35      	ldr	r3, [pc, #212]	; (800318c <HAL_RCC_OscConfig+0x784>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d105      	bne.n	80030ce <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80030c2:	4b32      	ldr	r3, [pc, #200]	; (800318c <HAL_RCC_OscConfig+0x784>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e0ac      	b.n	800322c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80030d2:	4b2e      	ldr	r3, [pc, #184]	; (800318c <HAL_RCC_OscConfig+0x784>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a2d      	ldr	r2, [pc, #180]	; (800318c <HAL_RCC_OscConfig+0x784>)
 80030d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030dc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030de:	f7ff f8f3 	bl	80022c8 <HAL_GetTick>
 80030e2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030e4:	e008      	b.n	80030f8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030e6:	f7ff f8ef 	bl	80022c8 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e099      	b.n	800322c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030f8:	4b24      	ldr	r3, [pc, #144]	; (800318c <HAL_RCC_OscConfig+0x784>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1f0      	bne.n	80030e6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003104:	4b21      	ldr	r3, [pc, #132]	; (800318c <HAL_RCC_OscConfig+0x784>)
 8003106:	68da      	ldr	r2, [r3, #12]
 8003108:	4b21      	ldr	r3, [pc, #132]	; (8003190 <HAL_RCC_OscConfig+0x788>)
 800310a:	4013      	ands	r3, r2
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003114:	3a01      	subs	r2, #1
 8003116:	0112      	lsls	r2, r2, #4
 8003118:	4311      	orrs	r1, r2
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800311e:	0212      	lsls	r2, r2, #8
 8003120:	4311      	orrs	r1, r2
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003126:	0852      	lsrs	r2, r2, #1
 8003128:	3a01      	subs	r2, #1
 800312a:	0552      	lsls	r2, r2, #21
 800312c:	4311      	orrs	r1, r2
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003132:	0852      	lsrs	r2, r2, #1
 8003134:	3a01      	subs	r2, #1
 8003136:	0652      	lsls	r2, r2, #25
 8003138:	4311      	orrs	r1, r2
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800313e:	06d2      	lsls	r2, r2, #27
 8003140:	430a      	orrs	r2, r1
 8003142:	4912      	ldr	r1, [pc, #72]	; (800318c <HAL_RCC_OscConfig+0x784>)
 8003144:	4313      	orrs	r3, r2
 8003146:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003148:	4b10      	ldr	r3, [pc, #64]	; (800318c <HAL_RCC_OscConfig+0x784>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a0f      	ldr	r2, [pc, #60]	; (800318c <HAL_RCC_OscConfig+0x784>)
 800314e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003152:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003154:	4b0d      	ldr	r3, [pc, #52]	; (800318c <HAL_RCC_OscConfig+0x784>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	4a0c      	ldr	r2, [pc, #48]	; (800318c <HAL_RCC_OscConfig+0x784>)
 800315a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800315e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003160:	f7ff f8b2 	bl	80022c8 <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003168:	f7ff f8ae 	bl	80022c8 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e058      	b.n	800322c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800317a:	4b04      	ldr	r3, [pc, #16]	; (800318c <HAL_RCC_OscConfig+0x784>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d0f0      	beq.n	8003168 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003186:	e050      	b.n	800322a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e04f      	b.n	800322c <HAL_RCC_OscConfig+0x824>
 800318c:	40021000 	.word	0x40021000
 8003190:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003194:	4b27      	ldr	r3, [pc, #156]	; (8003234 <HAL_RCC_OscConfig+0x82c>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d144      	bne.n	800322a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80031a0:	4b24      	ldr	r3, [pc, #144]	; (8003234 <HAL_RCC_OscConfig+0x82c>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a23      	ldr	r2, [pc, #140]	; (8003234 <HAL_RCC_OscConfig+0x82c>)
 80031a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031ac:	4b21      	ldr	r3, [pc, #132]	; (8003234 <HAL_RCC_OscConfig+0x82c>)
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	4a20      	ldr	r2, [pc, #128]	; (8003234 <HAL_RCC_OscConfig+0x82c>)
 80031b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80031b8:	f7ff f886 	bl	80022c8 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031c0:	f7ff f882 	bl	80022c8 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e02c      	b.n	800322c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031d2:	4b18      	ldr	r3, [pc, #96]	; (8003234 <HAL_RCC_OscConfig+0x82c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0f0      	beq.n	80031c0 <HAL_RCC_OscConfig+0x7b8>
 80031de:	e024      	b.n	800322a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	2b0c      	cmp	r3, #12
 80031e4:	d01f      	beq.n	8003226 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031e6:	4b13      	ldr	r3, [pc, #76]	; (8003234 <HAL_RCC_OscConfig+0x82c>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a12      	ldr	r2, [pc, #72]	; (8003234 <HAL_RCC_OscConfig+0x82c>)
 80031ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f2:	f7ff f869 	bl	80022c8 <HAL_GetTick>
 80031f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031f8:	e008      	b.n	800320c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031fa:	f7ff f865 	bl	80022c8 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	2b02      	cmp	r3, #2
 8003206:	d901      	bls.n	800320c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e00f      	b.n	800322c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800320c:	4b09      	ldr	r3, [pc, #36]	; (8003234 <HAL_RCC_OscConfig+0x82c>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1f0      	bne.n	80031fa <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003218:	4b06      	ldr	r3, [pc, #24]	; (8003234 <HAL_RCC_OscConfig+0x82c>)
 800321a:	68da      	ldr	r2, [r3, #12]
 800321c:	4905      	ldr	r1, [pc, #20]	; (8003234 <HAL_RCC_OscConfig+0x82c>)
 800321e:	4b06      	ldr	r3, [pc, #24]	; (8003238 <HAL_RCC_OscConfig+0x830>)
 8003220:	4013      	ands	r3, r2
 8003222:	60cb      	str	r3, [r1, #12]
 8003224:	e001      	b.n	800322a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e000      	b.n	800322c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3720      	adds	r7, #32
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	40021000 	.word	0x40021000
 8003238:	feeefffc 	.word	0xfeeefffc

0800323c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003246:	2300      	movs	r3, #0
 8003248:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d101      	bne.n	8003254 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e11d      	b.n	8003490 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003254:	4b90      	ldr	r3, [pc, #576]	; (8003498 <HAL_RCC_ClockConfig+0x25c>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 030f 	and.w	r3, r3, #15
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	429a      	cmp	r2, r3
 8003260:	d910      	bls.n	8003284 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003262:	4b8d      	ldr	r3, [pc, #564]	; (8003498 <HAL_RCC_ClockConfig+0x25c>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f023 020f 	bic.w	r2, r3, #15
 800326a:	498b      	ldr	r1, [pc, #556]	; (8003498 <HAL_RCC_ClockConfig+0x25c>)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	4313      	orrs	r3, r2
 8003270:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003272:	4b89      	ldr	r3, [pc, #548]	; (8003498 <HAL_RCC_ClockConfig+0x25c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	683a      	ldr	r2, [r7, #0]
 800327c:	429a      	cmp	r2, r3
 800327e:	d001      	beq.n	8003284 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e105      	b.n	8003490 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d010      	beq.n	80032b2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689a      	ldr	r2, [r3, #8]
 8003294:	4b81      	ldr	r3, [pc, #516]	; (800349c <HAL_RCC_ClockConfig+0x260>)
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800329c:	429a      	cmp	r2, r3
 800329e:	d908      	bls.n	80032b2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032a0:	4b7e      	ldr	r3, [pc, #504]	; (800349c <HAL_RCC_ClockConfig+0x260>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	497b      	ldr	r1, [pc, #492]	; (800349c <HAL_RCC_ClockConfig+0x260>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d079      	beq.n	80033b2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	2b03      	cmp	r3, #3
 80032c4:	d11e      	bne.n	8003304 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032c6:	4b75      	ldr	r3, [pc, #468]	; (800349c <HAL_RCC_ClockConfig+0x260>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e0dc      	b.n	8003490 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80032d6:	f000 fa25 	bl	8003724 <RCC_GetSysClockFreqFromPLLSource>
 80032da:	4603      	mov	r3, r0
 80032dc:	4a70      	ldr	r2, [pc, #448]	; (80034a0 <HAL_RCC_ClockConfig+0x264>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d946      	bls.n	8003370 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80032e2:	4b6e      	ldr	r3, [pc, #440]	; (800349c <HAL_RCC_ClockConfig+0x260>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d140      	bne.n	8003370 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80032ee:	4b6b      	ldr	r3, [pc, #428]	; (800349c <HAL_RCC_ClockConfig+0x260>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032f6:	4a69      	ldr	r2, [pc, #420]	; (800349c <HAL_RCC_ClockConfig+0x260>)
 80032f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032fc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80032fe:	2380      	movs	r3, #128	; 0x80
 8003300:	617b      	str	r3, [r7, #20]
 8003302:	e035      	b.n	8003370 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	2b02      	cmp	r3, #2
 800330a:	d107      	bne.n	800331c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800330c:	4b63      	ldr	r3, [pc, #396]	; (800349c <HAL_RCC_ClockConfig+0x260>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d115      	bne.n	8003344 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e0b9      	b.n	8003490 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d107      	bne.n	8003334 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003324:	4b5d      	ldr	r3, [pc, #372]	; (800349c <HAL_RCC_ClockConfig+0x260>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d109      	bne.n	8003344 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e0ad      	b.n	8003490 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003334:	4b59      	ldr	r3, [pc, #356]	; (800349c <HAL_RCC_ClockConfig+0x260>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800333c:	2b00      	cmp	r3, #0
 800333e:	d101      	bne.n	8003344 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e0a5      	b.n	8003490 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003344:	f000 f8b4 	bl	80034b0 <HAL_RCC_GetSysClockFreq>
 8003348:	4603      	mov	r3, r0
 800334a:	4a55      	ldr	r2, [pc, #340]	; (80034a0 <HAL_RCC_ClockConfig+0x264>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d90f      	bls.n	8003370 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003350:	4b52      	ldr	r3, [pc, #328]	; (800349c <HAL_RCC_ClockConfig+0x260>)
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d109      	bne.n	8003370 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800335c:	4b4f      	ldr	r3, [pc, #316]	; (800349c <HAL_RCC_ClockConfig+0x260>)
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003364:	4a4d      	ldr	r2, [pc, #308]	; (800349c <HAL_RCC_ClockConfig+0x260>)
 8003366:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800336a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800336c:	2380      	movs	r3, #128	; 0x80
 800336e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003370:	4b4a      	ldr	r3, [pc, #296]	; (800349c <HAL_RCC_ClockConfig+0x260>)
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f023 0203 	bic.w	r2, r3, #3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	4947      	ldr	r1, [pc, #284]	; (800349c <HAL_RCC_ClockConfig+0x260>)
 800337e:	4313      	orrs	r3, r2
 8003380:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003382:	f7fe ffa1 	bl	80022c8 <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003388:	e00a      	b.n	80033a0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800338a:	f7fe ff9d 	bl	80022c8 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	f241 3288 	movw	r2, #5000	; 0x1388
 8003398:	4293      	cmp	r3, r2
 800339a:	d901      	bls.n	80033a0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e077      	b.n	8003490 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033a0:	4b3e      	ldr	r3, [pc, #248]	; (800349c <HAL_RCC_ClockConfig+0x260>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f003 020c 	and.w	r2, r3, #12
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d1eb      	bne.n	800338a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	2b80      	cmp	r3, #128	; 0x80
 80033b6:	d105      	bne.n	80033c4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80033b8:	4b38      	ldr	r3, [pc, #224]	; (800349c <HAL_RCC_ClockConfig+0x260>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	4a37      	ldr	r2, [pc, #220]	; (800349c <HAL_RCC_ClockConfig+0x260>)
 80033be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033c2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d010      	beq.n	80033f2 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	4b31      	ldr	r3, [pc, #196]	; (800349c <HAL_RCC_ClockConfig+0x260>)
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033dc:	429a      	cmp	r2, r3
 80033de:	d208      	bcs.n	80033f2 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033e0:	4b2e      	ldr	r3, [pc, #184]	; (800349c <HAL_RCC_ClockConfig+0x260>)
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	492b      	ldr	r1, [pc, #172]	; (800349c <HAL_RCC_ClockConfig+0x260>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033f2:	4b29      	ldr	r3, [pc, #164]	; (8003498 <HAL_RCC_ClockConfig+0x25c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 030f 	and.w	r3, r3, #15
 80033fa:	683a      	ldr	r2, [r7, #0]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d210      	bcs.n	8003422 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003400:	4b25      	ldr	r3, [pc, #148]	; (8003498 <HAL_RCC_ClockConfig+0x25c>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f023 020f 	bic.w	r2, r3, #15
 8003408:	4923      	ldr	r1, [pc, #140]	; (8003498 <HAL_RCC_ClockConfig+0x25c>)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	4313      	orrs	r3, r2
 800340e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003410:	4b21      	ldr	r3, [pc, #132]	; (8003498 <HAL_RCC_ClockConfig+0x25c>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 030f 	and.w	r3, r3, #15
 8003418:	683a      	ldr	r2, [r7, #0]
 800341a:	429a      	cmp	r2, r3
 800341c:	d001      	beq.n	8003422 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e036      	b.n	8003490 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0304 	and.w	r3, r3, #4
 800342a:	2b00      	cmp	r3, #0
 800342c:	d008      	beq.n	8003440 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800342e:	4b1b      	ldr	r3, [pc, #108]	; (800349c <HAL_RCC_ClockConfig+0x260>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	4918      	ldr	r1, [pc, #96]	; (800349c <HAL_RCC_ClockConfig+0x260>)
 800343c:	4313      	orrs	r3, r2
 800343e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0308 	and.w	r3, r3, #8
 8003448:	2b00      	cmp	r3, #0
 800344a:	d009      	beq.n	8003460 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800344c:	4b13      	ldr	r3, [pc, #76]	; (800349c <HAL_RCC_ClockConfig+0x260>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	00db      	lsls	r3, r3, #3
 800345a:	4910      	ldr	r1, [pc, #64]	; (800349c <HAL_RCC_ClockConfig+0x260>)
 800345c:	4313      	orrs	r3, r2
 800345e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003460:	f000 f826 	bl	80034b0 <HAL_RCC_GetSysClockFreq>
 8003464:	4602      	mov	r2, r0
 8003466:	4b0d      	ldr	r3, [pc, #52]	; (800349c <HAL_RCC_ClockConfig+0x260>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	091b      	lsrs	r3, r3, #4
 800346c:	f003 030f 	and.w	r3, r3, #15
 8003470:	490c      	ldr	r1, [pc, #48]	; (80034a4 <HAL_RCC_ClockConfig+0x268>)
 8003472:	5ccb      	ldrb	r3, [r1, r3]
 8003474:	f003 031f 	and.w	r3, r3, #31
 8003478:	fa22 f303 	lsr.w	r3, r2, r3
 800347c:	4a0a      	ldr	r2, [pc, #40]	; (80034a8 <HAL_RCC_ClockConfig+0x26c>)
 800347e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003480:	4b0a      	ldr	r3, [pc, #40]	; (80034ac <HAL_RCC_ClockConfig+0x270>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4618      	mov	r0, r3
 8003486:	f7fe fe07 	bl	8002098 <HAL_InitTick>
 800348a:	4603      	mov	r3, r0
 800348c:	73fb      	strb	r3, [r7, #15]

  return status;
 800348e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003490:	4618      	mov	r0, r3
 8003492:	3718      	adds	r7, #24
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	40022000 	.word	0x40022000
 800349c:	40021000 	.word	0x40021000
 80034a0:	04c4b400 	.word	0x04c4b400
 80034a4:	08005b64 	.word	0x08005b64
 80034a8:	20000068 	.word	0x20000068
 80034ac:	2000006c 	.word	0x2000006c

080034b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b089      	sub	sp, #36	; 0x24
 80034b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80034b6:	2300      	movs	r3, #0
 80034b8:	61fb      	str	r3, [r7, #28]
 80034ba:	2300      	movs	r3, #0
 80034bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034be:	4b3e      	ldr	r3, [pc, #248]	; (80035b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f003 030c 	and.w	r3, r3, #12
 80034c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034c8:	4b3b      	ldr	r3, [pc, #236]	; (80035b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	f003 0303 	and.w	r3, r3, #3
 80034d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d005      	beq.n	80034e4 <HAL_RCC_GetSysClockFreq+0x34>
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	2b0c      	cmp	r3, #12
 80034dc:	d121      	bne.n	8003522 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d11e      	bne.n	8003522 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80034e4:	4b34      	ldr	r3, [pc, #208]	; (80035b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0308 	and.w	r3, r3, #8
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d107      	bne.n	8003500 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80034f0:	4b31      	ldr	r3, [pc, #196]	; (80035b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80034f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034f6:	0a1b      	lsrs	r3, r3, #8
 80034f8:	f003 030f 	and.w	r3, r3, #15
 80034fc:	61fb      	str	r3, [r7, #28]
 80034fe:	e005      	b.n	800350c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003500:	4b2d      	ldr	r3, [pc, #180]	; (80035b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	091b      	lsrs	r3, r3, #4
 8003506:	f003 030f 	and.w	r3, r3, #15
 800350a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800350c:	4a2b      	ldr	r2, [pc, #172]	; (80035bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003514:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10d      	bne.n	8003538 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003520:	e00a      	b.n	8003538 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	2b04      	cmp	r3, #4
 8003526:	d102      	bne.n	800352e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003528:	4b25      	ldr	r3, [pc, #148]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800352a:	61bb      	str	r3, [r7, #24]
 800352c:	e004      	b.n	8003538 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	2b08      	cmp	r3, #8
 8003532:	d101      	bne.n	8003538 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003534:	4b23      	ldr	r3, [pc, #140]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003536:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	2b0c      	cmp	r3, #12
 800353c:	d134      	bne.n	80035a8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800353e:	4b1e      	ldr	r3, [pc, #120]	; (80035b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	f003 0303 	and.w	r3, r3, #3
 8003546:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	2b02      	cmp	r3, #2
 800354c:	d003      	beq.n	8003556 <HAL_RCC_GetSysClockFreq+0xa6>
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	2b03      	cmp	r3, #3
 8003552:	d003      	beq.n	800355c <HAL_RCC_GetSysClockFreq+0xac>
 8003554:	e005      	b.n	8003562 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003556:	4b1a      	ldr	r3, [pc, #104]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003558:	617b      	str	r3, [r7, #20]
      break;
 800355a:	e005      	b.n	8003568 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800355c:	4b19      	ldr	r3, [pc, #100]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x114>)
 800355e:	617b      	str	r3, [r7, #20]
      break;
 8003560:	e002      	b.n	8003568 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	617b      	str	r3, [r7, #20]
      break;
 8003566:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003568:	4b13      	ldr	r3, [pc, #76]	; (80035b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	091b      	lsrs	r3, r3, #4
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	3301      	adds	r3, #1
 8003574:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003576:	4b10      	ldr	r3, [pc, #64]	; (80035b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	0a1b      	lsrs	r3, r3, #8
 800357c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	fb03 f202 	mul.w	r2, r3, r2
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	fbb2 f3f3 	udiv	r3, r2, r3
 800358c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800358e:	4b0a      	ldr	r3, [pc, #40]	; (80035b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	0e5b      	lsrs	r3, r3, #25
 8003594:	f003 0303 	and.w	r3, r3, #3
 8003598:	3301      	adds	r3, #1
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80035a8:	69bb      	ldr	r3, [r7, #24]
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3724      	adds	r7, #36	; 0x24
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	40021000 	.word	0x40021000
 80035bc:	08005b7c 	.word	0x08005b7c
 80035c0:	00f42400 	.word	0x00f42400
 80035c4:	007a1200 	.word	0x007a1200

080035c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035c8:	b480      	push	{r7}
 80035ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035cc:	4b03      	ldr	r3, [pc, #12]	; (80035dc <HAL_RCC_GetHCLKFreq+0x14>)
 80035ce:	681b      	ldr	r3, [r3, #0]
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	20000068 	.word	0x20000068

080035e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80035e4:	f7ff fff0 	bl	80035c8 <HAL_RCC_GetHCLKFreq>
 80035e8:	4602      	mov	r2, r0
 80035ea:	4b06      	ldr	r3, [pc, #24]	; (8003604 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	0a1b      	lsrs	r3, r3, #8
 80035f0:	f003 0307 	and.w	r3, r3, #7
 80035f4:	4904      	ldr	r1, [pc, #16]	; (8003608 <HAL_RCC_GetPCLK1Freq+0x28>)
 80035f6:	5ccb      	ldrb	r3, [r1, r3]
 80035f8:	f003 031f 	and.w	r3, r3, #31
 80035fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003600:	4618      	mov	r0, r3
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40021000 	.word	0x40021000
 8003608:	08005b74 	.word	0x08005b74

0800360c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	220f      	movs	r2, #15
 800361a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800361c:	4b12      	ldr	r3, [pc, #72]	; (8003668 <HAL_RCC_GetClockConfig+0x5c>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f003 0203 	and.w	r2, r3, #3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003628:	4b0f      	ldr	r3, [pc, #60]	; (8003668 <HAL_RCC_GetClockConfig+0x5c>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003634:	4b0c      	ldr	r3, [pc, #48]	; (8003668 <HAL_RCC_GetClockConfig+0x5c>)
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003640:	4b09      	ldr	r3, [pc, #36]	; (8003668 <HAL_RCC_GetClockConfig+0x5c>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	08db      	lsrs	r3, r3, #3
 8003646:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800364e:	4b07      	ldr	r3, [pc, #28]	; (800366c <HAL_RCC_GetClockConfig+0x60>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 020f 	and.w	r2, r3, #15
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	601a      	str	r2, [r3, #0]
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	40021000 	.word	0x40021000
 800366c:	40022000 	.word	0x40022000

08003670 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003678:	2300      	movs	r3, #0
 800367a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800367c:	4b27      	ldr	r3, [pc, #156]	; (800371c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800367e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d003      	beq.n	8003690 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003688:	f7ff f8ea 	bl	8002860 <HAL_PWREx_GetVoltageRange>
 800368c:	6178      	str	r0, [r7, #20]
 800368e:	e014      	b.n	80036ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003690:	4b22      	ldr	r3, [pc, #136]	; (800371c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003694:	4a21      	ldr	r2, [pc, #132]	; (800371c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800369a:	6593      	str	r3, [r2, #88]	; 0x58
 800369c:	4b1f      	ldr	r3, [pc, #124]	; (800371c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800369e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a4:	60fb      	str	r3, [r7, #12]
 80036a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80036a8:	f7ff f8da 	bl	8002860 <HAL_PWREx_GetVoltageRange>
 80036ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80036ae:	4b1b      	ldr	r3, [pc, #108]	; (800371c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80036b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b2:	4a1a      	ldr	r2, [pc, #104]	; (800371c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80036b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036b8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036c0:	d10b      	bne.n	80036da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2b80      	cmp	r3, #128	; 0x80
 80036c6:	d913      	bls.n	80036f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2ba0      	cmp	r3, #160	; 0xa0
 80036cc:	d902      	bls.n	80036d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80036ce:	2302      	movs	r3, #2
 80036d0:	613b      	str	r3, [r7, #16]
 80036d2:	e00d      	b.n	80036f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80036d4:	2301      	movs	r3, #1
 80036d6:	613b      	str	r3, [r7, #16]
 80036d8:	e00a      	b.n	80036f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b7f      	cmp	r3, #127	; 0x7f
 80036de:	d902      	bls.n	80036e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80036e0:	2302      	movs	r3, #2
 80036e2:	613b      	str	r3, [r7, #16]
 80036e4:	e004      	b.n	80036f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2b70      	cmp	r3, #112	; 0x70
 80036ea:	d101      	bne.n	80036f0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80036ec:	2301      	movs	r3, #1
 80036ee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80036f0:	4b0b      	ldr	r3, [pc, #44]	; (8003720 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f023 020f 	bic.w	r2, r3, #15
 80036f8:	4909      	ldr	r1, [pc, #36]	; (8003720 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003700:	4b07      	ldr	r3, [pc, #28]	; (8003720 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 030f 	and.w	r3, r3, #15
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	429a      	cmp	r2, r3
 800370c:	d001      	beq.n	8003712 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e000      	b.n	8003714 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3718      	adds	r7, #24
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	40021000 	.word	0x40021000
 8003720:	40022000 	.word	0x40022000

08003724 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003724:	b480      	push	{r7}
 8003726:	b087      	sub	sp, #28
 8003728:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800372a:	4b2d      	ldr	r3, [pc, #180]	; (80037e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	f003 0303 	and.w	r3, r3, #3
 8003732:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2b03      	cmp	r3, #3
 8003738:	d00b      	beq.n	8003752 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2b03      	cmp	r3, #3
 800373e:	d825      	bhi.n	800378c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d008      	beq.n	8003758 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2b02      	cmp	r3, #2
 800374a:	d11f      	bne.n	800378c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800374c:	4b25      	ldr	r3, [pc, #148]	; (80037e4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800374e:	613b      	str	r3, [r7, #16]
    break;
 8003750:	e01f      	b.n	8003792 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003752:	4b25      	ldr	r3, [pc, #148]	; (80037e8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003754:	613b      	str	r3, [r7, #16]
    break;
 8003756:	e01c      	b.n	8003792 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003758:	4b21      	ldr	r3, [pc, #132]	; (80037e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0308 	and.w	r3, r3, #8
 8003760:	2b00      	cmp	r3, #0
 8003762:	d107      	bne.n	8003774 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003764:	4b1e      	ldr	r3, [pc, #120]	; (80037e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003766:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800376a:	0a1b      	lsrs	r3, r3, #8
 800376c:	f003 030f 	and.w	r3, r3, #15
 8003770:	617b      	str	r3, [r7, #20]
 8003772:	e005      	b.n	8003780 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003774:	4b1a      	ldr	r3, [pc, #104]	; (80037e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	091b      	lsrs	r3, r3, #4
 800377a:	f003 030f 	and.w	r3, r3, #15
 800377e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003780:	4a1a      	ldr	r2, [pc, #104]	; (80037ec <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003788:	613b      	str	r3, [r7, #16]
    break;
 800378a:	e002      	b.n	8003792 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800378c:	2300      	movs	r3, #0
 800378e:	613b      	str	r3, [r7, #16]
    break;
 8003790:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003792:	4b13      	ldr	r3, [pc, #76]	; (80037e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	091b      	lsrs	r3, r3, #4
 8003798:	f003 030f 	and.w	r3, r3, #15
 800379c:	3301      	adds	r3, #1
 800379e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80037a0:	4b0f      	ldr	r3, [pc, #60]	; (80037e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	0a1b      	lsrs	r3, r3, #8
 80037a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	fb03 f202 	mul.w	r2, r3, r2
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037b8:	4b09      	ldr	r3, [pc, #36]	; (80037e0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	0e5b      	lsrs	r3, r3, #25
 80037be:	f003 0303 	and.w	r3, r3, #3
 80037c2:	3301      	adds	r3, #1
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80037d2:	683b      	ldr	r3, [r7, #0]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	371c      	adds	r7, #28
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	40021000 	.word	0x40021000
 80037e4:	00f42400 	.word	0x00f42400
 80037e8:	007a1200 	.word	0x007a1200
 80037ec:	08005b7c 	.word	0x08005b7c

080037f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037f8:	2300      	movs	r3, #0
 80037fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037fc:	2300      	movs	r3, #0
 80037fe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003808:	2b00      	cmp	r3, #0
 800380a:	d040      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003810:	2b80      	cmp	r3, #128	; 0x80
 8003812:	d02a      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003814:	2b80      	cmp	r3, #128	; 0x80
 8003816:	d825      	bhi.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003818:	2b60      	cmp	r3, #96	; 0x60
 800381a:	d026      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800381c:	2b60      	cmp	r3, #96	; 0x60
 800381e:	d821      	bhi.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003820:	2b40      	cmp	r3, #64	; 0x40
 8003822:	d006      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003824:	2b40      	cmp	r3, #64	; 0x40
 8003826:	d81d      	bhi.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003828:	2b00      	cmp	r3, #0
 800382a:	d009      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800382c:	2b20      	cmp	r3, #32
 800382e:	d010      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003830:	e018      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003832:	4b89      	ldr	r3, [pc, #548]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	4a88      	ldr	r2, [pc, #544]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800383c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800383e:	e015      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	3304      	adds	r3, #4
 8003844:	2100      	movs	r1, #0
 8003846:	4618      	mov	r0, r3
 8003848:	f000 fb02 	bl	8003e50 <RCCEx_PLLSAI1_Config>
 800384c:	4603      	mov	r3, r0
 800384e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003850:	e00c      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	3320      	adds	r3, #32
 8003856:	2100      	movs	r1, #0
 8003858:	4618      	mov	r0, r3
 800385a:	f000 fbed 	bl	8004038 <RCCEx_PLLSAI2_Config>
 800385e:	4603      	mov	r3, r0
 8003860:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003862:	e003      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	74fb      	strb	r3, [r7, #19]
      break;
 8003868:	e000      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800386a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800386c:	7cfb      	ldrb	r3, [r7, #19]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d10b      	bne.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003872:	4b79      	ldr	r3, [pc, #484]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003874:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003878:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003880:	4975      	ldr	r1, [pc, #468]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003882:	4313      	orrs	r3, r2
 8003884:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003888:	e001      	b.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800388a:	7cfb      	ldrb	r3, [r7, #19]
 800388c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d047      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800389e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038a2:	d030      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80038a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038a8:	d82a      	bhi.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80038aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038ae:	d02a      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80038b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038b4:	d824      	bhi.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80038b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038ba:	d008      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0xde>
 80038bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038c0:	d81e      	bhi.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00a      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0xec>
 80038c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038ca:	d010      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80038cc:	e018      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80038ce:	4b62      	ldr	r3, [pc, #392]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	4a61      	ldr	r2, [pc, #388]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80038d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038d8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80038da:	e015      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	3304      	adds	r3, #4
 80038e0:	2100      	movs	r1, #0
 80038e2:	4618      	mov	r0, r3
 80038e4:	f000 fab4 	bl	8003e50 <RCCEx_PLLSAI1_Config>
 80038e8:	4603      	mov	r3, r0
 80038ea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80038ec:	e00c      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	3320      	adds	r3, #32
 80038f2:	2100      	movs	r1, #0
 80038f4:	4618      	mov	r0, r3
 80038f6:	f000 fb9f 	bl	8004038 <RCCEx_PLLSAI2_Config>
 80038fa:	4603      	mov	r3, r0
 80038fc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80038fe:	e003      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	74fb      	strb	r3, [r7, #19]
      break;
 8003904:	e000      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003906:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003908:	7cfb      	ldrb	r3, [r7, #19]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d10b      	bne.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800390e:	4b52      	ldr	r3, [pc, #328]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003910:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003914:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391c:	494e      	ldr	r1, [pc, #312]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800391e:	4313      	orrs	r3, r2
 8003920:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003924:	e001      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003926:	7cfb      	ldrb	r3, [r7, #19]
 8003928:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003932:	2b00      	cmp	r3, #0
 8003934:	f000 809f 	beq.w	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003938:	2300      	movs	r3, #0
 800393a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800393c:	4b46      	ldr	r3, [pc, #280]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800393e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d101      	bne.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003948:	2301      	movs	r3, #1
 800394a:	e000      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800394c:	2300      	movs	r3, #0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00d      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003952:	4b41      	ldr	r3, [pc, #260]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003956:	4a40      	ldr	r2, [pc, #256]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800395c:	6593      	str	r3, [r2, #88]	; 0x58
 800395e:	4b3e      	ldr	r3, [pc, #248]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003966:	60bb      	str	r3, [r7, #8]
 8003968:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800396a:	2301      	movs	r3, #1
 800396c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800396e:	4b3b      	ldr	r3, [pc, #236]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a3a      	ldr	r2, [pc, #232]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003974:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003978:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800397a:	f7fe fca5 	bl	80022c8 <HAL_GetTick>
 800397e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003980:	e009      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003982:	f7fe fca1 	bl	80022c8 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b02      	cmp	r3, #2
 800398e:	d902      	bls.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	74fb      	strb	r3, [r7, #19]
        break;
 8003994:	e005      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003996:	4b31      	ldr	r3, [pc, #196]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d0ef      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80039a2:	7cfb      	ldrb	r3, [r7, #19]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d15b      	bne.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80039a8:	4b2b      	ldr	r3, [pc, #172]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80039aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039b2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d01f      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d019      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80039c6:	4b24      	ldr	r3, [pc, #144]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80039c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039d0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039d2:	4b21      	ldr	r3, [pc, #132]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80039d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d8:	4a1f      	ldr	r2, [pc, #124]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80039da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80039e2:	4b1d      	ldr	r3, [pc, #116]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80039e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e8:	4a1b      	ldr	r2, [pc, #108]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80039ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80039f2:	4a19      	ldr	r2, [pc, #100]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d016      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a04:	f7fe fc60 	bl	80022c8 <HAL_GetTick>
 8003a08:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a0a:	e00b      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a0c:	f7fe fc5c 	bl	80022c8 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d902      	bls.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	74fb      	strb	r3, [r7, #19]
            break;
 8003a22:	e006      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a24:	4b0c      	ldr	r3, [pc, #48]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d0ec      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003a32:	7cfb      	ldrb	r3, [r7, #19]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d10c      	bne.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a38:	4b07      	ldr	r3, [pc, #28]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a48:	4903      	ldr	r1, [pc, #12]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003a50:	e008      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a52:	7cfb      	ldrb	r3, [r7, #19]
 8003a54:	74bb      	strb	r3, [r7, #18]
 8003a56:	e005      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003a58:	40021000 	.word	0x40021000
 8003a5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a60:	7cfb      	ldrb	r3, [r7, #19]
 8003a62:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a64:	7c7b      	ldrb	r3, [r7, #17]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d105      	bne.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a6a:	4ba0      	ldr	r3, [pc, #640]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a6e:	4a9f      	ldr	r2, [pc, #636]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a74:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00a      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a82:	4b9a      	ldr	r3, [pc, #616]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a88:	f023 0203 	bic.w	r2, r3, #3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a90:	4996      	ldr	r1, [pc, #600]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00a      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003aa4:	4b91      	ldr	r3, [pc, #580]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aaa:	f023 020c 	bic.w	r2, r3, #12
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab2:	498e      	ldr	r1, [pc, #568]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0304 	and.w	r3, r3, #4
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00a      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ac6:	4b89      	ldr	r3, [pc, #548]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003acc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad4:	4985      	ldr	r1, [pc, #532]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0308 	and.w	r3, r3, #8
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00a      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ae8:	4b80      	ldr	r3, [pc, #512]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003af6:	497d      	ldr	r1, [pc, #500]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0310 	and.w	r3, r3, #16
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00a      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b0a:	4b78      	ldr	r3, [pc, #480]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b18:	4974      	ldr	r1, [pc, #464]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0320 	and.w	r3, r3, #32
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00a      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b2c:	4b6f      	ldr	r3, [pc, #444]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b32:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b3a:	496c      	ldr	r1, [pc, #432]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00a      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b4e:	4b67      	ldr	r3, [pc, #412]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b54:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b5c:	4963      	ldr	r1, [pc, #396]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00a      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b70:	4b5e      	ldr	r3, [pc, #376]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b76:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b7e:	495b      	ldr	r1, [pc, #364]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00a      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b92:	4b56      	ldr	r3, [pc, #344]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b98:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba0:	4952      	ldr	r1, [pc, #328]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00a      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003bb4:	4b4d      	ldr	r3, [pc, #308]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc2:	494a      	ldr	r1, [pc, #296]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00a      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003bd6:	4b45      	ldr	r3, [pc, #276]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bdc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be4:	4941      	ldr	r1, [pc, #260]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00a      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003bf8:	4b3c      	ldr	r3, [pc, #240]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003bfe:	f023 0203 	bic.w	r2, r3, #3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c06:	4939      	ldr	r1, [pc, #228]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d028      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c1a:	4b34      	ldr	r3, [pc, #208]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c20:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c28:	4930      	ldr	r1, [pc, #192]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c38:	d106      	bne.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c3a:	4b2c      	ldr	r3, [pc, #176]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	4a2b      	ldr	r2, [pc, #172]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c44:	60d3      	str	r3, [r2, #12]
 8003c46:	e011      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c50:	d10c      	bne.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	3304      	adds	r3, #4
 8003c56:	2101      	movs	r1, #1
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f000 f8f9 	bl	8003e50 <RCCEx_PLLSAI1_Config>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003c62:	7cfb      	ldrb	r3, [r7, #19]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d001      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003c68:	7cfb      	ldrb	r3, [r7, #19]
 8003c6a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d04d      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c80:	d108      	bne.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003c82:	4b1a      	ldr	r3, [pc, #104]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c84:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c88:	4a18      	ldr	r2, [pc, #96]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c8e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003c92:	e012      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003c94:	4b15      	ldr	r3, [pc, #84]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c9a:	4a14      	ldr	r2, [pc, #80]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ca0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003ca4:	4b11      	ldr	r3, [pc, #68]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003caa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cb2:	490e      	ldr	r1, [pc, #56]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cc2:	d106      	bne.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cc4:	4b09      	ldr	r3, [pc, #36]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	4a08      	ldr	r2, [pc, #32]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cce:	60d3      	str	r3, [r2, #12]
 8003cd0:	e020      	b.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cda:	d109      	bne.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003cdc:	4b03      	ldr	r3, [pc, #12]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	4a02      	ldr	r2, [pc, #8]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ce2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ce6:	60d3      	str	r3, [r2, #12]
 8003ce8:	e014      	b.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003cea:	bf00      	nop
 8003cec:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cf4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cf8:	d10c      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	3304      	adds	r3, #4
 8003cfe:	2101      	movs	r1, #1
 8003d00:	4618      	mov	r0, r3
 8003d02:	f000 f8a5 	bl	8003e50 <RCCEx_PLLSAI1_Config>
 8003d06:	4603      	mov	r3, r0
 8003d08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d0a:	7cfb      	ldrb	r3, [r7, #19]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d001      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003d10:	7cfb      	ldrb	r3, [r7, #19]
 8003d12:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d028      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d20:	4b4a      	ldr	r3, [pc, #296]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d2e:	4947      	ldr	r1, [pc, #284]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d3e:	d106      	bne.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d40:	4b42      	ldr	r3, [pc, #264]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	4a41      	ldr	r2, [pc, #260]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d4a:	60d3      	str	r3, [r2, #12]
 8003d4c:	e011      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d56:	d10c      	bne.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	3304      	adds	r3, #4
 8003d5c:	2101      	movs	r1, #1
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 f876 	bl	8003e50 <RCCEx_PLLSAI1_Config>
 8003d64:	4603      	mov	r3, r0
 8003d66:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d68:	7cfb      	ldrb	r3, [r7, #19]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003d6e:	7cfb      	ldrb	r3, [r7, #19]
 8003d70:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d01e      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d7e:	4b33      	ldr	r3, [pc, #204]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d84:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d8e:	492f      	ldr	r1, [pc, #188]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003da0:	d10c      	bne.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	3304      	adds	r3, #4
 8003da6:	2102      	movs	r1, #2
 8003da8:	4618      	mov	r0, r3
 8003daa:	f000 f851 	bl	8003e50 <RCCEx_PLLSAI1_Config>
 8003dae:	4603      	mov	r3, r0
 8003db0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003db2:	7cfb      	ldrb	r3, [r7, #19]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d001      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003db8:	7cfb      	ldrb	r3, [r7, #19]
 8003dba:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00b      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003dc8:	4b20      	ldr	r3, [pc, #128]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003dce:	f023 0204 	bic.w	r2, r3, #4
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dd8:	491c      	ldr	r1, [pc, #112]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00b      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003dec:	4b17      	ldr	r3, [pc, #92]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003df2:	f023 0218 	bic.w	r2, r3, #24
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfc:	4913      	ldr	r1, [pc, #76]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d017      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003e10:	4b0e      	ldr	r3, [pc, #56]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e20:	490a      	ldr	r1, [pc, #40]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e32:	d105      	bne.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e34:	4b05      	ldr	r3, [pc, #20]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	4a04      	ldr	r2, [pc, #16]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e3e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003e40:	7cbb      	ldrb	r3, [r7, #18]
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3718      	adds	r7, #24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	40021000 	.word	0x40021000

08003e50 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e5e:	4b72      	ldr	r3, [pc, #456]	; (8004028 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	f003 0303 	and.w	r3, r3, #3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00e      	beq.n	8003e88 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003e6a:	4b6f      	ldr	r3, [pc, #444]	; (8004028 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	f003 0203 	and.w	r2, r3, #3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d103      	bne.n	8003e82 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
       ||
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d142      	bne.n	8003f08 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	73fb      	strb	r3, [r7, #15]
 8003e86:	e03f      	b.n	8003f08 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2b03      	cmp	r3, #3
 8003e8e:	d018      	beq.n	8003ec2 <RCCEx_PLLSAI1_Config+0x72>
 8003e90:	2b03      	cmp	r3, #3
 8003e92:	d825      	bhi.n	8003ee0 <RCCEx_PLLSAI1_Config+0x90>
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d002      	beq.n	8003e9e <RCCEx_PLLSAI1_Config+0x4e>
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d009      	beq.n	8003eb0 <RCCEx_PLLSAI1_Config+0x60>
 8003e9c:	e020      	b.n	8003ee0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e9e:	4b62      	ldr	r3, [pc, #392]	; (8004028 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d11d      	bne.n	8003ee6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eae:	e01a      	b.n	8003ee6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003eb0:	4b5d      	ldr	r3, [pc, #372]	; (8004028 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d116      	bne.n	8003eea <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ec0:	e013      	b.n	8003eea <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ec2:	4b59      	ldr	r3, [pc, #356]	; (8004028 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10f      	bne.n	8003eee <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ece:	4b56      	ldr	r3, [pc, #344]	; (8004028 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d109      	bne.n	8003eee <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ede:	e006      	b.n	8003eee <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ee4:	e004      	b.n	8003ef0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003ee6:	bf00      	nop
 8003ee8:	e002      	b.n	8003ef0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003eea:	bf00      	nop
 8003eec:	e000      	b.n	8003ef0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003eee:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ef0:	7bfb      	ldrb	r3, [r7, #15]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d108      	bne.n	8003f08 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003ef6:	4b4c      	ldr	r3, [pc, #304]	; (8004028 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	f023 0203 	bic.w	r2, r3, #3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4949      	ldr	r1, [pc, #292]	; (8004028 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003f08:	7bfb      	ldrb	r3, [r7, #15]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f040 8086 	bne.w	800401c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003f10:	4b45      	ldr	r3, [pc, #276]	; (8004028 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a44      	ldr	r2, [pc, #272]	; (8004028 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f16:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f1c:	f7fe f9d4 	bl	80022c8 <HAL_GetTick>
 8003f20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f22:	e009      	b.n	8003f38 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f24:	f7fe f9d0 	bl	80022c8 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d902      	bls.n	8003f38 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	73fb      	strb	r3, [r7, #15]
        break;
 8003f36:	e005      	b.n	8003f44 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f38:	4b3b      	ldr	r3, [pc, #236]	; (8004028 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1ef      	bne.n	8003f24 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003f44:	7bfb      	ldrb	r3, [r7, #15]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d168      	bne.n	800401c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d113      	bne.n	8003f78 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f50:	4b35      	ldr	r3, [pc, #212]	; (8004028 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f52:	691a      	ldr	r2, [r3, #16]
 8003f54:	4b35      	ldr	r3, [pc, #212]	; (800402c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003f56:	4013      	ands	r3, r2
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	6892      	ldr	r2, [r2, #8]
 8003f5c:	0211      	lsls	r1, r2, #8
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	68d2      	ldr	r2, [r2, #12]
 8003f62:	06d2      	lsls	r2, r2, #27
 8003f64:	4311      	orrs	r1, r2
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	6852      	ldr	r2, [r2, #4]
 8003f6a:	3a01      	subs	r2, #1
 8003f6c:	0112      	lsls	r2, r2, #4
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	492d      	ldr	r1, [pc, #180]	; (8004028 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	610b      	str	r3, [r1, #16]
 8003f76:	e02d      	b.n	8003fd4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d115      	bne.n	8003faa <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f7e:	4b2a      	ldr	r3, [pc, #168]	; (8004028 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f80:	691a      	ldr	r2, [r3, #16]
 8003f82:	4b2b      	ldr	r3, [pc, #172]	; (8004030 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f84:	4013      	ands	r3, r2
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	6892      	ldr	r2, [r2, #8]
 8003f8a:	0211      	lsls	r1, r2, #8
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	6912      	ldr	r2, [r2, #16]
 8003f90:	0852      	lsrs	r2, r2, #1
 8003f92:	3a01      	subs	r2, #1
 8003f94:	0552      	lsls	r2, r2, #21
 8003f96:	4311      	orrs	r1, r2
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	6852      	ldr	r2, [r2, #4]
 8003f9c:	3a01      	subs	r2, #1
 8003f9e:	0112      	lsls	r2, r2, #4
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	4921      	ldr	r1, [pc, #132]	; (8004028 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	610b      	str	r3, [r1, #16]
 8003fa8:	e014      	b.n	8003fd4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003faa:	4b1f      	ldr	r3, [pc, #124]	; (8004028 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003fac:	691a      	ldr	r2, [r3, #16]
 8003fae:	4b21      	ldr	r3, [pc, #132]	; (8004034 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	6892      	ldr	r2, [r2, #8]
 8003fb6:	0211      	lsls	r1, r2, #8
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	6952      	ldr	r2, [r2, #20]
 8003fbc:	0852      	lsrs	r2, r2, #1
 8003fbe:	3a01      	subs	r2, #1
 8003fc0:	0652      	lsls	r2, r2, #25
 8003fc2:	4311      	orrs	r1, r2
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	6852      	ldr	r2, [r2, #4]
 8003fc8:	3a01      	subs	r2, #1
 8003fca:	0112      	lsls	r2, r2, #4
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	4916      	ldr	r1, [pc, #88]	; (8004028 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003fd4:	4b14      	ldr	r3, [pc, #80]	; (8004028 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a13      	ldr	r2, [pc, #76]	; (8004028 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003fda:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003fde:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fe0:	f7fe f972 	bl	80022c8 <HAL_GetTick>
 8003fe4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003fe6:	e009      	b.n	8003ffc <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003fe8:	f7fe f96e 	bl	80022c8 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d902      	bls.n	8003ffc <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	73fb      	strb	r3, [r7, #15]
          break;
 8003ffa:	e005      	b.n	8004008 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ffc:	4b0a      	ldr	r3, [pc, #40]	; (8004028 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d0ef      	beq.n	8003fe8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004008:	7bfb      	ldrb	r3, [r7, #15]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d106      	bne.n	800401c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800400e:	4b06      	ldr	r3, [pc, #24]	; (8004028 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004010:	691a      	ldr	r2, [r3, #16]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	4904      	ldr	r1, [pc, #16]	; (8004028 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004018:	4313      	orrs	r3, r2
 800401a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800401c:	7bfb      	ldrb	r3, [r7, #15]
}
 800401e:	4618      	mov	r0, r3
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	40021000 	.word	0x40021000
 800402c:	07ff800f 	.word	0x07ff800f
 8004030:	ff9f800f 	.word	0xff9f800f
 8004034:	f9ff800f 	.word	0xf9ff800f

08004038 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004042:	2300      	movs	r3, #0
 8004044:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004046:	4b72      	ldr	r3, [pc, #456]	; (8004210 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	f003 0303 	and.w	r3, r3, #3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00e      	beq.n	8004070 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004052:	4b6f      	ldr	r3, [pc, #444]	; (8004210 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	f003 0203 	and.w	r2, r3, #3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	429a      	cmp	r2, r3
 8004060:	d103      	bne.n	800406a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
       ||
 8004066:	2b00      	cmp	r3, #0
 8004068:	d142      	bne.n	80040f0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	73fb      	strb	r3, [r7, #15]
 800406e:	e03f      	b.n	80040f0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2b03      	cmp	r3, #3
 8004076:	d018      	beq.n	80040aa <RCCEx_PLLSAI2_Config+0x72>
 8004078:	2b03      	cmp	r3, #3
 800407a:	d825      	bhi.n	80040c8 <RCCEx_PLLSAI2_Config+0x90>
 800407c:	2b01      	cmp	r3, #1
 800407e:	d002      	beq.n	8004086 <RCCEx_PLLSAI2_Config+0x4e>
 8004080:	2b02      	cmp	r3, #2
 8004082:	d009      	beq.n	8004098 <RCCEx_PLLSAI2_Config+0x60>
 8004084:	e020      	b.n	80040c8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004086:	4b62      	ldr	r3, [pc, #392]	; (8004210 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d11d      	bne.n	80040ce <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004096:	e01a      	b.n	80040ce <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004098:	4b5d      	ldr	r3, [pc, #372]	; (8004210 <RCCEx_PLLSAI2_Config+0x1d8>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d116      	bne.n	80040d2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040a8:	e013      	b.n	80040d2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80040aa:	4b59      	ldr	r3, [pc, #356]	; (8004210 <RCCEx_PLLSAI2_Config+0x1d8>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d10f      	bne.n	80040d6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80040b6:	4b56      	ldr	r3, [pc, #344]	; (8004210 <RCCEx_PLLSAI2_Config+0x1d8>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d109      	bne.n	80040d6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80040c6:	e006      	b.n	80040d6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	73fb      	strb	r3, [r7, #15]
      break;
 80040cc:	e004      	b.n	80040d8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80040ce:	bf00      	nop
 80040d0:	e002      	b.n	80040d8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80040d2:	bf00      	nop
 80040d4:	e000      	b.n	80040d8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80040d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80040d8:	7bfb      	ldrb	r3, [r7, #15]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d108      	bne.n	80040f0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80040de:	4b4c      	ldr	r3, [pc, #304]	; (8004210 <RCCEx_PLLSAI2_Config+0x1d8>)
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	f023 0203 	bic.w	r2, r3, #3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4949      	ldr	r1, [pc, #292]	; (8004210 <RCCEx_PLLSAI2_Config+0x1d8>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80040f0:	7bfb      	ldrb	r3, [r7, #15]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f040 8086 	bne.w	8004204 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80040f8:	4b45      	ldr	r3, [pc, #276]	; (8004210 <RCCEx_PLLSAI2_Config+0x1d8>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a44      	ldr	r2, [pc, #272]	; (8004210 <RCCEx_PLLSAI2_Config+0x1d8>)
 80040fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004102:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004104:	f7fe f8e0 	bl	80022c8 <HAL_GetTick>
 8004108:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800410a:	e009      	b.n	8004120 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800410c:	f7fe f8dc 	bl	80022c8 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d902      	bls.n	8004120 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	73fb      	strb	r3, [r7, #15]
        break;
 800411e:	e005      	b.n	800412c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004120:	4b3b      	ldr	r3, [pc, #236]	; (8004210 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1ef      	bne.n	800410c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800412c:	7bfb      	ldrb	r3, [r7, #15]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d168      	bne.n	8004204 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d113      	bne.n	8004160 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004138:	4b35      	ldr	r3, [pc, #212]	; (8004210 <RCCEx_PLLSAI2_Config+0x1d8>)
 800413a:	695a      	ldr	r2, [r3, #20]
 800413c:	4b35      	ldr	r3, [pc, #212]	; (8004214 <RCCEx_PLLSAI2_Config+0x1dc>)
 800413e:	4013      	ands	r3, r2
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	6892      	ldr	r2, [r2, #8]
 8004144:	0211      	lsls	r1, r2, #8
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	68d2      	ldr	r2, [r2, #12]
 800414a:	06d2      	lsls	r2, r2, #27
 800414c:	4311      	orrs	r1, r2
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	6852      	ldr	r2, [r2, #4]
 8004152:	3a01      	subs	r2, #1
 8004154:	0112      	lsls	r2, r2, #4
 8004156:	430a      	orrs	r2, r1
 8004158:	492d      	ldr	r1, [pc, #180]	; (8004210 <RCCEx_PLLSAI2_Config+0x1d8>)
 800415a:	4313      	orrs	r3, r2
 800415c:	614b      	str	r3, [r1, #20]
 800415e:	e02d      	b.n	80041bc <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d115      	bne.n	8004192 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004166:	4b2a      	ldr	r3, [pc, #168]	; (8004210 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004168:	695a      	ldr	r2, [r3, #20]
 800416a:	4b2b      	ldr	r3, [pc, #172]	; (8004218 <RCCEx_PLLSAI2_Config+0x1e0>)
 800416c:	4013      	ands	r3, r2
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	6892      	ldr	r2, [r2, #8]
 8004172:	0211      	lsls	r1, r2, #8
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	6912      	ldr	r2, [r2, #16]
 8004178:	0852      	lsrs	r2, r2, #1
 800417a:	3a01      	subs	r2, #1
 800417c:	0552      	lsls	r2, r2, #21
 800417e:	4311      	orrs	r1, r2
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	6852      	ldr	r2, [r2, #4]
 8004184:	3a01      	subs	r2, #1
 8004186:	0112      	lsls	r2, r2, #4
 8004188:	430a      	orrs	r2, r1
 800418a:	4921      	ldr	r1, [pc, #132]	; (8004210 <RCCEx_PLLSAI2_Config+0x1d8>)
 800418c:	4313      	orrs	r3, r2
 800418e:	614b      	str	r3, [r1, #20]
 8004190:	e014      	b.n	80041bc <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004192:	4b1f      	ldr	r3, [pc, #124]	; (8004210 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004194:	695a      	ldr	r2, [r3, #20]
 8004196:	4b21      	ldr	r3, [pc, #132]	; (800421c <RCCEx_PLLSAI2_Config+0x1e4>)
 8004198:	4013      	ands	r3, r2
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6892      	ldr	r2, [r2, #8]
 800419e:	0211      	lsls	r1, r2, #8
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	6952      	ldr	r2, [r2, #20]
 80041a4:	0852      	lsrs	r2, r2, #1
 80041a6:	3a01      	subs	r2, #1
 80041a8:	0652      	lsls	r2, r2, #25
 80041aa:	4311      	orrs	r1, r2
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	6852      	ldr	r2, [r2, #4]
 80041b0:	3a01      	subs	r2, #1
 80041b2:	0112      	lsls	r2, r2, #4
 80041b4:	430a      	orrs	r2, r1
 80041b6:	4916      	ldr	r1, [pc, #88]	; (8004210 <RCCEx_PLLSAI2_Config+0x1d8>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80041bc:	4b14      	ldr	r3, [pc, #80]	; (8004210 <RCCEx_PLLSAI2_Config+0x1d8>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a13      	ldr	r2, [pc, #76]	; (8004210 <RCCEx_PLLSAI2_Config+0x1d8>)
 80041c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c8:	f7fe f87e 	bl	80022c8 <HAL_GetTick>
 80041cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80041ce:	e009      	b.n	80041e4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80041d0:	f7fe f87a 	bl	80022c8 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d902      	bls.n	80041e4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	73fb      	strb	r3, [r7, #15]
          break;
 80041e2:	e005      	b.n	80041f0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80041e4:	4b0a      	ldr	r3, [pc, #40]	; (8004210 <RCCEx_PLLSAI2_Config+0x1d8>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d0ef      	beq.n	80041d0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80041f0:	7bfb      	ldrb	r3, [r7, #15]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d106      	bne.n	8004204 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80041f6:	4b06      	ldr	r3, [pc, #24]	; (8004210 <RCCEx_PLLSAI2_Config+0x1d8>)
 80041f8:	695a      	ldr	r2, [r3, #20]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	4904      	ldr	r1, [pc, #16]	; (8004210 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004200:	4313      	orrs	r3, r2
 8004202:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004204:	7bfb      	ldrb	r3, [r7, #15]
}
 8004206:	4618      	mov	r0, r3
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	40021000 	.word	0x40021000
 8004214:	07ff800f 	.word	0x07ff800f
 8004218:	ff9f800f 	.word	0xff9f800f
 800421c:	f9ff800f 	.word	0xf9ff800f

08004220 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d079      	beq.n	8004326 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d106      	bne.n	800424c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f7fd feb2 	bl	8001fb0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2202      	movs	r2, #2
 8004250:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	f003 0310 	and.w	r3, r3, #16
 800425e:	2b10      	cmp	r3, #16
 8004260:	d058      	beq.n	8004314 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	22ca      	movs	r2, #202	; 0xca
 8004268:	625a      	str	r2, [r3, #36]	; 0x24
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2253      	movs	r2, #83	; 0x53
 8004270:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f880 	bl	8004378 <RTC_EnterInitMode>
 8004278:	4603      	mov	r3, r0
 800427a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800427c:	7bfb      	ldrb	r3, [r7, #15]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d127      	bne.n	80042d2 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	6812      	ldr	r2, [r2, #0]
 800428c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004290:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004294:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	6899      	ldr	r1, [r3, #8]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	431a      	orrs	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	431a      	orrs	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	430a      	orrs	r2, r1
 80042b2:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	68d2      	ldr	r2, [r2, #12]
 80042bc:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	6919      	ldr	r1, [r3, #16]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	041a      	lsls	r2, r3, #16
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	430a      	orrs	r2, r1
 80042d0:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 f884 	bl	80043e0 <RTC_ExitInitMode>
 80042d8:	4603      	mov	r3, r0
 80042da:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80042dc:	7bfb      	ldrb	r3, [r7, #15]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d113      	bne.n	800430a <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f022 0203 	bic.w	r2, r2, #3
 80042f0:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	69da      	ldr	r2, [r3, #28]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	431a      	orrs	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	430a      	orrs	r2, r1
 8004308:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	22ff      	movs	r2, #255	; 0xff
 8004310:	625a      	str	r2, [r3, #36]	; 0x24
 8004312:	e001      	b.n	8004318 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004314:	2300      	movs	r3, #0
 8004316:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004318:	7bfb      	ldrb	r3, [r7, #15]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d103      	bne.n	8004326 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 8004326:	7bfb      	ldrb	r3, [r7, #15]
}
 8004328:	4618      	mov	r0, r3
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a0d      	ldr	r2, [pc, #52]	; (8004374 <HAL_RTC_WaitForSynchro+0x44>)
 800433e:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8004340:	f7fd ffc2 	bl	80022c8 <HAL_GetTick>
 8004344:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004346:	e009      	b.n	800435c <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004348:	f7fd ffbe 	bl	80022c8 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004356:	d901      	bls.n	800435c <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e007      	b.n	800436c <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	f003 0320 	and.w	r3, r3, #32
 8004366:	2b00      	cmp	r3, #0
 8004368:	d0ee      	beq.n	8004348 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3710      	adds	r7, #16
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	0003ff5f 	.word	0x0003ff5f

08004378 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004380:	2300      	movs	r3, #0
 8004382:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800438e:	2b00      	cmp	r3, #0
 8004390:	d120      	bne.n	80043d4 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f04f 32ff 	mov.w	r2, #4294967295
 800439a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800439c:	f7fd ff94 	bl	80022c8 <HAL_GetTick>
 80043a0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80043a2:	e00d      	b.n	80043c0 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80043a4:	f7fd ff90 	bl	80022c8 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043b2:	d905      	bls.n	80043c0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2203      	movs	r2, #3
 80043bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d102      	bne.n	80043d4 <RTC_EnterInitMode+0x5c>
 80043ce:	7bfb      	ldrb	r3, [r7, #15]
 80043d0:	2b03      	cmp	r3, #3
 80043d2:	d1e7      	bne.n	80043a4 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80043d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3710      	adds	r7, #16
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
	...

080043e0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043e8:	2300      	movs	r3, #0
 80043ea:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80043ec:	4b1a      	ldr	r3, [pc, #104]	; (8004458 <RTC_ExitInitMode+0x78>)
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	4a19      	ldr	r2, [pc, #100]	; (8004458 <RTC_ExitInitMode+0x78>)
 80043f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043f6:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80043f8:	4b17      	ldr	r3, [pc, #92]	; (8004458 <RTC_ExitInitMode+0x78>)
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f003 0320 	and.w	r3, r3, #32
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10c      	bne.n	800441e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f7ff ff93 	bl	8004330 <HAL_RTC_WaitForSynchro>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d01e      	beq.n	800444e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2203      	movs	r2, #3
 8004414:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	73fb      	strb	r3, [r7, #15]
 800441c:	e017      	b.n	800444e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800441e:	4b0e      	ldr	r3, [pc, #56]	; (8004458 <RTC_ExitInitMode+0x78>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	4a0d      	ldr	r2, [pc, #52]	; (8004458 <RTC_ExitInitMode+0x78>)
 8004424:	f023 0320 	bic.w	r3, r3, #32
 8004428:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f7ff ff80 	bl	8004330 <HAL_RTC_WaitForSynchro>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d005      	beq.n	8004442 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2203      	movs	r2, #3
 800443a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004442:	4b05      	ldr	r3, [pc, #20]	; (8004458 <RTC_ExitInitMode+0x78>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	4a04      	ldr	r2, [pc, #16]	; (8004458 <RTC_ExitInitMode+0x78>)
 8004448:	f043 0320 	orr.w	r3, r3, #32
 800444c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800444e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004450:	4618      	mov	r0, r3
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	40002800 	.word	0x40002800

0800445c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e095      	b.n	800459a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004472:	2b00      	cmp	r3, #0
 8004474:	d108      	bne.n	8004488 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800447e:	d009      	beq.n	8004494 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	61da      	str	r2, [r3, #28]
 8004486:	e005      	b.n	8004494 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d106      	bne.n	80044b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7fd fdb0 	bl	8002014 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2202      	movs	r2, #2
 80044b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044ca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80044d4:	d902      	bls.n	80044dc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80044d6:	2300      	movs	r3, #0
 80044d8:	60fb      	str	r3, [r7, #12]
 80044da:	e002      	b.n	80044e2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80044dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044e0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80044ea:	d007      	beq.n	80044fc <HAL_SPI_Init+0xa0>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80044f4:	d002      	beq.n	80044fc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800450c:	431a      	orrs	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	431a      	orrs	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	695b      	ldr	r3, [r3, #20]
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	431a      	orrs	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800452a:	431a      	orrs	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	69db      	ldr	r3, [r3, #28]
 8004530:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004534:	431a      	orrs	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800453e:	ea42 0103 	orr.w	r1, r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004546:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	430a      	orrs	r2, r1
 8004550:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	0c1b      	lsrs	r3, r3, #16
 8004558:	f003 0204 	and.w	r2, r3, #4
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004560:	f003 0310 	and.w	r3, r3, #16
 8004564:	431a      	orrs	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800456a:	f003 0308 	and.w	r3, r3, #8
 800456e:	431a      	orrs	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004578:	ea42 0103 	orr.w	r1, r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b088      	sub	sp, #32
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	60f8      	str	r0, [r7, #12]
 80045aa:	60b9      	str	r1, [r7, #8]
 80045ac:	603b      	str	r3, [r7, #0]
 80045ae:	4613      	mov	r3, r2
 80045b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80045b2:	2300      	movs	r3, #0
 80045b4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d101      	bne.n	80045c4 <HAL_SPI_Transmit+0x22>
 80045c0:	2302      	movs	r3, #2
 80045c2:	e15f      	b.n	8004884 <HAL_SPI_Transmit+0x2e2>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045cc:	f7fd fe7c 	bl	80022c8 <HAL_GetTick>
 80045d0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80045d2:	88fb      	ldrh	r3, [r7, #6]
 80045d4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d002      	beq.n	80045e8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80045e2:	2302      	movs	r3, #2
 80045e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80045e6:	e148      	b.n	800487a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d002      	beq.n	80045f4 <HAL_SPI_Transmit+0x52>
 80045ee:	88fb      	ldrh	r3, [r7, #6]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d102      	bne.n	80045fa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80045f8:	e13f      	b.n	800487a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2203      	movs	r2, #3
 80045fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	88fa      	ldrh	r2, [r7, #6]
 8004612:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	88fa      	ldrh	r2, [r7, #6]
 8004618:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2200      	movs	r2, #0
 8004634:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004644:	d10f      	bne.n	8004666 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004654:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004664:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004670:	2b40      	cmp	r3, #64	; 0x40
 8004672:	d007      	beq.n	8004684 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004682:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800468c:	d94f      	bls.n	800472e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d002      	beq.n	800469c <HAL_SPI_Transmit+0xfa>
 8004696:	8afb      	ldrh	r3, [r7, #22]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d142      	bne.n	8004722 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a0:	881a      	ldrh	r2, [r3, #0]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ac:	1c9a      	adds	r2, r3, #2
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	3b01      	subs	r3, #1
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80046c0:	e02f      	b.n	8004722 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f003 0302 	and.w	r3, r3, #2
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d112      	bne.n	80046f6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d4:	881a      	ldrh	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e0:	1c9a      	adds	r2, r3, #2
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	3b01      	subs	r3, #1
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046f4:	e015      	b.n	8004722 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046f6:	f7fd fde7 	bl	80022c8 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	683a      	ldr	r2, [r7, #0]
 8004702:	429a      	cmp	r2, r3
 8004704:	d803      	bhi.n	800470e <HAL_SPI_Transmit+0x16c>
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800470c:	d102      	bne.n	8004714 <HAL_SPI_Transmit+0x172>
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d106      	bne.n	8004722 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004720:	e0ab      	b.n	800487a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004726:	b29b      	uxth	r3, r3
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1ca      	bne.n	80046c2 <HAL_SPI_Transmit+0x120>
 800472c:	e080      	b.n	8004830 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d002      	beq.n	800473c <HAL_SPI_Transmit+0x19a>
 8004736:	8afb      	ldrh	r3, [r7, #22]
 8004738:	2b01      	cmp	r3, #1
 800473a:	d174      	bne.n	8004826 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004740:	b29b      	uxth	r3, r3
 8004742:	2b01      	cmp	r3, #1
 8004744:	d912      	bls.n	800476c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474a:	881a      	ldrh	r2, [r3, #0]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004756:	1c9a      	adds	r2, r3, #2
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004760:	b29b      	uxth	r3, r3
 8004762:	3b02      	subs	r3, #2
 8004764:	b29a      	uxth	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	87da      	strh	r2, [r3, #62]	; 0x3e
 800476a:	e05c      	b.n	8004826 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	330c      	adds	r3, #12
 8004776:	7812      	ldrb	r2, [r2, #0]
 8004778:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477e:	1c5a      	adds	r2, r3, #1
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004788:	b29b      	uxth	r3, r3
 800478a:	3b01      	subs	r3, #1
 800478c:	b29a      	uxth	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004792:	e048      	b.n	8004826 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d12b      	bne.n	80047fa <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d912      	bls.n	80047d2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b0:	881a      	ldrh	r2, [r3, #0]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047bc:	1c9a      	adds	r2, r3, #2
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	3b02      	subs	r3, #2
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80047d0:	e029      	b.n	8004826 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	330c      	adds	r3, #12
 80047dc:	7812      	ldrb	r2, [r2, #0]
 80047de:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e4:	1c5a      	adds	r2, r3, #1
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	3b01      	subs	r3, #1
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80047f8:	e015      	b.n	8004826 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047fa:	f7fd fd65 	bl	80022c8 <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	683a      	ldr	r2, [r7, #0]
 8004806:	429a      	cmp	r2, r3
 8004808:	d803      	bhi.n	8004812 <HAL_SPI_Transmit+0x270>
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004810:	d102      	bne.n	8004818 <HAL_SPI_Transmit+0x276>
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d106      	bne.n	8004826 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004824:	e029      	b.n	800487a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800482a:	b29b      	uxth	r3, r3
 800482c:	2b00      	cmp	r3, #0
 800482e:	d1b1      	bne.n	8004794 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004830:	69ba      	ldr	r2, [r7, #24]
 8004832:	6839      	ldr	r1, [r7, #0]
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f000 fb69 	bl	8004f0c <SPI_EndRxTxTransaction>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d002      	beq.n	8004846 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2220      	movs	r2, #32
 8004844:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10a      	bne.n	8004864 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800484e:	2300      	movs	r3, #0
 8004850:	613b      	str	r3, [r7, #16]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	613b      	str	r3, [r7, #16]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	613b      	str	r3, [r7, #16]
 8004862:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004868:	2b00      	cmp	r3, #0
 800486a:	d002      	beq.n	8004872 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	77fb      	strb	r3, [r7, #31]
 8004870:	e003      	b.n	800487a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004882:	7ffb      	ldrb	r3, [r7, #31]
}
 8004884:	4618      	mov	r0, r3
 8004886:	3720      	adds	r7, #32
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b08a      	sub	sp, #40	; 0x28
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
 8004898:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800489a:	2301      	movs	r3, #1
 800489c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800489e:	2300      	movs	r3, #0
 80048a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d101      	bne.n	80048b2 <HAL_SPI_TransmitReceive+0x26>
 80048ae:	2302      	movs	r3, #2
 80048b0:	e20a      	b.n	8004cc8 <HAL_SPI_TransmitReceive+0x43c>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048ba:	f7fd fd05 	bl	80022c8 <HAL_GetTick>
 80048be:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80048c6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80048ce:	887b      	ldrh	r3, [r7, #2]
 80048d0:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80048d2:	887b      	ldrh	r3, [r7, #2]
 80048d4:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80048d6:	7efb      	ldrb	r3, [r7, #27]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d00e      	beq.n	80048fa <HAL_SPI_TransmitReceive+0x6e>
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048e2:	d106      	bne.n	80048f2 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d102      	bne.n	80048f2 <HAL_SPI_TransmitReceive+0x66>
 80048ec:	7efb      	ldrb	r3, [r7, #27]
 80048ee:	2b04      	cmp	r3, #4
 80048f0:	d003      	beq.n	80048fa <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80048f2:	2302      	movs	r3, #2
 80048f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80048f8:	e1e0      	b.n	8004cbc <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d005      	beq.n	800490c <HAL_SPI_TransmitReceive+0x80>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d002      	beq.n	800490c <HAL_SPI_TransmitReceive+0x80>
 8004906:	887b      	ldrh	r3, [r7, #2]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d103      	bne.n	8004914 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004912:	e1d3      	b.n	8004cbc <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800491a:	b2db      	uxtb	r3, r3
 800491c:	2b04      	cmp	r3, #4
 800491e:	d003      	beq.n	8004928 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2205      	movs	r2, #5
 8004924:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	887a      	ldrh	r2, [r7, #2]
 8004938:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	887a      	ldrh	r2, [r7, #2]
 8004940:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	68ba      	ldr	r2, [r7, #8]
 8004948:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	887a      	ldrh	r2, [r7, #2]
 800494e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	887a      	ldrh	r2, [r7, #2]
 8004954:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800496a:	d802      	bhi.n	8004972 <HAL_SPI_TransmitReceive+0xe6>
 800496c:	8a3b      	ldrh	r3, [r7, #16]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d908      	bls.n	8004984 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	685a      	ldr	r2, [r3, #4]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004980:	605a      	str	r2, [r3, #4]
 8004982:	e007      	b.n	8004994 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	685a      	ldr	r2, [r3, #4]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004992:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800499e:	2b40      	cmp	r3, #64	; 0x40
 80049a0:	d007      	beq.n	80049b2 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049ba:	f240 8081 	bls.w	8004ac0 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d002      	beq.n	80049cc <HAL_SPI_TransmitReceive+0x140>
 80049c6:	8a7b      	ldrh	r3, [r7, #18]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d16d      	bne.n	8004aa8 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d0:	881a      	ldrh	r2, [r3, #0]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049dc:	1c9a      	adds	r2, r3, #2
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	3b01      	subs	r3, #1
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049f0:	e05a      	b.n	8004aa8 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f003 0302 	and.w	r3, r3, #2
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d11b      	bne.n	8004a38 <HAL_SPI_TransmitReceive+0x1ac>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d016      	beq.n	8004a38 <HAL_SPI_TransmitReceive+0x1ac>
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d113      	bne.n	8004a38 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a14:	881a      	ldrh	r2, [r3, #0]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a20:	1c9a      	adds	r2, r3, #2
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a34:	2300      	movs	r3, #0
 8004a36:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d11c      	bne.n	8004a80 <HAL_SPI_TransmitReceive+0x1f4>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d016      	beq.n	8004a80 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68da      	ldr	r2, [r3, #12]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5c:	b292      	uxth	r2, r2
 8004a5e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a64:	1c9a      	adds	r2, r3, #2
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	3b01      	subs	r3, #1
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004a80:	f7fd fc22 	bl	80022c8 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d80b      	bhi.n	8004aa8 <HAL_SPI_TransmitReceive+0x21c>
 8004a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a96:	d007      	beq.n	8004aa8 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004aa6:	e109      	b.n	8004cbc <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d19f      	bne.n	80049f2 <HAL_SPI_TransmitReceive+0x166>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d199      	bne.n	80049f2 <HAL_SPI_TransmitReceive+0x166>
 8004abe:	e0e3      	b.n	8004c88 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d003      	beq.n	8004ad0 <HAL_SPI_TransmitReceive+0x244>
 8004ac8:	8a7b      	ldrh	r3, [r7, #18]
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	f040 80cf 	bne.w	8004c6e <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d912      	bls.n	8004b00 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ade:	881a      	ldrh	r2, [r3, #0]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aea:	1c9a      	adds	r2, r3, #2
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	3b02      	subs	r3, #2
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004afe:	e0b6      	b.n	8004c6e <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	330c      	adds	r3, #12
 8004b0a:	7812      	ldrb	r2, [r2, #0]
 8004b0c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b12:	1c5a      	adds	r2, r3, #1
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b26:	e0a2      	b.n	8004c6e <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d134      	bne.n	8004ba0 <HAL_SPI_TransmitReceive+0x314>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d02f      	beq.n	8004ba0 <HAL_SPI_TransmitReceive+0x314>
 8004b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d12c      	bne.n	8004ba0 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d912      	bls.n	8004b76 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b54:	881a      	ldrh	r2, [r3, #0]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b60:	1c9a      	adds	r2, r3, #2
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	3b02      	subs	r3, #2
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b74:	e012      	b.n	8004b9c <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	330c      	adds	r3, #12
 8004b80:	7812      	ldrb	r2, [r2, #0]
 8004b82:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b88:	1c5a      	adds	r2, r3, #1
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	3b01      	subs	r3, #1
 8004b96:	b29a      	uxth	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f003 0301 	and.w	r3, r3, #1
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d148      	bne.n	8004c40 <HAL_SPI_TransmitReceive+0x3b4>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d042      	beq.n	8004c40 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d923      	bls.n	8004c0e <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68da      	ldr	r2, [r3, #12]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd0:	b292      	uxth	r2, r2
 8004bd2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd8:	1c9a      	adds	r2, r3, #2
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	3b02      	subs	r3, #2
 8004be8:	b29a      	uxth	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d81f      	bhi.n	8004c3c <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	685a      	ldr	r2, [r3, #4]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c0a:	605a      	str	r2, [r3, #4]
 8004c0c:	e016      	b.n	8004c3c <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f103 020c 	add.w	r2, r3, #12
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1a:	7812      	ldrb	r2, [r2, #0]
 8004c1c:	b2d2      	uxtb	r2, r2
 8004c1e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c24:	1c5a      	adds	r2, r3, #1
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	3b01      	subs	r3, #1
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004c40:	f7fd fb42 	bl	80022c8 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d803      	bhi.n	8004c58 <HAL_SPI_TransmitReceive+0x3cc>
 8004c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c56:	d102      	bne.n	8004c5e <HAL_SPI_TransmitReceive+0x3d2>
 8004c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d107      	bne.n	8004c6e <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004c6c:	e026      	b.n	8004cbc <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f47f af57 	bne.w	8004b28 <HAL_SPI_TransmitReceive+0x29c>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	f47f af50 	bne.w	8004b28 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c88:	69fa      	ldr	r2, [r7, #28]
 8004c8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f000 f93d 	bl	8004f0c <SPI_EndRxTxTransaction>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d005      	beq.n	8004ca4 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2220      	movs	r2, #32
 8004ca2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d003      	beq.n	8004cb4 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cb2:	e003      	b.n	8004cbc <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004cc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3728      	adds	r7, #40	; 0x28
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b088      	sub	sp, #32
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	603b      	str	r3, [r7, #0]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ce0:	f7fd faf2 	bl	80022c8 <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce8:	1a9b      	subs	r3, r3, r2
 8004cea:	683a      	ldr	r2, [r7, #0]
 8004cec:	4413      	add	r3, r2
 8004cee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004cf0:	f7fd faea 	bl	80022c8 <HAL_GetTick>
 8004cf4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004cf6:	4b39      	ldr	r3, [pc, #228]	; (8004ddc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	015b      	lsls	r3, r3, #5
 8004cfc:	0d1b      	lsrs	r3, r3, #20
 8004cfe:	69fa      	ldr	r2, [r7, #28]
 8004d00:	fb02 f303 	mul.w	r3, r2, r3
 8004d04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d06:	e054      	b.n	8004db2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d0e:	d050      	beq.n	8004db2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d10:	f7fd fada 	bl	80022c8 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	69fa      	ldr	r2, [r7, #28]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d902      	bls.n	8004d26 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d13d      	bne.n	8004da2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	685a      	ldr	r2, [r3, #4]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d3e:	d111      	bne.n	8004d64 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d48:	d004      	beq.n	8004d54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d52:	d107      	bne.n	8004d64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d6c:	d10f      	bne.n	8004d8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d7c:	601a      	str	r2, [r3, #0]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e017      	b.n	8004dd2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d101      	bne.n	8004dac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004da8:	2300      	movs	r3, #0
 8004daa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	3b01      	subs	r3, #1
 8004db0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	689a      	ldr	r2, [r3, #8]
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	4013      	ands	r3, r2
 8004dbc:	68ba      	ldr	r2, [r7, #8]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	bf0c      	ite	eq
 8004dc2:	2301      	moveq	r3, #1
 8004dc4:	2300      	movne	r3, #0
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	461a      	mov	r2, r3
 8004dca:	79fb      	ldrb	r3, [r7, #7]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d19b      	bne.n	8004d08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3720      	adds	r7, #32
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	20000068 	.word	0x20000068

08004de0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b08a      	sub	sp, #40	; 0x28
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
 8004dec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004dee:	2300      	movs	r3, #0
 8004df0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004df2:	f7fd fa69 	bl	80022c8 <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfa:	1a9b      	subs	r3, r3, r2
 8004dfc:	683a      	ldr	r2, [r7, #0]
 8004dfe:	4413      	add	r3, r2
 8004e00:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004e02:	f7fd fa61 	bl	80022c8 <HAL_GetTick>
 8004e06:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	330c      	adds	r3, #12
 8004e0e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004e10:	4b3d      	ldr	r3, [pc, #244]	; (8004f08 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	4613      	mov	r3, r2
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	4413      	add	r3, r2
 8004e1a:	00da      	lsls	r2, r3, #3
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	0d1b      	lsrs	r3, r3, #20
 8004e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e22:	fb02 f303 	mul.w	r3, r2, r3
 8004e26:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004e28:	e060      	b.n	8004eec <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004e30:	d107      	bne.n	8004e42 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d104      	bne.n	8004e42 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004e40:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e48:	d050      	beq.n	8004eec <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e4a:	f7fd fa3d 	bl	80022c8 <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	6a3b      	ldr	r3, [r7, #32]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d902      	bls.n	8004e60 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d13d      	bne.n	8004edc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	685a      	ldr	r2, [r3, #4]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e6e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e78:	d111      	bne.n	8004e9e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e82:	d004      	beq.n	8004e8e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e8c:	d107      	bne.n	8004e9e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e9c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ea6:	d10f      	bne.n	8004ec8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004eb6:	601a      	str	r2, [r3, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ec6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e010      	b.n	8004efe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	689a      	ldr	r2, [r3, #8]
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d196      	bne.n	8004e2a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3728      	adds	r7, #40	; 0x28
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	20000068 	.word	0x20000068

08004f0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b086      	sub	sp, #24
 8004f10:	af02      	add	r7, sp, #8
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	9300      	str	r3, [sp, #0]
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	f7ff ff5b 	bl	8004de0 <SPI_WaitFifoStateUntilTimeout>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d007      	beq.n	8004f40 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f34:	f043 0220 	orr.w	r2, r3, #32
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e027      	b.n	8004f90 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	9300      	str	r3, [sp, #0]
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	2200      	movs	r2, #0
 8004f48:	2180      	movs	r1, #128	; 0x80
 8004f4a:	68f8      	ldr	r0, [r7, #12]
 8004f4c:	f7ff fec0 	bl	8004cd0 <SPI_WaitFlagStateUntilTimeout>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d007      	beq.n	8004f66 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f5a:	f043 0220 	orr.w	r2, r3, #32
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e014      	b.n	8004f90 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	9300      	str	r3, [sp, #0]
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	f7ff ff34 	bl	8004de0 <SPI_WaitFifoStateUntilTimeout>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d007      	beq.n	8004f8e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f82:	f043 0220 	orr.w	r2, r3, #32
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e000      	b.n	8004f90 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e049      	b.n	800503e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d106      	bne.n	8004fc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 f841 	bl	8005046 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2202      	movs	r2, #2
 8004fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	3304      	adds	r3, #4
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	4610      	mov	r0, r2
 8004fd8:	f000 f9da 	bl	8005390 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3708      	adds	r7, #8
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005046:	b480      	push	{r7}
 8005048:	b083      	sub	sp, #12
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800504e:	bf00      	nop
 8005050:	370c      	adds	r7, #12
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
	...

0800505c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800505c:	b480      	push	{r7}
 800505e:	b085      	sub	sp, #20
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800506a:	b2db      	uxtb	r3, r3
 800506c:	2b01      	cmp	r3, #1
 800506e:	d001      	beq.n	8005074 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e04f      	b.n	8005114 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2202      	movs	r2, #2
 8005078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68da      	ldr	r2, [r3, #12]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f042 0201 	orr.w	r2, r2, #1
 800508a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a23      	ldr	r2, [pc, #140]	; (8005120 <HAL_TIM_Base_Start_IT+0xc4>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d01d      	beq.n	80050d2 <HAL_TIM_Base_Start_IT+0x76>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800509e:	d018      	beq.n	80050d2 <HAL_TIM_Base_Start_IT+0x76>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a1f      	ldr	r2, [pc, #124]	; (8005124 <HAL_TIM_Base_Start_IT+0xc8>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d013      	beq.n	80050d2 <HAL_TIM_Base_Start_IT+0x76>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a1e      	ldr	r2, [pc, #120]	; (8005128 <HAL_TIM_Base_Start_IT+0xcc>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d00e      	beq.n	80050d2 <HAL_TIM_Base_Start_IT+0x76>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a1c      	ldr	r2, [pc, #112]	; (800512c <HAL_TIM_Base_Start_IT+0xd0>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d009      	beq.n	80050d2 <HAL_TIM_Base_Start_IT+0x76>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a1b      	ldr	r2, [pc, #108]	; (8005130 <HAL_TIM_Base_Start_IT+0xd4>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d004      	beq.n	80050d2 <HAL_TIM_Base_Start_IT+0x76>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a19      	ldr	r2, [pc, #100]	; (8005134 <HAL_TIM_Base_Start_IT+0xd8>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d115      	bne.n	80050fe <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	689a      	ldr	r2, [r3, #8]
 80050d8:	4b17      	ldr	r3, [pc, #92]	; (8005138 <HAL_TIM_Base_Start_IT+0xdc>)
 80050da:	4013      	ands	r3, r2
 80050dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2b06      	cmp	r3, #6
 80050e2:	d015      	beq.n	8005110 <HAL_TIM_Base_Start_IT+0xb4>
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050ea:	d011      	beq.n	8005110 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f042 0201 	orr.w	r2, r2, #1
 80050fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050fc:	e008      	b.n	8005110 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f042 0201 	orr.w	r2, r2, #1
 800510c:	601a      	str	r2, [r3, #0]
 800510e:	e000      	b.n	8005112 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005110:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr
 8005120:	40012c00 	.word	0x40012c00
 8005124:	40000400 	.word	0x40000400
 8005128:	40000800 	.word	0x40000800
 800512c:	40000c00 	.word	0x40000c00
 8005130:	40013400 	.word	0x40013400
 8005134:	40014000 	.word	0x40014000
 8005138:	00010007 	.word	0x00010007

0800513c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	f003 0302 	and.w	r3, r3, #2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d020      	beq.n	80051a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f003 0302 	and.w	r3, r3, #2
 8005164:	2b00      	cmp	r3, #0
 8005166:	d01b      	beq.n	80051a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f06f 0202 	mvn.w	r2, #2
 8005170:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2201      	movs	r2, #1
 8005176:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	f003 0303 	and.w	r3, r3, #3
 8005182:	2b00      	cmp	r3, #0
 8005184:	d003      	beq.n	800518e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f8e4 	bl	8005354 <HAL_TIM_IC_CaptureCallback>
 800518c:	e005      	b.n	800519a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 f8d6 	bl	8005340 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 f8e7 	bl	8005368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	f003 0304 	and.w	r3, r3, #4
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d020      	beq.n	80051ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f003 0304 	and.w	r3, r3, #4
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d01b      	beq.n	80051ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f06f 0204 	mvn.w	r2, #4
 80051bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2202      	movs	r2, #2
 80051c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d003      	beq.n	80051da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f8be 	bl	8005354 <HAL_TIM_IC_CaptureCallback>
 80051d8:	e005      	b.n	80051e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 f8b0 	bl	8005340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 f8c1 	bl	8005368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	f003 0308 	and.w	r3, r3, #8
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d020      	beq.n	8005238 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f003 0308 	and.w	r3, r3, #8
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d01b      	beq.n	8005238 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f06f 0208 	mvn.w	r2, #8
 8005208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2204      	movs	r2, #4
 800520e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	69db      	ldr	r3, [r3, #28]
 8005216:	f003 0303 	and.w	r3, r3, #3
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 f898 	bl	8005354 <HAL_TIM_IC_CaptureCallback>
 8005224:	e005      	b.n	8005232 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 f88a 	bl	8005340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 f89b 	bl	8005368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	f003 0310 	and.w	r3, r3, #16
 800523e:	2b00      	cmp	r3, #0
 8005240:	d020      	beq.n	8005284 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f003 0310 	and.w	r3, r3, #16
 8005248:	2b00      	cmp	r3, #0
 800524a:	d01b      	beq.n	8005284 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f06f 0210 	mvn.w	r2, #16
 8005254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2208      	movs	r2, #8
 800525a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	69db      	ldr	r3, [r3, #28]
 8005262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005266:	2b00      	cmp	r3, #0
 8005268:	d003      	beq.n	8005272 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 f872 	bl	8005354 <HAL_TIM_IC_CaptureCallback>
 8005270:	e005      	b.n	800527e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 f864 	bl	8005340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 f875 	bl	8005368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00c      	beq.n	80052a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	2b00      	cmp	r3, #0
 8005296:	d007      	beq.n	80052a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f06f 0201 	mvn.w	r2, #1
 80052a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f7fc fe48 	bl	8001f38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00c      	beq.n	80052cc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d007      	beq.n	80052cc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 f906 	bl	80054d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00c      	beq.n	80052f0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d007      	beq.n	80052f0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80052e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 f8fe 	bl	80054ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00c      	beq.n	8005314 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005300:	2b00      	cmp	r3, #0
 8005302:	d007      	beq.n	8005314 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800530c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 f834 	bl	800537c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	f003 0320 	and.w	r3, r3, #32
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00c      	beq.n	8005338 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f003 0320 	and.w	r3, r3, #32
 8005324:	2b00      	cmp	r3, #0
 8005326:	d007      	beq.n	8005338 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f06f 0220 	mvn.w	r2, #32
 8005330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f8c6 	bl	80054c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005338:	bf00      	nop
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005348:	bf00      	nop
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800535c:	bf00      	nop
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005384:	bf00      	nop
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005390:	b480      	push	{r7}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a40      	ldr	r2, [pc, #256]	; (80054a4 <TIM_Base_SetConfig+0x114>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d013      	beq.n	80053d0 <TIM_Base_SetConfig+0x40>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ae:	d00f      	beq.n	80053d0 <TIM_Base_SetConfig+0x40>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a3d      	ldr	r2, [pc, #244]	; (80054a8 <TIM_Base_SetConfig+0x118>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d00b      	beq.n	80053d0 <TIM_Base_SetConfig+0x40>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a3c      	ldr	r2, [pc, #240]	; (80054ac <TIM_Base_SetConfig+0x11c>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d007      	beq.n	80053d0 <TIM_Base_SetConfig+0x40>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a3b      	ldr	r2, [pc, #236]	; (80054b0 <TIM_Base_SetConfig+0x120>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d003      	beq.n	80053d0 <TIM_Base_SetConfig+0x40>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a3a      	ldr	r2, [pc, #232]	; (80054b4 <TIM_Base_SetConfig+0x124>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d108      	bne.n	80053e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	4313      	orrs	r3, r2
 80053e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a2f      	ldr	r2, [pc, #188]	; (80054a4 <TIM_Base_SetConfig+0x114>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d01f      	beq.n	800542a <TIM_Base_SetConfig+0x9a>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053f0:	d01b      	beq.n	800542a <TIM_Base_SetConfig+0x9a>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a2c      	ldr	r2, [pc, #176]	; (80054a8 <TIM_Base_SetConfig+0x118>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d017      	beq.n	800542a <TIM_Base_SetConfig+0x9a>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a2b      	ldr	r2, [pc, #172]	; (80054ac <TIM_Base_SetConfig+0x11c>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d013      	beq.n	800542a <TIM_Base_SetConfig+0x9a>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a2a      	ldr	r2, [pc, #168]	; (80054b0 <TIM_Base_SetConfig+0x120>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d00f      	beq.n	800542a <TIM_Base_SetConfig+0x9a>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a29      	ldr	r2, [pc, #164]	; (80054b4 <TIM_Base_SetConfig+0x124>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d00b      	beq.n	800542a <TIM_Base_SetConfig+0x9a>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a28      	ldr	r2, [pc, #160]	; (80054b8 <TIM_Base_SetConfig+0x128>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d007      	beq.n	800542a <TIM_Base_SetConfig+0x9a>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a27      	ldr	r2, [pc, #156]	; (80054bc <TIM_Base_SetConfig+0x12c>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d003      	beq.n	800542a <TIM_Base_SetConfig+0x9a>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a26      	ldr	r2, [pc, #152]	; (80054c0 <TIM_Base_SetConfig+0x130>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d108      	bne.n	800543c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005430:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	4313      	orrs	r3, r2
 800543a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	4313      	orrs	r3, r2
 8005448:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	689a      	ldr	r2, [r3, #8]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a10      	ldr	r2, [pc, #64]	; (80054a4 <TIM_Base_SetConfig+0x114>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d00f      	beq.n	8005488 <TIM_Base_SetConfig+0xf8>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a12      	ldr	r2, [pc, #72]	; (80054b4 <TIM_Base_SetConfig+0x124>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d00b      	beq.n	8005488 <TIM_Base_SetConfig+0xf8>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a11      	ldr	r2, [pc, #68]	; (80054b8 <TIM_Base_SetConfig+0x128>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d007      	beq.n	8005488 <TIM_Base_SetConfig+0xf8>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a10      	ldr	r2, [pc, #64]	; (80054bc <TIM_Base_SetConfig+0x12c>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d003      	beq.n	8005488 <TIM_Base_SetConfig+0xf8>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a0f      	ldr	r2, [pc, #60]	; (80054c0 <TIM_Base_SetConfig+0x130>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d103      	bne.n	8005490 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	691a      	ldr	r2, [r3, #16]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	615a      	str	r2, [r3, #20]
}
 8005496:	bf00      	nop
 8005498:	3714      	adds	r7, #20
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	40012c00 	.word	0x40012c00
 80054a8:	40000400 	.word	0x40000400
 80054ac:	40000800 	.word	0x40000800
 80054b0:	40000c00 	.word	0x40000c00
 80054b4:	40013400 	.word	0x40013400
 80054b8:	40014000 	.word	0x40014000
 80054bc:	40014400 	.word	0x40014400
 80054c0:	40014800 	.word	0x40014800

080054c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054cc:	bf00      	nop
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054e0:	bf00      	nop
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80054f4:	bf00      	nop
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <__itoa>:
 8005500:	1e93      	subs	r3, r2, #2
 8005502:	2b22      	cmp	r3, #34	; 0x22
 8005504:	b510      	push	{r4, lr}
 8005506:	460c      	mov	r4, r1
 8005508:	d904      	bls.n	8005514 <__itoa+0x14>
 800550a:	2300      	movs	r3, #0
 800550c:	700b      	strb	r3, [r1, #0]
 800550e:	461c      	mov	r4, r3
 8005510:	4620      	mov	r0, r4
 8005512:	bd10      	pop	{r4, pc}
 8005514:	2a0a      	cmp	r2, #10
 8005516:	d109      	bne.n	800552c <__itoa+0x2c>
 8005518:	2800      	cmp	r0, #0
 800551a:	da07      	bge.n	800552c <__itoa+0x2c>
 800551c:	232d      	movs	r3, #45	; 0x2d
 800551e:	700b      	strb	r3, [r1, #0]
 8005520:	4240      	negs	r0, r0
 8005522:	2101      	movs	r1, #1
 8005524:	4421      	add	r1, r4
 8005526:	f000 f805 	bl	8005534 <__utoa>
 800552a:	e7f1      	b.n	8005510 <__itoa+0x10>
 800552c:	2100      	movs	r1, #0
 800552e:	e7f9      	b.n	8005524 <__itoa+0x24>

08005530 <itoa>:
 8005530:	f7ff bfe6 	b.w	8005500 <__itoa>

08005534 <__utoa>:
 8005534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005536:	4c1f      	ldr	r4, [pc, #124]	; (80055b4 <__utoa+0x80>)
 8005538:	b08b      	sub	sp, #44	; 0x2c
 800553a:	4605      	mov	r5, r0
 800553c:	460b      	mov	r3, r1
 800553e:	466e      	mov	r6, sp
 8005540:	f104 0c20 	add.w	ip, r4, #32
 8005544:	6820      	ldr	r0, [r4, #0]
 8005546:	6861      	ldr	r1, [r4, #4]
 8005548:	4637      	mov	r7, r6
 800554a:	c703      	stmia	r7!, {r0, r1}
 800554c:	3408      	adds	r4, #8
 800554e:	4564      	cmp	r4, ip
 8005550:	463e      	mov	r6, r7
 8005552:	d1f7      	bne.n	8005544 <__utoa+0x10>
 8005554:	7921      	ldrb	r1, [r4, #4]
 8005556:	7139      	strb	r1, [r7, #4]
 8005558:	1e91      	subs	r1, r2, #2
 800555a:	6820      	ldr	r0, [r4, #0]
 800555c:	6038      	str	r0, [r7, #0]
 800555e:	2922      	cmp	r1, #34	; 0x22
 8005560:	f04f 0100 	mov.w	r1, #0
 8005564:	d904      	bls.n	8005570 <__utoa+0x3c>
 8005566:	7019      	strb	r1, [r3, #0]
 8005568:	460b      	mov	r3, r1
 800556a:	4618      	mov	r0, r3
 800556c:	b00b      	add	sp, #44	; 0x2c
 800556e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005570:	1e58      	subs	r0, r3, #1
 8005572:	4684      	mov	ip, r0
 8005574:	fbb5 f7f2 	udiv	r7, r5, r2
 8005578:	fb02 5617 	mls	r6, r2, r7, r5
 800557c:	3628      	adds	r6, #40	; 0x28
 800557e:	446e      	add	r6, sp
 8005580:	460c      	mov	r4, r1
 8005582:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8005586:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800558a:	462e      	mov	r6, r5
 800558c:	42b2      	cmp	r2, r6
 800558e:	f101 0101 	add.w	r1, r1, #1
 8005592:	463d      	mov	r5, r7
 8005594:	d9ee      	bls.n	8005574 <__utoa+0x40>
 8005596:	2200      	movs	r2, #0
 8005598:	545a      	strb	r2, [r3, r1]
 800559a:	1919      	adds	r1, r3, r4
 800559c:	1aa5      	subs	r5, r4, r2
 800559e:	42aa      	cmp	r2, r5
 80055a0:	dae3      	bge.n	800556a <__utoa+0x36>
 80055a2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80055a6:	780e      	ldrb	r6, [r1, #0]
 80055a8:	7006      	strb	r6, [r0, #0]
 80055aa:	3201      	adds	r2, #1
 80055ac:	f801 5901 	strb.w	r5, [r1], #-1
 80055b0:	e7f4      	b.n	800559c <__utoa+0x68>
 80055b2:	bf00      	nop
 80055b4:	08005bac 	.word	0x08005bac

080055b8 <memset>:
 80055b8:	4402      	add	r2, r0
 80055ba:	4603      	mov	r3, r0
 80055bc:	4293      	cmp	r3, r2
 80055be:	d100      	bne.n	80055c2 <memset+0xa>
 80055c0:	4770      	bx	lr
 80055c2:	f803 1b01 	strb.w	r1, [r3], #1
 80055c6:	e7f9      	b.n	80055bc <memset+0x4>

080055c8 <__libc_init_array>:
 80055c8:	b570      	push	{r4, r5, r6, lr}
 80055ca:	4d0d      	ldr	r5, [pc, #52]	; (8005600 <__libc_init_array+0x38>)
 80055cc:	4c0d      	ldr	r4, [pc, #52]	; (8005604 <__libc_init_array+0x3c>)
 80055ce:	1b64      	subs	r4, r4, r5
 80055d0:	10a4      	asrs	r4, r4, #2
 80055d2:	2600      	movs	r6, #0
 80055d4:	42a6      	cmp	r6, r4
 80055d6:	d109      	bne.n	80055ec <__libc_init_array+0x24>
 80055d8:	4d0b      	ldr	r5, [pc, #44]	; (8005608 <__libc_init_array+0x40>)
 80055da:	4c0c      	ldr	r4, [pc, #48]	; (800560c <__libc_init_array+0x44>)
 80055dc:	f000 f818 	bl	8005610 <_init>
 80055e0:	1b64      	subs	r4, r4, r5
 80055e2:	10a4      	asrs	r4, r4, #2
 80055e4:	2600      	movs	r6, #0
 80055e6:	42a6      	cmp	r6, r4
 80055e8:	d105      	bne.n	80055f6 <__libc_init_array+0x2e>
 80055ea:	bd70      	pop	{r4, r5, r6, pc}
 80055ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80055f0:	4798      	blx	r3
 80055f2:	3601      	adds	r6, #1
 80055f4:	e7ee      	b.n	80055d4 <__libc_init_array+0xc>
 80055f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80055fa:	4798      	blx	r3
 80055fc:	3601      	adds	r6, #1
 80055fe:	e7f2      	b.n	80055e6 <__libc_init_array+0x1e>
 8005600:	08005bd4 	.word	0x08005bd4
 8005604:	08005bd4 	.word	0x08005bd4
 8005608:	08005bd4 	.word	0x08005bd4
 800560c:	08005bd8 	.word	0x08005bd8

08005610 <_init>:
 8005610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005612:	bf00      	nop
 8005614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005616:	bc08      	pop	{r3}
 8005618:	469e      	mov	lr, r3
 800561a:	4770      	bx	lr

0800561c <_fini>:
 800561c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800561e:	bf00      	nop
 8005620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005622:	bc08      	pop	{r3}
 8005624:	469e      	mov	lr, r3
 8005626:	4770      	bx	lr
