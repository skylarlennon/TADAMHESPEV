
lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004874  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000594  08004a30  08004a30  00014a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fc4  08004fc4  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004fc4  08004fc4  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004fc4  08004fc4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fc4  08004fc4  00014fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fc8  08004fc8  00014fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004fcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  20000074  08005040  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08005040  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001139c  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025f1  00000000  00000000  00031483  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010d0  00000000  00000000  00033a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cfa  00000000  00000000  00034b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ae3e  00000000  00000000  00035842  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013087  00000000  00000000  00060680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00109a9b  00000000  00000000  00073707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004604  00000000  00000000  0017d1a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  001817a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000074 	.word	0x20000074
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08004a18 	.word	0x08004a18

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000078 	.word	0x20000078
 80001f8:	08004a18 	.word	0x08004a18

080001fc <uint16_to_bytes>:
#include "stm32l4xx_hal.h"
#include <stdlib.h>

// Probably going to move these to a different file, but for now
void uint16_to_bytes(uint16_t in, uint8_t *out)
{
 80001fc:	b480      	push	{r7}
 80001fe:	b083      	sub	sp, #12
 8000200:	af00      	add	r7, sp, #0
 8000202:	4603      	mov	r3, r0
 8000204:	6039      	str	r1, [r7, #0]
 8000206:	80fb      	strh	r3, [r7, #6]
	out[0] = (in >> 8) & 0xFF;
 8000208:	88fb      	ldrh	r3, [r7, #6]
 800020a:	0a1b      	lsrs	r3, r3, #8
 800020c:	b29b      	uxth	r3, r3
 800020e:	b2da      	uxtb	r2, r3
 8000210:	683b      	ldr	r3, [r7, #0]
 8000212:	701a      	strb	r2, [r3, #0]
	out[1] = in & 0xFF;
 8000214:	683b      	ldr	r3, [r7, #0]
 8000216:	3301      	adds	r3, #1
 8000218:	88fa      	ldrh	r2, [r7, #6]
 800021a:	b2d2      	uxtb	r2, r2
 800021c:	701a      	strb	r2, [r3, #0]
}
 800021e:	bf00      	nop
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr
	...

0800022c <LCD_reset>:
	HX8357_DISPON, 0x80 +  50/5, // Main screen turn on, delay 50 ms
	0,                           // END OF COMMAND LIST
  };

void LCD_reset()
{
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8000230:	2201      	movs	r2, #1
 8000232:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000236:	480d      	ldr	r0, [pc, #52]	; (800026c <LCD_reset+0x40>)
 8000238:	f001 fd4a 	bl	8001cd0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800023c:	2064      	movs	r0, #100	; 0x64
 800023e:	f001 faaf 	bl	80017a0 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8000242:	2200      	movs	r2, #0
 8000244:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000248:	4808      	ldr	r0, [pc, #32]	; (800026c <LCD_reset+0x40>)
 800024a:	f001 fd41 	bl	8001cd0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800024e:	2064      	movs	r0, #100	; 0x64
 8000250:	f001 faa6 	bl	80017a0 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8000254:	2201      	movs	r2, #1
 8000256:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800025a:	4804      	ldr	r0, [pc, #16]	; (800026c <LCD_reset+0x40>)
 800025c:	f001 fd38 	bl	8001cd0 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000260:	20c8      	movs	r0, #200	; 0xc8
 8000262:	f001 fa9d 	bl	80017a0 <HAL_Delay>
}
 8000266:	bf00      	nop
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	48001400 	.word	0x48001400

08000270 <LCD_writeCommand>:

HAL_StatusTypeDef LCD_writeCommand(SPI_HandleTypeDef* spi, uint8_t cmd)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b086      	sub	sp, #24
 8000274:	af02      	add	r7, sp, #8
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	460b      	mov	r3, r1
 800027a:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef result;
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 800027c:	2200      	movs	r2, #0
 800027e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000282:	480c      	ldr	r0, [pc, #48]	; (80002b4 <LCD_writeCommand+0x44>)
 8000284:	f001 fd24 	bl	8001cd0 <HAL_GPIO_WritePin>
	uint8_t buf[1];
	result = HAL_SPI_TransmitReceive(spi, &cmd, &buf[0], 1, 100);
 8000288:	f107 020c 	add.w	r2, r7, #12
 800028c:	1cf9      	adds	r1, r7, #3
 800028e:	2364      	movs	r3, #100	; 0x64
 8000290:	9300      	str	r3, [sp, #0]
 8000292:	2301      	movs	r3, #1
 8000294:	6878      	ldr	r0, [r7, #4]
 8000296:	f003 fd59 	bl	8003d4c <HAL_SPI_TransmitReceive>
 800029a:	4603      	mov	r3, r0
 800029c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 800029e:	2201      	movs	r2, #1
 80002a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002a4:	4803      	ldr	r0, [pc, #12]	; (80002b4 <LCD_writeCommand+0x44>)
 80002a6:	f001 fd13 	bl	8001cd0 <HAL_GPIO_WritePin>
	return result;
 80002aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80002ac:	4618      	mov	r0, r3
 80002ae:	3710      	adds	r7, #16
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	48001400 	.word	0x48001400

080002b8 <LCD_startWrite>:

void LCD_startWrite()
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 80002bc:	2200      	movs	r2, #0
 80002be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002c2:	4802      	ldr	r0, [pc, #8]	; (80002cc <LCD_startWrite+0x14>)
 80002c4:	f001 fd04 	bl	8001cd0 <HAL_GPIO_WritePin>
}
 80002c8:	bf00      	nop
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	48001400 	.word	0x48001400

080002d0 <LCD_endWrite>:

void LCD_endWrite()
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80002d4:	2201      	movs	r2, #1
 80002d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002da:	4802      	ldr	r0, [pc, #8]	; (80002e4 <LCD_endWrite+0x14>)
 80002dc:	f001 fcf8 	bl	8001cd0 <HAL_GPIO_WritePin>
}
 80002e0:	bf00      	nop
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	48001400 	.word	0x48001400

080002e8 <LCD_begin>:

int LCD_begin(SPI_HandleTypeDef* spi)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b084      	sub	sp, #16
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
	LCD_reset();
 80002f0:	f7ff ff9c 	bl	800022c <LCD_reset>
	LCD_startWrite();
 80002f4:	f7ff ffe0 	bl	80002b8 <LCD_startWrite>
	uint8_t *addr = init;
 80002f8:	4b26      	ldr	r3, [pc, #152]	; (8000394 <LCD_begin+0xac>)
 80002fa:	60fb      	str	r3, [r7, #12]
	uint8_t cmd, x, numArgs;
	HAL_StatusTypeDef result;
	while((cmd = *(addr++)) > 0) // '0' command ends list
 80002fc:	e03b      	b.n	8000376 <LCD_begin+0x8e>
	{
		if (cmd != 0xFF) // '255' is ignored
 80002fe:	7abb      	ldrb	r3, [r7, #10]
 8000300:	2bff      	cmp	r3, #255	; 0xff
 8000302:	d00d      	beq.n	8000320 <LCD_begin+0x38>
		{
			result = LCD_writeCommand(spi, cmd);
 8000304:	7abb      	ldrb	r3, [r7, #10]
 8000306:	4619      	mov	r1, r3
 8000308:	6878      	ldr	r0, [r7, #4]
 800030a:	f7ff ffb1 	bl	8000270 <LCD_writeCommand>
 800030e:	4603      	mov	r3, r0
 8000310:	727b      	strb	r3, [r7, #9]
			if (result != HAL_OK)
 8000312:	7a7b      	ldrb	r3, [r7, #9]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d003      	beq.n	8000320 <LCD_begin+0x38>
			{
				LCD_endWrite();
 8000318:	f7ff ffda 	bl	80002d0 <LCD_endWrite>
				return 0;
 800031c:	2300      	movs	r3, #0
 800031e:	e035      	b.n	800038c <LCD_begin+0xa4>
			}
		}
		x = *(addr++);
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	1c5a      	adds	r2, r3, #1
 8000324:	60fa      	str	r2, [r7, #12]
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	723b      	strb	r3, [r7, #8]
		numArgs = x & 0x7F;
 800032a:	7a3b      	ldrb	r3, [r7, #8]
 800032c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000330:	72fb      	strb	r3, [r7, #11]
		if (x & 0x80) // If high bit set...
 8000332:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8000336:	2b00      	cmp	r3, #0
 8000338:	da18      	bge.n	800036c <LCD_begin+0x84>
		{
			HAL_Delay(numArgs * 5); // numArgs is actually a delay time (5ms units)
 800033a:	7afa      	ldrb	r2, [r7, #11]
 800033c:	4613      	mov	r3, r2
 800033e:	009b      	lsls	r3, r3, #2
 8000340:	4413      	add	r3, r2
 8000342:	4618      	mov	r0, r3
 8000344:	f001 fa2c 	bl	80017a0 <HAL_Delay>
 8000348:	e015      	b.n	8000376 <LCD_begin+0x8e>
		}
		else // Otherwise, issue args to command...
		{
			while (numArgs--)
			{
				result = HAL_SPI_Transmit(spi, addr++, 1, 100);
 800034a:	68f9      	ldr	r1, [r7, #12]
 800034c:	1c4b      	adds	r3, r1, #1
 800034e:	60fb      	str	r3, [r7, #12]
 8000350:	2364      	movs	r3, #100	; 0x64
 8000352:	2201      	movs	r2, #1
 8000354:	6878      	ldr	r0, [r7, #4]
 8000356:	f003 fb84 	bl	8003a62 <HAL_SPI_Transmit>
 800035a:	4603      	mov	r3, r0
 800035c:	727b      	strb	r3, [r7, #9]
				if (result != HAL_OK)
 800035e:	7a7b      	ldrb	r3, [r7, #9]
 8000360:	2b00      	cmp	r3, #0
 8000362:	d003      	beq.n	800036c <LCD_begin+0x84>
				{
					LCD_endWrite();
 8000364:	f7ff ffb4 	bl	80002d0 <LCD_endWrite>
					return 0;
 8000368:	2300      	movs	r3, #0
 800036a:	e00f      	b.n	800038c <LCD_begin+0xa4>
			while (numArgs--)
 800036c:	7afb      	ldrb	r3, [r7, #11]
 800036e:	1e5a      	subs	r2, r3, #1
 8000370:	72fa      	strb	r2, [r7, #11]
 8000372:	2b00      	cmp	r3, #0
 8000374:	d1e9      	bne.n	800034a <LCD_begin+0x62>
	while((cmd = *(addr++)) > 0) // '0' command ends list
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	1c5a      	adds	r2, r3, #1
 800037a:	60fa      	str	r2, [r7, #12]
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	72bb      	strb	r3, [r7, #10]
 8000380:	7abb      	ldrb	r3, [r7, #10]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d1bb      	bne.n	80002fe <LCD_begin+0x16>
				}
			}
		}
	}
	LCD_endWrite();
 8000386:	f7ff ffa3 	bl	80002d0 <LCD_endWrite>
	return 1;
 800038a:	2301      	movs	r3, #1
}
 800038c:	4618      	mov	r0, r3
 800038e:	3710      	adds	r7, #16
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}
 8000394:	20000000 	.word	0x20000000

08000398 <LCD_setAddrWindow>:
	LCD_endWrite();
	return result == HAL_OK;
}

int LCD_setAddrWindow(SPI_HandleTypeDef* spi, uint16_t x1, uint16_t y1, uint16_t w, uint16_t h)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b086      	sub	sp, #24
 800039c:	af00      	add	r7, sp, #0
 800039e:	60f8      	str	r0, [r7, #12]
 80003a0:	4608      	mov	r0, r1
 80003a2:	4611      	mov	r1, r2
 80003a4:	461a      	mov	r2, r3
 80003a6:	4603      	mov	r3, r0
 80003a8:	817b      	strh	r3, [r7, #10]
 80003aa:	460b      	mov	r3, r1
 80003ac:	813b      	strh	r3, [r7, #8]
 80003ae:	4613      	mov	r3, r2
 80003b0:	80fb      	strh	r3, [r7, #6]
	uint16_t x2 = x1 + w - 1;
 80003b2:	897a      	ldrh	r2, [r7, #10]
 80003b4:	88fb      	ldrh	r3, [r7, #6]
 80003b6:	4413      	add	r3, r2
 80003b8:	b29b      	uxth	r3, r3
 80003ba:	3b01      	subs	r3, #1
 80003bc:	82fb      	strh	r3, [r7, #22]
	uint16_t y2 = y1 + h - 1;
 80003be:	893a      	ldrh	r2, [r7, #8]
 80003c0:	8c3b      	ldrh	r3, [r7, #32]
 80003c2:	4413      	add	r3, r2
 80003c4:	b29b      	uxth	r3, r3
 80003c6:	3b01      	subs	r3, #1
 80003c8:	82bb      	strh	r3, [r7, #20]
	uint8_t buf[2];

	LCD_startWrite();
 80003ca:	f7ff ff75 	bl	80002b8 <LCD_startWrite>
	LCD_writeCommand(spi, HX8357_CASET); // Column address set
 80003ce:	212a      	movs	r1, #42	; 0x2a
 80003d0:	68f8      	ldr	r0, [r7, #12]
 80003d2:	f7ff ff4d 	bl	8000270 <LCD_writeCommand>

	uint16_to_bytes(x1, buf);
 80003d6:	f107 0210 	add.w	r2, r7, #16
 80003da:	897b      	ldrh	r3, [r7, #10]
 80003dc:	4611      	mov	r1, r2
 80003de:	4618      	mov	r0, r3
 80003e0:	f7ff ff0c 	bl	80001fc <uint16_to_bytes>
	HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 80003e4:	f107 0110 	add.w	r1, r7, #16
 80003e8:	2364      	movs	r3, #100	; 0x64
 80003ea:	2202      	movs	r2, #2
 80003ec:	68f8      	ldr	r0, [r7, #12]
 80003ee:	f003 fb38 	bl	8003a62 <HAL_SPI_Transmit>

	uint16_to_bytes(x2, buf);
 80003f2:	f107 0210 	add.w	r2, r7, #16
 80003f6:	8afb      	ldrh	r3, [r7, #22]
 80003f8:	4611      	mov	r1, r2
 80003fa:	4618      	mov	r0, r3
 80003fc:	f7ff fefe 	bl	80001fc <uint16_to_bytes>
	HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 8000400:	f107 0110 	add.w	r1, r7, #16
 8000404:	2364      	movs	r3, #100	; 0x64
 8000406:	2202      	movs	r2, #2
 8000408:	68f8      	ldr	r0, [r7, #12]
 800040a:	f003 fb2a 	bl	8003a62 <HAL_SPI_Transmit>

	LCD_writeCommand(spi, HX8357_PASET); // Row address set
 800040e:	212b      	movs	r1, #43	; 0x2b
 8000410:	68f8      	ldr	r0, [r7, #12]
 8000412:	f7ff ff2d 	bl	8000270 <LCD_writeCommand>

	uint16_to_bytes(y1, buf);
 8000416:	f107 0210 	add.w	r2, r7, #16
 800041a:	893b      	ldrh	r3, [r7, #8]
 800041c:	4611      	mov	r1, r2
 800041e:	4618      	mov	r0, r3
 8000420:	f7ff feec 	bl	80001fc <uint16_to_bytes>
	HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 8000424:	f107 0110 	add.w	r1, r7, #16
 8000428:	2364      	movs	r3, #100	; 0x64
 800042a:	2202      	movs	r2, #2
 800042c:	68f8      	ldr	r0, [r7, #12]
 800042e:	f003 fb18 	bl	8003a62 <HAL_SPI_Transmit>

	uint16_to_bytes(y2, buf);
 8000432:	f107 0210 	add.w	r2, r7, #16
 8000436:	8abb      	ldrh	r3, [r7, #20]
 8000438:	4611      	mov	r1, r2
 800043a:	4618      	mov	r0, r3
 800043c:	f7ff fede 	bl	80001fc <uint16_to_bytes>
	HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 8000440:	f107 0110 	add.w	r1, r7, #16
 8000444:	2364      	movs	r3, #100	; 0x64
 8000446:	2202      	movs	r2, #2
 8000448:	68f8      	ldr	r0, [r7, #12]
 800044a:	f003 fb0a 	bl	8003a62 <HAL_SPI_Transmit>

	LCD_endWrite();
 800044e:	f7ff ff3f 	bl	80002d0 <LCD_endWrite>
	return 1;
 8000452:	2301      	movs	r3, #1
}
 8000454:	4618      	mov	r0, r3
 8000456:	3718      	adds	r7, #24
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}

0800045c <LCD_color565>:

uint16_t LCD_color565(uint8_t red, uint8_t green, uint8_t blue) {
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
 8000462:	4603      	mov	r3, r0
 8000464:	71fb      	strb	r3, [r7, #7]
 8000466:	460b      	mov	r3, r1
 8000468:	71bb      	strb	r3, [r7, #6]
 800046a:	4613      	mov	r3, r2
 800046c:	717b      	strb	r3, [r7, #5]
    return ((red & 0xF8) << 8) | ((green & 0xFC) << 3) | ((blue & 0xF8) >> 3);
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	021b      	lsls	r3, r3, #8
 8000472:	b21b      	sxth	r3, r3
 8000474:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000478:	f023 0307 	bic.w	r3, r3, #7
 800047c:	b21a      	sxth	r2, r3
 800047e:	79bb      	ldrb	r3, [r7, #6]
 8000480:	00db      	lsls	r3, r3, #3
 8000482:	b21b      	sxth	r3, r3
 8000484:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8000488:	b21b      	sxth	r3, r3
 800048a:	4313      	orrs	r3, r2
 800048c:	b21a      	sxth	r2, r3
 800048e:	797b      	ldrb	r3, [r7, #5]
 8000490:	08db      	lsrs	r3, r3, #3
 8000492:	b2db      	uxtb	r3, r3
 8000494:	b21b      	sxth	r3, r3
 8000496:	4313      	orrs	r3, r2
 8000498:	b21b      	sxth	r3, r3
 800049a:	b29b      	uxth	r3, r3
}
 800049c:	4618      	mov	r0, r3
 800049e:	370c      	adds	r7, #12
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr

080004a8 <LCD_pushColor>:

int LCD_pushColor(SPI_HandleTypeDef* spi, uint16_t color) {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
 80004b0:	460b      	mov	r3, r1
 80004b2:	807b      	strh	r3, [r7, #2]
	LCD_startWrite();
 80004b4:	f7ff ff00 	bl	80002b8 <LCD_startWrite>
	LCD_writeCommand(spi, HX8357_RAMWR); // Write to RAM
 80004b8:	212c      	movs	r1, #44	; 0x2c
 80004ba:	6878      	ldr	r0, [r7, #4]
 80004bc:	f7ff fed8 	bl	8000270 <LCD_writeCommand>
	HAL_SPI_Transmit(spi, (uint8_t*)&color, 2, 100);
 80004c0:	1cb9      	adds	r1, r7, #2
 80004c2:	2364      	movs	r3, #100	; 0x64
 80004c4:	2202      	movs	r2, #2
 80004c6:	6878      	ldr	r0, [r7, #4]
 80004c8:	f003 facb 	bl	8003a62 <HAL_SPI_Transmit>
	LCD_writeCommand(spi, HX8357_NOP); // Write command to stop RAMWR
 80004cc:	2100      	movs	r1, #0
 80004ce:	6878      	ldr	r0, [r7, #4]
 80004d0:	f7ff fece 	bl	8000270 <LCD_writeCommand>
	LCD_endWrite();
 80004d4:	f7ff fefc 	bl	80002d0 <LCD_endWrite>
	return 1;
 80004d8:	2301      	movs	r3, #1
}
 80004da:	4618      	mov	r0, r3
 80004dc:	3708      	adds	r7, #8
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}

080004e2 <LCD_pushColorCopy>:

int LCD_pushColorCopy(SPI_HandleTypeDef* spi, uint16_t color, uint32_t count) {
 80004e2:	b580      	push	{r7, lr}
 80004e4:	b086      	sub	sp, #24
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	60f8      	str	r0, [r7, #12]
 80004ea:	460b      	mov	r3, r1
 80004ec:	607a      	str	r2, [r7, #4]
 80004ee:	817b      	strh	r3, [r7, #10]
	LCD_startWrite();
 80004f0:	f7ff fee2 	bl	80002b8 <LCD_startWrite>

	LCD_writeCommand(spi, HX8357_RAMWR); // Write to RAM
 80004f4:	212c      	movs	r1, #44	; 0x2c
 80004f6:	68f8      	ldr	r0, [r7, #12]
 80004f8:	f7ff feba 	bl	8000270 <LCD_writeCommand>

	uint8_t buf[2];
	uint16_to_bytes(color, &buf[0]);
 80004fc:	f107 0210 	add.w	r2, r7, #16
 8000500:	897b      	ldrh	r3, [r7, #10]
 8000502:	4611      	mov	r1, r2
 8000504:	4618      	mov	r0, r3
 8000506:	f7ff fe79 	bl	80001fc <uint16_to_bytes>
	for (int i = 0; i < count; ++i)
 800050a:	2300      	movs	r3, #0
 800050c:	617b      	str	r3, [r7, #20]
 800050e:	e009      	b.n	8000524 <LCD_pushColorCopy+0x42>
	{
		HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 8000510:	f107 0110 	add.w	r1, r7, #16
 8000514:	2364      	movs	r3, #100	; 0x64
 8000516:	2202      	movs	r2, #2
 8000518:	68f8      	ldr	r0, [r7, #12]
 800051a:	f003 faa2 	bl	8003a62 <HAL_SPI_Transmit>
	for (int i = 0; i < count; ++i)
 800051e:	697b      	ldr	r3, [r7, #20]
 8000520:	3301      	adds	r3, #1
 8000522:	617b      	str	r3, [r7, #20]
 8000524:	697b      	ldr	r3, [r7, #20]
 8000526:	687a      	ldr	r2, [r7, #4]
 8000528:	429a      	cmp	r2, r3
 800052a:	d8f1      	bhi.n	8000510 <LCD_pushColorCopy+0x2e>
	}

	LCD_writeCommand(spi, HX8357_NOP); // Write command to stop RAMWR
 800052c:	2100      	movs	r1, #0
 800052e:	68f8      	ldr	r0, [r7, #12]
 8000530:	f7ff fe9e 	bl	8000270 <LCD_writeCommand>

	LCD_endWrite();
 8000534:	f7ff fecc 	bl	80002d0 <LCD_endWrite>
	return 1;
 8000538:	2301      	movs	r3, #1
}
 800053a:	4618      	mov	r0, r3
 800053c:	3718      	adds	r7, #24
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}

08000542 <LCD_writePixel>:

	LCD_endWrite();
	return 1;
}

int LCD_writePixel(SPI_HandleTypeDef* spi, int16_t x, int16_t y, uint16_t color) {
 8000542:	b580      	push	{r7, lr}
 8000544:	b086      	sub	sp, #24
 8000546:	af02      	add	r7, sp, #8
 8000548:	60f8      	str	r0, [r7, #12]
 800054a:	4608      	mov	r0, r1
 800054c:	4611      	mov	r1, r2
 800054e:	461a      	mov	r2, r3
 8000550:	4603      	mov	r3, r0
 8000552:	817b      	strh	r3, [r7, #10]
 8000554:	460b      	mov	r3, r1
 8000556:	813b      	strh	r3, [r7, #8]
 8000558:	4613      	mov	r3, r2
 800055a:	80fb      	strh	r3, [r7, #6]
    if ((x < 0) ||(x >= HX8357_TFTWIDTH) || (y < 0) || (y >= HX8357_TFTHEIGHT)) return 0;
 800055c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000560:	2b00      	cmp	r3, #0
 8000562:	db0d      	blt.n	8000580 <LCD_writePixel+0x3e>
 8000564:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000568:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800056c:	da08      	bge.n	8000580 <LCD_writePixel+0x3e>
 800056e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000572:	2b00      	cmp	r3, #0
 8000574:	db04      	blt.n	8000580 <LCD_writePixel+0x3e>
 8000576:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800057a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800057e:	db01      	blt.n	8000584 <LCD_writePixel+0x42>
 8000580:	2300      	movs	r3, #0
 8000582:	e017      	b.n	80005b4 <LCD_writePixel+0x72>
    if(!LCD_setAddrWindow(spi, x, y, 1, 1)) return 0;
 8000584:	8979      	ldrh	r1, [r7, #10]
 8000586:	893a      	ldrh	r2, [r7, #8]
 8000588:	2301      	movs	r3, #1
 800058a:	9300      	str	r3, [sp, #0]
 800058c:	2301      	movs	r3, #1
 800058e:	68f8      	ldr	r0, [r7, #12]
 8000590:	f7ff ff02 	bl	8000398 <LCD_setAddrWindow>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d101      	bne.n	800059e <LCD_writePixel+0x5c>
 800059a:	2300      	movs	r3, #0
 800059c:	e00a      	b.n	80005b4 <LCD_writePixel+0x72>
    if (!LCD_pushColor(spi, color)) return 0;
 800059e:	88fb      	ldrh	r3, [r7, #6]
 80005a0:	4619      	mov	r1, r3
 80005a2:	68f8      	ldr	r0, [r7, #12]
 80005a4:	f7ff ff80 	bl	80004a8 <LCD_pushColor>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d101      	bne.n	80005b2 <LCD_writePixel+0x70>
 80005ae:	2300      	movs	r3, #0
 80005b0:	e000      	b.n	80005b4 <LCD_writePixel+0x72>
    return 1;
 80005b2:	2301      	movs	r3, #1
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3710      	adds	r7, #16
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <LCD_writePixels>:

// Length of colors array must be w * h
int LCD_writePixels(SPI_HandleTypeDef* spi, uint16_t color,
					int16_t x, int16_t y, int16_t w, int16_t h)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af02      	add	r7, sp, #8
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	4608      	mov	r0, r1
 80005c6:	4611      	mov	r1, r2
 80005c8:	461a      	mov	r2, r3
 80005ca:	4603      	mov	r3, r0
 80005cc:	817b      	strh	r3, [r7, #10]
 80005ce:	460b      	mov	r3, r1
 80005d0:	813b      	strh	r3, [r7, #8]
 80005d2:	4613      	mov	r3, r2
 80005d4:	80fb      	strh	r3, [r7, #6]
	if ((x < 0) ||(x >= HX8357_TFTWIDTH) || (y < 0) || (y >= HX8357_TFTHEIGHT)) return 0;
 80005d6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	db0d      	blt.n	80005fa <LCD_writePixels+0x3e>
 80005de:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80005e2:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80005e6:	da08      	bge.n	80005fa <LCD_writePixels+0x3e>
 80005e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	db04      	blt.n	80005fa <LCD_writePixels+0x3e>
 80005f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005f4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80005f8:	db01      	blt.n	80005fe <LCD_writePixels+0x42>
 80005fa:	2300      	movs	r3, #0
 80005fc:	e01f      	b.n	800063e <LCD_writePixels+0x82>
	if(!LCD_setAddrWindow(spi, x, y, w, h)) return 0;
 80005fe:	8939      	ldrh	r1, [r7, #8]
 8000600:	88fa      	ldrh	r2, [r7, #6]
 8000602:	8b38      	ldrh	r0, [r7, #24]
 8000604:	8bbb      	ldrh	r3, [r7, #28]
 8000606:	9300      	str	r3, [sp, #0]
 8000608:	4603      	mov	r3, r0
 800060a:	68f8      	ldr	r0, [r7, #12]
 800060c:	f7ff fec4 	bl	8000398 <LCD_setAddrWindow>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d101      	bne.n	800061a <LCD_writePixels+0x5e>
 8000616:	2300      	movs	r3, #0
 8000618:	e011      	b.n	800063e <LCD_writePixels+0x82>
	if (!LCD_pushColorCopy(spi, color, w*h)) return 0;
 800061a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800061e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8000622:	fb02 f303 	mul.w	r3, r2, r3
 8000626:	461a      	mov	r2, r3
 8000628:	897b      	ldrh	r3, [r7, #10]
 800062a:	4619      	mov	r1, r3
 800062c:	68f8      	ldr	r0, [r7, #12]
 800062e:	f7ff ff58 	bl	80004e2 <LCD_pushColorCopy>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d101      	bne.n	800063c <LCD_writePixels+0x80>
 8000638:	2300      	movs	r3, #0
 800063a:	e000      	b.n	800063e <LCD_writePixels+0x82>
	return 1;
 800063c:	2301      	movs	r3, #1
}
 800063e:	4618      	mov	r0, r3
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
	...

08000648 <LCD_drawChar>:
		0x70, 0x1C, 0x07, 0x1C, 0x70,
		0x0E, 0x38, 0xE0, 0x38, 0x0E
};

void LCD_drawChar(SPI_HandleTypeDef* spi, int16_t x, int16_t y, unsigned char c, uint16_t color, uint32_t size)
{
 8000648:	b590      	push	{r4, r7, lr}
 800064a:	b089      	sub	sp, #36	; 0x24
 800064c:	af02      	add	r7, sp, #8
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	4608      	mov	r0, r1
 8000652:	4611      	mov	r1, r2
 8000654:	461a      	mov	r2, r3
 8000656:	4603      	mov	r3, r0
 8000658:	817b      	strh	r3, [r7, #10]
 800065a:	460b      	mov	r3, r1
 800065c:	813b      	strh	r3, [r7, #8]
 800065e:	4613      	mov	r3, r2
 8000660:	71fb      	strb	r3, [r7, #7]
	if((x >= HX8357_TFTWIDTH)   || // Clip right
 8000662:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000666:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800066a:	f280 80b5 	bge.w	80007d8 <LCD_drawChar+0x190>
	   (y >= HX8357_TFTHEIGHT)  || // Clip bottom
	   ((x + 6 * size - 1) < 0) || // Clip left
 800066e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000672:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000676:	f280 80af 	bge.w	80007d8 <LCD_drawChar+0x190>
	   ((y + 8 * size - 1) < 0))   // Clip top
		return;

	uint16_t bg = LCD_color565(255, 255, 255);
 800067a:	22ff      	movs	r2, #255	; 0xff
 800067c:	21ff      	movs	r1, #255	; 0xff
 800067e:	20ff      	movs	r0, #255	; 0xff
 8000680:	f7ff feec 	bl	800045c <LCD_color565>
 8000684:	4603      	mov	r3, r0
 8000686:	827b      	strh	r3, [r7, #18]
	LCD_startWrite();
 8000688:	f7ff fe16 	bl	80002b8 <LCD_startWrite>
	for(int8_t i = 0; i < 5; i++) // Char bitmap = 5 columns
 800068c:	2300      	movs	r3, #0
 800068e:	75fb      	strb	r3, [r7, #23]
 8000690:	e09a      	b.n	80007c8 <LCD_drawChar+0x180>
	{
		uint8_t line = font[c * 5 + i];
 8000692:	79fa      	ldrb	r2, [r7, #7]
 8000694:	4613      	mov	r3, r2
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	441a      	add	r2, r3
 800069a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800069e:	4413      	add	r3, r2
 80006a0:	4a4f      	ldr	r2, [pc, #316]	; (80007e0 <LCD_drawChar+0x198>)
 80006a2:	5cd3      	ldrb	r3, [r2, r3]
 80006a4:	75bb      	strb	r3, [r7, #22]
		for(int8_t j = 0; j < 8; j++, line >>= 1)
 80006a6:	2300      	movs	r3, #0
 80006a8:	757b      	strb	r3, [r7, #21]
 80006aa:	e082      	b.n	80007b2 <LCD_drawChar+0x16a>
		{
			if (line & 1)
 80006ac:	7dbb      	ldrb	r3, [r7, #22]
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d03a      	beq.n	800072c <LCD_drawChar+0xe4>
			{
				if (size == 1) LCD_writePixel(spi, x+i, y+j, color);
 80006b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d112      	bne.n	80006e2 <LCD_drawChar+0x9a>
 80006bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80006c0:	b29a      	uxth	r2, r3
 80006c2:	897b      	ldrh	r3, [r7, #10]
 80006c4:	4413      	add	r3, r2
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	b219      	sxth	r1, r3
 80006ca:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80006ce:	b29a      	uxth	r2, r3
 80006d0:	893b      	ldrh	r3, [r7, #8]
 80006d2:	4413      	add	r3, r2
 80006d4:	b29b      	uxth	r3, r3
 80006d6:	b21a      	sxth	r2, r3
 80006d8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80006da:	68f8      	ldr	r0, [r7, #12]
 80006dc:	f7ff ff31 	bl	8000542 <LCD_writePixel>
 80006e0:	e05e      	b.n	80007a0 <LCD_drawChar+0x158>
				else LCD_writePixels(spi, color, x+i*size, y+j*size, size, size);
 80006e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80006e6:	b29a      	uxth	r2, r3
 80006e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006ea:	b29b      	uxth	r3, r3
 80006ec:	fb12 f303 	smulbb	r3, r2, r3
 80006f0:	b29a      	uxth	r2, r3
 80006f2:	897b      	ldrh	r3, [r7, #10]
 80006f4:	4413      	add	r3, r2
 80006f6:	b29b      	uxth	r3, r3
 80006f8:	b218      	sxth	r0, r3
 80006fa:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80006fe:	b29a      	uxth	r2, r3
 8000700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000702:	b29b      	uxth	r3, r3
 8000704:	fb12 f303 	smulbb	r3, r2, r3
 8000708:	b29a      	uxth	r2, r3
 800070a:	893b      	ldrh	r3, [r7, #8]
 800070c:	4413      	add	r3, r2
 800070e:	b29b      	uxth	r3, r3
 8000710:	b21c      	sxth	r4, r3
 8000712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000714:	b21b      	sxth	r3, r3
 8000716:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000718:	b212      	sxth	r2, r2
 800071a:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800071c:	9201      	str	r2, [sp, #4]
 800071e:	9300      	str	r3, [sp, #0]
 8000720:	4623      	mov	r3, r4
 8000722:	4602      	mov	r2, r0
 8000724:	68f8      	ldr	r0, [r7, #12]
 8000726:	f7ff ff49 	bl	80005bc <LCD_writePixels>
 800072a:	e039      	b.n	80007a0 <LCD_drawChar+0x158>
			}
			else
			{
				if (size == 1) LCD_writePixel(spi, x+i, y+j, bg);
 800072c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800072e:	2b01      	cmp	r3, #1
 8000730:	d112      	bne.n	8000758 <LCD_drawChar+0x110>
 8000732:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000736:	b29a      	uxth	r2, r3
 8000738:	897b      	ldrh	r3, [r7, #10]
 800073a:	4413      	add	r3, r2
 800073c:	b29b      	uxth	r3, r3
 800073e:	b219      	sxth	r1, r3
 8000740:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000744:	b29a      	uxth	r2, r3
 8000746:	893b      	ldrh	r3, [r7, #8]
 8000748:	4413      	add	r3, r2
 800074a:	b29b      	uxth	r3, r3
 800074c:	b21a      	sxth	r2, r3
 800074e:	8a7b      	ldrh	r3, [r7, #18]
 8000750:	68f8      	ldr	r0, [r7, #12]
 8000752:	f7ff fef6 	bl	8000542 <LCD_writePixel>
 8000756:	e023      	b.n	80007a0 <LCD_drawChar+0x158>
				else LCD_writePixels(spi, bg, x+i*size, y+j*size, size, size);
 8000758:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800075c:	b29a      	uxth	r2, r3
 800075e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000760:	b29b      	uxth	r3, r3
 8000762:	fb12 f303 	smulbb	r3, r2, r3
 8000766:	b29a      	uxth	r2, r3
 8000768:	897b      	ldrh	r3, [r7, #10]
 800076a:	4413      	add	r3, r2
 800076c:	b29b      	uxth	r3, r3
 800076e:	b218      	sxth	r0, r3
 8000770:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000774:	b29a      	uxth	r2, r3
 8000776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000778:	b29b      	uxth	r3, r3
 800077a:	fb12 f303 	smulbb	r3, r2, r3
 800077e:	b29a      	uxth	r2, r3
 8000780:	893b      	ldrh	r3, [r7, #8]
 8000782:	4413      	add	r3, r2
 8000784:	b29b      	uxth	r3, r3
 8000786:	b21c      	sxth	r4, r3
 8000788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800078a:	b21b      	sxth	r3, r3
 800078c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800078e:	b212      	sxth	r2, r2
 8000790:	8a79      	ldrh	r1, [r7, #18]
 8000792:	9201      	str	r2, [sp, #4]
 8000794:	9300      	str	r3, [sp, #0]
 8000796:	4623      	mov	r3, r4
 8000798:	4602      	mov	r2, r0
 800079a:	68f8      	ldr	r0, [r7, #12]
 800079c:	f7ff ff0e 	bl	80005bc <LCD_writePixels>
		for(int8_t j = 0; j < 8; j++, line >>= 1)
 80007a0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	3301      	adds	r3, #1
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	757b      	strb	r3, [r7, #21]
 80007ac:	7dbb      	ldrb	r3, [r7, #22]
 80007ae:	085b      	lsrs	r3, r3, #1
 80007b0:	75bb      	strb	r3, [r7, #22]
 80007b2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80007b6:	2b07      	cmp	r3, #7
 80007b8:	f77f af78 	ble.w	80006ac <LCD_drawChar+0x64>
	for(int8_t i = 0; i < 5; i++) // Char bitmap = 5 columns
 80007bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	3301      	adds	r3, #1
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	75fb      	strb	r3, [r7, #23]
 80007c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80007cc:	2b04      	cmp	r3, #4
 80007ce:	f77f af60 	ble.w	8000692 <LCD_drawChar+0x4a>
			}
		}
	}
	LCD_endWrite();
 80007d2:	f7ff fd7d 	bl	80002d0 <LCD_endWrite>
 80007d6:	e000      	b.n	80007da <LCD_drawChar+0x192>
		return;
 80007d8:	bf00      	nop
}
 80007da:	371c      	adds	r7, #28
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd90      	pop	{r4, r7, pc}
 80007e0:	08004a7c 	.word	0x08004a7c

080007e4 <LCD_drawString>:
	}
	LCD_endWrite();
}

void LCD_drawString(SPI_HandleTypeDef* spi, int16_t x, int16_t y, unsigned char* c, uint32_t length, uint16_t color, uint32_t size)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b088      	sub	sp, #32
 80007e8:	af02      	add	r7, sp, #8
 80007ea:	60f8      	str	r0, [r7, #12]
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	460b      	mov	r3, r1
 80007f0:	817b      	strh	r3, [r7, #10]
 80007f2:	4613      	mov	r3, r2
 80007f4:	813b      	strh	r3, [r7, #8]
	for (int i = 0; i < length; ++i) LCD_drawChar(spi, x + i*6*size, y, c[i], color, size);
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]
 80007fa:	e020      	b.n	800083e <LCD_drawString+0x5a>
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	b29a      	uxth	r2, r3
 8000800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000802:	b29b      	uxth	r3, r3
 8000804:	fb12 f303 	smulbb	r3, r2, r3
 8000808:	b29b      	uxth	r3, r3
 800080a:	461a      	mov	r2, r3
 800080c:	0052      	lsls	r2, r2, #1
 800080e:	4413      	add	r3, r2
 8000810:	005b      	lsls	r3, r3, #1
 8000812:	b29a      	uxth	r2, r3
 8000814:	897b      	ldrh	r3, [r7, #10]
 8000816:	4413      	add	r3, r2
 8000818:	b29b      	uxth	r3, r3
 800081a:	b219      	sxth	r1, r3
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	4413      	add	r3, r2
 8000822:	7818      	ldrb	r0, [r3, #0]
 8000824:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800082a:	9301      	str	r3, [sp, #4]
 800082c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800082e:	9300      	str	r3, [sp, #0]
 8000830:	4603      	mov	r3, r0
 8000832:	68f8      	ldr	r0, [r7, #12]
 8000834:	f7ff ff08 	bl	8000648 <LCD_drawChar>
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	3301      	adds	r3, #1
 800083c:	617b      	str	r3, [r7, #20]
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	6a3a      	ldr	r2, [r7, #32]
 8000842:	429a      	cmp	r2, r3
 8000844:	d8da      	bhi.n	80007fc <LCD_drawString+0x18>
}
 8000846:	bf00      	nop
 8000848:	bf00      	nop
 800084a:	3718      	adds	r7, #24
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <LCD_drawBattery>:
	}
	LCD_endWrite();
}

//homemade functions for TADAMHASPEV, move to different file
void LCD_drawBattery(SPI_HandleTypeDef* spi, int16_t x, int16_t y, uint16_t color, uint32_t size) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b086      	sub	sp, #24
 8000854:	af02      	add	r7, sp, #8
 8000856:	60f8      	str	r0, [r7, #12]
 8000858:	4608      	mov	r0, r1
 800085a:	4611      	mov	r1, r2
 800085c:	461a      	mov	r2, r3
 800085e:	4603      	mov	r3, r0
 8000860:	817b      	strh	r3, [r7, #10]
 8000862:	460b      	mov	r3, r1
 8000864:	813b      	strh	r3, [r7, #8]
 8000866:	4613      	mov	r3, r2
 8000868:	80fb      	strh	r3, [r7, #6]
	//make battery thicker?
	//left
	if(!LCD_setAddrWindow(spi, x, y + size, 1, 22*size)) return;
 800086a:	8979      	ldrh	r1, [r7, #10]
 800086c:	69bb      	ldr	r3, [r7, #24]
 800086e:	b29a      	uxth	r2, r3
 8000870:	893b      	ldrh	r3, [r7, #8]
 8000872:	4413      	add	r3, r2
 8000874:	b29a      	uxth	r2, r3
 8000876:	69bb      	ldr	r3, [r7, #24]
 8000878:	b29b      	uxth	r3, r3
 800087a:	4618      	mov	r0, r3
 800087c:	0080      	lsls	r0, r0, #2
 800087e:	4418      	add	r0, r3
 8000880:	0040      	lsls	r0, r0, #1
 8000882:	4403      	add	r3, r0
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	b29b      	uxth	r3, r3
 8000888:	9300      	str	r3, [sp, #0]
 800088a:	2301      	movs	r3, #1
 800088c:	68f8      	ldr	r0, [r7, #12]
 800088e:	f7ff fd83 	bl	8000398 <LCD_setAddrWindow>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	f000 80e3 	beq.w	8000a60 <LCD_drawBattery+0x210>
	if (!LCD_pushColorCopy(spi, color, 22*size)) return;
 800089a:	69bb      	ldr	r3, [r7, #24]
 800089c:	2216      	movs	r2, #22
 800089e:	fb03 f202 	mul.w	r2, r3, r2
 80008a2:	88fb      	ldrh	r3, [r7, #6]
 80008a4:	4619      	mov	r1, r3
 80008a6:	68f8      	ldr	r0, [r7, #12]
 80008a8:	f7ff fe1b 	bl	80004e2 <LCD_pushColorCopy>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	f000 80d8 	beq.w	8000a64 <LCD_drawBattery+0x214>

	//right
	if(!LCD_setAddrWindow(spi, x + 10*size, y + size, 1, 22*size)) return;
 80008b4:	69bb      	ldr	r3, [r7, #24]
 80008b6:	b29b      	uxth	r3, r3
 80008b8:	461a      	mov	r2, r3
 80008ba:	0092      	lsls	r2, r2, #2
 80008bc:	4413      	add	r3, r2
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	b29a      	uxth	r2, r3
 80008c2:	897b      	ldrh	r3, [r7, #10]
 80008c4:	4413      	add	r3, r2
 80008c6:	b299      	uxth	r1, r3
 80008c8:	69bb      	ldr	r3, [r7, #24]
 80008ca:	b29a      	uxth	r2, r3
 80008cc:	893b      	ldrh	r3, [r7, #8]
 80008ce:	4413      	add	r3, r2
 80008d0:	b29a      	uxth	r2, r3
 80008d2:	69bb      	ldr	r3, [r7, #24]
 80008d4:	b29b      	uxth	r3, r3
 80008d6:	4618      	mov	r0, r3
 80008d8:	0080      	lsls	r0, r0, #2
 80008da:	4418      	add	r0, r3
 80008dc:	0040      	lsls	r0, r0, #1
 80008de:	4403      	add	r3, r0
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	b29b      	uxth	r3, r3
 80008e4:	9300      	str	r3, [sp, #0]
 80008e6:	2301      	movs	r3, #1
 80008e8:	68f8      	ldr	r0, [r7, #12]
 80008ea:	f7ff fd55 	bl	8000398 <LCD_setAddrWindow>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	f000 80b9 	beq.w	8000a68 <LCD_drawBattery+0x218>
	if (!LCD_pushColorCopy(spi, color, 22*size)) return;
 80008f6:	69bb      	ldr	r3, [r7, #24]
 80008f8:	2216      	movs	r2, #22
 80008fa:	fb03 f202 	mul.w	r2, r3, r2
 80008fe:	88fb      	ldrh	r3, [r7, #6]
 8000900:	4619      	mov	r1, r3
 8000902:	68f8      	ldr	r0, [r7, #12]
 8000904:	f7ff fded 	bl	80004e2 <LCD_pushColorCopy>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	f000 80ae 	beq.w	8000a6c <LCD_drawBattery+0x21c>

	//top
	if(!LCD_setAddrWindow(spi, x, y + size, 10*size, 1)) return;
 8000910:	8979      	ldrh	r1, [r7, #10]
 8000912:	69bb      	ldr	r3, [r7, #24]
 8000914:	b29a      	uxth	r2, r3
 8000916:	893b      	ldrh	r3, [r7, #8]
 8000918:	4413      	add	r3, r2
 800091a:	b29a      	uxth	r2, r3
 800091c:	69bb      	ldr	r3, [r7, #24]
 800091e:	b29b      	uxth	r3, r3
 8000920:	4618      	mov	r0, r3
 8000922:	0080      	lsls	r0, r0, #2
 8000924:	4403      	add	r3, r0
 8000926:	005b      	lsls	r3, r3, #1
 8000928:	b29b      	uxth	r3, r3
 800092a:	2001      	movs	r0, #1
 800092c:	9000      	str	r0, [sp, #0]
 800092e:	68f8      	ldr	r0, [r7, #12]
 8000930:	f7ff fd32 	bl	8000398 <LCD_setAddrWindow>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	f000 809a 	beq.w	8000a70 <LCD_drawBattery+0x220>
	if (!LCD_pushColorCopy(spi, color, 10*size)) return;
 800093c:	69ba      	ldr	r2, [r7, #24]
 800093e:	4613      	mov	r3, r2
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	4413      	add	r3, r2
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	461a      	mov	r2, r3
 8000948:	88fb      	ldrh	r3, [r7, #6]
 800094a:	4619      	mov	r1, r3
 800094c:	68f8      	ldr	r0, [r7, #12]
 800094e:	f7ff fdc8 	bl	80004e2 <LCD_pushColorCopy>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	f000 808d 	beq.w	8000a74 <LCD_drawBattery+0x224>

	//bottom
	if(!LCD_setAddrWindow(spi, x, y + 23*size, 10*size, 1)) return;
 800095a:	8979      	ldrh	r1, [r7, #10]
 800095c:	69bb      	ldr	r3, [r7, #24]
 800095e:	b29b      	uxth	r3, r3
 8000960:	461a      	mov	r2, r3
 8000962:	0052      	lsls	r2, r2, #1
 8000964:	441a      	add	r2, r3
 8000966:	00d2      	lsls	r2, r2, #3
 8000968:	1ad3      	subs	r3, r2, r3
 800096a:	b29a      	uxth	r2, r3
 800096c:	893b      	ldrh	r3, [r7, #8]
 800096e:	4413      	add	r3, r2
 8000970:	b29a      	uxth	r2, r3
 8000972:	69bb      	ldr	r3, [r7, #24]
 8000974:	b29b      	uxth	r3, r3
 8000976:	4618      	mov	r0, r3
 8000978:	0080      	lsls	r0, r0, #2
 800097a:	4403      	add	r3, r0
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	b29b      	uxth	r3, r3
 8000980:	2001      	movs	r0, #1
 8000982:	9000      	str	r0, [sp, #0]
 8000984:	68f8      	ldr	r0, [r7, #12]
 8000986:	f7ff fd07 	bl	8000398 <LCD_setAddrWindow>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d073      	beq.n	8000a78 <LCD_drawBattery+0x228>
	if (!LCD_pushColorCopy(spi, color, 10*size)) return;
 8000990:	69ba      	ldr	r2, [r7, #24]
 8000992:	4613      	mov	r3, r2
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	4413      	add	r3, r2
 8000998:	005b      	lsls	r3, r3, #1
 800099a:	461a      	mov	r2, r3
 800099c:	88fb      	ldrh	r3, [r7, #6]
 800099e:	4619      	mov	r1, r3
 80009a0:	68f8      	ldr	r0, [r7, #12]
 80009a2:	f7ff fd9e 	bl	80004e2 <LCD_pushColorCopy>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d067      	beq.n	8000a7c <LCD_drawBattery+0x22c>

	//lil cap
	if(!LCD_setAddrWindow(spi, x + 3*size, y, 4*size, 1)) return;
 80009ac:	69bb      	ldr	r3, [r7, #24]
 80009ae:	b29b      	uxth	r3, r3
 80009b0:	461a      	mov	r2, r3
 80009b2:	0052      	lsls	r2, r2, #1
 80009b4:	4413      	add	r3, r2
 80009b6:	b29a      	uxth	r2, r3
 80009b8:	897b      	ldrh	r3, [r7, #10]
 80009ba:	4413      	add	r3, r2
 80009bc:	b299      	uxth	r1, r3
 80009be:	893a      	ldrh	r2, [r7, #8]
 80009c0:	69bb      	ldr	r3, [r7, #24]
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	b29b      	uxth	r3, r3
 80009c8:	2001      	movs	r0, #1
 80009ca:	9000      	str	r0, [sp, #0]
 80009cc:	68f8      	ldr	r0, [r7, #12]
 80009ce:	f7ff fce3 	bl	8000398 <LCD_setAddrWindow>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d053      	beq.n	8000a80 <LCD_drawBattery+0x230>
	if (!LCD_pushColorCopy(spi, color, 4*size)) return;
 80009d8:	69bb      	ldr	r3, [r7, #24]
 80009da:	009a      	lsls	r2, r3, #2
 80009dc:	88fb      	ldrh	r3, [r7, #6]
 80009de:	4619      	mov	r1, r3
 80009e0:	68f8      	ldr	r0, [r7, #12]
 80009e2:	f7ff fd7e 	bl	80004e2 <LCD_pushColorCopy>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d04b      	beq.n	8000a84 <LCD_drawBattery+0x234>

	if(!LCD_setAddrWindow(spi, x + 3*size, y, 1, size)) return;
 80009ec:	69bb      	ldr	r3, [r7, #24]
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	461a      	mov	r2, r3
 80009f2:	0052      	lsls	r2, r2, #1
 80009f4:	4413      	add	r3, r2
 80009f6:	b29a      	uxth	r2, r3
 80009f8:	897b      	ldrh	r3, [r7, #10]
 80009fa:	4413      	add	r3, r2
 80009fc:	b299      	uxth	r1, r3
 80009fe:	893a      	ldrh	r2, [r7, #8]
 8000a00:	69bb      	ldr	r3, [r7, #24]
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	9300      	str	r3, [sp, #0]
 8000a06:	2301      	movs	r3, #1
 8000a08:	68f8      	ldr	r0, [r7, #12]
 8000a0a:	f7ff fcc5 	bl	8000398 <LCD_setAddrWindow>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d039      	beq.n	8000a88 <LCD_drawBattery+0x238>
	if (!LCD_pushColorCopy(spi, color, size)) return;
 8000a14:	88fb      	ldrh	r3, [r7, #6]
 8000a16:	69ba      	ldr	r2, [r7, #24]
 8000a18:	4619      	mov	r1, r3
 8000a1a:	68f8      	ldr	r0, [r7, #12]
 8000a1c:	f7ff fd61 	bl	80004e2 <LCD_pushColorCopy>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d032      	beq.n	8000a8c <LCD_drawBattery+0x23c>

	if(!LCD_setAddrWindow(spi, x + 3*size + 4*size, y, 1, size)) return;
 8000a26:	69bb      	ldr	r3, [r7, #24]
 8000a28:	b29b      	uxth	r3, r3
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	00d2      	lsls	r2, r2, #3
 8000a2e:	1ad3      	subs	r3, r2, r3
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	897b      	ldrh	r3, [r7, #10]
 8000a34:	4413      	add	r3, r2
 8000a36:	b299      	uxth	r1, r3
 8000a38:	893a      	ldrh	r2, [r7, #8]
 8000a3a:	69bb      	ldr	r3, [r7, #24]
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	9300      	str	r3, [sp, #0]
 8000a40:	2301      	movs	r3, #1
 8000a42:	68f8      	ldr	r0, [r7, #12]
 8000a44:	f7ff fca8 	bl	8000398 <LCD_setAddrWindow>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d020      	beq.n	8000a90 <LCD_drawBattery+0x240>
	if (!LCD_pushColorCopy(spi, color, size)) return;
 8000a4e:	88fb      	ldrh	r3, [r7, #6]
 8000a50:	69ba      	ldr	r2, [r7, #24]
 8000a52:	4619      	mov	r1, r3
 8000a54:	68f8      	ldr	r0, [r7, #12]
 8000a56:	f7ff fd44 	bl	80004e2 <LCD_pushColorCopy>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
	return;
 8000a5e:	e018      	b.n	8000a92 <LCD_drawBattery+0x242>
	if(!LCD_setAddrWindow(spi, x, y + size, 1, 22*size)) return;
 8000a60:	bf00      	nop
 8000a62:	e016      	b.n	8000a92 <LCD_drawBattery+0x242>
	if (!LCD_pushColorCopy(spi, color, 22*size)) return;
 8000a64:	bf00      	nop
 8000a66:	e014      	b.n	8000a92 <LCD_drawBattery+0x242>
	if(!LCD_setAddrWindow(spi, x + 10*size, y + size, 1, 22*size)) return;
 8000a68:	bf00      	nop
 8000a6a:	e012      	b.n	8000a92 <LCD_drawBattery+0x242>
	if (!LCD_pushColorCopy(spi, color, 22*size)) return;
 8000a6c:	bf00      	nop
 8000a6e:	e010      	b.n	8000a92 <LCD_drawBattery+0x242>
	if(!LCD_setAddrWindow(spi, x, y + size, 10*size, 1)) return;
 8000a70:	bf00      	nop
 8000a72:	e00e      	b.n	8000a92 <LCD_drawBattery+0x242>
	if (!LCD_pushColorCopy(spi, color, 10*size)) return;
 8000a74:	bf00      	nop
 8000a76:	e00c      	b.n	8000a92 <LCD_drawBattery+0x242>
	if(!LCD_setAddrWindow(spi, x, y + 23*size, 10*size, 1)) return;
 8000a78:	bf00      	nop
 8000a7a:	e00a      	b.n	8000a92 <LCD_drawBattery+0x242>
	if (!LCD_pushColorCopy(spi, color, 10*size)) return;
 8000a7c:	bf00      	nop
 8000a7e:	e008      	b.n	8000a92 <LCD_drawBattery+0x242>
	if(!LCD_setAddrWindow(spi, x + 3*size, y, 4*size, 1)) return;
 8000a80:	bf00      	nop
 8000a82:	e006      	b.n	8000a92 <LCD_drawBattery+0x242>
	if (!LCD_pushColorCopy(spi, color, 4*size)) return;
 8000a84:	bf00      	nop
 8000a86:	e004      	b.n	8000a92 <LCD_drawBattery+0x242>
	if(!LCD_setAddrWindow(spi, x + 3*size, y, 1, size)) return;
 8000a88:	bf00      	nop
 8000a8a:	e002      	b.n	8000a92 <LCD_drawBattery+0x242>
	if (!LCD_pushColorCopy(spi, color, size)) return;
 8000a8c:	bf00      	nop
 8000a8e:	e000      	b.n	8000a92 <LCD_drawBattery+0x242>
	if(!LCD_setAddrWindow(spi, x + 3*size + 4*size, y, 1, size)) return;
 8000a90:	bf00      	nop
}
 8000a92:	3710      	adds	r7, #16
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <LCD_drawFrame>:

void LCD_drawFrame(SPI_HandleTypeDef* spi, uint16_t color) {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af02      	add	r7, sp, #8
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	460b      	mov	r3, r1
 8000aa2:	807b      	strh	r3, [r7, #2]
	//rows
	if(!LCD_setAddrWindow(spi, 0, 80, 360, 1)) return;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	9300      	str	r3, [sp, #0]
 8000aa8:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000aac:	2250      	movs	r2, #80	; 0x50
 8000aae:	2100      	movs	r1, #0
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f7ff fc71 	bl	8000398 <LCD_setAddrWindow>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d04c      	beq.n	8000b56 <LCD_drawFrame+0xbe>
	if (!LCD_pushColorCopy(spi, color, 360)) return;
 8000abc:	887b      	ldrh	r3, [r7, #2]
 8000abe:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f7ff fd0c 	bl	80004e2 <LCD_pushColorCopy>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d044      	beq.n	8000b5a <LCD_drawFrame+0xc2>

	if(!LCD_setAddrWindow(spi, 0, 160, 360, 1)) return;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	9300      	str	r3, [sp, #0]
 8000ad4:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000ad8:	22a0      	movs	r2, #160	; 0xa0
 8000ada:	2100      	movs	r1, #0
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f7ff fc5b 	bl	8000398 <LCD_setAddrWindow>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d03a      	beq.n	8000b5e <LCD_drawFrame+0xc6>
	if (!LCD_pushColorCopy(spi, color, 360)) return;
 8000ae8:	887b      	ldrh	r3, [r7, #2]
 8000aea:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8000aee:	4619      	mov	r1, r3
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f7ff fcf6 	bl	80004e2 <LCD_pushColorCopy>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d032      	beq.n	8000b62 <LCD_drawFrame+0xca>

	if(!LCD_setAddrWindow(spi, 0, 240, 360, 1)) return;
 8000afc:	2301      	movs	r3, #1
 8000afe:	9300      	str	r3, [sp, #0]
 8000b00:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000b04:	22f0      	movs	r2, #240	; 0xf0
 8000b06:	2100      	movs	r1, #0
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f7ff fc45 	bl	8000398 <LCD_setAddrWindow>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d028      	beq.n	8000b66 <LCD_drawFrame+0xce>
	if (!LCD_pushColorCopy(spi, color, 360)) return;
 8000b14:	887b      	ldrh	r3, [r7, #2]
 8000b16:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f7ff fce0 	bl	80004e2 <LCD_pushColorCopy>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d020      	beq.n	8000b6a <LCD_drawFrame+0xd2>

	//column
	if(!LCD_setAddrWindow(spi, 360, 0, 1, 320)) return;
 8000b28:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000b2c:	9300      	str	r3, [sp, #0]
 8000b2e:	2301      	movs	r3, #1
 8000b30:	2200      	movs	r2, #0
 8000b32:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f7ff fc2e 	bl	8000398 <LCD_setAddrWindow>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d015      	beq.n	8000b6e <LCD_drawFrame+0xd6>
	if (!LCD_pushColorCopy(spi, color, 320)) return;
 8000b42:	887b      	ldrh	r3, [r7, #2]
 8000b44:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000b48:	4619      	mov	r1, r3
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f7ff fcc9 	bl	80004e2 <LCD_pushColorCopy>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
	return;
 8000b54:	e00c      	b.n	8000b70 <LCD_drawFrame+0xd8>
	if(!LCD_setAddrWindow(spi, 0, 80, 360, 1)) return;
 8000b56:	bf00      	nop
 8000b58:	e00a      	b.n	8000b70 <LCD_drawFrame+0xd8>
	if (!LCD_pushColorCopy(spi, color, 360)) return;
 8000b5a:	bf00      	nop
 8000b5c:	e008      	b.n	8000b70 <LCD_drawFrame+0xd8>
	if(!LCD_setAddrWindow(spi, 0, 160, 360, 1)) return;
 8000b5e:	bf00      	nop
 8000b60:	e006      	b.n	8000b70 <LCD_drawFrame+0xd8>
	if (!LCD_pushColorCopy(spi, color, 360)) return;
 8000b62:	bf00      	nop
 8000b64:	e004      	b.n	8000b70 <LCD_drawFrame+0xd8>
	if(!LCD_setAddrWindow(spi, 0, 240, 360, 1)) return;
 8000b66:	bf00      	nop
 8000b68:	e002      	b.n	8000b70 <LCD_drawFrame+0xd8>
	if (!LCD_pushColorCopy(spi, color, 360)) return;
 8000b6a:	bf00      	nop
 8000b6c:	e000      	b.n	8000b70 <LCD_drawFrame+0xd8>
	if(!LCD_setAddrWindow(spi, 360, 0, 1, 320)) return;
 8000b6e:	bf00      	nop
}
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <LCD_fillBattery>:

void LCD_fillBattery(SPI_HandleTypeDef* spi, int16_t x, int16_t y, uint32_t size, uint32_t level) {
 8000b76:	b590      	push	{r4, r7, lr}
 8000b78:	b087      	sub	sp, #28
 8000b7a:	af02      	add	r7, sp, #8
 8000b7c:	60f8      	str	r0, [r7, #12]
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	460b      	mov	r3, r1
 8000b82:	817b      	strh	r3, [r7, #10]
 8000b84:	4613      	mov	r3, r2
 8000b86:	813b      	strh	r3, [r7, #8]
	//include battery level adjustment and coloring
	//also fix border between battery juice and battery
	LCD_writePixels(spi, HX8357_GREEN, x + 3, (y + size) + 3, 10*size - 6, 22*size - 6);
 8000b88:	897b      	ldrh	r3, [r7, #10]
 8000b8a:	3303      	adds	r3, #3
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	b219      	sxth	r1, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	b29a      	uxth	r2, r3
 8000b94:	893b      	ldrh	r3, [r7, #8]
 8000b96:	4413      	add	r3, r2
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	3303      	adds	r3, #3
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	b218      	sxth	r0, r3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	b29b      	uxth	r3, r3
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	0092      	lsls	r2, r2, #2
 8000ba8:	4413      	add	r3, r2
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	b29b      	uxth	r3, r3
 8000bae:	3b06      	subs	r3, #6
 8000bb0:	b29b      	uxth	r3, r3
 8000bb2:	b21a      	sxth	r2, r3
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	b29b      	uxth	r3, r3
 8000bb8:	461c      	mov	r4, r3
 8000bba:	00a4      	lsls	r4, r4, #2
 8000bbc:	441c      	add	r4, r3
 8000bbe:	0064      	lsls	r4, r4, #1
 8000bc0:	4423      	add	r3, r4
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	3b06      	subs	r3, #6
 8000bc8:	b29b      	uxth	r3, r3
 8000bca:	b21b      	sxth	r3, r3
 8000bcc:	9301      	str	r3, [sp, #4]
 8000bce:	9200      	str	r2, [sp, #0]
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	460a      	mov	r2, r1
 8000bd4:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8000bd8:	68f8      	ldr	r0, [r7, #12]
 8000bda:	f7ff fcef 	bl	80005bc <LCD_writePixels>
}
 8000bde:	bf00      	nop
 8000be0:	3714      	adds	r7, #20
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd90      	pop	{r4, r7, pc}
	...

08000be8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08c      	sub	sp, #48	; 0x30
 8000bec:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bee:	f000 fd9e 	bl	800172e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bf2:	f000 f8e1 	bl	8000db8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf6:	f000 f9a5 	bl	8000f44 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000bfa:	f000 f965 	bl	8000ec8 <MX_SPI1_Init>
  MX_RTC_Init();
 8000bfe:	f000 f93b 	bl	8000e78 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  LCD_begin(&hspi1);
 8000c02:	4861      	ldr	r0, [pc, #388]	; (8000d88 <main+0x1a0>)
 8000c04:	f7ff fb70 	bl	80002e8 <LCD_begin>
  LCD_writePixels(&hspi1,HX8357_WHITE,0,0,480,320);
 8000c08:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000c0c:	9301      	str	r3, [sp, #4]
 8000c0e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000c12:	9300      	str	r3, [sp, #0]
 8000c14:	2300      	movs	r3, #0
 8000c16:	2200      	movs	r2, #0
 8000c18:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000c1c:	485a      	ldr	r0, [pc, #360]	; (8000d88 <main+0x1a0>)
 8000c1e:	f7ff fccd 	bl	80005bc <LCD_writePixels>
  LCD_drawBattery(&hspi1,380,120,HX8357_BLACK,8);
 8000c22:	2308      	movs	r3, #8
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	2300      	movs	r3, #0
 8000c28:	2278      	movs	r2, #120	; 0x78
 8000c2a:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8000c2e:	4856      	ldr	r0, [pc, #344]	; (8000d88 <main+0x1a0>)
 8000c30:	f7ff fe0e 	bl	8000850 <LCD_drawBattery>
  LCD_drawFrame(&hspi1,HX8357_BLACK);
 8000c34:	2100      	movs	r1, #0
 8000c36:	4854      	ldr	r0, [pc, #336]	; (8000d88 <main+0x1a0>)
 8000c38:	f7ff ff2e 	bl	8000a98 <LCD_drawFrame>


  char * name = "TADAMHESPEV | UMSM";
 8000c3c:	4b53      	ldr	r3, [pc, #332]	; (8000d8c <main+0x1a4>)
 8000c3e:	61fb      	str	r3, [r7, #28]
  char * speed = "SPEED:";
 8000c40:	4b53      	ldr	r3, [pc, #332]	; (8000d90 <main+0x1a8>)
 8000c42:	61bb      	str	r3, [r7, #24]
  char * temp = "TEMP:";
 8000c44:	4b53      	ldr	r3, [pc, #332]	; (8000d94 <main+0x1ac>)
 8000c46:	617b      	str	r3, [r7, #20]
  char * power = "POWER:";
 8000c48:	4b53      	ldr	r3, [pc, #332]	; (8000d98 <main+0x1b0>)
 8000c4a:	613b      	str	r3, [r7, #16]

  char * mph = "mph";
 8000c4c:	4b53      	ldr	r3, [pc, #332]	; (8000d9c <main+0x1b4>)
 8000c4e:	60fb      	str	r3, [r7, #12]
  char * deg = "C";
 8000c50:	4b53      	ldr	r3, [pc, #332]	; (8000da0 <main+0x1b8>)
 8000c52:	60bb      	str	r3, [r7, #8]
  char * watt = "W";
 8000c54:	4b53      	ldr	r3, [pc, #332]	; (8000da4 <main+0x1bc>)
 8000c56:	607b      	str	r3, [r7, #4]
  LCD_drawString(&hspi1,25,30 + 80*0,name,18,HX8357_BLACK,3);
 8000c58:	2303      	movs	r3, #3
 8000c5a:	9302      	str	r3, [sp, #8]
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	9301      	str	r3, [sp, #4]
 8000c60:	2312      	movs	r3, #18
 8000c62:	9300      	str	r3, [sp, #0]
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	221e      	movs	r2, #30
 8000c68:	2119      	movs	r1, #25
 8000c6a:	4847      	ldr	r0, [pc, #284]	; (8000d88 <main+0x1a0>)
 8000c6c:	f7ff fdba 	bl	80007e4 <LCD_drawString>
  LCD_drawString(&hspi1,5,30 + 80*1,speed,6,HX8357_BLACK,4);
 8000c70:	2304      	movs	r3, #4
 8000c72:	9302      	str	r3, [sp, #8]
 8000c74:	2300      	movs	r3, #0
 8000c76:	9301      	str	r3, [sp, #4]
 8000c78:	2306      	movs	r3, #6
 8000c7a:	9300      	str	r3, [sp, #0]
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	226e      	movs	r2, #110	; 0x6e
 8000c80:	2105      	movs	r1, #5
 8000c82:	4841      	ldr	r0, [pc, #260]	; (8000d88 <main+0x1a0>)
 8000c84:	f7ff fdae 	bl	80007e4 <LCD_drawString>
  LCD_drawString(&hspi1,5,30 + 80*2,temp,5,HX8357_BLACK,4);
 8000c88:	2304      	movs	r3, #4
 8000c8a:	9302      	str	r3, [sp, #8]
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	9301      	str	r3, [sp, #4]
 8000c90:	2305      	movs	r3, #5
 8000c92:	9300      	str	r3, [sp, #0]
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	22be      	movs	r2, #190	; 0xbe
 8000c98:	2105      	movs	r1, #5
 8000c9a:	483b      	ldr	r0, [pc, #236]	; (8000d88 <main+0x1a0>)
 8000c9c:	f7ff fda2 	bl	80007e4 <LCD_drawString>
  LCD_drawString(&hspi1,5,30 + 80*3,power,6,HX8357_BLACK,4);
 8000ca0:	2304      	movs	r3, #4
 8000ca2:	9302      	str	r3, [sp, #8]
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	9301      	str	r3, [sp, #4]
 8000ca8:	2306      	movs	r3, #6
 8000caa:	9300      	str	r3, [sp, #0]
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8000cb2:	2105      	movs	r1, #5
 8000cb4:	4834      	ldr	r0, [pc, #208]	; (8000d88 <main+0x1a0>)
 8000cb6:	f7ff fd95 	bl	80007e4 <LCD_drawString>

  LCD_drawString(&hspi1,280,30 + 80*1,mph,3,HX8357_BLACK,4);
 8000cba:	2304      	movs	r3, #4
 8000cbc:	9302      	str	r3, [sp, #8]
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	9301      	str	r3, [sp, #4]
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	9300      	str	r3, [sp, #0]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	226e      	movs	r2, #110	; 0x6e
 8000cca:	f44f 718c 	mov.w	r1, #280	; 0x118
 8000cce:	482e      	ldr	r0, [pc, #184]	; (8000d88 <main+0x1a0>)
 8000cd0:	f7ff fd88 	bl	80007e4 <LCD_drawString>
  LCD_drawString(&hspi1,306,30 + 80*2,deg,1,HX8357_BLACK,4);
 8000cd4:	2304      	movs	r3, #4
 8000cd6:	9302      	str	r3, [sp, #8]
 8000cd8:	2300      	movs	r3, #0
 8000cda:	9301      	str	r3, [sp, #4]
 8000cdc:	2301      	movs	r3, #1
 8000cde:	9300      	str	r3, [sp, #0]
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	22be      	movs	r2, #190	; 0xbe
 8000ce4:	f44f 7199 	mov.w	r1, #306	; 0x132
 8000ce8:	4827      	ldr	r0, [pc, #156]	; (8000d88 <main+0x1a0>)
 8000cea:	f7ff fd7b 	bl	80007e4 <LCD_drawString>
  LCD_drawString(&hspi1,306,30 + 80*3,watt,1,HX8357_BLACK,4);
 8000cee:	2304      	movs	r3, #4
 8000cf0:	9302      	str	r3, [sp, #8]
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	9301      	str	r3, [sp, #4]
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	9300      	str	r3, [sp, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8000d00:	f44f 7199 	mov.w	r1, #306	; 0x132
 8000d04:	4820      	ldr	r0, [pc, #128]	; (8000d88 <main+0x1a0>)
 8000d06:	f7ff fd6d 	bl	80007e4 <LCD_drawString>

  LCD_fillBattery(&hspi1,380,120,8,100);
 8000d0a:	2364      	movs	r3, #100	; 0x64
 8000d0c:	9300      	str	r3, [sp, #0]
 8000d0e:	2308      	movs	r3, #8
 8000d10:	2278      	movs	r2, #120	; 0x78
 8000d12:	f44f 71be 	mov.w	r1, #380	; 0x17c
 8000d16:	481c      	ldr	r0, [pc, #112]	; (8000d88 <main+0x1a0>)
 8000d18:	f7ff ff2d 	bl	8000b76 <LCD_fillBattery>
  LCD_drawString(&hspi1,370,50,"100%",4,HX8357_BLACK,4);
 8000d1c:	2304      	movs	r3, #4
 8000d1e:	9302      	str	r3, [sp, #8]
 8000d20:	2300      	movs	r3, #0
 8000d22:	9301      	str	r3, [sp, #4]
 8000d24:	2304      	movs	r3, #4
 8000d26:	9300      	str	r3, [sp, #0]
 8000d28:	4b1f      	ldr	r3, [pc, #124]	; (8000da8 <main+0x1c0>)
 8000d2a:	2232      	movs	r2, #50	; 0x32
 8000d2c:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8000d30:	4815      	ldr	r0, [pc, #84]	; (8000d88 <main+0x1a0>)
 8000d32:	f7ff fd57 	bl	80007e4 <LCD_drawString>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		  LCD_drawString(&hspi1,192,30 + 80*1,"4",3,HX8357_BLACK,4);
 8000d36:	2304      	movs	r3, #4
 8000d38:	9302      	str	r3, [sp, #8]
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	9301      	str	r3, [sp, #4]
 8000d3e:	2303      	movs	r3, #3
 8000d40:	9300      	str	r3, [sp, #0]
 8000d42:	4b1a      	ldr	r3, [pc, #104]	; (8000dac <main+0x1c4>)
 8000d44:	226e      	movs	r2, #110	; 0x6e
 8000d46:	21c0      	movs	r1, #192	; 0xc0
 8000d48:	480f      	ldr	r0, [pc, #60]	; (8000d88 <main+0x1a0>)
 8000d4a:	f7ff fd4b 	bl	80007e4 <LCD_drawString>
		  LCD_drawString(&hspi1,192,30 + 80*2,"6",3,HX8357_BLACK,4);
 8000d4e:	2304      	movs	r3, #4
 8000d50:	9302      	str	r3, [sp, #8]
 8000d52:	2300      	movs	r3, #0
 8000d54:	9301      	str	r3, [sp, #4]
 8000d56:	2303      	movs	r3, #3
 8000d58:	9300      	str	r3, [sp, #0]
 8000d5a:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <main+0x1c8>)
 8000d5c:	22be      	movs	r2, #190	; 0xbe
 8000d5e:	21c0      	movs	r1, #192	; 0xc0
 8000d60:	4809      	ldr	r0, [pc, #36]	; (8000d88 <main+0x1a0>)
 8000d62:	f7ff fd3f 	bl	80007e4 <LCD_drawString>
		  LCD_drawString(&hspi1,192,30 + 80*3,"8",3,HX8357_BLACK,4);
 8000d66:	2304      	movs	r3, #4
 8000d68:	9302      	str	r3, [sp, #8]
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	9301      	str	r3, [sp, #4]
 8000d6e:	2303      	movs	r3, #3
 8000d70:	9300      	str	r3, [sp, #0]
 8000d72:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <main+0x1cc>)
 8000d74:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8000d78:	21c0      	movs	r1, #192	; 0xc0
 8000d7a:	4803      	ldr	r0, [pc, #12]	; (8000d88 <main+0x1a0>)
 8000d7c:	f7ff fd32 	bl	80007e4 <LCD_drawString>
		  HAL_Delay(250);
 8000d80:	20fa      	movs	r0, #250	; 0xfa
 8000d82:	f000 fd0d 	bl	80017a0 <HAL_Delay>
		  LCD_drawString(&hspi1,192,30 + 80*1,"4",3,HX8357_BLACK,4);
 8000d86:	e7d6      	b.n	8000d36 <main+0x14e>
 8000d88:	200000b4 	.word	0x200000b4
 8000d8c:	08004a30 	.word	0x08004a30
 8000d90:	08004a44 	.word	0x08004a44
 8000d94:	08004a4c 	.word	0x08004a4c
 8000d98:	08004a54 	.word	0x08004a54
 8000d9c:	08004a5c 	.word	0x08004a5c
 8000da0:	08004a60 	.word	0x08004a60
 8000da4:	08004a64 	.word	0x08004a64
 8000da8:	08004a68 	.word	0x08004a68
 8000dac:	08004a70 	.word	0x08004a70
 8000db0:	08004a74 	.word	0x08004a74
 8000db4:	08004a78 	.word	0x08004a78

08000db8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b096      	sub	sp, #88	; 0x58
 8000dbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	2244      	movs	r2, #68	; 0x44
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f003 fdfa 	bl	80049c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dcc:	463b      	mov	r3, r7
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]
 8000dd8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000dda:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000dde:	f000 ffbf 	bl	8001d60 <HAL_PWREx_ControlVoltageScaling>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000de8:	f000 fb18 	bl	800141c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000dec:	f000 ff88 	bl	8001d00 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000df0:	4b20      	ldr	r3, [pc, #128]	; (8000e74 <SystemClock_Config+0xbc>)
 8000df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000df6:	4a1f      	ldr	r2, [pc, #124]	; (8000e74 <SystemClock_Config+0xbc>)
 8000df8:	f023 0318 	bic.w	r3, r3, #24
 8000dfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000e00:	2314      	movs	r3, #20
 8000e02:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000e04:	2301      	movs	r3, #1
 8000e06:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000e10:	2360      	movs	r3, #96	; 0x60
 8000e12:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e14:	2302      	movs	r3, #2
 8000e16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 36;
 8000e20:	2324      	movs	r3, #36	; 0x24
 8000e22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e24:	2302      	movs	r3, #2
 8000e26:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	4618      	mov	r0, r3
 8000e36:	f001 f847 	bl	8001ec8 <HAL_RCC_OscConfig>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000e40:	f000 faec 	bl	800141c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e44:	230f      	movs	r3, #15
 8000e46:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e50:	2300      	movs	r3, #0
 8000e52:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e54:	2300      	movs	r3, #0
 8000e56:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e58:	463b      	mov	r3, r7
 8000e5a:	2103      	movs	r1, #3
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f001 fc4d 	bl	80026fc <HAL_RCC_ClockConfig>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000e68:	f000 fad8 	bl	800141c <Error_Handler>
  }
}
 8000e6c:	bf00      	nop
 8000e6e:	3758      	adds	r7, #88	; 0x58
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40021000 	.word	0x40021000

08000e78 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e7c:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <MX_RTC_Init+0x48>)
 8000e7e:	4a11      	ldr	r2, [pc, #68]	; (8000ec4 <MX_RTC_Init+0x4c>)
 8000e80:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e82:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <MX_RTC_Init+0x48>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e88:	4b0d      	ldr	r3, [pc, #52]	; (8000ec0 <MX_RTC_Init+0x48>)
 8000e8a:	227f      	movs	r2, #127	; 0x7f
 8000e8c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000e8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <MX_RTC_Init+0x48>)
 8000e90:	22ff      	movs	r2, #255	; 0xff
 8000e92:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e94:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <MX_RTC_Init+0x48>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000e9a:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <MX_RTC_Init+0x48>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ea0:	4b07      	ldr	r3, [pc, #28]	; (8000ec0 <MX_RTC_Init+0x48>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ea6:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <MX_RTC_Init+0x48>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000eac:	4804      	ldr	r0, [pc, #16]	; (8000ec0 <MX_RTC_Init+0x48>)
 8000eae:	f002 fc17 	bl	80036e0 <HAL_RTC_Init>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000eb8:	f000 fab0 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20000090 	.word	0x20000090
 8000ec4:	40002800 	.word	0x40002800

08000ec8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ecc:	4b1b      	ldr	r3, [pc, #108]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000ece:	4a1c      	ldr	r2, [pc, #112]	; (8000f40 <MX_SPI1_Init+0x78>)
 8000ed0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ed2:	4b1a      	ldr	r3, [pc, #104]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000ed4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ed8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000eda:	4b18      	ldr	r3, [pc, #96]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ee0:	4b16      	ldr	r3, [pc, #88]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000ee2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000ee6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ee8:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000eee:	4b13      	ldr	r3, [pc, #76]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ef4:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000ef6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000efa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000efc:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f02:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f0e:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f14:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000f16:	2207      	movs	r2, #7
 8000f18:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f1a:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000f22:	2208      	movs	r2, #8
 8000f24:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f26:	4805      	ldr	r0, [pc, #20]	; (8000f3c <MX_SPI1_Init+0x74>)
 8000f28:	f002 fcf8 	bl	800391c <HAL_SPI_Init>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000f32:	f000 fa73 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	200000b4 	.word	0x200000b4
 8000f40:	40013000 	.word	0x40013000

08000f44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08e      	sub	sp, #56	; 0x38
 8000f48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	60da      	str	r2, [r3, #12]
 8000f58:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f5a:	4bb2      	ldr	r3, [pc, #712]	; (8001224 <MX_GPIO_Init+0x2e0>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5e:	4ab1      	ldr	r2, [pc, #708]	; (8001224 <MX_GPIO_Init+0x2e0>)
 8000f60:	f043 0310 	orr.w	r3, r3, #16
 8000f64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f66:	4baf      	ldr	r3, [pc, #700]	; (8001224 <MX_GPIO_Init+0x2e0>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6a:	f003 0310 	and.w	r3, r3, #16
 8000f6e:	623b      	str	r3, [r7, #32]
 8000f70:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f72:	4bac      	ldr	r3, [pc, #688]	; (8001224 <MX_GPIO_Init+0x2e0>)
 8000f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f76:	4aab      	ldr	r2, [pc, #684]	; (8001224 <MX_GPIO_Init+0x2e0>)
 8000f78:	f043 0304 	orr.w	r3, r3, #4
 8000f7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f7e:	4ba9      	ldr	r3, [pc, #676]	; (8001224 <MX_GPIO_Init+0x2e0>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f82:	f003 0304 	and.w	r3, r3, #4
 8000f86:	61fb      	str	r3, [r7, #28]
 8000f88:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f8a:	4ba6      	ldr	r3, [pc, #664]	; (8001224 <MX_GPIO_Init+0x2e0>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8e:	4aa5      	ldr	r2, [pc, #660]	; (8001224 <MX_GPIO_Init+0x2e0>)
 8000f90:	f043 0320 	orr.w	r3, r3, #32
 8000f94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f96:	4ba3      	ldr	r3, [pc, #652]	; (8001224 <MX_GPIO_Init+0x2e0>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9a:	f003 0320 	and.w	r3, r3, #32
 8000f9e:	61bb      	str	r3, [r7, #24]
 8000fa0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fa2:	4ba0      	ldr	r3, [pc, #640]	; (8001224 <MX_GPIO_Init+0x2e0>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa6:	4a9f      	ldr	r2, [pc, #636]	; (8001224 <MX_GPIO_Init+0x2e0>)
 8000fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fae:	4b9d      	ldr	r3, [pc, #628]	; (8001224 <MX_GPIO_Init+0x2e0>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fb6:	617b      	str	r3, [r7, #20]
 8000fb8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	4b9a      	ldr	r3, [pc, #616]	; (8001224 <MX_GPIO_Init+0x2e0>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fbe:	4a99      	ldr	r2, [pc, #612]	; (8001224 <MX_GPIO_Init+0x2e0>)
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fc6:	4b97      	ldr	r3, [pc, #604]	; (8001224 <MX_GPIO_Init+0x2e0>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd2:	4b94      	ldr	r3, [pc, #592]	; (8001224 <MX_GPIO_Init+0x2e0>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd6:	4a93      	ldr	r2, [pc, #588]	; (8001224 <MX_GPIO_Init+0x2e0>)
 8000fd8:	f043 0302 	orr.w	r3, r3, #2
 8000fdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fde:	4b91      	ldr	r3, [pc, #580]	; (8001224 <MX_GPIO_Init+0x2e0>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fea:	4b8e      	ldr	r3, [pc, #568]	; (8001224 <MX_GPIO_Init+0x2e0>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fee:	4a8d      	ldr	r2, [pc, #564]	; (8001224 <MX_GPIO_Init+0x2e0>)
 8000ff0:	f043 0308 	orr.w	r3, r3, #8
 8000ff4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ff6:	4b8b      	ldr	r3, [pc, #556]	; (8001224 <MX_GPIO_Init+0x2e0>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffa:	f003 0308 	and.w	r3, r3, #8
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001002:	4b88      	ldr	r3, [pc, #544]	; (8001224 <MX_GPIO_Init+0x2e0>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001006:	4a87      	ldr	r2, [pc, #540]	; (8001224 <MX_GPIO_Init+0x2e0>)
 8001008:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800100c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800100e:	4b85      	ldr	r3, [pc, #532]	; (8001224 <MX_GPIO_Init+0x2e0>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800101a:	f000 ff45 	bl	8001ea8 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8001024:	4880      	ldr	r0, [pc, #512]	; (8001228 <MX_GPIO_Init+0x2e4>)
 8001026:	f000 fe53 	bl	8001cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800102a:	230c      	movs	r3, #12
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102e:	2302      	movs	r3, #2
 8001030:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	2300      	movs	r3, #0
 8001038:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800103a:	230d      	movs	r3, #13
 800103c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800103e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001042:	4619      	mov	r1, r3
 8001044:	4879      	ldr	r0, [pc, #484]	; (800122c <MX_GPIO_Init+0x2e8>)
 8001046:	f000 fcb1 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800104a:	2307      	movs	r3, #7
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800104e:	2312      	movs	r3, #18
 8001050:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001056:	2303      	movs	r3, #3
 8001058:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800105a:	2304      	movs	r3, #4
 800105c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800105e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001062:	4619      	mov	r1, r3
 8001064:	4870      	ldr	r0, [pc, #448]	; (8001228 <MX_GPIO_Init+0x2e4>)
 8001066:	f000 fca1 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800106a:	2380      	movs	r3, #128	; 0x80
 800106c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106e:	2302      	movs	r3, #2
 8001070:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001076:	2300      	movs	r3, #0
 8001078:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800107a:	230d      	movs	r3, #13
 800107c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800107e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001082:	4619      	mov	r1, r3
 8001084:	4868      	ldr	r0, [pc, #416]	; (8001228 <MX_GPIO_Init+0x2e4>)
 8001086:	f000 fc91 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800108a:	233f      	movs	r3, #63	; 0x3f
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800108e:	230b      	movs	r3, #11
 8001090:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001096:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800109a:	4619      	mov	r1, r3
 800109c:	4864      	ldr	r0, [pc, #400]	; (8001230 <MX_GPIO_Init+0x2ec>)
 800109e:	f000 fc85 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010a2:	2301      	movs	r3, #1
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a6:	2302      	movs	r3, #2
 80010a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ae:	2300      	movs	r3, #0
 80010b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010b2:	2301      	movs	r3, #1
 80010b4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ba:	4619      	mov	r1, r3
 80010bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c0:	f000 fc74 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80010c4:	230a      	movs	r3, #10
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80010c8:	230b      	movs	r3, #11
 80010ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d4:	4619      	mov	r1, r3
 80010d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010da:	f000 fc67 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010de:	2301      	movs	r3, #1
 80010e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e2:	2302      	movs	r3, #2
 80010e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ea:	2300      	movs	r3, #0
 80010ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010ee:	2302      	movs	r3, #2
 80010f0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f6:	4619      	mov	r1, r3
 80010f8:	484e      	ldr	r0, [pc, #312]	; (8001234 <MX_GPIO_Init+0x2f0>)
 80010fa:	f000 fc57 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010fe:	2302      	movs	r3, #2
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001102:	230b      	movs	r3, #11
 8001104:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800110e:	4619      	mov	r1, r3
 8001110:	4848      	ldr	r0, [pc, #288]	; (8001234 <MX_GPIO_Init+0x2f0>)
 8001112:	f000 fc4b 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8001116:	2344      	movs	r3, #68	; 0x44
 8001118:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800111a:	2303      	movs	r3, #3
 800111c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001122:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001126:	4619      	mov	r1, r3
 8001128:	4842      	ldr	r0, [pc, #264]	; (8001234 <MX_GPIO_Init+0x2f0>)
 800112a:	f000 fc3f 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PF12 PF13 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800112e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001132:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001134:	2301      	movs	r3, #1
 8001136:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113c:	2300      	movs	r3, #0
 800113e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001140:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001144:	4619      	mov	r1, r3
 8001146:	4838      	ldr	r0, [pc, #224]	; (8001228 <MX_GPIO_Init+0x2e4>)
 8001148:	f000 fc30 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800114c:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	2302      	movs	r3, #2
 8001154:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115a:	2300      	movs	r3, #0
 800115c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800115e:	2301      	movs	r3, #1
 8001160:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001162:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001166:	4619      	mov	r1, r3
 8001168:	4830      	ldr	r0, [pc, #192]	; (800122c <MX_GPIO_Init+0x2e8>)
 800116a:	f000 fc1f 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800116e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001174:	2302      	movs	r3, #2
 8001176:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117c:	2300      	movs	r3, #0
 800117e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8001180:	2303      	movs	r3, #3
 8001182:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001184:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001188:	4619      	mov	r1, r3
 800118a:	4828      	ldr	r0, [pc, #160]	; (800122c <MX_GPIO_Init+0x2e8>)
 800118c:	f000 fc0e 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001190:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001196:	2302      	movs	r3, #2
 8001198:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119e:	2300      	movs	r3, #0
 80011a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011a2:	2301      	movs	r3, #1
 80011a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011aa:	4619      	mov	r1, r3
 80011ac:	4821      	ldr	r0, [pc, #132]	; (8001234 <MX_GPIO_Init+0x2f0>)
 80011ae:	f000 fbfd 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80011b2:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80011b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b8:	2302      	movs	r3, #2
 80011ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c0:	2300      	movs	r3, #0
 80011c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80011c4:	230d      	movs	r3, #13
 80011c6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011cc:	4619      	mov	r1, r3
 80011ce:	4819      	ldr	r0, [pc, #100]	; (8001234 <MX_GPIO_Init+0x2f0>)
 80011d0:	f000 fbec 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80011d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011da:	2302      	movs	r3, #2
 80011dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e2:	2300      	movs	r3, #0
 80011e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80011e6:	230e      	movs	r3, #14
 80011e8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ee:	4619      	mov	r1, r3
 80011f0:	4810      	ldr	r0, [pc, #64]	; (8001234 <MX_GPIO_Init+0x2f0>)
 80011f2:	f000 fbdb 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fc:	2302      	movs	r3, #2
 80011fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001204:	2303      	movs	r3, #3
 8001206:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001208:	2307      	movs	r3, #7
 800120a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800120c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001210:	4619      	mov	r1, r3
 8001212:	4809      	ldr	r0, [pc, #36]	; (8001238 <MX_GPIO_Init+0x2f4>)
 8001214:	f000 fbca 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001218:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800121c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121e:	2302      	movs	r3, #2
 8001220:	62bb      	str	r3, [r7, #40]	; 0x28
 8001222:	e00b      	b.n	800123c <MX_GPIO_Init+0x2f8>
 8001224:	40021000 	.word	0x40021000
 8001228:	48001400 	.word	0x48001400
 800122c:	48001000 	.word	0x48001000
 8001230:	48000800 	.word	0x48000800
 8001234:	48000400 	.word	0x48000400
 8001238:	48000c00 	.word	0x48000c00
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001240:	2300      	movs	r3, #0
 8001242:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001244:	2302      	movs	r3, #2
 8001246:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001248:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800124c:	4619      	mov	r1, r3
 800124e:	4865      	ldr	r0, [pc, #404]	; (80013e4 <MX_GPIO_Init+0x4a0>)
 8001250:	f000 fbac 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001254:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125a:	2302      	movs	r3, #2
 800125c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001262:	2303      	movs	r3, #3
 8001264:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001266:	2308      	movs	r3, #8
 8001268:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800126a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800126e:	4619      	mov	r1, r3
 8001270:	485d      	ldr	r0, [pc, #372]	; (80013e8 <MX_GPIO_Init+0x4a4>)
 8001272:	f000 fb9b 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001276:	2340      	movs	r3, #64	; 0x40
 8001278:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127a:	2302      	movs	r3, #2
 800127c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001282:	2300      	movs	r3, #0
 8001284:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001286:	230d      	movs	r3, #13
 8001288:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800128a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800128e:	4619      	mov	r1, r3
 8001290:	4856      	ldr	r0, [pc, #344]	; (80013ec <MX_GPIO_Init+0x4a8>)
 8001292:	f000 fb8b 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001296:	2380      	movs	r3, #128	; 0x80
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129a:	2302      	movs	r3, #2
 800129c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a2:	2300      	movs	r3, #0
 80012a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012a6:	2302      	movs	r3, #2
 80012a8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ae:	4619      	mov	r1, r3
 80012b0:	484e      	ldr	r0, [pc, #312]	; (80013ec <MX_GPIO_Init+0x4a8>)
 80012b2:	f000 fb7b 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80012b6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012bc:	2302      	movs	r3, #2
 80012be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c4:	2303      	movs	r3, #3
 80012c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80012c8:	230c      	movs	r3, #12
 80012ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d0:	4619      	mov	r1, r3
 80012d2:	4846      	ldr	r0, [pc, #280]	; (80013ec <MX_GPIO_Init+0x4a8>)
 80012d4:	f000 fb6a 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 80012d8:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80012dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012de:	2302      	movs	r3, #2
 80012e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e6:	2303      	movs	r3, #3
 80012e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80012ea:	230a      	movs	r3, #10
 80012ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f2:	4619      	mov	r1, r3
 80012f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f8:	f000 fb58 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001302:	2300      	movs	r3, #0
 8001304:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800130e:	4619      	mov	r1, r3
 8001310:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001314:	f000 fb4a 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001318:	2301      	movs	r3, #1
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131c:	2302      	movs	r3, #2
 800131e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001324:	2303      	movs	r3, #3
 8001326:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001328:	2309      	movs	r3, #9
 800132a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800132c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001330:	4619      	mov	r1, r3
 8001332:	482c      	ldr	r0, [pc, #176]	; (80013e4 <MX_GPIO_Init+0x4a0>)
 8001334:	f000 fb3a 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001338:	2304      	movs	r3, #4
 800133a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133c:	2302      	movs	r3, #2
 800133e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001344:	2303      	movs	r3, #3
 8001346:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001348:	230c      	movs	r3, #12
 800134a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800134c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001350:	4619      	mov	r1, r3
 8001352:	4824      	ldr	r0, [pc, #144]	; (80013e4 <MX_GPIO_Init+0x4a0>)
 8001354:	f000 fb2a 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001358:	2378      	movs	r3, #120	; 0x78
 800135a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135c:	2302      	movs	r3, #2
 800135e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001364:	2303      	movs	r3, #3
 8001366:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001368:	2307      	movs	r3, #7
 800136a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800136c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001370:	4619      	mov	r1, r3
 8001372:	481c      	ldr	r0, [pc, #112]	; (80013e4 <MX_GPIO_Init+0x4a0>)
 8001374:	f000 fb1a 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001378:	2338      	movs	r3, #56	; 0x38
 800137a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137c:	2302      	movs	r3, #2
 800137e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001384:	2303      	movs	r3, #3
 8001386:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001388:	2306      	movs	r3, #6
 800138a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001390:	4619      	mov	r1, r3
 8001392:	4817      	ldr	r0, [pc, #92]	; (80013f0 <MX_GPIO_Init+0x4ac>)
 8001394:	f000 fb0a 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001398:	f44f 7340 	mov.w	r3, #768	; 0x300
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800139e:	2312      	movs	r3, #18
 80013a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a6:	2303      	movs	r3, #3
 80013a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013aa:	2304      	movs	r3, #4
 80013ac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b2:	4619      	mov	r1, r3
 80013b4:	480e      	ldr	r0, [pc, #56]	; (80013f0 <MX_GPIO_Init+0x4ac>)
 80013b6:	f000 faf9 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013ba:	2301      	movs	r3, #1
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013be:	2302      	movs	r3, #2
 80013c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c6:	2300      	movs	r3, #0
 80013c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80013ca:	2302      	movs	r3, #2
 80013cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d2:	4619      	mov	r1, r3
 80013d4:	4807      	ldr	r0, [pc, #28]	; (80013f4 <MX_GPIO_Init+0x4b0>)
 80013d6:	f000 fae9 	bl	80019ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013da:	bf00      	nop
 80013dc:	3738      	adds	r7, #56	; 0x38
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	48000c00 	.word	0x48000c00
 80013e8:	48001800 	.word	0x48001800
 80013ec:	48000800 	.word	0x48000800
 80013f0:	48000400 	.word	0x48000400
 80013f4:	48001000 	.word	0x48001000

080013f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a04      	ldr	r2, [pc, #16]	; (8001418 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d101      	bne.n	800140e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800140a:	f000 f9a9 	bl	8001760 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40000800 	.word	0x40000800

0800141c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001420:	b672      	cpsid	i
}
 8001422:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001424:	e7fe      	b.n	8001424 <Error_Handler+0x8>
	...

08001428 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800142e:	4b0f      	ldr	r3, [pc, #60]	; (800146c <HAL_MspInit+0x44>)
 8001430:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001432:	4a0e      	ldr	r2, [pc, #56]	; (800146c <HAL_MspInit+0x44>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	6613      	str	r3, [r2, #96]	; 0x60
 800143a:	4b0c      	ldr	r3, [pc, #48]	; (800146c <HAL_MspInit+0x44>)
 800143c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001446:	4b09      	ldr	r3, [pc, #36]	; (800146c <HAL_MspInit+0x44>)
 8001448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144a:	4a08      	ldr	r2, [pc, #32]	; (800146c <HAL_MspInit+0x44>)
 800144c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001450:	6593      	str	r3, [r2, #88]	; 0x58
 8001452:	4b06      	ldr	r3, [pc, #24]	; (800146c <HAL_MspInit+0x44>)
 8001454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145a:	603b      	str	r3, [r7, #0]
 800145c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	40021000 	.word	0x40021000

08001470 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b0a8      	sub	sp, #160	; 0xa0
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001478:	f107 030c 	add.w	r3, r7, #12
 800147c:	2294      	movs	r2, #148	; 0x94
 800147e:	2100      	movs	r1, #0
 8001480:	4618      	mov	r0, r3
 8001482:	f003 fa9d 	bl	80049c0 <memset>
  if(hrtc->Instance==RTC)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a10      	ldr	r2, [pc, #64]	; (80014cc <HAL_RTC_MspInit+0x5c>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d118      	bne.n	80014c2 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001490:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001494:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001496:	f44f 7380 	mov.w	r3, #256	; 0x100
 800149a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800149e:	f107 030c 	add.w	r3, r7, #12
 80014a2:	4618      	mov	r0, r3
 80014a4:	f001 fc04 	bl	8002cb0 <HAL_RCCEx_PeriphCLKConfig>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80014ae:	f7ff ffb5 	bl	800141c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80014b2:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <HAL_RTC_MspInit+0x60>)
 80014b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014b8:	4a05      	ldr	r2, [pc, #20]	; (80014d0 <HAL_RTC_MspInit+0x60>)
 80014ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80014c2:	bf00      	nop
 80014c4:	37a0      	adds	r7, #160	; 0xa0
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40002800 	.word	0x40002800
 80014d0:	40021000 	.word	0x40021000

080014d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08a      	sub	sp, #40	; 0x28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a17      	ldr	r2, [pc, #92]	; (8001550 <HAL_SPI_MspInit+0x7c>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d128      	bne.n	8001548 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014f6:	4b17      	ldr	r3, [pc, #92]	; (8001554 <HAL_SPI_MspInit+0x80>)
 80014f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014fa:	4a16      	ldr	r2, [pc, #88]	; (8001554 <HAL_SPI_MspInit+0x80>)
 80014fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001500:	6613      	str	r3, [r2, #96]	; 0x60
 8001502:	4b14      	ldr	r3, [pc, #80]	; (8001554 <HAL_SPI_MspInit+0x80>)
 8001504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001506:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800150e:	4b11      	ldr	r3, [pc, #68]	; (8001554 <HAL_SPI_MspInit+0x80>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001512:	4a10      	ldr	r2, [pc, #64]	; (8001554 <HAL_SPI_MspInit+0x80>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800151a:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <HAL_SPI_MspInit+0x80>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001526:	23f0      	movs	r3, #240	; 0xf0
 8001528:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152a:	2302      	movs	r3, #2
 800152c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001532:	2303      	movs	r3, #3
 8001534:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001536:	2305      	movs	r3, #5
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153a:	f107 0314 	add.w	r3, r7, #20
 800153e:	4619      	mov	r1, r3
 8001540:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001544:	f000 fa32 	bl	80019ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001548:	bf00      	nop
 800154a:	3728      	adds	r7, #40	; 0x28
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40013000 	.word	0x40013000
 8001554:	40021000 	.word	0x40021000

08001558 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08e      	sub	sp, #56	; 0x38
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001560:	2300      	movs	r3, #0
 8001562:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001566:	4b34      	ldr	r3, [pc, #208]	; (8001638 <HAL_InitTick+0xe0>)
 8001568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800156a:	4a33      	ldr	r2, [pc, #204]	; (8001638 <HAL_InitTick+0xe0>)
 800156c:	f043 0304 	orr.w	r3, r3, #4
 8001570:	6593      	str	r3, [r2, #88]	; 0x58
 8001572:	4b31      	ldr	r3, [pc, #196]	; (8001638 <HAL_InitTick+0xe0>)
 8001574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001576:	f003 0304 	and.w	r3, r3, #4
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800157e:	f107 0210 	add.w	r2, r7, #16
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	4611      	mov	r1, r2
 8001588:	4618      	mov	r0, r3
 800158a:	f001 fa9f 	bl	8002acc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800158e:	6a3b      	ldr	r3, [r7, #32]
 8001590:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001594:	2b00      	cmp	r3, #0
 8001596:	d103      	bne.n	80015a0 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001598:	f001 fa82 	bl	8002aa0 <HAL_RCC_GetPCLK1Freq>
 800159c:	6378      	str	r0, [r7, #52]	; 0x34
 800159e:	e004      	b.n	80015aa <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80015a0:	f001 fa7e 	bl	8002aa0 <HAL_RCC_GetPCLK1Freq>
 80015a4:	4603      	mov	r3, r0
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015ac:	4a23      	ldr	r2, [pc, #140]	; (800163c <HAL_InitTick+0xe4>)
 80015ae:	fba2 2303 	umull	r2, r3, r2, r3
 80015b2:	0c9b      	lsrs	r3, r3, #18
 80015b4:	3b01      	subs	r3, #1
 80015b6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80015b8:	4b21      	ldr	r3, [pc, #132]	; (8001640 <HAL_InitTick+0xe8>)
 80015ba:	4a22      	ldr	r2, [pc, #136]	; (8001644 <HAL_InitTick+0xec>)
 80015bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80015be:	4b20      	ldr	r3, [pc, #128]	; (8001640 <HAL_InitTick+0xe8>)
 80015c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015c4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80015c6:	4a1e      	ldr	r2, [pc, #120]	; (8001640 <HAL_InitTick+0xe8>)
 80015c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ca:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80015cc:	4b1c      	ldr	r3, [pc, #112]	; (8001640 <HAL_InitTick+0xe8>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d2:	4b1b      	ldr	r3, [pc, #108]	; (8001640 <HAL_InitTick+0xe8>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d8:	4b19      	ldr	r3, [pc, #100]	; (8001640 <HAL_InitTick+0xe8>)
 80015da:	2200      	movs	r2, #0
 80015dc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80015de:	4818      	ldr	r0, [pc, #96]	; (8001640 <HAL_InitTick+0xe8>)
 80015e0:	f002 ff3a 	bl	8004458 <HAL_TIM_Base_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80015ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d11b      	bne.n	800162a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80015f2:	4813      	ldr	r0, [pc, #76]	; (8001640 <HAL_InitTick+0xe8>)
 80015f4:	f002 ff92 	bl	800451c <HAL_TIM_Base_Start_IT>
 80015f8:	4603      	mov	r3, r0
 80015fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80015fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001602:	2b00      	cmp	r3, #0
 8001604:	d111      	bne.n	800162a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001606:	201e      	movs	r0, #30
 8001608:	f000 f9c2 	bl	8001990 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2b0f      	cmp	r3, #15
 8001610:	d808      	bhi.n	8001624 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001612:	2200      	movs	r2, #0
 8001614:	6879      	ldr	r1, [r7, #4]
 8001616:	201e      	movs	r0, #30
 8001618:	f000 f99e 	bl	8001958 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800161c:	4a0a      	ldr	r2, [pc, #40]	; (8001648 <HAL_InitTick+0xf0>)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6013      	str	r3, [r2, #0]
 8001622:	e002      	b.n	800162a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800162a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800162e:	4618      	mov	r0, r3
 8001630:	3738      	adds	r7, #56	; 0x38
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40021000 	.word	0x40021000
 800163c:	431bde83 	.word	0x431bde83
 8001640:	20000118 	.word	0x20000118
 8001644:	40000800 	.word	0x40000800
 8001648:	2000006c 	.word	0x2000006c

0800164c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001650:	e7fe      	b.n	8001650 <NMI_Handler+0x4>

08001652 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001656:	e7fe      	b.n	8001656 <HardFault_Handler+0x4>

08001658 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800165c:	e7fe      	b.n	800165c <MemManage_Handler+0x4>

0800165e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001662:	e7fe      	b.n	8001662 <BusFault_Handler+0x4>

08001664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001668:	e7fe      	b.n	8001668 <UsageFault_Handler+0x4>

0800166a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
	...

080016a4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80016a8:	4802      	ldr	r0, [pc, #8]	; (80016b4 <TIM4_IRQHandler+0x10>)
 80016aa:	f002 ffa7 	bl	80045fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000118 	.word	0x20000118

080016b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016bc:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <SystemInit+0x20>)
 80016be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016c2:	4a05      	ldr	r2, [pc, #20]	; (80016d8 <SystemInit+0x20>)
 80016c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001714 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016e0:	f7ff ffea 	bl	80016b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016e4:	480c      	ldr	r0, [pc, #48]	; (8001718 <LoopForever+0x6>)
  ldr r1, =_edata
 80016e6:	490d      	ldr	r1, [pc, #52]	; (800171c <LoopForever+0xa>)
  ldr r2, =_sidata
 80016e8:	4a0d      	ldr	r2, [pc, #52]	; (8001720 <LoopForever+0xe>)
  movs r3, #0
 80016ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016ec:	e002      	b.n	80016f4 <LoopCopyDataInit>

080016ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016f2:	3304      	adds	r3, #4

080016f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016f8:	d3f9      	bcc.n	80016ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016fa:	4a0a      	ldr	r2, [pc, #40]	; (8001724 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016fc:	4c0a      	ldr	r4, [pc, #40]	; (8001728 <LoopForever+0x16>)
  movs r3, #0
 80016fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001700:	e001      	b.n	8001706 <LoopFillZerobss>

08001702 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001702:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001704:	3204      	adds	r2, #4

08001706 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001706:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001708:	d3fb      	bcc.n	8001702 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800170a:	f003 f961 	bl	80049d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800170e:	f7ff fa6b 	bl	8000be8 <main>

08001712 <LoopForever>:

LoopForever:
    b LoopForever
 8001712:	e7fe      	b.n	8001712 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001714:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001718:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800171c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001720:	08004fcc 	.word	0x08004fcc
  ldr r2, =_sbss
 8001724:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001728:	20000168 	.word	0x20000168

0800172c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800172c:	e7fe      	b.n	800172c <ADC1_IRQHandler>

0800172e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001734:	2300      	movs	r3, #0
 8001736:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001738:	2003      	movs	r0, #3
 800173a:	f000 f902 	bl	8001942 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800173e:	200f      	movs	r0, #15
 8001740:	f7ff ff0a 	bl	8001558 <HAL_InitTick>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d002      	beq.n	8001750 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	71fb      	strb	r3, [r7, #7]
 800174e:	e001      	b.n	8001754 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001750:	f7ff fe6a 	bl	8001428 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001754:	79fb      	ldrb	r3, [r7, #7]
}
 8001756:	4618      	mov	r0, r3
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
	...

08001760 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001764:	4b06      	ldr	r3, [pc, #24]	; (8001780 <HAL_IncTick+0x20>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	461a      	mov	r2, r3
 800176a:	4b06      	ldr	r3, [pc, #24]	; (8001784 <HAL_IncTick+0x24>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4413      	add	r3, r2
 8001770:	4a04      	ldr	r2, [pc, #16]	; (8001784 <HAL_IncTick+0x24>)
 8001772:	6013      	str	r3, [r2, #0]
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	20000070 	.word	0x20000070
 8001784:	20000164 	.word	0x20000164

08001788 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  return uwTick;
 800178c:	4b03      	ldr	r3, [pc, #12]	; (800179c <HAL_GetTick+0x14>)
 800178e:	681b      	ldr	r3, [r3, #0]
}
 8001790:	4618      	mov	r0, r3
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	20000164 	.word	0x20000164

080017a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017a8:	f7ff ffee 	bl	8001788 <HAL_GetTick>
 80017ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b8:	d005      	beq.n	80017c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80017ba:	4b0a      	ldr	r3, [pc, #40]	; (80017e4 <HAL_Delay+0x44>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	461a      	mov	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	4413      	add	r3, r2
 80017c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017c6:	bf00      	nop
 80017c8:	f7ff ffde 	bl	8001788 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d8f7      	bhi.n	80017c8 <HAL_Delay+0x28>
  {
  }
}
 80017d8:	bf00      	nop
 80017da:	bf00      	nop
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000070 	.word	0x20000070

080017e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f8:	4b0c      	ldr	r3, [pc, #48]	; (800182c <__NVIC_SetPriorityGrouping+0x44>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017fe:	68ba      	ldr	r2, [r7, #8]
 8001800:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001804:	4013      	ands	r3, r2
 8001806:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001810:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001818:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800181a:	4a04      	ldr	r2, [pc, #16]	; (800182c <__NVIC_SetPriorityGrouping+0x44>)
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	60d3      	str	r3, [r2, #12]
}
 8001820:	bf00      	nop
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001834:	4b04      	ldr	r3, [pc, #16]	; (8001848 <__NVIC_GetPriorityGrouping+0x18>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	0a1b      	lsrs	r3, r3, #8
 800183a:	f003 0307 	and.w	r3, r3, #7
}
 800183e:	4618      	mov	r0, r3
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185a:	2b00      	cmp	r3, #0
 800185c:	db0b      	blt.n	8001876 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	f003 021f 	and.w	r2, r3, #31
 8001864:	4907      	ldr	r1, [pc, #28]	; (8001884 <__NVIC_EnableIRQ+0x38>)
 8001866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186a:	095b      	lsrs	r3, r3, #5
 800186c:	2001      	movs	r0, #1
 800186e:	fa00 f202 	lsl.w	r2, r0, r2
 8001872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	e000e100 	.word	0xe000e100

08001888 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	6039      	str	r1, [r7, #0]
 8001892:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001898:	2b00      	cmp	r3, #0
 800189a:	db0a      	blt.n	80018b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	490c      	ldr	r1, [pc, #48]	; (80018d4 <__NVIC_SetPriority+0x4c>)
 80018a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a6:	0112      	lsls	r2, r2, #4
 80018a8:	b2d2      	uxtb	r2, r2
 80018aa:	440b      	add	r3, r1
 80018ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018b0:	e00a      	b.n	80018c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	4908      	ldr	r1, [pc, #32]	; (80018d8 <__NVIC_SetPriority+0x50>)
 80018b8:	79fb      	ldrb	r3, [r7, #7]
 80018ba:	f003 030f 	and.w	r3, r3, #15
 80018be:	3b04      	subs	r3, #4
 80018c0:	0112      	lsls	r2, r2, #4
 80018c2:	b2d2      	uxtb	r2, r2
 80018c4:	440b      	add	r3, r1
 80018c6:	761a      	strb	r2, [r3, #24]
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	e000e100 	.word	0xe000e100
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018dc:	b480      	push	{r7}
 80018de:	b089      	sub	sp, #36	; 0x24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	f1c3 0307 	rsb	r3, r3, #7
 80018f6:	2b04      	cmp	r3, #4
 80018f8:	bf28      	it	cs
 80018fa:	2304      	movcs	r3, #4
 80018fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	3304      	adds	r3, #4
 8001902:	2b06      	cmp	r3, #6
 8001904:	d902      	bls.n	800190c <NVIC_EncodePriority+0x30>
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	3b03      	subs	r3, #3
 800190a:	e000      	b.n	800190e <NVIC_EncodePriority+0x32>
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001910:	f04f 32ff 	mov.w	r2, #4294967295
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43da      	mvns	r2, r3
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	401a      	ands	r2, r3
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001924:	f04f 31ff 	mov.w	r1, #4294967295
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	fa01 f303 	lsl.w	r3, r1, r3
 800192e:	43d9      	mvns	r1, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001934:	4313      	orrs	r3, r2
         );
}
 8001936:	4618      	mov	r0, r3
 8001938:	3724      	adds	r7, #36	; 0x24
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b082      	sub	sp, #8
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f7ff ff4c 	bl	80017e8 <__NVIC_SetPriorityGrouping>
}
 8001950:	bf00      	nop
 8001952:	3708      	adds	r7, #8
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
 8001964:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001966:	2300      	movs	r3, #0
 8001968:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800196a:	f7ff ff61 	bl	8001830 <__NVIC_GetPriorityGrouping>
 800196e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	68b9      	ldr	r1, [r7, #8]
 8001974:	6978      	ldr	r0, [r7, #20]
 8001976:	f7ff ffb1 	bl	80018dc <NVIC_EncodePriority>
 800197a:	4602      	mov	r2, r0
 800197c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001980:	4611      	mov	r1, r2
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff ff80 	bl	8001888 <__NVIC_SetPriority>
}
 8001988:	bf00      	nop
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800199a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff ff54 	bl	800184c <__NVIC_EnableIRQ>
}
 80019a4:	bf00      	nop
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b087      	sub	sp, #28
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019b6:	2300      	movs	r3, #0
 80019b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ba:	e166      	b.n	8001c8a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	2101      	movs	r1, #1
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	fa01 f303 	lsl.w	r3, r1, r3
 80019c8:	4013      	ands	r3, r2
 80019ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	f000 8158 	beq.w	8001c84 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f003 0303 	and.w	r3, r3, #3
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d005      	beq.n	80019ec <HAL_GPIO_Init+0x40>
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f003 0303 	and.w	r3, r3, #3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d130      	bne.n	8001a4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	2203      	movs	r2, #3
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	43db      	mvns	r3, r3
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	4013      	ands	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	68da      	ldr	r2, [r3, #12]
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a22:	2201      	movs	r2, #1
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	091b      	lsrs	r3, r3, #4
 8001a38:	f003 0201 	and.w	r2, r3, #1
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f003 0303 	and.w	r3, r3, #3
 8001a56:	2b03      	cmp	r3, #3
 8001a58:	d017      	beq.n	8001a8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	2203      	movs	r2, #3
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	689a      	ldr	r2, [r3, #8]
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d123      	bne.n	8001ade <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	08da      	lsrs	r2, r3, #3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	3208      	adds	r2, #8
 8001a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	220f      	movs	r2, #15
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	691a      	ldr	r2, [r3, #16]
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	f003 0307 	and.w	r3, r3, #7
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	08da      	lsrs	r2, r3, #3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3208      	adds	r2, #8
 8001ad8:	6939      	ldr	r1, [r7, #16]
 8001ada:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	2203      	movs	r2, #3
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43db      	mvns	r3, r3
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	4013      	ands	r3, r2
 8001af4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f003 0203 	and.w	r2, r3, #3
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f000 80b2 	beq.w	8001c84 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b20:	4b61      	ldr	r3, [pc, #388]	; (8001ca8 <HAL_GPIO_Init+0x2fc>)
 8001b22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b24:	4a60      	ldr	r2, [pc, #384]	; (8001ca8 <HAL_GPIO_Init+0x2fc>)
 8001b26:	f043 0301 	orr.w	r3, r3, #1
 8001b2a:	6613      	str	r3, [r2, #96]	; 0x60
 8001b2c:	4b5e      	ldr	r3, [pc, #376]	; (8001ca8 <HAL_GPIO_Init+0x2fc>)
 8001b2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b30:	f003 0301 	and.w	r3, r3, #1
 8001b34:	60bb      	str	r3, [r7, #8]
 8001b36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b38:	4a5c      	ldr	r2, [pc, #368]	; (8001cac <HAL_GPIO_Init+0x300>)
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	089b      	lsrs	r3, r3, #2
 8001b3e:	3302      	adds	r3, #2
 8001b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	f003 0303 	and.w	r3, r3, #3
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	220f      	movs	r2, #15
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b62:	d02b      	beq.n	8001bbc <HAL_GPIO_Init+0x210>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4a52      	ldr	r2, [pc, #328]	; (8001cb0 <HAL_GPIO_Init+0x304>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d025      	beq.n	8001bb8 <HAL_GPIO_Init+0x20c>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4a51      	ldr	r2, [pc, #324]	; (8001cb4 <HAL_GPIO_Init+0x308>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d01f      	beq.n	8001bb4 <HAL_GPIO_Init+0x208>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4a50      	ldr	r2, [pc, #320]	; (8001cb8 <HAL_GPIO_Init+0x30c>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d019      	beq.n	8001bb0 <HAL_GPIO_Init+0x204>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a4f      	ldr	r2, [pc, #316]	; (8001cbc <HAL_GPIO_Init+0x310>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d013      	beq.n	8001bac <HAL_GPIO_Init+0x200>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a4e      	ldr	r2, [pc, #312]	; (8001cc0 <HAL_GPIO_Init+0x314>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d00d      	beq.n	8001ba8 <HAL_GPIO_Init+0x1fc>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a4d      	ldr	r2, [pc, #308]	; (8001cc4 <HAL_GPIO_Init+0x318>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d007      	beq.n	8001ba4 <HAL_GPIO_Init+0x1f8>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a4c      	ldr	r2, [pc, #304]	; (8001cc8 <HAL_GPIO_Init+0x31c>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d101      	bne.n	8001ba0 <HAL_GPIO_Init+0x1f4>
 8001b9c:	2307      	movs	r3, #7
 8001b9e:	e00e      	b.n	8001bbe <HAL_GPIO_Init+0x212>
 8001ba0:	2308      	movs	r3, #8
 8001ba2:	e00c      	b.n	8001bbe <HAL_GPIO_Init+0x212>
 8001ba4:	2306      	movs	r3, #6
 8001ba6:	e00a      	b.n	8001bbe <HAL_GPIO_Init+0x212>
 8001ba8:	2305      	movs	r3, #5
 8001baa:	e008      	b.n	8001bbe <HAL_GPIO_Init+0x212>
 8001bac:	2304      	movs	r3, #4
 8001bae:	e006      	b.n	8001bbe <HAL_GPIO_Init+0x212>
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e004      	b.n	8001bbe <HAL_GPIO_Init+0x212>
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	e002      	b.n	8001bbe <HAL_GPIO_Init+0x212>
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e000      	b.n	8001bbe <HAL_GPIO_Init+0x212>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	697a      	ldr	r2, [r7, #20]
 8001bc0:	f002 0203 	and.w	r2, r2, #3
 8001bc4:	0092      	lsls	r2, r2, #2
 8001bc6:	4093      	lsls	r3, r2
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bce:	4937      	ldr	r1, [pc, #220]	; (8001cac <HAL_GPIO_Init+0x300>)
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	089b      	lsrs	r3, r3, #2
 8001bd4:	3302      	adds	r3, #2
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bdc:	4b3b      	ldr	r3, [pc, #236]	; (8001ccc <HAL_GPIO_Init+0x320>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	43db      	mvns	r3, r3
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	4013      	ands	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d003      	beq.n	8001c00 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c00:	4a32      	ldr	r2, [pc, #200]	; (8001ccc <HAL_GPIO_Init+0x320>)
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c06:	4b31      	ldr	r3, [pc, #196]	; (8001ccc <HAL_GPIO_Init+0x320>)
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	4013      	ands	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c2a:	4a28      	ldr	r2, [pc, #160]	; (8001ccc <HAL_GPIO_Init+0x320>)
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c30:	4b26      	ldr	r3, [pc, #152]	; (8001ccc <HAL_GPIO_Init+0x320>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d003      	beq.n	8001c54 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c54:	4a1d      	ldr	r2, [pc, #116]	; (8001ccc <HAL_GPIO_Init+0x320>)
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001c5a:	4b1c      	ldr	r3, [pc, #112]	; (8001ccc <HAL_GPIO_Init+0x320>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	43db      	mvns	r3, r3
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	4013      	ands	r3, r2
 8001c68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d003      	beq.n	8001c7e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c7e:	4a13      	ldr	r2, [pc, #76]	; (8001ccc <HAL_GPIO_Init+0x320>)
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	3301      	adds	r3, #1
 8001c88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	fa22 f303 	lsr.w	r3, r2, r3
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f47f ae91 	bne.w	80019bc <HAL_GPIO_Init+0x10>
  }
}
 8001c9a:	bf00      	nop
 8001c9c:	bf00      	nop
 8001c9e:	371c      	adds	r7, #28
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	40010000 	.word	0x40010000
 8001cb0:	48000400 	.word	0x48000400
 8001cb4:	48000800 	.word	0x48000800
 8001cb8:	48000c00 	.word	0x48000c00
 8001cbc:	48001000 	.word	0x48001000
 8001cc0:	48001400 	.word	0x48001400
 8001cc4:	48001800 	.word	0x48001800
 8001cc8:	48001c00 	.word	0x48001c00
 8001ccc:	40010400 	.word	0x40010400

08001cd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	460b      	mov	r3, r1
 8001cda:	807b      	strh	r3, [r7, #2]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ce0:	787b      	ldrb	r3, [r7, #1]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ce6:	887a      	ldrh	r2, [r7, #2]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cec:	e002      	b.n	8001cf4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cee:	887a      	ldrh	r2, [r7, #2]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d04:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a04      	ldr	r2, [pc, #16]	; (8001d1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001d0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d0e:	6013      	str	r3, [r2, #0]
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	40007000 	.word	0x40007000

08001d20 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d24:	4b0d      	ldr	r3, [pc, #52]	; (8001d5c <HAL_PWREx_GetVoltageRange+0x3c>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d30:	d102      	bne.n	8001d38 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001d32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d36:	e00b      	b.n	8001d50 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001d38:	4b08      	ldr	r3, [pc, #32]	; (8001d5c <HAL_PWREx_GetVoltageRange+0x3c>)
 8001d3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d46:	d102      	bne.n	8001d4e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001d48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d4c:	e000      	b.n	8001d50 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001d4e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	40007000 	.word	0x40007000

08001d60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d141      	bne.n	8001df2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d6e:	4b4b      	ldr	r3, [pc, #300]	; (8001e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d7a:	d131      	bne.n	8001de0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d7c:	4b47      	ldr	r3, [pc, #284]	; (8001e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d82:	4a46      	ldr	r2, [pc, #280]	; (8001e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d88:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d8c:	4b43      	ldr	r3, [pc, #268]	; (8001e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d94:	4a41      	ldr	r2, [pc, #260]	; (8001e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d9a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001d9c:	4b40      	ldr	r3, [pc, #256]	; (8001ea0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2232      	movs	r2, #50	; 0x32
 8001da2:	fb02 f303 	mul.w	r3, r2, r3
 8001da6:	4a3f      	ldr	r2, [pc, #252]	; (8001ea4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001da8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dac:	0c9b      	lsrs	r3, r3, #18
 8001dae:	3301      	adds	r3, #1
 8001db0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001db2:	e002      	b.n	8001dba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	3b01      	subs	r3, #1
 8001db8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dba:	4b38      	ldr	r3, [pc, #224]	; (8001e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dc6:	d102      	bne.n	8001dce <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1f2      	bne.n	8001db4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001dce:	4b33      	ldr	r3, [pc, #204]	; (8001e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dda:	d158      	bne.n	8001e8e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e057      	b.n	8001e90 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001de0:	4b2e      	ldr	r3, [pc, #184]	; (8001e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001de2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001de6:	4a2d      	ldr	r2, [pc, #180]	; (8001e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001de8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001dec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001df0:	e04d      	b.n	8001e8e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001df8:	d141      	bne.n	8001e7e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001dfa:	4b28      	ldr	r3, [pc, #160]	; (8001e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e06:	d131      	bne.n	8001e6c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e08:	4b24      	ldr	r3, [pc, #144]	; (8001e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e0e:	4a23      	ldr	r2, [pc, #140]	; (8001e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e14:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e18:	4b20      	ldr	r3, [pc, #128]	; (8001e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e20:	4a1e      	ldr	r2, [pc, #120]	; (8001e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e26:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001e28:	4b1d      	ldr	r3, [pc, #116]	; (8001ea0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2232      	movs	r2, #50	; 0x32
 8001e2e:	fb02 f303 	mul.w	r3, r2, r3
 8001e32:	4a1c      	ldr	r2, [pc, #112]	; (8001ea4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001e34:	fba2 2303 	umull	r2, r3, r2, r3
 8001e38:	0c9b      	lsrs	r3, r3, #18
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e3e:	e002      	b.n	8001e46 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	3b01      	subs	r3, #1
 8001e44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e46:	4b15      	ldr	r3, [pc, #84]	; (8001e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e52:	d102      	bne.n	8001e5a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1f2      	bne.n	8001e40 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e5a:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e66:	d112      	bne.n	8001e8e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e011      	b.n	8001e90 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e6c:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e72:	4a0a      	ldr	r2, [pc, #40]	; (8001e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001e7c:	e007      	b.n	8001e8e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e7e:	4b07      	ldr	r3, [pc, #28]	; (8001e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e86:	4a05      	ldr	r2, [pc, #20]	; (8001e9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e8c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3714      	adds	r7, #20
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	40007000 	.word	0x40007000
 8001ea0:	20000068 	.word	0x20000068
 8001ea4:	431bde83 	.word	0x431bde83

08001ea8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001eac:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	4a04      	ldr	r2, [pc, #16]	; (8001ec4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001eb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eb6:	6053      	str	r3, [r2, #4]
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	40007000 	.word	0x40007000

08001ec8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b088      	sub	sp, #32
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d102      	bne.n	8001edc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	f000 bc08 	b.w	80026ec <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001edc:	4b96      	ldr	r3, [pc, #600]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f003 030c 	and.w	r3, r3, #12
 8001ee4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ee6:	4b94      	ldr	r3, [pc, #592]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	f003 0303 	and.w	r3, r3, #3
 8001eee:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0310 	and.w	r3, r3, #16
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f000 80e4 	beq.w	80020c6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d007      	beq.n	8001f14 <HAL_RCC_OscConfig+0x4c>
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	2b0c      	cmp	r3, #12
 8001f08:	f040 808b 	bne.w	8002022 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	f040 8087 	bne.w	8002022 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f14:	4b88      	ldr	r3, [pc, #544]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d005      	beq.n	8001f2c <HAL_RCC_OscConfig+0x64>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e3df      	b.n	80026ec <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a1a      	ldr	r2, [r3, #32]
 8001f30:	4b81      	ldr	r3, [pc, #516]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0308 	and.w	r3, r3, #8
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d004      	beq.n	8001f46 <HAL_RCC_OscConfig+0x7e>
 8001f3c:	4b7e      	ldr	r3, [pc, #504]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f44:	e005      	b.n	8001f52 <HAL_RCC_OscConfig+0x8a>
 8001f46:	4b7c      	ldr	r3, [pc, #496]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001f48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f4c:	091b      	lsrs	r3, r3, #4
 8001f4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d223      	bcs.n	8001f9e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f000 fde8 	bl	8002b30 <RCC_SetFlashLatencyFromMSIRange>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e3c0      	b.n	80026ec <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f6a:	4b73      	ldr	r3, [pc, #460]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a72      	ldr	r2, [pc, #456]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001f70:	f043 0308 	orr.w	r3, r3, #8
 8001f74:	6013      	str	r3, [r2, #0]
 8001f76:	4b70      	ldr	r3, [pc, #448]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a1b      	ldr	r3, [r3, #32]
 8001f82:	496d      	ldr	r1, [pc, #436]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f88:	4b6b      	ldr	r3, [pc, #428]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	69db      	ldr	r3, [r3, #28]
 8001f94:	021b      	lsls	r3, r3, #8
 8001f96:	4968      	ldr	r1, [pc, #416]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	604b      	str	r3, [r1, #4]
 8001f9c:	e025      	b.n	8001fea <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f9e:	4b66      	ldr	r3, [pc, #408]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a65      	ldr	r2, [pc, #404]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001fa4:	f043 0308 	orr.w	r3, r3, #8
 8001fa8:	6013      	str	r3, [r2, #0]
 8001faa:	4b63      	ldr	r3, [pc, #396]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	4960      	ldr	r1, [pc, #384]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fbc:	4b5e      	ldr	r3, [pc, #376]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	69db      	ldr	r3, [r3, #28]
 8001fc8:	021b      	lsls	r3, r3, #8
 8001fca:	495b      	ldr	r1, [pc, #364]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d109      	bne.n	8001fea <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f000 fda8 	bl	8002b30 <RCC_SetFlashLatencyFromMSIRange>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e380      	b.n	80026ec <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fea:	f000 fcc1 	bl	8002970 <HAL_RCC_GetSysClockFreq>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	4b51      	ldr	r3, [pc, #324]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	091b      	lsrs	r3, r3, #4
 8001ff6:	f003 030f 	and.w	r3, r3, #15
 8001ffa:	4950      	ldr	r1, [pc, #320]	; (800213c <HAL_RCC_OscConfig+0x274>)
 8001ffc:	5ccb      	ldrb	r3, [r1, r3]
 8001ffe:	f003 031f 	and.w	r3, r3, #31
 8002002:	fa22 f303 	lsr.w	r3, r2, r3
 8002006:	4a4e      	ldr	r2, [pc, #312]	; (8002140 <HAL_RCC_OscConfig+0x278>)
 8002008:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800200a:	4b4e      	ldr	r3, [pc, #312]	; (8002144 <HAL_RCC_OscConfig+0x27c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff faa2 	bl	8001558 <HAL_InitTick>
 8002014:	4603      	mov	r3, r0
 8002016:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002018:	7bfb      	ldrb	r3, [r7, #15]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d052      	beq.n	80020c4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800201e:	7bfb      	ldrb	r3, [r7, #15]
 8002020:	e364      	b.n	80026ec <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d032      	beq.n	8002090 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800202a:	4b43      	ldr	r3, [pc, #268]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a42      	ldr	r2, [pc, #264]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8002030:	f043 0301 	orr.w	r3, r3, #1
 8002034:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002036:	f7ff fba7 	bl	8001788 <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800203c:	e008      	b.n	8002050 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800203e:	f7ff fba3 	bl	8001788 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e34d      	b.n	80026ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002050:	4b39      	ldr	r3, [pc, #228]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d0f0      	beq.n	800203e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800205c:	4b36      	ldr	r3, [pc, #216]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a35      	ldr	r2, [pc, #212]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8002062:	f043 0308 	orr.w	r3, r3, #8
 8002066:	6013      	str	r3, [r2, #0]
 8002068:	4b33      	ldr	r3, [pc, #204]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	4930      	ldr	r1, [pc, #192]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8002076:	4313      	orrs	r3, r2
 8002078:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800207a:	4b2f      	ldr	r3, [pc, #188]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	021b      	lsls	r3, r3, #8
 8002088:	492b      	ldr	r1, [pc, #172]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 800208a:	4313      	orrs	r3, r2
 800208c:	604b      	str	r3, [r1, #4]
 800208e:	e01a      	b.n	80020c6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002090:	4b29      	ldr	r3, [pc, #164]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a28      	ldr	r2, [pc, #160]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8002096:	f023 0301 	bic.w	r3, r3, #1
 800209a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800209c:	f7ff fb74 	bl	8001788 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020a4:	f7ff fb70 	bl	8001788 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e31a      	b.n	80026ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020b6:	4b20      	ldr	r3, [pc, #128]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1f0      	bne.n	80020a4 <HAL_RCC_OscConfig+0x1dc>
 80020c2:	e000      	b.n	80020c6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d073      	beq.n	80021ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	2b08      	cmp	r3, #8
 80020d6:	d005      	beq.n	80020e4 <HAL_RCC_OscConfig+0x21c>
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	2b0c      	cmp	r3, #12
 80020dc:	d10e      	bne.n	80020fc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	2b03      	cmp	r3, #3
 80020e2:	d10b      	bne.n	80020fc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020e4:	4b14      	ldr	r3, [pc, #80]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d063      	beq.n	80021b8 <HAL_RCC_OscConfig+0x2f0>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d15f      	bne.n	80021b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e2f7      	b.n	80026ec <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002104:	d106      	bne.n	8002114 <HAL_RCC_OscConfig+0x24c>
 8002106:	4b0c      	ldr	r3, [pc, #48]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a0b      	ldr	r2, [pc, #44]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 800210c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002110:	6013      	str	r3, [r2, #0]
 8002112:	e025      	b.n	8002160 <HAL_RCC_OscConfig+0x298>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800211c:	d114      	bne.n	8002148 <HAL_RCC_OscConfig+0x280>
 800211e:	4b06      	ldr	r3, [pc, #24]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a05      	ldr	r2, [pc, #20]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8002124:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	4b03      	ldr	r3, [pc, #12]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a02      	ldr	r2, [pc, #8]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8002130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	e013      	b.n	8002160 <HAL_RCC_OscConfig+0x298>
 8002138:	40021000 	.word	0x40021000
 800213c:	08004f7c 	.word	0x08004f7c
 8002140:	20000068 	.word	0x20000068
 8002144:	2000006c 	.word	0x2000006c
 8002148:	4ba0      	ldr	r3, [pc, #640]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a9f      	ldr	r2, [pc, #636]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 800214e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002152:	6013      	str	r3, [r2, #0]
 8002154:	4b9d      	ldr	r3, [pc, #628]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a9c      	ldr	r2, [pc, #624]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 800215a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800215e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d013      	beq.n	8002190 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002168:	f7ff fb0e 	bl	8001788 <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002170:	f7ff fb0a 	bl	8001788 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b64      	cmp	r3, #100	; 0x64
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e2b4      	b.n	80026ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002182:	4b92      	ldr	r3, [pc, #584]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d0f0      	beq.n	8002170 <HAL_RCC_OscConfig+0x2a8>
 800218e:	e014      	b.n	80021ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002190:	f7ff fafa 	bl	8001788 <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002198:	f7ff faf6 	bl	8001788 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b64      	cmp	r3, #100	; 0x64
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e2a0      	b.n	80026ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021aa:	4b88      	ldr	r3, [pc, #544]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1f0      	bne.n	8002198 <HAL_RCC_OscConfig+0x2d0>
 80021b6:	e000      	b.n	80021ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d060      	beq.n	8002288 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	2b04      	cmp	r3, #4
 80021ca:	d005      	beq.n	80021d8 <HAL_RCC_OscConfig+0x310>
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	2b0c      	cmp	r3, #12
 80021d0:	d119      	bne.n	8002206 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d116      	bne.n	8002206 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021d8:	4b7c      	ldr	r3, [pc, #496]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d005      	beq.n	80021f0 <HAL_RCC_OscConfig+0x328>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d101      	bne.n	80021f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e27d      	b.n	80026ec <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f0:	4b76      	ldr	r3, [pc, #472]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	061b      	lsls	r3, r3, #24
 80021fe:	4973      	ldr	r1, [pc, #460]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 8002200:	4313      	orrs	r3, r2
 8002202:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002204:	e040      	b.n	8002288 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d023      	beq.n	8002256 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800220e:	4b6f      	ldr	r3, [pc, #444]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a6e      	ldr	r2, [pc, #440]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 8002214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002218:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800221a:	f7ff fab5 	bl	8001788 <HAL_GetTick>
 800221e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002220:	e008      	b.n	8002234 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002222:	f7ff fab1 	bl	8001788 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e25b      	b.n	80026ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002234:	4b65      	ldr	r3, [pc, #404]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800223c:	2b00      	cmp	r3, #0
 800223e:	d0f0      	beq.n	8002222 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002240:	4b62      	ldr	r3, [pc, #392]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	061b      	lsls	r3, r3, #24
 800224e:	495f      	ldr	r1, [pc, #380]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 8002250:	4313      	orrs	r3, r2
 8002252:	604b      	str	r3, [r1, #4]
 8002254:	e018      	b.n	8002288 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002256:	4b5d      	ldr	r3, [pc, #372]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a5c      	ldr	r2, [pc, #368]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 800225c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002260:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002262:	f7ff fa91 	bl	8001788 <HAL_GetTick>
 8002266:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002268:	e008      	b.n	800227c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800226a:	f7ff fa8d 	bl	8001788 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e237      	b.n	80026ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800227c:	4b53      	ldr	r3, [pc, #332]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1f0      	bne.n	800226a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0308 	and.w	r3, r3, #8
 8002290:	2b00      	cmp	r3, #0
 8002292:	d03c      	beq.n	800230e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d01c      	beq.n	80022d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800229c:	4b4b      	ldr	r3, [pc, #300]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 800229e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022a2:	4a4a      	ldr	r2, [pc, #296]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 80022a4:	f043 0301 	orr.w	r3, r3, #1
 80022a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ac:	f7ff fa6c 	bl	8001788 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022b4:	f7ff fa68 	bl	8001788 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e212      	b.n	80026ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022c6:	4b41      	ldr	r3, [pc, #260]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 80022c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0ef      	beq.n	80022b4 <HAL_RCC_OscConfig+0x3ec>
 80022d4:	e01b      	b.n	800230e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022d6:	4b3d      	ldr	r3, [pc, #244]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 80022d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022dc:	4a3b      	ldr	r2, [pc, #236]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 80022de:	f023 0301 	bic.w	r3, r3, #1
 80022e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e6:	f7ff fa4f 	bl	8001788 <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022ec:	e008      	b.n	8002300 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ee:	f7ff fa4b 	bl	8001788 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e1f5      	b.n	80026ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002300:	4b32      	ldr	r3, [pc, #200]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 8002302:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1ef      	bne.n	80022ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0304 	and.w	r3, r3, #4
 8002316:	2b00      	cmp	r3, #0
 8002318:	f000 80a6 	beq.w	8002468 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800231c:	2300      	movs	r3, #0
 800231e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002320:	4b2a      	ldr	r3, [pc, #168]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 8002322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d10d      	bne.n	8002348 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800232c:	4b27      	ldr	r3, [pc, #156]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 800232e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002330:	4a26      	ldr	r2, [pc, #152]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 8002332:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002336:	6593      	str	r3, [r2, #88]	; 0x58
 8002338:	4b24      	ldr	r3, [pc, #144]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 800233a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002340:	60bb      	str	r3, [r7, #8]
 8002342:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002344:	2301      	movs	r3, #1
 8002346:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002348:	4b21      	ldr	r3, [pc, #132]	; (80023d0 <HAL_RCC_OscConfig+0x508>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002350:	2b00      	cmp	r3, #0
 8002352:	d118      	bne.n	8002386 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002354:	4b1e      	ldr	r3, [pc, #120]	; (80023d0 <HAL_RCC_OscConfig+0x508>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a1d      	ldr	r2, [pc, #116]	; (80023d0 <HAL_RCC_OscConfig+0x508>)
 800235a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800235e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002360:	f7ff fa12 	bl	8001788 <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002368:	f7ff fa0e 	bl	8001788 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e1b8      	b.n	80026ec <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800237a:	4b15      	ldr	r3, [pc, #84]	; (80023d0 <HAL_RCC_OscConfig+0x508>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0f0      	beq.n	8002368 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d108      	bne.n	80023a0 <HAL_RCC_OscConfig+0x4d8>
 800238e:	4b0f      	ldr	r3, [pc, #60]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 8002390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002394:	4a0d      	ldr	r2, [pc, #52]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 8002396:	f043 0301 	orr.w	r3, r3, #1
 800239a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800239e:	e029      	b.n	80023f4 <HAL_RCC_OscConfig+0x52c>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	2b05      	cmp	r3, #5
 80023a6:	d115      	bne.n	80023d4 <HAL_RCC_OscConfig+0x50c>
 80023a8:	4b08      	ldr	r3, [pc, #32]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 80023aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ae:	4a07      	ldr	r2, [pc, #28]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 80023b0:	f043 0304 	orr.w	r3, r3, #4
 80023b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023b8:	4b04      	ldr	r3, [pc, #16]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 80023ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023be:	4a03      	ldr	r2, [pc, #12]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 80023c0:	f043 0301 	orr.w	r3, r3, #1
 80023c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023c8:	e014      	b.n	80023f4 <HAL_RCC_OscConfig+0x52c>
 80023ca:	bf00      	nop
 80023cc:	40021000 	.word	0x40021000
 80023d0:	40007000 	.word	0x40007000
 80023d4:	4b9d      	ldr	r3, [pc, #628]	; (800264c <HAL_RCC_OscConfig+0x784>)
 80023d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023da:	4a9c      	ldr	r2, [pc, #624]	; (800264c <HAL_RCC_OscConfig+0x784>)
 80023dc:	f023 0301 	bic.w	r3, r3, #1
 80023e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023e4:	4b99      	ldr	r3, [pc, #612]	; (800264c <HAL_RCC_OscConfig+0x784>)
 80023e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ea:	4a98      	ldr	r2, [pc, #608]	; (800264c <HAL_RCC_OscConfig+0x784>)
 80023ec:	f023 0304 	bic.w	r3, r3, #4
 80023f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d016      	beq.n	800242a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023fc:	f7ff f9c4 	bl	8001788 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002402:	e00a      	b.n	800241a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002404:	f7ff f9c0 	bl	8001788 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002412:	4293      	cmp	r3, r2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e168      	b.n	80026ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800241a:	4b8c      	ldr	r3, [pc, #560]	; (800264c <HAL_RCC_OscConfig+0x784>)
 800241c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0ed      	beq.n	8002404 <HAL_RCC_OscConfig+0x53c>
 8002428:	e015      	b.n	8002456 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800242a:	f7ff f9ad 	bl	8001788 <HAL_GetTick>
 800242e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002430:	e00a      	b.n	8002448 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002432:	f7ff f9a9 	bl	8001788 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002440:	4293      	cmp	r3, r2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e151      	b.n	80026ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002448:	4b80      	ldr	r3, [pc, #512]	; (800264c <HAL_RCC_OscConfig+0x784>)
 800244a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1ed      	bne.n	8002432 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002456:	7ffb      	ldrb	r3, [r7, #31]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d105      	bne.n	8002468 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800245c:	4b7b      	ldr	r3, [pc, #492]	; (800264c <HAL_RCC_OscConfig+0x784>)
 800245e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002460:	4a7a      	ldr	r2, [pc, #488]	; (800264c <HAL_RCC_OscConfig+0x784>)
 8002462:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002466:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0320 	and.w	r3, r3, #32
 8002470:	2b00      	cmp	r3, #0
 8002472:	d03c      	beq.n	80024ee <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002478:	2b00      	cmp	r3, #0
 800247a:	d01c      	beq.n	80024b6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800247c:	4b73      	ldr	r3, [pc, #460]	; (800264c <HAL_RCC_OscConfig+0x784>)
 800247e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002482:	4a72      	ldr	r2, [pc, #456]	; (800264c <HAL_RCC_OscConfig+0x784>)
 8002484:	f043 0301 	orr.w	r3, r3, #1
 8002488:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800248c:	f7ff f97c 	bl	8001788 <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002494:	f7ff f978 	bl	8001788 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e122      	b.n	80026ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024a6:	4b69      	ldr	r3, [pc, #420]	; (800264c <HAL_RCC_OscConfig+0x784>)
 80024a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0ef      	beq.n	8002494 <HAL_RCC_OscConfig+0x5cc>
 80024b4:	e01b      	b.n	80024ee <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80024b6:	4b65      	ldr	r3, [pc, #404]	; (800264c <HAL_RCC_OscConfig+0x784>)
 80024b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024bc:	4a63      	ldr	r2, [pc, #396]	; (800264c <HAL_RCC_OscConfig+0x784>)
 80024be:	f023 0301 	bic.w	r3, r3, #1
 80024c2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c6:	f7ff f95f 	bl	8001788 <HAL_GetTick>
 80024ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024cc:	e008      	b.n	80024e0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024ce:	f7ff f95b 	bl	8001788 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e105      	b.n	80026ec <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024e0:	4b5a      	ldr	r3, [pc, #360]	; (800264c <HAL_RCC_OscConfig+0x784>)
 80024e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1ef      	bne.n	80024ce <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f000 80f9 	beq.w	80026ea <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	f040 80cf 	bne.w	80026a0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002502:	4b52      	ldr	r3, [pc, #328]	; (800264c <HAL_RCC_OscConfig+0x784>)
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	f003 0203 	and.w	r2, r3, #3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002512:	429a      	cmp	r2, r3
 8002514:	d12c      	bne.n	8002570 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002520:	3b01      	subs	r3, #1
 8002522:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002524:	429a      	cmp	r2, r3
 8002526:	d123      	bne.n	8002570 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002532:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002534:	429a      	cmp	r2, r3
 8002536:	d11b      	bne.n	8002570 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002542:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002544:	429a      	cmp	r2, r3
 8002546:	d113      	bne.n	8002570 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002552:	085b      	lsrs	r3, r3, #1
 8002554:	3b01      	subs	r3, #1
 8002556:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002558:	429a      	cmp	r2, r3
 800255a:	d109      	bne.n	8002570 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	085b      	lsrs	r3, r3, #1
 8002568:	3b01      	subs	r3, #1
 800256a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800256c:	429a      	cmp	r2, r3
 800256e:	d071      	beq.n	8002654 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	2b0c      	cmp	r3, #12
 8002574:	d068      	beq.n	8002648 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002576:	4b35      	ldr	r3, [pc, #212]	; (800264c <HAL_RCC_OscConfig+0x784>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d105      	bne.n	800258e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002582:	4b32      	ldr	r3, [pc, #200]	; (800264c <HAL_RCC_OscConfig+0x784>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e0ac      	b.n	80026ec <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002592:	4b2e      	ldr	r3, [pc, #184]	; (800264c <HAL_RCC_OscConfig+0x784>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a2d      	ldr	r2, [pc, #180]	; (800264c <HAL_RCC_OscConfig+0x784>)
 8002598:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800259c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800259e:	f7ff f8f3 	bl	8001788 <HAL_GetTick>
 80025a2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025a4:	e008      	b.n	80025b8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a6:	f7ff f8ef 	bl	8001788 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e099      	b.n	80026ec <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025b8:	4b24      	ldr	r3, [pc, #144]	; (800264c <HAL_RCC_OscConfig+0x784>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1f0      	bne.n	80025a6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025c4:	4b21      	ldr	r3, [pc, #132]	; (800264c <HAL_RCC_OscConfig+0x784>)
 80025c6:	68da      	ldr	r2, [r3, #12]
 80025c8:	4b21      	ldr	r3, [pc, #132]	; (8002650 <HAL_RCC_OscConfig+0x788>)
 80025ca:	4013      	ands	r3, r2
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80025d4:	3a01      	subs	r2, #1
 80025d6:	0112      	lsls	r2, r2, #4
 80025d8:	4311      	orrs	r1, r2
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025de:	0212      	lsls	r2, r2, #8
 80025e0:	4311      	orrs	r1, r2
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80025e6:	0852      	lsrs	r2, r2, #1
 80025e8:	3a01      	subs	r2, #1
 80025ea:	0552      	lsls	r2, r2, #21
 80025ec:	4311      	orrs	r1, r2
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80025f2:	0852      	lsrs	r2, r2, #1
 80025f4:	3a01      	subs	r2, #1
 80025f6:	0652      	lsls	r2, r2, #25
 80025f8:	4311      	orrs	r1, r2
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025fe:	06d2      	lsls	r2, r2, #27
 8002600:	430a      	orrs	r2, r1
 8002602:	4912      	ldr	r1, [pc, #72]	; (800264c <HAL_RCC_OscConfig+0x784>)
 8002604:	4313      	orrs	r3, r2
 8002606:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002608:	4b10      	ldr	r3, [pc, #64]	; (800264c <HAL_RCC_OscConfig+0x784>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a0f      	ldr	r2, [pc, #60]	; (800264c <HAL_RCC_OscConfig+0x784>)
 800260e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002612:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002614:	4b0d      	ldr	r3, [pc, #52]	; (800264c <HAL_RCC_OscConfig+0x784>)
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	4a0c      	ldr	r2, [pc, #48]	; (800264c <HAL_RCC_OscConfig+0x784>)
 800261a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800261e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002620:	f7ff f8b2 	bl	8001788 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002628:	f7ff f8ae 	bl	8001788 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e058      	b.n	80026ec <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800263a:	4b04      	ldr	r3, [pc, #16]	; (800264c <HAL_RCC_OscConfig+0x784>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d0f0      	beq.n	8002628 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002646:	e050      	b.n	80026ea <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e04f      	b.n	80026ec <HAL_RCC_OscConfig+0x824>
 800264c:	40021000 	.word	0x40021000
 8002650:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002654:	4b27      	ldr	r3, [pc, #156]	; (80026f4 <HAL_RCC_OscConfig+0x82c>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d144      	bne.n	80026ea <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002660:	4b24      	ldr	r3, [pc, #144]	; (80026f4 <HAL_RCC_OscConfig+0x82c>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a23      	ldr	r2, [pc, #140]	; (80026f4 <HAL_RCC_OscConfig+0x82c>)
 8002666:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800266a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800266c:	4b21      	ldr	r3, [pc, #132]	; (80026f4 <HAL_RCC_OscConfig+0x82c>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	4a20      	ldr	r2, [pc, #128]	; (80026f4 <HAL_RCC_OscConfig+0x82c>)
 8002672:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002676:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002678:	f7ff f886 	bl	8001788 <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002680:	f7ff f882 	bl	8001788 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e02c      	b.n	80026ec <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002692:	4b18      	ldr	r3, [pc, #96]	; (80026f4 <HAL_RCC_OscConfig+0x82c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d0f0      	beq.n	8002680 <HAL_RCC_OscConfig+0x7b8>
 800269e:	e024      	b.n	80026ea <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	2b0c      	cmp	r3, #12
 80026a4:	d01f      	beq.n	80026e6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a6:	4b13      	ldr	r3, [pc, #76]	; (80026f4 <HAL_RCC_OscConfig+0x82c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a12      	ldr	r2, [pc, #72]	; (80026f4 <HAL_RCC_OscConfig+0x82c>)
 80026ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b2:	f7ff f869 	bl	8001788 <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026b8:	e008      	b.n	80026cc <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ba:	f7ff f865 	bl	8001788 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e00f      	b.n	80026ec <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026cc:	4b09      	ldr	r3, [pc, #36]	; (80026f4 <HAL_RCC_OscConfig+0x82c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1f0      	bne.n	80026ba <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80026d8:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <HAL_RCC_OscConfig+0x82c>)
 80026da:	68da      	ldr	r2, [r3, #12]
 80026dc:	4905      	ldr	r1, [pc, #20]	; (80026f4 <HAL_RCC_OscConfig+0x82c>)
 80026de:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <HAL_RCC_OscConfig+0x830>)
 80026e0:	4013      	ands	r3, r2
 80026e2:	60cb      	str	r3, [r1, #12]
 80026e4:	e001      	b.n	80026ea <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e000      	b.n	80026ec <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3720      	adds	r7, #32
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40021000 	.word	0x40021000
 80026f8:	feeefffc 	.word	0xfeeefffc

080026fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002706:	2300      	movs	r3, #0
 8002708:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d101      	bne.n	8002714 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e11d      	b.n	8002950 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002714:	4b90      	ldr	r3, [pc, #576]	; (8002958 <HAL_RCC_ClockConfig+0x25c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 030f 	and.w	r3, r3, #15
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	429a      	cmp	r2, r3
 8002720:	d910      	bls.n	8002744 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002722:	4b8d      	ldr	r3, [pc, #564]	; (8002958 <HAL_RCC_ClockConfig+0x25c>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f023 020f 	bic.w	r2, r3, #15
 800272a:	498b      	ldr	r1, [pc, #556]	; (8002958 <HAL_RCC_ClockConfig+0x25c>)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	4313      	orrs	r3, r2
 8002730:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002732:	4b89      	ldr	r3, [pc, #548]	; (8002958 <HAL_RCC_ClockConfig+0x25c>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 030f 	and.w	r3, r3, #15
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	429a      	cmp	r2, r3
 800273e:	d001      	beq.n	8002744 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e105      	b.n	8002950 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d010      	beq.n	8002772 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689a      	ldr	r2, [r3, #8]
 8002754:	4b81      	ldr	r3, [pc, #516]	; (800295c <HAL_RCC_ClockConfig+0x260>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800275c:	429a      	cmp	r2, r3
 800275e:	d908      	bls.n	8002772 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002760:	4b7e      	ldr	r3, [pc, #504]	; (800295c <HAL_RCC_ClockConfig+0x260>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	497b      	ldr	r1, [pc, #492]	; (800295c <HAL_RCC_ClockConfig+0x260>)
 800276e:	4313      	orrs	r3, r2
 8002770:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b00      	cmp	r3, #0
 800277c:	d079      	beq.n	8002872 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b03      	cmp	r3, #3
 8002784:	d11e      	bne.n	80027c4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002786:	4b75      	ldr	r3, [pc, #468]	; (800295c <HAL_RCC_ClockConfig+0x260>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e0dc      	b.n	8002950 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002796:	f000 fa25 	bl	8002be4 <RCC_GetSysClockFreqFromPLLSource>
 800279a:	4603      	mov	r3, r0
 800279c:	4a70      	ldr	r2, [pc, #448]	; (8002960 <HAL_RCC_ClockConfig+0x264>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d946      	bls.n	8002830 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80027a2:	4b6e      	ldr	r3, [pc, #440]	; (800295c <HAL_RCC_ClockConfig+0x260>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d140      	bne.n	8002830 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80027ae:	4b6b      	ldr	r3, [pc, #428]	; (800295c <HAL_RCC_ClockConfig+0x260>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027b6:	4a69      	ldr	r2, [pc, #420]	; (800295c <HAL_RCC_ClockConfig+0x260>)
 80027b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027bc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80027be:	2380      	movs	r3, #128	; 0x80
 80027c0:	617b      	str	r3, [r7, #20]
 80027c2:	e035      	b.n	8002830 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d107      	bne.n	80027dc <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027cc:	4b63      	ldr	r3, [pc, #396]	; (800295c <HAL_RCC_ClockConfig+0x260>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d115      	bne.n	8002804 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e0b9      	b.n	8002950 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d107      	bne.n	80027f4 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027e4:	4b5d      	ldr	r3, [pc, #372]	; (800295c <HAL_RCC_ClockConfig+0x260>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d109      	bne.n	8002804 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e0ad      	b.n	8002950 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027f4:	4b59      	ldr	r3, [pc, #356]	; (800295c <HAL_RCC_ClockConfig+0x260>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e0a5      	b.n	8002950 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002804:	f000 f8b4 	bl	8002970 <HAL_RCC_GetSysClockFreq>
 8002808:	4603      	mov	r3, r0
 800280a:	4a55      	ldr	r2, [pc, #340]	; (8002960 <HAL_RCC_ClockConfig+0x264>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d90f      	bls.n	8002830 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002810:	4b52      	ldr	r3, [pc, #328]	; (800295c <HAL_RCC_ClockConfig+0x260>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d109      	bne.n	8002830 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800281c:	4b4f      	ldr	r3, [pc, #316]	; (800295c <HAL_RCC_ClockConfig+0x260>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002824:	4a4d      	ldr	r2, [pc, #308]	; (800295c <HAL_RCC_ClockConfig+0x260>)
 8002826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800282a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800282c:	2380      	movs	r3, #128	; 0x80
 800282e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002830:	4b4a      	ldr	r3, [pc, #296]	; (800295c <HAL_RCC_ClockConfig+0x260>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f023 0203 	bic.w	r2, r3, #3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	4947      	ldr	r1, [pc, #284]	; (800295c <HAL_RCC_ClockConfig+0x260>)
 800283e:	4313      	orrs	r3, r2
 8002840:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002842:	f7fe ffa1 	bl	8001788 <HAL_GetTick>
 8002846:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002848:	e00a      	b.n	8002860 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800284a:	f7fe ff9d 	bl	8001788 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	f241 3288 	movw	r2, #5000	; 0x1388
 8002858:	4293      	cmp	r3, r2
 800285a:	d901      	bls.n	8002860 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e077      	b.n	8002950 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002860:	4b3e      	ldr	r3, [pc, #248]	; (800295c <HAL_RCC_ClockConfig+0x260>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f003 020c 	and.w	r2, r3, #12
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	429a      	cmp	r2, r3
 8002870:	d1eb      	bne.n	800284a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	2b80      	cmp	r3, #128	; 0x80
 8002876:	d105      	bne.n	8002884 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002878:	4b38      	ldr	r3, [pc, #224]	; (800295c <HAL_RCC_ClockConfig+0x260>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	4a37      	ldr	r2, [pc, #220]	; (800295c <HAL_RCC_ClockConfig+0x260>)
 800287e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002882:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d010      	beq.n	80028b2 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	4b31      	ldr	r3, [pc, #196]	; (800295c <HAL_RCC_ClockConfig+0x260>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800289c:	429a      	cmp	r2, r3
 800289e:	d208      	bcs.n	80028b2 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028a0:	4b2e      	ldr	r3, [pc, #184]	; (800295c <HAL_RCC_ClockConfig+0x260>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	492b      	ldr	r1, [pc, #172]	; (800295c <HAL_RCC_ClockConfig+0x260>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028b2:	4b29      	ldr	r3, [pc, #164]	; (8002958 <HAL_RCC_ClockConfig+0x25c>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 030f 	and.w	r3, r3, #15
 80028ba:	683a      	ldr	r2, [r7, #0]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d210      	bcs.n	80028e2 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028c0:	4b25      	ldr	r3, [pc, #148]	; (8002958 <HAL_RCC_ClockConfig+0x25c>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f023 020f 	bic.w	r2, r3, #15
 80028c8:	4923      	ldr	r1, [pc, #140]	; (8002958 <HAL_RCC_ClockConfig+0x25c>)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028d0:	4b21      	ldr	r3, [pc, #132]	; (8002958 <HAL_RCC_ClockConfig+0x25c>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 030f 	and.w	r3, r3, #15
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d001      	beq.n	80028e2 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e036      	b.n	8002950 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0304 	and.w	r3, r3, #4
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d008      	beq.n	8002900 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028ee:	4b1b      	ldr	r3, [pc, #108]	; (800295c <HAL_RCC_ClockConfig+0x260>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	4918      	ldr	r1, [pc, #96]	; (800295c <HAL_RCC_ClockConfig+0x260>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0308 	and.w	r3, r3, #8
 8002908:	2b00      	cmp	r3, #0
 800290a:	d009      	beq.n	8002920 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800290c:	4b13      	ldr	r3, [pc, #76]	; (800295c <HAL_RCC_ClockConfig+0x260>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	4910      	ldr	r1, [pc, #64]	; (800295c <HAL_RCC_ClockConfig+0x260>)
 800291c:	4313      	orrs	r3, r2
 800291e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002920:	f000 f826 	bl	8002970 <HAL_RCC_GetSysClockFreq>
 8002924:	4602      	mov	r2, r0
 8002926:	4b0d      	ldr	r3, [pc, #52]	; (800295c <HAL_RCC_ClockConfig+0x260>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	091b      	lsrs	r3, r3, #4
 800292c:	f003 030f 	and.w	r3, r3, #15
 8002930:	490c      	ldr	r1, [pc, #48]	; (8002964 <HAL_RCC_ClockConfig+0x268>)
 8002932:	5ccb      	ldrb	r3, [r1, r3]
 8002934:	f003 031f 	and.w	r3, r3, #31
 8002938:	fa22 f303 	lsr.w	r3, r2, r3
 800293c:	4a0a      	ldr	r2, [pc, #40]	; (8002968 <HAL_RCC_ClockConfig+0x26c>)
 800293e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002940:	4b0a      	ldr	r3, [pc, #40]	; (800296c <HAL_RCC_ClockConfig+0x270>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4618      	mov	r0, r3
 8002946:	f7fe fe07 	bl	8001558 <HAL_InitTick>
 800294a:	4603      	mov	r3, r0
 800294c:	73fb      	strb	r3, [r7, #15]

  return status;
 800294e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002950:	4618      	mov	r0, r3
 8002952:	3718      	adds	r7, #24
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40022000 	.word	0x40022000
 800295c:	40021000 	.word	0x40021000
 8002960:	04c4b400 	.word	0x04c4b400
 8002964:	08004f7c 	.word	0x08004f7c
 8002968:	20000068 	.word	0x20000068
 800296c:	2000006c 	.word	0x2000006c

08002970 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002970:	b480      	push	{r7}
 8002972:	b089      	sub	sp, #36	; 0x24
 8002974:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002976:	2300      	movs	r3, #0
 8002978:	61fb      	str	r3, [r7, #28]
 800297a:	2300      	movs	r3, #0
 800297c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800297e:	4b3e      	ldr	r3, [pc, #248]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 030c 	and.w	r3, r3, #12
 8002986:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002988:	4b3b      	ldr	r3, [pc, #236]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x108>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	f003 0303 	and.w	r3, r3, #3
 8002990:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d005      	beq.n	80029a4 <HAL_RCC_GetSysClockFreq+0x34>
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	2b0c      	cmp	r3, #12
 800299c:	d121      	bne.n	80029e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d11e      	bne.n	80029e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80029a4:	4b34      	ldr	r3, [pc, #208]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x108>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0308 	and.w	r3, r3, #8
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d107      	bne.n	80029c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80029b0:	4b31      	ldr	r3, [pc, #196]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x108>)
 80029b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029b6:	0a1b      	lsrs	r3, r3, #8
 80029b8:	f003 030f 	and.w	r3, r3, #15
 80029bc:	61fb      	str	r3, [r7, #28]
 80029be:	e005      	b.n	80029cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80029c0:	4b2d      	ldr	r3, [pc, #180]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x108>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	091b      	lsrs	r3, r3, #4
 80029c6:	f003 030f 	and.w	r3, r3, #15
 80029ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80029cc:	4a2b      	ldr	r2, [pc, #172]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x10c>)
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10d      	bne.n	80029f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029e0:	e00a      	b.n	80029f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	2b04      	cmp	r3, #4
 80029e6:	d102      	bne.n	80029ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80029e8:	4b25      	ldr	r3, [pc, #148]	; (8002a80 <HAL_RCC_GetSysClockFreq+0x110>)
 80029ea:	61bb      	str	r3, [r7, #24]
 80029ec:	e004      	b.n	80029f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	2b08      	cmp	r3, #8
 80029f2:	d101      	bne.n	80029f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029f4:	4b23      	ldr	r3, [pc, #140]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x114>)
 80029f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	2b0c      	cmp	r3, #12
 80029fc:	d134      	bne.n	8002a68 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029fe:	4b1e      	ldr	r3, [pc, #120]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	f003 0303 	and.w	r3, r3, #3
 8002a06:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d003      	beq.n	8002a16 <HAL_RCC_GetSysClockFreq+0xa6>
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	2b03      	cmp	r3, #3
 8002a12:	d003      	beq.n	8002a1c <HAL_RCC_GetSysClockFreq+0xac>
 8002a14:	e005      	b.n	8002a22 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a16:	4b1a      	ldr	r3, [pc, #104]	; (8002a80 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a18:	617b      	str	r3, [r7, #20]
      break;
 8002a1a:	e005      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a1c:	4b19      	ldr	r3, [pc, #100]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a1e:	617b      	str	r3, [r7, #20]
      break;
 8002a20:	e002      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	617b      	str	r3, [r7, #20]
      break;
 8002a26:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a28:	4b13      	ldr	r3, [pc, #76]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	091b      	lsrs	r3, r3, #4
 8002a2e:	f003 030f 	and.w	r3, r3, #15
 8002a32:	3301      	adds	r3, #1
 8002a34:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a36:	4b10      	ldr	r3, [pc, #64]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	0a1b      	lsrs	r3, r3, #8
 8002a3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a40:	697a      	ldr	r2, [r7, #20]
 8002a42:	fb03 f202 	mul.w	r2, r3, r2
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a4c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a4e:	4b0a      	ldr	r3, [pc, #40]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	0e5b      	lsrs	r3, r3, #25
 8002a54:	f003 0303 	and.w	r3, r3, #3
 8002a58:	3301      	adds	r3, #1
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a66:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a68:	69bb      	ldr	r3, [r7, #24]
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3724      	adds	r7, #36	; 0x24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	08004f94 	.word	0x08004f94
 8002a80:	00f42400 	.word	0x00f42400
 8002a84:	007a1200 	.word	0x007a1200

08002a88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a8c:	4b03      	ldr	r3, [pc, #12]	; (8002a9c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	20000068 	.word	0x20000068

08002aa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002aa4:	f7ff fff0 	bl	8002a88 <HAL_RCC_GetHCLKFreq>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	4b06      	ldr	r3, [pc, #24]	; (8002ac4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	0a1b      	lsrs	r3, r3, #8
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	4904      	ldr	r1, [pc, #16]	; (8002ac8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ab6:	5ccb      	ldrb	r3, [r1, r3]
 8002ab8:	f003 031f 	and.w	r3, r3, #31
 8002abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	08004f8c 	.word	0x08004f8c

08002acc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	220f      	movs	r2, #15
 8002ada:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002adc:	4b12      	ldr	r3, [pc, #72]	; (8002b28 <HAL_RCC_GetClockConfig+0x5c>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f003 0203 	and.w	r2, r3, #3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002ae8:	4b0f      	ldr	r3, [pc, #60]	; (8002b28 <HAL_RCC_GetClockConfig+0x5c>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002af4:	4b0c      	ldr	r3, [pc, #48]	; (8002b28 <HAL_RCC_GetClockConfig+0x5c>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002b00:	4b09      	ldr	r3, [pc, #36]	; (8002b28 <HAL_RCC_GetClockConfig+0x5c>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	08db      	lsrs	r3, r3, #3
 8002b06:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002b0e:	4b07      	ldr	r3, [pc, #28]	; (8002b2c <HAL_RCC_GetClockConfig+0x60>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 020f 	and.w	r2, r3, #15
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	601a      	str	r2, [r3, #0]
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	40022000 	.word	0x40022000

08002b30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b38:	2300      	movs	r3, #0
 8002b3a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b3c:	4b27      	ldr	r3, [pc, #156]	; (8002bdc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d003      	beq.n	8002b50 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b48:	f7ff f8ea 	bl	8001d20 <HAL_PWREx_GetVoltageRange>
 8002b4c:	6178      	str	r0, [r7, #20]
 8002b4e:	e014      	b.n	8002b7a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b50:	4b22      	ldr	r3, [pc, #136]	; (8002bdc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b54:	4a21      	ldr	r2, [pc, #132]	; (8002bdc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002b56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b5a:	6593      	str	r3, [r2, #88]	; 0x58
 8002b5c:	4b1f      	ldr	r3, [pc, #124]	; (8002bdc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b64:	60fb      	str	r3, [r7, #12]
 8002b66:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b68:	f7ff f8da 	bl	8001d20 <HAL_PWREx_GetVoltageRange>
 8002b6c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b6e:	4b1b      	ldr	r3, [pc, #108]	; (8002bdc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b72:	4a1a      	ldr	r2, [pc, #104]	; (8002bdc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002b74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b78:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b80:	d10b      	bne.n	8002b9a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2b80      	cmp	r3, #128	; 0x80
 8002b86:	d913      	bls.n	8002bb0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2ba0      	cmp	r3, #160	; 0xa0
 8002b8c:	d902      	bls.n	8002b94 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b8e:	2302      	movs	r3, #2
 8002b90:	613b      	str	r3, [r7, #16]
 8002b92:	e00d      	b.n	8002bb0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b94:	2301      	movs	r3, #1
 8002b96:	613b      	str	r3, [r7, #16]
 8002b98:	e00a      	b.n	8002bb0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2b7f      	cmp	r3, #127	; 0x7f
 8002b9e:	d902      	bls.n	8002ba6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	613b      	str	r3, [r7, #16]
 8002ba4:	e004      	b.n	8002bb0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b70      	cmp	r3, #112	; 0x70
 8002baa:	d101      	bne.n	8002bb0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bac:	2301      	movs	r3, #1
 8002bae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002bb0:	4b0b      	ldr	r3, [pc, #44]	; (8002be0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f023 020f 	bic.w	r2, r3, #15
 8002bb8:	4909      	ldr	r1, [pc, #36]	; (8002be0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002bc0:	4b07      	ldr	r3, [pc, #28]	; (8002be0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 030f 	and.w	r3, r3, #15
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d001      	beq.n	8002bd2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e000      	b.n	8002bd4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3718      	adds	r7, #24
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	40022000 	.word	0x40022000

08002be4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b087      	sub	sp, #28
 8002be8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002bea:	4b2d      	ldr	r3, [pc, #180]	; (8002ca0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	f003 0303 	and.w	r3, r3, #3
 8002bf2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2b03      	cmp	r3, #3
 8002bf8:	d00b      	beq.n	8002c12 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2b03      	cmp	r3, #3
 8002bfe:	d825      	bhi.n	8002c4c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d008      	beq.n	8002c18 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d11f      	bne.n	8002c4c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002c0c:	4b25      	ldr	r3, [pc, #148]	; (8002ca4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002c0e:	613b      	str	r3, [r7, #16]
    break;
 8002c10:	e01f      	b.n	8002c52 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002c12:	4b25      	ldr	r3, [pc, #148]	; (8002ca8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002c14:	613b      	str	r3, [r7, #16]
    break;
 8002c16:	e01c      	b.n	8002c52 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c18:	4b21      	ldr	r3, [pc, #132]	; (8002ca0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0308 	and.w	r3, r3, #8
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d107      	bne.n	8002c34 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c24:	4b1e      	ldr	r3, [pc, #120]	; (8002ca0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002c26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c2a:	0a1b      	lsrs	r3, r3, #8
 8002c2c:	f003 030f 	and.w	r3, r3, #15
 8002c30:	617b      	str	r3, [r7, #20]
 8002c32:	e005      	b.n	8002c40 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c34:	4b1a      	ldr	r3, [pc, #104]	; (8002ca0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	091b      	lsrs	r3, r3, #4
 8002c3a:	f003 030f 	and.w	r3, r3, #15
 8002c3e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002c40:	4a1a      	ldr	r2, [pc, #104]	; (8002cac <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c48:	613b      	str	r3, [r7, #16]
    break;
 8002c4a:	e002      	b.n	8002c52 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	613b      	str	r3, [r7, #16]
    break;
 8002c50:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c52:	4b13      	ldr	r3, [pc, #76]	; (8002ca0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	091b      	lsrs	r3, r3, #4
 8002c58:	f003 030f 	and.w	r3, r3, #15
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c60:	4b0f      	ldr	r3, [pc, #60]	; (8002ca0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	0a1b      	lsrs	r3, r3, #8
 8002c66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	fb03 f202 	mul.w	r2, r3, r2
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c76:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c78:	4b09      	ldr	r3, [pc, #36]	; (8002ca0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	0e5b      	lsrs	r3, r3, #25
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	3301      	adds	r3, #1
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c90:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002c92:	683b      	ldr	r3, [r7, #0]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	371c      	adds	r7, #28
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	00f42400 	.word	0x00f42400
 8002ca8:	007a1200 	.word	0x007a1200
 8002cac:	08004f94 	.word	0x08004f94

08002cb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002cb8:	2300      	movs	r3, #0
 8002cba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d040      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cd0:	2b80      	cmp	r3, #128	; 0x80
 8002cd2:	d02a      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002cd4:	2b80      	cmp	r3, #128	; 0x80
 8002cd6:	d825      	bhi.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002cd8:	2b60      	cmp	r3, #96	; 0x60
 8002cda:	d026      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002cdc:	2b60      	cmp	r3, #96	; 0x60
 8002cde:	d821      	bhi.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002ce0:	2b40      	cmp	r3, #64	; 0x40
 8002ce2:	d006      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002ce4:	2b40      	cmp	r3, #64	; 0x40
 8002ce6:	d81d      	bhi.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d009      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002cec:	2b20      	cmp	r3, #32
 8002cee:	d010      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002cf0:	e018      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002cf2:	4b89      	ldr	r3, [pc, #548]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	4a88      	ldr	r2, [pc, #544]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cfc:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002cfe:	e015      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	3304      	adds	r3, #4
 8002d04:	2100      	movs	r1, #0
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 fb02 	bl	8003310 <RCCEx_PLLSAI1_Config>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d10:	e00c      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	3320      	adds	r3, #32
 8002d16:	2100      	movs	r1, #0
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f000 fbed 	bl	80034f8 <RCCEx_PLLSAI2_Config>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d22:	e003      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	74fb      	strb	r3, [r7, #19]
      break;
 8002d28:	e000      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002d2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d2c:	7cfb      	ldrb	r3, [r7, #19]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10b      	bne.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d32:	4b79      	ldr	r3, [pc, #484]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d38:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d40:	4975      	ldr	r1, [pc, #468]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002d48:	e001      	b.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d4a:	7cfb      	ldrb	r3, [r7, #19]
 8002d4c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d047      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d62:	d030      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002d64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d68:	d82a      	bhi.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002d6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d6e:	d02a      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002d70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d74:	d824      	bhi.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002d76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d7a:	d008      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002d7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d80:	d81e      	bhi.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00a      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002d86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d8a:	d010      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002d8c:	e018      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d8e:	4b62      	ldr	r3, [pc, #392]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	4a61      	ldr	r2, [pc, #388]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d98:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d9a:	e015      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	3304      	adds	r3, #4
 8002da0:	2100      	movs	r1, #0
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 fab4 	bl	8003310 <RCCEx_PLLSAI1_Config>
 8002da8:	4603      	mov	r3, r0
 8002daa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002dac:	e00c      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	3320      	adds	r3, #32
 8002db2:	2100      	movs	r1, #0
 8002db4:	4618      	mov	r0, r3
 8002db6:	f000 fb9f 	bl	80034f8 <RCCEx_PLLSAI2_Config>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002dbe:	e003      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	74fb      	strb	r3, [r7, #19]
      break;
 8002dc4:	e000      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002dc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dc8:	7cfb      	ldrb	r3, [r7, #19]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10b      	bne.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002dce:	4b52      	ldr	r3, [pc, #328]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002dd0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002dd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ddc:	494e      	ldr	r1, [pc, #312]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002de4:	e001      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002de6:	7cfb      	ldrb	r3, [r7, #19]
 8002de8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f000 809f 	beq.w	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002dfc:	4b46      	ldr	r3, [pc, #280]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e000      	b.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00d      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e12:	4b41      	ldr	r3, [pc, #260]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e16:	4a40      	ldr	r2, [pc, #256]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e1c:	6593      	str	r3, [r2, #88]	; 0x58
 8002e1e:	4b3e      	ldr	r3, [pc, #248]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e26:	60bb      	str	r3, [r7, #8]
 8002e28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e2e:	4b3b      	ldr	r3, [pc, #236]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a3a      	ldr	r2, [pc, #232]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e38:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e3a:	f7fe fca5 	bl	8001788 <HAL_GetTick>
 8002e3e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e40:	e009      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e42:	f7fe fca1 	bl	8001788 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d902      	bls.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	74fb      	strb	r3, [r7, #19]
        break;
 8002e54:	e005      	b.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e56:	4b31      	ldr	r3, [pc, #196]	; (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0ef      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002e62:	7cfb      	ldrb	r3, [r7, #19]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d15b      	bne.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e68:	4b2b      	ldr	r3, [pc, #172]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e72:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d01f      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d019      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e86:	4b24      	ldr	r3, [pc, #144]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e90:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e92:	4b21      	ldr	r3, [pc, #132]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e98:	4a1f      	ldr	r2, [pc, #124]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ea2:	4b1d      	ldr	r3, [pc, #116]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea8:	4a1b      	ldr	r2, [pc, #108]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002eb2:	4a19      	ldr	r2, [pc, #100]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d016      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec4:	f7fe fc60 	bl	8001788 <HAL_GetTick>
 8002ec8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eca:	e00b      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ecc:	f7fe fc5c 	bl	8001788 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d902      	bls.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	74fb      	strb	r3, [r7, #19]
            break;
 8002ee2:	e006      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ee4:	4b0c      	ldr	r3, [pc, #48]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0ec      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002ef2:	7cfb      	ldrb	r3, [r7, #19]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10c      	bne.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ef8:	4b07      	ldr	r3, [pc, #28]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002efe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f08:	4903      	ldr	r1, [pc, #12]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f10:	e008      	b.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f12:	7cfb      	ldrb	r3, [r7, #19]
 8002f14:	74bb      	strb	r3, [r7, #18]
 8002f16:	e005      	b.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f20:	7cfb      	ldrb	r3, [r7, #19]
 8002f22:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f24:	7c7b      	ldrb	r3, [r7, #17]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d105      	bne.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f2a:	4ba0      	ldr	r3, [pc, #640]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f2e:	4a9f      	ldr	r2, [pc, #636]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f34:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00a      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f42:	4b9a      	ldr	r3, [pc, #616]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f48:	f023 0203 	bic.w	r2, r3, #3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f50:	4996      	ldr	r1, [pc, #600]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00a      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f64:	4b91      	ldr	r3, [pc, #580]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6a:	f023 020c 	bic.w	r2, r3, #12
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	498e      	ldr	r1, [pc, #568]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0304 	and.w	r3, r3, #4
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00a      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f86:	4b89      	ldr	r3, [pc, #548]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f94:	4985      	ldr	r1, [pc, #532]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0308 	and.w	r3, r3, #8
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00a      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002fa8:	4b80      	ldr	r3, [pc, #512]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fb6:	497d      	ldr	r1, [pc, #500]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0310 	and.w	r3, r3, #16
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00a      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002fca:	4b78      	ldr	r3, [pc, #480]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fd8:	4974      	ldr	r1, [pc, #464]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0320 	and.w	r3, r3, #32
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00a      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002fec:	4b6f      	ldr	r3, [pc, #444]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ffa:	496c      	ldr	r1, [pc, #432]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00a      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800300e:	4b67      	ldr	r3, [pc, #412]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003014:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800301c:	4963      	ldr	r1, [pc, #396]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800301e:	4313      	orrs	r3, r2
 8003020:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00a      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003030:	4b5e      	ldr	r3, [pc, #376]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003036:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800303e:	495b      	ldr	r1, [pc, #364]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003040:	4313      	orrs	r3, r2
 8003042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00a      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003052:	4b56      	ldr	r3, [pc, #344]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003058:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003060:	4952      	ldr	r1, [pc, #328]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003062:	4313      	orrs	r3, r2
 8003064:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00a      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003074:	4b4d      	ldr	r3, [pc, #308]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800307a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003082:	494a      	ldr	r1, [pc, #296]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003084:	4313      	orrs	r3, r2
 8003086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00a      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003096:	4b45      	ldr	r3, [pc, #276]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800309c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a4:	4941      	ldr	r1, [pc, #260]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00a      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80030b8:	4b3c      	ldr	r3, [pc, #240]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030be:	f023 0203 	bic.w	r2, r3, #3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030c6:	4939      	ldr	r1, [pc, #228]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d028      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030da:	4b34      	ldr	r3, [pc, #208]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030e8:	4930      	ldr	r1, [pc, #192]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030f8:	d106      	bne.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030fa:	4b2c      	ldr	r3, [pc, #176]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	4a2b      	ldr	r2, [pc, #172]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003100:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003104:	60d3      	str	r3, [r2, #12]
 8003106:	e011      	b.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800310c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003110:	d10c      	bne.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	3304      	adds	r3, #4
 8003116:	2101      	movs	r1, #1
 8003118:	4618      	mov	r0, r3
 800311a:	f000 f8f9 	bl	8003310 <RCCEx_PLLSAI1_Config>
 800311e:	4603      	mov	r3, r0
 8003120:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003122:	7cfb      	ldrb	r3, [r7, #19]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003128:	7cfb      	ldrb	r3, [r7, #19]
 800312a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d04d      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800313c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003140:	d108      	bne.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003142:	4b1a      	ldr	r3, [pc, #104]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003144:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003148:	4a18      	ldr	r2, [pc, #96]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800314a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800314e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003152:	e012      	b.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003154:	4b15      	ldr	r3, [pc, #84]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003156:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800315a:	4a14      	ldr	r2, [pc, #80]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800315c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003160:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003164:	4b11      	ldr	r3, [pc, #68]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800316a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003172:	490e      	ldr	r1, [pc, #56]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003174:	4313      	orrs	r3, r2
 8003176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800317e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003182:	d106      	bne.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003184:	4b09      	ldr	r3, [pc, #36]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	4a08      	ldr	r2, [pc, #32]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800318a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800318e:	60d3      	str	r3, [r2, #12]
 8003190:	e020      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003196:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800319a:	d109      	bne.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800319c:	4b03      	ldr	r3, [pc, #12]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	4a02      	ldr	r2, [pc, #8]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a6:	60d3      	str	r3, [r2, #12]
 80031a8:	e014      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80031aa:	bf00      	nop
 80031ac:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031b8:	d10c      	bne.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	3304      	adds	r3, #4
 80031be:	2101      	movs	r1, #1
 80031c0:	4618      	mov	r0, r3
 80031c2:	f000 f8a5 	bl	8003310 <RCCEx_PLLSAI1_Config>
 80031c6:	4603      	mov	r3, r0
 80031c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031ca:	7cfb      	ldrb	r3, [r7, #19]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80031d0:	7cfb      	ldrb	r3, [r7, #19]
 80031d2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d028      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80031e0:	4b4a      	ldr	r3, [pc, #296]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031ee:	4947      	ldr	r1, [pc, #284]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031fe:	d106      	bne.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003200:	4b42      	ldr	r3, [pc, #264]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	4a41      	ldr	r2, [pc, #260]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003206:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800320a:	60d3      	str	r3, [r2, #12]
 800320c:	e011      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003212:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003216:	d10c      	bne.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	3304      	adds	r3, #4
 800321c:	2101      	movs	r1, #1
 800321e:	4618      	mov	r0, r3
 8003220:	f000 f876 	bl	8003310 <RCCEx_PLLSAI1_Config>
 8003224:	4603      	mov	r3, r0
 8003226:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003228:	7cfb      	ldrb	r3, [r7, #19]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800322e:	7cfb      	ldrb	r3, [r7, #19]
 8003230:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d01e      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800323e:	4b33      	ldr	r3, [pc, #204]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003244:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800324e:	492f      	ldr	r1, [pc, #188]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003250:	4313      	orrs	r3, r2
 8003252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800325c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003260:	d10c      	bne.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	3304      	adds	r3, #4
 8003266:	2102      	movs	r1, #2
 8003268:	4618      	mov	r0, r3
 800326a:	f000 f851 	bl	8003310 <RCCEx_PLLSAI1_Config>
 800326e:	4603      	mov	r3, r0
 8003270:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003272:	7cfb      	ldrb	r3, [r7, #19]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003278:	7cfb      	ldrb	r3, [r7, #19]
 800327a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00b      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003288:	4b20      	ldr	r3, [pc, #128]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800328a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800328e:	f023 0204 	bic.w	r2, r3, #4
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003298:	491c      	ldr	r1, [pc, #112]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800329a:	4313      	orrs	r3, r2
 800329c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00b      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80032ac:	4b17      	ldr	r3, [pc, #92]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032b2:	f023 0218 	bic.w	r2, r3, #24
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032bc:	4913      	ldr	r1, [pc, #76]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d017      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80032d0:	4b0e      	ldr	r3, [pc, #56]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032e0:	490a      	ldr	r1, [pc, #40]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032f2:	d105      	bne.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032f4:	4b05      	ldr	r3, [pc, #20]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	4a04      	ldr	r2, [pc, #16]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032fe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003300:	7cbb      	ldrb	r3, [r7, #18]
}
 8003302:	4618      	mov	r0, r3
 8003304:	3718      	adds	r7, #24
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	40021000 	.word	0x40021000

08003310 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800331a:	2300      	movs	r3, #0
 800331c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800331e:	4b72      	ldr	r3, [pc, #456]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	f003 0303 	and.w	r3, r3, #3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00e      	beq.n	8003348 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800332a:	4b6f      	ldr	r3, [pc, #444]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	f003 0203 	and.w	r2, r3, #3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	429a      	cmp	r2, r3
 8003338:	d103      	bne.n	8003342 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
       ||
 800333e:	2b00      	cmp	r3, #0
 8003340:	d142      	bne.n	80033c8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	73fb      	strb	r3, [r7, #15]
 8003346:	e03f      	b.n	80033c8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2b03      	cmp	r3, #3
 800334e:	d018      	beq.n	8003382 <RCCEx_PLLSAI1_Config+0x72>
 8003350:	2b03      	cmp	r3, #3
 8003352:	d825      	bhi.n	80033a0 <RCCEx_PLLSAI1_Config+0x90>
 8003354:	2b01      	cmp	r3, #1
 8003356:	d002      	beq.n	800335e <RCCEx_PLLSAI1_Config+0x4e>
 8003358:	2b02      	cmp	r3, #2
 800335a:	d009      	beq.n	8003370 <RCCEx_PLLSAI1_Config+0x60>
 800335c:	e020      	b.n	80033a0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800335e:	4b62      	ldr	r3, [pc, #392]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d11d      	bne.n	80033a6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800336e:	e01a      	b.n	80033a6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003370:	4b5d      	ldr	r3, [pc, #372]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003378:	2b00      	cmp	r3, #0
 800337a:	d116      	bne.n	80033aa <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003380:	e013      	b.n	80033aa <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003382:	4b59      	ldr	r3, [pc, #356]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10f      	bne.n	80033ae <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800338e:	4b56      	ldr	r3, [pc, #344]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d109      	bne.n	80033ae <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800339e:	e006      	b.n	80033ae <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	73fb      	strb	r3, [r7, #15]
      break;
 80033a4:	e004      	b.n	80033b0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80033a6:	bf00      	nop
 80033a8:	e002      	b.n	80033b0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80033aa:	bf00      	nop
 80033ac:	e000      	b.n	80033b0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80033ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80033b0:	7bfb      	ldrb	r3, [r7, #15]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d108      	bne.n	80033c8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80033b6:	4b4c      	ldr	r3, [pc, #304]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	f023 0203 	bic.w	r2, r3, #3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4949      	ldr	r1, [pc, #292]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80033c8:	7bfb      	ldrb	r3, [r7, #15]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f040 8086 	bne.w	80034dc <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80033d0:	4b45      	ldr	r3, [pc, #276]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a44      	ldr	r2, [pc, #272]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80033d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80033da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033dc:	f7fe f9d4 	bl	8001788 <HAL_GetTick>
 80033e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80033e2:	e009      	b.n	80033f8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033e4:	f7fe f9d0 	bl	8001788 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d902      	bls.n	80033f8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	73fb      	strb	r3, [r7, #15]
        break;
 80033f6:	e005      	b.n	8003404 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80033f8:	4b3b      	ldr	r3, [pc, #236]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1ef      	bne.n	80033e4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003404:	7bfb      	ldrb	r3, [r7, #15]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d168      	bne.n	80034dc <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d113      	bne.n	8003438 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003410:	4b35      	ldr	r3, [pc, #212]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003412:	691a      	ldr	r2, [r3, #16]
 8003414:	4b35      	ldr	r3, [pc, #212]	; (80034ec <RCCEx_PLLSAI1_Config+0x1dc>)
 8003416:	4013      	ands	r3, r2
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	6892      	ldr	r2, [r2, #8]
 800341c:	0211      	lsls	r1, r2, #8
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	68d2      	ldr	r2, [r2, #12]
 8003422:	06d2      	lsls	r2, r2, #27
 8003424:	4311      	orrs	r1, r2
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	6852      	ldr	r2, [r2, #4]
 800342a:	3a01      	subs	r2, #1
 800342c:	0112      	lsls	r2, r2, #4
 800342e:	430a      	orrs	r2, r1
 8003430:	492d      	ldr	r1, [pc, #180]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003432:	4313      	orrs	r3, r2
 8003434:	610b      	str	r3, [r1, #16]
 8003436:	e02d      	b.n	8003494 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d115      	bne.n	800346a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800343e:	4b2a      	ldr	r3, [pc, #168]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003440:	691a      	ldr	r2, [r3, #16]
 8003442:	4b2b      	ldr	r3, [pc, #172]	; (80034f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003444:	4013      	ands	r3, r2
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	6892      	ldr	r2, [r2, #8]
 800344a:	0211      	lsls	r1, r2, #8
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	6912      	ldr	r2, [r2, #16]
 8003450:	0852      	lsrs	r2, r2, #1
 8003452:	3a01      	subs	r2, #1
 8003454:	0552      	lsls	r2, r2, #21
 8003456:	4311      	orrs	r1, r2
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	6852      	ldr	r2, [r2, #4]
 800345c:	3a01      	subs	r2, #1
 800345e:	0112      	lsls	r2, r2, #4
 8003460:	430a      	orrs	r2, r1
 8003462:	4921      	ldr	r1, [pc, #132]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003464:	4313      	orrs	r3, r2
 8003466:	610b      	str	r3, [r1, #16]
 8003468:	e014      	b.n	8003494 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800346a:	4b1f      	ldr	r3, [pc, #124]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800346c:	691a      	ldr	r2, [r3, #16]
 800346e:	4b21      	ldr	r3, [pc, #132]	; (80034f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003470:	4013      	ands	r3, r2
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	6892      	ldr	r2, [r2, #8]
 8003476:	0211      	lsls	r1, r2, #8
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	6952      	ldr	r2, [r2, #20]
 800347c:	0852      	lsrs	r2, r2, #1
 800347e:	3a01      	subs	r2, #1
 8003480:	0652      	lsls	r2, r2, #25
 8003482:	4311      	orrs	r1, r2
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	6852      	ldr	r2, [r2, #4]
 8003488:	3a01      	subs	r2, #1
 800348a:	0112      	lsls	r2, r2, #4
 800348c:	430a      	orrs	r2, r1
 800348e:	4916      	ldr	r1, [pc, #88]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003490:	4313      	orrs	r3, r2
 8003492:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003494:	4b14      	ldr	r3, [pc, #80]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a13      	ldr	r2, [pc, #76]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800349a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800349e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a0:	f7fe f972 	bl	8001788 <HAL_GetTick>
 80034a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80034a6:	e009      	b.n	80034bc <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034a8:	f7fe f96e 	bl	8001788 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d902      	bls.n	80034bc <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	73fb      	strb	r3, [r7, #15]
          break;
 80034ba:	e005      	b.n	80034c8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80034bc:	4b0a      	ldr	r3, [pc, #40]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0ef      	beq.n	80034a8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80034c8:	7bfb      	ldrb	r3, [r7, #15]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d106      	bne.n	80034dc <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80034ce:	4b06      	ldr	r3, [pc, #24]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034d0:	691a      	ldr	r2, [r3, #16]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	4904      	ldr	r1, [pc, #16]	; (80034e8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80034dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	40021000 	.word	0x40021000
 80034ec:	07ff800f 	.word	0x07ff800f
 80034f0:	ff9f800f 	.word	0xff9f800f
 80034f4:	f9ff800f 	.word	0xf9ff800f

080034f8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003502:	2300      	movs	r3, #0
 8003504:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003506:	4b72      	ldr	r3, [pc, #456]	; (80036d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	f003 0303 	and.w	r3, r3, #3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00e      	beq.n	8003530 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003512:	4b6f      	ldr	r3, [pc, #444]	; (80036d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	f003 0203 	and.w	r2, r3, #3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	429a      	cmp	r2, r3
 8003520:	d103      	bne.n	800352a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
       ||
 8003526:	2b00      	cmp	r3, #0
 8003528:	d142      	bne.n	80035b0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	73fb      	strb	r3, [r7, #15]
 800352e:	e03f      	b.n	80035b0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2b03      	cmp	r3, #3
 8003536:	d018      	beq.n	800356a <RCCEx_PLLSAI2_Config+0x72>
 8003538:	2b03      	cmp	r3, #3
 800353a:	d825      	bhi.n	8003588 <RCCEx_PLLSAI2_Config+0x90>
 800353c:	2b01      	cmp	r3, #1
 800353e:	d002      	beq.n	8003546 <RCCEx_PLLSAI2_Config+0x4e>
 8003540:	2b02      	cmp	r3, #2
 8003542:	d009      	beq.n	8003558 <RCCEx_PLLSAI2_Config+0x60>
 8003544:	e020      	b.n	8003588 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003546:	4b62      	ldr	r3, [pc, #392]	; (80036d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d11d      	bne.n	800358e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003556:	e01a      	b.n	800358e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003558:	4b5d      	ldr	r3, [pc, #372]	; (80036d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003560:	2b00      	cmp	r3, #0
 8003562:	d116      	bne.n	8003592 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003568:	e013      	b.n	8003592 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800356a:	4b59      	ldr	r3, [pc, #356]	; (80036d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10f      	bne.n	8003596 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003576:	4b56      	ldr	r3, [pc, #344]	; (80036d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d109      	bne.n	8003596 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003586:	e006      	b.n	8003596 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	73fb      	strb	r3, [r7, #15]
      break;
 800358c:	e004      	b.n	8003598 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800358e:	bf00      	nop
 8003590:	e002      	b.n	8003598 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003592:	bf00      	nop
 8003594:	e000      	b.n	8003598 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003596:	bf00      	nop
    }

    if(status == HAL_OK)
 8003598:	7bfb      	ldrb	r3, [r7, #15]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d108      	bne.n	80035b0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800359e:	4b4c      	ldr	r3, [pc, #304]	; (80036d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	f023 0203 	bic.w	r2, r3, #3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4949      	ldr	r1, [pc, #292]	; (80036d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80035b0:	7bfb      	ldrb	r3, [r7, #15]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f040 8086 	bne.w	80036c4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80035b8:	4b45      	ldr	r3, [pc, #276]	; (80036d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a44      	ldr	r2, [pc, #272]	; (80036d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80035be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035c4:	f7fe f8e0 	bl	8001788 <HAL_GetTick>
 80035c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80035ca:	e009      	b.n	80035e0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80035cc:	f7fe f8dc 	bl	8001788 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d902      	bls.n	80035e0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	73fb      	strb	r3, [r7, #15]
        break;
 80035de:	e005      	b.n	80035ec <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80035e0:	4b3b      	ldr	r3, [pc, #236]	; (80036d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1ef      	bne.n	80035cc <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80035ec:	7bfb      	ldrb	r3, [r7, #15]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d168      	bne.n	80036c4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d113      	bne.n	8003620 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80035f8:	4b35      	ldr	r3, [pc, #212]	; (80036d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80035fa:	695a      	ldr	r2, [r3, #20]
 80035fc:	4b35      	ldr	r3, [pc, #212]	; (80036d4 <RCCEx_PLLSAI2_Config+0x1dc>)
 80035fe:	4013      	ands	r3, r2
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	6892      	ldr	r2, [r2, #8]
 8003604:	0211      	lsls	r1, r2, #8
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	68d2      	ldr	r2, [r2, #12]
 800360a:	06d2      	lsls	r2, r2, #27
 800360c:	4311      	orrs	r1, r2
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	6852      	ldr	r2, [r2, #4]
 8003612:	3a01      	subs	r2, #1
 8003614:	0112      	lsls	r2, r2, #4
 8003616:	430a      	orrs	r2, r1
 8003618:	492d      	ldr	r1, [pc, #180]	; (80036d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800361a:	4313      	orrs	r3, r2
 800361c:	614b      	str	r3, [r1, #20]
 800361e:	e02d      	b.n	800367c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d115      	bne.n	8003652 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003626:	4b2a      	ldr	r3, [pc, #168]	; (80036d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003628:	695a      	ldr	r2, [r3, #20]
 800362a:	4b2b      	ldr	r3, [pc, #172]	; (80036d8 <RCCEx_PLLSAI2_Config+0x1e0>)
 800362c:	4013      	ands	r3, r2
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	6892      	ldr	r2, [r2, #8]
 8003632:	0211      	lsls	r1, r2, #8
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	6912      	ldr	r2, [r2, #16]
 8003638:	0852      	lsrs	r2, r2, #1
 800363a:	3a01      	subs	r2, #1
 800363c:	0552      	lsls	r2, r2, #21
 800363e:	4311      	orrs	r1, r2
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	6852      	ldr	r2, [r2, #4]
 8003644:	3a01      	subs	r2, #1
 8003646:	0112      	lsls	r2, r2, #4
 8003648:	430a      	orrs	r2, r1
 800364a:	4921      	ldr	r1, [pc, #132]	; (80036d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800364c:	4313      	orrs	r3, r2
 800364e:	614b      	str	r3, [r1, #20]
 8003650:	e014      	b.n	800367c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003652:	4b1f      	ldr	r3, [pc, #124]	; (80036d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003654:	695a      	ldr	r2, [r3, #20]
 8003656:	4b21      	ldr	r3, [pc, #132]	; (80036dc <RCCEx_PLLSAI2_Config+0x1e4>)
 8003658:	4013      	ands	r3, r2
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	6892      	ldr	r2, [r2, #8]
 800365e:	0211      	lsls	r1, r2, #8
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	6952      	ldr	r2, [r2, #20]
 8003664:	0852      	lsrs	r2, r2, #1
 8003666:	3a01      	subs	r2, #1
 8003668:	0652      	lsls	r2, r2, #25
 800366a:	4311      	orrs	r1, r2
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	6852      	ldr	r2, [r2, #4]
 8003670:	3a01      	subs	r2, #1
 8003672:	0112      	lsls	r2, r2, #4
 8003674:	430a      	orrs	r2, r1
 8003676:	4916      	ldr	r1, [pc, #88]	; (80036d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003678:	4313      	orrs	r3, r2
 800367a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800367c:	4b14      	ldr	r3, [pc, #80]	; (80036d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a13      	ldr	r2, [pc, #76]	; (80036d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003686:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003688:	f7fe f87e 	bl	8001788 <HAL_GetTick>
 800368c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800368e:	e009      	b.n	80036a4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003690:	f7fe f87a 	bl	8001788 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b02      	cmp	r3, #2
 800369c:	d902      	bls.n	80036a4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	73fb      	strb	r3, [r7, #15]
          break;
 80036a2:	e005      	b.n	80036b0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80036a4:	4b0a      	ldr	r3, [pc, #40]	; (80036d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d0ef      	beq.n	8003690 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80036b0:	7bfb      	ldrb	r3, [r7, #15]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d106      	bne.n	80036c4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80036b6:	4b06      	ldr	r3, [pc, #24]	; (80036d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036b8:	695a      	ldr	r2, [r3, #20]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	4904      	ldr	r1, [pc, #16]	; (80036d0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	40021000 	.word	0x40021000
 80036d4:	07ff800f 	.word	0x07ff800f
 80036d8:	ff9f800f 	.word	0xff9f800f
 80036dc:	f9ff800f 	.word	0xf9ff800f

080036e0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d079      	beq.n	80037e6 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d106      	bne.n	800370c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f7fd feb2 	bl	8001470 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2202      	movs	r2, #2
 8003710:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	f003 0310 	and.w	r3, r3, #16
 800371e:	2b10      	cmp	r3, #16
 8003720:	d058      	beq.n	80037d4 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	22ca      	movs	r2, #202	; 0xca
 8003728:	625a      	str	r2, [r3, #36]	; 0x24
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2253      	movs	r2, #83	; 0x53
 8003730:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f880 	bl	8003838 <RTC_EnterInitMode>
 8003738:	4603      	mov	r3, r0
 800373a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800373c:	7bfb      	ldrb	r3, [r7, #15]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d127      	bne.n	8003792 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	6812      	ldr	r2, [r2, #0]
 800374c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003750:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003754:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	6899      	ldr	r1, [r3, #8]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	431a      	orrs	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	431a      	orrs	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	430a      	orrs	r2, r1
 8003772:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	68d2      	ldr	r2, [r2, #12]
 800377c:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	6919      	ldr	r1, [r3, #16]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	041a      	lsls	r2, r3, #16
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	430a      	orrs	r2, r1
 8003790:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f884 	bl	80038a0 <RTC_ExitInitMode>
 8003798:	4603      	mov	r3, r0
 800379a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800379c:	7bfb      	ldrb	r3, [r7, #15]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d113      	bne.n	80037ca <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f022 0203 	bic.w	r2, r2, #3
 80037b0:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	69da      	ldr	r2, [r3, #28]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	431a      	orrs	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	430a      	orrs	r2, r1
 80037c8:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	22ff      	movs	r2, #255	; 0xff
 80037d0:	625a      	str	r2, [r3, #36]	; 0x24
 80037d2:	e001      	b.n	80037d8 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80037d4:	2300      	movs	r3, #0
 80037d6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80037d8:	7bfb      	ldrb	r3, [r7, #15]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d103      	bne.n	80037e6 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 80037e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a0d      	ldr	r2, [pc, #52]	; (8003834 <HAL_RTC_WaitForSynchro+0x44>)
 80037fe:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8003800:	f7fd ffc2 	bl	8001788 <HAL_GetTick>
 8003804:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003806:	e009      	b.n	800381c <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003808:	f7fd ffbe 	bl	8001788 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003816:	d901      	bls.n	800381c <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e007      	b.n	800382c <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	f003 0320 	and.w	r3, r3, #32
 8003826:	2b00      	cmp	r3, #0
 8003828:	d0ee      	beq.n	8003808 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	0003ff5f 	.word	0x0003ff5f

08003838 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003840:	2300      	movs	r3, #0
 8003842:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384e:	2b00      	cmp	r3, #0
 8003850:	d120      	bne.n	8003894 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f04f 32ff 	mov.w	r2, #4294967295
 800385a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800385c:	f7fd ff94 	bl	8001788 <HAL_GetTick>
 8003860:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003862:	e00d      	b.n	8003880 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003864:	f7fd ff90 	bl	8001788 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003872:	d905      	bls.n	8003880 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2203      	movs	r2, #3
 800387c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800388a:	2b00      	cmp	r3, #0
 800388c:	d102      	bne.n	8003894 <RTC_EnterInitMode+0x5c>
 800388e:	7bfb      	ldrb	r3, [r7, #15]
 8003890:	2b03      	cmp	r3, #3
 8003892:	d1e7      	bne.n	8003864 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8003894:	7bfb      	ldrb	r3, [r7, #15]
}
 8003896:	4618      	mov	r0, r3
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
	...

080038a0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038a8:	2300      	movs	r3, #0
 80038aa:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80038ac:	4b1a      	ldr	r3, [pc, #104]	; (8003918 <RTC_ExitInitMode+0x78>)
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	4a19      	ldr	r2, [pc, #100]	; (8003918 <RTC_ExitInitMode+0x78>)
 80038b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038b6:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80038b8:	4b17      	ldr	r3, [pc, #92]	; (8003918 <RTC_ExitInitMode+0x78>)
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f003 0320 	and.w	r3, r3, #32
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10c      	bne.n	80038de <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f7ff ff93 	bl	80037f0 <HAL_RTC_WaitForSynchro>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d01e      	beq.n	800390e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2203      	movs	r2, #3
 80038d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	73fb      	strb	r3, [r7, #15]
 80038dc:	e017      	b.n	800390e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80038de:	4b0e      	ldr	r3, [pc, #56]	; (8003918 <RTC_ExitInitMode+0x78>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	4a0d      	ldr	r2, [pc, #52]	; (8003918 <RTC_ExitInitMode+0x78>)
 80038e4:	f023 0320 	bic.w	r3, r3, #32
 80038e8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7ff ff80 	bl	80037f0 <HAL_RTC_WaitForSynchro>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d005      	beq.n	8003902 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2203      	movs	r2, #3
 80038fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003902:	4b05      	ldr	r3, [pc, #20]	; (8003918 <RTC_ExitInitMode+0x78>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	4a04      	ldr	r2, [pc, #16]	; (8003918 <RTC_ExitInitMode+0x78>)
 8003908:	f043 0320 	orr.w	r3, r3, #32
 800390c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800390e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003910:	4618      	mov	r0, r3
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	40002800 	.word	0x40002800

0800391c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e095      	b.n	8003a5a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003932:	2b00      	cmp	r3, #0
 8003934:	d108      	bne.n	8003948 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800393e:	d009      	beq.n	8003954 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	61da      	str	r2, [r3, #28]
 8003946:	e005      	b.n	8003954 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003960:	b2db      	uxtb	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d106      	bne.n	8003974 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7fd fdb0 	bl	80014d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2202      	movs	r2, #2
 8003978:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800398a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003994:	d902      	bls.n	800399c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003996:	2300      	movs	r3, #0
 8003998:	60fb      	str	r3, [r7, #12]
 800399a:	e002      	b.n	80039a2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800399c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039a0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80039aa:	d007      	beq.n	80039bc <HAL_SPI_Init+0xa0>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039b4:	d002      	beq.n	80039bc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80039cc:	431a      	orrs	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	431a      	orrs	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	695b      	ldr	r3, [r3, #20]
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	431a      	orrs	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039ea:	431a      	orrs	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	69db      	ldr	r3, [r3, #28]
 80039f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039f4:	431a      	orrs	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039fe:	ea42 0103 	orr.w	r1, r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a06:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	0c1b      	lsrs	r3, r3, #16
 8003a18:	f003 0204 	and.w	r2, r3, #4
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a20:	f003 0310 	and.w	r3, r3, #16
 8003a24:	431a      	orrs	r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a2a:	f003 0308 	and.w	r3, r3, #8
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003a38:	ea42 0103 	orr.w	r1, r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b088      	sub	sp, #32
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	60f8      	str	r0, [r7, #12]
 8003a6a:	60b9      	str	r1, [r7, #8]
 8003a6c:	603b      	str	r3, [r7, #0]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a72:	2300      	movs	r3, #0
 8003a74:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d101      	bne.n	8003a84 <HAL_SPI_Transmit+0x22>
 8003a80:	2302      	movs	r3, #2
 8003a82:	e15f      	b.n	8003d44 <HAL_SPI_Transmit+0x2e2>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a8c:	f7fd fe7c 	bl	8001788 <HAL_GetTick>
 8003a90:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003a92:	88fb      	ldrh	r3, [r7, #6]
 8003a94:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d002      	beq.n	8003aa8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003aa6:	e148      	b.n	8003d3a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d002      	beq.n	8003ab4 <HAL_SPI_Transmit+0x52>
 8003aae:	88fb      	ldrh	r3, [r7, #6]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d102      	bne.n	8003aba <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ab8:	e13f      	b.n	8003d3a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2203      	movs	r2, #3
 8003abe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	68ba      	ldr	r2, [r7, #8]
 8003acc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	88fa      	ldrh	r2, [r7, #6]
 8003ad2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	88fa      	ldrh	r2, [r7, #6]
 8003ad8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b04:	d10f      	bne.n	8003b26 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b14:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b24:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b30:	2b40      	cmp	r3, #64	; 0x40
 8003b32:	d007      	beq.n	8003b44 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b4c:	d94f      	bls.n	8003bee <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d002      	beq.n	8003b5c <HAL_SPI_Transmit+0xfa>
 8003b56:	8afb      	ldrh	r3, [r7, #22]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d142      	bne.n	8003be2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b60:	881a      	ldrh	r2, [r3, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6c:	1c9a      	adds	r2, r3, #2
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003b80:	e02f      	b.n	8003be2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f003 0302 	and.w	r3, r3, #2
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d112      	bne.n	8003bb6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b94:	881a      	ldrh	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba0:	1c9a      	adds	r2, r3, #2
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	3b01      	subs	r3, #1
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003bb4:	e015      	b.n	8003be2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bb6:	f7fd fde7 	bl	8001788 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d803      	bhi.n	8003bce <HAL_SPI_Transmit+0x16c>
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bcc:	d102      	bne.n	8003bd4 <HAL_SPI_Transmit+0x172>
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d106      	bne.n	8003be2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003be0:	e0ab      	b.n	8003d3a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1ca      	bne.n	8003b82 <HAL_SPI_Transmit+0x120>
 8003bec:	e080      	b.n	8003cf0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d002      	beq.n	8003bfc <HAL_SPI_Transmit+0x19a>
 8003bf6:	8afb      	ldrh	r3, [r7, #22]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d174      	bne.n	8003ce6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d912      	bls.n	8003c2c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0a:	881a      	ldrh	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c16:	1c9a      	adds	r2, r3, #2
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	3b02      	subs	r3, #2
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c2a:	e05c      	b.n	8003ce6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	330c      	adds	r3, #12
 8003c36:	7812      	ldrb	r2, [r2, #0]
 8003c38:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3e:	1c5a      	adds	r2, r3, #1
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003c52:	e048      	b.n	8003ce6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d12b      	bne.n	8003cba <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d912      	bls.n	8003c92 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c70:	881a      	ldrh	r2, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7c:	1c9a      	adds	r2, r3, #2
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	3b02      	subs	r3, #2
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c90:	e029      	b.n	8003ce6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	330c      	adds	r3, #12
 8003c9c:	7812      	ldrb	r2, [r2, #0]
 8003c9e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca4:	1c5a      	adds	r2, r3, #1
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003cb8:	e015      	b.n	8003ce6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cba:	f7fd fd65 	bl	8001788 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	683a      	ldr	r2, [r7, #0]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d803      	bhi.n	8003cd2 <HAL_SPI_Transmit+0x270>
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd0:	d102      	bne.n	8003cd8 <HAL_SPI_Transmit+0x276>
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d106      	bne.n	8003ce6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003ce4:	e029      	b.n	8003d3a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1b1      	bne.n	8003c54 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	6839      	ldr	r1, [r7, #0]
 8003cf4:	68f8      	ldr	r0, [r7, #12]
 8003cf6:	f000 fb69 	bl	80043cc <SPI_EndRxTxTransaction>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d002      	beq.n	8003d06 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2220      	movs	r2, #32
 8003d04:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10a      	bne.n	8003d24 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d0e:	2300      	movs	r3, #0
 8003d10:	613b      	str	r3, [r7, #16]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	613b      	str	r3, [r7, #16]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	613b      	str	r3, [r7, #16]
 8003d22:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d002      	beq.n	8003d32 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	77fb      	strb	r3, [r7, #31]
 8003d30:	e003      	b.n	8003d3a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003d42:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3720      	adds	r7, #32
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b08a      	sub	sp, #40	; 0x28
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]
 8003d58:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d101      	bne.n	8003d72 <HAL_SPI_TransmitReceive+0x26>
 8003d6e:	2302      	movs	r3, #2
 8003d70:	e20a      	b.n	8004188 <HAL_SPI_TransmitReceive+0x43c>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d7a:	f7fd fd05 	bl	8001788 <HAL_GetTick>
 8003d7e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d86:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003d8e:	887b      	ldrh	r3, [r7, #2]
 8003d90:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003d92:	887b      	ldrh	r3, [r7, #2]
 8003d94:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003d96:	7efb      	ldrb	r3, [r7, #27]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d00e      	beq.n	8003dba <HAL_SPI_TransmitReceive+0x6e>
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003da2:	d106      	bne.n	8003db2 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d102      	bne.n	8003db2 <HAL_SPI_TransmitReceive+0x66>
 8003dac:	7efb      	ldrb	r3, [r7, #27]
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d003      	beq.n	8003dba <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003db2:	2302      	movs	r3, #2
 8003db4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003db8:	e1e0      	b.n	800417c <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d005      	beq.n	8003dcc <HAL_SPI_TransmitReceive+0x80>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d002      	beq.n	8003dcc <HAL_SPI_TransmitReceive+0x80>
 8003dc6:	887b      	ldrh	r3, [r7, #2]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d103      	bne.n	8003dd4 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003dd2:	e1d3      	b.n	800417c <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	2b04      	cmp	r3, #4
 8003dde:	d003      	beq.n	8003de8 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2205      	movs	r2, #5
 8003de4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	887a      	ldrh	r2, [r7, #2]
 8003df8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	887a      	ldrh	r2, [r7, #2]
 8003e00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	887a      	ldrh	r2, [r7, #2]
 8003e0e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	887a      	ldrh	r2, [r7, #2]
 8003e14:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e2a:	d802      	bhi.n	8003e32 <HAL_SPI_TransmitReceive+0xe6>
 8003e2c:	8a3b      	ldrh	r3, [r7, #16]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d908      	bls.n	8003e44 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	685a      	ldr	r2, [r3, #4]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e40:	605a      	str	r2, [r3, #4]
 8003e42:	e007      	b.n	8003e54 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e52:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e5e:	2b40      	cmp	r3, #64	; 0x40
 8003e60:	d007      	beq.n	8003e72 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e70:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e7a:	f240 8081 	bls.w	8003f80 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d002      	beq.n	8003e8c <HAL_SPI_TransmitReceive+0x140>
 8003e86:	8a7b      	ldrh	r3, [r7, #18]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d16d      	bne.n	8003f68 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e90:	881a      	ldrh	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9c:	1c9a      	adds	r2, r3, #2
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003eb0:	e05a      	b.n	8003f68 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d11b      	bne.n	8003ef8 <HAL_SPI_TransmitReceive+0x1ac>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d016      	beq.n	8003ef8 <HAL_SPI_TransmitReceive+0x1ac>
 8003eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d113      	bne.n	8003ef8 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed4:	881a      	ldrh	r2, [r3, #0]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee0:	1c9a      	adds	r2, r3, #2
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	3b01      	subs	r3, #1
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d11c      	bne.n	8003f40 <HAL_SPI_TransmitReceive+0x1f4>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d016      	beq.n	8003f40 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68da      	ldr	r2, [r3, #12]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1c:	b292      	uxth	r2, r2
 8003f1e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f24:	1c9a      	adds	r2, r3, #2
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	3b01      	subs	r3, #1
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003f40:	f7fd fc22 	bl	8001788 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d80b      	bhi.n	8003f68 <HAL_SPI_TransmitReceive+0x21c>
 8003f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f56:	d007      	beq.n	8003f68 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8003f66:	e109      	b.n	800417c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d19f      	bne.n	8003eb2 <HAL_SPI_TransmitReceive+0x166>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d199      	bne.n	8003eb2 <HAL_SPI_TransmitReceive+0x166>
 8003f7e:	e0e3      	b.n	8004148 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d003      	beq.n	8003f90 <HAL_SPI_TransmitReceive+0x244>
 8003f88:	8a7b      	ldrh	r3, [r7, #18]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	f040 80cf 	bne.w	800412e <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d912      	bls.n	8003fc0 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9e:	881a      	ldrh	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003faa:	1c9a      	adds	r2, r3, #2
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	3b02      	subs	r3, #2
 8003fb8:	b29a      	uxth	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003fbe:	e0b6      	b.n	800412e <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	330c      	adds	r3, #12
 8003fca:	7812      	ldrb	r2, [r2, #0]
 8003fcc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd2:	1c5a      	adds	r2, r3, #1
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fe6:	e0a2      	b.n	800412e <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d134      	bne.n	8004060 <HAL_SPI_TransmitReceive+0x314>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d02f      	beq.n	8004060 <HAL_SPI_TransmitReceive+0x314>
 8004000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004002:	2b01      	cmp	r3, #1
 8004004:	d12c      	bne.n	8004060 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800400a:	b29b      	uxth	r3, r3
 800400c:	2b01      	cmp	r3, #1
 800400e:	d912      	bls.n	8004036 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004014:	881a      	ldrh	r2, [r3, #0]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004020:	1c9a      	adds	r2, r3, #2
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800402a:	b29b      	uxth	r3, r3
 800402c:	3b02      	subs	r3, #2
 800402e:	b29a      	uxth	r2, r3
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004034:	e012      	b.n	800405c <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	330c      	adds	r3, #12
 8004040:	7812      	ldrb	r2, [r2, #0]
 8004042:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004048:	1c5a      	adds	r2, r3, #1
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004052:	b29b      	uxth	r3, r3
 8004054:	3b01      	subs	r3, #1
 8004056:	b29a      	uxth	r2, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800405c:	2300      	movs	r3, #0
 800405e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b01      	cmp	r3, #1
 800406c:	d148      	bne.n	8004100 <HAL_SPI_TransmitReceive+0x3b4>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004074:	b29b      	uxth	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d042      	beq.n	8004100 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004080:	b29b      	uxth	r3, r3
 8004082:	2b01      	cmp	r3, #1
 8004084:	d923      	bls.n	80040ce <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68da      	ldr	r2, [r3, #12]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004090:	b292      	uxth	r2, r2
 8004092:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004098:	1c9a      	adds	r2, r3, #2
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	3b02      	subs	r3, #2
 80040a8:	b29a      	uxth	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d81f      	bhi.n	80040fc <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	685a      	ldr	r2, [r3, #4]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80040ca:	605a      	str	r2, [r3, #4]
 80040cc:	e016      	b.n	80040fc <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f103 020c 	add.w	r2, r3, #12
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040da:	7812      	ldrb	r2, [r2, #0]
 80040dc:	b2d2      	uxtb	r2, r2
 80040de:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e4:	1c5a      	adds	r2, r3, #1
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	3b01      	subs	r3, #1
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040fc:	2301      	movs	r3, #1
 80040fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004100:	f7fd fb42 	bl	8001788 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800410c:	429a      	cmp	r2, r3
 800410e:	d803      	bhi.n	8004118 <HAL_SPI_TransmitReceive+0x3cc>
 8004110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004116:	d102      	bne.n	800411e <HAL_SPI_TransmitReceive+0x3d2>
 8004118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411a:	2b00      	cmp	r3, #0
 800411c:	d107      	bne.n	800412e <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800412c:	e026      	b.n	800417c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004132:	b29b      	uxth	r3, r3
 8004134:	2b00      	cmp	r3, #0
 8004136:	f47f af57 	bne.w	8003fe8 <HAL_SPI_TransmitReceive+0x29c>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004140:	b29b      	uxth	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	f47f af50 	bne.w	8003fe8 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004148:	69fa      	ldr	r2, [r7, #28]
 800414a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 f93d 	bl	80043cc <SPI_EndRxTxTransaction>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d005      	beq.n	8004164 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2220      	movs	r2, #32
 8004162:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004168:	2b00      	cmp	r3, #0
 800416a:	d003      	beq.n	8004174 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004172:	e003      	b.n	800417c <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004184:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004188:	4618      	mov	r0, r3
 800418a:	3728      	adds	r7, #40	; 0x28
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b088      	sub	sp, #32
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	603b      	str	r3, [r7, #0]
 800419c:	4613      	mov	r3, r2
 800419e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80041a0:	f7fd faf2 	bl	8001788 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a8:	1a9b      	subs	r3, r3, r2
 80041aa:	683a      	ldr	r2, [r7, #0]
 80041ac:	4413      	add	r3, r2
 80041ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80041b0:	f7fd faea 	bl	8001788 <HAL_GetTick>
 80041b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80041b6:	4b39      	ldr	r3, [pc, #228]	; (800429c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	015b      	lsls	r3, r3, #5
 80041bc:	0d1b      	lsrs	r3, r3, #20
 80041be:	69fa      	ldr	r2, [r7, #28]
 80041c0:	fb02 f303 	mul.w	r3, r2, r3
 80041c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041c6:	e054      	b.n	8004272 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ce:	d050      	beq.n	8004272 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041d0:	f7fd fada 	bl	8001788 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	69fa      	ldr	r2, [r7, #28]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d902      	bls.n	80041e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d13d      	bne.n	8004262 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	685a      	ldr	r2, [r3, #4]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80041f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041fe:	d111      	bne.n	8004224 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004208:	d004      	beq.n	8004214 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004212:	d107      	bne.n	8004224 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004222:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004228:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800422c:	d10f      	bne.n	800424e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800423c:	601a      	str	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800424c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e017      	b.n	8004292 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d101      	bne.n	800426c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004268:	2300      	movs	r3, #0
 800426a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	3b01      	subs	r3, #1
 8004270:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	689a      	ldr	r2, [r3, #8]
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	4013      	ands	r3, r2
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	429a      	cmp	r2, r3
 8004280:	bf0c      	ite	eq
 8004282:	2301      	moveq	r3, #1
 8004284:	2300      	movne	r3, #0
 8004286:	b2db      	uxtb	r3, r3
 8004288:	461a      	mov	r2, r3
 800428a:	79fb      	ldrb	r3, [r7, #7]
 800428c:	429a      	cmp	r2, r3
 800428e:	d19b      	bne.n	80041c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3720      	adds	r7, #32
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	20000068 	.word	0x20000068

080042a0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b08a      	sub	sp, #40	; 0x28
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
 80042ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80042ae:	2300      	movs	r3, #0
 80042b0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80042b2:	f7fd fa69 	bl	8001788 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ba:	1a9b      	subs	r3, r3, r2
 80042bc:	683a      	ldr	r2, [r7, #0]
 80042be:	4413      	add	r3, r2
 80042c0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80042c2:	f7fd fa61 	bl	8001788 <HAL_GetTick>
 80042c6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	330c      	adds	r3, #12
 80042ce:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80042d0:	4b3d      	ldr	r3, [pc, #244]	; (80043c8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	4613      	mov	r3, r2
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	4413      	add	r3, r2
 80042da:	00da      	lsls	r2, r3, #3
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	0d1b      	lsrs	r3, r3, #20
 80042e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042e2:	fb02 f303 	mul.w	r3, r2, r3
 80042e6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80042e8:	e060      	b.n	80043ac <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80042f0:	d107      	bne.n	8004302 <SPI_WaitFifoStateUntilTimeout+0x62>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d104      	bne.n	8004302 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004300:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004308:	d050      	beq.n	80043ac <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800430a:	f7fd fa3d 	bl	8001788 <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	6a3b      	ldr	r3, [r7, #32]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004316:	429a      	cmp	r2, r3
 8004318:	d902      	bls.n	8004320 <SPI_WaitFifoStateUntilTimeout+0x80>
 800431a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431c:	2b00      	cmp	r3, #0
 800431e:	d13d      	bne.n	800439c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800432e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004338:	d111      	bne.n	800435e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004342:	d004      	beq.n	800434e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800434c:	d107      	bne.n	800435e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800435c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004362:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004366:	d10f      	bne.n	8004388 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004376:	601a      	str	r2, [r3, #0]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004386:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e010      	b.n	80043be <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80043a2:	2300      	movs	r3, #0
 80043a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	3b01      	subs	r3, #1
 80043aa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	689a      	ldr	r2, [r3, #8]
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	4013      	ands	r3, r2
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d196      	bne.n	80042ea <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3728      	adds	r7, #40	; 0x28
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	20000068 	.word	0x20000068

080043cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af02      	add	r7, sp, #8
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	9300      	str	r3, [sp, #0]
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	2200      	movs	r2, #0
 80043e0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f7ff ff5b 	bl	80042a0 <SPI_WaitFifoStateUntilTimeout>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d007      	beq.n	8004400 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043f4:	f043 0220 	orr.w	r2, r3, #32
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e027      	b.n	8004450 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	9300      	str	r3, [sp, #0]
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	2200      	movs	r2, #0
 8004408:	2180      	movs	r1, #128	; 0x80
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f7ff fec0 	bl	8004190 <SPI_WaitFlagStateUntilTimeout>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d007      	beq.n	8004426 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800441a:	f043 0220 	orr.w	r2, r3, #32
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e014      	b.n	8004450 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	9300      	str	r3, [sp, #0]
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	2200      	movs	r2, #0
 800442e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	f7ff ff34 	bl	80042a0 <SPI_WaitFifoStateUntilTimeout>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d007      	beq.n	800444e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004442:	f043 0220 	orr.w	r2, r3, #32
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e000      	b.n	8004450 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e049      	b.n	80044fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d106      	bne.n	8004484 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 f841 	bl	8004506 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2202      	movs	r2, #2
 8004488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	3304      	adds	r3, #4
 8004494:	4619      	mov	r1, r3
 8004496:	4610      	mov	r0, r2
 8004498:	f000 f9da 	bl	8004850 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3708      	adds	r7, #8
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004506:	b480      	push	{r7}
 8004508:	b083      	sub	sp, #12
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800450e:	bf00      	nop
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
	...

0800451c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b01      	cmp	r3, #1
 800452e:	d001      	beq.n	8004534 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e04f      	b.n	80045d4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2202      	movs	r2, #2
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68da      	ldr	r2, [r3, #12]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f042 0201 	orr.w	r2, r2, #1
 800454a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a23      	ldr	r2, [pc, #140]	; (80045e0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d01d      	beq.n	8004592 <HAL_TIM_Base_Start_IT+0x76>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800455e:	d018      	beq.n	8004592 <HAL_TIM_Base_Start_IT+0x76>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a1f      	ldr	r2, [pc, #124]	; (80045e4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d013      	beq.n	8004592 <HAL_TIM_Base_Start_IT+0x76>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a1e      	ldr	r2, [pc, #120]	; (80045e8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d00e      	beq.n	8004592 <HAL_TIM_Base_Start_IT+0x76>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a1c      	ldr	r2, [pc, #112]	; (80045ec <HAL_TIM_Base_Start_IT+0xd0>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d009      	beq.n	8004592 <HAL_TIM_Base_Start_IT+0x76>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a1b      	ldr	r2, [pc, #108]	; (80045f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d004      	beq.n	8004592 <HAL_TIM_Base_Start_IT+0x76>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a19      	ldr	r2, [pc, #100]	; (80045f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d115      	bne.n	80045be <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	689a      	ldr	r2, [r3, #8]
 8004598:	4b17      	ldr	r3, [pc, #92]	; (80045f8 <HAL_TIM_Base_Start_IT+0xdc>)
 800459a:	4013      	ands	r3, r2
 800459c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2b06      	cmp	r3, #6
 80045a2:	d015      	beq.n	80045d0 <HAL_TIM_Base_Start_IT+0xb4>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045aa:	d011      	beq.n	80045d0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f042 0201 	orr.w	r2, r2, #1
 80045ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045bc:	e008      	b.n	80045d0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f042 0201 	orr.w	r2, r2, #1
 80045cc:	601a      	str	r2, [r3, #0]
 80045ce:	e000      	b.n	80045d2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045d0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3714      	adds	r7, #20
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr
 80045e0:	40012c00 	.word	0x40012c00
 80045e4:	40000400 	.word	0x40000400
 80045e8:	40000800 	.word	0x40000800
 80045ec:	40000c00 	.word	0x40000c00
 80045f0:	40013400 	.word	0x40013400
 80045f4:	40014000 	.word	0x40014000
 80045f8:	00010007 	.word	0x00010007

080045fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d020      	beq.n	8004660 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f003 0302 	and.w	r3, r3, #2
 8004624:	2b00      	cmp	r3, #0
 8004626:	d01b      	beq.n	8004660 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f06f 0202 	mvn.w	r2, #2
 8004630:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2201      	movs	r2, #1
 8004636:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	f003 0303 	and.w	r3, r3, #3
 8004642:	2b00      	cmp	r3, #0
 8004644:	d003      	beq.n	800464e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 f8e4 	bl	8004814 <HAL_TIM_IC_CaptureCallback>
 800464c:	e005      	b.n	800465a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f8d6 	bl	8004800 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 f8e7 	bl	8004828 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	f003 0304 	and.w	r3, r3, #4
 8004666:	2b00      	cmp	r3, #0
 8004668:	d020      	beq.n	80046ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f003 0304 	and.w	r3, r3, #4
 8004670:	2b00      	cmp	r3, #0
 8004672:	d01b      	beq.n	80046ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f06f 0204 	mvn.w	r2, #4
 800467c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2202      	movs	r2, #2
 8004682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800468e:	2b00      	cmp	r3, #0
 8004690:	d003      	beq.n	800469a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 f8be 	bl	8004814 <HAL_TIM_IC_CaptureCallback>
 8004698:	e005      	b.n	80046a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f8b0 	bl	8004800 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f000 f8c1 	bl	8004828 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	f003 0308 	and.w	r3, r3, #8
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d020      	beq.n	80046f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f003 0308 	and.w	r3, r3, #8
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d01b      	beq.n	80046f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f06f 0208 	mvn.w	r2, #8
 80046c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2204      	movs	r2, #4
 80046ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	f003 0303 	and.w	r3, r3, #3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d003      	beq.n	80046e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f898 	bl	8004814 <HAL_TIM_IC_CaptureCallback>
 80046e4:	e005      	b.n	80046f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f88a 	bl	8004800 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 f89b 	bl	8004828 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	f003 0310 	and.w	r3, r3, #16
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d020      	beq.n	8004744 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f003 0310 	and.w	r3, r3, #16
 8004708:	2b00      	cmp	r3, #0
 800470a:	d01b      	beq.n	8004744 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f06f 0210 	mvn.w	r2, #16
 8004714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2208      	movs	r2, #8
 800471a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	69db      	ldr	r3, [r3, #28]
 8004722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004726:	2b00      	cmp	r3, #0
 8004728:	d003      	beq.n	8004732 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f872 	bl	8004814 <HAL_TIM_IC_CaptureCallback>
 8004730:	e005      	b.n	800473e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f864 	bl	8004800 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 f875 	bl	8004828 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00c      	beq.n	8004768 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	2b00      	cmp	r3, #0
 8004756:	d007      	beq.n	8004768 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f06f 0201 	mvn.w	r2, #1
 8004760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f7fc fe48 	bl	80013f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00c      	beq.n	800478c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004778:	2b00      	cmp	r3, #0
 800477a:	d007      	beq.n	800478c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 f906 	bl	8004998 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00c      	beq.n	80047b0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800479c:	2b00      	cmp	r3, #0
 800479e:	d007      	beq.n	80047b0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80047a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f8fe 	bl	80049ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00c      	beq.n	80047d4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d007      	beq.n	80047d4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80047cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 f834 	bl	800483c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	f003 0320 	and.w	r3, r3, #32
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00c      	beq.n	80047f8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f003 0320 	and.w	r3, r3, #32
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d007      	beq.n	80047f8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f06f 0220 	mvn.w	r2, #32
 80047f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 f8c6 	bl	8004984 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047f8:	bf00      	nop
 80047fa:	3710      	adds	r7, #16
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a40      	ldr	r2, [pc, #256]	; (8004964 <TIM_Base_SetConfig+0x114>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d013      	beq.n	8004890 <TIM_Base_SetConfig+0x40>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800486e:	d00f      	beq.n	8004890 <TIM_Base_SetConfig+0x40>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a3d      	ldr	r2, [pc, #244]	; (8004968 <TIM_Base_SetConfig+0x118>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d00b      	beq.n	8004890 <TIM_Base_SetConfig+0x40>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a3c      	ldr	r2, [pc, #240]	; (800496c <TIM_Base_SetConfig+0x11c>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d007      	beq.n	8004890 <TIM_Base_SetConfig+0x40>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a3b      	ldr	r2, [pc, #236]	; (8004970 <TIM_Base_SetConfig+0x120>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d003      	beq.n	8004890 <TIM_Base_SetConfig+0x40>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a3a      	ldr	r2, [pc, #232]	; (8004974 <TIM_Base_SetConfig+0x124>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d108      	bne.n	80048a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004896:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	4313      	orrs	r3, r2
 80048a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a2f      	ldr	r2, [pc, #188]	; (8004964 <TIM_Base_SetConfig+0x114>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d01f      	beq.n	80048ea <TIM_Base_SetConfig+0x9a>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b0:	d01b      	beq.n	80048ea <TIM_Base_SetConfig+0x9a>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a2c      	ldr	r2, [pc, #176]	; (8004968 <TIM_Base_SetConfig+0x118>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d017      	beq.n	80048ea <TIM_Base_SetConfig+0x9a>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a2b      	ldr	r2, [pc, #172]	; (800496c <TIM_Base_SetConfig+0x11c>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d013      	beq.n	80048ea <TIM_Base_SetConfig+0x9a>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a2a      	ldr	r2, [pc, #168]	; (8004970 <TIM_Base_SetConfig+0x120>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d00f      	beq.n	80048ea <TIM_Base_SetConfig+0x9a>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a29      	ldr	r2, [pc, #164]	; (8004974 <TIM_Base_SetConfig+0x124>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d00b      	beq.n	80048ea <TIM_Base_SetConfig+0x9a>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a28      	ldr	r2, [pc, #160]	; (8004978 <TIM_Base_SetConfig+0x128>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d007      	beq.n	80048ea <TIM_Base_SetConfig+0x9a>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a27      	ldr	r2, [pc, #156]	; (800497c <TIM_Base_SetConfig+0x12c>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d003      	beq.n	80048ea <TIM_Base_SetConfig+0x9a>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a26      	ldr	r2, [pc, #152]	; (8004980 <TIM_Base_SetConfig+0x130>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d108      	bne.n	80048fc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	4313      	orrs	r3, r2
 8004908:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	689a      	ldr	r2, [r3, #8]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a10      	ldr	r2, [pc, #64]	; (8004964 <TIM_Base_SetConfig+0x114>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d00f      	beq.n	8004948 <TIM_Base_SetConfig+0xf8>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a12      	ldr	r2, [pc, #72]	; (8004974 <TIM_Base_SetConfig+0x124>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d00b      	beq.n	8004948 <TIM_Base_SetConfig+0xf8>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a11      	ldr	r2, [pc, #68]	; (8004978 <TIM_Base_SetConfig+0x128>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d007      	beq.n	8004948 <TIM_Base_SetConfig+0xf8>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a10      	ldr	r2, [pc, #64]	; (800497c <TIM_Base_SetConfig+0x12c>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d003      	beq.n	8004948 <TIM_Base_SetConfig+0xf8>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a0f      	ldr	r2, [pc, #60]	; (8004980 <TIM_Base_SetConfig+0x130>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d103      	bne.n	8004950 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	691a      	ldr	r2, [r3, #16]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	615a      	str	r2, [r3, #20]
}
 8004956:	bf00      	nop
 8004958:	3714      	adds	r7, #20
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	40012c00 	.word	0x40012c00
 8004968:	40000400 	.word	0x40000400
 800496c:	40000800 	.word	0x40000800
 8004970:	40000c00 	.word	0x40000c00
 8004974:	40013400 	.word	0x40013400
 8004978:	40014000 	.word	0x40014000
 800497c:	40014400 	.word	0x40014400
 8004980:	40014800 	.word	0x40014800

08004984 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800498c:	bf00      	nop
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <memset>:
 80049c0:	4402      	add	r2, r0
 80049c2:	4603      	mov	r3, r0
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d100      	bne.n	80049ca <memset+0xa>
 80049c8:	4770      	bx	lr
 80049ca:	f803 1b01 	strb.w	r1, [r3], #1
 80049ce:	e7f9      	b.n	80049c4 <memset+0x4>

080049d0 <__libc_init_array>:
 80049d0:	b570      	push	{r4, r5, r6, lr}
 80049d2:	4d0d      	ldr	r5, [pc, #52]	; (8004a08 <__libc_init_array+0x38>)
 80049d4:	4c0d      	ldr	r4, [pc, #52]	; (8004a0c <__libc_init_array+0x3c>)
 80049d6:	1b64      	subs	r4, r4, r5
 80049d8:	10a4      	asrs	r4, r4, #2
 80049da:	2600      	movs	r6, #0
 80049dc:	42a6      	cmp	r6, r4
 80049de:	d109      	bne.n	80049f4 <__libc_init_array+0x24>
 80049e0:	4d0b      	ldr	r5, [pc, #44]	; (8004a10 <__libc_init_array+0x40>)
 80049e2:	4c0c      	ldr	r4, [pc, #48]	; (8004a14 <__libc_init_array+0x44>)
 80049e4:	f000 f818 	bl	8004a18 <_init>
 80049e8:	1b64      	subs	r4, r4, r5
 80049ea:	10a4      	asrs	r4, r4, #2
 80049ec:	2600      	movs	r6, #0
 80049ee:	42a6      	cmp	r6, r4
 80049f0:	d105      	bne.n	80049fe <__libc_init_array+0x2e>
 80049f2:	bd70      	pop	{r4, r5, r6, pc}
 80049f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80049f8:	4798      	blx	r3
 80049fa:	3601      	adds	r6, #1
 80049fc:	e7ee      	b.n	80049dc <__libc_init_array+0xc>
 80049fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a02:	4798      	blx	r3
 8004a04:	3601      	adds	r6, #1
 8004a06:	e7f2      	b.n	80049ee <__libc_init_array+0x1e>
 8004a08:	08004fc4 	.word	0x08004fc4
 8004a0c:	08004fc4 	.word	0x08004fc4
 8004a10:	08004fc4 	.word	0x08004fc4
 8004a14:	08004fc8 	.word	0x08004fc8

08004a18 <_init>:
 8004a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a1a:	bf00      	nop
 8004a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a1e:	bc08      	pop	{r3}
 8004a20:	469e      	mov	lr, r3
 8004a22:	4770      	bx	lr

08004a24 <_fini>:
 8004a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a26:	bf00      	nop
 8004a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a2a:	bc08      	pop	{r3}
 8004a2c:	469e      	mov	lr, r3
 8004a2e:	4770      	bx	lr
