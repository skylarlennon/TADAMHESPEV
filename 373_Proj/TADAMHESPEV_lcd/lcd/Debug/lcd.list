
lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003128  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  080032e4  080032e4  000132e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003840  08003840  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003840  08003840  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003840  08003840  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003840  08003840  00013840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003844  08003844  00013844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003848  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000074  080038bc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  080038bc  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000081ec  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016de  00000000  00000000  000282d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000870  00000000  00000000  000299b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000651  00000000  00000000  0002a228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028b4e  00000000  00000000  0002a879  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000926a  00000000  00000000  000533c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f83a1  00000000  00000000  0005c631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000211c  00000000  00000000  001549d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  00156af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000074 	.word	0x20000074
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080032cc 	.word	0x080032cc

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000078 	.word	0x20000078
 80001f8:	080032cc 	.word	0x080032cc

080001fc <uint16_to_bytes>:
#include "stm32l4xx_hal.h"
#include <stdlib.h>

// Probably going to move these to a different file, but for now
void uint16_to_bytes(uint16_t in, uint8_t *out)
{
 80001fc:	b480      	push	{r7}
 80001fe:	b083      	sub	sp, #12
 8000200:	af00      	add	r7, sp, #0
 8000202:	4603      	mov	r3, r0
 8000204:	6039      	str	r1, [r7, #0]
 8000206:	80fb      	strh	r3, [r7, #6]
	out[0] = (in >> 8) & 0xFF;
 8000208:	88fb      	ldrh	r3, [r7, #6]
 800020a:	0a1b      	lsrs	r3, r3, #8
 800020c:	b29b      	uxth	r3, r3
 800020e:	b2da      	uxtb	r2, r3
 8000210:	683b      	ldr	r3, [r7, #0]
 8000212:	701a      	strb	r2, [r3, #0]
	out[1] = in & 0xFF;
 8000214:	683b      	ldr	r3, [r7, #0]
 8000216:	3301      	adds	r3, #1
 8000218:	88fa      	ldrh	r2, [r7, #6]
 800021a:	b2d2      	uxtb	r2, r2
 800021c:	701a      	strb	r2, [r3, #0]
}
 800021e:	bf00      	nop
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr
	...

0800022c <LCD_reset>:
	HX8357_DISPON, 0x80 +  50/5, // Main screen turn on, delay 50 ms
	0,                           // END OF COMMAND LIST
  };

void LCD_reset()
{
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8000230:	2201      	movs	r2, #1
 8000232:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000236:	480d      	ldr	r0, [pc, #52]	; (800026c <LCD_reset+0x40>)
 8000238:	f001 faf2 	bl	8001820 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800023c:	2064      	movs	r0, #100	; 0x64
 800023e:	f001 f853 	bl	80012e8 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8000242:	2200      	movs	r2, #0
 8000244:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000248:	4808      	ldr	r0, [pc, #32]	; (800026c <LCD_reset+0x40>)
 800024a:	f001 fae9 	bl	8001820 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800024e:	2064      	movs	r0, #100	; 0x64
 8000250:	f001 f84a 	bl	80012e8 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8000254:	2201      	movs	r2, #1
 8000256:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800025a:	4804      	ldr	r0, [pc, #16]	; (800026c <LCD_reset+0x40>)
 800025c:	f001 fae0 	bl	8001820 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000260:	20c8      	movs	r0, #200	; 0xc8
 8000262:	f001 f841 	bl	80012e8 <HAL_Delay>
}
 8000266:	bf00      	nop
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	48001400 	.word	0x48001400

08000270 <LCD_writeCommand>:

HAL_StatusTypeDef LCD_writeCommand(SPI_HandleTypeDef* spi, uint8_t cmd)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b086      	sub	sp, #24
 8000274:	af02      	add	r7, sp, #8
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	460b      	mov	r3, r1
 800027a:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef result;
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 800027c:	2200      	movs	r2, #0
 800027e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000282:	480c      	ldr	r0, [pc, #48]	; (80002b4 <LCD_writeCommand+0x44>)
 8000284:	f001 facc 	bl	8001820 <HAL_GPIO_WritePin>
	uint8_t buf[1];
	result = HAL_SPI_TransmitReceive(spi, &cmd, &buf[0], 1, 100);
 8000288:	f107 020c 	add.w	r2, r7, #12
 800028c:	1cf9      	adds	r1, r7, #3
 800028e:	2364      	movs	r3, #100	; 0x64
 8000290:	9300      	str	r3, [sp, #0]
 8000292:	2301      	movs	r3, #1
 8000294:	6878      	ldr	r0, [r7, #4]
 8000296:	f002 fc67 	bl	8002b68 <HAL_SPI_TransmitReceive>
 800029a:	4603      	mov	r3, r0
 800029c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 800029e:	2201      	movs	r2, #1
 80002a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002a4:	4803      	ldr	r0, [pc, #12]	; (80002b4 <LCD_writeCommand+0x44>)
 80002a6:	f001 fabb 	bl	8001820 <HAL_GPIO_WritePin>
	return result;
 80002aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80002ac:	4618      	mov	r0, r3
 80002ae:	3710      	adds	r7, #16
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	48001400 	.word	0x48001400

080002b8 <LCD_startWrite>:

void LCD_startWrite()
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 80002bc:	2200      	movs	r2, #0
 80002be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002c2:	4802      	ldr	r0, [pc, #8]	; (80002cc <LCD_startWrite+0x14>)
 80002c4:	f001 faac 	bl	8001820 <HAL_GPIO_WritePin>
}
 80002c8:	bf00      	nop
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	48001400 	.word	0x48001400

080002d0 <LCD_endWrite>:

void LCD_endWrite()
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80002d4:	2201      	movs	r2, #1
 80002d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002da:	4802      	ldr	r0, [pc, #8]	; (80002e4 <LCD_endWrite+0x14>)
 80002dc:	f001 faa0 	bl	8001820 <HAL_GPIO_WritePin>
}
 80002e0:	bf00      	nop
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	48001400 	.word	0x48001400

080002e8 <LCD_begin>:

int LCD_begin(SPI_HandleTypeDef* spi)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b084      	sub	sp, #16
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
	LCD_reset();
 80002f0:	f7ff ff9c 	bl	800022c <LCD_reset>
	LCD_startWrite();
 80002f4:	f7ff ffe0 	bl	80002b8 <LCD_startWrite>
	uint8_t *addr = init;
 80002f8:	4b26      	ldr	r3, [pc, #152]	; (8000394 <LCD_begin+0xac>)
 80002fa:	60fb      	str	r3, [r7, #12]
	uint8_t cmd, x, numArgs;
	HAL_StatusTypeDef result;
	while((cmd = *(addr++)) > 0) // '0' command ends list
 80002fc:	e03b      	b.n	8000376 <LCD_begin+0x8e>
	{
		if (cmd != 0xFF) // '255' is ignored
 80002fe:	7abb      	ldrb	r3, [r7, #10]
 8000300:	2bff      	cmp	r3, #255	; 0xff
 8000302:	d00d      	beq.n	8000320 <LCD_begin+0x38>
		{
			result = LCD_writeCommand(spi, cmd);
 8000304:	7abb      	ldrb	r3, [r7, #10]
 8000306:	4619      	mov	r1, r3
 8000308:	6878      	ldr	r0, [r7, #4]
 800030a:	f7ff ffb1 	bl	8000270 <LCD_writeCommand>
 800030e:	4603      	mov	r3, r0
 8000310:	727b      	strb	r3, [r7, #9]
			if (result != HAL_OK)
 8000312:	7a7b      	ldrb	r3, [r7, #9]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d003      	beq.n	8000320 <LCD_begin+0x38>
			{
				LCD_endWrite();
 8000318:	f7ff ffda 	bl	80002d0 <LCD_endWrite>
				return 0;
 800031c:	2300      	movs	r3, #0
 800031e:	e035      	b.n	800038c <LCD_begin+0xa4>
			}
		}
		x = *(addr++);
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	1c5a      	adds	r2, r3, #1
 8000324:	60fa      	str	r2, [r7, #12]
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	723b      	strb	r3, [r7, #8]
		numArgs = x & 0x7F;
 800032a:	7a3b      	ldrb	r3, [r7, #8]
 800032c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000330:	72fb      	strb	r3, [r7, #11]
		if (x & 0x80) // If high bit set...
 8000332:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8000336:	2b00      	cmp	r3, #0
 8000338:	da18      	bge.n	800036c <LCD_begin+0x84>
		{
			HAL_Delay(numArgs * 5); // numArgs is actually a delay time (5ms units)
 800033a:	7afa      	ldrb	r2, [r7, #11]
 800033c:	4613      	mov	r3, r2
 800033e:	009b      	lsls	r3, r3, #2
 8000340:	4413      	add	r3, r2
 8000342:	4618      	mov	r0, r3
 8000344:	f000 ffd0 	bl	80012e8 <HAL_Delay>
 8000348:	e015      	b.n	8000376 <LCD_begin+0x8e>
		}
		else // Otherwise, issue args to command...
		{
			while (numArgs--)
			{
				result = HAL_SPI_Transmit(spi, addr++, 1, 100);
 800034a:	68f9      	ldr	r1, [r7, #12]
 800034c:	1c4b      	adds	r3, r1, #1
 800034e:	60fb      	str	r3, [r7, #12]
 8000350:	2364      	movs	r3, #100	; 0x64
 8000352:	2201      	movs	r2, #1
 8000354:	6878      	ldr	r0, [r7, #4]
 8000356:	f002 fa92 	bl	800287e <HAL_SPI_Transmit>
 800035a:	4603      	mov	r3, r0
 800035c:	727b      	strb	r3, [r7, #9]
				if (result != HAL_OK)
 800035e:	7a7b      	ldrb	r3, [r7, #9]
 8000360:	2b00      	cmp	r3, #0
 8000362:	d003      	beq.n	800036c <LCD_begin+0x84>
				{
					LCD_endWrite();
 8000364:	f7ff ffb4 	bl	80002d0 <LCD_endWrite>
					return 0;
 8000368:	2300      	movs	r3, #0
 800036a:	e00f      	b.n	800038c <LCD_begin+0xa4>
			while (numArgs--)
 800036c:	7afb      	ldrb	r3, [r7, #11]
 800036e:	1e5a      	subs	r2, r3, #1
 8000370:	72fa      	strb	r2, [r7, #11]
 8000372:	2b00      	cmp	r3, #0
 8000374:	d1e9      	bne.n	800034a <LCD_begin+0x62>
	while((cmd = *(addr++)) > 0) // '0' command ends list
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	1c5a      	adds	r2, r3, #1
 800037a:	60fa      	str	r2, [r7, #12]
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	72bb      	strb	r3, [r7, #10]
 8000380:	7abb      	ldrb	r3, [r7, #10]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d1bb      	bne.n	80002fe <LCD_begin+0x16>
				}
			}
		}
	}
	LCD_endWrite();
 8000386:	f7ff ffa3 	bl	80002d0 <LCD_endWrite>
	return 1;
 800038a:	2301      	movs	r3, #1
}
 800038c:	4618      	mov	r0, r3
 800038e:	3710      	adds	r7, #16
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}
 8000394:	20000000 	.word	0x20000000

08000398 <invertDisplay>:

int invertDisplay(SPI_HandleTypeDef* spi, int invert)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b084      	sub	sp, #16
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
 80003a0:	6039      	str	r1, [r7, #0]
	LCD_startWrite();
 80003a2:	f7ff ff89 	bl	80002b8 <LCD_startWrite>
	HAL_StatusTypeDef result = LCD_writeCommand(spi, invert ? HX8357_INVON : HX8357_INVOFF);
 80003a6:	683b      	ldr	r3, [r7, #0]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <invertDisplay+0x18>
 80003ac:	2321      	movs	r3, #33	; 0x21
 80003ae:	e000      	b.n	80003b2 <invertDisplay+0x1a>
 80003b0:	2320      	movs	r3, #32
 80003b2:	4619      	mov	r1, r3
 80003b4:	6878      	ldr	r0, [r7, #4]
 80003b6:	f7ff ff5b 	bl	8000270 <LCD_writeCommand>
 80003ba:	4603      	mov	r3, r0
 80003bc:	73fb      	strb	r3, [r7, #15]
	LCD_endWrite();
 80003be:	f7ff ff87 	bl	80002d0 <LCD_endWrite>
	return result == HAL_OK;
 80003c2:	7bfb      	ldrb	r3, [r7, #15]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	bf0c      	ite	eq
 80003c8:	2301      	moveq	r3, #1
 80003ca:	2300      	movne	r3, #0
 80003cc:	b2db      	uxtb	r3, r3
}
 80003ce:	4618      	mov	r0, r3
 80003d0:	3710      	adds	r7, #16
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}

080003d6 <LCD_setAddrWindow>:

int LCD_setAddrWindow(SPI_HandleTypeDef* spi, uint16_t x1, uint16_t y1, uint16_t w, uint16_t h)
{
 80003d6:	b580      	push	{r7, lr}
 80003d8:	b086      	sub	sp, #24
 80003da:	af00      	add	r7, sp, #0
 80003dc:	60f8      	str	r0, [r7, #12]
 80003de:	4608      	mov	r0, r1
 80003e0:	4611      	mov	r1, r2
 80003e2:	461a      	mov	r2, r3
 80003e4:	4603      	mov	r3, r0
 80003e6:	817b      	strh	r3, [r7, #10]
 80003e8:	460b      	mov	r3, r1
 80003ea:	813b      	strh	r3, [r7, #8]
 80003ec:	4613      	mov	r3, r2
 80003ee:	80fb      	strh	r3, [r7, #6]
	uint16_t x2 = x1 + w - 1;
 80003f0:	897a      	ldrh	r2, [r7, #10]
 80003f2:	88fb      	ldrh	r3, [r7, #6]
 80003f4:	4413      	add	r3, r2
 80003f6:	b29b      	uxth	r3, r3
 80003f8:	3b01      	subs	r3, #1
 80003fa:	82fb      	strh	r3, [r7, #22]
	uint16_t y2 = y1 + h - 1;
 80003fc:	893a      	ldrh	r2, [r7, #8]
 80003fe:	8c3b      	ldrh	r3, [r7, #32]
 8000400:	4413      	add	r3, r2
 8000402:	b29b      	uxth	r3, r3
 8000404:	3b01      	subs	r3, #1
 8000406:	82bb      	strh	r3, [r7, #20]
	uint8_t buf[2];

	LCD_startWrite();
 8000408:	f7ff ff56 	bl	80002b8 <LCD_startWrite>
	LCD_writeCommand(spi, HX8357_CASET); // Column address set
 800040c:	212a      	movs	r1, #42	; 0x2a
 800040e:	68f8      	ldr	r0, [r7, #12]
 8000410:	f7ff ff2e 	bl	8000270 <LCD_writeCommand>

	uint16_to_bytes(x1, buf);
 8000414:	f107 0210 	add.w	r2, r7, #16
 8000418:	897b      	ldrh	r3, [r7, #10]
 800041a:	4611      	mov	r1, r2
 800041c:	4618      	mov	r0, r3
 800041e:	f7ff feed 	bl	80001fc <uint16_to_bytes>
	HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 8000422:	f107 0110 	add.w	r1, r7, #16
 8000426:	2364      	movs	r3, #100	; 0x64
 8000428:	2202      	movs	r2, #2
 800042a:	68f8      	ldr	r0, [r7, #12]
 800042c:	f002 fa27 	bl	800287e <HAL_SPI_Transmit>

	uint16_to_bytes(x2, buf);
 8000430:	f107 0210 	add.w	r2, r7, #16
 8000434:	8afb      	ldrh	r3, [r7, #22]
 8000436:	4611      	mov	r1, r2
 8000438:	4618      	mov	r0, r3
 800043a:	f7ff fedf 	bl	80001fc <uint16_to_bytes>
	HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 800043e:	f107 0110 	add.w	r1, r7, #16
 8000442:	2364      	movs	r3, #100	; 0x64
 8000444:	2202      	movs	r2, #2
 8000446:	68f8      	ldr	r0, [r7, #12]
 8000448:	f002 fa19 	bl	800287e <HAL_SPI_Transmit>

	LCD_writeCommand(spi, HX8357_PASET); // Row address set
 800044c:	212b      	movs	r1, #43	; 0x2b
 800044e:	68f8      	ldr	r0, [r7, #12]
 8000450:	f7ff ff0e 	bl	8000270 <LCD_writeCommand>

	uint16_to_bytes(y1, buf);
 8000454:	f107 0210 	add.w	r2, r7, #16
 8000458:	893b      	ldrh	r3, [r7, #8]
 800045a:	4611      	mov	r1, r2
 800045c:	4618      	mov	r0, r3
 800045e:	f7ff fecd 	bl	80001fc <uint16_to_bytes>
	HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 8000462:	f107 0110 	add.w	r1, r7, #16
 8000466:	2364      	movs	r3, #100	; 0x64
 8000468:	2202      	movs	r2, #2
 800046a:	68f8      	ldr	r0, [r7, #12]
 800046c:	f002 fa07 	bl	800287e <HAL_SPI_Transmit>

	uint16_to_bytes(y2, buf);
 8000470:	f107 0210 	add.w	r2, r7, #16
 8000474:	8abb      	ldrh	r3, [r7, #20]
 8000476:	4611      	mov	r1, r2
 8000478:	4618      	mov	r0, r3
 800047a:	f7ff febf 	bl	80001fc <uint16_to_bytes>
	HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 800047e:	f107 0110 	add.w	r1, r7, #16
 8000482:	2364      	movs	r3, #100	; 0x64
 8000484:	2202      	movs	r2, #2
 8000486:	68f8      	ldr	r0, [r7, #12]
 8000488:	f002 f9f9 	bl	800287e <HAL_SPI_Transmit>

	LCD_endWrite();
 800048c:	f7ff ff20 	bl	80002d0 <LCD_endWrite>
	return 1;
 8000490:	2301      	movs	r3, #1
}
 8000492:	4618      	mov	r0, r3
 8000494:	3718      	adds	r7, #24
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}

0800049a <LCD_color565>:

uint16_t LCD_color565(uint8_t red, uint8_t green, uint8_t blue) {
 800049a:	b480      	push	{r7}
 800049c:	b083      	sub	sp, #12
 800049e:	af00      	add	r7, sp, #0
 80004a0:	4603      	mov	r3, r0
 80004a2:	71fb      	strb	r3, [r7, #7]
 80004a4:	460b      	mov	r3, r1
 80004a6:	71bb      	strb	r3, [r7, #6]
 80004a8:	4613      	mov	r3, r2
 80004aa:	717b      	strb	r3, [r7, #5]
    return ((red & 0xF8) << 8) | ((green & 0xFC) << 3) | ((blue & 0xF8) >> 3);
 80004ac:	79fb      	ldrb	r3, [r7, #7]
 80004ae:	021b      	lsls	r3, r3, #8
 80004b0:	b21b      	sxth	r3, r3
 80004b2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80004b6:	f023 0307 	bic.w	r3, r3, #7
 80004ba:	b21a      	sxth	r2, r3
 80004bc:	79bb      	ldrb	r3, [r7, #6]
 80004be:	00db      	lsls	r3, r3, #3
 80004c0:	b21b      	sxth	r3, r3
 80004c2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80004c6:	b21b      	sxth	r3, r3
 80004c8:	4313      	orrs	r3, r2
 80004ca:	b21a      	sxth	r2, r3
 80004cc:	797b      	ldrb	r3, [r7, #5]
 80004ce:	08db      	lsrs	r3, r3, #3
 80004d0:	b2db      	uxtb	r3, r3
 80004d2:	b21b      	sxth	r3, r3
 80004d4:	4313      	orrs	r3, r2
 80004d6:	b21b      	sxth	r3, r3
 80004d8:	b29b      	uxth	r3, r3
}
 80004da:	4618      	mov	r0, r3
 80004dc:	370c      	adds	r7, #12
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr

080004e6 <LCD_pushColor>:

int LCD_pushColor(SPI_HandleTypeDef* spi, uint16_t color) {
 80004e6:	b580      	push	{r7, lr}
 80004e8:	b082      	sub	sp, #8
 80004ea:	af00      	add	r7, sp, #0
 80004ec:	6078      	str	r0, [r7, #4]
 80004ee:	460b      	mov	r3, r1
 80004f0:	807b      	strh	r3, [r7, #2]
	LCD_startWrite();
 80004f2:	f7ff fee1 	bl	80002b8 <LCD_startWrite>
	LCD_writeCommand(spi, HX8357_RAMWR); // Write to RAM
 80004f6:	212c      	movs	r1, #44	; 0x2c
 80004f8:	6878      	ldr	r0, [r7, #4]
 80004fa:	f7ff feb9 	bl	8000270 <LCD_writeCommand>
	HAL_SPI_Transmit(spi, (uint8_t*)&color, 2, 100);
 80004fe:	1cb9      	adds	r1, r7, #2
 8000500:	2364      	movs	r3, #100	; 0x64
 8000502:	2202      	movs	r2, #2
 8000504:	6878      	ldr	r0, [r7, #4]
 8000506:	f002 f9ba 	bl	800287e <HAL_SPI_Transmit>
	LCD_writeCommand(spi, HX8357_NOP); // Write command to stop RAMWR
 800050a:	2100      	movs	r1, #0
 800050c:	6878      	ldr	r0, [r7, #4]
 800050e:	f7ff feaf 	bl	8000270 <LCD_writeCommand>
	LCD_endWrite();
 8000512:	f7ff fedd 	bl	80002d0 <LCD_endWrite>
	return 1;
 8000516:	2301      	movs	r3, #1
}
 8000518:	4618      	mov	r0, r3
 800051a:	3708      	adds	r7, #8
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}

08000520 <LCD_pushColorCopy>:

int LCD_pushColorCopy(SPI_HandleTypeDef* spi, uint16_t color, uint32_t count) {
 8000520:	b580      	push	{r7, lr}
 8000522:	b086      	sub	sp, #24
 8000524:	af00      	add	r7, sp, #0
 8000526:	60f8      	str	r0, [r7, #12]
 8000528:	460b      	mov	r3, r1
 800052a:	607a      	str	r2, [r7, #4]
 800052c:	817b      	strh	r3, [r7, #10]
	LCD_startWrite();
 800052e:	f7ff fec3 	bl	80002b8 <LCD_startWrite>

	LCD_writeCommand(spi, HX8357_RAMWR); // Write to RAM
 8000532:	212c      	movs	r1, #44	; 0x2c
 8000534:	68f8      	ldr	r0, [r7, #12]
 8000536:	f7ff fe9b 	bl	8000270 <LCD_writeCommand>

	uint8_t buf[2];
	uint16_to_bytes(color, &buf[0]);
 800053a:	f107 0210 	add.w	r2, r7, #16
 800053e:	897b      	ldrh	r3, [r7, #10]
 8000540:	4611      	mov	r1, r2
 8000542:	4618      	mov	r0, r3
 8000544:	f7ff fe5a 	bl	80001fc <uint16_to_bytes>
	for (int i = 0; i < count; ++i)
 8000548:	2300      	movs	r3, #0
 800054a:	617b      	str	r3, [r7, #20]
 800054c:	e009      	b.n	8000562 <LCD_pushColorCopy+0x42>
	{
		HAL_SPI_Transmit(spi, &buf[0], 2, 100);
 800054e:	f107 0110 	add.w	r1, r7, #16
 8000552:	2364      	movs	r3, #100	; 0x64
 8000554:	2202      	movs	r2, #2
 8000556:	68f8      	ldr	r0, [r7, #12]
 8000558:	f002 f991 	bl	800287e <HAL_SPI_Transmit>
	for (int i = 0; i < count; ++i)
 800055c:	697b      	ldr	r3, [r7, #20]
 800055e:	3301      	adds	r3, #1
 8000560:	617b      	str	r3, [r7, #20]
 8000562:	697b      	ldr	r3, [r7, #20]
 8000564:	687a      	ldr	r2, [r7, #4]
 8000566:	429a      	cmp	r2, r3
 8000568:	d8f1      	bhi.n	800054e <LCD_pushColorCopy+0x2e>
	}

	LCD_writeCommand(spi, HX8357_NOP); // Write command to stop RAMWR
 800056a:	2100      	movs	r1, #0
 800056c:	68f8      	ldr	r0, [r7, #12]
 800056e:	f7ff fe7f 	bl	8000270 <LCD_writeCommand>

	LCD_endWrite();
 8000572:	f7ff fead 	bl	80002d0 <LCD_endWrite>
	return 1;
 8000576:	2301      	movs	r3, #1
}
 8000578:	4618      	mov	r0, r3
 800057a:	3718      	adds	r7, #24
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}

08000580 <LCD_writePixel>:

	LCD_endWrite();
	return 1;
}

int LCD_writePixel(SPI_HandleTypeDef* spi, int16_t x, int16_t y, uint16_t color) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af02      	add	r7, sp, #8
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	4608      	mov	r0, r1
 800058a:	4611      	mov	r1, r2
 800058c:	461a      	mov	r2, r3
 800058e:	4603      	mov	r3, r0
 8000590:	817b      	strh	r3, [r7, #10]
 8000592:	460b      	mov	r3, r1
 8000594:	813b      	strh	r3, [r7, #8]
 8000596:	4613      	mov	r3, r2
 8000598:	80fb      	strh	r3, [r7, #6]
    if ((x < 0) ||(x >= HX8357_TFTWIDTH) || (y < 0) || (y >= HX8357_TFTHEIGHT)) return 0;
 800059a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	db0d      	blt.n	80005be <LCD_writePixel+0x3e>
 80005a2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80005a6:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80005aa:	da08      	bge.n	80005be <LCD_writePixel+0x3e>
 80005ac:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	db04      	blt.n	80005be <LCD_writePixel+0x3e>
 80005b4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80005b8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80005bc:	db01      	blt.n	80005c2 <LCD_writePixel+0x42>
 80005be:	2300      	movs	r3, #0
 80005c0:	e017      	b.n	80005f2 <LCD_writePixel+0x72>
    if(!LCD_setAddrWindow(spi, x, y, 1, 1)) return 0;
 80005c2:	8979      	ldrh	r1, [r7, #10]
 80005c4:	893a      	ldrh	r2, [r7, #8]
 80005c6:	2301      	movs	r3, #1
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2301      	movs	r3, #1
 80005cc:	68f8      	ldr	r0, [r7, #12]
 80005ce:	f7ff ff02 	bl	80003d6 <LCD_setAddrWindow>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d101      	bne.n	80005dc <LCD_writePixel+0x5c>
 80005d8:	2300      	movs	r3, #0
 80005da:	e00a      	b.n	80005f2 <LCD_writePixel+0x72>
    if (!LCD_pushColor(spi, color)) return 0;
 80005dc:	88fb      	ldrh	r3, [r7, #6]
 80005de:	4619      	mov	r1, r3
 80005e0:	68f8      	ldr	r0, [r7, #12]
 80005e2:	f7ff ff80 	bl	80004e6 <LCD_pushColor>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d101      	bne.n	80005f0 <LCD_writePixel+0x70>
 80005ec:	2300      	movs	r3, #0
 80005ee:	e000      	b.n	80005f2 <LCD_writePixel+0x72>
    return 1;
 80005f0:	2301      	movs	r3, #1
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	3710      	adds	r7, #16
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}

080005fa <LCD_writePixels>:

// Length of colors array must be w * h
int LCD_writePixels(SPI_HandleTypeDef* spi, uint16_t color,
					int16_t x, int16_t y, int16_t w, int16_t h)
{
 80005fa:	b580      	push	{r7, lr}
 80005fc:	b086      	sub	sp, #24
 80005fe:	af02      	add	r7, sp, #8
 8000600:	60f8      	str	r0, [r7, #12]
 8000602:	4608      	mov	r0, r1
 8000604:	4611      	mov	r1, r2
 8000606:	461a      	mov	r2, r3
 8000608:	4603      	mov	r3, r0
 800060a:	817b      	strh	r3, [r7, #10]
 800060c:	460b      	mov	r3, r1
 800060e:	813b      	strh	r3, [r7, #8]
 8000610:	4613      	mov	r3, r2
 8000612:	80fb      	strh	r3, [r7, #6]
	if ((x < 0) ||(x >= HX8357_TFTWIDTH) || (y < 0) || (y >= HX8357_TFTHEIGHT)) return 0;
 8000614:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000618:	2b00      	cmp	r3, #0
 800061a:	db0d      	blt.n	8000638 <LCD_writePixels+0x3e>
 800061c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000620:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000624:	da08      	bge.n	8000638 <LCD_writePixels+0x3e>
 8000626:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800062a:	2b00      	cmp	r3, #0
 800062c:	db04      	blt.n	8000638 <LCD_writePixels+0x3e>
 800062e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000632:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000636:	db01      	blt.n	800063c <LCD_writePixels+0x42>
 8000638:	2300      	movs	r3, #0
 800063a:	e01f      	b.n	800067c <LCD_writePixels+0x82>
	if(!LCD_setAddrWindow(spi, x, y, w, h)) return 0;
 800063c:	8939      	ldrh	r1, [r7, #8]
 800063e:	88fa      	ldrh	r2, [r7, #6]
 8000640:	8b38      	ldrh	r0, [r7, #24]
 8000642:	8bbb      	ldrh	r3, [r7, #28]
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	4603      	mov	r3, r0
 8000648:	68f8      	ldr	r0, [r7, #12]
 800064a:	f7ff fec4 	bl	80003d6 <LCD_setAddrWindow>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d101      	bne.n	8000658 <LCD_writePixels+0x5e>
 8000654:	2300      	movs	r3, #0
 8000656:	e011      	b.n	800067c <LCD_writePixels+0x82>
	if (!LCD_pushColorCopy(spi, color, w*h)) return 0;
 8000658:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800065c:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8000660:	fb02 f303 	mul.w	r3, r2, r3
 8000664:	461a      	mov	r2, r3
 8000666:	897b      	ldrh	r3, [r7, #10]
 8000668:	4619      	mov	r1, r3
 800066a:	68f8      	ldr	r0, [r7, #12]
 800066c:	f7ff ff58 	bl	8000520 <LCD_pushColorCopy>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d101      	bne.n	800067a <LCD_writePixels+0x80>
 8000676:	2300      	movs	r3, #0
 8000678:	e000      	b.n	800067c <LCD_writePixels+0x82>
	return 1;
 800067a:	2301      	movs	r3, #1
}
 800067c:	4618      	mov	r0, r3
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}

08000684 <LCD_drawChar>:
		0x70, 0x1C, 0x07, 0x1C, 0x70,
		0x0E, 0x38, 0xE0, 0x38, 0x0E
};

void LCD_drawChar(SPI_HandleTypeDef* spi, int16_t x, int16_t y, unsigned char c, uint16_t color, uint32_t size)
{
 8000684:	b590      	push	{r4, r7, lr}
 8000686:	b089      	sub	sp, #36	; 0x24
 8000688:	af02      	add	r7, sp, #8
 800068a:	60f8      	str	r0, [r7, #12]
 800068c:	4608      	mov	r0, r1
 800068e:	4611      	mov	r1, r2
 8000690:	461a      	mov	r2, r3
 8000692:	4603      	mov	r3, r0
 8000694:	817b      	strh	r3, [r7, #10]
 8000696:	460b      	mov	r3, r1
 8000698:	813b      	strh	r3, [r7, #8]
 800069a:	4613      	mov	r3, r2
 800069c:	71fb      	strb	r3, [r7, #7]
	if((x >= HX8357_TFTWIDTH)   || // Clip right
 800069e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80006a2:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80006a6:	f280 80b5 	bge.w	8000814 <LCD_drawChar+0x190>
	   (y >= HX8357_TFTHEIGHT)  || // Clip bottom
	   ((x + 6 * size - 1) < 0) || // Clip left
 80006aa:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80006ae:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80006b2:	f280 80af 	bge.w	8000814 <LCD_drawChar+0x190>
	   ((y + 8 * size - 1) < 0))   // Clip top
		return;

	uint16_t bg = LCD_color565(255, 255, 255);
 80006b6:	22ff      	movs	r2, #255	; 0xff
 80006b8:	21ff      	movs	r1, #255	; 0xff
 80006ba:	20ff      	movs	r0, #255	; 0xff
 80006bc:	f7ff feed 	bl	800049a <LCD_color565>
 80006c0:	4603      	mov	r3, r0
 80006c2:	827b      	strh	r3, [r7, #18]
	LCD_startWrite();
 80006c4:	f7ff fdf8 	bl	80002b8 <LCD_startWrite>
	for(int8_t i = 0; i < 5; i++) // Char bitmap = 5 columns
 80006c8:	2300      	movs	r3, #0
 80006ca:	75fb      	strb	r3, [r7, #23]
 80006cc:	e09a      	b.n	8000804 <LCD_drawChar+0x180>
	{
		uint8_t line = font[c * 5 + i];
 80006ce:	79fa      	ldrb	r2, [r7, #7]
 80006d0:	4613      	mov	r3, r2
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	441a      	add	r2, r3
 80006d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80006da:	4413      	add	r3, r2
 80006dc:	4a4f      	ldr	r2, [pc, #316]	; (800081c <LCD_drawChar+0x198>)
 80006de:	5cd3      	ldrb	r3, [r2, r3]
 80006e0:	75bb      	strb	r3, [r7, #22]
		for(int8_t j = 0; j < 8; j++, line >>= 1)
 80006e2:	2300      	movs	r3, #0
 80006e4:	757b      	strb	r3, [r7, #21]
 80006e6:	e082      	b.n	80007ee <LCD_drawChar+0x16a>
		{
			if (line & 1)
 80006e8:	7dbb      	ldrb	r3, [r7, #22]
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d03a      	beq.n	8000768 <LCD_drawChar+0xe4>
			{
				if (size == 1) LCD_writePixel(spi, x+i, y+j, color);
 80006f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d112      	bne.n	800071e <LCD_drawChar+0x9a>
 80006f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	897b      	ldrh	r3, [r7, #10]
 8000700:	4413      	add	r3, r2
 8000702:	b29b      	uxth	r3, r3
 8000704:	b219      	sxth	r1, r3
 8000706:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800070a:	b29a      	uxth	r2, r3
 800070c:	893b      	ldrh	r3, [r7, #8]
 800070e:	4413      	add	r3, r2
 8000710:	b29b      	uxth	r3, r3
 8000712:	b21a      	sxth	r2, r3
 8000714:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000716:	68f8      	ldr	r0, [r7, #12]
 8000718:	f7ff ff32 	bl	8000580 <LCD_writePixel>
 800071c:	e05e      	b.n	80007dc <LCD_drawChar+0x158>
				else LCD_writePixels(spi, color, x+i*size, y+j*size, size, size);
 800071e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000722:	b29a      	uxth	r2, r3
 8000724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000726:	b29b      	uxth	r3, r3
 8000728:	fb12 f303 	smulbb	r3, r2, r3
 800072c:	b29a      	uxth	r2, r3
 800072e:	897b      	ldrh	r3, [r7, #10]
 8000730:	4413      	add	r3, r2
 8000732:	b29b      	uxth	r3, r3
 8000734:	b218      	sxth	r0, r3
 8000736:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800073a:	b29a      	uxth	r2, r3
 800073c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800073e:	b29b      	uxth	r3, r3
 8000740:	fb12 f303 	smulbb	r3, r2, r3
 8000744:	b29a      	uxth	r2, r3
 8000746:	893b      	ldrh	r3, [r7, #8]
 8000748:	4413      	add	r3, r2
 800074a:	b29b      	uxth	r3, r3
 800074c:	b21c      	sxth	r4, r3
 800074e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000750:	b21b      	sxth	r3, r3
 8000752:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000754:	b212      	sxth	r2, r2
 8000756:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8000758:	9201      	str	r2, [sp, #4]
 800075a:	9300      	str	r3, [sp, #0]
 800075c:	4623      	mov	r3, r4
 800075e:	4602      	mov	r2, r0
 8000760:	68f8      	ldr	r0, [r7, #12]
 8000762:	f7ff ff4a 	bl	80005fa <LCD_writePixels>
 8000766:	e039      	b.n	80007dc <LCD_drawChar+0x158>
			}
			else
			{
				if (size == 1) LCD_writePixel(spi, x+i, y+j, bg);
 8000768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800076a:	2b01      	cmp	r3, #1
 800076c:	d112      	bne.n	8000794 <LCD_drawChar+0x110>
 800076e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000772:	b29a      	uxth	r2, r3
 8000774:	897b      	ldrh	r3, [r7, #10]
 8000776:	4413      	add	r3, r2
 8000778:	b29b      	uxth	r3, r3
 800077a:	b219      	sxth	r1, r3
 800077c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000780:	b29a      	uxth	r2, r3
 8000782:	893b      	ldrh	r3, [r7, #8]
 8000784:	4413      	add	r3, r2
 8000786:	b29b      	uxth	r3, r3
 8000788:	b21a      	sxth	r2, r3
 800078a:	8a7b      	ldrh	r3, [r7, #18]
 800078c:	68f8      	ldr	r0, [r7, #12]
 800078e:	f7ff fef7 	bl	8000580 <LCD_writePixel>
 8000792:	e023      	b.n	80007dc <LCD_drawChar+0x158>
				else LCD_writePixels(spi, bg, x+i*size, y+j*size, size, size);
 8000794:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000798:	b29a      	uxth	r2, r3
 800079a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800079c:	b29b      	uxth	r3, r3
 800079e:	fb12 f303 	smulbb	r3, r2, r3
 80007a2:	b29a      	uxth	r2, r3
 80007a4:	897b      	ldrh	r3, [r7, #10]
 80007a6:	4413      	add	r3, r2
 80007a8:	b29b      	uxth	r3, r3
 80007aa:	b218      	sxth	r0, r3
 80007ac:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80007b0:	b29a      	uxth	r2, r3
 80007b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007b4:	b29b      	uxth	r3, r3
 80007b6:	fb12 f303 	smulbb	r3, r2, r3
 80007ba:	b29a      	uxth	r2, r3
 80007bc:	893b      	ldrh	r3, [r7, #8]
 80007be:	4413      	add	r3, r2
 80007c0:	b29b      	uxth	r3, r3
 80007c2:	b21c      	sxth	r4, r3
 80007c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007c6:	b21b      	sxth	r3, r3
 80007c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007ca:	b212      	sxth	r2, r2
 80007cc:	8a79      	ldrh	r1, [r7, #18]
 80007ce:	9201      	str	r2, [sp, #4]
 80007d0:	9300      	str	r3, [sp, #0]
 80007d2:	4623      	mov	r3, r4
 80007d4:	4602      	mov	r2, r0
 80007d6:	68f8      	ldr	r0, [r7, #12]
 80007d8:	f7ff ff0f 	bl	80005fa <LCD_writePixels>
		for(int8_t j = 0; j < 8; j++, line >>= 1)
 80007dc:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	3301      	adds	r3, #1
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	757b      	strb	r3, [r7, #21]
 80007e8:	7dbb      	ldrb	r3, [r7, #22]
 80007ea:	085b      	lsrs	r3, r3, #1
 80007ec:	75bb      	strb	r3, [r7, #22]
 80007ee:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80007f2:	2b07      	cmp	r3, #7
 80007f4:	f77f af78 	ble.w	80006e8 <LCD_drawChar+0x64>
	for(int8_t i = 0; i < 5; i++) // Char bitmap = 5 columns
 80007f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	3301      	adds	r3, #1
 8000800:	b2db      	uxtb	r3, r3
 8000802:	75fb      	strb	r3, [r7, #23]
 8000804:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000808:	2b04      	cmp	r3, #4
 800080a:	f77f af60 	ble.w	80006ce <LCD_drawChar+0x4a>
			}
		}
	}
	LCD_endWrite();
 800080e:	f7ff fd5f 	bl	80002d0 <LCD_endWrite>
 8000812:	e000      	b.n	8000816 <LCD_drawChar+0x192>
		return;
 8000814:	bf00      	nop
}
 8000816:	371c      	adds	r7, #28
 8000818:	46bd      	mov	sp, r7
 800081a:	bd90      	pop	{r4, r7, pc}
 800081c:	08003300 	.word	0x08003300

08000820 <LCD_drawCharNoBG>:
	}
	LCD_endWrite();
}

void LCD_drawCharNoBG(SPI_HandleTypeDef* spi, int16_t x, int16_t y, unsigned char c, uint16_t color, uint32_t size)
{
 8000820:	b590      	push	{r4, r7, lr}
 8000822:	b089      	sub	sp, #36	; 0x24
 8000824:	af02      	add	r7, sp, #8
 8000826:	60f8      	str	r0, [r7, #12]
 8000828:	4608      	mov	r0, r1
 800082a:	4611      	mov	r1, r2
 800082c:	461a      	mov	r2, r3
 800082e:	4603      	mov	r3, r0
 8000830:	817b      	strh	r3, [r7, #10]
 8000832:	460b      	mov	r3, r1
 8000834:	813b      	strh	r3, [r7, #8]
 8000836:	4613      	mov	r3, r2
 8000838:	71fb      	strb	r3, [r7, #7]
	if((x >= HX8357_TFTWIDTH)   || // Clip right
 800083a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800083e:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000842:	da6f      	bge.n	8000924 <LCD_drawCharNoBG+0x104>
	   (y >= HX8357_TFTHEIGHT)  || // Clip bottom
	   ((x + 6 * size - 1) < 0) || // Clip left
 8000844:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000848:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800084c:	da6a      	bge.n	8000924 <LCD_drawCharNoBG+0x104>
	   ((y + 8 * size - 1) < 0))   // Clip top
		return;

	LCD_startWrite();
 800084e:	f7ff fd33 	bl	80002b8 <LCD_startWrite>
	for(int8_t i = 0; i < 5; i++) // Char bitmap = 5 columns
 8000852:	2300      	movs	r3, #0
 8000854:	75fb      	strb	r3, [r7, #23]
 8000856:	e05e      	b.n	8000916 <LCD_drawCharNoBG+0xf6>
	{
		uint8_t line = font[c * 5 + i];
 8000858:	79fa      	ldrb	r2, [r7, #7]
 800085a:	4613      	mov	r3, r2
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	441a      	add	r2, r3
 8000860:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000864:	4413      	add	r3, r2
 8000866:	4a31      	ldr	r2, [pc, #196]	; (800092c <LCD_drawCharNoBG+0x10c>)
 8000868:	5cd3      	ldrb	r3, [r2, r3]
 800086a:	75bb      	strb	r3, [r7, #22]
		for(int8_t j = 0; j < 8; j++, line >>= 1)
 800086c:	2300      	movs	r3, #0
 800086e:	757b      	strb	r3, [r7, #21]
 8000870:	e047      	b.n	8000902 <LCD_drawCharNoBG+0xe2>
		{
			if (line & 1)
 8000872:	7dbb      	ldrb	r3, [r7, #22]
 8000874:	f003 0301 	and.w	r3, r3, #1
 8000878:	2b00      	cmp	r3, #0
 800087a:	d039      	beq.n	80008f0 <LCD_drawCharNoBG+0xd0>
			{
				if (size == 1) LCD_writePixel(spi, x+i, y+j, color);
 800087c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800087e:	2b01      	cmp	r3, #1
 8000880:	d112      	bne.n	80008a8 <LCD_drawCharNoBG+0x88>
 8000882:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000886:	b29a      	uxth	r2, r3
 8000888:	897b      	ldrh	r3, [r7, #10]
 800088a:	4413      	add	r3, r2
 800088c:	b29b      	uxth	r3, r3
 800088e:	b219      	sxth	r1, r3
 8000890:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000894:	b29a      	uxth	r2, r3
 8000896:	893b      	ldrh	r3, [r7, #8]
 8000898:	4413      	add	r3, r2
 800089a:	b29b      	uxth	r3, r3
 800089c:	b21a      	sxth	r2, r3
 800089e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80008a0:	68f8      	ldr	r0, [r7, #12]
 80008a2:	f7ff fe6d 	bl	8000580 <LCD_writePixel>
 80008a6:	e023      	b.n	80008f0 <LCD_drawCharNoBG+0xd0>
				else LCD_writePixels(spi, color, x+i*size, y+j*size, size, size);
 80008a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80008ac:	b29a      	uxth	r2, r3
 80008ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	fb12 f303 	smulbb	r3, r2, r3
 80008b6:	b29a      	uxth	r2, r3
 80008b8:	897b      	ldrh	r3, [r7, #10]
 80008ba:	4413      	add	r3, r2
 80008bc:	b29b      	uxth	r3, r3
 80008be:	b218      	sxth	r0, r3
 80008c0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80008c4:	b29a      	uxth	r2, r3
 80008c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	fb12 f303 	smulbb	r3, r2, r3
 80008ce:	b29a      	uxth	r2, r3
 80008d0:	893b      	ldrh	r3, [r7, #8]
 80008d2:	4413      	add	r3, r2
 80008d4:	b29b      	uxth	r3, r3
 80008d6:	b21c      	sxth	r4, r3
 80008d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008da:	b21b      	sxth	r3, r3
 80008dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008de:	b212      	sxth	r2, r2
 80008e0:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80008e2:	9201      	str	r2, [sp, #4]
 80008e4:	9300      	str	r3, [sp, #0]
 80008e6:	4623      	mov	r3, r4
 80008e8:	4602      	mov	r2, r0
 80008ea:	68f8      	ldr	r0, [r7, #12]
 80008ec:	f7ff fe85 	bl	80005fa <LCD_writePixels>
		for(int8_t j = 0; j < 8; j++, line >>= 1)
 80008f0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	3301      	adds	r3, #1
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	757b      	strb	r3, [r7, #21]
 80008fc:	7dbb      	ldrb	r3, [r7, #22]
 80008fe:	085b      	lsrs	r3, r3, #1
 8000900:	75bb      	strb	r3, [r7, #22]
 8000902:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000906:	2b07      	cmp	r3, #7
 8000908:	ddb3      	ble.n	8000872 <LCD_drawCharNoBG+0x52>
	for(int8_t i = 0; i < 5; i++) // Char bitmap = 5 columns
 800090a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800090e:	b2db      	uxtb	r3, r3
 8000910:	3301      	adds	r3, #1
 8000912:	b2db      	uxtb	r3, r3
 8000914:	75fb      	strb	r3, [r7, #23]
 8000916:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800091a:	2b04      	cmp	r3, #4
 800091c:	dd9c      	ble.n	8000858 <LCD_drawCharNoBG+0x38>
			}
		}
	}
	LCD_endWrite();
 800091e:	f7ff fcd7 	bl	80002d0 <LCD_endWrite>
 8000922:	e000      	b.n	8000926 <LCD_drawCharNoBG+0x106>
		return;
 8000924:	bf00      	nop
}
 8000926:	371c      	adds	r7, #28
 8000928:	46bd      	mov	sp, r7
 800092a:	bd90      	pop	{r4, r7, pc}
 800092c:	08003300 	.word	0x08003300

08000930 <LCD_drawString>:

void LCD_drawString(SPI_HandleTypeDef* spi, int16_t x, int16_t y, unsigned char* c, uint32_t length, uint16_t color, uint32_t size)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b088      	sub	sp, #32
 8000934:	af02      	add	r7, sp, #8
 8000936:	60f8      	str	r0, [r7, #12]
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	460b      	mov	r3, r1
 800093c:	817b      	strh	r3, [r7, #10]
 800093e:	4613      	mov	r3, r2
 8000940:	813b      	strh	r3, [r7, #8]
	for (int i = 0; i < length; ++i) LCD_drawChar(spi, x + i*6*size, y, c[i], color, size);
 8000942:	2300      	movs	r3, #0
 8000944:	617b      	str	r3, [r7, #20]
 8000946:	e020      	b.n	800098a <LCD_drawString+0x5a>
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	b29a      	uxth	r2, r3
 800094c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800094e:	b29b      	uxth	r3, r3
 8000950:	fb12 f303 	smulbb	r3, r2, r3
 8000954:	b29b      	uxth	r3, r3
 8000956:	461a      	mov	r2, r3
 8000958:	0052      	lsls	r2, r2, #1
 800095a:	4413      	add	r3, r2
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	b29a      	uxth	r2, r3
 8000960:	897b      	ldrh	r3, [r7, #10]
 8000962:	4413      	add	r3, r2
 8000964:	b29b      	uxth	r3, r3
 8000966:	b219      	sxth	r1, r3
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	687a      	ldr	r2, [r7, #4]
 800096c:	4413      	add	r3, r2
 800096e:	7818      	ldrb	r0, [r3, #0]
 8000970:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000976:	9301      	str	r3, [sp, #4]
 8000978:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800097a:	9300      	str	r3, [sp, #0]
 800097c:	4603      	mov	r3, r0
 800097e:	68f8      	ldr	r0, [r7, #12]
 8000980:	f7ff fe80 	bl	8000684 <LCD_drawChar>
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	3301      	adds	r3, #1
 8000988:	617b      	str	r3, [r7, #20]
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	6a3a      	ldr	r2, [r7, #32]
 800098e:	429a      	cmp	r2, r3
 8000990:	d8da      	bhi.n	8000948 <LCD_drawString+0x18>
}
 8000992:	bf00      	nop
 8000994:	bf00      	nop
 8000996:	3718      	adds	r7, #24
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}

0800099c <LCD_drawStringNoBG>:
{
	for (int i = 0; i < length; ++i) LCD_drawCharOPT(spi, x + i*6*size, y, c1[i], c2[i], color, size);
}

void LCD_drawStringNoBG(SPI_HandleTypeDef* spi, int16_t x, int16_t y, unsigned char* c, uint32_t length, uint16_t color, uint32_t size)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b088      	sub	sp, #32
 80009a0:	af02      	add	r7, sp, #8
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	460b      	mov	r3, r1
 80009a8:	817b      	strh	r3, [r7, #10]
 80009aa:	4613      	mov	r3, r2
 80009ac:	813b      	strh	r3, [r7, #8]
	for (int i = 0; i < length; ++i) LCD_drawCharNoBG(spi, x + i*6*size, y, c[i], color, size);
 80009ae:	2300      	movs	r3, #0
 80009b0:	617b      	str	r3, [r7, #20]
 80009b2:	e020      	b.n	80009f6 <LCD_drawStringNoBG+0x5a>
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	b29a      	uxth	r2, r3
 80009b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	fb12 f303 	smulbb	r3, r2, r3
 80009c0:	b29b      	uxth	r3, r3
 80009c2:	461a      	mov	r2, r3
 80009c4:	0052      	lsls	r2, r2, #1
 80009c6:	4413      	add	r3, r2
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	b29a      	uxth	r2, r3
 80009cc:	897b      	ldrh	r3, [r7, #10]
 80009ce:	4413      	add	r3, r2
 80009d0:	b29b      	uxth	r3, r3
 80009d2:	b219      	sxth	r1, r3
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	687a      	ldr	r2, [r7, #4]
 80009d8:	4413      	add	r3, r2
 80009da:	7818      	ldrb	r0, [r3, #0]
 80009dc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80009e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009e2:	9301      	str	r3, [sp, #4]
 80009e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80009e6:	9300      	str	r3, [sp, #0]
 80009e8:	4603      	mov	r3, r0
 80009ea:	68f8      	ldr	r0, [r7, #12]
 80009ec:	f7ff ff18 	bl	8000820 <LCD_drawCharNoBG>
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	3301      	adds	r3, #1
 80009f4:	617b      	str	r3, [r7, #20]
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	6a3a      	ldr	r2, [r7, #32]
 80009fa:	429a      	cmp	r2, r3
 80009fc:	d8da      	bhi.n	80009b4 <LCD_drawStringNoBG+0x18>
}
 80009fe:	bf00      	nop
 8000a00:	bf00      	nop
 8000a02:	3718      	adds	r7, #24
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a0e:	f000 fbf6 	bl	80011fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a12:	f000 f845 	bl	8000aa0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a16:	f000 f8c7 	bl	8000ba8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000a1a:	f000 f887 	bl	8000b2c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  LCD_begin(&hspi1);
 8000a1e:	481d      	ldr	r0, [pc, #116]	; (8000a94 <main+0x8c>)
 8000a20:	f7ff fc62 	bl	80002e8 <LCD_begin>
  LCD_writePixels(&hspi1,HX8357_WHITE,0,0,480,320);
 8000a24:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000a28:	9301      	str	r3, [sp, #4]
 8000a2a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000a2e:	9300      	str	r3, [sp, #0]
 8000a30:	2300      	movs	r3, #0
 8000a32:	2200      	movs	r2, #0
 8000a34:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000a38:	4816      	ldr	r0, [pc, #88]	; (8000a94 <main+0x8c>)
 8000a3a:	f7ff fdde 	bl	80005fa <LCD_writePixels>
  LCD_writePixels(&hspi1,HX8357_BLUE,0,0,50,50);
 8000a3e:	2332      	movs	r3, #50	; 0x32
 8000a40:	9301      	str	r3, [sp, #4]
 8000a42:	2332      	movs	r3, #50	; 0x32
 8000a44:	9300      	str	r3, [sp, #0]
 8000a46:	2300      	movs	r3, #0
 8000a48:	2200      	movs	r2, #0
 8000a4a:	211f      	movs	r1, #31
 8000a4c:	4811      	ldr	r0, [pc, #68]	; (8000a94 <main+0x8c>)
 8000a4e:	f7ff fdd4 	bl	80005fa <LCD_writePixels>


  char * word = "TADAMHESPEV";
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <main+0x90>)
 8000a54:	607b      	str	r3, [r7, #4]
  char * word2 = "Accel: 20 MPH^2";
 8000a56:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <main+0x94>)
 8000a58:	603b      	str	r3, [r7, #0]
  LCD_drawString(&hspi1,0,100,word,11,HX8357_BLACK,4);
 8000a5a:	2304      	movs	r3, #4
 8000a5c:	9302      	str	r3, [sp, #8]
 8000a5e:	2300      	movs	r3, #0
 8000a60:	9301      	str	r3, [sp, #4]
 8000a62:	230b      	movs	r3, #11
 8000a64:	9300      	str	r3, [sp, #0]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	2264      	movs	r2, #100	; 0x64
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4809      	ldr	r0, [pc, #36]	; (8000a94 <main+0x8c>)
 8000a6e:	f7ff ff5f 	bl	8000930 <LCD_drawString>
  LCD_drawStringNoBG(&hspi1,100,200,word2,15,HX8357_BLACK,4);
 8000a72:	2304      	movs	r3, #4
 8000a74:	9302      	str	r3, [sp, #8]
 8000a76:	2300      	movs	r3, #0
 8000a78:	9301      	str	r3, [sp, #4]
 8000a7a:	230f      	movs	r3, #15
 8000a7c:	9300      	str	r3, [sp, #0]
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	22c8      	movs	r2, #200	; 0xc8
 8000a82:	2164      	movs	r1, #100	; 0x64
 8000a84:	4803      	ldr	r0, [pc, #12]	; (8000a94 <main+0x8c>)
 8000a86:	f7ff ff89 	bl	800099c <LCD_drawStringNoBG>

  invertDisplay(&hspi1,1);
 8000a8a:	2101      	movs	r1, #1
 8000a8c:	4801      	ldr	r0, [pc, #4]	; (8000a94 <main+0x8c>)
 8000a8e:	f7ff fc83 	bl	8000398 <invertDisplay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <main+0x8a>
 8000a94:	20000090 	.word	0x20000090
 8000a98:	080032e4 	.word	0x080032e4
 8000a9c:	080032f0 	.word	0x080032f0

08000aa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b096      	sub	sp, #88	; 0x58
 8000aa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	2244      	movs	r2, #68	; 0x44
 8000aac:	2100      	movs	r1, #0
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f002 fbe0 	bl	8003274 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab4:	463b      	mov	r3, r7
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
 8000abe:	60da      	str	r2, [r3, #12]
 8000ac0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ac2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ac6:	f000 fee3 	bl	8001890 <HAL_PWREx_ControlVoltageScaling>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ad0:	f000 fac4 	bl	800105c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000ad4:	2310      	movs	r3, #16
 8000ad6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ae0:	2360      	movs	r3, #96	; 0x60
 8000ae2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	4618      	mov	r0, r3
 8000aee:	f000 ff83 	bl	80019f8 <HAL_RCC_OscConfig>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000af8:	f000 fab0 	bl	800105c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000afc:	230f      	movs	r3, #15
 8000afe:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000b00:	2300      	movs	r3, #0
 8000b02:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b04:	2300      	movs	r3, #0
 8000b06:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b10:	463b      	mov	r3, r7
 8000b12:	2100      	movs	r1, #0
 8000b14:	4618      	mov	r0, r3
 8000b16:	f001 fb89 	bl	800222c <HAL_RCC_ClockConfig>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000b20:	f000 fa9c 	bl	800105c <Error_Handler>
  }
}
 8000b24:	bf00      	nop
 8000b26:	3758      	adds	r7, #88	; 0x58
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b30:	4b1b      	ldr	r3, [pc, #108]	; (8000ba0 <MX_SPI1_Init+0x74>)
 8000b32:	4a1c      	ldr	r2, [pc, #112]	; (8000ba4 <MX_SPI1_Init+0x78>)
 8000b34:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b36:	4b1a      	ldr	r3, [pc, #104]	; (8000ba0 <MX_SPI1_Init+0x74>)
 8000b38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b3c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b3e:	4b18      	ldr	r3, [pc, #96]	; (8000ba0 <MX_SPI1_Init+0x74>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b44:	4b16      	ldr	r3, [pc, #88]	; (8000ba0 <MX_SPI1_Init+0x74>)
 8000b46:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000b4a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b4c:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <MX_SPI1_Init+0x74>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b52:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <MX_SPI1_Init+0x74>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b58:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <MX_SPI1_Init+0x74>)
 8000b5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b5e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <MX_SPI1_Init+0x74>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <MX_SPI1_Init+0x74>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <MX_SPI1_Init+0x74>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b72:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <MX_SPI1_Init+0x74>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b78:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <MX_SPI1_Init+0x74>)
 8000b7a:	2207      	movs	r2, #7
 8000b7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b7e:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <MX_SPI1_Init+0x74>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <MX_SPI1_Init+0x74>)
 8000b86:	2208      	movs	r2, #8
 8000b88:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b8a:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <MX_SPI1_Init+0x74>)
 8000b8c:	f001 fdd4 	bl	8002738 <HAL_SPI_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000b96:	f000 fa61 	bl	800105c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000090 	.word	0x20000090
 8000ba4:	40013000 	.word	0x40013000

08000ba8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08e      	sub	sp, #56	; 0x38
 8000bac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
 8000bbc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bbe:	4bb2      	ldr	r3, [pc, #712]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc2:	4ab1      	ldr	r2, [pc, #708]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000bc4:	f043 0310 	orr.w	r3, r3, #16
 8000bc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bca:	4baf      	ldr	r3, [pc, #700]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bce:	f003 0310 	and.w	r3, r3, #16
 8000bd2:	623b      	str	r3, [r7, #32]
 8000bd4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd6:	4bac      	ldr	r3, [pc, #688]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bda:	4aab      	ldr	r2, [pc, #684]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000bdc:	f043 0304 	orr.w	r3, r3, #4
 8000be0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000be2:	4ba9      	ldr	r3, [pc, #676]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be6:	f003 0304 	and.w	r3, r3, #4
 8000bea:	61fb      	str	r3, [r7, #28]
 8000bec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bee:	4ba6      	ldr	r3, [pc, #664]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf2:	4aa5      	ldr	r2, [pc, #660]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000bf4:	f043 0320 	orr.w	r3, r3, #32
 8000bf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bfa:	4ba3      	ldr	r3, [pc, #652]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfe:	f003 0320 	and.w	r3, r3, #32
 8000c02:	61bb      	str	r3, [r7, #24]
 8000c04:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c06:	4ba0      	ldr	r3, [pc, #640]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0a:	4a9f      	ldr	r2, [pc, #636]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c12:	4b9d      	ldr	r3, [pc, #628]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c1a:	617b      	str	r3, [r7, #20]
 8000c1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1e:	4b9a      	ldr	r3, [pc, #616]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c22:	4a99      	ldr	r2, [pc, #612]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c2a:	4b97      	ldr	r3, [pc, #604]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	613b      	str	r3, [r7, #16]
 8000c34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c36:	4b94      	ldr	r3, [pc, #592]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3a:	4a93      	ldr	r2, [pc, #588]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000c3c:	f043 0302 	orr.w	r3, r3, #2
 8000c40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c42:	4b91      	ldr	r3, [pc, #580]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c46:	f003 0302 	and.w	r3, r3, #2
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c4e:	4b8e      	ldr	r3, [pc, #568]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c52:	4a8d      	ldr	r2, [pc, #564]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000c54:	f043 0308 	orr.w	r3, r3, #8
 8000c58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c5a:	4b8b      	ldr	r3, [pc, #556]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5e:	f003 0308 	and.w	r3, r3, #8
 8000c62:	60bb      	str	r3, [r7, #8]
 8000c64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c66:	4b88      	ldr	r3, [pc, #544]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6a:	4a87      	ldr	r2, [pc, #540]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000c6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c72:	4b85      	ldr	r3, [pc, #532]	; (8000e88 <MX_GPIO_Init+0x2e0>)
 8000c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000c7e:	f000 feab 	bl	80019d8 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000c88:	4880      	ldr	r0, [pc, #512]	; (8000e8c <MX_GPIO_Init+0x2e4>)
 8000c8a:	f000 fdc9 	bl	8001820 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c8e:	230c      	movs	r3, #12
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c92:	2302      	movs	r3, #2
 8000c94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000c9e:	230d      	movs	r3, #13
 8000ca0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ca2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4879      	ldr	r0, [pc, #484]	; (8000e90 <MX_GPIO_Init+0x2e8>)
 8000caa:	f000 fc27 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000cae:	2307      	movs	r3, #7
 8000cb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cb2:	2312      	movs	r3, #18
 8000cb4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000cbe:	2304      	movs	r3, #4
 8000cc0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4870      	ldr	r0, [pc, #448]	; (8000e8c <MX_GPIO_Init+0x2e4>)
 8000cca:	f000 fc17 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000cce:	2380      	movs	r3, #128	; 0x80
 8000cd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000cde:	230d      	movs	r3, #13
 8000ce0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ce2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4868      	ldr	r0, [pc, #416]	; (8000e8c <MX_GPIO_Init+0x2e4>)
 8000cea:	f000 fc07 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000cee:	233f      	movs	r3, #63	; 0x3f
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000cf2:	230b      	movs	r3, #11
 8000cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4864      	ldr	r0, [pc, #400]	; (8000e94 <MX_GPIO_Init+0x2ec>)
 8000d02:	f000 fbfb 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d06:	2301      	movs	r3, #1
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d12:	2300      	movs	r3, #0
 8000d14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d16:	2301      	movs	r3, #1
 8000d18:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1e:	4619      	mov	r1, r3
 8000d20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d24:	f000 fbea 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8000d28:	230a      	movs	r3, #10
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d2c:	230b      	movs	r3, #11
 8000d2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d3e:	f000 fbdd 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d42:	2301      	movs	r3, #1
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d46:	2302      	movs	r3, #2
 8000d48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d52:	2302      	movs	r3, #2
 8000d54:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	484e      	ldr	r0, [pc, #312]	; (8000e98 <MX_GPIO_Init+0x2f0>)
 8000d5e:	f000 fbcd 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d62:	2302      	movs	r3, #2
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d66:	230b      	movs	r3, #11
 8000d68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d72:	4619      	mov	r1, r3
 8000d74:	4848      	ldr	r0, [pc, #288]	; (8000e98 <MX_GPIO_Init+0x2f0>)
 8000d76:	f000 fbc1 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000d7a:	2344      	movs	r3, #68	; 0x44
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4842      	ldr	r0, [pc, #264]	; (8000e98 <MX_GPIO_Init+0x2f0>)
 8000d8e:	f000 fbb5 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF12 PF13 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000d92:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da0:	2300      	movs	r3, #0
 8000da2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000da4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da8:	4619      	mov	r1, r3
 8000daa:	4838      	ldr	r0, [pc, #224]	; (8000e8c <MX_GPIO_Init+0x2e4>)
 8000dac:	f000 fba6 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000db0:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 8000db4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db6:	2302      	movs	r3, #2
 8000db8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4830      	ldr	r0, [pc, #192]	; (8000e90 <MX_GPIO_Init+0x2e8>)
 8000dce:	f000 fb95 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000dd2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de0:	2300      	movs	r3, #0
 8000de2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8000de4:	2303      	movs	r3, #3
 8000de6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000de8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dec:	4619      	mov	r1, r3
 8000dee:	4828      	ldr	r0, [pc, #160]	; (8000e90 <MX_GPIO_Init+0x2e8>)
 8000df0:	f000 fb84 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000df4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	2300      	movs	r3, #0
 8000e04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e06:	2301      	movs	r3, #1
 8000e08:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4821      	ldr	r0, [pc, #132]	; (8000e98 <MX_GPIO_Init+0x2f0>)
 8000e12:	f000 fb73 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000e16:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000e1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e24:	2300      	movs	r3, #0
 8000e26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000e28:	230d      	movs	r3, #13
 8000e2a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e30:	4619      	mov	r1, r3
 8000e32:	4819      	ldr	r0, [pc, #100]	; (8000e98 <MX_GPIO_Init+0x2f0>)
 8000e34:	f000 fb62 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000e38:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e46:	2300      	movs	r3, #0
 8000e48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8000e4a:	230e      	movs	r3, #14
 8000e4c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e52:	4619      	mov	r1, r3
 8000e54:	4810      	ldr	r0, [pc, #64]	; (8000e98 <MX_GPIO_Init+0x2f0>)
 8000e56:	f000 fb51 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e60:	2302      	movs	r3, #2
 8000e62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e6c:	2307      	movs	r3, #7
 8000e6e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e74:	4619      	mov	r1, r3
 8000e76:	4809      	ldr	r0, [pc, #36]	; (8000e9c <MX_GPIO_Init+0x2f4>)
 8000e78:	f000 fb40 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000e7c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e82:	2302      	movs	r3, #2
 8000e84:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e86:	e00b      	b.n	8000ea0 <MX_GPIO_Init+0x2f8>
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	48001400 	.word	0x48001400
 8000e90:	48001000 	.word	0x48001000
 8000e94:	48000800 	.word	0x48000800
 8000e98:	48000400 	.word	0x48000400
 8000e9c:	48000c00 	.word	0x48000c00
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4865      	ldr	r0, [pc, #404]	; (8001048 <MX_GPIO_Init+0x4a0>)
 8000eb4:	f000 fb22 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000eb8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000eca:	2308      	movs	r3, #8
 8000ecc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ece:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	485d      	ldr	r0, [pc, #372]	; (800104c <MX_GPIO_Init+0x4a4>)
 8000ed6:	f000 fb11 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000eda:	2340      	movs	r3, #64	; 0x40
 8000edc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000eea:	230d      	movs	r3, #13
 8000eec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4856      	ldr	r0, [pc, #344]	; (8001050 <MX_GPIO_Init+0x4a8>)
 8000ef6:	f000 fb01 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000efa:	2380      	movs	r3, #128	; 0x80
 8000efc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efe:	2302      	movs	r3, #2
 8000f00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f06:	2300      	movs	r3, #0
 8000f08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f12:	4619      	mov	r1, r3
 8000f14:	484e      	ldr	r0, [pc, #312]	; (8001050 <MX_GPIO_Init+0x4a8>)
 8000f16:	f000 faf1 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000f1a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000f1e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	2302      	movs	r3, #2
 8000f22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000f2c:	230c      	movs	r3, #12
 8000f2e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f34:	4619      	mov	r1, r3
 8000f36:	4846      	ldr	r0, [pc, #280]	; (8001050 <MX_GPIO_Init+0x4a8>)
 8000f38:	f000 fae0 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8000f3c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f4e:	230a      	movs	r3, #10
 8000f50:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f56:	4619      	mov	r1, r3
 8000f58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f5c:	f000 face 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f66:	2300      	movs	r3, #0
 8000f68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f72:	4619      	mov	r1, r3
 8000f74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f78:	f000 fac0 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f80:	2302      	movs	r3, #2
 8000f82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000f8c:	2309      	movs	r3, #9
 8000f8e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f94:	4619      	mov	r1, r3
 8000f96:	482c      	ldr	r0, [pc, #176]	; (8001048 <MX_GPIO_Init+0x4a0>)
 8000f98:	f000 fab0 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f9c:	2304      	movs	r3, #4
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000fac:	230c      	movs	r3, #12
 8000fae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4824      	ldr	r0, [pc, #144]	; (8001048 <MX_GPIO_Init+0x4a0>)
 8000fb8:	f000 faa0 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000fbc:	2378      	movs	r3, #120	; 0x78
 8000fbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fcc:	2307      	movs	r3, #7
 8000fce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	481c      	ldr	r0, [pc, #112]	; (8001048 <MX_GPIO_Init+0x4a0>)
 8000fd8:	f000 fa90 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000fdc:	2338      	movs	r3, #56	; 0x38
 8000fde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fec:	2306      	movs	r3, #6
 8000fee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4817      	ldr	r0, [pc, #92]	; (8001054 <MX_GPIO_Init+0x4ac>)
 8000ff8:	f000 fa80 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ffc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001002:	2312      	movs	r3, #18
 8001004:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100a:	2303      	movs	r3, #3
 800100c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800100e:	2304      	movs	r3, #4
 8001010:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001012:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001016:	4619      	mov	r1, r3
 8001018:	480e      	ldr	r0, [pc, #56]	; (8001054 <MX_GPIO_Init+0x4ac>)
 800101a:	f000 fa6f 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800101e:	2301      	movs	r3, #1
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001022:	2302      	movs	r3, #2
 8001024:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102a:	2300      	movs	r3, #0
 800102c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800102e:	2302      	movs	r3, #2
 8001030:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001032:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001036:	4619      	mov	r1, r3
 8001038:	4807      	ldr	r0, [pc, #28]	; (8001058 <MX_GPIO_Init+0x4b0>)
 800103a:	f000 fa5f 	bl	80014fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800103e:	bf00      	nop
 8001040:	3738      	adds	r7, #56	; 0x38
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	48000c00 	.word	0x48000c00
 800104c:	48001800 	.word	0x48001800
 8001050:	48000800 	.word	0x48000800
 8001054:	48000400 	.word	0x48000400
 8001058:	48001000 	.word	0x48001000

0800105c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001060:	b672      	cpsid	i
}
 8001062:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001064:	e7fe      	b.n	8001064 <Error_Handler+0x8>
	...

08001068 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106e:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <HAL_MspInit+0x44>)
 8001070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001072:	4a0e      	ldr	r2, [pc, #56]	; (80010ac <HAL_MspInit+0x44>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	6613      	str	r3, [r2, #96]	; 0x60
 800107a:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <HAL_MspInit+0x44>)
 800107c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001086:	4b09      	ldr	r3, [pc, #36]	; (80010ac <HAL_MspInit+0x44>)
 8001088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800108a:	4a08      	ldr	r2, [pc, #32]	; (80010ac <HAL_MspInit+0x44>)
 800108c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001090:	6593      	str	r3, [r2, #88]	; 0x58
 8001092:	4b06      	ldr	r3, [pc, #24]	; (80010ac <HAL_MspInit+0x44>)
 8001094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800109a:	603b      	str	r3, [r7, #0]
 800109c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	40021000 	.word	0x40021000

080010b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	; 0x28
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a17      	ldr	r2, [pc, #92]	; (800112c <HAL_SPI_MspInit+0x7c>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d128      	bne.n	8001124 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010d2:	4b17      	ldr	r3, [pc, #92]	; (8001130 <HAL_SPI_MspInit+0x80>)
 80010d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010d6:	4a16      	ldr	r2, [pc, #88]	; (8001130 <HAL_SPI_MspInit+0x80>)
 80010d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010dc:	6613      	str	r3, [r2, #96]	; 0x60
 80010de:	4b14      	ldr	r3, [pc, #80]	; (8001130 <HAL_SPI_MspInit+0x80>)
 80010e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010e6:	613b      	str	r3, [r7, #16]
 80010e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ea:	4b11      	ldr	r3, [pc, #68]	; (8001130 <HAL_SPI_MspInit+0x80>)
 80010ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ee:	4a10      	ldr	r2, [pc, #64]	; (8001130 <HAL_SPI_MspInit+0x80>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <HAL_SPI_MspInit+0x80>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001102:	23f0      	movs	r3, #240	; 0xf0
 8001104:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001106:	2302      	movs	r3, #2
 8001108:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110e:	2303      	movs	r3, #3
 8001110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001112:	2305      	movs	r3, #5
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001120:	f000 f9ec 	bl	80014fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001124:	bf00      	nop
 8001126:	3728      	adds	r7, #40	; 0x28
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40013000 	.word	0x40013000
 8001130:	40021000 	.word	0x40021000

08001134 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001138:	e7fe      	b.n	8001138 <NMI_Handler+0x4>

0800113a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800113e:	e7fe      	b.n	800113e <HardFault_Handler+0x4>

08001140 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001144:	e7fe      	b.n	8001144 <MemManage_Handler+0x4>

08001146 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800114a:	e7fe      	b.n	800114a <BusFault_Handler+0x4>

0800114c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001150:	e7fe      	b.n	8001150 <UsageFault_Handler+0x4>

08001152 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001180:	f000 f892 	bl	80012a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}

08001188 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800118c:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <SystemInit+0x20>)
 800118e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001192:	4a05      	ldr	r2, [pc, #20]	; (80011a8 <SystemInit+0x20>)
 8001194:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001198:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011b0:	f7ff ffea 	bl	8001188 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011b4:	480c      	ldr	r0, [pc, #48]	; (80011e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80011b6:	490d      	ldr	r1, [pc, #52]	; (80011ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80011b8:	4a0d      	ldr	r2, [pc, #52]	; (80011f0 <LoopForever+0xe>)
  movs r3, #0
 80011ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011bc:	e002      	b.n	80011c4 <LoopCopyDataInit>

080011be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011c2:	3304      	adds	r3, #4

080011c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c8:	d3f9      	bcc.n	80011be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ca:	4a0a      	ldr	r2, [pc, #40]	; (80011f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011cc:	4c0a      	ldr	r4, [pc, #40]	; (80011f8 <LoopForever+0x16>)
  movs r3, #0
 80011ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d0:	e001      	b.n	80011d6 <LoopFillZerobss>

080011d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011d4:	3204      	adds	r2, #4

080011d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d8:	d3fb      	bcc.n	80011d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011da:	f002 f853 	bl	8003284 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011de:	f7ff fc13 	bl	8000a08 <main>

080011e2 <LoopForever>:

LoopForever:
    b LoopForever
 80011e2:	e7fe      	b.n	80011e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80011e4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80011e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011ec:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80011f0:	08003848 	.word	0x08003848
  ldr r2, =_sbss
 80011f4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80011f8:	200000f8 	.word	0x200000f8

080011fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011fc:	e7fe      	b.n	80011fc <ADC1_IRQHandler>

080011fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b082      	sub	sp, #8
 8001202:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001204:	2300      	movs	r3, #0
 8001206:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001208:	2003      	movs	r0, #3
 800120a:	f000 f943 	bl	8001494 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800120e:	2000      	movs	r0, #0
 8001210:	f000 f80e 	bl	8001230 <HAL_InitTick>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d002      	beq.n	8001220 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	71fb      	strb	r3, [r7, #7]
 800121e:	e001      	b.n	8001224 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001220:	f7ff ff22 	bl	8001068 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001224:	79fb      	ldrb	r3, [r7, #7]
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001238:	2300      	movs	r3, #0
 800123a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800123c:	4b17      	ldr	r3, [pc, #92]	; (800129c <HAL_InitTick+0x6c>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d023      	beq.n	800128c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001244:	4b16      	ldr	r3, [pc, #88]	; (80012a0 <HAL_InitTick+0x70>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	4b14      	ldr	r3, [pc, #80]	; (800129c <HAL_InitTick+0x6c>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	4619      	mov	r1, r3
 800124e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001252:	fbb3 f3f1 	udiv	r3, r3, r1
 8001256:	fbb2 f3f3 	udiv	r3, r2, r3
 800125a:	4618      	mov	r0, r3
 800125c:	f000 f941 	bl	80014e2 <HAL_SYSTICK_Config>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d10f      	bne.n	8001286 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2b0f      	cmp	r3, #15
 800126a:	d809      	bhi.n	8001280 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800126c:	2200      	movs	r2, #0
 800126e:	6879      	ldr	r1, [r7, #4]
 8001270:	f04f 30ff 	mov.w	r0, #4294967295
 8001274:	f000 f919 	bl	80014aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001278:	4a0a      	ldr	r2, [pc, #40]	; (80012a4 <HAL_InitTick+0x74>)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6013      	str	r3, [r2, #0]
 800127e:	e007      	b.n	8001290 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	73fb      	strb	r3, [r7, #15]
 8001284:	e004      	b.n	8001290 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	73fb      	strb	r3, [r7, #15]
 800128a:	e001      	b.n	8001290 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001290:	7bfb      	ldrb	r3, [r7, #15]
}
 8001292:	4618      	mov	r0, r3
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000070 	.word	0x20000070
 80012a0:	20000068 	.word	0x20000068
 80012a4:	2000006c 	.word	0x2000006c

080012a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <HAL_IncTick+0x20>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	461a      	mov	r2, r3
 80012b2:	4b06      	ldr	r3, [pc, #24]	; (80012cc <HAL_IncTick+0x24>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4413      	add	r3, r2
 80012b8:	4a04      	ldr	r2, [pc, #16]	; (80012cc <HAL_IncTick+0x24>)
 80012ba:	6013      	str	r3, [r2, #0]
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	20000070 	.word	0x20000070
 80012cc:	200000f4 	.word	0x200000f4

080012d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  return uwTick;
 80012d4:	4b03      	ldr	r3, [pc, #12]	; (80012e4 <HAL_GetTick+0x14>)
 80012d6:	681b      	ldr	r3, [r3, #0]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	200000f4 	.word	0x200000f4

080012e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012f0:	f7ff ffee 	bl	80012d0 <HAL_GetTick>
 80012f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001300:	d005      	beq.n	800130e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001302:	4b0a      	ldr	r3, [pc, #40]	; (800132c <HAL_Delay+0x44>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	461a      	mov	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	4413      	add	r3, r2
 800130c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800130e:	bf00      	nop
 8001310:	f7ff ffde 	bl	80012d0 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	68fa      	ldr	r2, [r7, #12]
 800131c:	429a      	cmp	r2, r3
 800131e:	d8f7      	bhi.n	8001310 <HAL_Delay+0x28>
  {
  }
}
 8001320:	bf00      	nop
 8001322:	bf00      	nop
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000070 	.word	0x20000070

08001330 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001340:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <__NVIC_SetPriorityGrouping+0x44>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001346:	68ba      	ldr	r2, [r7, #8]
 8001348:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800134c:	4013      	ands	r3, r2
 800134e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001358:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800135c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001362:	4a04      	ldr	r2, [pc, #16]	; (8001374 <__NVIC_SetPriorityGrouping+0x44>)
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	60d3      	str	r3, [r2, #12]
}
 8001368:	bf00      	nop
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800137c:	4b04      	ldr	r3, [pc, #16]	; (8001390 <__NVIC_GetPriorityGrouping+0x18>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	0a1b      	lsrs	r3, r3, #8
 8001382:	f003 0307 	and.w	r3, r3, #7
}
 8001386:	4618      	mov	r0, r3
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	6039      	str	r1, [r7, #0]
 800139e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	db0a      	blt.n	80013be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	490c      	ldr	r1, [pc, #48]	; (80013e0 <__NVIC_SetPriority+0x4c>)
 80013ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b2:	0112      	lsls	r2, r2, #4
 80013b4:	b2d2      	uxtb	r2, r2
 80013b6:	440b      	add	r3, r1
 80013b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013bc:	e00a      	b.n	80013d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	4908      	ldr	r1, [pc, #32]	; (80013e4 <__NVIC_SetPriority+0x50>)
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	f003 030f 	and.w	r3, r3, #15
 80013ca:	3b04      	subs	r3, #4
 80013cc:	0112      	lsls	r2, r2, #4
 80013ce:	b2d2      	uxtb	r2, r2
 80013d0:	440b      	add	r3, r1
 80013d2:	761a      	strb	r2, [r3, #24]
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	e000e100 	.word	0xe000e100
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b089      	sub	sp, #36	; 0x24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	f1c3 0307 	rsb	r3, r3, #7
 8001402:	2b04      	cmp	r3, #4
 8001404:	bf28      	it	cs
 8001406:	2304      	movcs	r3, #4
 8001408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	3304      	adds	r3, #4
 800140e:	2b06      	cmp	r3, #6
 8001410:	d902      	bls.n	8001418 <NVIC_EncodePriority+0x30>
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3b03      	subs	r3, #3
 8001416:	e000      	b.n	800141a <NVIC_EncodePriority+0x32>
 8001418:	2300      	movs	r3, #0
 800141a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800141c:	f04f 32ff 	mov.w	r2, #4294967295
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43da      	mvns	r2, r3
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	401a      	ands	r2, r3
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001430:	f04f 31ff 	mov.w	r1, #4294967295
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	fa01 f303 	lsl.w	r3, r1, r3
 800143a:	43d9      	mvns	r1, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001440:	4313      	orrs	r3, r2
         );
}
 8001442:	4618      	mov	r0, r3
 8001444:	3724      	adds	r7, #36	; 0x24
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
	...

08001450 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3b01      	subs	r3, #1
 800145c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001460:	d301      	bcc.n	8001466 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001462:	2301      	movs	r3, #1
 8001464:	e00f      	b.n	8001486 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001466:	4a0a      	ldr	r2, [pc, #40]	; (8001490 <SysTick_Config+0x40>)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3b01      	subs	r3, #1
 800146c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800146e:	210f      	movs	r1, #15
 8001470:	f04f 30ff 	mov.w	r0, #4294967295
 8001474:	f7ff ff8e 	bl	8001394 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001478:	4b05      	ldr	r3, [pc, #20]	; (8001490 <SysTick_Config+0x40>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800147e:	4b04      	ldr	r3, [pc, #16]	; (8001490 <SysTick_Config+0x40>)
 8001480:	2207      	movs	r2, #7
 8001482:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	e000e010 	.word	0xe000e010

08001494 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f7ff ff47 	bl	8001330 <__NVIC_SetPriorityGrouping>
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b086      	sub	sp, #24
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	4603      	mov	r3, r0
 80014b2:	60b9      	str	r1, [r7, #8]
 80014b4:	607a      	str	r2, [r7, #4]
 80014b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014bc:	f7ff ff5c 	bl	8001378 <__NVIC_GetPriorityGrouping>
 80014c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	68b9      	ldr	r1, [r7, #8]
 80014c6:	6978      	ldr	r0, [r7, #20]
 80014c8:	f7ff ff8e 	bl	80013e8 <NVIC_EncodePriority>
 80014cc:	4602      	mov	r2, r0
 80014ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014d2:	4611      	mov	r1, r2
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ff5d 	bl	8001394 <__NVIC_SetPriority>
}
 80014da:	bf00      	nop
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff ffb0 	bl	8001450 <SysTick_Config>
 80014f0:	4603      	mov	r3, r0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
	...

080014fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b087      	sub	sp, #28
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800150a:	e166      	b.n	80017da <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	2101      	movs	r1, #1
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	fa01 f303 	lsl.w	r3, r1, r3
 8001518:	4013      	ands	r3, r2
 800151a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2b00      	cmp	r3, #0
 8001520:	f000 8158 	beq.w	80017d4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f003 0303 	and.w	r3, r3, #3
 800152c:	2b01      	cmp	r3, #1
 800152e:	d005      	beq.n	800153c <HAL_GPIO_Init+0x40>
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f003 0303 	and.w	r3, r3, #3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d130      	bne.n	800159e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	2203      	movs	r2, #3
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43db      	mvns	r3, r3
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	4013      	ands	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	68da      	ldr	r2, [r3, #12]
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	4313      	orrs	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001572:	2201      	movs	r2, #1
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43db      	mvns	r3, r3
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	4013      	ands	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	091b      	lsrs	r3, r3, #4
 8001588:	f003 0201 	and.w	r2, r3, #1
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	4313      	orrs	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f003 0303 	and.w	r3, r3, #3
 80015a6:	2b03      	cmp	r3, #3
 80015a8:	d017      	beq.n	80015da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	2203      	movs	r2, #3
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43db      	mvns	r3, r3
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	4013      	ands	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	689a      	ldr	r2, [r3, #8]
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f003 0303 	and.w	r3, r3, #3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d123      	bne.n	800162e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	08da      	lsrs	r2, r3, #3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	3208      	adds	r2, #8
 80015ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	220f      	movs	r2, #15
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	43db      	mvns	r3, r3
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	4013      	ands	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	691a      	ldr	r2, [r3, #16]
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	f003 0307 	and.w	r3, r3, #7
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	4313      	orrs	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	08da      	lsrs	r2, r3, #3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3208      	adds	r2, #8
 8001628:	6939      	ldr	r1, [r7, #16]
 800162a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	2203      	movs	r2, #3
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	43db      	mvns	r3, r3
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	4013      	ands	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f003 0203 	and.w	r2, r3, #3
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4313      	orrs	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800166a:	2b00      	cmp	r3, #0
 800166c:	f000 80b2 	beq.w	80017d4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001670:	4b61      	ldr	r3, [pc, #388]	; (80017f8 <HAL_GPIO_Init+0x2fc>)
 8001672:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001674:	4a60      	ldr	r2, [pc, #384]	; (80017f8 <HAL_GPIO_Init+0x2fc>)
 8001676:	f043 0301 	orr.w	r3, r3, #1
 800167a:	6613      	str	r3, [r2, #96]	; 0x60
 800167c:	4b5e      	ldr	r3, [pc, #376]	; (80017f8 <HAL_GPIO_Init+0x2fc>)
 800167e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	60bb      	str	r3, [r7, #8]
 8001686:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001688:	4a5c      	ldr	r2, [pc, #368]	; (80017fc <HAL_GPIO_Init+0x300>)
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	089b      	lsrs	r3, r3, #2
 800168e:	3302      	adds	r3, #2
 8001690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001694:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	f003 0303 	and.w	r3, r3, #3
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	220f      	movs	r2, #15
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	4013      	ands	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80016b2:	d02b      	beq.n	800170c <HAL_GPIO_Init+0x210>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4a52      	ldr	r2, [pc, #328]	; (8001800 <HAL_GPIO_Init+0x304>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d025      	beq.n	8001708 <HAL_GPIO_Init+0x20c>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	4a51      	ldr	r2, [pc, #324]	; (8001804 <HAL_GPIO_Init+0x308>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d01f      	beq.n	8001704 <HAL_GPIO_Init+0x208>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4a50      	ldr	r2, [pc, #320]	; (8001808 <HAL_GPIO_Init+0x30c>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d019      	beq.n	8001700 <HAL_GPIO_Init+0x204>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4a4f      	ldr	r2, [pc, #316]	; (800180c <HAL_GPIO_Init+0x310>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d013      	beq.n	80016fc <HAL_GPIO_Init+0x200>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4a4e      	ldr	r2, [pc, #312]	; (8001810 <HAL_GPIO_Init+0x314>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d00d      	beq.n	80016f8 <HAL_GPIO_Init+0x1fc>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4a4d      	ldr	r2, [pc, #308]	; (8001814 <HAL_GPIO_Init+0x318>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d007      	beq.n	80016f4 <HAL_GPIO_Init+0x1f8>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4a4c      	ldr	r2, [pc, #304]	; (8001818 <HAL_GPIO_Init+0x31c>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d101      	bne.n	80016f0 <HAL_GPIO_Init+0x1f4>
 80016ec:	2307      	movs	r3, #7
 80016ee:	e00e      	b.n	800170e <HAL_GPIO_Init+0x212>
 80016f0:	2308      	movs	r3, #8
 80016f2:	e00c      	b.n	800170e <HAL_GPIO_Init+0x212>
 80016f4:	2306      	movs	r3, #6
 80016f6:	e00a      	b.n	800170e <HAL_GPIO_Init+0x212>
 80016f8:	2305      	movs	r3, #5
 80016fa:	e008      	b.n	800170e <HAL_GPIO_Init+0x212>
 80016fc:	2304      	movs	r3, #4
 80016fe:	e006      	b.n	800170e <HAL_GPIO_Init+0x212>
 8001700:	2303      	movs	r3, #3
 8001702:	e004      	b.n	800170e <HAL_GPIO_Init+0x212>
 8001704:	2302      	movs	r3, #2
 8001706:	e002      	b.n	800170e <HAL_GPIO_Init+0x212>
 8001708:	2301      	movs	r3, #1
 800170a:	e000      	b.n	800170e <HAL_GPIO_Init+0x212>
 800170c:	2300      	movs	r3, #0
 800170e:	697a      	ldr	r2, [r7, #20]
 8001710:	f002 0203 	and.w	r2, r2, #3
 8001714:	0092      	lsls	r2, r2, #2
 8001716:	4093      	lsls	r3, r2
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	4313      	orrs	r3, r2
 800171c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800171e:	4937      	ldr	r1, [pc, #220]	; (80017fc <HAL_GPIO_Init+0x300>)
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	089b      	lsrs	r3, r3, #2
 8001724:	3302      	adds	r3, #2
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800172c:	4b3b      	ldr	r3, [pc, #236]	; (800181c <HAL_GPIO_Init+0x320>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	43db      	mvns	r3, r3
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	4013      	ands	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d003      	beq.n	8001750 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	4313      	orrs	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001750:	4a32      	ldr	r2, [pc, #200]	; (800181c <HAL_GPIO_Init+0x320>)
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001756:	4b31      	ldr	r3, [pc, #196]	; (800181c <HAL_GPIO_Init+0x320>)
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	43db      	mvns	r3, r3
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	4013      	ands	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d003      	beq.n	800177a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	4313      	orrs	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800177a:	4a28      	ldr	r2, [pc, #160]	; (800181c <HAL_GPIO_Init+0x320>)
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001780:	4b26      	ldr	r3, [pc, #152]	; (800181c <HAL_GPIO_Init+0x320>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	43db      	mvns	r3, r3
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	4013      	ands	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d003      	beq.n	80017a4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017a4:	4a1d      	ldr	r2, [pc, #116]	; (800181c <HAL_GPIO_Init+0x320>)
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80017aa:	4b1c      	ldr	r3, [pc, #112]	; (800181c <HAL_GPIO_Init+0x320>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	43db      	mvns	r3, r3
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	4013      	ands	r3, r2
 80017b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d003      	beq.n	80017ce <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017ce:	4a13      	ldr	r2, [pc, #76]	; (800181c <HAL_GPIO_Init+0x320>)
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	3301      	adds	r3, #1
 80017d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	fa22 f303 	lsr.w	r3, r2, r3
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	f47f ae91 	bne.w	800150c <HAL_GPIO_Init+0x10>
  }
}
 80017ea:	bf00      	nop
 80017ec:	bf00      	nop
 80017ee:	371c      	adds	r7, #28
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	40021000 	.word	0x40021000
 80017fc:	40010000 	.word	0x40010000
 8001800:	48000400 	.word	0x48000400
 8001804:	48000800 	.word	0x48000800
 8001808:	48000c00 	.word	0x48000c00
 800180c:	48001000 	.word	0x48001000
 8001810:	48001400 	.word	0x48001400
 8001814:	48001800 	.word	0x48001800
 8001818:	48001c00 	.word	0x48001c00
 800181c:	40010400 	.word	0x40010400

08001820 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	460b      	mov	r3, r1
 800182a:	807b      	strh	r3, [r7, #2]
 800182c:	4613      	mov	r3, r2
 800182e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001830:	787b      	ldrb	r3, [r7, #1]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d003      	beq.n	800183e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001836:	887a      	ldrh	r2, [r7, #2]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800183c:	e002      	b.n	8001844 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800183e:	887a      	ldrh	r2, [r7, #2]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001854:	4b0d      	ldr	r3, [pc, #52]	; (800188c <HAL_PWREx_GetVoltageRange+0x3c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800185c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001860:	d102      	bne.n	8001868 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001862:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001866:	e00b      	b.n	8001880 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001868:	4b08      	ldr	r3, [pc, #32]	; (800188c <HAL_PWREx_GetVoltageRange+0x3c>)
 800186a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800186e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001876:	d102      	bne.n	800187e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001878:	f44f 7300 	mov.w	r3, #512	; 0x200
 800187c:	e000      	b.n	8001880 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800187e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001880:	4618      	mov	r0, r3
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	40007000 	.word	0x40007000

08001890 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d141      	bne.n	8001922 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800189e:	4b4b      	ldr	r3, [pc, #300]	; (80019cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018aa:	d131      	bne.n	8001910 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018ac:	4b47      	ldr	r3, [pc, #284]	; (80019cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018b2:	4a46      	ldr	r2, [pc, #280]	; (80019cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018bc:	4b43      	ldr	r3, [pc, #268]	; (80019cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018c4:	4a41      	ldr	r2, [pc, #260]	; (80019cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80018cc:	4b40      	ldr	r3, [pc, #256]	; (80019d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2232      	movs	r2, #50	; 0x32
 80018d2:	fb02 f303 	mul.w	r3, r2, r3
 80018d6:	4a3f      	ldr	r2, [pc, #252]	; (80019d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80018d8:	fba2 2303 	umull	r2, r3, r2, r3
 80018dc:	0c9b      	lsrs	r3, r3, #18
 80018de:	3301      	adds	r3, #1
 80018e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018e2:	e002      	b.n	80018ea <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018ea:	4b38      	ldr	r3, [pc, #224]	; (80019cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018f6:	d102      	bne.n	80018fe <HAL_PWREx_ControlVoltageScaling+0x6e>
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1f2      	bne.n	80018e4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018fe:	4b33      	ldr	r3, [pc, #204]	; (80019cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001900:	695b      	ldr	r3, [r3, #20]
 8001902:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800190a:	d158      	bne.n	80019be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e057      	b.n	80019c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001910:	4b2e      	ldr	r3, [pc, #184]	; (80019cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001912:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001916:	4a2d      	ldr	r2, [pc, #180]	; (80019cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001918:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800191c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001920:	e04d      	b.n	80019be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001928:	d141      	bne.n	80019ae <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800192a:	4b28      	ldr	r3, [pc, #160]	; (80019cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001936:	d131      	bne.n	800199c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001938:	4b24      	ldr	r3, [pc, #144]	; (80019cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800193a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800193e:	4a23      	ldr	r2, [pc, #140]	; (80019cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001944:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001948:	4b20      	ldr	r3, [pc, #128]	; (80019cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001950:	4a1e      	ldr	r2, [pc, #120]	; (80019cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001952:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001956:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001958:	4b1d      	ldr	r3, [pc, #116]	; (80019d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2232      	movs	r2, #50	; 0x32
 800195e:	fb02 f303 	mul.w	r3, r2, r3
 8001962:	4a1c      	ldr	r2, [pc, #112]	; (80019d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001964:	fba2 2303 	umull	r2, r3, r2, r3
 8001968:	0c9b      	lsrs	r3, r3, #18
 800196a:	3301      	adds	r3, #1
 800196c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800196e:	e002      	b.n	8001976 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	3b01      	subs	r3, #1
 8001974:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001976:	4b15      	ldr	r3, [pc, #84]	; (80019cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800197e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001982:	d102      	bne.n	800198a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1f2      	bne.n	8001970 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800198a:	4b10      	ldr	r3, [pc, #64]	; (80019cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800198c:	695b      	ldr	r3, [r3, #20]
 800198e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001992:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001996:	d112      	bne.n	80019be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e011      	b.n	80019c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800199c:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800199e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019a2:	4a0a      	ldr	r2, [pc, #40]	; (80019cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80019ac:	e007      	b.n	80019be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80019ae:	4b07      	ldr	r3, [pc, #28]	; (80019cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019b6:	4a05      	ldr	r2, [pc, #20]	; (80019cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019bc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	40007000 	.word	0x40007000
 80019d0:	20000068 	.word	0x20000068
 80019d4:	431bde83 	.word	0x431bde83

080019d8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80019dc:	4b05      	ldr	r3, [pc, #20]	; (80019f4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	4a04      	ldr	r2, [pc, #16]	; (80019f4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80019e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019e6:	6053      	str	r3, [r2, #4]
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	40007000 	.word	0x40007000

080019f8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b088      	sub	sp, #32
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d102      	bne.n	8001a0c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	f000 bc08 	b.w	800221c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a0c:	4b96      	ldr	r3, [pc, #600]	; (8001c68 <HAL_RCC_OscConfig+0x270>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f003 030c 	and.w	r3, r3, #12
 8001a14:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a16:	4b94      	ldr	r3, [pc, #592]	; (8001c68 <HAL_RCC_OscConfig+0x270>)
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	f003 0303 	and.w	r3, r3, #3
 8001a1e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0310 	and.w	r3, r3, #16
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f000 80e4 	beq.w	8001bf6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d007      	beq.n	8001a44 <HAL_RCC_OscConfig+0x4c>
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	2b0c      	cmp	r3, #12
 8001a38:	f040 808b 	bne.w	8001b52 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	f040 8087 	bne.w	8001b52 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a44:	4b88      	ldr	r3, [pc, #544]	; (8001c68 <HAL_RCC_OscConfig+0x270>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d005      	beq.n	8001a5c <HAL_RCC_OscConfig+0x64>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d101      	bne.n	8001a5c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e3df      	b.n	800221c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a1a      	ldr	r2, [r3, #32]
 8001a60:	4b81      	ldr	r3, [pc, #516]	; (8001c68 <HAL_RCC_OscConfig+0x270>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0308 	and.w	r3, r3, #8
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d004      	beq.n	8001a76 <HAL_RCC_OscConfig+0x7e>
 8001a6c:	4b7e      	ldr	r3, [pc, #504]	; (8001c68 <HAL_RCC_OscConfig+0x270>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a74:	e005      	b.n	8001a82 <HAL_RCC_OscConfig+0x8a>
 8001a76:	4b7c      	ldr	r3, [pc, #496]	; (8001c68 <HAL_RCC_OscConfig+0x270>)
 8001a78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a7c:	091b      	lsrs	r3, r3, #4
 8001a7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d223      	bcs.n	8001ace <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a1b      	ldr	r3, [r3, #32]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f000 fd94 	bl	80025b8 <RCC_SetFlashLatencyFromMSIRange>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e3c0      	b.n	800221c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a9a:	4b73      	ldr	r3, [pc, #460]	; (8001c68 <HAL_RCC_OscConfig+0x270>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a72      	ldr	r2, [pc, #456]	; (8001c68 <HAL_RCC_OscConfig+0x270>)
 8001aa0:	f043 0308 	orr.w	r3, r3, #8
 8001aa4:	6013      	str	r3, [r2, #0]
 8001aa6:	4b70      	ldr	r3, [pc, #448]	; (8001c68 <HAL_RCC_OscConfig+0x270>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a1b      	ldr	r3, [r3, #32]
 8001ab2:	496d      	ldr	r1, [pc, #436]	; (8001c68 <HAL_RCC_OscConfig+0x270>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ab8:	4b6b      	ldr	r3, [pc, #428]	; (8001c68 <HAL_RCC_OscConfig+0x270>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	69db      	ldr	r3, [r3, #28]
 8001ac4:	021b      	lsls	r3, r3, #8
 8001ac6:	4968      	ldr	r1, [pc, #416]	; (8001c68 <HAL_RCC_OscConfig+0x270>)
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	604b      	str	r3, [r1, #4]
 8001acc:	e025      	b.n	8001b1a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ace:	4b66      	ldr	r3, [pc, #408]	; (8001c68 <HAL_RCC_OscConfig+0x270>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a65      	ldr	r2, [pc, #404]	; (8001c68 <HAL_RCC_OscConfig+0x270>)
 8001ad4:	f043 0308 	orr.w	r3, r3, #8
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	4b63      	ldr	r3, [pc, #396]	; (8001c68 <HAL_RCC_OscConfig+0x270>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a1b      	ldr	r3, [r3, #32]
 8001ae6:	4960      	ldr	r1, [pc, #384]	; (8001c68 <HAL_RCC_OscConfig+0x270>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001aec:	4b5e      	ldr	r3, [pc, #376]	; (8001c68 <HAL_RCC_OscConfig+0x270>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	69db      	ldr	r3, [r3, #28]
 8001af8:	021b      	lsls	r3, r3, #8
 8001afa:	495b      	ldr	r1, [pc, #364]	; (8001c68 <HAL_RCC_OscConfig+0x270>)
 8001afc:	4313      	orrs	r3, r2
 8001afe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d109      	bne.n	8001b1a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a1b      	ldr	r3, [r3, #32]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f000 fd54 	bl	80025b8 <RCC_SetFlashLatencyFromMSIRange>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e380      	b.n	800221c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b1a:	f000 fcc1 	bl	80024a0 <HAL_RCC_GetSysClockFreq>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	4b51      	ldr	r3, [pc, #324]	; (8001c68 <HAL_RCC_OscConfig+0x270>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	091b      	lsrs	r3, r3, #4
 8001b26:	f003 030f 	and.w	r3, r3, #15
 8001b2a:	4950      	ldr	r1, [pc, #320]	; (8001c6c <HAL_RCC_OscConfig+0x274>)
 8001b2c:	5ccb      	ldrb	r3, [r1, r3]
 8001b2e:	f003 031f 	and.w	r3, r3, #31
 8001b32:	fa22 f303 	lsr.w	r3, r2, r3
 8001b36:	4a4e      	ldr	r2, [pc, #312]	; (8001c70 <HAL_RCC_OscConfig+0x278>)
 8001b38:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b3a:	4b4e      	ldr	r3, [pc, #312]	; (8001c74 <HAL_RCC_OscConfig+0x27c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff fb76 	bl	8001230 <HAL_InitTick>
 8001b44:	4603      	mov	r3, r0
 8001b46:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b48:	7bfb      	ldrb	r3, [r7, #15]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d052      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001b4e:	7bfb      	ldrb	r3, [r7, #15]
 8001b50:	e364      	b.n	800221c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d032      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b5a:	4b43      	ldr	r3, [pc, #268]	; (8001c68 <HAL_RCC_OscConfig+0x270>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a42      	ldr	r2, [pc, #264]	; (8001c68 <HAL_RCC_OscConfig+0x270>)
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b66:	f7ff fbb3 	bl	80012d0 <HAL_GetTick>
 8001b6a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b6c:	e008      	b.n	8001b80 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b6e:	f7ff fbaf 	bl	80012d0 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e34d      	b.n	800221c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b80:	4b39      	ldr	r3, [pc, #228]	; (8001c68 <HAL_RCC_OscConfig+0x270>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d0f0      	beq.n	8001b6e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b8c:	4b36      	ldr	r3, [pc, #216]	; (8001c68 <HAL_RCC_OscConfig+0x270>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a35      	ldr	r2, [pc, #212]	; (8001c68 <HAL_RCC_OscConfig+0x270>)
 8001b92:	f043 0308 	orr.w	r3, r3, #8
 8001b96:	6013      	str	r3, [r2, #0]
 8001b98:	4b33      	ldr	r3, [pc, #204]	; (8001c68 <HAL_RCC_OscConfig+0x270>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a1b      	ldr	r3, [r3, #32]
 8001ba4:	4930      	ldr	r1, [pc, #192]	; (8001c68 <HAL_RCC_OscConfig+0x270>)
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001baa:	4b2f      	ldr	r3, [pc, #188]	; (8001c68 <HAL_RCC_OscConfig+0x270>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	021b      	lsls	r3, r3, #8
 8001bb8:	492b      	ldr	r1, [pc, #172]	; (8001c68 <HAL_RCC_OscConfig+0x270>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	604b      	str	r3, [r1, #4]
 8001bbe:	e01a      	b.n	8001bf6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001bc0:	4b29      	ldr	r3, [pc, #164]	; (8001c68 <HAL_RCC_OscConfig+0x270>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a28      	ldr	r2, [pc, #160]	; (8001c68 <HAL_RCC_OscConfig+0x270>)
 8001bc6:	f023 0301 	bic.w	r3, r3, #1
 8001bca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bcc:	f7ff fb80 	bl	80012d0 <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bd4:	f7ff fb7c 	bl	80012d0 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e31a      	b.n	800221c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001be6:	4b20      	ldr	r3, [pc, #128]	; (8001c68 <HAL_RCC_OscConfig+0x270>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1f0      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x1dc>
 8001bf2:	e000      	b.n	8001bf6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bf4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d073      	beq.n	8001cea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	2b08      	cmp	r3, #8
 8001c06:	d005      	beq.n	8001c14 <HAL_RCC_OscConfig+0x21c>
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	2b0c      	cmp	r3, #12
 8001c0c:	d10e      	bne.n	8001c2c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	2b03      	cmp	r3, #3
 8001c12:	d10b      	bne.n	8001c2c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c14:	4b14      	ldr	r3, [pc, #80]	; (8001c68 <HAL_RCC_OscConfig+0x270>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d063      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x2f0>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d15f      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e2f7      	b.n	800221c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c34:	d106      	bne.n	8001c44 <HAL_RCC_OscConfig+0x24c>
 8001c36:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <HAL_RCC_OscConfig+0x270>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a0b      	ldr	r2, [pc, #44]	; (8001c68 <HAL_RCC_OscConfig+0x270>)
 8001c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c40:	6013      	str	r3, [r2, #0]
 8001c42:	e025      	b.n	8001c90 <HAL_RCC_OscConfig+0x298>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c4c:	d114      	bne.n	8001c78 <HAL_RCC_OscConfig+0x280>
 8001c4e:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <HAL_RCC_OscConfig+0x270>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a05      	ldr	r2, [pc, #20]	; (8001c68 <HAL_RCC_OscConfig+0x270>)
 8001c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c58:	6013      	str	r3, [r2, #0]
 8001c5a:	4b03      	ldr	r3, [pc, #12]	; (8001c68 <HAL_RCC_OscConfig+0x270>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a02      	ldr	r2, [pc, #8]	; (8001c68 <HAL_RCC_OscConfig+0x270>)
 8001c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c64:	6013      	str	r3, [r2, #0]
 8001c66:	e013      	b.n	8001c90 <HAL_RCC_OscConfig+0x298>
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	08003800 	.word	0x08003800
 8001c70:	20000068 	.word	0x20000068
 8001c74:	2000006c 	.word	0x2000006c
 8001c78:	4ba0      	ldr	r3, [pc, #640]	; (8001efc <HAL_RCC_OscConfig+0x504>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a9f      	ldr	r2, [pc, #636]	; (8001efc <HAL_RCC_OscConfig+0x504>)
 8001c7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c82:	6013      	str	r3, [r2, #0]
 8001c84:	4b9d      	ldr	r3, [pc, #628]	; (8001efc <HAL_RCC_OscConfig+0x504>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a9c      	ldr	r2, [pc, #624]	; (8001efc <HAL_RCC_OscConfig+0x504>)
 8001c8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d013      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c98:	f7ff fb1a 	bl	80012d0 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca0:	f7ff fb16 	bl	80012d0 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b64      	cmp	r3, #100	; 0x64
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e2b4      	b.n	800221c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cb2:	4b92      	ldr	r3, [pc, #584]	; (8001efc <HAL_RCC_OscConfig+0x504>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0f0      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x2a8>
 8001cbe:	e014      	b.n	8001cea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc0:	f7ff fb06 	bl	80012d0 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc8:	f7ff fb02 	bl	80012d0 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b64      	cmp	r3, #100	; 0x64
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e2a0      	b.n	800221c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cda:	4b88      	ldr	r3, [pc, #544]	; (8001efc <HAL_RCC_OscConfig+0x504>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1f0      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x2d0>
 8001ce6:	e000      	b.n	8001cea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d060      	beq.n	8001db8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	2b04      	cmp	r3, #4
 8001cfa:	d005      	beq.n	8001d08 <HAL_RCC_OscConfig+0x310>
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	2b0c      	cmp	r3, #12
 8001d00:	d119      	bne.n	8001d36 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d116      	bne.n	8001d36 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d08:	4b7c      	ldr	r3, [pc, #496]	; (8001efc <HAL_RCC_OscConfig+0x504>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d005      	beq.n	8001d20 <HAL_RCC_OscConfig+0x328>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d101      	bne.n	8001d20 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e27d      	b.n	800221c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d20:	4b76      	ldr	r3, [pc, #472]	; (8001efc <HAL_RCC_OscConfig+0x504>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	061b      	lsls	r3, r3, #24
 8001d2e:	4973      	ldr	r1, [pc, #460]	; (8001efc <HAL_RCC_OscConfig+0x504>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d34:	e040      	b.n	8001db8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d023      	beq.n	8001d86 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d3e:	4b6f      	ldr	r3, [pc, #444]	; (8001efc <HAL_RCC_OscConfig+0x504>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a6e      	ldr	r2, [pc, #440]	; (8001efc <HAL_RCC_OscConfig+0x504>)
 8001d44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d4a:	f7ff fac1 	bl	80012d0 <HAL_GetTick>
 8001d4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d50:	e008      	b.n	8001d64 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d52:	f7ff fabd 	bl	80012d0 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d901      	bls.n	8001d64 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e25b      	b.n	800221c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d64:	4b65      	ldr	r3, [pc, #404]	; (8001efc <HAL_RCC_OscConfig+0x504>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d0f0      	beq.n	8001d52 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d70:	4b62      	ldr	r3, [pc, #392]	; (8001efc <HAL_RCC_OscConfig+0x504>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	061b      	lsls	r3, r3, #24
 8001d7e:	495f      	ldr	r1, [pc, #380]	; (8001efc <HAL_RCC_OscConfig+0x504>)
 8001d80:	4313      	orrs	r3, r2
 8001d82:	604b      	str	r3, [r1, #4]
 8001d84:	e018      	b.n	8001db8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d86:	4b5d      	ldr	r3, [pc, #372]	; (8001efc <HAL_RCC_OscConfig+0x504>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a5c      	ldr	r2, [pc, #368]	; (8001efc <HAL_RCC_OscConfig+0x504>)
 8001d8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d92:	f7ff fa9d 	bl	80012d0 <HAL_GetTick>
 8001d96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d98:	e008      	b.n	8001dac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d9a:	f7ff fa99 	bl	80012d0 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e237      	b.n	800221c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dac:	4b53      	ldr	r3, [pc, #332]	; (8001efc <HAL_RCC_OscConfig+0x504>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1f0      	bne.n	8001d9a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0308 	and.w	r3, r3, #8
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d03c      	beq.n	8001e3e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	695b      	ldr	r3, [r3, #20]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d01c      	beq.n	8001e06 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dcc:	4b4b      	ldr	r3, [pc, #300]	; (8001efc <HAL_RCC_OscConfig+0x504>)
 8001dce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dd2:	4a4a      	ldr	r2, [pc, #296]	; (8001efc <HAL_RCC_OscConfig+0x504>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ddc:	f7ff fa78 	bl	80012d0 <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001de4:	f7ff fa74 	bl	80012d0 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e212      	b.n	800221c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001df6:	4b41      	ldr	r3, [pc, #260]	; (8001efc <HAL_RCC_OscConfig+0x504>)
 8001df8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0ef      	beq.n	8001de4 <HAL_RCC_OscConfig+0x3ec>
 8001e04:	e01b      	b.n	8001e3e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e06:	4b3d      	ldr	r3, [pc, #244]	; (8001efc <HAL_RCC_OscConfig+0x504>)
 8001e08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e0c:	4a3b      	ldr	r2, [pc, #236]	; (8001efc <HAL_RCC_OscConfig+0x504>)
 8001e0e:	f023 0301 	bic.w	r3, r3, #1
 8001e12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e16:	f7ff fa5b 	bl	80012d0 <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e1e:	f7ff fa57 	bl	80012d0 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e1f5      	b.n	800221c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e30:	4b32      	ldr	r3, [pc, #200]	; (8001efc <HAL_RCC_OscConfig+0x504>)
 8001e32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1ef      	bne.n	8001e1e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0304 	and.w	r3, r3, #4
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 80a6 	beq.w	8001f98 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e50:	4b2a      	ldr	r3, [pc, #168]	; (8001efc <HAL_RCC_OscConfig+0x504>)
 8001e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d10d      	bne.n	8001e78 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e5c:	4b27      	ldr	r3, [pc, #156]	; (8001efc <HAL_RCC_OscConfig+0x504>)
 8001e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e60:	4a26      	ldr	r2, [pc, #152]	; (8001efc <HAL_RCC_OscConfig+0x504>)
 8001e62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e66:	6593      	str	r3, [r2, #88]	; 0x58
 8001e68:	4b24      	ldr	r3, [pc, #144]	; (8001efc <HAL_RCC_OscConfig+0x504>)
 8001e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e70:	60bb      	str	r3, [r7, #8]
 8001e72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e74:	2301      	movs	r3, #1
 8001e76:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e78:	4b21      	ldr	r3, [pc, #132]	; (8001f00 <HAL_RCC_OscConfig+0x508>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d118      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e84:	4b1e      	ldr	r3, [pc, #120]	; (8001f00 <HAL_RCC_OscConfig+0x508>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a1d      	ldr	r2, [pc, #116]	; (8001f00 <HAL_RCC_OscConfig+0x508>)
 8001e8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e90:	f7ff fa1e 	bl	80012d0 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e98:	f7ff fa1a 	bl	80012d0 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e1b8      	b.n	800221c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eaa:	4b15      	ldr	r3, [pc, #84]	; (8001f00 <HAL_RCC_OscConfig+0x508>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0f0      	beq.n	8001e98 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d108      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x4d8>
 8001ebe:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <HAL_RCC_OscConfig+0x504>)
 8001ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec4:	4a0d      	ldr	r2, [pc, #52]	; (8001efc <HAL_RCC_OscConfig+0x504>)
 8001ec6:	f043 0301 	orr.w	r3, r3, #1
 8001eca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ece:	e029      	b.n	8001f24 <HAL_RCC_OscConfig+0x52c>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	2b05      	cmp	r3, #5
 8001ed6:	d115      	bne.n	8001f04 <HAL_RCC_OscConfig+0x50c>
 8001ed8:	4b08      	ldr	r3, [pc, #32]	; (8001efc <HAL_RCC_OscConfig+0x504>)
 8001eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ede:	4a07      	ldr	r2, [pc, #28]	; (8001efc <HAL_RCC_OscConfig+0x504>)
 8001ee0:	f043 0304 	orr.w	r3, r3, #4
 8001ee4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ee8:	4b04      	ldr	r3, [pc, #16]	; (8001efc <HAL_RCC_OscConfig+0x504>)
 8001eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eee:	4a03      	ldr	r2, [pc, #12]	; (8001efc <HAL_RCC_OscConfig+0x504>)
 8001ef0:	f043 0301 	orr.w	r3, r3, #1
 8001ef4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ef8:	e014      	b.n	8001f24 <HAL_RCC_OscConfig+0x52c>
 8001efa:	bf00      	nop
 8001efc:	40021000 	.word	0x40021000
 8001f00:	40007000 	.word	0x40007000
 8001f04:	4b9d      	ldr	r3, [pc, #628]	; (800217c <HAL_RCC_OscConfig+0x784>)
 8001f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f0a:	4a9c      	ldr	r2, [pc, #624]	; (800217c <HAL_RCC_OscConfig+0x784>)
 8001f0c:	f023 0301 	bic.w	r3, r3, #1
 8001f10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f14:	4b99      	ldr	r3, [pc, #612]	; (800217c <HAL_RCC_OscConfig+0x784>)
 8001f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f1a:	4a98      	ldr	r2, [pc, #608]	; (800217c <HAL_RCC_OscConfig+0x784>)
 8001f1c:	f023 0304 	bic.w	r3, r3, #4
 8001f20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d016      	beq.n	8001f5a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f2c:	f7ff f9d0 	bl	80012d0 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f32:	e00a      	b.n	8001f4a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f34:	f7ff f9cc 	bl	80012d0 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e168      	b.n	800221c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f4a:	4b8c      	ldr	r3, [pc, #560]	; (800217c <HAL_RCC_OscConfig+0x784>)
 8001f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d0ed      	beq.n	8001f34 <HAL_RCC_OscConfig+0x53c>
 8001f58:	e015      	b.n	8001f86 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f5a:	f7ff f9b9 	bl	80012d0 <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f60:	e00a      	b.n	8001f78 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f62:	f7ff f9b5 	bl	80012d0 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e151      	b.n	800221c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f78:	4b80      	ldr	r3, [pc, #512]	; (800217c <HAL_RCC_OscConfig+0x784>)
 8001f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1ed      	bne.n	8001f62 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f86:	7ffb      	ldrb	r3, [r7, #31]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d105      	bne.n	8001f98 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f8c:	4b7b      	ldr	r3, [pc, #492]	; (800217c <HAL_RCC_OscConfig+0x784>)
 8001f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f90:	4a7a      	ldr	r2, [pc, #488]	; (800217c <HAL_RCC_OscConfig+0x784>)
 8001f92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f96:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0320 	and.w	r3, r3, #32
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d03c      	beq.n	800201e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d01c      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001fac:	4b73      	ldr	r3, [pc, #460]	; (800217c <HAL_RCC_OscConfig+0x784>)
 8001fae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fb2:	4a72      	ldr	r2, [pc, #456]	; (800217c <HAL_RCC_OscConfig+0x784>)
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fbc:	f7ff f988 	bl	80012d0 <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fc4:	f7ff f984 	bl	80012d0 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e122      	b.n	800221c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001fd6:	4b69      	ldr	r3, [pc, #420]	; (800217c <HAL_RCC_OscConfig+0x784>)
 8001fd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0ef      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x5cc>
 8001fe4:	e01b      	b.n	800201e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001fe6:	4b65      	ldr	r3, [pc, #404]	; (800217c <HAL_RCC_OscConfig+0x784>)
 8001fe8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fec:	4a63      	ldr	r2, [pc, #396]	; (800217c <HAL_RCC_OscConfig+0x784>)
 8001fee:	f023 0301 	bic.w	r3, r3, #1
 8001ff2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff6:	f7ff f96b 	bl	80012d0 <HAL_GetTick>
 8001ffa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ffc:	e008      	b.n	8002010 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ffe:	f7ff f967 	bl	80012d0 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e105      	b.n	800221c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002010:	4b5a      	ldr	r3, [pc, #360]	; (800217c <HAL_RCC_OscConfig+0x784>)
 8002012:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1ef      	bne.n	8001ffe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002022:	2b00      	cmp	r3, #0
 8002024:	f000 80f9 	beq.w	800221a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202c:	2b02      	cmp	r3, #2
 800202e:	f040 80cf 	bne.w	80021d0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002032:	4b52      	ldr	r3, [pc, #328]	; (800217c <HAL_RCC_OscConfig+0x784>)
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	f003 0203 	and.w	r2, r3, #3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002042:	429a      	cmp	r2, r3
 8002044:	d12c      	bne.n	80020a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002050:	3b01      	subs	r3, #1
 8002052:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002054:	429a      	cmp	r2, r3
 8002056:	d123      	bne.n	80020a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002062:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002064:	429a      	cmp	r2, r3
 8002066:	d11b      	bne.n	80020a0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002072:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002074:	429a      	cmp	r2, r3
 8002076:	d113      	bne.n	80020a0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002082:	085b      	lsrs	r3, r3, #1
 8002084:	3b01      	subs	r3, #1
 8002086:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002088:	429a      	cmp	r2, r3
 800208a:	d109      	bne.n	80020a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	085b      	lsrs	r3, r3, #1
 8002098:	3b01      	subs	r3, #1
 800209a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800209c:	429a      	cmp	r2, r3
 800209e:	d071      	beq.n	8002184 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	2b0c      	cmp	r3, #12
 80020a4:	d068      	beq.n	8002178 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80020a6:	4b35      	ldr	r3, [pc, #212]	; (800217c <HAL_RCC_OscConfig+0x784>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d105      	bne.n	80020be <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80020b2:	4b32      	ldr	r3, [pc, #200]	; (800217c <HAL_RCC_OscConfig+0x784>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e0ac      	b.n	800221c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80020c2:	4b2e      	ldr	r3, [pc, #184]	; (800217c <HAL_RCC_OscConfig+0x784>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a2d      	ldr	r2, [pc, #180]	; (800217c <HAL_RCC_OscConfig+0x784>)
 80020c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020cc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020ce:	f7ff f8ff 	bl	80012d0 <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020d4:	e008      	b.n	80020e8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d6:	f7ff f8fb 	bl	80012d0 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e099      	b.n	800221c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020e8:	4b24      	ldr	r3, [pc, #144]	; (800217c <HAL_RCC_OscConfig+0x784>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1f0      	bne.n	80020d6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020f4:	4b21      	ldr	r3, [pc, #132]	; (800217c <HAL_RCC_OscConfig+0x784>)
 80020f6:	68da      	ldr	r2, [r3, #12]
 80020f8:	4b21      	ldr	r3, [pc, #132]	; (8002180 <HAL_RCC_OscConfig+0x788>)
 80020fa:	4013      	ands	r3, r2
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002104:	3a01      	subs	r2, #1
 8002106:	0112      	lsls	r2, r2, #4
 8002108:	4311      	orrs	r1, r2
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800210e:	0212      	lsls	r2, r2, #8
 8002110:	4311      	orrs	r1, r2
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002116:	0852      	lsrs	r2, r2, #1
 8002118:	3a01      	subs	r2, #1
 800211a:	0552      	lsls	r2, r2, #21
 800211c:	4311      	orrs	r1, r2
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002122:	0852      	lsrs	r2, r2, #1
 8002124:	3a01      	subs	r2, #1
 8002126:	0652      	lsls	r2, r2, #25
 8002128:	4311      	orrs	r1, r2
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800212e:	06d2      	lsls	r2, r2, #27
 8002130:	430a      	orrs	r2, r1
 8002132:	4912      	ldr	r1, [pc, #72]	; (800217c <HAL_RCC_OscConfig+0x784>)
 8002134:	4313      	orrs	r3, r2
 8002136:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002138:	4b10      	ldr	r3, [pc, #64]	; (800217c <HAL_RCC_OscConfig+0x784>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a0f      	ldr	r2, [pc, #60]	; (800217c <HAL_RCC_OscConfig+0x784>)
 800213e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002142:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002144:	4b0d      	ldr	r3, [pc, #52]	; (800217c <HAL_RCC_OscConfig+0x784>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	4a0c      	ldr	r2, [pc, #48]	; (800217c <HAL_RCC_OscConfig+0x784>)
 800214a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800214e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002150:	f7ff f8be 	bl	80012d0 <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002158:	f7ff f8ba 	bl	80012d0 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e058      	b.n	800221c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800216a:	4b04      	ldr	r3, [pc, #16]	; (800217c <HAL_RCC_OscConfig+0x784>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d0f0      	beq.n	8002158 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002176:	e050      	b.n	800221a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e04f      	b.n	800221c <HAL_RCC_OscConfig+0x824>
 800217c:	40021000 	.word	0x40021000
 8002180:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002184:	4b27      	ldr	r3, [pc, #156]	; (8002224 <HAL_RCC_OscConfig+0x82c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d144      	bne.n	800221a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002190:	4b24      	ldr	r3, [pc, #144]	; (8002224 <HAL_RCC_OscConfig+0x82c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a23      	ldr	r2, [pc, #140]	; (8002224 <HAL_RCC_OscConfig+0x82c>)
 8002196:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800219a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800219c:	4b21      	ldr	r3, [pc, #132]	; (8002224 <HAL_RCC_OscConfig+0x82c>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	4a20      	ldr	r2, [pc, #128]	; (8002224 <HAL_RCC_OscConfig+0x82c>)
 80021a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021a8:	f7ff f892 	bl	80012d0 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b0:	f7ff f88e 	bl	80012d0 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e02c      	b.n	800221c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021c2:	4b18      	ldr	r3, [pc, #96]	; (8002224 <HAL_RCC_OscConfig+0x82c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d0f0      	beq.n	80021b0 <HAL_RCC_OscConfig+0x7b8>
 80021ce:	e024      	b.n	800221a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	2b0c      	cmp	r3, #12
 80021d4:	d01f      	beq.n	8002216 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d6:	4b13      	ldr	r3, [pc, #76]	; (8002224 <HAL_RCC_OscConfig+0x82c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a12      	ldr	r2, [pc, #72]	; (8002224 <HAL_RCC_OscConfig+0x82c>)
 80021dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e2:	f7ff f875 	bl	80012d0 <HAL_GetTick>
 80021e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021e8:	e008      	b.n	80021fc <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ea:	f7ff f871 	bl	80012d0 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e00f      	b.n	800221c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021fc:	4b09      	ldr	r3, [pc, #36]	; (8002224 <HAL_RCC_OscConfig+0x82c>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1f0      	bne.n	80021ea <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002208:	4b06      	ldr	r3, [pc, #24]	; (8002224 <HAL_RCC_OscConfig+0x82c>)
 800220a:	68da      	ldr	r2, [r3, #12]
 800220c:	4905      	ldr	r1, [pc, #20]	; (8002224 <HAL_RCC_OscConfig+0x82c>)
 800220e:	4b06      	ldr	r3, [pc, #24]	; (8002228 <HAL_RCC_OscConfig+0x830>)
 8002210:	4013      	ands	r3, r2
 8002212:	60cb      	str	r3, [r1, #12]
 8002214:	e001      	b.n	800221a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e000      	b.n	800221c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3720      	adds	r7, #32
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40021000 	.word	0x40021000
 8002228:	feeefffc 	.word	0xfeeefffc

0800222c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002236:	2300      	movs	r3, #0
 8002238:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d101      	bne.n	8002244 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e11d      	b.n	8002480 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002244:	4b90      	ldr	r3, [pc, #576]	; (8002488 <HAL_RCC_ClockConfig+0x25c>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 030f 	and.w	r3, r3, #15
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	429a      	cmp	r2, r3
 8002250:	d910      	bls.n	8002274 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002252:	4b8d      	ldr	r3, [pc, #564]	; (8002488 <HAL_RCC_ClockConfig+0x25c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f023 020f 	bic.w	r2, r3, #15
 800225a:	498b      	ldr	r1, [pc, #556]	; (8002488 <HAL_RCC_ClockConfig+0x25c>)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	4313      	orrs	r3, r2
 8002260:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002262:	4b89      	ldr	r3, [pc, #548]	; (8002488 <HAL_RCC_ClockConfig+0x25c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	429a      	cmp	r2, r3
 800226e:	d001      	beq.n	8002274 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e105      	b.n	8002480 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d010      	beq.n	80022a2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	4b81      	ldr	r3, [pc, #516]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800228c:	429a      	cmp	r2, r3
 800228e:	d908      	bls.n	80022a2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002290:	4b7e      	ldr	r3, [pc, #504]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	497b      	ldr	r1, [pc, #492]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d079      	beq.n	80023a2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	2b03      	cmp	r3, #3
 80022b4:	d11e      	bne.n	80022f4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022b6:	4b75      	ldr	r3, [pc, #468]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e0dc      	b.n	8002480 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80022c6:	f000 f9d1 	bl	800266c <RCC_GetSysClockFreqFromPLLSource>
 80022ca:	4603      	mov	r3, r0
 80022cc:	4a70      	ldr	r2, [pc, #448]	; (8002490 <HAL_RCC_ClockConfig+0x264>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d946      	bls.n	8002360 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80022d2:	4b6e      	ldr	r3, [pc, #440]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d140      	bne.n	8002360 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80022de:	4b6b      	ldr	r3, [pc, #428]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022e6:	4a69      	ldr	r2, [pc, #420]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 80022e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022ec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80022ee:	2380      	movs	r3, #128	; 0x80
 80022f0:	617b      	str	r3, [r7, #20]
 80022f2:	e035      	b.n	8002360 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d107      	bne.n	800230c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022fc:	4b63      	ldr	r3, [pc, #396]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d115      	bne.n	8002334 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e0b9      	b.n	8002480 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d107      	bne.n	8002324 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002314:	4b5d      	ldr	r3, [pc, #372]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d109      	bne.n	8002334 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e0ad      	b.n	8002480 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002324:	4b59      	ldr	r3, [pc, #356]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800232c:	2b00      	cmp	r3, #0
 800232e:	d101      	bne.n	8002334 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e0a5      	b.n	8002480 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002334:	f000 f8b4 	bl	80024a0 <HAL_RCC_GetSysClockFreq>
 8002338:	4603      	mov	r3, r0
 800233a:	4a55      	ldr	r2, [pc, #340]	; (8002490 <HAL_RCC_ClockConfig+0x264>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d90f      	bls.n	8002360 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002340:	4b52      	ldr	r3, [pc, #328]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d109      	bne.n	8002360 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800234c:	4b4f      	ldr	r3, [pc, #316]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002354:	4a4d      	ldr	r2, [pc, #308]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 8002356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800235a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800235c:	2380      	movs	r3, #128	; 0x80
 800235e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002360:	4b4a      	ldr	r3, [pc, #296]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f023 0203 	bic.w	r2, r3, #3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	4947      	ldr	r1, [pc, #284]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 800236e:	4313      	orrs	r3, r2
 8002370:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002372:	f7fe ffad 	bl	80012d0 <HAL_GetTick>
 8002376:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002378:	e00a      	b.n	8002390 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800237a:	f7fe ffa9 	bl	80012d0 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	f241 3288 	movw	r2, #5000	; 0x1388
 8002388:	4293      	cmp	r3, r2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e077      	b.n	8002480 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002390:	4b3e      	ldr	r3, [pc, #248]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f003 020c 	and.w	r2, r3, #12
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	429a      	cmp	r2, r3
 80023a0:	d1eb      	bne.n	800237a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	2b80      	cmp	r3, #128	; 0x80
 80023a6:	d105      	bne.n	80023b4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80023a8:	4b38      	ldr	r3, [pc, #224]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	4a37      	ldr	r2, [pc, #220]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 80023ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023b2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d010      	beq.n	80023e2 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	4b31      	ldr	r3, [pc, #196]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d208      	bcs.n	80023e2 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023d0:	4b2e      	ldr	r3, [pc, #184]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	492b      	ldr	r1, [pc, #172]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023e2:	4b29      	ldr	r3, [pc, #164]	; (8002488 <HAL_RCC_ClockConfig+0x25c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d210      	bcs.n	8002412 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023f0:	4b25      	ldr	r3, [pc, #148]	; (8002488 <HAL_RCC_ClockConfig+0x25c>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f023 020f 	bic.w	r2, r3, #15
 80023f8:	4923      	ldr	r1, [pc, #140]	; (8002488 <HAL_RCC_ClockConfig+0x25c>)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002400:	4b21      	ldr	r3, [pc, #132]	; (8002488 <HAL_RCC_ClockConfig+0x25c>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 030f 	and.w	r3, r3, #15
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	429a      	cmp	r2, r3
 800240c:	d001      	beq.n	8002412 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e036      	b.n	8002480 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0304 	and.w	r3, r3, #4
 800241a:	2b00      	cmp	r3, #0
 800241c:	d008      	beq.n	8002430 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800241e:	4b1b      	ldr	r3, [pc, #108]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	4918      	ldr	r1, [pc, #96]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 800242c:	4313      	orrs	r3, r2
 800242e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0308 	and.w	r3, r3, #8
 8002438:	2b00      	cmp	r3, #0
 800243a:	d009      	beq.n	8002450 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800243c:	4b13      	ldr	r3, [pc, #76]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	4910      	ldr	r1, [pc, #64]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 800244c:	4313      	orrs	r3, r2
 800244e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002450:	f000 f826 	bl	80024a0 <HAL_RCC_GetSysClockFreq>
 8002454:	4602      	mov	r2, r0
 8002456:	4b0d      	ldr	r3, [pc, #52]	; (800248c <HAL_RCC_ClockConfig+0x260>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	091b      	lsrs	r3, r3, #4
 800245c:	f003 030f 	and.w	r3, r3, #15
 8002460:	490c      	ldr	r1, [pc, #48]	; (8002494 <HAL_RCC_ClockConfig+0x268>)
 8002462:	5ccb      	ldrb	r3, [r1, r3]
 8002464:	f003 031f 	and.w	r3, r3, #31
 8002468:	fa22 f303 	lsr.w	r3, r2, r3
 800246c:	4a0a      	ldr	r2, [pc, #40]	; (8002498 <HAL_RCC_ClockConfig+0x26c>)
 800246e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002470:	4b0a      	ldr	r3, [pc, #40]	; (800249c <HAL_RCC_ClockConfig+0x270>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4618      	mov	r0, r3
 8002476:	f7fe fedb 	bl	8001230 <HAL_InitTick>
 800247a:	4603      	mov	r3, r0
 800247c:	73fb      	strb	r3, [r7, #15]

  return status;
 800247e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002480:	4618      	mov	r0, r3
 8002482:	3718      	adds	r7, #24
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40022000 	.word	0x40022000
 800248c:	40021000 	.word	0x40021000
 8002490:	04c4b400 	.word	0x04c4b400
 8002494:	08003800 	.word	0x08003800
 8002498:	20000068 	.word	0x20000068
 800249c:	2000006c 	.word	0x2000006c

080024a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b089      	sub	sp, #36	; 0x24
 80024a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80024a6:	2300      	movs	r3, #0
 80024a8:	61fb      	str	r3, [r7, #28]
 80024aa:	2300      	movs	r3, #0
 80024ac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024ae:	4b3e      	ldr	r3, [pc, #248]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 030c 	and.w	r3, r3, #12
 80024b6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024b8:	4b3b      	ldr	r3, [pc, #236]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	f003 0303 	and.w	r3, r3, #3
 80024c0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d005      	beq.n	80024d4 <HAL_RCC_GetSysClockFreq+0x34>
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	2b0c      	cmp	r3, #12
 80024cc:	d121      	bne.n	8002512 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d11e      	bne.n	8002512 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80024d4:	4b34      	ldr	r3, [pc, #208]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0308 	and.w	r3, r3, #8
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d107      	bne.n	80024f0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80024e0:	4b31      	ldr	r3, [pc, #196]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80024e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024e6:	0a1b      	lsrs	r3, r3, #8
 80024e8:	f003 030f 	and.w	r3, r3, #15
 80024ec:	61fb      	str	r3, [r7, #28]
 80024ee:	e005      	b.n	80024fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80024f0:	4b2d      	ldr	r3, [pc, #180]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	091b      	lsrs	r3, r3, #4
 80024f6:	f003 030f 	and.w	r3, r3, #15
 80024fa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80024fc:	4a2b      	ldr	r2, [pc, #172]	; (80025ac <HAL_RCC_GetSysClockFreq+0x10c>)
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002504:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d10d      	bne.n	8002528 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002510:	e00a      	b.n	8002528 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	2b04      	cmp	r3, #4
 8002516:	d102      	bne.n	800251e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002518:	4b25      	ldr	r3, [pc, #148]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800251a:	61bb      	str	r3, [r7, #24]
 800251c:	e004      	b.n	8002528 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	2b08      	cmp	r3, #8
 8002522:	d101      	bne.n	8002528 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002524:	4b23      	ldr	r3, [pc, #140]	; (80025b4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002526:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	2b0c      	cmp	r3, #12
 800252c:	d134      	bne.n	8002598 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800252e:	4b1e      	ldr	r3, [pc, #120]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	f003 0303 	and.w	r3, r3, #3
 8002536:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	2b02      	cmp	r3, #2
 800253c:	d003      	beq.n	8002546 <HAL_RCC_GetSysClockFreq+0xa6>
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	2b03      	cmp	r3, #3
 8002542:	d003      	beq.n	800254c <HAL_RCC_GetSysClockFreq+0xac>
 8002544:	e005      	b.n	8002552 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002546:	4b1a      	ldr	r3, [pc, #104]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002548:	617b      	str	r3, [r7, #20]
      break;
 800254a:	e005      	b.n	8002558 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800254c:	4b19      	ldr	r3, [pc, #100]	; (80025b4 <HAL_RCC_GetSysClockFreq+0x114>)
 800254e:	617b      	str	r3, [r7, #20]
      break;
 8002550:	e002      	b.n	8002558 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	617b      	str	r3, [r7, #20]
      break;
 8002556:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002558:	4b13      	ldr	r3, [pc, #76]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	091b      	lsrs	r3, r3, #4
 800255e:	f003 030f 	and.w	r3, r3, #15
 8002562:	3301      	adds	r3, #1
 8002564:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002566:	4b10      	ldr	r3, [pc, #64]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	0a1b      	lsrs	r3, r3, #8
 800256c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002570:	697a      	ldr	r2, [r7, #20]
 8002572:	fb03 f202 	mul.w	r2, r3, r2
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	fbb2 f3f3 	udiv	r3, r2, r3
 800257c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800257e:	4b0a      	ldr	r3, [pc, #40]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	0e5b      	lsrs	r3, r3, #25
 8002584:	f003 0303 	and.w	r3, r3, #3
 8002588:	3301      	adds	r3, #1
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	fbb2 f3f3 	udiv	r3, r2, r3
 8002596:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002598:	69bb      	ldr	r3, [r7, #24]
}
 800259a:	4618      	mov	r0, r3
 800259c:	3724      	adds	r7, #36	; 0x24
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	40021000 	.word	0x40021000
 80025ac:	08003810 	.word	0x08003810
 80025b0:	00f42400 	.word	0x00f42400
 80025b4:	007a1200 	.word	0x007a1200

080025b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80025c0:	2300      	movs	r3, #0
 80025c2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80025c4:	4b27      	ldr	r3, [pc, #156]	; (8002664 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80025c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d003      	beq.n	80025d8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80025d0:	f7ff f93e 	bl	8001850 <HAL_PWREx_GetVoltageRange>
 80025d4:	6178      	str	r0, [r7, #20]
 80025d6:	e014      	b.n	8002602 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80025d8:	4b22      	ldr	r3, [pc, #136]	; (8002664 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80025da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025dc:	4a21      	ldr	r2, [pc, #132]	; (8002664 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80025de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025e2:	6593      	str	r3, [r2, #88]	; 0x58
 80025e4:	4b1f      	ldr	r3, [pc, #124]	; (8002664 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80025e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80025f0:	f7ff f92e 	bl	8001850 <HAL_PWREx_GetVoltageRange>
 80025f4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80025f6:	4b1b      	ldr	r3, [pc, #108]	; (8002664 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80025f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fa:	4a1a      	ldr	r2, [pc, #104]	; (8002664 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80025fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002600:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002608:	d10b      	bne.n	8002622 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2b80      	cmp	r3, #128	; 0x80
 800260e:	d913      	bls.n	8002638 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2ba0      	cmp	r3, #160	; 0xa0
 8002614:	d902      	bls.n	800261c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002616:	2302      	movs	r3, #2
 8002618:	613b      	str	r3, [r7, #16]
 800261a:	e00d      	b.n	8002638 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800261c:	2301      	movs	r3, #1
 800261e:	613b      	str	r3, [r7, #16]
 8002620:	e00a      	b.n	8002638 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b7f      	cmp	r3, #127	; 0x7f
 8002626:	d902      	bls.n	800262e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002628:	2302      	movs	r3, #2
 800262a:	613b      	str	r3, [r7, #16]
 800262c:	e004      	b.n	8002638 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b70      	cmp	r3, #112	; 0x70
 8002632:	d101      	bne.n	8002638 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002634:	2301      	movs	r3, #1
 8002636:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002638:	4b0b      	ldr	r3, [pc, #44]	; (8002668 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f023 020f 	bic.w	r2, r3, #15
 8002640:	4909      	ldr	r1, [pc, #36]	; (8002668 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	4313      	orrs	r3, r2
 8002646:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002648:	4b07      	ldr	r3, [pc, #28]	; (8002668 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 030f 	and.w	r3, r3, #15
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	429a      	cmp	r2, r3
 8002654:	d001      	beq.n	800265a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e000      	b.n	800265c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3718      	adds	r7, #24
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40021000 	.word	0x40021000
 8002668:	40022000 	.word	0x40022000

0800266c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800266c:	b480      	push	{r7}
 800266e:	b087      	sub	sp, #28
 8002670:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002672:	4b2d      	ldr	r3, [pc, #180]	; (8002728 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2b03      	cmp	r3, #3
 8002680:	d00b      	beq.n	800269a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2b03      	cmp	r3, #3
 8002686:	d825      	bhi.n	80026d4 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d008      	beq.n	80026a0 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2b02      	cmp	r3, #2
 8002692:	d11f      	bne.n	80026d4 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002694:	4b25      	ldr	r3, [pc, #148]	; (800272c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002696:	613b      	str	r3, [r7, #16]
    break;
 8002698:	e01f      	b.n	80026da <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800269a:	4b25      	ldr	r3, [pc, #148]	; (8002730 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800269c:	613b      	str	r3, [r7, #16]
    break;
 800269e:	e01c      	b.n	80026da <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80026a0:	4b21      	ldr	r3, [pc, #132]	; (8002728 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0308 	and.w	r3, r3, #8
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d107      	bne.n	80026bc <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80026ac:	4b1e      	ldr	r3, [pc, #120]	; (8002728 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80026ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026b2:	0a1b      	lsrs	r3, r3, #8
 80026b4:	f003 030f 	and.w	r3, r3, #15
 80026b8:	617b      	str	r3, [r7, #20]
 80026ba:	e005      	b.n	80026c8 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80026bc:	4b1a      	ldr	r3, [pc, #104]	; (8002728 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	091b      	lsrs	r3, r3, #4
 80026c2:	f003 030f 	and.w	r3, r3, #15
 80026c6:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80026c8:	4a1a      	ldr	r2, [pc, #104]	; (8002734 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d0:	613b      	str	r3, [r7, #16]
    break;
 80026d2:	e002      	b.n	80026da <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80026d4:	2300      	movs	r3, #0
 80026d6:	613b      	str	r3, [r7, #16]
    break;
 80026d8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026da:	4b13      	ldr	r3, [pc, #76]	; (8002728 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	091b      	lsrs	r3, r3, #4
 80026e0:	f003 030f 	and.w	r3, r3, #15
 80026e4:	3301      	adds	r3, #1
 80026e6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80026e8:	4b0f      	ldr	r3, [pc, #60]	; (8002728 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	0a1b      	lsrs	r3, r3, #8
 80026ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	fb03 f202 	mul.w	r2, r3, r2
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80026fe:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002700:	4b09      	ldr	r3, [pc, #36]	; (8002728 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	0e5b      	lsrs	r3, r3, #25
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	3301      	adds	r3, #1
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	fbb2 f3f3 	udiv	r3, r2, r3
 8002718:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800271a:	683b      	ldr	r3, [r7, #0]
}
 800271c:	4618      	mov	r0, r3
 800271e:	371c      	adds	r7, #28
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	40021000 	.word	0x40021000
 800272c:	00f42400 	.word	0x00f42400
 8002730:	007a1200 	.word	0x007a1200
 8002734:	08003810 	.word	0x08003810

08002738 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e095      	b.n	8002876 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274e:	2b00      	cmp	r3, #0
 8002750:	d108      	bne.n	8002764 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800275a:	d009      	beq.n	8002770 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	61da      	str	r2, [r3, #28]
 8002762:	e005      	b.n	8002770 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d106      	bne.n	8002790 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7fe fc90 	bl	80010b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2202      	movs	r2, #2
 8002794:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027a6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80027b0:	d902      	bls.n	80027b8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80027b2:	2300      	movs	r3, #0
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	e002      	b.n	80027be <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80027b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027bc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80027c6:	d007      	beq.n	80027d8 <HAL_SPI_Init+0xa0>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80027d0:	d002      	beq.n	80027d8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80027e8:	431a      	orrs	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	431a      	orrs	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	431a      	orrs	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002810:	431a      	orrs	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800281a:	ea42 0103 	orr.w	r1, r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002822:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	430a      	orrs	r2, r1
 800282c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	0c1b      	lsrs	r3, r3, #16
 8002834:	f003 0204 	and.w	r2, r3, #4
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283c:	f003 0310 	and.w	r3, r3, #16
 8002840:	431a      	orrs	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002846:	f003 0308 	and.w	r3, r3, #8
 800284a:	431a      	orrs	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002854:	ea42 0103 	orr.w	r1, r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	430a      	orrs	r2, r1
 8002864:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b088      	sub	sp, #32
 8002882:	af00      	add	r7, sp, #0
 8002884:	60f8      	str	r0, [r7, #12]
 8002886:	60b9      	str	r1, [r7, #8]
 8002888:	603b      	str	r3, [r7, #0]
 800288a:	4613      	mov	r3, r2
 800288c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800288e:	2300      	movs	r3, #0
 8002890:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002898:	2b01      	cmp	r3, #1
 800289a:	d101      	bne.n	80028a0 <HAL_SPI_Transmit+0x22>
 800289c:	2302      	movs	r3, #2
 800289e:	e15f      	b.n	8002b60 <HAL_SPI_Transmit+0x2e2>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028a8:	f7fe fd12 	bl	80012d0 <HAL_GetTick>
 80028ac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80028ae:	88fb      	ldrh	r3, [r7, #6]
 80028b0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d002      	beq.n	80028c4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80028be:	2302      	movs	r3, #2
 80028c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80028c2:	e148      	b.n	8002b56 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d002      	beq.n	80028d0 <HAL_SPI_Transmit+0x52>
 80028ca:	88fb      	ldrh	r3, [r7, #6]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d102      	bne.n	80028d6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80028d4:	e13f      	b.n	8002b56 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2203      	movs	r2, #3
 80028da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2200      	movs	r2, #0
 80028e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	88fa      	ldrh	r2, [r7, #6]
 80028ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	88fa      	ldrh	r2, [r7, #6]
 80028f4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2200      	movs	r2, #0
 80028fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2200      	movs	r2, #0
 8002910:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002920:	d10f      	bne.n	8002942 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002930:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002940:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800294c:	2b40      	cmp	r3, #64	; 0x40
 800294e:	d007      	beq.n	8002960 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800295e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002968:	d94f      	bls.n	8002a0a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d002      	beq.n	8002978 <HAL_SPI_Transmit+0xfa>
 8002972:	8afb      	ldrh	r3, [r7, #22]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d142      	bne.n	80029fe <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800297c:	881a      	ldrh	r2, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002988:	1c9a      	adds	r2, r3, #2
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002992:	b29b      	uxth	r3, r3
 8002994:	3b01      	subs	r3, #1
 8002996:	b29a      	uxth	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800299c:	e02f      	b.n	80029fe <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d112      	bne.n	80029d2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b0:	881a      	ldrh	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029bc:	1c9a      	adds	r2, r3, #2
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	3b01      	subs	r3, #1
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80029d0:	e015      	b.n	80029fe <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029d2:	f7fe fc7d 	bl	80012d0 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d803      	bhi.n	80029ea <HAL_SPI_Transmit+0x16c>
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e8:	d102      	bne.n	80029f0 <HAL_SPI_Transmit+0x172>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d106      	bne.n	80029fe <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80029fc:	e0ab      	b.n	8002b56 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1ca      	bne.n	800299e <HAL_SPI_Transmit+0x120>
 8002a08:	e080      	b.n	8002b0c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d002      	beq.n	8002a18 <HAL_SPI_Transmit+0x19a>
 8002a12:	8afb      	ldrh	r3, [r7, #22]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d174      	bne.n	8002b02 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d912      	bls.n	8002a48 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a26:	881a      	ldrh	r2, [r3, #0]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a32:	1c9a      	adds	r2, r3, #2
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	3b02      	subs	r3, #2
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a46:	e05c      	b.n	8002b02 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	330c      	adds	r3, #12
 8002a52:	7812      	ldrb	r2, [r2, #0]
 8002a54:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a5a:	1c5a      	adds	r2, r3, #1
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	3b01      	subs	r3, #1
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002a6e:	e048      	b.n	8002b02 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d12b      	bne.n	8002ad6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d912      	bls.n	8002aae <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a8c:	881a      	ldrh	r2, [r3, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a98:	1c9a      	adds	r2, r3, #2
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	3b02      	subs	r3, #2
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002aac:	e029      	b.n	8002b02 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	330c      	adds	r3, #12
 8002ab8:	7812      	ldrb	r2, [r2, #0]
 8002aba:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac0:	1c5a      	adds	r2, r3, #1
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	3b01      	subs	r3, #1
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ad4:	e015      	b.n	8002b02 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ad6:	f7fe fbfb 	bl	80012d0 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d803      	bhi.n	8002aee <HAL_SPI_Transmit+0x270>
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aec:	d102      	bne.n	8002af4 <HAL_SPI_Transmit+0x276>
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d106      	bne.n	8002b02 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002b00:	e029      	b.n	8002b56 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d1b1      	bne.n	8002a70 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	6839      	ldr	r1, [r7, #0]
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f000 fb69 	bl	80031e8 <SPI_EndRxTxTransaction>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d002      	beq.n	8002b22 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10a      	bne.n	8002b40 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	613b      	str	r3, [r7, #16]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	613b      	str	r3, [r7, #16]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	613b      	str	r3, [r7, #16]
 8002b3e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d002      	beq.n	8002b4e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	77fb      	strb	r3, [r7, #31]
 8002b4c:	e003      	b.n	8002b56 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002b5e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3720      	adds	r7, #32
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b08a      	sub	sp, #40	; 0x28
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
 8002b74:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002b76:	2301      	movs	r3, #1
 8002b78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d101      	bne.n	8002b8e <HAL_SPI_TransmitReceive+0x26>
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	e20a      	b.n	8002fa4 <HAL_SPI_TransmitReceive+0x43c>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b96:	f7fe fb9b 	bl	80012d0 <HAL_GetTick>
 8002b9a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ba2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002baa:	887b      	ldrh	r3, [r7, #2]
 8002bac:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002bae:	887b      	ldrh	r3, [r7, #2]
 8002bb0:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002bb2:	7efb      	ldrb	r3, [r7, #27]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d00e      	beq.n	8002bd6 <HAL_SPI_TransmitReceive+0x6e>
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bbe:	d106      	bne.n	8002bce <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d102      	bne.n	8002bce <HAL_SPI_TransmitReceive+0x66>
 8002bc8:	7efb      	ldrb	r3, [r7, #27]
 8002bca:	2b04      	cmp	r3, #4
 8002bcc:	d003      	beq.n	8002bd6 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002bce:	2302      	movs	r3, #2
 8002bd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002bd4:	e1e0      	b.n	8002f98 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d005      	beq.n	8002be8 <HAL_SPI_TransmitReceive+0x80>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d002      	beq.n	8002be8 <HAL_SPI_TransmitReceive+0x80>
 8002be2:	887b      	ldrh	r3, [r7, #2]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d103      	bne.n	8002bf0 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002bee:	e1d3      	b.n	8002f98 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2b04      	cmp	r3, #4
 8002bfa:	d003      	beq.n	8002c04 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2205      	movs	r2, #5
 8002c00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	887a      	ldrh	r2, [r7, #2]
 8002c14:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	887a      	ldrh	r2, [r7, #2]
 8002c1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	68ba      	ldr	r2, [r7, #8]
 8002c24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	887a      	ldrh	r2, [r7, #2]
 8002c2a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	887a      	ldrh	r2, [r7, #2]
 8002c30:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c46:	d802      	bhi.n	8002c4e <HAL_SPI_TransmitReceive+0xe6>
 8002c48:	8a3b      	ldrh	r3, [r7, #16]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d908      	bls.n	8002c60 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c5c:	605a      	str	r2, [r3, #4]
 8002c5e:	e007      	b.n	8002c70 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c6e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c7a:	2b40      	cmp	r3, #64	; 0x40
 8002c7c:	d007      	beq.n	8002c8e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c8c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c96:	f240 8081 	bls.w	8002d9c <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d002      	beq.n	8002ca8 <HAL_SPI_TransmitReceive+0x140>
 8002ca2:	8a7b      	ldrh	r3, [r7, #18]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d16d      	bne.n	8002d84 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cac:	881a      	ldrh	r2, [r3, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb8:	1c9a      	adds	r2, r3, #2
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ccc:	e05a      	b.n	8002d84 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d11b      	bne.n	8002d14 <HAL_SPI_TransmitReceive+0x1ac>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d016      	beq.n	8002d14 <HAL_SPI_TransmitReceive+0x1ac>
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d113      	bne.n	8002d14 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf0:	881a      	ldrh	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfc:	1c9a      	adds	r2, r3, #2
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d10:	2300      	movs	r3, #0
 8002d12:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d11c      	bne.n	8002d5c <HAL_SPI_TransmitReceive+0x1f4>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d016      	beq.n	8002d5c <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68da      	ldr	r2, [r3, #12]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d38:	b292      	uxth	r2, r2
 8002d3a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d40:	1c9a      	adds	r2, r3, #2
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002d5c:	f7fe fab8 	bl	80012d0 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d80b      	bhi.n	8002d84 <HAL_SPI_TransmitReceive+0x21c>
 8002d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d72:	d007      	beq.n	8002d84 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8002d82:	e109      	b.n	8002f98 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d19f      	bne.n	8002cce <HAL_SPI_TransmitReceive+0x166>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d199      	bne.n	8002cce <HAL_SPI_TransmitReceive+0x166>
 8002d9a:	e0e3      	b.n	8002f64 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d003      	beq.n	8002dac <HAL_SPI_TransmitReceive+0x244>
 8002da4:	8a7b      	ldrh	r3, [r7, #18]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	f040 80cf 	bne.w	8002f4a <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d912      	bls.n	8002ddc <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dba:	881a      	ldrh	r2, [r3, #0]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc6:	1c9a      	adds	r2, r3, #2
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	3b02      	subs	r3, #2
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002dda:	e0b6      	b.n	8002f4a <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	330c      	adds	r3, #12
 8002de6:	7812      	ldrb	r2, [r2, #0]
 8002de8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dee:	1c5a      	adds	r2, r3, #1
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e02:	e0a2      	b.n	8002f4a <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d134      	bne.n	8002e7c <HAL_SPI_TransmitReceive+0x314>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d02f      	beq.n	8002e7c <HAL_SPI_TransmitReceive+0x314>
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d12c      	bne.n	8002e7c <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d912      	bls.n	8002e52 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e30:	881a      	ldrh	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3c:	1c9a      	adds	r2, r3, #2
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	3b02      	subs	r3, #2
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e50:	e012      	b.n	8002e78 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	330c      	adds	r3, #12
 8002e5c:	7812      	ldrb	r2, [r2, #0]
 8002e5e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e64:	1c5a      	adds	r2, r3, #1
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	3b01      	subs	r3, #1
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d148      	bne.n	8002f1c <HAL_SPI_TransmitReceive+0x3b4>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d042      	beq.n	8002f1c <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d923      	bls.n	8002eea <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68da      	ldr	r2, [r3, #12]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eac:	b292      	uxth	r2, r2
 8002eae:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb4:	1c9a      	adds	r2, r3, #2
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	3b02      	subs	r3, #2
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d81f      	bhi.n	8002f18 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ee6:	605a      	str	r2, [r3, #4]
 8002ee8:	e016      	b.n	8002f18 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f103 020c 	add.w	r2, r3, #12
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	7812      	ldrb	r2, [r2, #0]
 8002ef8:	b2d2      	uxtb	r2, r2
 8002efa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f00:	1c5a      	adds	r2, r3, #1
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002f1c:	f7fe f9d8 	bl	80012d0 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d803      	bhi.n	8002f34 <HAL_SPI_TransmitReceive+0x3cc>
 8002f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f32:	d102      	bne.n	8002f3a <HAL_SPI_TransmitReceive+0x3d2>
 8002f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d107      	bne.n	8002f4a <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8002f48:	e026      	b.n	8002f98 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f47f af57 	bne.w	8002e04 <HAL_SPI_TransmitReceive+0x29c>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	f47f af50 	bne.w	8002e04 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f64:	69fa      	ldr	r2, [r7, #28]
 8002f66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f000 f93d 	bl	80031e8 <SPI_EndRxTxTransaction>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d005      	beq.n	8002f80 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2220      	movs	r2, #32
 8002f7e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d003      	beq.n	8002f90 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f8e:	e003      	b.n	8002f98 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002fa0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3728      	adds	r7, #40	; 0x28
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b088      	sub	sp, #32
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	603b      	str	r3, [r7, #0]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002fbc:	f7fe f988 	bl	80012d0 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc4:	1a9b      	subs	r3, r3, r2
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	4413      	add	r3, r2
 8002fca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002fcc:	f7fe f980 	bl	80012d0 <HAL_GetTick>
 8002fd0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002fd2:	4b39      	ldr	r3, [pc, #228]	; (80030b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	015b      	lsls	r3, r3, #5
 8002fd8:	0d1b      	lsrs	r3, r3, #20
 8002fda:	69fa      	ldr	r2, [r7, #28]
 8002fdc:	fb02 f303 	mul.w	r3, r2, r3
 8002fe0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002fe2:	e054      	b.n	800308e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fea:	d050      	beq.n	800308e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002fec:	f7fe f970 	bl	80012d0 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	69fa      	ldr	r2, [r7, #28]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d902      	bls.n	8003002 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d13d      	bne.n	800307e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003010:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800301a:	d111      	bne.n	8003040 <SPI_WaitFlagStateUntilTimeout+0x94>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003024:	d004      	beq.n	8003030 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800302e:	d107      	bne.n	8003040 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800303e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003044:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003048:	d10f      	bne.n	800306a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003068:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e017      	b.n	80030ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003084:	2300      	movs	r3, #0
 8003086:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	3b01      	subs	r3, #1
 800308c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	4013      	ands	r3, r2
 8003098:	68ba      	ldr	r2, [r7, #8]
 800309a:	429a      	cmp	r2, r3
 800309c:	bf0c      	ite	eq
 800309e:	2301      	moveq	r3, #1
 80030a0:	2300      	movne	r3, #0
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	461a      	mov	r2, r3
 80030a6:	79fb      	ldrb	r3, [r7, #7]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d19b      	bne.n	8002fe4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3720      	adds	r7, #32
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	20000068 	.word	0x20000068

080030bc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b08a      	sub	sp, #40	; 0x28
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
 80030c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80030ca:	2300      	movs	r3, #0
 80030cc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80030ce:	f7fe f8ff 	bl	80012d0 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d6:	1a9b      	subs	r3, r3, r2
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	4413      	add	r3, r2
 80030dc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80030de:	f7fe f8f7 	bl	80012d0 <HAL_GetTick>
 80030e2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	330c      	adds	r3, #12
 80030ea:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80030ec:	4b3d      	ldr	r3, [pc, #244]	; (80031e4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	4613      	mov	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4413      	add	r3, r2
 80030f6:	00da      	lsls	r2, r3, #3
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	0d1b      	lsrs	r3, r3, #20
 80030fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030fe:	fb02 f303 	mul.w	r3, r2, r3
 8003102:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003104:	e060      	b.n	80031c8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800310c:	d107      	bne.n	800311e <SPI_WaitFifoStateUntilTimeout+0x62>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d104      	bne.n	800311e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	b2db      	uxtb	r3, r3
 800311a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800311c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003124:	d050      	beq.n	80031c8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003126:	f7fe f8d3 	bl	80012d0 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	6a3b      	ldr	r3, [r7, #32]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003132:	429a      	cmp	r2, r3
 8003134:	d902      	bls.n	800313c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	2b00      	cmp	r3, #0
 800313a:	d13d      	bne.n	80031b8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800314a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003154:	d111      	bne.n	800317a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800315e:	d004      	beq.n	800316a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003168:	d107      	bne.n	800317a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003178:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003182:	d10f      	bne.n	80031a4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003192:	601a      	str	r2, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031a2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e010      	b.n	80031da <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80031be:	2300      	movs	r3, #0
 80031c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	3b01      	subs	r3, #1
 80031c6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689a      	ldr	r2, [r3, #8]
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	4013      	ands	r3, r2
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d196      	bne.n	8003106 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3728      	adds	r7, #40	; 0x28
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	20000068 	.word	0x20000068

080031e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af02      	add	r7, sp, #8
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	9300      	str	r3, [sp, #0]
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f7ff ff5b 	bl	80030bc <SPI_WaitFifoStateUntilTimeout>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d007      	beq.n	800321c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003210:	f043 0220 	orr.w	r2, r3, #32
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e027      	b.n	800326c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	2200      	movs	r2, #0
 8003224:	2180      	movs	r1, #128	; 0x80
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	f7ff fec0 	bl	8002fac <SPI_WaitFlagStateUntilTimeout>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d007      	beq.n	8003242 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003236:	f043 0220 	orr.w	r2, r3, #32
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e014      	b.n	800326c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	9300      	str	r3, [sp, #0]
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	2200      	movs	r2, #0
 800324a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f7ff ff34 	bl	80030bc <SPI_WaitFifoStateUntilTimeout>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d007      	beq.n	800326a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800325e:	f043 0220 	orr.w	r2, r3, #32
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e000      	b.n	800326c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <memset>:
 8003274:	4402      	add	r2, r0
 8003276:	4603      	mov	r3, r0
 8003278:	4293      	cmp	r3, r2
 800327a:	d100      	bne.n	800327e <memset+0xa>
 800327c:	4770      	bx	lr
 800327e:	f803 1b01 	strb.w	r1, [r3], #1
 8003282:	e7f9      	b.n	8003278 <memset+0x4>

08003284 <__libc_init_array>:
 8003284:	b570      	push	{r4, r5, r6, lr}
 8003286:	4d0d      	ldr	r5, [pc, #52]	; (80032bc <__libc_init_array+0x38>)
 8003288:	4c0d      	ldr	r4, [pc, #52]	; (80032c0 <__libc_init_array+0x3c>)
 800328a:	1b64      	subs	r4, r4, r5
 800328c:	10a4      	asrs	r4, r4, #2
 800328e:	2600      	movs	r6, #0
 8003290:	42a6      	cmp	r6, r4
 8003292:	d109      	bne.n	80032a8 <__libc_init_array+0x24>
 8003294:	4d0b      	ldr	r5, [pc, #44]	; (80032c4 <__libc_init_array+0x40>)
 8003296:	4c0c      	ldr	r4, [pc, #48]	; (80032c8 <__libc_init_array+0x44>)
 8003298:	f000 f818 	bl	80032cc <_init>
 800329c:	1b64      	subs	r4, r4, r5
 800329e:	10a4      	asrs	r4, r4, #2
 80032a0:	2600      	movs	r6, #0
 80032a2:	42a6      	cmp	r6, r4
 80032a4:	d105      	bne.n	80032b2 <__libc_init_array+0x2e>
 80032a6:	bd70      	pop	{r4, r5, r6, pc}
 80032a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80032ac:	4798      	blx	r3
 80032ae:	3601      	adds	r6, #1
 80032b0:	e7ee      	b.n	8003290 <__libc_init_array+0xc>
 80032b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80032b6:	4798      	blx	r3
 80032b8:	3601      	adds	r6, #1
 80032ba:	e7f2      	b.n	80032a2 <__libc_init_array+0x1e>
 80032bc:	08003840 	.word	0x08003840
 80032c0:	08003840 	.word	0x08003840
 80032c4:	08003840 	.word	0x08003840
 80032c8:	08003844 	.word	0x08003844

080032cc <_init>:
 80032cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ce:	bf00      	nop
 80032d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032d2:	bc08      	pop	{r3}
 80032d4:	469e      	mov	lr, r3
 80032d6:	4770      	bx	lr

080032d8 <_fini>:
 80032d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032da:	bf00      	nop
 80032dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032de:	bc08      	pop	{r3}
 80032e0:	469e      	mov	lr, r3
 80032e2:	4770      	bx	lr
