
XBeeTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041e0  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800439c  0800439c  0001439c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800440c  0800440c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800440c  0800440c  0001440c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004414  08004414  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004414  08004414  00014414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004418  08004418  00014418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800441c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  2000000c  08004428  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  08004428  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d952  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d97  00000000  00000000  0002d9d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a68  00000000  00000000  0002f768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000804  00000000  00000000  000301d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000286b2  00000000  00000000  000309d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d4cf  00000000  00000000  00059086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f9618  00000000  00000000  00066555  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000029fc  00000000  00000000  0015fb70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  0016256c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08004384 	.word	0x08004384

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08004384 	.word	0x08004384

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b970 	b.w	80004f4 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	460d      	mov	r5, r1
 8000234:	4604      	mov	r4, r0
 8000236:	460f      	mov	r7, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4694      	mov	ip, r2
 8000240:	d965      	bls.n	800030e <__udivmoddi4+0xe2>
 8000242:	fab2 f382 	clz	r3, r2
 8000246:	b143      	cbz	r3, 800025a <__udivmoddi4+0x2e>
 8000248:	fa02 fc03 	lsl.w	ip, r2, r3
 800024c:	f1c3 0220 	rsb	r2, r3, #32
 8000250:	409f      	lsls	r7, r3
 8000252:	fa20 f202 	lsr.w	r2, r0, r2
 8000256:	4317      	orrs	r7, r2
 8000258:	409c      	lsls	r4, r3
 800025a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800025e:	fa1f f58c 	uxth.w	r5, ip
 8000262:	fbb7 f1fe 	udiv	r1, r7, lr
 8000266:	0c22      	lsrs	r2, r4, #16
 8000268:	fb0e 7711 	mls	r7, lr, r1, r7
 800026c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000270:	fb01 f005 	mul.w	r0, r1, r5
 8000274:	4290      	cmp	r0, r2
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x62>
 8000278:	eb1c 0202 	adds.w	r2, ip, r2
 800027c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000280:	f080 811c 	bcs.w	80004bc <__udivmoddi4+0x290>
 8000284:	4290      	cmp	r0, r2
 8000286:	f240 8119 	bls.w	80004bc <__udivmoddi4+0x290>
 800028a:	3902      	subs	r1, #2
 800028c:	4462      	add	r2, ip
 800028e:	1a12      	subs	r2, r2, r0
 8000290:	b2a4      	uxth	r4, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800029e:	fb00 f505 	mul.w	r5, r0, r5
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x90>
 80002a6:	eb1c 0404 	adds.w	r4, ip, r4
 80002aa:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x294>
 80002b2:	42a5      	cmp	r5, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x294>
 80002b8:	4464      	add	r4, ip
 80002ba:	3802      	subs	r0, #2
 80002bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c0:	1b64      	subs	r4, r4, r5
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11e      	cbz	r6, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40dc      	lsrs	r4, r3
 80002c8:	2300      	movs	r3, #0
 80002ca:	e9c6 4300 	strd	r4, r3, [r6]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0xbc>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80ed 	beq.w	80004b6 <__udivmoddi4+0x28a>
 80002dc:	2100      	movs	r1, #0
 80002de:	e9c6 0500 	strd	r0, r5, [r6]
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	d149      	bne.n	8000384 <__udivmoddi4+0x158>
 80002f0:	42ab      	cmp	r3, r5
 80002f2:	d302      	bcc.n	80002fa <__udivmoddi4+0xce>
 80002f4:	4282      	cmp	r2, r0
 80002f6:	f200 80f8 	bhi.w	80004ea <__udivmoddi4+0x2be>
 80002fa:	1a84      	subs	r4, r0, r2
 80002fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000300:	2001      	movs	r0, #1
 8000302:	4617      	mov	r7, r2
 8000304:	2e00      	cmp	r6, #0
 8000306:	d0e2      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000308:	e9c6 4700 	strd	r4, r7, [r6]
 800030c:	e7df      	b.n	80002ce <__udivmoddi4+0xa2>
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xe6>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f382 	clz	r3, r2
 8000316:	2b00      	cmp	r3, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x210>
 800031c:	1a8a      	subs	r2, r1, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2101      	movs	r1, #1
 8000328:	fbb2 f5f7 	udiv	r5, r2, r7
 800032c:	fb07 2015 	mls	r0, r7, r5, r2
 8000330:	0c22      	lsrs	r2, r4, #16
 8000332:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000336:	fb0e f005 	mul.w	r0, lr, r5
 800033a:	4290      	cmp	r0, r2
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x124>
 800033e:	eb1c 0202 	adds.w	r2, ip, r2
 8000342:	f105 38ff 	add.w	r8, r5, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4290      	cmp	r0, r2
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2b8>
 800034e:	4645      	mov	r5, r8
 8000350:	1a12      	subs	r2, r2, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb2 f0f7 	udiv	r0, r2, r7
 8000358:	fb07 2210 	mls	r2, r7, r0, r2
 800035c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x14e>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x14c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2c2>
 8000378:	4610      	mov	r0, r2
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000382:	e79f      	b.n	80002c4 <__udivmoddi4+0x98>
 8000384:	f1c1 0720 	rsb	r7, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa05 f401 	lsl.w	r4, r5, r1
 8000396:	fa20 f307 	lsr.w	r3, r0, r7
 800039a:	40fd      	lsrs	r5, r7
 800039c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a0:	4323      	orrs	r3, r4
 80003a2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	fb09 5518 	mls	r5, r9, r8, r5
 80003ae:	0c1c      	lsrs	r4, r3, #16
 80003b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b4:	fb08 f50e 	mul.w	r5, r8, lr
 80003b8:	42a5      	cmp	r5, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	fa00 f001 	lsl.w	r0, r0, r1
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2b4>
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2b4>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4464      	add	r4, ip
 80003dc:	1b64      	subs	r4, r4, r5
 80003de:	b29d      	uxth	r5, r3
 80003e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e4:	fb09 4413 	mls	r4, r9, r3, r4
 80003e8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003ec:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2ac>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2ac>
 8000402:	3b02      	subs	r3, #2
 8000404:	4464      	add	r4, ip
 8000406:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040a:	fba3 9502 	umull	r9, r5, r3, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	42ac      	cmp	r4, r5
 8000414:	46c8      	mov	r8, r9
 8000416:	46ae      	mov	lr, r5
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x29c>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x298>
 800041c:	b156      	cbz	r6, 8000434 <__udivmoddi4+0x208>
 800041e:	ebb0 0208 	subs.w	r2, r0, r8
 8000422:	eb64 040e 	sbc.w	r4, r4, lr
 8000426:	fa04 f707 	lsl.w	r7, r4, r7
 800042a:	40ca      	lsrs	r2, r1
 800042c:	40cc      	lsrs	r4, r1
 800042e:	4317      	orrs	r7, r2
 8000430:	e9c6 7400 	strd	r7, r4, [r6]
 8000434:	4618      	mov	r0, r3
 8000436:	2100      	movs	r1, #0
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	f1c3 0120 	rsb	r1, r3, #32
 8000440:	fa02 fc03 	lsl.w	ip, r2, r3
 8000444:	fa20 f201 	lsr.w	r2, r0, r1
 8000448:	fa25 f101 	lsr.w	r1, r5, r1
 800044c:	409d      	lsls	r5, r3
 800044e:	432a      	orrs	r2, r5
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb1 f0f7 	udiv	r0, r1, r7
 800045c:	fb07 1510 	mls	r5, r7, r0, r1
 8000460:	0c11      	lsrs	r1, r2, #16
 8000462:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000466:	fb00 f50e 	mul.w	r5, r0, lr
 800046a:	428d      	cmp	r5, r1
 800046c:	fa04 f403 	lsl.w	r4, r4, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x258>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 800047c:	428d      	cmp	r5, r1
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b0>
 8000480:	3802      	subs	r0, #2
 8000482:	4461      	add	r1, ip
 8000484:	1b49      	subs	r1, r1, r5
 8000486:	b292      	uxth	r2, r2
 8000488:	fbb1 f5f7 	udiv	r5, r1, r7
 800048c:	fb07 1115 	mls	r1, r7, r5, r1
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	fb05 f10e 	mul.w	r1, r5, lr
 8000498:	4291      	cmp	r1, r2
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x282>
 800049c:	eb1c 0202 	adds.w	r2, ip, r2
 80004a0:	f105 38ff 	add.w	r8, r5, #4294967295
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 80004a6:	4291      	cmp	r1, r2
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 80004aa:	3d02      	subs	r5, #2
 80004ac:	4462      	add	r2, ip
 80004ae:	1a52      	subs	r2, r2, r1
 80004b0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0xfc>
 80004b6:	4631      	mov	r1, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e708      	b.n	80002ce <__udivmoddi4+0xa2>
 80004bc:	4639      	mov	r1, r7
 80004be:	e6e6      	b.n	800028e <__udivmoddi4+0x62>
 80004c0:	4610      	mov	r0, r2
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x90>
 80004c4:	4548      	cmp	r0, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d0:	3b01      	subs	r3, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d4:	4645      	mov	r5, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x282>
 80004d8:	462b      	mov	r3, r5
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1da>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x258>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e4:	3d02      	subs	r5, #2
 80004e6:	4462      	add	r2, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x124>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e70a      	b.n	8000304 <__udivmoddi4+0xd8>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x14e>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fc:	f000 fc73 	bl	8000de6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000500:	f000 f807 	bl	8000512 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000504:	f000 f8e4 	bl	80006d0 <MX_GPIO_Init>
  MX_UART4_Init();
 8000508:	f000 f896 	bl	8000638 <MX_UART4_Init>
  MX_LPUART1_UART_Init();
 800050c:	f000 f848 	bl	80005a0 <MX_LPUART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000510:	e7fe      	b.n	8000510 <main+0x18>

08000512 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000512:	b580      	push	{r7, lr}
 8000514:	b096      	sub	sp, #88	; 0x58
 8000516:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000518:	f107 0314 	add.w	r3, r7, #20
 800051c:	2244      	movs	r2, #68	; 0x44
 800051e:	2100      	movs	r1, #0
 8000520:	4618      	mov	r0, r3
 8000522:	f003 ff03 	bl	800432c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000526:	463b      	mov	r3, r7
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]
 8000532:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000534:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000538:	f001 f848 	bl	80015cc <HAL_PWREx_ControlVoltageScaling>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000542:	f000 fb09 	bl	8000b58 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000546:	2310      	movs	r3, #16
 8000548:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800054a:	2301      	movs	r3, #1
 800054c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800054e:	2300      	movs	r3, #0
 8000550:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000552:	2360      	movs	r3, #96	; 0x60
 8000554:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000556:	2300      	movs	r3, #0
 8000558:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800055a:	f107 0314 	add.w	r3, r7, #20
 800055e:	4618      	mov	r0, r3
 8000560:	f001 f8e8 	bl	8001734 <HAL_RCC_OscConfig>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800056a:	f000 faf5 	bl	8000b58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056e:	230f      	movs	r3, #15
 8000570:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000572:	2300      	movs	r3, #0
 8000574:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000576:	2300      	movs	r3, #0
 8000578:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800057a:	2300      	movs	r3, #0
 800057c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800057e:	2300      	movs	r3, #0
 8000580:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000582:	463b      	mov	r3, r7
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f001 fcee 	bl	8001f68 <HAL_RCC_ClockConfig>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000592:	f000 fae1 	bl	8000b58 <Error_Handler>
  }
}
 8000596:	bf00      	nop
 8000598:	3758      	adds	r7, #88	; 0x58
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
	...

080005a0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80005a4:	4b22      	ldr	r3, [pc, #136]	; (8000630 <MX_LPUART1_UART_Init+0x90>)
 80005a6:	4a23      	ldr	r2, [pc, #140]	; (8000634 <MX_LPUART1_UART_Init+0x94>)
 80005a8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80005aa:	4b21      	ldr	r3, [pc, #132]	; (8000630 <MX_LPUART1_UART_Init+0x90>)
 80005ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005b0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005b2:	4b1f      	ldr	r3, [pc, #124]	; (8000630 <MX_LPUART1_UART_Init+0x90>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80005b8:	4b1d      	ldr	r3, [pc, #116]	; (8000630 <MX_LPUART1_UART_Init+0x90>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80005be:	4b1c      	ldr	r3, [pc, #112]	; (8000630 <MX_LPUART1_UART_Init+0x90>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80005c4:	4b1a      	ldr	r3, [pc, #104]	; (8000630 <MX_LPUART1_UART_Init+0x90>)
 80005c6:	220c      	movs	r2, #12
 80005c8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ca:	4b19      	ldr	r3, [pc, #100]	; (8000630 <MX_LPUART1_UART_Init+0x90>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005d0:	4b17      	ldr	r3, [pc, #92]	; (8000630 <MX_LPUART1_UART_Init+0x90>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80005d6:	4b16      	ldr	r3, [pc, #88]	; (8000630 <MX_LPUART1_UART_Init+0x90>)
 80005d8:	2200      	movs	r2, #0
 80005da:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005dc:	4b14      	ldr	r3, [pc, #80]	; (8000630 <MX_LPUART1_UART_Init+0x90>)
 80005de:	2200      	movs	r2, #0
 80005e0:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80005e2:	4b13      	ldr	r3, [pc, #76]	; (8000630 <MX_LPUART1_UART_Init+0x90>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80005e8:	4811      	ldr	r0, [pc, #68]	; (8000630 <MX_LPUART1_UART_Init+0x90>)
 80005ea:	f002 fc93 	bl	8002f14 <HAL_UART_Init>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80005f4:	f000 fab0 	bl	8000b58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80005f8:	2100      	movs	r1, #0
 80005fa:	480d      	ldr	r0, [pc, #52]	; (8000630 <MX_LPUART1_UART_Init+0x90>)
 80005fc:	f003 fdcb 	bl	8004196 <HAL_UARTEx_SetTxFifoThreshold>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000606:	f000 faa7 	bl	8000b58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800060a:	2100      	movs	r1, #0
 800060c:	4808      	ldr	r0, [pc, #32]	; (8000630 <MX_LPUART1_UART_Init+0x90>)
 800060e:	f003 fe00 	bl	8004212 <HAL_UARTEx_SetRxFifoThreshold>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000618:	f000 fa9e 	bl	8000b58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800061c:	4804      	ldr	r0, [pc, #16]	; (8000630 <MX_LPUART1_UART_Init+0x90>)
 800061e:	f003 fd81 	bl	8004124 <HAL_UARTEx_DisableFifoMode>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000628:	f000 fa96 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000028 	.word	0x20000028
 8000634:	40008000 	.word	0x40008000

08000638 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800063c:	4b22      	ldr	r3, [pc, #136]	; (80006c8 <MX_UART4_Init+0x90>)
 800063e:	4a23      	ldr	r2, [pc, #140]	; (80006cc <MX_UART4_Init+0x94>)
 8000640:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000642:	4b21      	ldr	r3, [pc, #132]	; (80006c8 <MX_UART4_Init+0x90>)
 8000644:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000648:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800064a:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <MX_UART4_Init+0x90>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000650:	4b1d      	ldr	r3, [pc, #116]	; (80006c8 <MX_UART4_Init+0x90>)
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000656:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <MX_UART4_Init+0x90>)
 8000658:	2200      	movs	r2, #0
 800065a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800065c:	4b1a      	ldr	r3, [pc, #104]	; (80006c8 <MX_UART4_Init+0x90>)
 800065e:	220c      	movs	r2, #12
 8000660:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000662:	4b19      	ldr	r3, [pc, #100]	; (80006c8 <MX_UART4_Init+0x90>)
 8000664:	2200      	movs	r2, #0
 8000666:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000668:	4b17      	ldr	r3, [pc, #92]	; (80006c8 <MX_UART4_Init+0x90>)
 800066a:	2200      	movs	r2, #0
 800066c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800066e:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <MX_UART4_Init+0x90>)
 8000670:	2200      	movs	r2, #0
 8000672:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000674:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <MX_UART4_Init+0x90>)
 8000676:	2200      	movs	r2, #0
 8000678:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800067a:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <MX_UART4_Init+0x90>)
 800067c:	2200      	movs	r2, #0
 800067e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000680:	4811      	ldr	r0, [pc, #68]	; (80006c8 <MX_UART4_Init+0x90>)
 8000682:	f002 fc47 	bl	8002f14 <HAL_UART_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 800068c:	f000 fa64 	bl	8000b58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000690:	2100      	movs	r1, #0
 8000692:	480d      	ldr	r0, [pc, #52]	; (80006c8 <MX_UART4_Init+0x90>)
 8000694:	f003 fd7f 	bl	8004196 <HAL_UARTEx_SetTxFifoThreshold>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800069e:	f000 fa5b 	bl	8000b58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006a2:	2100      	movs	r1, #0
 80006a4:	4808      	ldr	r0, [pc, #32]	; (80006c8 <MX_UART4_Init+0x90>)
 80006a6:	f003 fdb4 	bl	8004212 <HAL_UARTEx_SetRxFifoThreshold>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80006b0:	f000 fa52 	bl	8000b58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80006b4:	4804      	ldr	r0, [pc, #16]	; (80006c8 <MX_UART4_Init+0x90>)
 80006b6:	f003 fd35 	bl	8004124 <HAL_UARTEx_DisableFifoMode>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80006c0:	f000 fa4a 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	200000bc 	.word	0x200000bc
 80006cc:	40004c00 	.word	0x40004c00

080006d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b08e      	sub	sp, #56	; 0x38
 80006d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
 80006e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006e6:	4bb2      	ldr	r3, [pc, #712]	; (80009b0 <MX_GPIO_Init+0x2e0>)
 80006e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ea:	4ab1      	ldr	r2, [pc, #708]	; (80009b0 <MX_GPIO_Init+0x2e0>)
 80006ec:	f043 0310 	orr.w	r3, r3, #16
 80006f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006f2:	4baf      	ldr	r3, [pc, #700]	; (80009b0 <MX_GPIO_Init+0x2e0>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f6:	f003 0310 	and.w	r3, r3, #16
 80006fa:	623b      	str	r3, [r7, #32]
 80006fc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fe:	4bac      	ldr	r3, [pc, #688]	; (80009b0 <MX_GPIO_Init+0x2e0>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000702:	4aab      	ldr	r2, [pc, #684]	; (80009b0 <MX_GPIO_Init+0x2e0>)
 8000704:	f043 0304 	orr.w	r3, r3, #4
 8000708:	64d3      	str	r3, [r2, #76]	; 0x4c
 800070a:	4ba9      	ldr	r3, [pc, #676]	; (80009b0 <MX_GPIO_Init+0x2e0>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070e:	f003 0304 	and.w	r3, r3, #4
 8000712:	61fb      	str	r3, [r7, #28]
 8000714:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000716:	4ba6      	ldr	r3, [pc, #664]	; (80009b0 <MX_GPIO_Init+0x2e0>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071a:	4aa5      	ldr	r2, [pc, #660]	; (80009b0 <MX_GPIO_Init+0x2e0>)
 800071c:	f043 0320 	orr.w	r3, r3, #32
 8000720:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000722:	4ba3      	ldr	r3, [pc, #652]	; (80009b0 <MX_GPIO_Init+0x2e0>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000726:	f003 0320 	and.w	r3, r3, #32
 800072a:	61bb      	str	r3, [r7, #24]
 800072c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072e:	4ba0      	ldr	r3, [pc, #640]	; (80009b0 <MX_GPIO_Init+0x2e0>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000732:	4a9f      	ldr	r2, [pc, #636]	; (80009b0 <MX_GPIO_Init+0x2e0>)
 8000734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000738:	64d3      	str	r3, [r2, #76]	; 0x4c
 800073a:	4b9d      	ldr	r3, [pc, #628]	; (80009b0 <MX_GPIO_Init+0x2e0>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000742:	617b      	str	r3, [r7, #20]
 8000744:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	4b9a      	ldr	r3, [pc, #616]	; (80009b0 <MX_GPIO_Init+0x2e0>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074a:	4a99      	ldr	r2, [pc, #612]	; (80009b0 <MX_GPIO_Init+0x2e0>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000752:	4b97      	ldr	r3, [pc, #604]	; (80009b0 <MX_GPIO_Init+0x2e0>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075e:	4b94      	ldr	r3, [pc, #592]	; (80009b0 <MX_GPIO_Init+0x2e0>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000762:	4a93      	ldr	r2, [pc, #588]	; (80009b0 <MX_GPIO_Init+0x2e0>)
 8000764:	f043 0302 	orr.w	r3, r3, #2
 8000768:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076a:	4b91      	ldr	r3, [pc, #580]	; (80009b0 <MX_GPIO_Init+0x2e0>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	f003 0302 	and.w	r3, r3, #2
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000776:	4b8e      	ldr	r3, [pc, #568]	; (80009b0 <MX_GPIO_Init+0x2e0>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	4a8d      	ldr	r2, [pc, #564]	; (80009b0 <MX_GPIO_Init+0x2e0>)
 800077c:	f043 0308 	orr.w	r3, r3, #8
 8000780:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000782:	4b8b      	ldr	r3, [pc, #556]	; (80009b0 <MX_GPIO_Init+0x2e0>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	f003 0308 	and.w	r3, r3, #8
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800078e:	4b88      	ldr	r3, [pc, #544]	; (80009b0 <MX_GPIO_Init+0x2e0>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	4a87      	ldr	r2, [pc, #540]	; (80009b0 <MX_GPIO_Init+0x2e0>)
 8000794:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079a:	4b85      	ldr	r3, [pc, #532]	; (80009b0 <MX_GPIO_Init+0x2e0>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80007a6:	f000 ffb5 	bl	8001714 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007aa:	230c      	movs	r3, #12
 80007ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ae:	2302      	movs	r3, #2
 80007b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b6:	2300      	movs	r3, #0
 80007b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80007ba:	230d      	movs	r3, #13
 80007bc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c2:	4619      	mov	r1, r3
 80007c4:	487b      	ldr	r0, [pc, #492]	; (80009b4 <MX_GPIO_Init+0x2e4>)
 80007c6:	f000 fd4f 	bl	8001268 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80007ca:	2307      	movs	r3, #7
 80007cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007ce:	2312      	movs	r3, #18
 80007d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d6:	2303      	movs	r3, #3
 80007d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80007da:	2304      	movs	r3, #4
 80007dc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e2:	4619      	mov	r1, r3
 80007e4:	4874      	ldr	r0, [pc, #464]	; (80009b8 <MX_GPIO_Init+0x2e8>)
 80007e6:	f000 fd3f 	bl	8001268 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80007ea:	2380      	movs	r3, #128	; 0x80
 80007ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ee:	2302      	movs	r3, #2
 80007f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	2300      	movs	r3, #0
 80007f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80007fa:	230d      	movs	r3, #13
 80007fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000802:	4619      	mov	r1, r3
 8000804:	486c      	ldr	r0, [pc, #432]	; (80009b8 <MX_GPIO_Init+0x2e8>)
 8000806:	f000 fd2f 	bl	8001268 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800080a:	233f      	movs	r3, #63	; 0x3f
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800080e:	230b      	movs	r3, #11
 8000810:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081a:	4619      	mov	r1, r3
 800081c:	4867      	ldr	r0, [pc, #412]	; (80009bc <MX_GPIO_Init+0x2ec>)
 800081e:	f000 fd23 	bl	8001268 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000822:	2301      	movs	r3, #1
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000826:	2302      	movs	r3, #2
 8000828:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000832:	2301      	movs	r3, #1
 8000834:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800083a:	4619      	mov	r1, r3
 800083c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000840:	f000 fd12 	bl	8001268 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8000844:	230a      	movs	r3, #10
 8000846:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000848:	230b      	movs	r3, #11
 800084a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000850:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000854:	4619      	mov	r1, r3
 8000856:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800085a:	f000 fd05 	bl	8001268 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800085e:	23f0      	movs	r3, #240	; 0xf0
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000862:	2302      	movs	r3, #2
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086a:	2303      	movs	r3, #3
 800086c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800086e:	2305      	movs	r3, #5
 8000870:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000876:	4619      	mov	r1, r3
 8000878:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800087c:	f000 fcf4 	bl	8001268 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000880:	2301      	movs	r3, #1
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000884:	2302      	movs	r3, #2
 8000886:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088c:	2300      	movs	r3, #0
 800088e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000890:	2302      	movs	r3, #2
 8000892:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000898:	4619      	mov	r1, r3
 800089a:	4849      	ldr	r0, [pc, #292]	; (80009c0 <MX_GPIO_Init+0x2f0>)
 800089c:	f000 fce4 	bl	8001268 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80008a0:	2302      	movs	r3, #2
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80008a4:	230b      	movs	r3, #11
 80008a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b0:	4619      	mov	r1, r3
 80008b2:	4843      	ldr	r0, [pc, #268]	; (80009c0 <MX_GPIO_Init+0x2f0>)
 80008b4:	f000 fcd8 	bl	8001268 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 80008b8:	2344      	movs	r3, #68	; 0x44
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008bc:	2303      	movs	r3, #3
 80008be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c8:	4619      	mov	r1, r3
 80008ca:	483d      	ldr	r0, [pc, #244]	; (80009c0 <MX_GPIO_Init+0x2f0>)
 80008cc:	f000 fccc 	bl	8001268 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80008d0:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d6:	2302      	movs	r3, #2
 80008d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80008e2:	2301      	movs	r3, #1
 80008e4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ea:	4619      	mov	r1, r3
 80008ec:	4831      	ldr	r0, [pc, #196]	; (80009b4 <MX_GPIO_Init+0x2e4>)
 80008ee:	f000 fcbb 	bl	8001268 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80008f2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f8:	2302      	movs	r3, #2
 80008fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000900:	2300      	movs	r3, #0
 8000902:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8000904:	2303      	movs	r3, #3
 8000906:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000908:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090c:	4619      	mov	r1, r3
 800090e:	4829      	ldr	r0, [pc, #164]	; (80009b4 <MX_GPIO_Init+0x2e4>)
 8000910:	f000 fcaa 	bl	8001268 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000914:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091a:	2302      	movs	r3, #2
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000926:	2301      	movs	r3, #1
 8000928:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800092e:	4619      	mov	r1, r3
 8000930:	4823      	ldr	r0, [pc, #140]	; (80009c0 <MX_GPIO_Init+0x2f0>)
 8000932:	f000 fc99 	bl	8001268 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000936:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093c:	2302      	movs	r3, #2
 800093e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	2300      	movs	r3, #0
 8000946:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000948:	230d      	movs	r3, #13
 800094a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000950:	4619      	mov	r1, r3
 8000952:	481b      	ldr	r0, [pc, #108]	; (80009c0 <MX_GPIO_Init+0x2f0>)
 8000954:	f000 fc88 	bl	8001268 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000958:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095e:	2302      	movs	r3, #2
 8000960:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2300      	movs	r3, #0
 8000968:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800096a:	230e      	movs	r3, #14
 800096c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000972:	4619      	mov	r1, r3
 8000974:	4812      	ldr	r0, [pc, #72]	; (80009c0 <MX_GPIO_Init+0x2f0>)
 8000976:	f000 fc77 	bl	8001268 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800097a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000980:	2302      	movs	r3, #2
 8000982:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000988:	2303      	movs	r3, #3
 800098a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800098c:	2307      	movs	r3, #7
 800098e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000990:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000994:	4619      	mov	r1, r3
 8000996:	480b      	ldr	r0, [pc, #44]	; (80009c4 <MX_GPIO_Init+0x2f4>)
 8000998:	f000 fc66 	bl	8001268 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800099c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	2302      	movs	r3, #2
 80009a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	e00c      	b.n	80009c8 <MX_GPIO_Init+0x2f8>
 80009ae:	bf00      	nop
 80009b0:	40021000 	.word	0x40021000
 80009b4:	48001000 	.word	0x48001000
 80009b8:	48001400 	.word	0x48001400
 80009bc:	48000800 	.word	0x48000800
 80009c0:	48000400 	.word	0x48000400
 80009c4:	48000c00 	.word	0x48000c00
 80009c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80009ca:	2302      	movs	r3, #2
 80009cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d2:	4619      	mov	r1, r3
 80009d4:	485c      	ldr	r0, [pc, #368]	; (8000b48 <MX_GPIO_Init+0x478>)
 80009d6:	f000 fc47 	bl	8001268 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80009da:	2340      	movs	r3, #64	; 0x40
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	2300      	movs	r3, #0
 80009e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80009ea:	230d      	movs	r3, #13
 80009ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f2:	4619      	mov	r1, r3
 80009f4:	4855      	ldr	r0, [pc, #340]	; (8000b4c <MX_GPIO_Init+0x47c>)
 80009f6:	f000 fc37 	bl	8001268 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80009fa:	2380      	movs	r3, #128	; 0x80
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fe:	2302      	movs	r3, #2
 8000a00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	2300      	movs	r3, #0
 8000a08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a12:	4619      	mov	r1, r3
 8000a14:	484d      	ldr	r0, [pc, #308]	; (8000b4c <MX_GPIO_Init+0x47c>)
 8000a16:	f000 fc27 	bl	8001268 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_12;
 8000a1a:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 8000a1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a20:	2302      	movs	r3, #2
 8000a22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a28:	2303      	movs	r3, #3
 8000a2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000a2c:	230c      	movs	r3, #12
 8000a2e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a34:	4619      	mov	r1, r3
 8000a36:	4845      	ldr	r0, [pc, #276]	; (8000b4c <MX_GPIO_Init+0x47c>)
 8000a38:	f000 fc16 	bl	8001268 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8000a3c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	2302      	movs	r3, #2
 8000a44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a4e:	230a      	movs	r3, #10
 8000a50:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a56:	4619      	mov	r1, r3
 8000a58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a5c:	f000 fc04 	bl	8001268 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a72:	4619      	mov	r1, r3
 8000a74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a78:	f000 fbf6 	bl	8001268 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a80:	2302      	movs	r3, #2
 8000a82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a8c:	2309      	movs	r3, #9
 8000a8e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a94:	4619      	mov	r1, r3
 8000a96:	482c      	ldr	r0, [pc, #176]	; (8000b48 <MX_GPIO_Init+0x478>)
 8000a98:	f000 fbe6 	bl	8001268 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a9c:	2304      	movs	r3, #4
 8000a9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000aac:	230c      	movs	r3, #12
 8000aae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ab0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4824      	ldr	r0, [pc, #144]	; (8000b48 <MX_GPIO_Init+0x478>)
 8000ab8:	f000 fbd6 	bl	8001268 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000abc:	2378      	movs	r3, #120	; 0x78
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac8:	2303      	movs	r3, #3
 8000aca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000acc:	2307      	movs	r3, #7
 8000ace:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ad0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	481c      	ldr	r0, [pc, #112]	; (8000b48 <MX_GPIO_Init+0x478>)
 8000ad8:	f000 fbc6 	bl	8001268 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000adc:	2338      	movs	r3, #56	; 0x38
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000aec:	2306      	movs	r3, #6
 8000aee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af4:	4619      	mov	r1, r3
 8000af6:	4816      	ldr	r0, [pc, #88]	; (8000b50 <MX_GPIO_Init+0x480>)
 8000af8:	f000 fbb6 	bl	8001268 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000afc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b02:	2312      	movs	r3, #18
 8000b04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b0e:	2304      	movs	r3, #4
 8000b10:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b16:	4619      	mov	r1, r3
 8000b18:	480d      	ldr	r0, [pc, #52]	; (8000b50 <MX_GPIO_Init+0x480>)
 8000b1a:	f000 fba5 	bl	8001268 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b22:	2302      	movs	r3, #2
 8000b24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b36:	4619      	mov	r1, r3
 8000b38:	4806      	ldr	r0, [pc, #24]	; (8000b54 <MX_GPIO_Init+0x484>)
 8000b3a:	f000 fb95 	bl	8001268 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b3e:	bf00      	nop
 8000b40:	3738      	adds	r7, #56	; 0x38
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	48000c00 	.word	0x48000c00
 8000b4c:	48000800 	.word	0x48000800
 8000b50:	48000400 	.word	0x48000400
 8000b54:	48001000 	.word	0x48001000

08000b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b5c:	b672      	cpsid	i
}
 8000b5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <Error_Handler+0x8>
	...

08000b64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <HAL_MspInit+0x44>)
 8000b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b6e:	4a0e      	ldr	r2, [pc, #56]	; (8000ba8 <HAL_MspInit+0x44>)
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	6613      	str	r3, [r2, #96]	; 0x60
 8000b76:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <HAL_MspInit+0x44>)
 8000b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b82:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <HAL_MspInit+0x44>)
 8000b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b86:	4a08      	ldr	r2, [pc, #32]	; (8000ba8 <HAL_MspInit+0x44>)
 8000b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b8c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b8e:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <HAL_MspInit+0x44>)
 8000b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b96:	603b      	str	r3, [r7, #0]
 8000b98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	40021000 	.word	0x40021000

08000bac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b0b0      	sub	sp, #192	; 0xc0
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bc4:	f107 0318 	add.w	r3, r7, #24
 8000bc8:	2294      	movs	r2, #148	; 0x94
 8000bca:	2100      	movs	r1, #0
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f003 fbad 	bl	800432c <memset>
  if(huart->Instance==LPUART1)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a47      	ldr	r2, [pc, #284]	; (8000cf4 <HAL_UART_MspInit+0x148>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d13e      	bne.n	8000c5a <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000bdc:	2320      	movs	r3, #32
 8000bde:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000be0:	2300      	movs	r3, #0
 8000be2:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000be4:	f107 0318 	add.w	r3, r7, #24
 8000be8:	4618      	mov	r0, r3
 8000bea:	f001 fc7b 	bl	80024e4 <HAL_RCCEx_PeriphCLKConfig>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bf4:	f7ff ffb0 	bl	8000b58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bf8:	4b3f      	ldr	r3, [pc, #252]	; (8000cf8 <HAL_UART_MspInit+0x14c>)
 8000bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bfc:	4a3e      	ldr	r2, [pc, #248]	; (8000cf8 <HAL_UART_MspInit+0x14c>)
 8000bfe:	f043 0301 	orr.w	r3, r3, #1
 8000c02:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000c04:	4b3c      	ldr	r3, [pc, #240]	; (8000cf8 <HAL_UART_MspInit+0x14c>)
 8000c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c08:	f003 0301 	and.w	r3, r3, #1
 8000c0c:	617b      	str	r3, [r7, #20]
 8000c0e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c10:	4b39      	ldr	r3, [pc, #228]	; (8000cf8 <HAL_UART_MspInit+0x14c>)
 8000c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c14:	4a38      	ldr	r2, [pc, #224]	; (8000cf8 <HAL_UART_MspInit+0x14c>)
 8000c16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c1c:	4b36      	ldr	r3, [pc, #216]	; (8000cf8 <HAL_UART_MspInit+0x14c>)
 8000c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c24:	613b      	str	r3, [r7, #16]
 8000c26:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8000c28:	f000 fd74 	bl	8001714 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000c2c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000c30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c34:	2302      	movs	r3, #2
 8000c36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c40:	2303      	movs	r3, #3
 8000c42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000c46:	2308      	movs	r3, #8
 8000c48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c4c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c50:	4619      	mov	r1, r3
 8000c52:	482a      	ldr	r0, [pc, #168]	; (8000cfc <HAL_UART_MspInit+0x150>)
 8000c54:	f000 fb08 	bl	8001268 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000c58:	e048      	b.n	8000cec <HAL_UART_MspInit+0x140>
  else if(huart->Instance==UART4)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a28      	ldr	r2, [pc, #160]	; (8000d00 <HAL_UART_MspInit+0x154>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d143      	bne.n	8000cec <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000c64:	2308      	movs	r3, #8
 8000c66:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c6c:	f107 0318 	add.w	r3, r7, #24
 8000c70:	4618      	mov	r0, r3
 8000c72:	f001 fc37 	bl	80024e4 <HAL_RCCEx_PeriphCLKConfig>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8000c7c:	f7ff ff6c 	bl	8000b58 <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 8000c80:	4b1d      	ldr	r3, [pc, #116]	; (8000cf8 <HAL_UART_MspInit+0x14c>)
 8000c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c84:	4a1c      	ldr	r2, [pc, #112]	; (8000cf8 <HAL_UART_MspInit+0x14c>)
 8000c86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c8a:	6593      	str	r3, [r2, #88]	; 0x58
 8000c8c:	4b1a      	ldr	r3, [pc, #104]	; (8000cf8 <HAL_UART_MspInit+0x14c>)
 8000c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c98:	4b17      	ldr	r3, [pc, #92]	; (8000cf8 <HAL_UART_MspInit+0x14c>)
 8000c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9c:	4a16      	ldr	r2, [pc, #88]	; (8000cf8 <HAL_UART_MspInit+0x14c>)
 8000c9e:	f043 0304 	orr.w	r3, r3, #4
 8000ca2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ca4:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <HAL_UART_MspInit+0x14c>)
 8000ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca8:	f003 0304 	and.w	r3, r3, #4
 8000cac:	60bb      	str	r3, [r7, #8]
 8000cae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000cb0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000cb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000cca:	2308      	movs	r3, #8
 8000ccc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	480b      	ldr	r0, [pc, #44]	; (8000d04 <HAL_UART_MspInit+0x158>)
 8000cd8:	f000 fac6 	bl	8001268 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2100      	movs	r1, #0
 8000ce0:	2034      	movs	r0, #52	; 0x34
 8000ce2:	f000 f9d0 	bl	8001086 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000ce6:	2034      	movs	r0, #52	; 0x34
 8000ce8:	f000 f9e9 	bl	80010be <HAL_NVIC_EnableIRQ>
}
 8000cec:	bf00      	nop
 8000cee:	37c0      	adds	r7, #192	; 0xc0
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40008000 	.word	0x40008000
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	48001800 	.word	0x48001800
 8000d00:	40004c00 	.word	0x40004c00
 8000d04:	48000800 	.word	0x48000800

08000d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <NMI_Handler+0x4>

08000d0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d12:	e7fe      	b.n	8000d12 <HardFault_Handler+0x4>

08000d14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <MemManage_Handler+0x4>

08000d1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d1e:	e7fe      	b.n	8000d1e <BusFault_Handler+0x4>

08000d20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <UsageFault_Handler+0x4>

08000d26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr

08000d42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d54:	f000 f89c 	bl	8000e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000d60:	4802      	ldr	r0, [pc, #8]	; (8000d6c <UART4_IRQHandler+0x10>)
 8000d62:	f002 f927 	bl	8002fb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	200000bc 	.word	0x200000bc

08000d70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <SystemInit+0x20>)
 8000d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d7a:	4a05      	ldr	r2, [pc, #20]	; (8000d90 <SystemInit+0x20>)
 8000d7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dcc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d98:	f7ff ffea 	bl	8000d70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d9c:	480c      	ldr	r0, [pc, #48]	; (8000dd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d9e:	490d      	ldr	r1, [pc, #52]	; (8000dd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000da0:	4a0d      	ldr	r2, [pc, #52]	; (8000dd8 <LoopForever+0xe>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da4:	e002      	b.n	8000dac <LoopCopyDataInit>

08000da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000daa:	3304      	adds	r3, #4

08000dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db0:	d3f9      	bcc.n	8000da6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000db2:	4a0a      	ldr	r2, [pc, #40]	; (8000ddc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000db4:	4c0a      	ldr	r4, [pc, #40]	; (8000de0 <LoopForever+0x16>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db8:	e001      	b.n	8000dbe <LoopFillZerobss>

08000dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dbc:	3204      	adds	r2, #4

08000dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc0:	d3fb      	bcc.n	8000dba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dc2:	f003 fabb 	bl	800433c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dc6:	f7ff fb97 	bl	80004f8 <main>

08000dca <LoopForever>:

LoopForever:
    b LoopForever
 8000dca:	e7fe      	b.n	8000dca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000dcc:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000dd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000dd8:	0800441c 	.word	0x0800441c
  ldr r2, =_sbss
 8000ddc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000de0:	20000154 	.word	0x20000154

08000de4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000de4:	e7fe      	b.n	8000de4 <ADC1_IRQHandler>

08000de6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b082      	sub	sp, #8
 8000dea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dec:	2300      	movs	r3, #0
 8000dee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df0:	2003      	movs	r0, #3
 8000df2:	f000 f93d 	bl	8001070 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000df6:	2000      	movs	r0, #0
 8000df8:	f000 f80e 	bl	8000e18 <HAL_InitTick>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d002      	beq.n	8000e08 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	71fb      	strb	r3, [r7, #7]
 8000e06:	e001      	b.n	8000e0c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e08:	f7ff feac 	bl	8000b64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e20:	2300      	movs	r3, #0
 8000e22:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e24:	4b17      	ldr	r3, [pc, #92]	; (8000e84 <HAL_InitTick+0x6c>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d023      	beq.n	8000e74 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e2c:	4b16      	ldr	r3, [pc, #88]	; (8000e88 <HAL_InitTick+0x70>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <HAL_InitTick+0x6c>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	4619      	mov	r1, r3
 8000e36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 f949 	bl	80010da <HAL_SYSTICK_Config>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d10f      	bne.n	8000e6e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2b0f      	cmp	r3, #15
 8000e52:	d809      	bhi.n	8000e68 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e54:	2200      	movs	r2, #0
 8000e56:	6879      	ldr	r1, [r7, #4]
 8000e58:	f04f 30ff 	mov.w	r0, #4294967295
 8000e5c:	f000 f913 	bl	8001086 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e60:	4a0a      	ldr	r2, [pc, #40]	; (8000e8c <HAL_InitTick+0x74>)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6013      	str	r3, [r2, #0]
 8000e66:	e007      	b.n	8000e78 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	73fb      	strb	r3, [r7, #15]
 8000e6c:	e004      	b.n	8000e78 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	73fb      	strb	r3, [r7, #15]
 8000e72:	e001      	b.n	8000e78 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e74:	2301      	movs	r3, #1
 8000e76:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000008 	.word	0x20000008
 8000e88:	20000000 	.word	0x20000000
 8000e8c:	20000004 	.word	0x20000004

08000e90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_IncTick+0x20>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <HAL_IncTick+0x24>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <HAL_IncTick+0x24>)
 8000ea2:	6013      	str	r3, [r2, #0]
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	20000008 	.word	0x20000008
 8000eb4:	20000150 	.word	0x20000150

08000eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  return uwTick;
 8000ebc:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <HAL_GetTick+0x14>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000150 	.word	0x20000150

08000ed0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ee6:	68ba      	ldr	r2, [r7, #8]
 8000ee8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eec:	4013      	ands	r3, r2
 8000eee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ef8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f02:	4a04      	ldr	r2, [pc, #16]	; (8000f14 <__NVIC_SetPriorityGrouping+0x44>)
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	60d3      	str	r3, [r2, #12]
}
 8000f08:	bf00      	nop
 8000f0a:	3714      	adds	r7, #20
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f1c:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <__NVIC_GetPriorityGrouping+0x18>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	0a1b      	lsrs	r3, r3, #8
 8000f22:	f003 0307 	and.w	r3, r3, #7
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	db0b      	blt.n	8000f5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	f003 021f 	and.w	r2, r3, #31
 8000f4c:	4907      	ldr	r1, [pc, #28]	; (8000f6c <__NVIC_EnableIRQ+0x38>)
 8000f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f52:	095b      	lsrs	r3, r3, #5
 8000f54:	2001      	movs	r0, #1
 8000f56:	fa00 f202 	lsl.w	r2, r0, r2
 8000f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f5e:	bf00      	nop
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	e000e100 	.word	0xe000e100

08000f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	6039      	str	r1, [r7, #0]
 8000f7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	db0a      	blt.n	8000f9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	b2da      	uxtb	r2, r3
 8000f88:	490c      	ldr	r1, [pc, #48]	; (8000fbc <__NVIC_SetPriority+0x4c>)
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	0112      	lsls	r2, r2, #4
 8000f90:	b2d2      	uxtb	r2, r2
 8000f92:	440b      	add	r3, r1
 8000f94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f98:	e00a      	b.n	8000fb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	4908      	ldr	r1, [pc, #32]	; (8000fc0 <__NVIC_SetPriority+0x50>)
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	f003 030f 	and.w	r3, r3, #15
 8000fa6:	3b04      	subs	r3, #4
 8000fa8:	0112      	lsls	r2, r2, #4
 8000faa:	b2d2      	uxtb	r2, r2
 8000fac:	440b      	add	r3, r1
 8000fae:	761a      	strb	r2, [r3, #24]
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	e000e100 	.word	0xe000e100
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b089      	sub	sp, #36	; 0x24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	f1c3 0307 	rsb	r3, r3, #7
 8000fde:	2b04      	cmp	r3, #4
 8000fe0:	bf28      	it	cs
 8000fe2:	2304      	movcs	r3, #4
 8000fe4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	3304      	adds	r3, #4
 8000fea:	2b06      	cmp	r3, #6
 8000fec:	d902      	bls.n	8000ff4 <NVIC_EncodePriority+0x30>
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	3b03      	subs	r3, #3
 8000ff2:	e000      	b.n	8000ff6 <NVIC_EncodePriority+0x32>
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43da      	mvns	r2, r3
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	401a      	ands	r2, r3
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800100c:	f04f 31ff 	mov.w	r1, #4294967295
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	fa01 f303 	lsl.w	r3, r1, r3
 8001016:	43d9      	mvns	r1, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800101c:	4313      	orrs	r3, r2
         );
}
 800101e:	4618      	mov	r0, r3
 8001020:	3724      	adds	r7, #36	; 0x24
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
	...

0800102c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3b01      	subs	r3, #1
 8001038:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800103c:	d301      	bcc.n	8001042 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800103e:	2301      	movs	r3, #1
 8001040:	e00f      	b.n	8001062 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001042:	4a0a      	ldr	r2, [pc, #40]	; (800106c <SysTick_Config+0x40>)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3b01      	subs	r3, #1
 8001048:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800104a:	210f      	movs	r1, #15
 800104c:	f04f 30ff 	mov.w	r0, #4294967295
 8001050:	f7ff ff8e 	bl	8000f70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001054:	4b05      	ldr	r3, [pc, #20]	; (800106c <SysTick_Config+0x40>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800105a:	4b04      	ldr	r3, [pc, #16]	; (800106c <SysTick_Config+0x40>)
 800105c:	2207      	movs	r2, #7
 800105e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	e000e010 	.word	0xe000e010

08001070 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f7ff ff29 	bl	8000ed0 <__NVIC_SetPriorityGrouping>
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b086      	sub	sp, #24
 800108a:	af00      	add	r7, sp, #0
 800108c:	4603      	mov	r3, r0
 800108e:	60b9      	str	r1, [r7, #8]
 8001090:	607a      	str	r2, [r7, #4]
 8001092:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001098:	f7ff ff3e 	bl	8000f18 <__NVIC_GetPriorityGrouping>
 800109c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	68b9      	ldr	r1, [r7, #8]
 80010a2:	6978      	ldr	r0, [r7, #20]
 80010a4:	f7ff ff8e 	bl	8000fc4 <NVIC_EncodePriority>
 80010a8:	4602      	mov	r2, r0
 80010aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ae:	4611      	mov	r1, r2
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff ff5d 	bl	8000f70 <__NVIC_SetPriority>
}
 80010b6:	bf00      	nop
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	4603      	mov	r3, r0
 80010c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff ff31 	bl	8000f34 <__NVIC_EnableIRQ>
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f7ff ffa2 	bl	800102c <SysTick_Config>
 80010e8:	4603      	mov	r3, r0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010f2:	b480      	push	{r7}
 80010f4:	b085      	sub	sp, #20
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010fa:	2300      	movs	r3, #0
 80010fc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001104:	b2db      	uxtb	r3, r3
 8001106:	2b02      	cmp	r3, #2
 8001108:	d008      	beq.n	800111c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2204      	movs	r2, #4
 800110e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e040      	b.n	800119e <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f022 020e 	bic.w	r2, r2, #14
 800112a:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001136:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800113a:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f022 0201 	bic.w	r2, r2, #1
 800114a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001150:	f003 021c 	and.w	r2, r3, #28
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001158:	2101      	movs	r1, #1
 800115a:	fa01 f202 	lsl.w	r2, r1, r2
 800115e:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001168:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800116e:	2b00      	cmp	r3, #0
 8001170:	d00c      	beq.n	800118c <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800117c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001180:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800118a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2201      	movs	r2, #1
 8001190:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800119c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3714      	adds	r7, #20
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b084      	sub	sp, #16
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011b2:	2300      	movs	r3, #0
 80011b4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d005      	beq.n	80011ce <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2204      	movs	r2, #4
 80011c6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	73fb      	strb	r3, [r7, #15]
 80011cc:	e047      	b.n	800125e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f022 020e 	bic.w	r2, r2, #14
 80011dc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f022 0201 	bic.w	r2, r2, #1
 80011ec:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	f003 021c 	and.w	r2, r3, #28
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	2101      	movs	r1, #1
 800120c:	fa01 f202 	lsl.w	r2, r1, r2
 8001210:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800121a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001220:	2b00      	cmp	r3, #0
 8001222:	d00c      	beq.n	800123e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800122e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001232:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800123c:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2201      	movs	r2, #1
 8001242:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2200      	movs	r2, #0
 800124a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001252:	2b00      	cmp	r3, #0
 8001254:	d003      	beq.n	800125e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	4798      	blx	r3
    }
  }
  return status;
 800125e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001268:	b480      	push	{r7}
 800126a:	b087      	sub	sp, #28
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001272:	2300      	movs	r3, #0
 8001274:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001276:	e166      	b.n	8001546 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	2101      	movs	r1, #1
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	fa01 f303 	lsl.w	r3, r1, r3
 8001284:	4013      	ands	r3, r2
 8001286:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	2b00      	cmp	r3, #0
 800128c:	f000 8158 	beq.w	8001540 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f003 0303 	and.w	r3, r3, #3
 8001298:	2b01      	cmp	r3, #1
 800129a:	d005      	beq.n	80012a8 <HAL_GPIO_Init+0x40>
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f003 0303 	and.w	r3, r3, #3
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d130      	bne.n	800130a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	2203      	movs	r2, #3
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	4013      	ands	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	68da      	ldr	r2, [r3, #12]
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012de:	2201      	movs	r2, #1
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43db      	mvns	r3, r3
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	4013      	ands	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	091b      	lsrs	r3, r3, #4
 80012f4:	f003 0201 	and.w	r2, r3, #1
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	4313      	orrs	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f003 0303 	and.w	r3, r3, #3
 8001312:	2b03      	cmp	r3, #3
 8001314:	d017      	beq.n	8001346 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	2203      	movs	r2, #3
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43db      	mvns	r3, r3
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	4013      	ands	r3, r2
 800132c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	689a      	ldr	r2, [r3, #8]
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	4313      	orrs	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f003 0303 	and.w	r3, r3, #3
 800134e:	2b02      	cmp	r3, #2
 8001350:	d123      	bne.n	800139a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	08da      	lsrs	r2, r3, #3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	3208      	adds	r2, #8
 800135a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800135e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	f003 0307 	and.w	r3, r3, #7
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	220f      	movs	r2, #15
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43db      	mvns	r3, r3
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	4013      	ands	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	691a      	ldr	r2, [r3, #16]
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	f003 0307 	and.w	r3, r3, #7
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	4313      	orrs	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	08da      	lsrs	r2, r3, #3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3208      	adds	r2, #8
 8001394:	6939      	ldr	r1, [r7, #16]
 8001396:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	2203      	movs	r2, #3
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43db      	mvns	r3, r3
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	4013      	ands	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f003 0203 	and.w	r2, r3, #3
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f000 80b2 	beq.w	8001540 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013dc:	4b61      	ldr	r3, [pc, #388]	; (8001564 <HAL_GPIO_Init+0x2fc>)
 80013de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013e0:	4a60      	ldr	r2, [pc, #384]	; (8001564 <HAL_GPIO_Init+0x2fc>)
 80013e2:	f043 0301 	orr.w	r3, r3, #1
 80013e6:	6613      	str	r3, [r2, #96]	; 0x60
 80013e8:	4b5e      	ldr	r3, [pc, #376]	; (8001564 <HAL_GPIO_Init+0x2fc>)
 80013ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	60bb      	str	r3, [r7, #8]
 80013f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013f4:	4a5c      	ldr	r2, [pc, #368]	; (8001568 <HAL_GPIO_Init+0x300>)
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	089b      	lsrs	r3, r3, #2
 80013fa:	3302      	adds	r3, #2
 80013fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001400:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	f003 0303 	and.w	r3, r3, #3
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	220f      	movs	r2, #15
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	43db      	mvns	r3, r3
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	4013      	ands	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800141e:	d02b      	beq.n	8001478 <HAL_GPIO_Init+0x210>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4a52      	ldr	r2, [pc, #328]	; (800156c <HAL_GPIO_Init+0x304>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d025      	beq.n	8001474 <HAL_GPIO_Init+0x20c>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4a51      	ldr	r2, [pc, #324]	; (8001570 <HAL_GPIO_Init+0x308>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d01f      	beq.n	8001470 <HAL_GPIO_Init+0x208>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4a50      	ldr	r2, [pc, #320]	; (8001574 <HAL_GPIO_Init+0x30c>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d019      	beq.n	800146c <HAL_GPIO_Init+0x204>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4a4f      	ldr	r2, [pc, #316]	; (8001578 <HAL_GPIO_Init+0x310>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d013      	beq.n	8001468 <HAL_GPIO_Init+0x200>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4a4e      	ldr	r2, [pc, #312]	; (800157c <HAL_GPIO_Init+0x314>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d00d      	beq.n	8001464 <HAL_GPIO_Init+0x1fc>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4a4d      	ldr	r2, [pc, #308]	; (8001580 <HAL_GPIO_Init+0x318>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d007      	beq.n	8001460 <HAL_GPIO_Init+0x1f8>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a4c      	ldr	r2, [pc, #304]	; (8001584 <HAL_GPIO_Init+0x31c>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d101      	bne.n	800145c <HAL_GPIO_Init+0x1f4>
 8001458:	2307      	movs	r3, #7
 800145a:	e00e      	b.n	800147a <HAL_GPIO_Init+0x212>
 800145c:	2308      	movs	r3, #8
 800145e:	e00c      	b.n	800147a <HAL_GPIO_Init+0x212>
 8001460:	2306      	movs	r3, #6
 8001462:	e00a      	b.n	800147a <HAL_GPIO_Init+0x212>
 8001464:	2305      	movs	r3, #5
 8001466:	e008      	b.n	800147a <HAL_GPIO_Init+0x212>
 8001468:	2304      	movs	r3, #4
 800146a:	e006      	b.n	800147a <HAL_GPIO_Init+0x212>
 800146c:	2303      	movs	r3, #3
 800146e:	e004      	b.n	800147a <HAL_GPIO_Init+0x212>
 8001470:	2302      	movs	r3, #2
 8001472:	e002      	b.n	800147a <HAL_GPIO_Init+0x212>
 8001474:	2301      	movs	r3, #1
 8001476:	e000      	b.n	800147a <HAL_GPIO_Init+0x212>
 8001478:	2300      	movs	r3, #0
 800147a:	697a      	ldr	r2, [r7, #20]
 800147c:	f002 0203 	and.w	r2, r2, #3
 8001480:	0092      	lsls	r2, r2, #2
 8001482:	4093      	lsls	r3, r2
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	4313      	orrs	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800148a:	4937      	ldr	r1, [pc, #220]	; (8001568 <HAL_GPIO_Init+0x300>)
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	089b      	lsrs	r3, r3, #2
 8001490:	3302      	adds	r3, #2
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001498:	4b3b      	ldr	r3, [pc, #236]	; (8001588 <HAL_GPIO_Init+0x320>)
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	43db      	mvns	r3, r3
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	4013      	ands	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d003      	beq.n	80014bc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014bc:	4a32      	ldr	r2, [pc, #200]	; (8001588 <HAL_GPIO_Init+0x320>)
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014c2:	4b31      	ldr	r3, [pc, #196]	; (8001588 <HAL_GPIO_Init+0x320>)
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	43db      	mvns	r3, r3
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	4013      	ands	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014e6:	4a28      	ldr	r2, [pc, #160]	; (8001588 <HAL_GPIO_Init+0x320>)
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80014ec:	4b26      	ldr	r3, [pc, #152]	; (8001588 <HAL_GPIO_Init+0x320>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	43db      	mvns	r3, r3
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	4013      	ands	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d003      	beq.n	8001510 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	4313      	orrs	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001510:	4a1d      	ldr	r2, [pc, #116]	; (8001588 <HAL_GPIO_Init+0x320>)
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001516:	4b1c      	ldr	r3, [pc, #112]	; (8001588 <HAL_GPIO_Init+0x320>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	43db      	mvns	r3, r3
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	4013      	ands	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d003      	beq.n	800153a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	4313      	orrs	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800153a:	4a13      	ldr	r2, [pc, #76]	; (8001588 <HAL_GPIO_Init+0x320>)
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	3301      	adds	r3, #1
 8001544:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	fa22 f303 	lsr.w	r3, r2, r3
 8001550:	2b00      	cmp	r3, #0
 8001552:	f47f ae91 	bne.w	8001278 <HAL_GPIO_Init+0x10>
  }
}
 8001556:	bf00      	nop
 8001558:	bf00      	nop
 800155a:	371c      	adds	r7, #28
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	40021000 	.word	0x40021000
 8001568:	40010000 	.word	0x40010000
 800156c:	48000400 	.word	0x48000400
 8001570:	48000800 	.word	0x48000800
 8001574:	48000c00 	.word	0x48000c00
 8001578:	48001000 	.word	0x48001000
 800157c:	48001400 	.word	0x48001400
 8001580:	48001800 	.word	0x48001800
 8001584:	48001c00 	.word	0x48001c00
 8001588:	40010400 	.word	0x40010400

0800158c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001590:	4b0d      	ldr	r3, [pc, #52]	; (80015c8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001598:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800159c:	d102      	bne.n	80015a4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800159e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015a2:	e00b      	b.n	80015bc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80015a4:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80015a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015b2:	d102      	bne.n	80015ba <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80015b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015b8:	e000      	b.n	80015bc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80015ba:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80015bc:	4618      	mov	r0, r3
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	40007000 	.word	0x40007000

080015cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d141      	bne.n	800165e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80015da:	4b4b      	ldr	r3, [pc, #300]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015e6:	d131      	bne.n	800164c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015e8:	4b47      	ldr	r3, [pc, #284]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015ee:	4a46      	ldr	r2, [pc, #280]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015f8:	4b43      	ldr	r3, [pc, #268]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001600:	4a41      	ldr	r2, [pc, #260]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001602:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001606:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001608:	4b40      	ldr	r3, [pc, #256]	; (800170c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2232      	movs	r2, #50	; 0x32
 800160e:	fb02 f303 	mul.w	r3, r2, r3
 8001612:	4a3f      	ldr	r2, [pc, #252]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001614:	fba2 2303 	umull	r2, r3, r2, r3
 8001618:	0c9b      	lsrs	r3, r3, #18
 800161a:	3301      	adds	r3, #1
 800161c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800161e:	e002      	b.n	8001626 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	3b01      	subs	r3, #1
 8001624:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001626:	4b38      	ldr	r3, [pc, #224]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800162e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001632:	d102      	bne.n	800163a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1f2      	bne.n	8001620 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800163a:	4b33      	ldr	r3, [pc, #204]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001642:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001646:	d158      	bne.n	80016fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e057      	b.n	80016fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800164c:	4b2e      	ldr	r3, [pc, #184]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800164e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001652:	4a2d      	ldr	r2, [pc, #180]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001654:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001658:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800165c:	e04d      	b.n	80016fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001664:	d141      	bne.n	80016ea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001666:	4b28      	ldr	r3, [pc, #160]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800166e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001672:	d131      	bne.n	80016d8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001674:	4b24      	ldr	r3, [pc, #144]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001676:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800167a:	4a23      	ldr	r2, [pc, #140]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800167c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001680:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001684:	4b20      	ldr	r3, [pc, #128]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800168c:	4a1e      	ldr	r2, [pc, #120]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800168e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001692:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001694:	4b1d      	ldr	r3, [pc, #116]	; (800170c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2232      	movs	r2, #50	; 0x32
 800169a:	fb02 f303 	mul.w	r3, r2, r3
 800169e:	4a1c      	ldr	r2, [pc, #112]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80016a0:	fba2 2303 	umull	r2, r3, r2, r3
 80016a4:	0c9b      	lsrs	r3, r3, #18
 80016a6:	3301      	adds	r3, #1
 80016a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016aa:	e002      	b.n	80016b2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016b2:	4b15      	ldr	r3, [pc, #84]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016be:	d102      	bne.n	80016c6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1f2      	bne.n	80016ac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016c6:	4b10      	ldr	r3, [pc, #64]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016d2:	d112      	bne.n	80016fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e011      	b.n	80016fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016d8:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016de:	4a0a      	ldr	r2, [pc, #40]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80016e8:	e007      	b.n	80016fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80016ea:	4b07      	ldr	r3, [pc, #28]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016f2:	4a05      	ldr	r2, [pc, #20]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016f8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80016fa:	2300      	movs	r3, #0
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	40007000 	.word	0x40007000
 800170c:	20000000 	.word	0x20000000
 8001710:	431bde83 	.word	0x431bde83

08001714 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001718:	4b05      	ldr	r3, [pc, #20]	; (8001730 <HAL_PWREx_EnableVddIO2+0x1c>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	4a04      	ldr	r2, [pc, #16]	; (8001730 <HAL_PWREx_EnableVddIO2+0x1c>)
 800171e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001722:	6053      	str	r3, [r2, #4]
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	40007000 	.word	0x40007000

08001734 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b088      	sub	sp, #32
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d102      	bne.n	8001748 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	f000 bc08 	b.w	8001f58 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001748:	4b96      	ldr	r3, [pc, #600]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f003 030c 	and.w	r3, r3, #12
 8001750:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001752:	4b94      	ldr	r3, [pc, #592]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	f003 0303 	and.w	r3, r3, #3
 800175a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0310 	and.w	r3, r3, #16
 8001764:	2b00      	cmp	r3, #0
 8001766:	f000 80e4 	beq.w	8001932 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d007      	beq.n	8001780 <HAL_RCC_OscConfig+0x4c>
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	2b0c      	cmp	r3, #12
 8001774:	f040 808b 	bne.w	800188e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	2b01      	cmp	r3, #1
 800177c:	f040 8087 	bne.w	800188e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001780:	4b88      	ldr	r3, [pc, #544]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d005      	beq.n	8001798 <HAL_RCC_OscConfig+0x64>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d101      	bne.n	8001798 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e3df      	b.n	8001f58 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a1a      	ldr	r2, [r3, #32]
 800179c:	4b81      	ldr	r3, [pc, #516]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0308 	and.w	r3, r3, #8
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d004      	beq.n	80017b2 <HAL_RCC_OscConfig+0x7e>
 80017a8:	4b7e      	ldr	r3, [pc, #504]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017b0:	e005      	b.n	80017be <HAL_RCC_OscConfig+0x8a>
 80017b2:	4b7c      	ldr	r3, [pc, #496]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 80017b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017b8:	091b      	lsrs	r3, r3, #4
 80017ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017be:	4293      	cmp	r3, r2
 80017c0:	d223      	bcs.n	800180a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a1b      	ldr	r3, [r3, #32]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f000 fdcc 	bl	8002364 <RCC_SetFlashLatencyFromMSIRange>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e3c0      	b.n	8001f58 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017d6:	4b73      	ldr	r3, [pc, #460]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a72      	ldr	r2, [pc, #456]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 80017dc:	f043 0308 	orr.w	r3, r3, #8
 80017e0:	6013      	str	r3, [r2, #0]
 80017e2:	4b70      	ldr	r3, [pc, #448]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a1b      	ldr	r3, [r3, #32]
 80017ee:	496d      	ldr	r1, [pc, #436]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 80017f0:	4313      	orrs	r3, r2
 80017f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017f4:	4b6b      	ldr	r3, [pc, #428]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	69db      	ldr	r3, [r3, #28]
 8001800:	021b      	lsls	r3, r3, #8
 8001802:	4968      	ldr	r1, [pc, #416]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 8001804:	4313      	orrs	r3, r2
 8001806:	604b      	str	r3, [r1, #4]
 8001808:	e025      	b.n	8001856 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800180a:	4b66      	ldr	r3, [pc, #408]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a65      	ldr	r2, [pc, #404]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 8001810:	f043 0308 	orr.w	r3, r3, #8
 8001814:	6013      	str	r3, [r2, #0]
 8001816:	4b63      	ldr	r3, [pc, #396]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a1b      	ldr	r3, [r3, #32]
 8001822:	4960      	ldr	r1, [pc, #384]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 8001824:	4313      	orrs	r3, r2
 8001826:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001828:	4b5e      	ldr	r3, [pc, #376]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	69db      	ldr	r3, [r3, #28]
 8001834:	021b      	lsls	r3, r3, #8
 8001836:	495b      	ldr	r1, [pc, #364]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 8001838:	4313      	orrs	r3, r2
 800183a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d109      	bne.n	8001856 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a1b      	ldr	r3, [r3, #32]
 8001846:	4618      	mov	r0, r3
 8001848:	f000 fd8c 	bl	8002364 <RCC_SetFlashLatencyFromMSIRange>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e380      	b.n	8001f58 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001856:	f000 fcc1 	bl	80021dc <HAL_RCC_GetSysClockFreq>
 800185a:	4602      	mov	r2, r0
 800185c:	4b51      	ldr	r3, [pc, #324]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	091b      	lsrs	r3, r3, #4
 8001862:	f003 030f 	and.w	r3, r3, #15
 8001866:	4950      	ldr	r1, [pc, #320]	; (80019a8 <HAL_RCC_OscConfig+0x274>)
 8001868:	5ccb      	ldrb	r3, [r1, r3]
 800186a:	f003 031f 	and.w	r3, r3, #31
 800186e:	fa22 f303 	lsr.w	r3, r2, r3
 8001872:	4a4e      	ldr	r2, [pc, #312]	; (80019ac <HAL_RCC_OscConfig+0x278>)
 8001874:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001876:	4b4e      	ldr	r3, [pc, #312]	; (80019b0 <HAL_RCC_OscConfig+0x27c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff facc 	bl	8000e18 <HAL_InitTick>
 8001880:	4603      	mov	r3, r0
 8001882:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001884:	7bfb      	ldrb	r3, [r7, #15]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d052      	beq.n	8001930 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800188a:	7bfb      	ldrb	r3, [r7, #15]
 800188c:	e364      	b.n	8001f58 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d032      	beq.n	80018fc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001896:	4b43      	ldr	r3, [pc, #268]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a42      	ldr	r2, [pc, #264]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018a2:	f7ff fb09 	bl	8000eb8 <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018aa:	f7ff fb05 	bl	8000eb8 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e34d      	b.n	8001f58 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018bc:	4b39      	ldr	r3, [pc, #228]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d0f0      	beq.n	80018aa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018c8:	4b36      	ldr	r3, [pc, #216]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a35      	ldr	r2, [pc, #212]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 80018ce:	f043 0308 	orr.w	r3, r3, #8
 80018d2:	6013      	str	r3, [r2, #0]
 80018d4:	4b33      	ldr	r3, [pc, #204]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a1b      	ldr	r3, [r3, #32]
 80018e0:	4930      	ldr	r1, [pc, #192]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018e6:	4b2f      	ldr	r3, [pc, #188]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	69db      	ldr	r3, [r3, #28]
 80018f2:	021b      	lsls	r3, r3, #8
 80018f4:	492b      	ldr	r1, [pc, #172]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	604b      	str	r3, [r1, #4]
 80018fa:	e01a      	b.n	8001932 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018fc:	4b29      	ldr	r3, [pc, #164]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a28      	ldr	r2, [pc, #160]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 8001902:	f023 0301 	bic.w	r3, r3, #1
 8001906:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001908:	f7ff fad6 	bl	8000eb8 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001910:	f7ff fad2 	bl	8000eb8 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e31a      	b.n	8001f58 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001922:	4b20      	ldr	r3, [pc, #128]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1f0      	bne.n	8001910 <HAL_RCC_OscConfig+0x1dc>
 800192e:	e000      	b.n	8001932 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001930:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	2b00      	cmp	r3, #0
 800193c:	d073      	beq.n	8001a26 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	2b08      	cmp	r3, #8
 8001942:	d005      	beq.n	8001950 <HAL_RCC_OscConfig+0x21c>
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	2b0c      	cmp	r3, #12
 8001948:	d10e      	bne.n	8001968 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	2b03      	cmp	r3, #3
 800194e:	d10b      	bne.n	8001968 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001950:	4b14      	ldr	r3, [pc, #80]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d063      	beq.n	8001a24 <HAL_RCC_OscConfig+0x2f0>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d15f      	bne.n	8001a24 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e2f7      	b.n	8001f58 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001970:	d106      	bne.n	8001980 <HAL_RCC_OscConfig+0x24c>
 8001972:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a0b      	ldr	r2, [pc, #44]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 8001978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800197c:	6013      	str	r3, [r2, #0]
 800197e:	e025      	b.n	80019cc <HAL_RCC_OscConfig+0x298>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001988:	d114      	bne.n	80019b4 <HAL_RCC_OscConfig+0x280>
 800198a:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a05      	ldr	r2, [pc, #20]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 8001990:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001994:	6013      	str	r3, [r2, #0]
 8001996:	4b03      	ldr	r3, [pc, #12]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a02      	ldr	r2, [pc, #8]	; (80019a4 <HAL_RCC_OscConfig+0x270>)
 800199c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019a0:	6013      	str	r3, [r2, #0]
 80019a2:	e013      	b.n	80019cc <HAL_RCC_OscConfig+0x298>
 80019a4:	40021000 	.word	0x40021000
 80019a8:	0800439c 	.word	0x0800439c
 80019ac:	20000000 	.word	0x20000000
 80019b0:	20000004 	.word	0x20000004
 80019b4:	4ba0      	ldr	r3, [pc, #640]	; (8001c38 <HAL_RCC_OscConfig+0x504>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a9f      	ldr	r2, [pc, #636]	; (8001c38 <HAL_RCC_OscConfig+0x504>)
 80019ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019be:	6013      	str	r3, [r2, #0]
 80019c0:	4b9d      	ldr	r3, [pc, #628]	; (8001c38 <HAL_RCC_OscConfig+0x504>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a9c      	ldr	r2, [pc, #624]	; (8001c38 <HAL_RCC_OscConfig+0x504>)
 80019c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d013      	beq.n	80019fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d4:	f7ff fa70 	bl	8000eb8 <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019dc:	f7ff fa6c 	bl	8000eb8 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b64      	cmp	r3, #100	; 0x64
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e2b4      	b.n	8001f58 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019ee:	4b92      	ldr	r3, [pc, #584]	; (8001c38 <HAL_RCC_OscConfig+0x504>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d0f0      	beq.n	80019dc <HAL_RCC_OscConfig+0x2a8>
 80019fa:	e014      	b.n	8001a26 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fc:	f7ff fa5c 	bl	8000eb8 <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a04:	f7ff fa58 	bl	8000eb8 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b64      	cmp	r3, #100	; 0x64
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e2a0      	b.n	8001f58 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a16:	4b88      	ldr	r3, [pc, #544]	; (8001c38 <HAL_RCC_OscConfig+0x504>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1f0      	bne.n	8001a04 <HAL_RCC_OscConfig+0x2d0>
 8001a22:	e000      	b.n	8001a26 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d060      	beq.n	8001af4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	2b04      	cmp	r3, #4
 8001a36:	d005      	beq.n	8001a44 <HAL_RCC_OscConfig+0x310>
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	2b0c      	cmp	r3, #12
 8001a3c:	d119      	bne.n	8001a72 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d116      	bne.n	8001a72 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a44:	4b7c      	ldr	r3, [pc, #496]	; (8001c38 <HAL_RCC_OscConfig+0x504>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d005      	beq.n	8001a5c <HAL_RCC_OscConfig+0x328>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d101      	bne.n	8001a5c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e27d      	b.n	8001f58 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a5c:	4b76      	ldr	r3, [pc, #472]	; (8001c38 <HAL_RCC_OscConfig+0x504>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	061b      	lsls	r3, r3, #24
 8001a6a:	4973      	ldr	r1, [pc, #460]	; (8001c38 <HAL_RCC_OscConfig+0x504>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a70:	e040      	b.n	8001af4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d023      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a7a:	4b6f      	ldr	r3, [pc, #444]	; (8001c38 <HAL_RCC_OscConfig+0x504>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a6e      	ldr	r2, [pc, #440]	; (8001c38 <HAL_RCC_OscConfig+0x504>)
 8001a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a86:	f7ff fa17 	bl	8000eb8 <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a8e:	f7ff fa13 	bl	8000eb8 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e25b      	b.n	8001f58 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aa0:	4b65      	ldr	r3, [pc, #404]	; (8001c38 <HAL_RCC_OscConfig+0x504>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d0f0      	beq.n	8001a8e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aac:	4b62      	ldr	r3, [pc, #392]	; (8001c38 <HAL_RCC_OscConfig+0x504>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	061b      	lsls	r3, r3, #24
 8001aba:	495f      	ldr	r1, [pc, #380]	; (8001c38 <HAL_RCC_OscConfig+0x504>)
 8001abc:	4313      	orrs	r3, r2
 8001abe:	604b      	str	r3, [r1, #4]
 8001ac0:	e018      	b.n	8001af4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ac2:	4b5d      	ldr	r3, [pc, #372]	; (8001c38 <HAL_RCC_OscConfig+0x504>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a5c      	ldr	r2, [pc, #368]	; (8001c38 <HAL_RCC_OscConfig+0x504>)
 8001ac8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001acc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ace:	f7ff f9f3 	bl	8000eb8 <HAL_GetTick>
 8001ad2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ad6:	f7ff f9ef 	bl	8000eb8 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e237      	b.n	8001f58 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ae8:	4b53      	ldr	r3, [pc, #332]	; (8001c38 <HAL_RCC_OscConfig+0x504>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1f0      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0308 	and.w	r3, r3, #8
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d03c      	beq.n	8001b7a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	695b      	ldr	r3, [r3, #20]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d01c      	beq.n	8001b42 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b08:	4b4b      	ldr	r3, [pc, #300]	; (8001c38 <HAL_RCC_OscConfig+0x504>)
 8001b0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b0e:	4a4a      	ldr	r2, [pc, #296]	; (8001c38 <HAL_RCC_OscConfig+0x504>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b18:	f7ff f9ce 	bl	8000eb8 <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b20:	f7ff f9ca 	bl	8000eb8 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e212      	b.n	8001f58 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b32:	4b41      	ldr	r3, [pc, #260]	; (8001c38 <HAL_RCC_OscConfig+0x504>)
 8001b34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0ef      	beq.n	8001b20 <HAL_RCC_OscConfig+0x3ec>
 8001b40:	e01b      	b.n	8001b7a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b42:	4b3d      	ldr	r3, [pc, #244]	; (8001c38 <HAL_RCC_OscConfig+0x504>)
 8001b44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b48:	4a3b      	ldr	r2, [pc, #236]	; (8001c38 <HAL_RCC_OscConfig+0x504>)
 8001b4a:	f023 0301 	bic.w	r3, r3, #1
 8001b4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b52:	f7ff f9b1 	bl	8000eb8 <HAL_GetTick>
 8001b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b58:	e008      	b.n	8001b6c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b5a:	f7ff f9ad 	bl	8000eb8 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e1f5      	b.n	8001f58 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b6c:	4b32      	ldr	r3, [pc, #200]	; (8001c38 <HAL_RCC_OscConfig+0x504>)
 8001b6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1ef      	bne.n	8001b5a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0304 	and.w	r3, r3, #4
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f000 80a6 	beq.w	8001cd4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b8c:	4b2a      	ldr	r3, [pc, #168]	; (8001c38 <HAL_RCC_OscConfig+0x504>)
 8001b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d10d      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b98:	4b27      	ldr	r3, [pc, #156]	; (8001c38 <HAL_RCC_OscConfig+0x504>)
 8001b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9c:	4a26      	ldr	r2, [pc, #152]	; (8001c38 <HAL_RCC_OscConfig+0x504>)
 8001b9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ba4:	4b24      	ldr	r3, [pc, #144]	; (8001c38 <HAL_RCC_OscConfig+0x504>)
 8001ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bac:	60bb      	str	r3, [r7, #8]
 8001bae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bb4:	4b21      	ldr	r3, [pc, #132]	; (8001c3c <HAL_RCC_OscConfig+0x508>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d118      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bc0:	4b1e      	ldr	r3, [pc, #120]	; (8001c3c <HAL_RCC_OscConfig+0x508>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a1d      	ldr	r2, [pc, #116]	; (8001c3c <HAL_RCC_OscConfig+0x508>)
 8001bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bcc:	f7ff f974 	bl	8000eb8 <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bd4:	f7ff f970 	bl	8000eb8 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e1b8      	b.n	8001f58 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001be6:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <HAL_RCC_OscConfig+0x508>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d0f0      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d108      	bne.n	8001c0c <HAL_RCC_OscConfig+0x4d8>
 8001bfa:	4b0f      	ldr	r3, [pc, #60]	; (8001c38 <HAL_RCC_OscConfig+0x504>)
 8001bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c00:	4a0d      	ldr	r2, [pc, #52]	; (8001c38 <HAL_RCC_OscConfig+0x504>)
 8001c02:	f043 0301 	orr.w	r3, r3, #1
 8001c06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c0a:	e029      	b.n	8001c60 <HAL_RCC_OscConfig+0x52c>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	2b05      	cmp	r3, #5
 8001c12:	d115      	bne.n	8001c40 <HAL_RCC_OscConfig+0x50c>
 8001c14:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <HAL_RCC_OscConfig+0x504>)
 8001c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c1a:	4a07      	ldr	r2, [pc, #28]	; (8001c38 <HAL_RCC_OscConfig+0x504>)
 8001c1c:	f043 0304 	orr.w	r3, r3, #4
 8001c20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c24:	4b04      	ldr	r3, [pc, #16]	; (8001c38 <HAL_RCC_OscConfig+0x504>)
 8001c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c2a:	4a03      	ldr	r2, [pc, #12]	; (8001c38 <HAL_RCC_OscConfig+0x504>)
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c34:	e014      	b.n	8001c60 <HAL_RCC_OscConfig+0x52c>
 8001c36:	bf00      	nop
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	40007000 	.word	0x40007000
 8001c40:	4b9d      	ldr	r3, [pc, #628]	; (8001eb8 <HAL_RCC_OscConfig+0x784>)
 8001c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c46:	4a9c      	ldr	r2, [pc, #624]	; (8001eb8 <HAL_RCC_OscConfig+0x784>)
 8001c48:	f023 0301 	bic.w	r3, r3, #1
 8001c4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c50:	4b99      	ldr	r3, [pc, #612]	; (8001eb8 <HAL_RCC_OscConfig+0x784>)
 8001c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c56:	4a98      	ldr	r2, [pc, #608]	; (8001eb8 <HAL_RCC_OscConfig+0x784>)
 8001c58:	f023 0304 	bic.w	r3, r3, #4
 8001c5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d016      	beq.n	8001c96 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c68:	f7ff f926 	bl	8000eb8 <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c6e:	e00a      	b.n	8001c86 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c70:	f7ff f922 	bl	8000eb8 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e168      	b.n	8001f58 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c86:	4b8c      	ldr	r3, [pc, #560]	; (8001eb8 <HAL_RCC_OscConfig+0x784>)
 8001c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d0ed      	beq.n	8001c70 <HAL_RCC_OscConfig+0x53c>
 8001c94:	e015      	b.n	8001cc2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c96:	f7ff f90f 	bl	8000eb8 <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c9c:	e00a      	b.n	8001cb4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c9e:	f7ff f90b 	bl	8000eb8 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e151      	b.n	8001f58 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cb4:	4b80      	ldr	r3, [pc, #512]	; (8001eb8 <HAL_RCC_OscConfig+0x784>)
 8001cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1ed      	bne.n	8001c9e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cc2:	7ffb      	ldrb	r3, [r7, #31]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d105      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cc8:	4b7b      	ldr	r3, [pc, #492]	; (8001eb8 <HAL_RCC_OscConfig+0x784>)
 8001cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ccc:	4a7a      	ldr	r2, [pc, #488]	; (8001eb8 <HAL_RCC_OscConfig+0x784>)
 8001cce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cd2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0320 	and.w	r3, r3, #32
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d03c      	beq.n	8001d5a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d01c      	beq.n	8001d22 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ce8:	4b73      	ldr	r3, [pc, #460]	; (8001eb8 <HAL_RCC_OscConfig+0x784>)
 8001cea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cee:	4a72      	ldr	r2, [pc, #456]	; (8001eb8 <HAL_RCC_OscConfig+0x784>)
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf8:	f7ff f8de 	bl	8000eb8 <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d00:	f7ff f8da 	bl	8000eb8 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e122      	b.n	8001f58 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d12:	4b69      	ldr	r3, [pc, #420]	; (8001eb8 <HAL_RCC_OscConfig+0x784>)
 8001d14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d0ef      	beq.n	8001d00 <HAL_RCC_OscConfig+0x5cc>
 8001d20:	e01b      	b.n	8001d5a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d22:	4b65      	ldr	r3, [pc, #404]	; (8001eb8 <HAL_RCC_OscConfig+0x784>)
 8001d24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d28:	4a63      	ldr	r2, [pc, #396]	; (8001eb8 <HAL_RCC_OscConfig+0x784>)
 8001d2a:	f023 0301 	bic.w	r3, r3, #1
 8001d2e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d32:	f7ff f8c1 	bl	8000eb8 <HAL_GetTick>
 8001d36:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d38:	e008      	b.n	8001d4c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d3a:	f7ff f8bd 	bl	8000eb8 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e105      	b.n	8001f58 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d4c:	4b5a      	ldr	r3, [pc, #360]	; (8001eb8 <HAL_RCC_OscConfig+0x784>)
 8001d4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1ef      	bne.n	8001d3a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f000 80f9 	beq.w	8001f56 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	f040 80cf 	bne.w	8001f0c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d6e:	4b52      	ldr	r3, [pc, #328]	; (8001eb8 <HAL_RCC_OscConfig+0x784>)
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	f003 0203 	and.w	r2, r3, #3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d12c      	bne.n	8001ddc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d123      	bne.n	8001ddc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d9e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d11b      	bne.n	8001ddc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dae:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d113      	bne.n	8001ddc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dbe:	085b      	lsrs	r3, r3, #1
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d109      	bne.n	8001ddc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	085b      	lsrs	r3, r3, #1
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d071      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	2b0c      	cmp	r3, #12
 8001de0:	d068      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001de2:	4b35      	ldr	r3, [pc, #212]	; (8001eb8 <HAL_RCC_OscConfig+0x784>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d105      	bne.n	8001dfa <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001dee:	4b32      	ldr	r3, [pc, #200]	; (8001eb8 <HAL_RCC_OscConfig+0x784>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e0ac      	b.n	8001f58 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001dfe:	4b2e      	ldr	r3, [pc, #184]	; (8001eb8 <HAL_RCC_OscConfig+0x784>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a2d      	ldr	r2, [pc, #180]	; (8001eb8 <HAL_RCC_OscConfig+0x784>)
 8001e04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e08:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e0a:	f7ff f855 	bl	8000eb8 <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e10:	e008      	b.n	8001e24 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e12:	f7ff f851 	bl	8000eb8 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e099      	b.n	8001f58 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e24:	4b24      	ldr	r3, [pc, #144]	; (8001eb8 <HAL_RCC_OscConfig+0x784>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1f0      	bne.n	8001e12 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e30:	4b21      	ldr	r3, [pc, #132]	; (8001eb8 <HAL_RCC_OscConfig+0x784>)
 8001e32:	68da      	ldr	r2, [r3, #12]
 8001e34:	4b21      	ldr	r3, [pc, #132]	; (8001ebc <HAL_RCC_OscConfig+0x788>)
 8001e36:	4013      	ands	r3, r2
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e40:	3a01      	subs	r2, #1
 8001e42:	0112      	lsls	r2, r2, #4
 8001e44:	4311      	orrs	r1, r2
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e4a:	0212      	lsls	r2, r2, #8
 8001e4c:	4311      	orrs	r1, r2
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e52:	0852      	lsrs	r2, r2, #1
 8001e54:	3a01      	subs	r2, #1
 8001e56:	0552      	lsls	r2, r2, #21
 8001e58:	4311      	orrs	r1, r2
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e5e:	0852      	lsrs	r2, r2, #1
 8001e60:	3a01      	subs	r2, #1
 8001e62:	0652      	lsls	r2, r2, #25
 8001e64:	4311      	orrs	r1, r2
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e6a:	06d2      	lsls	r2, r2, #27
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	4912      	ldr	r1, [pc, #72]	; (8001eb8 <HAL_RCC_OscConfig+0x784>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e74:	4b10      	ldr	r3, [pc, #64]	; (8001eb8 <HAL_RCC_OscConfig+0x784>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a0f      	ldr	r2, [pc, #60]	; (8001eb8 <HAL_RCC_OscConfig+0x784>)
 8001e7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e7e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e80:	4b0d      	ldr	r3, [pc, #52]	; (8001eb8 <HAL_RCC_OscConfig+0x784>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	4a0c      	ldr	r2, [pc, #48]	; (8001eb8 <HAL_RCC_OscConfig+0x784>)
 8001e86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e8a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e8c:	f7ff f814 	bl	8000eb8 <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e94:	f7ff f810 	bl	8000eb8 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e058      	b.n	8001f58 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ea6:	4b04      	ldr	r3, [pc, #16]	; (8001eb8 <HAL_RCC_OscConfig+0x784>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0f0      	beq.n	8001e94 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001eb2:	e050      	b.n	8001f56 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e04f      	b.n	8001f58 <HAL_RCC_OscConfig+0x824>
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ec0:	4b27      	ldr	r3, [pc, #156]	; (8001f60 <HAL_RCC_OscConfig+0x82c>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d144      	bne.n	8001f56 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ecc:	4b24      	ldr	r3, [pc, #144]	; (8001f60 <HAL_RCC_OscConfig+0x82c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a23      	ldr	r2, [pc, #140]	; (8001f60 <HAL_RCC_OscConfig+0x82c>)
 8001ed2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ed6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ed8:	4b21      	ldr	r3, [pc, #132]	; (8001f60 <HAL_RCC_OscConfig+0x82c>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	4a20      	ldr	r2, [pc, #128]	; (8001f60 <HAL_RCC_OscConfig+0x82c>)
 8001ede:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ee2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ee4:	f7fe ffe8 	bl	8000eb8 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eec:	f7fe ffe4 	bl	8000eb8 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e02c      	b.n	8001f58 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001efe:	4b18      	ldr	r3, [pc, #96]	; (8001f60 <HAL_RCC_OscConfig+0x82c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d0f0      	beq.n	8001eec <HAL_RCC_OscConfig+0x7b8>
 8001f0a:	e024      	b.n	8001f56 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	2b0c      	cmp	r3, #12
 8001f10:	d01f      	beq.n	8001f52 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f12:	4b13      	ldr	r3, [pc, #76]	; (8001f60 <HAL_RCC_OscConfig+0x82c>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a12      	ldr	r2, [pc, #72]	; (8001f60 <HAL_RCC_OscConfig+0x82c>)
 8001f18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1e:	f7fe ffcb 	bl	8000eb8 <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f26:	f7fe ffc7 	bl	8000eb8 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e00f      	b.n	8001f58 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f38:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <HAL_RCC_OscConfig+0x82c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1f0      	bne.n	8001f26 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f44:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <HAL_RCC_OscConfig+0x82c>)
 8001f46:	68da      	ldr	r2, [r3, #12]
 8001f48:	4905      	ldr	r1, [pc, #20]	; (8001f60 <HAL_RCC_OscConfig+0x82c>)
 8001f4a:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <HAL_RCC_OscConfig+0x830>)
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	60cb      	str	r3, [r1, #12]
 8001f50:	e001      	b.n	8001f56 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e000      	b.n	8001f58 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3720      	adds	r7, #32
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40021000 	.word	0x40021000
 8001f64:	feeefffc 	.word	0xfeeefffc

08001f68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d101      	bne.n	8001f80 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e11d      	b.n	80021bc <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f80:	4b90      	ldr	r3, [pc, #576]	; (80021c4 <HAL_RCC_ClockConfig+0x25c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 030f 	and.w	r3, r3, #15
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d910      	bls.n	8001fb0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8e:	4b8d      	ldr	r3, [pc, #564]	; (80021c4 <HAL_RCC_ClockConfig+0x25c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f023 020f 	bic.w	r2, r3, #15
 8001f96:	498b      	ldr	r1, [pc, #556]	; (80021c4 <HAL_RCC_ClockConfig+0x25c>)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9e:	4b89      	ldr	r3, [pc, #548]	; (80021c4 <HAL_RCC_ClockConfig+0x25c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d001      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e105      	b.n	80021bc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d010      	beq.n	8001fde <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	4b81      	ldr	r3, [pc, #516]	; (80021c8 <HAL_RCC_ClockConfig+0x260>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d908      	bls.n	8001fde <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fcc:	4b7e      	ldr	r3, [pc, #504]	; (80021c8 <HAL_RCC_ClockConfig+0x260>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	497b      	ldr	r1, [pc, #492]	; (80021c8 <HAL_RCC_ClockConfig+0x260>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d079      	beq.n	80020de <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2b03      	cmp	r3, #3
 8001ff0:	d11e      	bne.n	8002030 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ff2:	4b75      	ldr	r3, [pc, #468]	; (80021c8 <HAL_RCC_ClockConfig+0x260>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e0dc      	b.n	80021bc <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002002:	f000 fa09 	bl	8002418 <RCC_GetSysClockFreqFromPLLSource>
 8002006:	4603      	mov	r3, r0
 8002008:	4a70      	ldr	r2, [pc, #448]	; (80021cc <HAL_RCC_ClockConfig+0x264>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d946      	bls.n	800209c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800200e:	4b6e      	ldr	r3, [pc, #440]	; (80021c8 <HAL_RCC_ClockConfig+0x260>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d140      	bne.n	800209c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800201a:	4b6b      	ldr	r3, [pc, #428]	; (80021c8 <HAL_RCC_ClockConfig+0x260>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002022:	4a69      	ldr	r2, [pc, #420]	; (80021c8 <HAL_RCC_ClockConfig+0x260>)
 8002024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002028:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800202a:	2380      	movs	r3, #128	; 0x80
 800202c:	617b      	str	r3, [r7, #20]
 800202e:	e035      	b.n	800209c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	2b02      	cmp	r3, #2
 8002036:	d107      	bne.n	8002048 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002038:	4b63      	ldr	r3, [pc, #396]	; (80021c8 <HAL_RCC_ClockConfig+0x260>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d115      	bne.n	8002070 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e0b9      	b.n	80021bc <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d107      	bne.n	8002060 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002050:	4b5d      	ldr	r3, [pc, #372]	; (80021c8 <HAL_RCC_ClockConfig+0x260>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d109      	bne.n	8002070 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e0ad      	b.n	80021bc <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002060:	4b59      	ldr	r3, [pc, #356]	; (80021c8 <HAL_RCC_ClockConfig+0x260>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002068:	2b00      	cmp	r3, #0
 800206a:	d101      	bne.n	8002070 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e0a5      	b.n	80021bc <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002070:	f000 f8b4 	bl	80021dc <HAL_RCC_GetSysClockFreq>
 8002074:	4603      	mov	r3, r0
 8002076:	4a55      	ldr	r2, [pc, #340]	; (80021cc <HAL_RCC_ClockConfig+0x264>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d90f      	bls.n	800209c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800207c:	4b52      	ldr	r3, [pc, #328]	; (80021c8 <HAL_RCC_ClockConfig+0x260>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d109      	bne.n	800209c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002088:	4b4f      	ldr	r3, [pc, #316]	; (80021c8 <HAL_RCC_ClockConfig+0x260>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002090:	4a4d      	ldr	r2, [pc, #308]	; (80021c8 <HAL_RCC_ClockConfig+0x260>)
 8002092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002096:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002098:	2380      	movs	r3, #128	; 0x80
 800209a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800209c:	4b4a      	ldr	r3, [pc, #296]	; (80021c8 <HAL_RCC_ClockConfig+0x260>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f023 0203 	bic.w	r2, r3, #3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	4947      	ldr	r1, [pc, #284]	; (80021c8 <HAL_RCC_ClockConfig+0x260>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020ae:	f7fe ff03 	bl	8000eb8 <HAL_GetTick>
 80020b2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b4:	e00a      	b.n	80020cc <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b6:	f7fe feff 	bl	8000eb8 <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e077      	b.n	80021bc <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020cc:	4b3e      	ldr	r3, [pc, #248]	; (80021c8 <HAL_RCC_ClockConfig+0x260>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f003 020c 	and.w	r2, r3, #12
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	429a      	cmp	r2, r3
 80020dc:	d1eb      	bne.n	80020b6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	2b80      	cmp	r3, #128	; 0x80
 80020e2:	d105      	bne.n	80020f0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80020e4:	4b38      	ldr	r3, [pc, #224]	; (80021c8 <HAL_RCC_ClockConfig+0x260>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	4a37      	ldr	r2, [pc, #220]	; (80021c8 <HAL_RCC_ClockConfig+0x260>)
 80020ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020ee:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d010      	beq.n	800211e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	4b31      	ldr	r3, [pc, #196]	; (80021c8 <HAL_RCC_ClockConfig+0x260>)
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002108:	429a      	cmp	r2, r3
 800210a:	d208      	bcs.n	800211e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800210c:	4b2e      	ldr	r3, [pc, #184]	; (80021c8 <HAL_RCC_ClockConfig+0x260>)
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	492b      	ldr	r1, [pc, #172]	; (80021c8 <HAL_RCC_ClockConfig+0x260>)
 800211a:	4313      	orrs	r3, r2
 800211c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800211e:	4b29      	ldr	r3, [pc, #164]	; (80021c4 <HAL_RCC_ClockConfig+0x25c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d210      	bcs.n	800214e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212c:	4b25      	ldr	r3, [pc, #148]	; (80021c4 <HAL_RCC_ClockConfig+0x25c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f023 020f 	bic.w	r2, r3, #15
 8002134:	4923      	ldr	r1, [pc, #140]	; (80021c4 <HAL_RCC_ClockConfig+0x25c>)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	4313      	orrs	r3, r2
 800213a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800213c:	4b21      	ldr	r3, [pc, #132]	; (80021c4 <HAL_RCC_ClockConfig+0x25c>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 030f 	and.w	r3, r3, #15
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	429a      	cmp	r2, r3
 8002148:	d001      	beq.n	800214e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e036      	b.n	80021bc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0304 	and.w	r3, r3, #4
 8002156:	2b00      	cmp	r3, #0
 8002158:	d008      	beq.n	800216c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800215a:	4b1b      	ldr	r3, [pc, #108]	; (80021c8 <HAL_RCC_ClockConfig+0x260>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	4918      	ldr	r1, [pc, #96]	; (80021c8 <HAL_RCC_ClockConfig+0x260>)
 8002168:	4313      	orrs	r3, r2
 800216a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0308 	and.w	r3, r3, #8
 8002174:	2b00      	cmp	r3, #0
 8002176:	d009      	beq.n	800218c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002178:	4b13      	ldr	r3, [pc, #76]	; (80021c8 <HAL_RCC_ClockConfig+0x260>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	4910      	ldr	r1, [pc, #64]	; (80021c8 <HAL_RCC_ClockConfig+0x260>)
 8002188:	4313      	orrs	r3, r2
 800218a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800218c:	f000 f826 	bl	80021dc <HAL_RCC_GetSysClockFreq>
 8002190:	4602      	mov	r2, r0
 8002192:	4b0d      	ldr	r3, [pc, #52]	; (80021c8 <HAL_RCC_ClockConfig+0x260>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	091b      	lsrs	r3, r3, #4
 8002198:	f003 030f 	and.w	r3, r3, #15
 800219c:	490c      	ldr	r1, [pc, #48]	; (80021d0 <HAL_RCC_ClockConfig+0x268>)
 800219e:	5ccb      	ldrb	r3, [r1, r3]
 80021a0:	f003 031f 	and.w	r3, r3, #31
 80021a4:	fa22 f303 	lsr.w	r3, r2, r3
 80021a8:	4a0a      	ldr	r2, [pc, #40]	; (80021d4 <HAL_RCC_ClockConfig+0x26c>)
 80021aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021ac:	4b0a      	ldr	r3, [pc, #40]	; (80021d8 <HAL_RCC_ClockConfig+0x270>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7fe fe31 	bl	8000e18 <HAL_InitTick>
 80021b6:	4603      	mov	r3, r0
 80021b8:	73fb      	strb	r3, [r7, #15]

  return status;
 80021ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3718      	adds	r7, #24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40022000 	.word	0x40022000
 80021c8:	40021000 	.word	0x40021000
 80021cc:	04c4b400 	.word	0x04c4b400
 80021d0:	0800439c 	.word	0x0800439c
 80021d4:	20000000 	.word	0x20000000
 80021d8:	20000004 	.word	0x20000004

080021dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	b089      	sub	sp, #36	; 0x24
 80021e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	61fb      	str	r3, [r7, #28]
 80021e6:	2300      	movs	r3, #0
 80021e8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021ea:	4b3e      	ldr	r3, [pc, #248]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f003 030c 	and.w	r3, r3, #12
 80021f2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021f4:	4b3b      	ldr	r3, [pc, #236]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	f003 0303 	and.w	r3, r3, #3
 80021fc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d005      	beq.n	8002210 <HAL_RCC_GetSysClockFreq+0x34>
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	2b0c      	cmp	r3, #12
 8002208:	d121      	bne.n	800224e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d11e      	bne.n	800224e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002210:	4b34      	ldr	r3, [pc, #208]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0308 	and.w	r3, r3, #8
 8002218:	2b00      	cmp	r3, #0
 800221a:	d107      	bne.n	800222c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800221c:	4b31      	ldr	r3, [pc, #196]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800221e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002222:	0a1b      	lsrs	r3, r3, #8
 8002224:	f003 030f 	and.w	r3, r3, #15
 8002228:	61fb      	str	r3, [r7, #28]
 800222a:	e005      	b.n	8002238 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800222c:	4b2d      	ldr	r3, [pc, #180]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	091b      	lsrs	r3, r3, #4
 8002232:	f003 030f 	and.w	r3, r3, #15
 8002236:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002238:	4a2b      	ldr	r2, [pc, #172]	; (80022e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002240:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d10d      	bne.n	8002264 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800224c:	e00a      	b.n	8002264 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	2b04      	cmp	r3, #4
 8002252:	d102      	bne.n	800225a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002254:	4b25      	ldr	r3, [pc, #148]	; (80022ec <HAL_RCC_GetSysClockFreq+0x110>)
 8002256:	61bb      	str	r3, [r7, #24]
 8002258:	e004      	b.n	8002264 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	2b08      	cmp	r3, #8
 800225e:	d101      	bne.n	8002264 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002260:	4b23      	ldr	r3, [pc, #140]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002262:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	2b0c      	cmp	r3, #12
 8002268:	d134      	bne.n	80022d4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800226a:	4b1e      	ldr	r3, [pc, #120]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	f003 0303 	and.w	r3, r3, #3
 8002272:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	2b02      	cmp	r3, #2
 8002278:	d003      	beq.n	8002282 <HAL_RCC_GetSysClockFreq+0xa6>
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	2b03      	cmp	r3, #3
 800227e:	d003      	beq.n	8002288 <HAL_RCC_GetSysClockFreq+0xac>
 8002280:	e005      	b.n	800228e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002282:	4b1a      	ldr	r3, [pc, #104]	; (80022ec <HAL_RCC_GetSysClockFreq+0x110>)
 8002284:	617b      	str	r3, [r7, #20]
      break;
 8002286:	e005      	b.n	8002294 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002288:	4b19      	ldr	r3, [pc, #100]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x114>)
 800228a:	617b      	str	r3, [r7, #20]
      break;
 800228c:	e002      	b.n	8002294 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	617b      	str	r3, [r7, #20]
      break;
 8002292:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002294:	4b13      	ldr	r3, [pc, #76]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	091b      	lsrs	r3, r3, #4
 800229a:	f003 030f 	and.w	r3, r3, #15
 800229e:	3301      	adds	r3, #1
 80022a0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80022a2:	4b10      	ldr	r3, [pc, #64]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	0a1b      	lsrs	r3, r3, #8
 80022a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022ac:	697a      	ldr	r2, [r7, #20]
 80022ae:	fb03 f202 	mul.w	r2, r3, r2
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022ba:	4b0a      	ldr	r3, [pc, #40]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	0e5b      	lsrs	r3, r3, #25
 80022c0:	f003 0303 	and.w	r3, r3, #3
 80022c4:	3301      	adds	r3, #1
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80022d4:	69bb      	ldr	r3, [r7, #24]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3724      	adds	r7, #36	; 0x24
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	40021000 	.word	0x40021000
 80022e8:	080043b4 	.word	0x080043b4
 80022ec:	00f42400 	.word	0x00f42400
 80022f0:	007a1200 	.word	0x007a1200

080022f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022f8:	4b03      	ldr	r3, [pc, #12]	; (8002308 <HAL_RCC_GetHCLKFreq+0x14>)
 80022fa:	681b      	ldr	r3, [r3, #0]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	20000000 	.word	0x20000000

0800230c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002310:	f7ff fff0 	bl	80022f4 <HAL_RCC_GetHCLKFreq>
 8002314:	4602      	mov	r2, r0
 8002316:	4b06      	ldr	r3, [pc, #24]	; (8002330 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	0a1b      	lsrs	r3, r3, #8
 800231c:	f003 0307 	and.w	r3, r3, #7
 8002320:	4904      	ldr	r1, [pc, #16]	; (8002334 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002322:	5ccb      	ldrb	r3, [r1, r3]
 8002324:	f003 031f 	and.w	r3, r3, #31
 8002328:	fa22 f303 	lsr.w	r3, r2, r3
}
 800232c:	4618      	mov	r0, r3
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40021000 	.word	0x40021000
 8002334:	080043ac 	.word	0x080043ac

08002338 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800233c:	f7ff ffda 	bl	80022f4 <HAL_RCC_GetHCLKFreq>
 8002340:	4602      	mov	r2, r0
 8002342:	4b06      	ldr	r3, [pc, #24]	; (800235c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	0adb      	lsrs	r3, r3, #11
 8002348:	f003 0307 	and.w	r3, r3, #7
 800234c:	4904      	ldr	r1, [pc, #16]	; (8002360 <HAL_RCC_GetPCLK2Freq+0x28>)
 800234e:	5ccb      	ldrb	r3, [r1, r3]
 8002350:	f003 031f 	and.w	r3, r3, #31
 8002354:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002358:	4618      	mov	r0, r3
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40021000 	.word	0x40021000
 8002360:	080043ac 	.word	0x080043ac

08002364 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800236c:	2300      	movs	r3, #0
 800236e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002370:	4b27      	ldr	r3, [pc, #156]	; (8002410 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d003      	beq.n	8002384 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800237c:	f7ff f906 	bl	800158c <HAL_PWREx_GetVoltageRange>
 8002380:	6178      	str	r0, [r7, #20]
 8002382:	e014      	b.n	80023ae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002384:	4b22      	ldr	r3, [pc, #136]	; (8002410 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002388:	4a21      	ldr	r2, [pc, #132]	; (8002410 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800238a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800238e:	6593      	str	r3, [r2, #88]	; 0x58
 8002390:	4b1f      	ldr	r3, [pc, #124]	; (8002410 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002398:	60fb      	str	r3, [r7, #12]
 800239a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800239c:	f7ff f8f6 	bl	800158c <HAL_PWREx_GetVoltageRange>
 80023a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80023a2:	4b1b      	ldr	r3, [pc, #108]	; (8002410 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80023a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a6:	4a1a      	ldr	r2, [pc, #104]	; (8002410 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80023a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023b4:	d10b      	bne.n	80023ce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2b80      	cmp	r3, #128	; 0x80
 80023ba:	d913      	bls.n	80023e4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2ba0      	cmp	r3, #160	; 0xa0
 80023c0:	d902      	bls.n	80023c8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023c2:	2302      	movs	r3, #2
 80023c4:	613b      	str	r3, [r7, #16]
 80023c6:	e00d      	b.n	80023e4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023c8:	2301      	movs	r3, #1
 80023ca:	613b      	str	r3, [r7, #16]
 80023cc:	e00a      	b.n	80023e4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2b7f      	cmp	r3, #127	; 0x7f
 80023d2:	d902      	bls.n	80023da <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80023d4:	2302      	movs	r3, #2
 80023d6:	613b      	str	r3, [r7, #16]
 80023d8:	e004      	b.n	80023e4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2b70      	cmp	r3, #112	; 0x70
 80023de:	d101      	bne.n	80023e4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023e0:	2301      	movs	r3, #1
 80023e2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80023e4:	4b0b      	ldr	r3, [pc, #44]	; (8002414 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f023 020f 	bic.w	r2, r3, #15
 80023ec:	4909      	ldr	r1, [pc, #36]	; (8002414 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80023f4:	4b07      	ldr	r3, [pc, #28]	; (8002414 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 030f 	and.w	r3, r3, #15
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d001      	beq.n	8002406 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e000      	b.n	8002408 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002406:	2300      	movs	r3, #0
}
 8002408:	4618      	mov	r0, r3
 800240a:	3718      	adds	r7, #24
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40021000 	.word	0x40021000
 8002414:	40022000 	.word	0x40022000

08002418 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002418:	b480      	push	{r7}
 800241a:	b087      	sub	sp, #28
 800241c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800241e:	4b2d      	ldr	r3, [pc, #180]	; (80024d4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	f003 0303 	and.w	r3, r3, #3
 8002426:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2b03      	cmp	r3, #3
 800242c:	d00b      	beq.n	8002446 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2b03      	cmp	r3, #3
 8002432:	d825      	bhi.n	8002480 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d008      	beq.n	800244c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2b02      	cmp	r3, #2
 800243e:	d11f      	bne.n	8002480 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002440:	4b25      	ldr	r3, [pc, #148]	; (80024d8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002442:	613b      	str	r3, [r7, #16]
    break;
 8002444:	e01f      	b.n	8002486 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002446:	4b25      	ldr	r3, [pc, #148]	; (80024dc <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002448:	613b      	str	r3, [r7, #16]
    break;
 800244a:	e01c      	b.n	8002486 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800244c:	4b21      	ldr	r3, [pc, #132]	; (80024d4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0308 	and.w	r3, r3, #8
 8002454:	2b00      	cmp	r3, #0
 8002456:	d107      	bne.n	8002468 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002458:	4b1e      	ldr	r3, [pc, #120]	; (80024d4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800245a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800245e:	0a1b      	lsrs	r3, r3, #8
 8002460:	f003 030f 	and.w	r3, r3, #15
 8002464:	617b      	str	r3, [r7, #20]
 8002466:	e005      	b.n	8002474 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002468:	4b1a      	ldr	r3, [pc, #104]	; (80024d4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	091b      	lsrs	r3, r3, #4
 800246e:	f003 030f 	and.w	r3, r3, #15
 8002472:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002474:	4a1a      	ldr	r2, [pc, #104]	; (80024e0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800247c:	613b      	str	r3, [r7, #16]
    break;
 800247e:	e002      	b.n	8002486 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002480:	2300      	movs	r3, #0
 8002482:	613b      	str	r3, [r7, #16]
    break;
 8002484:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002486:	4b13      	ldr	r3, [pc, #76]	; (80024d4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	091b      	lsrs	r3, r3, #4
 800248c:	f003 030f 	and.w	r3, r3, #15
 8002490:	3301      	adds	r3, #1
 8002492:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002494:	4b0f      	ldr	r3, [pc, #60]	; (80024d4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	0a1b      	lsrs	r3, r3, #8
 800249a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	fb03 f202 	mul.w	r2, r3, r2
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024aa:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024ac:	4b09      	ldr	r3, [pc, #36]	; (80024d4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	0e5b      	lsrs	r3, r3, #25
 80024b2:	f003 0303 	and.w	r3, r3, #3
 80024b6:	3301      	adds	r3, #1
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80024c6:	683b      	ldr	r3, [r7, #0]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	371c      	adds	r7, #28
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	40021000 	.word	0x40021000
 80024d8:	00f42400 	.word	0x00f42400
 80024dc:	007a1200 	.word	0x007a1200
 80024e0:	080043b4 	.word	0x080043b4

080024e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024ec:	2300      	movs	r3, #0
 80024ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024f0:	2300      	movs	r3, #0
 80024f2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d040      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002504:	2b80      	cmp	r3, #128	; 0x80
 8002506:	d02a      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002508:	2b80      	cmp	r3, #128	; 0x80
 800250a:	d825      	bhi.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800250c:	2b60      	cmp	r3, #96	; 0x60
 800250e:	d026      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002510:	2b60      	cmp	r3, #96	; 0x60
 8002512:	d821      	bhi.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002514:	2b40      	cmp	r3, #64	; 0x40
 8002516:	d006      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002518:	2b40      	cmp	r3, #64	; 0x40
 800251a:	d81d      	bhi.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800251c:	2b00      	cmp	r3, #0
 800251e:	d009      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002520:	2b20      	cmp	r3, #32
 8002522:	d010      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002524:	e018      	b.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002526:	4b89      	ldr	r3, [pc, #548]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	4a88      	ldr	r2, [pc, #544]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800252c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002530:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002532:	e015      	b.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3304      	adds	r3, #4
 8002538:	2100      	movs	r1, #0
 800253a:	4618      	mov	r0, r3
 800253c:	f000 fb02 	bl	8002b44 <RCCEx_PLLSAI1_Config>
 8002540:	4603      	mov	r3, r0
 8002542:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002544:	e00c      	b.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	3320      	adds	r3, #32
 800254a:	2100      	movs	r1, #0
 800254c:	4618      	mov	r0, r3
 800254e:	f000 fbed 	bl	8002d2c <RCCEx_PLLSAI2_Config>
 8002552:	4603      	mov	r3, r0
 8002554:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002556:	e003      	b.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	74fb      	strb	r3, [r7, #19]
      break;
 800255c:	e000      	b.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800255e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002560:	7cfb      	ldrb	r3, [r7, #19]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10b      	bne.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002566:	4b79      	ldr	r3, [pc, #484]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002568:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800256c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002574:	4975      	ldr	r1, [pc, #468]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002576:	4313      	orrs	r3, r2
 8002578:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800257c:	e001      	b.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800257e:	7cfb      	ldrb	r3, [r7, #19]
 8002580:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d047      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002592:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002596:	d030      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002598:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800259c:	d82a      	bhi.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800259e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025a2:	d02a      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x116>
 80025a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025a8:	d824      	bhi.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80025aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025ae:	d008      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80025b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025b4:	d81e      	bhi.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00a      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80025ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025be:	d010      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80025c0:	e018      	b.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025c2:	4b62      	ldr	r3, [pc, #392]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	4a61      	ldr	r2, [pc, #388]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025cc:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025ce:	e015      	b.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3304      	adds	r3, #4
 80025d4:	2100      	movs	r1, #0
 80025d6:	4618      	mov	r0, r3
 80025d8:	f000 fab4 	bl	8002b44 <RCCEx_PLLSAI1_Config>
 80025dc:	4603      	mov	r3, r0
 80025de:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025e0:	e00c      	b.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	3320      	adds	r3, #32
 80025e6:	2100      	movs	r1, #0
 80025e8:	4618      	mov	r0, r3
 80025ea:	f000 fb9f 	bl	8002d2c <RCCEx_PLLSAI2_Config>
 80025ee:	4603      	mov	r3, r0
 80025f0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025f2:	e003      	b.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	74fb      	strb	r3, [r7, #19]
      break;
 80025f8:	e000      	b.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80025fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025fc:	7cfb      	ldrb	r3, [r7, #19]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10b      	bne.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002602:	4b52      	ldr	r3, [pc, #328]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002604:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002608:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002610:	494e      	ldr	r1, [pc, #312]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002612:	4313      	orrs	r3, r2
 8002614:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002618:	e001      	b.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800261a:	7cfb      	ldrb	r3, [r7, #19]
 800261c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002626:	2b00      	cmp	r3, #0
 8002628:	f000 809f 	beq.w	800276a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800262c:	2300      	movs	r3, #0
 800262e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002630:	4b46      	ldr	r3, [pc, #280]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800263c:	2301      	movs	r3, #1
 800263e:	e000      	b.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002640:	2300      	movs	r3, #0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00d      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002646:	4b41      	ldr	r3, [pc, #260]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264a:	4a40      	ldr	r2, [pc, #256]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800264c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002650:	6593      	str	r3, [r2, #88]	; 0x58
 8002652:	4b3e      	ldr	r3, [pc, #248]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265a:	60bb      	str	r3, [r7, #8]
 800265c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800265e:	2301      	movs	r3, #1
 8002660:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002662:	4b3b      	ldr	r3, [pc, #236]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a3a      	ldr	r2, [pc, #232]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800266c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800266e:	f7fe fc23 	bl	8000eb8 <HAL_GetTick>
 8002672:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002674:	e009      	b.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002676:	f7fe fc1f 	bl	8000eb8 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d902      	bls.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	74fb      	strb	r3, [r7, #19]
        break;
 8002688:	e005      	b.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800268a:	4b31      	ldr	r3, [pc, #196]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002692:	2b00      	cmp	r3, #0
 8002694:	d0ef      	beq.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002696:	7cfb      	ldrb	r3, [r7, #19]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d15b      	bne.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800269c:	4b2b      	ldr	r3, [pc, #172]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800269e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026a6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d01f      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d019      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026ba:	4b24      	ldr	r3, [pc, #144]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026c4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026c6:	4b21      	ldr	r3, [pc, #132]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026cc:	4a1f      	ldr	r2, [pc, #124]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026d6:	4b1d      	ldr	r3, [pc, #116]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026dc:	4a1b      	ldr	r2, [pc, #108]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026e6:	4a19      	ldr	r2, [pc, #100]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d016      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f8:	f7fe fbde 	bl	8000eb8 <HAL_GetTick>
 80026fc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026fe:	e00b      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002700:	f7fe fbda 	bl	8000eb8 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	f241 3288 	movw	r2, #5000	; 0x1388
 800270e:	4293      	cmp	r3, r2
 8002710:	d902      	bls.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	74fb      	strb	r3, [r7, #19]
            break;
 8002716:	e006      	b.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002718:	4b0c      	ldr	r3, [pc, #48]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800271a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d0ec      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002726:	7cfb      	ldrb	r3, [r7, #19]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d10c      	bne.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800272c:	4b07      	ldr	r3, [pc, #28]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800272e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002732:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800273c:	4903      	ldr	r1, [pc, #12]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800273e:	4313      	orrs	r3, r2
 8002740:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002744:	e008      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002746:	7cfb      	ldrb	r3, [r7, #19]
 8002748:	74bb      	strb	r3, [r7, #18]
 800274a:	e005      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800274c:	40021000 	.word	0x40021000
 8002750:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002754:	7cfb      	ldrb	r3, [r7, #19]
 8002756:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002758:	7c7b      	ldrb	r3, [r7, #17]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d105      	bne.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800275e:	4ba0      	ldr	r3, [pc, #640]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002762:	4a9f      	ldr	r2, [pc, #636]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002764:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002768:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00a      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002776:	4b9a      	ldr	r3, [pc, #616]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277c:	f023 0203 	bic.w	r2, r3, #3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002784:	4996      	ldr	r1, [pc, #600]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002786:	4313      	orrs	r3, r2
 8002788:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00a      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002798:	4b91      	ldr	r3, [pc, #580]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800279a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800279e:	f023 020c 	bic.w	r2, r3, #12
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	498e      	ldr	r1, [pc, #568]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0304 	and.w	r3, r3, #4
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00a      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027ba:	4b89      	ldr	r3, [pc, #548]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c8:	4985      	ldr	r1, [pc, #532]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0308 	and.w	r3, r3, #8
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00a      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027dc:	4b80      	ldr	r3, [pc, #512]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ea:	497d      	ldr	r1, [pc, #500]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0310 	and.w	r3, r3, #16
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00a      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027fe:	4b78      	ldr	r3, [pc, #480]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002804:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800280c:	4974      	ldr	r1, [pc, #464]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800280e:	4313      	orrs	r3, r2
 8002810:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0320 	and.w	r3, r3, #32
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00a      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002820:	4b6f      	ldr	r3, [pc, #444]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002826:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800282e:	496c      	ldr	r1, [pc, #432]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002830:	4313      	orrs	r3, r2
 8002832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00a      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002842:	4b67      	ldr	r3, [pc, #412]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002848:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002850:	4963      	ldr	r1, [pc, #396]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002852:	4313      	orrs	r3, r2
 8002854:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00a      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002864:	4b5e      	ldr	r3, [pc, #376]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002872:	495b      	ldr	r1, [pc, #364]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002874:	4313      	orrs	r3, r2
 8002876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00a      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002886:	4b56      	ldr	r3, [pc, #344]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800288c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002894:	4952      	ldr	r1, [pc, #328]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002896:	4313      	orrs	r3, r2
 8002898:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00a      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028a8:	4b4d      	ldr	r3, [pc, #308]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b6:	494a      	ldr	r1, [pc, #296]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00a      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028ca:	4b45      	ldr	r3, [pc, #276]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d8:	4941      	ldr	r1, [pc, #260]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00a      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80028ec:	4b3c      	ldr	r3, [pc, #240]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80028f2:	f023 0203 	bic.w	r2, r3, #3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028fa:	4939      	ldr	r1, [pc, #228]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d028      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800290e:	4b34      	ldr	r3, [pc, #208]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002914:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800291c:	4930      	ldr	r1, [pc, #192]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800291e:	4313      	orrs	r3, r2
 8002920:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002928:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800292c:	d106      	bne.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800292e:	4b2c      	ldr	r3, [pc, #176]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	4a2b      	ldr	r2, [pc, #172]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002934:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002938:	60d3      	str	r3, [r2, #12]
 800293a:	e011      	b.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002940:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002944:	d10c      	bne.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	3304      	adds	r3, #4
 800294a:	2101      	movs	r1, #1
 800294c:	4618      	mov	r0, r3
 800294e:	f000 f8f9 	bl	8002b44 <RCCEx_PLLSAI1_Config>
 8002952:	4603      	mov	r3, r0
 8002954:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002956:	7cfb      	ldrb	r3, [r7, #19]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800295c:	7cfb      	ldrb	r3, [r7, #19]
 800295e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d04d      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002970:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002974:	d108      	bne.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002976:	4b1a      	ldr	r3, [pc, #104]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002978:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800297c:	4a18      	ldr	r2, [pc, #96]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800297e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002982:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002986:	e012      	b.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002988:	4b15      	ldr	r3, [pc, #84]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800298a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800298e:	4a14      	ldr	r2, [pc, #80]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002990:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002994:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002998:	4b11      	ldr	r3, [pc, #68]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800299a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029a6:	490e      	ldr	r1, [pc, #56]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029b6:	d106      	bne.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029b8:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	4a08      	ldr	r2, [pc, #32]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029c2:	60d3      	str	r3, [r2, #12]
 80029c4:	e020      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029ce:	d109      	bne.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80029d0:	4b03      	ldr	r3, [pc, #12]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	4a02      	ldr	r2, [pc, #8]	; (80029e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029da:	60d3      	str	r3, [r2, #12]
 80029dc:	e014      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80029de:	bf00      	nop
 80029e0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029ec:	d10c      	bne.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	3304      	adds	r3, #4
 80029f2:	2101      	movs	r1, #1
 80029f4:	4618      	mov	r0, r3
 80029f6:	f000 f8a5 	bl	8002b44 <RCCEx_PLLSAI1_Config>
 80029fa:	4603      	mov	r3, r0
 80029fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029fe:	7cfb      	ldrb	r3, [r7, #19]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8002a04:	7cfb      	ldrb	r3, [r7, #19]
 8002a06:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d028      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a14:	4b4a      	ldr	r3, [pc, #296]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a22:	4947      	ldr	r1, [pc, #284]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a32:	d106      	bne.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a34:	4b42      	ldr	r3, [pc, #264]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	4a41      	ldr	r2, [pc, #260]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a3e:	60d3      	str	r3, [r2, #12]
 8002a40:	e011      	b.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a4a:	d10c      	bne.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	3304      	adds	r3, #4
 8002a50:	2101      	movs	r1, #1
 8002a52:	4618      	mov	r0, r3
 8002a54:	f000 f876 	bl	8002b44 <RCCEx_PLLSAI1_Config>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a5c:	7cfb      	ldrb	r3, [r7, #19]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002a62:	7cfb      	ldrb	r3, [r7, #19]
 8002a64:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d01e      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a72:	4b33      	ldr	r3, [pc, #204]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a78:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a82:	492f      	ldr	r1, [pc, #188]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a94:	d10c      	bne.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	3304      	adds	r3, #4
 8002a9a:	2102      	movs	r1, #2
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f000 f851 	bl	8002b44 <RCCEx_PLLSAI1_Config>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002aa6:	7cfb      	ldrb	r3, [r7, #19]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8002aac:	7cfb      	ldrb	r3, [r7, #19]
 8002aae:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00b      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002abc:	4b20      	ldr	r3, [pc, #128]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002abe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ac2:	f023 0204 	bic.w	r2, r3, #4
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002acc:	491c      	ldr	r1, [pc, #112]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00b      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002ae0:	4b17      	ldr	r3, [pc, #92]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ae2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ae6:	f023 0218 	bic.w	r2, r3, #24
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af0:	4913      	ldr	r1, [pc, #76]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d017      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002b04:	4b0e      	ldr	r3, [pc, #56]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b14:	490a      	ldr	r1, [pc, #40]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b26:	d105      	bne.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b28:	4b05      	ldr	r3, [pc, #20]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	4a04      	ldr	r2, [pc, #16]	; (8002b40 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b32:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b34:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3718      	adds	r7, #24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40021000 	.word	0x40021000

08002b44 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b52:	4b72      	ldr	r3, [pc, #456]	; (8002d1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	f003 0303 	and.w	r3, r3, #3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00e      	beq.n	8002b7c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b5e:	4b6f      	ldr	r3, [pc, #444]	; (8002d1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	f003 0203 	and.w	r2, r3, #3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d103      	bne.n	8002b76 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
       ||
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d142      	bne.n	8002bfc <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	73fb      	strb	r3, [r7, #15]
 8002b7a:	e03f      	b.n	8002bfc <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2b03      	cmp	r3, #3
 8002b82:	d018      	beq.n	8002bb6 <RCCEx_PLLSAI1_Config+0x72>
 8002b84:	2b03      	cmp	r3, #3
 8002b86:	d825      	bhi.n	8002bd4 <RCCEx_PLLSAI1_Config+0x90>
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d002      	beq.n	8002b92 <RCCEx_PLLSAI1_Config+0x4e>
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d009      	beq.n	8002ba4 <RCCEx_PLLSAI1_Config+0x60>
 8002b90:	e020      	b.n	8002bd4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b92:	4b62      	ldr	r3, [pc, #392]	; (8002d1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d11d      	bne.n	8002bda <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ba2:	e01a      	b.n	8002bda <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ba4:	4b5d      	ldr	r3, [pc, #372]	; (8002d1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d116      	bne.n	8002bde <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bb4:	e013      	b.n	8002bde <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002bb6:	4b59      	ldr	r3, [pc, #356]	; (8002d1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10f      	bne.n	8002be2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bc2:	4b56      	ldr	r3, [pc, #344]	; (8002d1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d109      	bne.n	8002be2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002bd2:	e006      	b.n	8002be2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	73fb      	strb	r3, [r7, #15]
      break;
 8002bd8:	e004      	b.n	8002be4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002bda:	bf00      	nop
 8002bdc:	e002      	b.n	8002be4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002bde:	bf00      	nop
 8002be0:	e000      	b.n	8002be4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002be2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002be4:	7bfb      	ldrb	r3, [r7, #15]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d108      	bne.n	8002bfc <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8002bea:	4b4c      	ldr	r3, [pc, #304]	; (8002d1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	f023 0203 	bic.w	r2, r3, #3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4949      	ldr	r1, [pc, #292]	; (8002d1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002bfc:	7bfb      	ldrb	r3, [r7, #15]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f040 8086 	bne.w	8002d10 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c04:	4b45      	ldr	r3, [pc, #276]	; (8002d1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a44      	ldr	r2, [pc, #272]	; (8002d1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c10:	f7fe f952 	bl	8000eb8 <HAL_GetTick>
 8002c14:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c16:	e009      	b.n	8002c2c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c18:	f7fe f94e 	bl	8000eb8 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d902      	bls.n	8002c2c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	73fb      	strb	r3, [r7, #15]
        break;
 8002c2a:	e005      	b.n	8002c38 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c2c:	4b3b      	ldr	r3, [pc, #236]	; (8002d1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1ef      	bne.n	8002c18 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002c38:	7bfb      	ldrb	r3, [r7, #15]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d168      	bne.n	8002d10 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d113      	bne.n	8002c6c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c44:	4b35      	ldr	r3, [pc, #212]	; (8002d1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c46:	691a      	ldr	r2, [r3, #16]
 8002c48:	4b35      	ldr	r3, [pc, #212]	; (8002d20 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	6892      	ldr	r2, [r2, #8]
 8002c50:	0211      	lsls	r1, r2, #8
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	68d2      	ldr	r2, [r2, #12]
 8002c56:	06d2      	lsls	r2, r2, #27
 8002c58:	4311      	orrs	r1, r2
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	6852      	ldr	r2, [r2, #4]
 8002c5e:	3a01      	subs	r2, #1
 8002c60:	0112      	lsls	r2, r2, #4
 8002c62:	430a      	orrs	r2, r1
 8002c64:	492d      	ldr	r1, [pc, #180]	; (8002d1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	610b      	str	r3, [r1, #16]
 8002c6a:	e02d      	b.n	8002cc8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d115      	bne.n	8002c9e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c72:	4b2a      	ldr	r3, [pc, #168]	; (8002d1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c74:	691a      	ldr	r2, [r3, #16]
 8002c76:	4b2b      	ldr	r3, [pc, #172]	; (8002d24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c78:	4013      	ands	r3, r2
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	6892      	ldr	r2, [r2, #8]
 8002c7e:	0211      	lsls	r1, r2, #8
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6912      	ldr	r2, [r2, #16]
 8002c84:	0852      	lsrs	r2, r2, #1
 8002c86:	3a01      	subs	r2, #1
 8002c88:	0552      	lsls	r2, r2, #21
 8002c8a:	4311      	orrs	r1, r2
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	6852      	ldr	r2, [r2, #4]
 8002c90:	3a01      	subs	r2, #1
 8002c92:	0112      	lsls	r2, r2, #4
 8002c94:	430a      	orrs	r2, r1
 8002c96:	4921      	ldr	r1, [pc, #132]	; (8002d1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	610b      	str	r3, [r1, #16]
 8002c9c:	e014      	b.n	8002cc8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c9e:	4b1f      	ldr	r3, [pc, #124]	; (8002d1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ca0:	691a      	ldr	r2, [r3, #16]
 8002ca2:	4b21      	ldr	r3, [pc, #132]	; (8002d28 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	6892      	ldr	r2, [r2, #8]
 8002caa:	0211      	lsls	r1, r2, #8
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	6952      	ldr	r2, [r2, #20]
 8002cb0:	0852      	lsrs	r2, r2, #1
 8002cb2:	3a01      	subs	r2, #1
 8002cb4:	0652      	lsls	r2, r2, #25
 8002cb6:	4311      	orrs	r1, r2
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	6852      	ldr	r2, [r2, #4]
 8002cbc:	3a01      	subs	r2, #1
 8002cbe:	0112      	lsls	r2, r2, #4
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	4916      	ldr	r1, [pc, #88]	; (8002d1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002cc8:	4b14      	ldr	r3, [pc, #80]	; (8002d1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a13      	ldr	r2, [pc, #76]	; (8002d1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002cd2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd4:	f7fe f8f0 	bl	8000eb8 <HAL_GetTick>
 8002cd8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cda:	e009      	b.n	8002cf0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cdc:	f7fe f8ec 	bl	8000eb8 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d902      	bls.n	8002cf0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	73fb      	strb	r3, [r7, #15]
          break;
 8002cee:	e005      	b.n	8002cfc <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cf0:	4b0a      	ldr	r3, [pc, #40]	; (8002d1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d0ef      	beq.n	8002cdc <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002cfc:	7bfb      	ldrb	r3, [r7, #15]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d106      	bne.n	8002d10 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d02:	4b06      	ldr	r3, [pc, #24]	; (8002d1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d04:	691a      	ldr	r2, [r3, #16]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	4904      	ldr	r1, [pc, #16]	; (8002d1c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	07ff800f 	.word	0x07ff800f
 8002d24:	ff9f800f 	.word	0xff9f800f
 8002d28:	f9ff800f 	.word	0xf9ff800f

08002d2c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d36:	2300      	movs	r3, #0
 8002d38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d3a:	4b72      	ldr	r3, [pc, #456]	; (8002f04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	f003 0303 	and.w	r3, r3, #3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00e      	beq.n	8002d64 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002d46:	4b6f      	ldr	r3, [pc, #444]	; (8002f04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	f003 0203 	and.w	r2, r3, #3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d103      	bne.n	8002d5e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
       ||
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d142      	bne.n	8002de4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	73fb      	strb	r3, [r7, #15]
 8002d62:	e03f      	b.n	8002de4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2b03      	cmp	r3, #3
 8002d6a:	d018      	beq.n	8002d9e <RCCEx_PLLSAI2_Config+0x72>
 8002d6c:	2b03      	cmp	r3, #3
 8002d6e:	d825      	bhi.n	8002dbc <RCCEx_PLLSAI2_Config+0x90>
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d002      	beq.n	8002d7a <RCCEx_PLLSAI2_Config+0x4e>
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d009      	beq.n	8002d8c <RCCEx_PLLSAI2_Config+0x60>
 8002d78:	e020      	b.n	8002dbc <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d7a:	4b62      	ldr	r3, [pc, #392]	; (8002f04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d11d      	bne.n	8002dc2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d8a:	e01a      	b.n	8002dc2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d8c:	4b5d      	ldr	r3, [pc, #372]	; (8002f04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d116      	bne.n	8002dc6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d9c:	e013      	b.n	8002dc6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d9e:	4b59      	ldr	r3, [pc, #356]	; (8002f04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10f      	bne.n	8002dca <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002daa:	4b56      	ldr	r3, [pc, #344]	; (8002f04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d109      	bne.n	8002dca <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002dba:	e006      	b.n	8002dca <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	73fb      	strb	r3, [r7, #15]
      break;
 8002dc0:	e004      	b.n	8002dcc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002dc2:	bf00      	nop
 8002dc4:	e002      	b.n	8002dcc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002dc6:	bf00      	nop
 8002dc8:	e000      	b.n	8002dcc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002dca:	bf00      	nop
    }

    if(status == HAL_OK)
 8002dcc:	7bfb      	ldrb	r3, [r7, #15]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d108      	bne.n	8002de4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002dd2:	4b4c      	ldr	r3, [pc, #304]	; (8002f04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	f023 0203 	bic.w	r2, r3, #3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4949      	ldr	r1, [pc, #292]	; (8002f04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002de4:	7bfb      	ldrb	r3, [r7, #15]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f040 8086 	bne.w	8002ef8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002dec:	4b45      	ldr	r3, [pc, #276]	; (8002f04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a44      	ldr	r2, [pc, #272]	; (8002f04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002df2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002df6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002df8:	f7fe f85e 	bl	8000eb8 <HAL_GetTick>
 8002dfc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002dfe:	e009      	b.n	8002e14 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e00:	f7fe f85a 	bl	8000eb8 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d902      	bls.n	8002e14 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	73fb      	strb	r3, [r7, #15]
        break;
 8002e12:	e005      	b.n	8002e20 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e14:	4b3b      	ldr	r3, [pc, #236]	; (8002f04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1ef      	bne.n	8002e00 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002e20:	7bfb      	ldrb	r3, [r7, #15]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d168      	bne.n	8002ef8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d113      	bne.n	8002e54 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e2c:	4b35      	ldr	r3, [pc, #212]	; (8002f04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e2e:	695a      	ldr	r2, [r3, #20]
 8002e30:	4b35      	ldr	r3, [pc, #212]	; (8002f08 <RCCEx_PLLSAI2_Config+0x1dc>)
 8002e32:	4013      	ands	r3, r2
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	6892      	ldr	r2, [r2, #8]
 8002e38:	0211      	lsls	r1, r2, #8
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	68d2      	ldr	r2, [r2, #12]
 8002e3e:	06d2      	lsls	r2, r2, #27
 8002e40:	4311      	orrs	r1, r2
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	6852      	ldr	r2, [r2, #4]
 8002e46:	3a01      	subs	r2, #1
 8002e48:	0112      	lsls	r2, r2, #4
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	492d      	ldr	r1, [pc, #180]	; (8002f04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	614b      	str	r3, [r1, #20]
 8002e52:	e02d      	b.n	8002eb0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d115      	bne.n	8002e86 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e5a:	4b2a      	ldr	r3, [pc, #168]	; (8002f04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e5c:	695a      	ldr	r2, [r3, #20]
 8002e5e:	4b2b      	ldr	r3, [pc, #172]	; (8002f0c <RCCEx_PLLSAI2_Config+0x1e0>)
 8002e60:	4013      	ands	r3, r2
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	6892      	ldr	r2, [r2, #8]
 8002e66:	0211      	lsls	r1, r2, #8
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	6912      	ldr	r2, [r2, #16]
 8002e6c:	0852      	lsrs	r2, r2, #1
 8002e6e:	3a01      	subs	r2, #1
 8002e70:	0552      	lsls	r2, r2, #21
 8002e72:	4311      	orrs	r1, r2
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	6852      	ldr	r2, [r2, #4]
 8002e78:	3a01      	subs	r2, #1
 8002e7a:	0112      	lsls	r2, r2, #4
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	4921      	ldr	r1, [pc, #132]	; (8002f04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	614b      	str	r3, [r1, #20]
 8002e84:	e014      	b.n	8002eb0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e86:	4b1f      	ldr	r3, [pc, #124]	; (8002f04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e88:	695a      	ldr	r2, [r3, #20]
 8002e8a:	4b21      	ldr	r3, [pc, #132]	; (8002f10 <RCCEx_PLLSAI2_Config+0x1e4>)
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	6892      	ldr	r2, [r2, #8]
 8002e92:	0211      	lsls	r1, r2, #8
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	6952      	ldr	r2, [r2, #20]
 8002e98:	0852      	lsrs	r2, r2, #1
 8002e9a:	3a01      	subs	r2, #1
 8002e9c:	0652      	lsls	r2, r2, #25
 8002e9e:	4311      	orrs	r1, r2
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	6852      	ldr	r2, [r2, #4]
 8002ea4:	3a01      	subs	r2, #1
 8002ea6:	0112      	lsls	r2, r2, #4
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	4916      	ldr	r1, [pc, #88]	; (8002f04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002eb0:	4b14      	ldr	r3, [pc, #80]	; (8002f04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a13      	ldr	r2, [pc, #76]	; (8002f04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002eb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ebc:	f7fd fffc 	bl	8000eb8 <HAL_GetTick>
 8002ec0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ec2:	e009      	b.n	8002ed8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ec4:	f7fd fff8 	bl	8000eb8 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d902      	bls.n	8002ed8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	73fb      	strb	r3, [r7, #15]
          break;
 8002ed6:	e005      	b.n	8002ee4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ed8:	4b0a      	ldr	r3, [pc, #40]	; (8002f04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d0ef      	beq.n	8002ec4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002ee4:	7bfb      	ldrb	r3, [r7, #15]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d106      	bne.n	8002ef8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002eea:	4b06      	ldr	r3, [pc, #24]	; (8002f04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002eec:	695a      	ldr	r2, [r3, #20]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	4904      	ldr	r1, [pc, #16]	; (8002f04 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	40021000 	.word	0x40021000
 8002f08:	07ff800f 	.word	0x07ff800f
 8002f0c:	ff9f800f 	.word	0xff9f800f
 8002f10:	f9ff800f 	.word	0xf9ff800f

08002f14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e042      	b.n	8002fac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d106      	bne.n	8002f3e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f7fd fe37 	bl	8000bac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2224      	movs	r2, #36	; 0x24
 8002f42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f022 0201 	bic.w	r2, r2, #1
 8002f54:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d002      	beq.n	8002f64 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 fe68 	bl	8003c34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 fb69 	bl	800363c <UART_SetConfig>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d101      	bne.n	8002f74 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e01b      	b.n	8002fac <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	685a      	ldr	r2, [r3, #4]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689a      	ldr	r2, [r3, #8]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f042 0201 	orr.w	r2, r2, #1
 8002fa2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 fee7 	bl	8003d78 <UART_CheckIdleState>
 8002faa:	4603      	mov	r3, r0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b0ba      	sub	sp, #232	; 0xe8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002fda:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002fde:	f640 030f 	movw	r3, #2063	; 0x80f
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002fe8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d11b      	bne.n	8003028 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002ff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ff4:	f003 0320 	and.w	r3, r3, #32
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d015      	beq.n	8003028 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002ffc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003000:	f003 0320 	and.w	r3, r3, #32
 8003004:	2b00      	cmp	r3, #0
 8003006:	d105      	bne.n	8003014 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003008:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800300c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d009      	beq.n	8003028 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003018:	2b00      	cmp	r3, #0
 800301a:	f000 82e3 	beq.w	80035e4 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	4798      	blx	r3
      }
      return;
 8003026:	e2dd      	b.n	80035e4 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8003028:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800302c:	2b00      	cmp	r3, #0
 800302e:	f000 8123 	beq.w	8003278 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003032:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003036:	4b8d      	ldr	r3, [pc, #564]	; (800326c <HAL_UART_IRQHandler+0x2b8>)
 8003038:	4013      	ands	r3, r2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d106      	bne.n	800304c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800303e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003042:	4b8b      	ldr	r3, [pc, #556]	; (8003270 <HAL_UART_IRQHandler+0x2bc>)
 8003044:	4013      	ands	r3, r2
 8003046:	2b00      	cmp	r3, #0
 8003048:	f000 8116 	beq.w	8003278 <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800304c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	2b00      	cmp	r3, #0
 8003056:	d011      	beq.n	800307c <HAL_UART_IRQHandler+0xc8>
 8003058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800305c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00b      	beq.n	800307c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2201      	movs	r2, #1
 800306a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003072:	f043 0201 	orr.w	r2, r3, #1
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800307c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d011      	beq.n	80030ac <HAL_UART_IRQHandler+0xf8>
 8003088:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00b      	beq.n	80030ac <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2202      	movs	r2, #2
 800309a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a2:	f043 0204 	orr.w	r2, r3, #4
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030b0:	f003 0304 	and.w	r3, r3, #4
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d011      	beq.n	80030dc <HAL_UART_IRQHandler+0x128>
 80030b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00b      	beq.n	80030dc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2204      	movs	r2, #4
 80030ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d2:	f043 0202 	orr.w	r2, r3, #2
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 80030dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030e0:	f003 0308 	and.w	r3, r3, #8
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d017      	beq.n	8003118 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80030e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030ec:	f003 0320 	and.w	r3, r3, #32
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d105      	bne.n	8003100 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80030f4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80030f8:	4b5c      	ldr	r3, [pc, #368]	; (800326c <HAL_UART_IRQHandler+0x2b8>)
 80030fa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00b      	beq.n	8003118 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2208      	movs	r2, #8
 8003106:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800310e:	f043 0208 	orr.w	r2, r3, #8
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800311c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003120:	2b00      	cmp	r3, #0
 8003122:	d012      	beq.n	800314a <HAL_UART_IRQHandler+0x196>
 8003124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003128:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00c      	beq.n	800314a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003138:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003140:	f043 0220 	orr.w	r2, r3, #32
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 8249 	beq.w	80035e8 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800315a:	f003 0320 	and.w	r3, r3, #32
 800315e:	2b00      	cmp	r3, #0
 8003160:	d013      	beq.n	800318a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003162:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003166:	f003 0320 	and.w	r3, r3, #32
 800316a:	2b00      	cmp	r3, #0
 800316c:	d105      	bne.n	800317a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800316e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d007      	beq.n	800318a <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003190:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800319e:	2b40      	cmp	r3, #64	; 0x40
 80031a0:	d005      	beq.n	80031ae <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80031a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d054      	beq.n	8003258 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 fef3 	bl	8003f9a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031be:	2b40      	cmp	r3, #64	; 0x40
 80031c0:	d146      	bne.n	8003250 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	3308      	adds	r3, #8
 80031c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80031d0:	e853 3f00 	ldrex	r3, [r3]
 80031d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80031d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80031dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	3308      	adds	r3, #8
 80031ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80031ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80031f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80031fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80031fe:	e841 2300 	strex	r3, r2, [r1]
 8003202:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003206:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1d9      	bne.n	80031c2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003214:	2b00      	cmp	r3, #0
 8003216:	d017      	beq.n	8003248 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800321e:	4a15      	ldr	r2, [pc, #84]	; (8003274 <HAL_UART_IRQHandler+0x2c0>)
 8003220:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003228:	4618      	mov	r0, r3
 800322a:	f7fd ffbe 	bl	80011aa <HAL_DMA_Abort_IT>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d019      	beq.n	8003268 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800323a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8003242:	4610      	mov	r0, r2
 8003244:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003246:	e00f      	b.n	8003268 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 f9e1 	bl	8003610 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800324e:	e00b      	b.n	8003268 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 f9dd 	bl	8003610 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003256:	e007      	b.n	8003268 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 f9d9 	bl	8003610 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8003266:	e1bf      	b.n	80035e8 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003268:	bf00      	nop
    return;
 800326a:	e1bd      	b.n	80035e8 <HAL_UART_IRQHandler+0x634>
 800326c:	10000001 	.word	0x10000001
 8003270:	04000120 	.word	0x04000120
 8003274:	08004067 	.word	0x08004067

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800327c:	2b01      	cmp	r3, #1
 800327e:	f040 8153 	bne.w	8003528 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003286:	f003 0310 	and.w	r3, r3, #16
 800328a:	2b00      	cmp	r3, #0
 800328c:	f000 814c 	beq.w	8003528 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003294:	f003 0310 	and.w	r3, r3, #16
 8003298:	2b00      	cmp	r3, #0
 800329a:	f000 8145 	beq.w	8003528 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2210      	movs	r2, #16
 80032a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b0:	2b40      	cmp	r3, #64	; 0x40
 80032b2:	f040 80bb 	bne.w	800342c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80032c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f000 818f 	beq.w	80035ec <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80032d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80032d8:	429a      	cmp	r2, r3
 80032da:	f080 8187 	bcs.w	80035ec <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80032e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0320 	and.w	r3, r3, #32
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f040 8087 	bne.w	800340a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003304:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003308:	e853 3f00 	ldrex	r3, [r3]
 800330c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003310:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003314:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003318:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	461a      	mov	r2, r3
 8003322:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003326:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800332a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800332e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003332:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003336:	e841 2300 	strex	r3, r2, [r1]
 800333a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800333e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1da      	bne.n	80032fc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	3308      	adds	r3, #8
 800334c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800334e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003350:	e853 3f00 	ldrex	r3, [r3]
 8003354:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003356:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003358:	f023 0301 	bic.w	r3, r3, #1
 800335c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	3308      	adds	r3, #8
 8003366:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800336a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800336e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003370:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003372:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003376:	e841 2300 	strex	r3, r2, [r1]
 800337a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800337c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1e1      	bne.n	8003346 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	3308      	adds	r3, #8
 8003388:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800338a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800338c:	e853 3f00 	ldrex	r3, [r3]
 8003390:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003392:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003394:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003398:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	3308      	adds	r3, #8
 80033a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80033a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80033a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80033ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80033ae:	e841 2300 	strex	r3, r2, [r1]
 80033b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80033b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1e3      	bne.n	8003382 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2220      	movs	r2, #32
 80033be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033d0:	e853 3f00 	ldrex	r3, [r3]
 80033d4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80033d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033d8:	f023 0310 	bic.w	r3, r3, #16
 80033dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	461a      	mov	r2, r3
 80033e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80033ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80033ec:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80033f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033f2:	e841 2300 	strex	r3, r2, [r1]
 80033f6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80033f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1e4      	bne.n	80033c8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003404:	4618      	mov	r0, r3
 8003406:	f7fd fe74 	bl	80010f2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2202      	movs	r2, #2
 800340e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800341c:	b29b      	uxth	r3, r3
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	b29b      	uxth	r3, r3
 8003422:	4619      	mov	r1, r3
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 f8fd 	bl	8003624 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800342a:	e0df      	b.n	80035ec <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003438:	b29b      	uxth	r3, r3
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003446:	b29b      	uxth	r3, r3
 8003448:	2b00      	cmp	r3, #0
 800344a:	f000 80d1 	beq.w	80035f0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800344e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003452:	2b00      	cmp	r3, #0
 8003454:	f000 80cc 	beq.w	80035f0 <HAL_UART_IRQHandler+0x63c>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800345e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003460:	e853 3f00 	ldrex	r3, [r3]
 8003464:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003468:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800346c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	461a      	mov	r2, r3
 8003476:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800347a:	647b      	str	r3, [r7, #68]	; 0x44
 800347c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800347e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003480:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003482:	e841 2300 	strex	r3, r2, [r1]
 8003486:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1e4      	bne.n	8003458 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	3308      	adds	r3, #8
 8003494:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003498:	e853 3f00 	ldrex	r3, [r3]
 800349c:	623b      	str	r3, [r7, #32]
   return(result);
 800349e:	6a3b      	ldr	r3, [r7, #32]
 80034a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034a4:	f023 0301 	bic.w	r3, r3, #1
 80034a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	3308      	adds	r3, #8
 80034b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80034b6:	633a      	str	r2, [r7, #48]	; 0x30
 80034b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034be:	e841 2300 	strex	r3, r2, [r1]
 80034c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80034c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1e1      	bne.n	800348e <HAL_UART_IRQHandler+0x4da>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2220      	movs	r2, #32
 80034ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	e853 3f00 	ldrex	r3, [r3]
 80034ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f023 0310 	bic.w	r3, r3, #16
 80034f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	461a      	mov	r2, r3
 80034fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003500:	61fb      	str	r3, [r7, #28]
 8003502:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003504:	69b9      	ldr	r1, [r7, #24]
 8003506:	69fa      	ldr	r2, [r7, #28]
 8003508:	e841 2300 	strex	r3, r2, [r1]
 800350c:	617b      	str	r3, [r7, #20]
   return(result);
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1e4      	bne.n	80034de <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2202      	movs	r2, #2
 8003518:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800351a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800351e:	4619      	mov	r1, r3
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 f87f 	bl	8003624 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003526:	e063      	b.n	80035f0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800352c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00e      	beq.n	8003552 <HAL_UART_IRQHandler+0x59e>
 8003534:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003538:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d008      	beq.n	8003552 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003548:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 fdcc 	bl	80040e8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003550:	e051      	b.n	80035f6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800355a:	2b00      	cmp	r3, #0
 800355c:	d014      	beq.n	8003588 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800355e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003566:	2b00      	cmp	r3, #0
 8003568:	d105      	bne.n	8003576 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800356a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800356e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d008      	beq.n	8003588 <HAL_UART_IRQHandler+0x5d4>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800357a:	2b00      	cmp	r3, #0
 800357c:	d03a      	beq.n	80035f4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	4798      	blx	r3
    }
    return;
 8003586:	e035      	b.n	80035f4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800358c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003590:	2b00      	cmp	r3, #0
 8003592:	d009      	beq.n	80035a8 <HAL_UART_IRQHandler+0x5f4>
 8003594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800359c:	2b00      	cmp	r3, #0
 800359e:	d003      	beq.n	80035a8 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f000 fd76 	bl	8004092 <UART_EndTransmit_IT>
    return;
 80035a6:	e026      	b.n	80035f6 <HAL_UART_IRQHandler+0x642>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80035a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d009      	beq.n	80035c8 <HAL_UART_IRQHandler+0x614>
 80035b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d003      	beq.n	80035c8 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 fda5 	bl	8004110 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80035c6:	e016      	b.n	80035f6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80035c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d010      	beq.n	80035f6 <HAL_UART_IRQHandler+0x642>
 80035d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	da0c      	bge.n	80035f6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 fd8d 	bl	80040fc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80035e2:	e008      	b.n	80035f6 <HAL_UART_IRQHandler+0x642>
      return;
 80035e4:	bf00      	nop
 80035e6:	e006      	b.n	80035f6 <HAL_UART_IRQHandler+0x642>
    return;
 80035e8:	bf00      	nop
 80035ea:	e004      	b.n	80035f6 <HAL_UART_IRQHandler+0x642>
      return;
 80035ec:	bf00      	nop
 80035ee:	e002      	b.n	80035f6 <HAL_UART_IRQHandler+0x642>
      return;
 80035f0:	bf00      	nop
 80035f2:	e000      	b.n	80035f6 <HAL_UART_IRQHandler+0x642>
    return;
 80035f4:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 80035f6:	37e8      	adds	r7, #232	; 0xe8
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	460b      	mov	r3, r1
 800362e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800363c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003640:	b08c      	sub	sp, #48	; 0x30
 8003642:	af00      	add	r7, sp, #0
 8003644:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003646:	2300      	movs	r3, #0
 8003648:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	689a      	ldr	r2, [r3, #8]
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	431a      	orrs	r2, r3
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	431a      	orrs	r2, r3
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	69db      	ldr	r3, [r3, #28]
 8003660:	4313      	orrs	r3, r2
 8003662:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	4baa      	ldr	r3, [pc, #680]	; (8003914 <UART_SetConfig+0x2d8>)
 800366c:	4013      	ands	r3, r2
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	6812      	ldr	r2, [r2, #0]
 8003672:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003674:	430b      	orrs	r3, r1
 8003676:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	68da      	ldr	r2, [r3, #12]
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	430a      	orrs	r2, r1
 800368c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a9f      	ldr	r2, [pc, #636]	; (8003918 <UART_SetConfig+0x2dc>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d004      	beq.n	80036a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036a4:	4313      	orrs	r3, r2
 80036a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80036b2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	6812      	ldr	r2, [r2, #0]
 80036ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80036bc:	430b      	orrs	r3, r1
 80036be:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c6:	f023 010f 	bic.w	r1, r3, #15
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a90      	ldr	r2, [pc, #576]	; (800391c <UART_SetConfig+0x2e0>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d125      	bne.n	800372c <UART_SetConfig+0xf0>
 80036e0:	4b8f      	ldr	r3, [pc, #572]	; (8003920 <UART_SetConfig+0x2e4>)
 80036e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e6:	f003 0303 	and.w	r3, r3, #3
 80036ea:	2b03      	cmp	r3, #3
 80036ec:	d81a      	bhi.n	8003724 <UART_SetConfig+0xe8>
 80036ee:	a201      	add	r2, pc, #4	; (adr r2, 80036f4 <UART_SetConfig+0xb8>)
 80036f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f4:	08003705 	.word	0x08003705
 80036f8:	08003715 	.word	0x08003715
 80036fc:	0800370d 	.word	0x0800370d
 8003700:	0800371d 	.word	0x0800371d
 8003704:	2301      	movs	r3, #1
 8003706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800370a:	e116      	b.n	800393a <UART_SetConfig+0x2fe>
 800370c:	2302      	movs	r3, #2
 800370e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003712:	e112      	b.n	800393a <UART_SetConfig+0x2fe>
 8003714:	2304      	movs	r3, #4
 8003716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800371a:	e10e      	b.n	800393a <UART_SetConfig+0x2fe>
 800371c:	2308      	movs	r3, #8
 800371e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003722:	e10a      	b.n	800393a <UART_SetConfig+0x2fe>
 8003724:	2310      	movs	r3, #16
 8003726:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800372a:	e106      	b.n	800393a <UART_SetConfig+0x2fe>
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a7c      	ldr	r2, [pc, #496]	; (8003924 <UART_SetConfig+0x2e8>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d138      	bne.n	80037a8 <UART_SetConfig+0x16c>
 8003736:	4b7a      	ldr	r3, [pc, #488]	; (8003920 <UART_SetConfig+0x2e4>)
 8003738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800373c:	f003 030c 	and.w	r3, r3, #12
 8003740:	2b0c      	cmp	r3, #12
 8003742:	d82d      	bhi.n	80037a0 <UART_SetConfig+0x164>
 8003744:	a201      	add	r2, pc, #4	; (adr r2, 800374c <UART_SetConfig+0x110>)
 8003746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800374a:	bf00      	nop
 800374c:	08003781 	.word	0x08003781
 8003750:	080037a1 	.word	0x080037a1
 8003754:	080037a1 	.word	0x080037a1
 8003758:	080037a1 	.word	0x080037a1
 800375c:	08003791 	.word	0x08003791
 8003760:	080037a1 	.word	0x080037a1
 8003764:	080037a1 	.word	0x080037a1
 8003768:	080037a1 	.word	0x080037a1
 800376c:	08003789 	.word	0x08003789
 8003770:	080037a1 	.word	0x080037a1
 8003774:	080037a1 	.word	0x080037a1
 8003778:	080037a1 	.word	0x080037a1
 800377c:	08003799 	.word	0x08003799
 8003780:	2300      	movs	r3, #0
 8003782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003786:	e0d8      	b.n	800393a <UART_SetConfig+0x2fe>
 8003788:	2302      	movs	r3, #2
 800378a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800378e:	e0d4      	b.n	800393a <UART_SetConfig+0x2fe>
 8003790:	2304      	movs	r3, #4
 8003792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003796:	e0d0      	b.n	800393a <UART_SetConfig+0x2fe>
 8003798:	2308      	movs	r3, #8
 800379a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800379e:	e0cc      	b.n	800393a <UART_SetConfig+0x2fe>
 80037a0:	2310      	movs	r3, #16
 80037a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037a6:	e0c8      	b.n	800393a <UART_SetConfig+0x2fe>
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a5e      	ldr	r2, [pc, #376]	; (8003928 <UART_SetConfig+0x2ec>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d125      	bne.n	80037fe <UART_SetConfig+0x1c2>
 80037b2:	4b5b      	ldr	r3, [pc, #364]	; (8003920 <UART_SetConfig+0x2e4>)
 80037b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80037bc:	2b30      	cmp	r3, #48	; 0x30
 80037be:	d016      	beq.n	80037ee <UART_SetConfig+0x1b2>
 80037c0:	2b30      	cmp	r3, #48	; 0x30
 80037c2:	d818      	bhi.n	80037f6 <UART_SetConfig+0x1ba>
 80037c4:	2b20      	cmp	r3, #32
 80037c6:	d00a      	beq.n	80037de <UART_SetConfig+0x1a2>
 80037c8:	2b20      	cmp	r3, #32
 80037ca:	d814      	bhi.n	80037f6 <UART_SetConfig+0x1ba>
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d002      	beq.n	80037d6 <UART_SetConfig+0x19a>
 80037d0:	2b10      	cmp	r3, #16
 80037d2:	d008      	beq.n	80037e6 <UART_SetConfig+0x1aa>
 80037d4:	e00f      	b.n	80037f6 <UART_SetConfig+0x1ba>
 80037d6:	2300      	movs	r3, #0
 80037d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037dc:	e0ad      	b.n	800393a <UART_SetConfig+0x2fe>
 80037de:	2302      	movs	r3, #2
 80037e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037e4:	e0a9      	b.n	800393a <UART_SetConfig+0x2fe>
 80037e6:	2304      	movs	r3, #4
 80037e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037ec:	e0a5      	b.n	800393a <UART_SetConfig+0x2fe>
 80037ee:	2308      	movs	r3, #8
 80037f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037f4:	e0a1      	b.n	800393a <UART_SetConfig+0x2fe>
 80037f6:	2310      	movs	r3, #16
 80037f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037fc:	e09d      	b.n	800393a <UART_SetConfig+0x2fe>
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a4a      	ldr	r2, [pc, #296]	; (800392c <UART_SetConfig+0x2f0>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d125      	bne.n	8003854 <UART_SetConfig+0x218>
 8003808:	4b45      	ldr	r3, [pc, #276]	; (8003920 <UART_SetConfig+0x2e4>)
 800380a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003812:	2bc0      	cmp	r3, #192	; 0xc0
 8003814:	d016      	beq.n	8003844 <UART_SetConfig+0x208>
 8003816:	2bc0      	cmp	r3, #192	; 0xc0
 8003818:	d818      	bhi.n	800384c <UART_SetConfig+0x210>
 800381a:	2b80      	cmp	r3, #128	; 0x80
 800381c:	d00a      	beq.n	8003834 <UART_SetConfig+0x1f8>
 800381e:	2b80      	cmp	r3, #128	; 0x80
 8003820:	d814      	bhi.n	800384c <UART_SetConfig+0x210>
 8003822:	2b00      	cmp	r3, #0
 8003824:	d002      	beq.n	800382c <UART_SetConfig+0x1f0>
 8003826:	2b40      	cmp	r3, #64	; 0x40
 8003828:	d008      	beq.n	800383c <UART_SetConfig+0x200>
 800382a:	e00f      	b.n	800384c <UART_SetConfig+0x210>
 800382c:	2300      	movs	r3, #0
 800382e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003832:	e082      	b.n	800393a <UART_SetConfig+0x2fe>
 8003834:	2302      	movs	r3, #2
 8003836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800383a:	e07e      	b.n	800393a <UART_SetConfig+0x2fe>
 800383c:	2304      	movs	r3, #4
 800383e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003842:	e07a      	b.n	800393a <UART_SetConfig+0x2fe>
 8003844:	2308      	movs	r3, #8
 8003846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800384a:	e076      	b.n	800393a <UART_SetConfig+0x2fe>
 800384c:	2310      	movs	r3, #16
 800384e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003852:	e072      	b.n	800393a <UART_SetConfig+0x2fe>
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a35      	ldr	r2, [pc, #212]	; (8003930 <UART_SetConfig+0x2f4>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d12a      	bne.n	80038b4 <UART_SetConfig+0x278>
 800385e:	4b30      	ldr	r3, [pc, #192]	; (8003920 <UART_SetConfig+0x2e4>)
 8003860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003864:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003868:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800386c:	d01a      	beq.n	80038a4 <UART_SetConfig+0x268>
 800386e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003872:	d81b      	bhi.n	80038ac <UART_SetConfig+0x270>
 8003874:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003878:	d00c      	beq.n	8003894 <UART_SetConfig+0x258>
 800387a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800387e:	d815      	bhi.n	80038ac <UART_SetConfig+0x270>
 8003880:	2b00      	cmp	r3, #0
 8003882:	d003      	beq.n	800388c <UART_SetConfig+0x250>
 8003884:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003888:	d008      	beq.n	800389c <UART_SetConfig+0x260>
 800388a:	e00f      	b.n	80038ac <UART_SetConfig+0x270>
 800388c:	2300      	movs	r3, #0
 800388e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003892:	e052      	b.n	800393a <UART_SetConfig+0x2fe>
 8003894:	2302      	movs	r3, #2
 8003896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800389a:	e04e      	b.n	800393a <UART_SetConfig+0x2fe>
 800389c:	2304      	movs	r3, #4
 800389e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038a2:	e04a      	b.n	800393a <UART_SetConfig+0x2fe>
 80038a4:	2308      	movs	r3, #8
 80038a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038aa:	e046      	b.n	800393a <UART_SetConfig+0x2fe>
 80038ac:	2310      	movs	r3, #16
 80038ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038b2:	e042      	b.n	800393a <UART_SetConfig+0x2fe>
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a17      	ldr	r2, [pc, #92]	; (8003918 <UART_SetConfig+0x2dc>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d13a      	bne.n	8003934 <UART_SetConfig+0x2f8>
 80038be:	4b18      	ldr	r3, [pc, #96]	; (8003920 <UART_SetConfig+0x2e4>)
 80038c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80038c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038cc:	d01a      	beq.n	8003904 <UART_SetConfig+0x2c8>
 80038ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038d2:	d81b      	bhi.n	800390c <UART_SetConfig+0x2d0>
 80038d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038d8:	d00c      	beq.n	80038f4 <UART_SetConfig+0x2b8>
 80038da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038de:	d815      	bhi.n	800390c <UART_SetConfig+0x2d0>
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d003      	beq.n	80038ec <UART_SetConfig+0x2b0>
 80038e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038e8:	d008      	beq.n	80038fc <UART_SetConfig+0x2c0>
 80038ea:	e00f      	b.n	800390c <UART_SetConfig+0x2d0>
 80038ec:	2300      	movs	r3, #0
 80038ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038f2:	e022      	b.n	800393a <UART_SetConfig+0x2fe>
 80038f4:	2302      	movs	r3, #2
 80038f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80038fa:	e01e      	b.n	800393a <UART_SetConfig+0x2fe>
 80038fc:	2304      	movs	r3, #4
 80038fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003902:	e01a      	b.n	800393a <UART_SetConfig+0x2fe>
 8003904:	2308      	movs	r3, #8
 8003906:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800390a:	e016      	b.n	800393a <UART_SetConfig+0x2fe>
 800390c:	2310      	movs	r3, #16
 800390e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003912:	e012      	b.n	800393a <UART_SetConfig+0x2fe>
 8003914:	cfff69f3 	.word	0xcfff69f3
 8003918:	40008000 	.word	0x40008000
 800391c:	40013800 	.word	0x40013800
 8003920:	40021000 	.word	0x40021000
 8003924:	40004400 	.word	0x40004400
 8003928:	40004800 	.word	0x40004800
 800392c:	40004c00 	.word	0x40004c00
 8003930:	40005000 	.word	0x40005000
 8003934:	2310      	movs	r3, #16
 8003936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4aae      	ldr	r2, [pc, #696]	; (8003bf8 <UART_SetConfig+0x5bc>)
 8003940:	4293      	cmp	r3, r2
 8003942:	f040 8097 	bne.w	8003a74 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003946:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800394a:	2b08      	cmp	r3, #8
 800394c:	d823      	bhi.n	8003996 <UART_SetConfig+0x35a>
 800394e:	a201      	add	r2, pc, #4	; (adr r2, 8003954 <UART_SetConfig+0x318>)
 8003950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003954:	08003979 	.word	0x08003979
 8003958:	08003997 	.word	0x08003997
 800395c:	08003981 	.word	0x08003981
 8003960:	08003997 	.word	0x08003997
 8003964:	08003987 	.word	0x08003987
 8003968:	08003997 	.word	0x08003997
 800396c:	08003997 	.word	0x08003997
 8003970:	08003997 	.word	0x08003997
 8003974:	0800398f 	.word	0x0800398f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003978:	f7fe fcc8 	bl	800230c <HAL_RCC_GetPCLK1Freq>
 800397c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800397e:	e010      	b.n	80039a2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003980:	4b9e      	ldr	r3, [pc, #632]	; (8003bfc <UART_SetConfig+0x5c0>)
 8003982:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003984:	e00d      	b.n	80039a2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003986:	f7fe fc29 	bl	80021dc <HAL_RCC_GetSysClockFreq>
 800398a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800398c:	e009      	b.n	80039a2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800398e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003992:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003994:	e005      	b.n	80039a2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003996:	2300      	movs	r3, #0
 8003998:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80039a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80039a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f000 8130 	beq.w	8003c0a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ae:	4a94      	ldr	r2, [pc, #592]	; (8003c00 <UART_SetConfig+0x5c4>)
 80039b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039b4:	461a      	mov	r2, r3
 80039b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80039bc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	685a      	ldr	r2, [r3, #4]
 80039c2:	4613      	mov	r3, r2
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	4413      	add	r3, r2
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d305      	bcc.n	80039da <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d903      	bls.n	80039e2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80039e0:	e113      	b.n	8003c0a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80039e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e4:	2200      	movs	r2, #0
 80039e6:	60bb      	str	r3, [r7, #8]
 80039e8:	60fa      	str	r2, [r7, #12]
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ee:	4a84      	ldr	r2, [pc, #528]	; (8003c00 <UART_SetConfig+0x5c4>)
 80039f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	2200      	movs	r2, #0
 80039f8:	603b      	str	r3, [r7, #0]
 80039fa:	607a      	str	r2, [r7, #4]
 80039fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a00:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003a04:	f7fc fbfa 	bl	80001fc <__aeabi_uldivmod>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	4610      	mov	r0, r2
 8003a0e:	4619      	mov	r1, r3
 8003a10:	f04f 0200 	mov.w	r2, #0
 8003a14:	f04f 0300 	mov.w	r3, #0
 8003a18:	020b      	lsls	r3, r1, #8
 8003a1a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003a1e:	0202      	lsls	r2, r0, #8
 8003a20:	6979      	ldr	r1, [r7, #20]
 8003a22:	6849      	ldr	r1, [r1, #4]
 8003a24:	0849      	lsrs	r1, r1, #1
 8003a26:	2000      	movs	r0, #0
 8003a28:	460c      	mov	r4, r1
 8003a2a:	4605      	mov	r5, r0
 8003a2c:	eb12 0804 	adds.w	r8, r2, r4
 8003a30:	eb43 0905 	adc.w	r9, r3, r5
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	469a      	mov	sl, r3
 8003a3c:	4693      	mov	fp, r2
 8003a3e:	4652      	mov	r2, sl
 8003a40:	465b      	mov	r3, fp
 8003a42:	4640      	mov	r0, r8
 8003a44:	4649      	mov	r1, r9
 8003a46:	f7fc fbd9 	bl	80001fc <__aeabi_uldivmod>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	4613      	mov	r3, r2
 8003a50:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003a52:	6a3b      	ldr	r3, [r7, #32]
 8003a54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a58:	d308      	bcc.n	8003a6c <UART_SetConfig+0x430>
 8003a5a:	6a3b      	ldr	r3, [r7, #32]
 8003a5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a60:	d204      	bcs.n	8003a6c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	6a3a      	ldr	r2, [r7, #32]
 8003a68:	60da      	str	r2, [r3, #12]
 8003a6a:	e0ce      	b.n	8003c0a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003a72:	e0ca      	b.n	8003c0a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	69db      	ldr	r3, [r3, #28]
 8003a78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a7c:	d166      	bne.n	8003b4c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003a7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003a82:	2b08      	cmp	r3, #8
 8003a84:	d827      	bhi.n	8003ad6 <UART_SetConfig+0x49a>
 8003a86:	a201      	add	r2, pc, #4	; (adr r2, 8003a8c <UART_SetConfig+0x450>)
 8003a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a8c:	08003ab1 	.word	0x08003ab1
 8003a90:	08003ab9 	.word	0x08003ab9
 8003a94:	08003ac1 	.word	0x08003ac1
 8003a98:	08003ad7 	.word	0x08003ad7
 8003a9c:	08003ac7 	.word	0x08003ac7
 8003aa0:	08003ad7 	.word	0x08003ad7
 8003aa4:	08003ad7 	.word	0x08003ad7
 8003aa8:	08003ad7 	.word	0x08003ad7
 8003aac:	08003acf 	.word	0x08003acf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ab0:	f7fe fc2c 	bl	800230c <HAL_RCC_GetPCLK1Freq>
 8003ab4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ab6:	e014      	b.n	8003ae2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ab8:	f7fe fc3e 	bl	8002338 <HAL_RCC_GetPCLK2Freq>
 8003abc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003abe:	e010      	b.n	8003ae2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ac0:	4b4e      	ldr	r3, [pc, #312]	; (8003bfc <UART_SetConfig+0x5c0>)
 8003ac2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ac4:	e00d      	b.n	8003ae2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ac6:	f7fe fb89 	bl	80021dc <HAL_RCC_GetSysClockFreq>
 8003aca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003acc:	e009      	b.n	8003ae2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ace:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ad2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ad4:	e005      	b.n	8003ae2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003ae0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f000 8090 	beq.w	8003c0a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aee:	4a44      	ldr	r2, [pc, #272]	; (8003c00 <UART_SetConfig+0x5c4>)
 8003af0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003af4:	461a      	mov	r2, r3
 8003af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003afc:	005a      	lsls	r2, r3, #1
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	085b      	lsrs	r3, r3, #1
 8003b04:	441a      	add	r2, r3
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b0e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b10:	6a3b      	ldr	r3, [r7, #32]
 8003b12:	2b0f      	cmp	r3, #15
 8003b14:	d916      	bls.n	8003b44 <UART_SetConfig+0x508>
 8003b16:	6a3b      	ldr	r3, [r7, #32]
 8003b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b1c:	d212      	bcs.n	8003b44 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b1e:	6a3b      	ldr	r3, [r7, #32]
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	f023 030f 	bic.w	r3, r3, #15
 8003b26:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b28:	6a3b      	ldr	r3, [r7, #32]
 8003b2a:	085b      	lsrs	r3, r3, #1
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	f003 0307 	and.w	r3, r3, #7
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	8bfb      	ldrh	r3, [r7, #30]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	8bfa      	ldrh	r2, [r7, #30]
 8003b40:	60da      	str	r2, [r3, #12]
 8003b42:	e062      	b.n	8003c0a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003b4a:	e05e      	b.n	8003c0a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b4c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b50:	2b08      	cmp	r3, #8
 8003b52:	d828      	bhi.n	8003ba6 <UART_SetConfig+0x56a>
 8003b54:	a201      	add	r2, pc, #4	; (adr r2, 8003b5c <UART_SetConfig+0x520>)
 8003b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5a:	bf00      	nop
 8003b5c:	08003b81 	.word	0x08003b81
 8003b60:	08003b89 	.word	0x08003b89
 8003b64:	08003b91 	.word	0x08003b91
 8003b68:	08003ba7 	.word	0x08003ba7
 8003b6c:	08003b97 	.word	0x08003b97
 8003b70:	08003ba7 	.word	0x08003ba7
 8003b74:	08003ba7 	.word	0x08003ba7
 8003b78:	08003ba7 	.word	0x08003ba7
 8003b7c:	08003b9f 	.word	0x08003b9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b80:	f7fe fbc4 	bl	800230c <HAL_RCC_GetPCLK1Freq>
 8003b84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b86:	e014      	b.n	8003bb2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b88:	f7fe fbd6 	bl	8002338 <HAL_RCC_GetPCLK2Freq>
 8003b8c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b8e:	e010      	b.n	8003bb2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b90:	4b1a      	ldr	r3, [pc, #104]	; (8003bfc <UART_SetConfig+0x5c0>)
 8003b92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003b94:	e00d      	b.n	8003bb2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b96:	f7fe fb21 	bl	80021dc <HAL_RCC_GetSysClockFreq>
 8003b9a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b9c:	e009      	b.n	8003bb2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ba2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ba4:	e005      	b.n	8003bb2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003bb0:	bf00      	nop
    }

    if (pclk != 0U)
 8003bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d028      	beq.n	8003c0a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbc:	4a10      	ldr	r2, [pc, #64]	; (8003c00 <UART_SetConfig+0x5c4>)
 8003bbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc6:	fbb3 f2f2 	udiv	r2, r3, r2
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	085b      	lsrs	r3, r3, #1
 8003bd0:	441a      	add	r2, r3
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bda:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bdc:	6a3b      	ldr	r3, [r7, #32]
 8003bde:	2b0f      	cmp	r3, #15
 8003be0:	d910      	bls.n	8003c04 <UART_SetConfig+0x5c8>
 8003be2:	6a3b      	ldr	r3, [r7, #32]
 8003be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003be8:	d20c      	bcs.n	8003c04 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003bea:	6a3b      	ldr	r3, [r7, #32]
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	60da      	str	r2, [r3, #12]
 8003bf4:	e009      	b.n	8003c0a <UART_SetConfig+0x5ce>
 8003bf6:	bf00      	nop
 8003bf8:	40008000 	.word	0x40008000
 8003bfc:	00f42400 	.word	0x00f42400
 8003c00:	080043e4 	.word	0x080043e4
      }
      else
      {
        ret = HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	2200      	movs	r2, #0
 8003c24:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003c26:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3730      	adds	r7, #48	; 0x30
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003c34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c40:	f003 0308 	and.w	r3, r3, #8
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00a      	beq.n	8003c5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00a      	beq.n	8003c80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00a      	beq.n	8003ca2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca6:	f003 0304 	and.w	r3, r3, #4
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00a      	beq.n	8003cc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc8:	f003 0310 	and.w	r3, r3, #16
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00a      	beq.n	8003ce6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cea:	f003 0320 	and.w	r3, r3, #32
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00a      	beq.n	8003d08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	430a      	orrs	r2, r1
 8003d06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d01a      	beq.n	8003d4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	430a      	orrs	r2, r1
 8003d28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d32:	d10a      	bne.n	8003d4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	430a      	orrs	r2, r1
 8003d48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00a      	beq.n	8003d6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	605a      	str	r2, [r3, #4]
  }
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b098      	sub	sp, #96	; 0x60
 8003d7c:	af02      	add	r7, sp, #8
 8003d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d88:	f7fd f896 	bl	8000eb8 <HAL_GetTick>
 8003d8c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0308 	and.w	r3, r3, #8
 8003d98:	2b08      	cmp	r3, #8
 8003d9a:	d12f      	bne.n	8003dfc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003da4:	2200      	movs	r2, #0
 8003da6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 f88e 	bl	8003ecc <UART_WaitOnFlagUntilTimeout>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d022      	beq.n	8003dfc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dbe:	e853 3f00 	ldrex	r3, [r3]
 8003dc2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dca:	653b      	str	r3, [r7, #80]	; 0x50
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dd4:	647b      	str	r3, [r7, #68]	; 0x44
 8003dd6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003dda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ddc:	e841 2300 	strex	r3, r2, [r1]
 8003de0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1e6      	bne.n	8003db6 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2220      	movs	r2, #32
 8003dec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e063      	b.n	8003ec4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0304 	and.w	r3, r3, #4
 8003e06:	2b04      	cmp	r3, #4
 8003e08:	d149      	bne.n	8003e9e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e0a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e0e:	9300      	str	r3, [sp, #0]
 8003e10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e12:	2200      	movs	r2, #0
 8003e14:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 f857 	bl	8003ecc <UART_WaitOnFlagUntilTimeout>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d03c      	beq.n	8003e9e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2c:	e853 3f00 	ldrex	r3, [r3]
 8003e30:	623b      	str	r3, [r7, #32]
   return(result);
 8003e32:	6a3b      	ldr	r3, [r7, #32]
 8003e34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	461a      	mov	r2, r3
 8003e40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e42:	633b      	str	r3, [r7, #48]	; 0x30
 8003e44:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e4a:	e841 2300 	strex	r3, r2, [r1]
 8003e4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1e6      	bne.n	8003e24 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	3308      	adds	r3, #8
 8003e5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	e853 3f00 	ldrex	r3, [r3]
 8003e64:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f023 0301 	bic.w	r3, r3, #1
 8003e6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	3308      	adds	r3, #8
 8003e74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e76:	61fa      	str	r2, [r7, #28]
 8003e78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7a:	69b9      	ldr	r1, [r7, #24]
 8003e7c:	69fa      	ldr	r2, [r7, #28]
 8003e7e:	e841 2300 	strex	r3, r2, [r1]
 8003e82:	617b      	str	r3, [r7, #20]
   return(result);
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1e5      	bne.n	8003e56 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2220      	movs	r2, #32
 8003e8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e012      	b.n	8003ec4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2220      	movs	r2, #32
 8003eaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3758      	adds	r7, #88	; 0x58
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	603b      	str	r3, [r7, #0]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003edc:	e049      	b.n	8003f72 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee4:	d045      	beq.n	8003f72 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ee6:	f7fc ffe7 	bl	8000eb8 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d302      	bcc.n	8003efc <UART_WaitOnFlagUntilTimeout+0x30>
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d101      	bne.n	8003f00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e048      	b.n	8003f92 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0304 	and.w	r3, r3, #4
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d031      	beq.n	8003f72 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	69db      	ldr	r3, [r3, #28]
 8003f14:	f003 0308 	and.w	r3, r3, #8
 8003f18:	2b08      	cmp	r3, #8
 8003f1a:	d110      	bne.n	8003f3e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2208      	movs	r2, #8
 8003f22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f000 f838 	bl	8003f9a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2208      	movs	r2, #8
 8003f2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e029      	b.n	8003f92 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	69db      	ldr	r3, [r3, #28]
 8003f44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f4c:	d111      	bne.n	8003f72 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f000 f81e 	bl	8003f9a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2220      	movs	r2, #32
 8003f62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e00f      	b.n	8003f92 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	69da      	ldr	r2, [r3, #28]
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	68ba      	ldr	r2, [r7, #8]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	bf0c      	ite	eq
 8003f82:	2301      	moveq	r3, #1
 8003f84:	2300      	movne	r3, #0
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	461a      	mov	r2, r3
 8003f8a:	79fb      	ldrb	r3, [r7, #7]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d0a6      	beq.n	8003ede <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b095      	sub	sp, #84	; 0x54
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003faa:	e853 3f00 	ldrex	r3, [r3]
 8003fae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fc0:	643b      	str	r3, [r7, #64]	; 0x40
 8003fc2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003fc6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fc8:	e841 2300 	strex	r3, r2, [r1]
 8003fcc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1e6      	bne.n	8003fa2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	3308      	adds	r3, #8
 8003fda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fdc:	6a3b      	ldr	r3, [r7, #32]
 8003fde:	e853 3f00 	ldrex	r3, [r3]
 8003fe2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fea:	f023 0301 	bic.w	r3, r3, #1
 8003fee:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	3308      	adds	r3, #8
 8003ff6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ff8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ffa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ffc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ffe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004000:	e841 2300 	strex	r3, r2, [r1]
 8004004:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1e3      	bne.n	8003fd4 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004010:	2b01      	cmp	r3, #1
 8004012:	d118      	bne.n	8004046 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	e853 3f00 	ldrex	r3, [r3]
 8004020:	60bb      	str	r3, [r7, #8]
   return(result);
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	f023 0310 	bic.w	r3, r3, #16
 8004028:	647b      	str	r3, [r7, #68]	; 0x44
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	461a      	mov	r2, r3
 8004030:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004032:	61bb      	str	r3, [r7, #24]
 8004034:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004036:	6979      	ldr	r1, [r7, #20]
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	e841 2300 	strex	r3, r2, [r1]
 800403e:	613b      	str	r3, [r7, #16]
   return(result);
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1e6      	bne.n	8004014 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2220      	movs	r2, #32
 800404a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	675a      	str	r2, [r3, #116]	; 0x74
}
 800405a:	bf00      	nop
 800405c:	3754      	adds	r7, #84	; 0x54
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr

08004066 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004066:	b580      	push	{r7, lr}
 8004068:	b084      	sub	sp, #16
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004072:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f7ff fac3 	bl	8003610 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800408a:	bf00      	nop
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004092:	b580      	push	{r7, lr}
 8004094:	b088      	sub	sp, #32
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	e853 3f00 	ldrex	r3, [r3]
 80040a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040ae:	61fb      	str	r3, [r7, #28]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	461a      	mov	r2, r3
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	61bb      	str	r3, [r7, #24]
 80040ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040bc:	6979      	ldr	r1, [r7, #20]
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	e841 2300 	strex	r3, r2, [r1]
 80040c4:	613b      	str	r3, [r7, #16]
   return(result);
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1e6      	bne.n	800409a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2220      	movs	r2, #32
 80040d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f7ff fa8e 	bl	80035fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040e0:	bf00      	nop
 80040e2:	3720      	adds	r7, #32
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004132:	2b01      	cmp	r3, #1
 8004134:	d101      	bne.n	800413a <HAL_UARTEx_DisableFifoMode+0x16>
 8004136:	2302      	movs	r3, #2
 8004138:	e027      	b.n	800418a <HAL_UARTEx_DisableFifoMode+0x66>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2224      	movs	r2, #36	; 0x24
 8004146:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 0201 	bic.w	r2, r2, #1
 8004160:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004168:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2220      	movs	r2, #32
 800417c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3714      	adds	r7, #20
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr

08004196 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b084      	sub	sp, #16
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
 800419e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d101      	bne.n	80041ae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80041aa:	2302      	movs	r3, #2
 80041ac:	e02d      	b.n	800420a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2224      	movs	r2, #36	; 0x24
 80041ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f022 0201 	bic.w	r2, r2, #1
 80041d4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	683a      	ldr	r2, [r7, #0]
 80041e6:	430a      	orrs	r2, r1
 80041e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f850 	bl	8004290 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2220      	movs	r2, #32
 80041fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b084      	sub	sp, #16
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
 800421a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004222:	2b01      	cmp	r3, #1
 8004224:	d101      	bne.n	800422a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004226:	2302      	movs	r3, #2
 8004228:	e02d      	b.n	8004286 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2201      	movs	r2, #1
 800422e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2224      	movs	r2, #36	; 0x24
 8004236:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f022 0201 	bic.w	r2, r2, #1
 8004250:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	683a      	ldr	r2, [r7, #0]
 8004262:	430a      	orrs	r2, r1
 8004264:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 f812 	bl	8004290 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2220      	movs	r2, #32
 8004278:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3710      	adds	r7, #16
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
	...

08004290 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800429c:	2b00      	cmp	r3, #0
 800429e:	d108      	bne.n	80042b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80042b0:	e031      	b.n	8004316 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80042b2:	2308      	movs	r3, #8
 80042b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80042b6:	2308      	movs	r3, #8
 80042b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	0e5b      	lsrs	r3, r3, #25
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	f003 0307 	and.w	r3, r3, #7
 80042c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	0f5b      	lsrs	r3, r3, #29
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	f003 0307 	and.w	r3, r3, #7
 80042d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80042da:	7bbb      	ldrb	r3, [r7, #14]
 80042dc:	7b3a      	ldrb	r2, [r7, #12]
 80042de:	4911      	ldr	r1, [pc, #68]	; (8004324 <UARTEx_SetNbDataToProcess+0x94>)
 80042e0:	5c8a      	ldrb	r2, [r1, r2]
 80042e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80042e6:	7b3a      	ldrb	r2, [r7, #12]
 80042e8:	490f      	ldr	r1, [pc, #60]	; (8004328 <UARTEx_SetNbDataToProcess+0x98>)
 80042ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80042ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80042f8:	7bfb      	ldrb	r3, [r7, #15]
 80042fa:	7b7a      	ldrb	r2, [r7, #13]
 80042fc:	4909      	ldr	r1, [pc, #36]	; (8004324 <UARTEx_SetNbDataToProcess+0x94>)
 80042fe:	5c8a      	ldrb	r2, [r1, r2]
 8004300:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004304:	7b7a      	ldrb	r2, [r7, #13]
 8004306:	4908      	ldr	r1, [pc, #32]	; (8004328 <UARTEx_SetNbDataToProcess+0x98>)
 8004308:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800430a:	fb93 f3f2 	sdiv	r3, r3, r2
 800430e:	b29a      	uxth	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004316:	bf00      	nop
 8004318:	3714      	adds	r7, #20
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	080043fc 	.word	0x080043fc
 8004328:	08004404 	.word	0x08004404

0800432c <memset>:
 800432c:	4402      	add	r2, r0
 800432e:	4603      	mov	r3, r0
 8004330:	4293      	cmp	r3, r2
 8004332:	d100      	bne.n	8004336 <memset+0xa>
 8004334:	4770      	bx	lr
 8004336:	f803 1b01 	strb.w	r1, [r3], #1
 800433a:	e7f9      	b.n	8004330 <memset+0x4>

0800433c <__libc_init_array>:
 800433c:	b570      	push	{r4, r5, r6, lr}
 800433e:	4d0d      	ldr	r5, [pc, #52]	; (8004374 <__libc_init_array+0x38>)
 8004340:	4c0d      	ldr	r4, [pc, #52]	; (8004378 <__libc_init_array+0x3c>)
 8004342:	1b64      	subs	r4, r4, r5
 8004344:	10a4      	asrs	r4, r4, #2
 8004346:	2600      	movs	r6, #0
 8004348:	42a6      	cmp	r6, r4
 800434a:	d109      	bne.n	8004360 <__libc_init_array+0x24>
 800434c:	4d0b      	ldr	r5, [pc, #44]	; (800437c <__libc_init_array+0x40>)
 800434e:	4c0c      	ldr	r4, [pc, #48]	; (8004380 <__libc_init_array+0x44>)
 8004350:	f000 f818 	bl	8004384 <_init>
 8004354:	1b64      	subs	r4, r4, r5
 8004356:	10a4      	asrs	r4, r4, #2
 8004358:	2600      	movs	r6, #0
 800435a:	42a6      	cmp	r6, r4
 800435c:	d105      	bne.n	800436a <__libc_init_array+0x2e>
 800435e:	bd70      	pop	{r4, r5, r6, pc}
 8004360:	f855 3b04 	ldr.w	r3, [r5], #4
 8004364:	4798      	blx	r3
 8004366:	3601      	adds	r6, #1
 8004368:	e7ee      	b.n	8004348 <__libc_init_array+0xc>
 800436a:	f855 3b04 	ldr.w	r3, [r5], #4
 800436e:	4798      	blx	r3
 8004370:	3601      	adds	r6, #1
 8004372:	e7f2      	b.n	800435a <__libc_init_array+0x1e>
 8004374:	08004414 	.word	0x08004414
 8004378:	08004414 	.word	0x08004414
 800437c:	08004414 	.word	0x08004414
 8004380:	08004418 	.word	0x08004418

08004384 <_init>:
 8004384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004386:	bf00      	nop
 8004388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800438a:	bc08      	pop	{r3}
 800438c:	469e      	mov	lr, r3
 800438e:	4770      	bx	lr

08004390 <_fini>:
 8004390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004392:	bf00      	nop
 8004394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004396:	bc08      	pop	{r3}
 8004398:	469e      	mov	lr, r3
 800439a:	4770      	bx	lr
